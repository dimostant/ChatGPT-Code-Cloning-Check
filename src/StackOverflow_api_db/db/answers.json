{
    "items": [
        {
            "26320899": [
                {
                    "owner": {
                        "account_id": 20026,
                        "reputation": 81808,
                        "user_id": 47453,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/412dc332ab3593c636e5a5202cf98870?s=256&d=identicon&r=PG",
                        "display_name": "Bill Lynch",
                        "link": "https://stackoverflow.com/users/47453/bill-lynch"
                    },
                    "is_accepted": false,
                    "score": 331,
                    "last_activity_date": 1732875069,
                    "last_edit_date": 1732875069,
                    "creation_date": 1413077177,
                    "answer_id": 26320938,
                    "question_id": 26320899,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let's look at an example:</p>\n<pre><code>def f(key, value, my_dict={}):\n    my_dict[key] = value\n    return my_dict\n\nprint(f('a', 1))\nprint(f('b', 2))\n</code></pre>\n<p>Which you probably expect to output:</p>\n<pre><code>{'a': 1}\n{'b': 2}\n</code></pre>\n<p>But actually outputs:</p>\n<pre><code>{'a': 1}\n{'a': 1, 'b': 2}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3057,
                        "reputation": 248278,
                        "user_id": 4323,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/qqgFU.png?s=256",
                        "display_name": "John Zwinck",
                        "link": "https://stackoverflow.com/users/4323/john-zwinck"
                    },
                    "is_accepted": true,
                    "score": 298,
                    "last_activity_date": 1413076975,
                    "creation_date": 1413076975,
                    "answer_id": 26320917,
                    "question_id": 26320899,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's dangerous only if your function will modify the argument.  If you modify a default argument, it will persist until the next call, so your \"empty\" dict will start to contain values on calls other than the first one.</p>\n\n<p>Yes, using <code>None</code> is both safe and conventional in such cases.</p>\n"
                }
            ]
        },
        {
            "9347078": [
                {
                    "owner": {
                        "account_id": 1217314,
                        "reputation": 16066,
                        "user_id": 1184641,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/31ee5565d022bd50b3e21f34f102f957?s=256&d=identicon&r=PG",
                        "display_name": "Appleman1234",
                        "link": "https://stackoverflow.com/users/1184641/appleman1234"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1548384792,
                    "last_edit_date": 1548384792,
                    "creation_date": 1329639458,
                    "answer_id": 9347724,
                    "question_id": 9347078,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>See the following libraries.</p>\n\n<ul>\n<li><a href=\"https://code.google.com/archive/p/suffixtree/\" rel=\"nofollow noreferrer\">suffixtree</a></li>\n<li><a href=\"https://github.com/kvh/Python-Suffix-Tree\" rel=\"nofollow noreferrer\">Python-Suffix-Tree</a> </li>\n<li><a href=\"https://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/\" rel=\"nofollow noreferrer\">SuffixTree</a></li>\n<li><a href=\"http://www.daimi.au.dk/~mailund/suffix_tree.html\" rel=\"nofollow noreferrer\">SuffixTree</a> (same name different project, supports generalized suffix trees)</li>\n<li><a href=\"https://code.google.com/archive/p/pysuffix/\" rel=\"nofollow noreferrer\">pysuffix</a> (This is suffix arrays)</li>\n</ul>\n"
                }
            ]
        },
        {
            "14278664": [
                {
                    "owner": {
                        "account_id": 449780,
                        "reputation": 10214,
                        "user_id": 844759,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/65771458eb066098b716e6ee31df1738?s=256&d=identicon&r=PG",
                        "display_name": "Hui Zheng",
                        "link": "https://stackoverflow.com/users/844759/hui-zheng"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1357911458,
                    "last_edit_date": 1357911458,
                    "creation_date": 1357909215,
                    "answer_id": 14278732,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try:</p>\n\n<pre><code>sum([['a','b','c'], ['d','e','f']], [])\n</code></pre>\n\n<p>Or longer but faster:</p>\n\n<pre><code>[i for l in [['a', 'b', 'c'], ['d', 'e', 'f']] for i in l]\n</code></pre>\n\n<p>Or use <code>itertools.chain</code> as @AshwiniChaudhary suggested:</p>\n\n<pre><code>list(itertools.chain(*[['a', 'b', 'c'], ['d', 'e', 'f']]))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2209280,
                        "reputation": 1319,
                        "user_id": 1951653,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b3ea665190af328962fbd213ef898929?s=256&d=identicon&r=PG",
                        "display_name": "Kiwisauce",
                        "link": "https://stackoverflow.com/users/1951653/kiwisauce"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1357910062,
                    "creation_date": 1357910062,
                    "answer_id": 14278964,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try the \"extend\" method of a list object:</p>\n\n<pre><code> &gt;&gt;&gt; res = []\n &gt;&gt;&gt; for list_to_extend in range(0, 10), range(10, 20):\n         res.extend(list_to_extend)\n &gt;&gt;&gt; res\n [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n</code></pre>\n\n<p>Or shorter:</p>\n\n<pre><code>&gt;&gt;&gt; res = []\n&gt;&gt;&gt; map(res.extend, ([1, 2, 3], [4, 5, 6]))\n&gt;&gt;&gt; res\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1788935,
                        "reputation": 3857,
                        "user_id": 1629755,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ac5c9b83c1963291b3f5520719f7996?s=256&d=identicon&r=PG",
                        "display_name": "Ketouem",
                        "link": "https://stackoverflow.com/users/1629755/ketouem"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1357909797,
                    "creation_date": 1357909797,
                    "answer_id": 14278905,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using list comprehension:</p>\n\n<pre><code>ar = [['a','b','c'],['d','e','f']]\nconcat_list = [j for i in ar for j in i]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 228179,
                        "reputation": 12557,
                        "user_id": 490332,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/4277666449f41474561f867f04f32b73?s=256&d=identicon&r=PG",
                        "display_name": "Harpal",
                        "link": "https://stackoverflow.com/users/490332/harpal"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1357909252,
                    "creation_date": 1357909252,
                    "answer_id": 14278749,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>mergedlist = list_letters[0] + list_letters[1]\n</code></pre>\n\n<p>This assumes you have a list of a static length and you always want to merge the first two</p>\n\n<pre><code>&gt;&gt;&gt; list_letters=[['a','b'],['c','d']]\n&gt;&gt;&gt; list_letters[0]+list_letters[1]\n['a', 'b', 'c', 'd']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1730353,
                        "reputation": 48494,
                        "user_id": 1651941,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/a513bc1fa519d2fcf5e4e0d9b5500101?s=256&d=identicon&r=PG",
                        "display_name": "Sibi",
                        "link": "https://stackoverflow.com/users/1651941/sibi"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1357909172,
                    "creation_date": 1357909172,
                    "answer_id": 14278718,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This would do:</p>\n\n<pre><code>a = [['a','b','c'],['d','e','f']]\nreduce(lambda x,y:x+y,a)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 192010,
                        "reputation": 10580,
                        "user_id": 432913,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/2fe7355b33d1b0bd79b1224691b00841?s=256&d=identicon&r=PG",
                        "display_name": "will",
                        "link": "https://stackoverflow.com/users/432913/will"
                    },
                    "is_accepted": true,
                    "score": 21,
                    "last_activity_date": 1357909138,
                    "creation_date": 1357909138,
                    "answer_id": 14278710,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>list concatenation is just done with the <code>+</code> operator.</p>\n\n<p>so </p>\n\n<pre><code>total = []\nfor i in [['a','b','c'],['d','e','f']]:\n    total += i\n\nprint total\n</code></pre>\n"
                }
            ]
        },
        {
            "52297740": [
                {
                    "owner": {
                        "account_id": 16386613,
                        "reputation": 37,
                        "user_id": 11836432,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-xFSfaZawQtM/AAAAAAAAAAI/AAAAAAAAAAc/gmAtpKBAt6g/photo.jpg?sz=256",
                        "display_name": "aryan aryan",
                        "link": "https://stackoverflow.com/users/11836432/aryan-aryan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1631079117,
                    "last_edit_date": 1631079117,
                    "creation_date": 1631078663,
                    "answer_id": 69097391,
                    "question_id": 52297740,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In this type, we will see that we have some column values that are nan or empty so we were not able to do this. Hence, when you applied the code as here given below it, will work.</p>\n<pre><code>df_pcc_mod = df_pcc_mod[~df_pcc_mod['Invoice'].str.contains('Reversed',na=False)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860800,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": true,
                    "score": 170,
                    "last_activity_date": 1536763119,
                    "creation_date": 1536763119,
                    "answer_id": 52297788,
                    "question_id": 52297740,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think there are <code>NaN</code>s values, so need specify parameter <code>na</code>:</p>\n\n<pre><code>df = pd.DataFrame({\n    'column': ['Total','a',np.nan],\n    'B': list(range(3))\n})\nprint (df)\n  column  B\n0  Total  0\n1      a  1\n2    NaN  2\n\ndf = df[~df[\"column\"].str.contains(\"Total\", na=False)]\nprint (df)\n  column  B\n1      a  1\n2    NaN  2\n</code></pre>\n"
                }
            ]
        },
        {
            "19243020": [
                {
                    "owner": {
                        "account_id": 156080,
                        "reputation": 35207,
                        "user_id": 373151,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/b8ac2a874b3037fc8afea92cf222ff12?s=256&d=identicon&r=PG",
                        "display_name": "Hari Menon",
                        "link": "https://stackoverflow.com/users/373151/hari-menon"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1381222694,
                    "last_edit_date": 1381222694,
                    "creation_date": 1381222063,
                    "answer_id": 19243080,
                    "question_id": 19243020,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/2/library/os.html#os.popen\" rel=\"noreferrer\"><code>os.popen()</code></a>:</p>\n\n<pre><code>tmp = os.popen(\"ls\").read()\n</code></pre>\n\n<p>The newer way (> python 2.6) to do this is to use <a href=\"http://docs.python.org/2/library/subprocess.html#subprocess-replacements\" rel=\"noreferrer\"><code>subprocess</code></a>:</p>\n\n<pre><code>proc = subprocess.Popen('ls', stdout=subprocess.PIPE)\ntmp = proc.stdout.read()\n</code></pre>\n"
                }
            ]
        },
        {
            "2580497": [
                {
                    "owner": {
                        "account_id": 5156519,
                        "reputation": 3810,
                        "user_id": 5272567,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/kp0bT.png?s=256",
                        "display_name": "Matthias",
                        "link": "https://stackoverflow.com/users/5272567/matthias"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1655734868,
                    "creation_date": 1655734868,
                    "answer_id": 72688593,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To put the main thing of some of the other answers a bit clearer, you can create columns dynamically by adding them to a list and then doing</p>\n<pre><code>table = Table(\n    table_name,\n    meta,\n    *columns\n)\n</code></pre>\n<p>But this is perhaps a python thing more than a sqlalchemy thing, to realize you can unpack the list into function arguments with <code>*</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1226232,
                        "reputation": 157,
                        "user_id": 1191714,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a585b846f74a5336d0bc48888b873ab?s=256&d=identicon&r=PG",
                        "display_name": "trash80",
                        "link": "https://stackoverflow.com/users/1191714/trash80"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1328511837,
                    "creation_date": 1328511837,
                    "answer_id": 9156660,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I used nosklo's solution (thanks!) but I already had a primary key (passed in as pk_col) within the column line (first line of csv). So I thought I'd share my modification. I used a ternary. </p>\n\n<pre><code>table = Table(tablename, metadata,\n    *((Column(pk_col, Integer, primary_key=True)) if rowname == pk_col else (Column(rowname, String())) for rowname in row.keys()))\ntable.create()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222366,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1270501879,
                    "last_edit_date": 1270501879,
                    "creation_date": 1270494958,
                    "answer_id": 2580543,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's <a href=\"http://docs.python.org/library/sqlite3\" rel=\"noreferrer\"><code>sqlite3</code></a>, included into python. With it you can create a database (<strong>on memory</strong>) and add rows to it, and perform SQL queries.</p>\n\n<p>If you want neat ActiveRecord-like functionality you should add an external ORM, like <a href=\"http://sqlalchemy.org\" rel=\"noreferrer\">sqlalchemy</a>. That's a separate download though</p>\n\n<p>Quick example using sqlalchemy:</p>\n\n<pre><code>from sqlalchemy import create_engine, Column, String, Integer, MetaData, Table\nfrom sqlalchemy.orm import mapper, create_session\nimport csv\nCSV_FILE = 'foo.csv'\nengine = create_engine('sqlite://') # memory-only database\n\ntable = None\nmetadata = MetaData(bind=engine)\nwith open(CSV_FILE) as f:\n    # assume first line is header\n    cf = csv.DictReader(f, delimiter=',')\n    for row in cf:\n        if table is None:\n            # create the table\n            table = Table('foo', metadata, \n                Column('id', Integer, primary_key=True),\n                *(Column(rowname, String()) for rowname in row.keys()))\n            table.create()\n        # insert data into the table\n        table.insert().values(**row).execute()\n\nclass CsvTable(object): pass\nmapper(CsvTable, table)\nsession = create_session(bind=engine, autocommit=False, autoflush=True)\n</code></pre>\n\n<p>Now you can query the database, filtering by any field, etc.</p>\n\n<p>Suppose you run the code above on this csv:</p>\n\n<pre><code>name,age,nickname\nnosklo,32,nosklo\nAfila Tun,32,afilatun\nFoo Bar,33,baz\n</code></pre>\n\n<p>That will create and populate a table in memory with fields <code>name</code>, <code>age</code>, <code>nickname</code>. You can then query the table:</p>\n\n<pre><code>for r in session.query(CsvTable).filter(CsvTable.age == '32'):\n    print r.name, r.age, r.nickname\n</code></pre>\n\n<p>That will automatically create and run a <code>SELECT</code> query and return the correct rows.</p>\n\n<p>Another advantage of using sqlalchemy is that, if you decide to use another, more powerful database in the future, you can do so pratically without changing the code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79443,
                        "reputation": 9352,
                        "user_id": 225260,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/586d5e4913fea4540cb57bb9814d1c57?s=256&d=identicon&r=PG",
                        "display_name": "anijhaw",
                        "link": "https://stackoverflow.com/users/225260/anijhaw"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1270498473,
                    "creation_date": 1270498473,
                    "answer_id": 2580913,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>PHP FlatfileDB available <a href=\"http://sourceforge.net/projects/flatfiledb/\" rel=\"nofollow noreferrer\">here</a> is a very good option if you are building a web app</p>\n"
                },
                {
                    "owner": {
                        "account_id": 113371,
                        "reputation": 103267,
                        "user_id": 298607,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/DVW9g.jpg?s=256",
                        "display_name": "dawg",
                        "link": "https://stackoverflow.com/users/298607/dawg"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270495788,
                    "last_edit_date": 1270495788,
                    "creation_date": 1270495014,
                    "answer_id": 2580548,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Looked at Perl and and Text::CSV and DBI? There are many modules on CPAN to do exactly this. Here is an example (from <a href=\"http://perlmeme.org/tutorials/parsing_csv.html\" rel=\"nofollow noreferrer\">HERE</a>):</p>\n\n<pre><code>#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse DBI;\n\n# Connect to the database, (the directory containing our csv file(s))\n\nmy $dbh = DBI-&gt;connect(\"DBI:CSV:f_dir=.;csv_eol=\\n;\");\n\n# Associate our csv file with the table name 'prospects'\n\n$dbh-&gt;{'csv_tables'}-&gt;{'prospects'} = { 'file' =&gt; 'prospects.csv'};\n\n# Output the name and contact field from each row\n\nmy $sth = $dbh-&gt;prepare(\"SELECT * FROM prospects WHERE name LIKE 'G%'\");\n$sth-&gt;execute();\nwhile (my $row = $sth-&gt;fetchrow_hashref) {\n     print(\"name = \", $row-&gt;{'Name'}, \"  contact = \", $row-&gt;{'Contact'}. \"\\n\");\n}\n$sth-&gt;finish();\n\nname = Glenhuntly Pharmacy  contact = Paul\nname = Gilmour's Shoes  contact = Ringo\n</code></pre>\n\n<p>Just type perldoc DBI   and perldoc Text::CSV at the command prompt for more.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 35717,
                        "reputation": 133961,
                        "user_id": 101258,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JAwXS.jpg?s=256",
                        "display_name": "Justin Ethier",
                        "link": "https://stackoverflow.com/users/101258/justin-ethier"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1270495014,
                    "creation_date": 1270495014,
                    "answer_id": 2580549,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You could use either scripting language to parse the CSV file and store the data into <a href=\"http://sqlite.org/\" rel=\"nofollow noreferrer\">SQLite</a>, which just uses a single file for storage. From there you have it in a database and can run queries against it.</p>\n\n<p>Alternatively, on windows you can setup an ODBC data source as a CSV file. But it may be difficult to automate this.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 63410,
                        "reputation": 5861,
                        "user_id": 187712,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/54a0724df77a092205b5272cfb526c5c?s=256&d=identicon&r=PG",
                        "display_name": "Azeem.Butt",
                        "link": "https://stackoverflow.com/users/187712/azeem-butt"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1270494955,
                    "creation_date": 1270494955,
                    "answer_id": 2580542,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>CSV files are not databases--they have no indices--and any SQL simulation you imposed upon them would amount to little more than searching through the entire thing over and over again. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 15070,
                        "reputation": 8829,
                        "user_id": 31472,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4bc093df8732b3ef949fed36e64d131d?s=256&d=identicon&r=PG",
                        "display_name": "lexu",
                        "link": "https://stackoverflow.com/users/31472/lexu"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270494951,
                    "creation_date": 1270494951,
                    "answer_id": 2580540,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use a DB in a library like <a href=\"http://sqlite.org/\" rel=\"nofollow noreferrer\">SQLite</a>. \nThere are <a href=\"http://docs.python.org/library/sqlite3.html\" rel=\"nofollow noreferrer\">Python</a> and <a href=\"http://sqlite-ruby.rubyforge.org/\" rel=\"nofollow noreferrer\">Ruby</a> versions .</p>\n\n<p>Load your CSV into table, there might be modules/libraries to help you here too. Then SQL away.</p>\n"
                }
            ]
        },
        {
            "5881873": [
                {
                    "owner": {
                        "account_id": 1320497,
                        "reputation": 425,
                        "user_id": 1266432,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7cd88fbe9e53c2176bee6be4cb502f8c?s=256&d=identicon&r=PG",
                        "display_name": "formiaczek",
                        "link": "https://stackoverflow.com/users/1266432/formiaczek"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1359384443,
                    "last_edit_date": 1359384443,
                    "creation_date": 1339770743,
                    "answer_id": 11052732,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code># return list of tuples (objclass, name) containing all subclasses in callers' module\ndef FindAllSubclasses(classType):\n    import sys, inspect\n    subclasses = []\n    callers_module = sys._getframe(1).f_globals['__name__']\n    classes = inspect.getmembers(sys.modules[callers_module], inspect.isclass)\n    for name, obj in classes:\n        if (obj is not classType) and (classType in inspect.getmro(obj)):\n            subclasses.append((obj, name))\n    return subclasses\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 37637,
                        "reputation": 95264,
                        "user_id": 107660,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=256&d=identicon&r=PG",
                        "display_name": "Duncan",
                        "link": "https://stackoverflow.com/users/107660/duncan"
                    },
                    "is_accepted": true,
                    "score": 84,
                    "last_activity_date": 1304511796,
                    "last_edit_date": 1304511796,
                    "creation_date": 1304511484,
                    "answer_id": 5883218,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You want to use <code>Widget.__subclasses__()</code> to get a list of all the subclasses. It only looks for direct subclasses though so if you want all of them you'll have to do a bit more work:</p>\n\n<pre><code>def inheritors(klass):\n    subclasses = set()\n    work = [klass]\n    while work:\n        parent = work.pop()\n        for child in parent.__subclasses__():\n            if child not in subclasses:\n                subclasses.add(child)\n                work.append(child)\n    return subclasses\n</code></pre>\n\n<p>N.B. If you are using Python 2.x this only works for new-style classes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1422,
                        "reputation": 90699,
                        "user_id": 1897,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/09d9b10ad83581c21328d44e48c77b9d?s=256&d=identicon&r=PG",
                        "display_name": "Imran",
                        "link": "https://stackoverflow.com/users/1897/imran"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1304511323,
                    "last_edit_date": 1304511323,
                    "creation_date": 1304505775,
                    "answer_id": 5882155,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can track inheritance with your own metaclass</p>\n\n<pre><code>import collections\n\nclass A(object):\n    class __metaclass__(type):\n        __inheritors__ = defaultdict(list)\n\n        def __new__(meta, name, bases, dct):\n            klass = type.__new__(meta, name, bases, dct)\n            for base in klass.mro()[1:-1]:\n                meta.__inheritors__[base].append(klass)\n            return klass\n\nclass B(A):\n    pass\n\nclass C(B):\n    pass\n\n&gt;&gt;&gt; A.__inheritors__\ndefaultdict(&lt;type 'list'&gt;, {&lt;class '__main__.A'&gt;: [&lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;], &lt;class '__main__.B'&gt;: [&lt;class '__main__.C'&gt;]})\n</code></pre>\n\n<p>Anything that is inherited from <code>A</code> or it's derived classes will be tracked. You will get full inheritance map when all the modules in your application are loaded.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2665694"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1304504763,
                    "creation_date": 1304504763,
                    "answer_id": 5881961,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You have to walk through all objects in the global namespace (globals()) and check if the related object/class is a subclass of the some other class (check the Python docs for issubclass()).</p>\n"
                }
            ]
        },
        {
            "1679384": [
                {
                    "owner": {
                        "account_id": 25166,
                        "reputation": 29353,
                        "user_id": 64495,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/1560b36868b41ed1f7aa8ea32047d20b?s=256&d=identicon&r=PG",
                        "display_name": "Bj&#246;rn",
                        "link": "https://stackoverflow.com/users/64495/bj%c3%b6rn"
                    },
                    "is_accepted": false,
                    "score": 559,
                    "last_activity_date": 1677810376,
                    "last_edit_date": 1677810376,
                    "creation_date": 1257413818,
                    "answer_id": 1679395,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>dict.items()\n</code></pre>\n<p>Does the trick.</p>\n<p>(For Python 2 only)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22723,
                        "reputation": 229073,
                        "user_id": 56338,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=256&d=identicon&r=PG",
                        "display_name": "sth",
                        "link": "https://stackoverflow.com/users/56338/sth"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1565050456,
                    "last_edit_date": 1565050456,
                    "creation_date": 1257414242,
                    "answer_id": 1679430,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Probably you just want this:</p>\n\n<pre><code>dictList = dict.items()\n</code></pre>\n\n<p>Your approach has two problems. For one you use <code>key</code> and <code>value</code> in quotes, which are strings with the letters \"key\" and \"value\", not related to the variables of that names. Also you keep adding elements to the \"temporary\" list and never get rid of old elements that are already in it from previous iterations. Make sure you have a new and empty <code>temp</code> list in each iteration and use the <code>key</code> and <code>value</code> variables:</p>\n\n<pre><code>for key, value in dict.iteritems():\n    temp = []\n    aKey = key\n    aValue = value\n    temp.append(aKey)\n    temp.append(aValue)\n    dictList.append(temp)\n</code></pre>\n\n<p>Also note that this could be written shorter without the temporary variables (and in Python 3 with <code>items()</code> instead of <code>iteritems()</code>):</p>\n\n<pre><code>for key, value in dict.items():\n    dictList.append([key, value])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25145,
                        "reputation": 12276,
                        "user_id": 64406,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/ae16cb4f6d78e485b04ce1e821592ae5?s=256&d=identicon&r=PG",
                        "display_name": "Martin DeMello",
                        "link": "https://stackoverflow.com/users/64406/martin-demello"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1516363702,
                    "last_edit_date": 1516363702,
                    "creation_date": 1257413928,
                    "answer_id": 1679408,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code> &gt;&gt;&gt; a = {'foo': 'bar', 'baz': 'quux', 'hello': 'world'}\n &gt;&gt;&gt; list(reduce(lambda x, y: x + y, a.items()))\n ['foo', 'bar', 'baz', 'quux', 'hello', 'world']\n</code></pre>\n\n<p>To explain: a.items() returns a list of tuples. Adding two tuples together makes one tuple containing all elements. Thus the reduction creates one tuple containing all keys and values and then the list(...) makes a list from that.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 69969,
                        "reputation": 1305,
                        "user_id": 203335,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/908423686b79054db68f32002ab15183?s=256&d=identicon&r=PG",
                        "display_name": "Shay",
                        "link": "https://stackoverflow.com/users/203335/shay"
                    },
                    "is_accepted": false,
                    "score": 81,
                    "last_activity_date": 1441313617,
                    "last_edit_date": 1441313617,
                    "creation_date": 1257420254,
                    "answer_id": 1679918,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You should use <code>dict.items()</code>.</p>\n\n<p>Here is a one liner solution for your problem:</p>\n\n<pre><code>[(k,v) for k,v in dict.items()]\n</code></pre>\n\n<p>and result:</p>\n\n<pre><code>[('Food', 'Fish&amp;Chips'), ('2012', 'Olympics'), ('Capital', 'London')]\n</code></pre>\n\n<p>or you can do</p>\n\n<pre><code>l=[]\n[l.extend([k,v]) for k,v in dict.items()]\n</code></pre>\n\n<p>for:</p>\n\n<pre><code>['Food', 'Fish&amp;Chips', '2012', 'Olympics', 'Capital', 'London']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 320327,
                        "reputation": 28081,
                        "user_id": 638546,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/1944ff44e2356581677a613230c3bc66?s=256&d=identicon&r=PG",
                        "display_name": "Akseli Pal&#233;n",
                        "link": "https://stackoverflow.com/users/638546/akseli-pal%c3%a9n"
                    },
                    "is_accepted": false,
                    "score": 288,
                    "last_activity_date": 1331559989,
                    "creation_date": 1331559989,
                    "answer_id": 9668200,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting from <a href=\"http://docs.python.org/library/stdtypes.html#mapping-types-dict\">dict</a> to list is made easy in Python. Three examples:</p>\n\n<pre><code>&gt;&gt; d = {'a': 'Arthur', 'b': 'Belling'}\n\n&gt;&gt; d.items()\n[('a', 'Arthur'), ('b', 'Belling')]\n\n&gt;&gt; d.keys()\n['a', 'b']\n\n&gt;&gt; d.values()\n['Arthur', 'Belling']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 70175,
                        "reputation": 4131,
                        "user_id": 203747,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b7699be15e710c4be309f9d537fb252b?s=256&d=identicon&r=PG",
                        "display_name": "Morgan",
                        "link": "https://stackoverflow.com/users/203747/morgan"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1257441065,
                    "creation_date": 1257441065,
                    "answer_id": 1682117,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're making a dictionary only to make a list of tuples, as creating dicts like you are may be a pain, you might look into using zip()</p>\n\n<p>Its especialy useful if you've got one heading, and multiple rows. For instance if I assume that you want Olympics stats for countries:</p>\n\n<pre><code>headers = ['Capital', 'Food', 'Year']\ncountries = [\n    ['London', 'Fish &amp; Chips', '2012'],\n    ['Beijing', 'Noodles', '2008'],\n]\n\nfor olympics in countries:\n    print zip(headers, olympics)\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>[('Capital', 'London'), ('Food', 'Fish &amp; Chips'), ('Year', '2012')]\n[('Capital', 'Beijing'), ('Food', 'Noodles'), ('Year', '2008')]\n</code></pre>\n\n<p>Don't know if thats the end goal, and my be off topic, but it could be something to keep in mind.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2288,
                        "reputation": 193380,
                        "user_id": 3171,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=256&d=identicon&r=PG",
                        "display_name": "David Webb",
                        "link": "https://stackoverflow.com/users/3171/david-webb"
                    },
                    "is_accepted": true,
                    "score": 187,
                    "last_activity_date": 1257414243,
                    "last_edit_date": 1257414243,
                    "creation_date": 1257413923,
                    "answer_id": 1679406,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Your problem is that you have <code>key</code> and <code>value</code> in quotes making them strings, i.e. you're setting <code>aKey</code> to contain the string <code>\"key\"</code> and not the value of the variable <code>key</code>.  Also, you're not clearing out the <code>temp</code> list, so you're adding to it each time, instead of just having two items in it.</p>\n\n<p>To fix your code, try something like:</p>\n\n<pre><code>for key, value in dict.iteritems():\n    temp = [key,value]\n    dictlist.append(temp)\n</code></pre>\n\n<p>You don't need to copy the loop variables <code>key</code> and <code>value</code> into another variable before using them so I dropped them out.  Similarly, you don't need to use append to build up a list, you can just specify it between square brackets as shown above.  And we could have done <code>dictlist.append([key,value])</code> if we wanted to be as brief as possible.</p>\n\n<p>Or just use <code>dict.items()</code> as has been suggested.</p>\n"
                }
            ]
        },
        {
            "12935194": [
                {
                    "owner": {
                        "account_id": 3309474,
                        "reputation": 7914,
                        "user_id": 2783312,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/2381d1dbfc1450b861bd808424d01943?s=256&d=identicon&r=PG",
                        "display_name": "DrIDK",
                        "link": "https://stackoverflow.com/users/2783312/dridk"
                    },
                    "is_accepted": false,
                    "score": 721,
                    "last_activity_date": 1666163982,
                    "last_edit_date": 1666163982,
                    "creation_date": 1449014238,
                    "answer_id": 34032549,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest way is to use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>:</p>\n<pre><code>a = [&quot;foo&quot;, &quot;melon&quot;]\nb = [True, False]\nc = list(itertools.product(a, b))\n&gt;&gt; [(&quot;foo&quot;, True), (&quot;foo&quot;, False), (&quot;melon&quot;, True), (&quot;melon&quot;, False)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4535466,
                        "reputation": 2601,
                        "user_id": 3684792,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://www.gravatar.com/avatar/2fece2999fb097ee4cc5cab86501e323?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3684792",
                        "link": "https://stackoverflow.com/users/3684792/user3684792"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1614078896,
                    "last_edit_date": 1614078896,
                    "creation_date": 1457695934,
                    "answer_id": 35939200,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Without <code>itertools</code> as a flattened list:</p>\n<pre><code>[(list1[i], list2[j]) for i in range(len(list1)) for j in range(len(list2))]\n</code></pre>\n<p>or in <strong>Python 2</strong>:</p>\n<pre><code>[(list1[i], list2[j]) for i in xrange(len(list1)) for j in xrange(len(list2))]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2476563,
                        "reputation": 2477,
                        "user_id": 2157087,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2878f8d17abfda0c7b4c06f6be382e54?s=256&d=identicon&r=PG",
                        "display_name": "logic",
                        "link": "https://stackoverflow.com/users/2157087/logic"
                    },
                    "is_accepted": false,
                    "score": 232,
                    "last_activity_date": 1589080816,
                    "last_edit_date": 1589080816,
                    "creation_date": 1471786420,
                    "answer_id": 39064769,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>May be simpler than the simplest one above:</p>\n\n<pre><code>&gt;&gt;&gt; a = [\"foo\", \"bar\"]\n&gt;&gt;&gt; b = [1, 2, 3]\n&gt;&gt;&gt; [(x,y) for x in a for y in b]  # for a list\n[('foo', 1), ('foo', 2), ('foo', 3), ('bar', 1), ('bar', 2), ('bar', 3)]\n&gt;&gt;&gt; ((x,y) for x in a for y in b)  # for a generator if you worry about memory or time complexity.\n&lt;generator object &lt;genexpr&gt; at 0x1048de850&gt;\n</code></pre>\n\n<p>without any import </p>\n"
                },
                {
                    "owner": {
                        "account_id": 64020,
                        "reputation": 109857,
                        "user_id": 189205,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=256&d=identicon&r=PG",
                        "display_name": "interjay",
                        "link": "https://stackoverflow.com/users/189205/interjay"
                    },
                    "is_accepted": true,
                    "score": 145,
                    "last_activity_date": 1586119631,
                    "last_edit_date": 1586119631,
                    "creation_date": 1350480911,
                    "answer_id": 12935562,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Note</strong>: This answer is for the specific question asked above. If you are here from Google and just looking for a way to get a Cartesian product in Python, <code>itertools.product</code> or a simple list comprehension may be what you are looking for - see the other answers.</p>\n\n<hr>\n\n<p>Suppose <code>len(list1) &gt;= len(list2)</code>. Then what you appear to want is to take all permutations of length <code>len(list2)</code> from <code>list1</code> and match them with items from list2. In python:</p>\n\n<pre><code>import itertools\nlist1=['a','b','c']\nlist2=[1,2]\n\n[list(zip(x,list2)) for x in itertools.permutations(list1,len(list2))]\n</code></pre>\n\n<p>Returns</p>\n\n<pre><code>[[('a', 1), ('b', 2)], [('a', 1), ('c', 2)], [('b', 1), ('a', 2)], [('b', 1), ('c', 2)], [('c', 1), ('a', 2)], [('c', 1), ('b', 2)]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14183320,
                        "reputation": 3947,
                        "user_id": 10246144,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-NsnZiVRwG_Y/AAAAAAAAAAI/AAAAAAAAC6I/wzXcaRp5ITE/photo.jpg?sz=256",
                        "display_name": "Steve Alexander",
                        "link": "https://stackoverflow.com/users/10246144/steve-alexander"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1565032304,
                    "last_edit_date": 1565032304,
                    "creation_date": 1565021571,
                    "answer_id": 57362391,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The better answers to this only work for specific lengths of lists that are provided.</p>\n\n<p>Here's a version that works for any lengths of input. It also makes the algorithm clear in terms of the mathematical concepts of combination and permutation.</p>\n\n<pre><code>from itertools import combinations, permutations\nlist1 = ['1', '2']\nlist2 = ['A', 'B', 'C']\n\nnum_elements = min(len(list1), len(list2))\nlist1_combs = list(combinations(list1, num_elements))\nlist2_perms = list(permutations(list2, num_elements))\nresult = [\n  tuple(zip(perm, comb))\n  for comb in list1_combs\n  for perm in list2_perms\n]\n\nfor idx, ((l11, l12), (l21, l22)) in enumerate(result):\n  print(f'{idx}: {l11}{l12} {l21}{l22}')\n</code></pre>\n\n<p>This outputs:</p>\n\n<pre><code>0: A1 B2\n1: A1 C2\n2: B1 A2\n3: B1 C2\n4: C1 A2\n5: C1 B2\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3984769,
                        "reputation": 451,
                        "user_id": 3285705,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e948ee2f95b4fd8b9ee9ee630321e286?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fletch F Fletch",
                        "link": "https://stackoverflow.com/users/3285705/fletch-f-fletch"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1564422600,
                    "creation_date": 1564422600,
                    "answer_id": 57259019,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Or the KISS answer for short lists:</p>\n\n<pre><code>[(i, j) for i in list1 for j in list2]\n</code></pre>\n\n<p>Not as performant as itertools but you're using python so performance is already not your top concern...</p>\n\n<p>I like all the other answers too!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3385430,
                        "reputation": 830,
                        "user_id": 2841481,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://i.sstatic.net/iMPH0.jpg?s=256",
                        "display_name": "Ishan Rastogi",
                        "link": "https://stackoverflow.com/users/2841481/ishan-rastogi"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1563959240,
                    "creation_date": 1563959240,
                    "answer_id": 57179187,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>the best way to find out all the combinations for large number of lists is:</p>\n\n<pre><code>import itertools\nfrom pprint import pprint\n\ninputdata = [\n    ['a', 'b', 'c'],\n    ['d'],\n    ['e', 'f'],\n]\nresult = list(itertools.product(*inputdata))\npprint(result)\n</code></pre>\n\n<p>the result will be:</p>\n\n<pre><code>[('a', 'd', 'e'),\n ('a', 'd', 'f'),\n ('b', 'd', 'e'),\n ('b', 'd', 'f'),\n ('c', 'd', 'e'),\n ('c', 'd', 'f')]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8636570,
                        "reputation": 942,
                        "user_id": 6466550,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/eddaeda4c6a6294455ea2af9d77c7989?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "computerist",
                        "link": "https://stackoverflow.com/users/6466550/computerist"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1520763101,
                    "creation_date": 1520763101,
                    "answer_id": 49218843,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Answering the question \"given two lists, find all possible permutations of pairs of one item from each list\" and using basic Python functionality (i.e., without itertools) and, hence, making it easy to replicate for other programming languages:</p>\n\n<pre><code>def rec(a, b, ll, size):\n    ret = []\n    for i,e in enumerate(a):\n        for j,f in enumerate(b):\n            l = [e+f]\n            new_l = rec(a[i+1:], b[:j]+b[j+1:], ll, size)\n            if not new_l:\n                ret.append(l)\n            for k in new_l:\n                l_k = l + k\n                ret.append(l_k)\n                if len(l_k) == size:\n                    ll.append(l_k)\n    return ret\n\na = ['a','b','c']\nb = ['1','2']\nll = []\nrec(a,b,ll, min(len(a),len(b)))\nprint(ll)\n</code></pre>\n\n<p>Returns</p>\n\n<pre><code>[['a1', 'b2'], ['a1', 'c2'], ['a2', 'b1'], ['a2', 'c1'], ['b1', 'c2'], ['b2', 'c1']]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6516901,
                        "reputation": 457,
                        "user_id": 5042412,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-kg-JsPXbDn4/AAAAAAAAAAI/AAAAAAAAONQ/YGXvc-Z8HQM/photo.jpg?sz=256",
                        "display_name": "Idanmel",
                        "link": "https://stackoverflow.com/users/5042412/idanmel"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1484076399,
                    "creation_date": 1484076399,
                    "answer_id": 41576791,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You might want to try a one line list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; [name+number for name in 'ab' for number in '12']\n['a1', 'a2', 'b1', 'b2']\n&gt;&gt;&gt; [name+number for name in 'abc' for number in '12']\n['a1', 'a2', 'b1', 'b2', 'c1', 'c2']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1874064,
                        "reputation": 17960,
                        "user_id": 1695680,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/407d4b68afe5b3a71e84a1a3d5811cff?s=256&d=identicon&r=PG",
                        "display_name": "ThorSummoner",
                        "link": "https://stackoverflow.com/users/1695680/thorsummoner"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1480456355,
                    "creation_date": 1480456355,
                    "answer_id": 40876432,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was looking for a list multiplied by itself with only unique combinations, which is provided as this function.</p>\n\n<pre><code>import itertools\nitertools.combinations(list, n_times)\n</code></pre>\n\n<hr>\n\n<p>Here as an excerpt from <a href=\"https://docs.python.org/2/library/itertools.html\" rel=\"noreferrer\">the Python docs on  <code>itertools</code></a> That might help you find what your looking for.</p>\n\n<pre><code>Combinatoric generators:\n\nIterator                                 | Results\n-----------------------------------------+----------------------------------------\nproduct(p, q, ... [repeat=1])            | cartesian product, equivalent to a \n                                         |   nested for-loop\n-----------------------------------------+----------------------------------------\npermutations(p[, r])                     | r-length tuples, all possible \n                                         |   orderings, no repeated elements\n-----------------------------------------+----------------------------------------\ncombinations(p, r)                       | r-length tuples, in sorted order, no \n                                         |   repeated elements\n-----------------------------------------+----------------------------------------\ncombinations_with_replacement(p, r)      | r-length tuples, in sorted order, \n                                         | with repeated elements\n-----------------------------------------+----------------------------------------\nproduct('ABCD', repeat=2)                | AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD\npermutations('ABCD', 2)                  | AB AC AD BA BC BD CA CB CD DA DB DC\ncombinations('ABCD', 2)                  | AB AC AD BC BD CD\ncombinations_with_replacement('ABCD', 2) | AA AB AC AD BB BC BD CC CD DD\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1415650,
                        "reputation": 359,
                        "user_id": 1341371,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/58e82cdabb8862f800278f54ab4a5fb4?s=256&d=identicon&r=PG",
                        "display_name": "Mass Zhou",
                        "link": "https://stackoverflow.com/users/1341371/mass-zhou"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1387465330,
                    "last_edit_date": 1495541896,
                    "creation_date": 1387465330,
                    "answer_id": 20684972,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>a tiny improvement for the answer from interjay, to make the result as a flatten list.</p>\n\n<pre><code>&gt;&gt;&gt; list3 = [zip(x,list2) for x in itertools.permutations(list1,len(list2))]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list3)\n&gt;&gt;&gt; list4 = list(chain)\n[('a', 1), ('b', 2), ('a', 1), ('c', 2), ('b', 1), ('a', 2), ('b', 1), ('c', 2), ('c', 1), ('a', 2), ('c', 1), ('b', 2)]\n</code></pre>\n\n<p>reference from this <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python\">link</a></p>\n"
                }
            ]
        },
        {
            "12050460": [
                {
                    "owner": {
                        "account_id": 7777321,
                        "reputation": 1,
                        "user_id": 5884977,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/448e2e52b7951ac108efecc7f7e30439?s=256&d=identicon&r=PG",
                        "display_name": "bkanber",
                        "link": "https://stackoverflow.com/users/5884977/bkanber"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1454613393,
                    "creation_date": 1454613393,
                    "answer_id": 35209655,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The following seems to consistently give the right results:</p>\n\n<pre><code>from pybrain.tools.shortcuts import buildNetwork\nfrom pybrain.structure import TanhLayer\nfrom pybrain.datasets import SupervisedDataSet\nfrom pybrain.supervised.trainers import BackpropTrainer\n\n#net = buildNetwork(2, 3, 1, bias=True, hiddenclass=TanhLayer)\nnet = buildNetwork(2, 3, 1, bias=True)\n\nds = SupervisedDataSet(2, 1)\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\n\ntrainer = BackpropTrainer(net, ds, learningrate=0.001, momentum=0.99)\n\ntrainer.trainUntilConvergence(verbose=True)\n\nprint net.activate([0,0])\nprint net.activate([0,1])\nprint net.activate([1,0])\nprint net.activate([1,1])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 325129,
                        "reputation": 129,
                        "user_id": 646115,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/985c017a2c26fdc07e3f786380dc0195?s=256&d=identicon&r=PG",
                        "display_name": "lym",
                        "link": "https://stackoverflow.com/users/646115/lym"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1395586232,
                    "last_edit_date": 1395586232,
                    "creation_date": 1395585759,
                    "answer_id": 22592335,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>trainer = BackpropTrainer(net, ds, learningrate = 0.9, momentum=0.0, weightdecay=0.0, verbose=True) \ntrainer.trainEpochs(epochs=1000)\n</code></pre>\n\n<p>This way can converge. if learningrate is too small(e.g. 0.01), it lost in local minimum. As I have tested, learningrate in 0.3-30, it can converge.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1801989,
                        "reputation": 441,
                        "user_id": 3085313,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8f4746bf253f93b454713454efb3e2da?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "toddInPortland",
                        "link": "https://stackoverflow.com/users/3085313/toddinportland"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1386882627,
                    "last_edit_date": 1495540112,
                    "creation_date": 1386649843,
                    "answer_id": 20486148,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I took the excellent <a href=\"https://www.coursera.org/course/ml\" rel=\"nofollow noreferrer\">Machine Learning class on Coursera</a>, taught by Andrew Ng, and one part of the class covered training a small neural net to recognize xor.  So I was a bit troubled by the pybrain example based on parts of the <a href=\"http://pybrain.org/docs/#quickstart\" rel=\"nofollow noreferrer\">quickstart</a> that did not converge.</p>\n\n<p>I think there are many reasons, including the one above about the minimal dataset being split into training and validation. At one point in the course Andrew said \"its not the person with the best algorithm that wins, its the one with the most data. And he went on to explain that the explosion in data availability in the 2000's is part of the reason for the resurgence in AI, now called Machine Learning.</p>\n\n<p>So with all that in mind I found that</p>\n\n<ol>\n<li>the validation set can have 4 samples, because that comes after the training phase.</li>\n<li>the network only needs 2 nodes in the hidden layer, as I learned in the class,</li>\n<li>the learning rate needs to be pretty small in this case, like 0.005, or else the training will sometimes skip over the answer (this is an important point from the class that I confirmed by playing with the numbers).</li>\n<li>the smaller the learning rate, the smaller the maxEpochs can be. A small learning rate means that the convergence takes smaller steps along the gradient toward minimization. If its bigger, you need a bigger maxEpochs so that it will wait longer before deciding it has hit a minimum.</li>\n<li>You need a bias=True in the network (which adds a constant 1 node to the input and hidden layers). Read the answers to <a href=\"https://stackoverflow.com/questions/2480650/role-of-bias-in-neural-networks\">this question</a> about bias.</li>\n<li>Finally, and most important, you need a big training set. 1000 converged on the right answer about 75% of the time. I suspect this has to do with the minimization algorithm. Smaller numbers would fail frequently.</li>\n</ol>\n\n<p>So here's some code that works:</p>\n\n<pre><code>from pybrain.datasets import SupervisedDataSet\n\ndataModel = [\n    [(0,0), (0,)],\n    [(0,1), (1,)],\n    [(1,0), (1,)],\n    [(1,1), (0,)],\n]\n\nds = SupervisedDataSet(2, 1)\nfor input, target in dataModel:\n    ds.addSample(input, target)\n\n# create a large random data set\nimport random\nrandom.seed()\ntrainingSet = SupervisedDataSet(2, 1);\nfor ri in range(0,1000):\n    input,target = dataModel[random.getrandbits(2)];\n    trainingSet.addSample(input, target)\n\nfrom pybrain.tools.shortcuts import buildNetwork\nnet = buildNetwork(2, 2, 1, bias=True)\n\nfrom pybrain.supervised.trainers import BackpropTrainer\ntrainer = BackpropTrainer(net, ds, learningrate = 0.001, momentum = 0.99)\ntrainer.trainUntilConvergence(verbose=True,\n                              trainingData=trainingSet,\n                              validationData=ds,\n                              maxEpochs=10)\n\nprint '0,0-&gt;', net.activate([0,0])\nprint '0,1-&gt;', net.activate([0,1])\nprint '1,0-&gt;', net.activate([1,0])\nprint '1,1-&gt;', net.activate([1,1])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 325671,
                        "reputation": 2452,
                        "user_id": 646996,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/cc4704cd8c3001f4b10fadeac8182c47?s=256&d=identicon&r=PG",
                        "display_name": "avanwieringen",
                        "link": "https://stackoverflow.com/users/646996/avanwieringen"
                    },
                    "is_accepted": true,
                    "score": 35,
                    "last_activity_date": 1345537386,
                    "creation_date": 1345537386,
                    "answer_id": 12050816,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After some more digging I found that the example on the PyBrain's tutorial is completely out of place.</p>\n\n<p>When we look at the method signature in the source code we find:</p>\n\n<pre><code>def trainUntilConvergence(self, dataset=None, maxEpochs=None, verbose=None, continueEpochs=10, validationProportion=0.25):\n</code></pre>\n\n<p>This means that 25% of the training set is used for validation. Although that is a very valid method when training a network on data you are not going to do this when you have the complete range of possiblities at your disposal, namely a 4-row XOR 2-in-1-out solution set. When one wants to train an XOR set and you remove one of the rows for validation that has as an immediate consequence that you get a very sparse training set where one of the possible combinations is omitted resulting automatically into those  weights not being trained.</p>\n\n<p>Normally when you omit 25% of the data for validation you do this by assuming that those 25% cover 'most' of the solution space the network already has encountered more or less. In this case this is not true and it covers 25% of the solution space completely unknown to the network since you removed it for validation.</p>\n\n<p>So, the trainer was training the network correctly, but by omitting 25% of the XOR problem this results in a badly trained network.</p>\n\n<p>A different example on the PyBrain website as a quickstart would be very handy, because this example is just plain wrong in this specific XOR case. You might wonder if they tried the example themselves, because it just outputs random badly trained networks.</p>\n"
                }
            ]
        },
        {
            "28532770": [
                {
                    "owner": {
                        "account_id": 8731824,
                        "reputation": 1059,
                        "user_id": 6545662,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/242267fcf7d82c963600d89faad79f58?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ike",
                        "link": "https://stackoverflow.com/users/6545662/ike"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1503267655,
                    "creation_date": 1503267655,
                    "answer_id": 45787284,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After many fruitful hours of exploring OCR libraries, bounding boxes and clustering algorithms - I found a solution so simple it makes you want to cry!</p>\n\n<p>I hope you are using Linux;</p>\n\n<p><code>pdftotext -layout NAME_OF_PDF.pdf</code></p>\n\n<p>AMAZING!!</p>\n\n<p>Now you have a nice text file with all the information lined up in nice columns, now it is trivial to format into a csv etc..</p>\n\n<p>It is for times like this that I love Linux, these guys came up with AMAZING solutions to everything, and put it there for FREE!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4523058,
                        "reputation": 4627,
                        "user_id": 3675679,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/D8MTB.jpg?s=256",
                        "display_name": "Ricky McMaster",
                        "link": "https://stackoverflow.com/users/3675679/ricky-mcmaster"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1492857520,
                    "creation_date": 1492857520,
                    "answer_id": 43558214,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd just like to add to the very helpful answer from Kurt Pfeifle - there is now a Python wrapper for Tabula, and this seems to work very well so far: <a href=\"https://github.com/chezou/tabula-py\" rel=\"noreferrer\">https://github.com/chezou/tabula-py</a></p>\n\n<p>This will convert your PDF table to a Pandas data frame.  You can also set the area in x,y co-ordinates which is obviously very handy for irregular data.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 147884,
                        "reputation": 89887,
                        "user_id": 359307,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/332a3083f92c35e7b0a5dd86a66df9f7?s=256&d=identicon&r=PG",
                        "display_name": "Kurt Pfeifle",
                        "link": "https://stackoverflow.com/users/359307/kurt-pfeifle"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1424134813,
                    "last_edit_date": 1495542364,
                    "creation_date": 1424134813,
                    "answer_id": 28552995,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You should definitely have a look at this answer of mine:</p>\n\n<ul>\n<li><strong><a href=\"https://stackoverflow.com/a/26110587/359307\">Extracting table contents from a collection of PDF files</a></strong></li>\n</ul>\n\n<p>and also have a look at all the links included therein.</p>\n\n<p><a href=\"https://github.com/tabulapdf/tabula\" rel=\"noreferrer\">Tabula/TabulaPDF</a> is currently the best table extraction tool that is available for PDF scraping.</p>\n"
                }
            ]
        },
        {
            "4325416": [
                {
                    "owner": {
                        "account_id": 247075,
                        "reputation": 1905,
                        "user_id": 521571,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://i.sstatic.net/xfSlc.jpg?s=256",
                        "display_name": "Vladimir Lagunov",
                        "link": "https://stackoverflow.com/users/521571/vladimir-lagunov"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1291214193,
                    "creation_date": 1291214193,
                    "answer_id": 4325431,
                    "question_id": 4325416,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>import getpass\nprint getpass.getuser()\n</code></pre>\n"
                }
            ]
        },
        {
            "2990121": [
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346708,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": true,
                    "score": 495,
                    "last_activity_date": 1656615878,
                    "last_edit_date": 1656615878,
                    "creation_date": 1275919425,
                    "answer_id": 2990152,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use a <code>range</code> with a step size of 2:</p>\n<p><strong>Python 2</strong></p>\n<pre><code>for i in xrange(0,10,2):\n  print(i)\n</code></pre>\n<p><strong>Python 3</strong></p>\n<pre><code>for i in range(0,10,2):\n  print(i)\n</code></pre>\n<p><strong>Note:</strong> Use <code>xrange</code> in Python 2 instead of <code>range</code> because it is more efficient as it generates an iterable object, and not the whole list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30238,
                        "reputation": 50464,
                        "user_id": 82322,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/200b3a948797197905fb4c1d492ca2f7?s=256&d=identicon&r=PG",
                        "display_name": "carl",
                        "link": "https://stackoverflow.com/users/82322/carl"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1595437950,
                    "last_edit_date": 1595437950,
                    "creation_date": 1275925061,
                    "answer_id": 2990873,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest in my opinion is just this:</p>\n<pre><code>it = iter([1,2,3,4,5,6])\nfor x, y in zip(it, it):\n    print x, y\n\nOut: 1 2\n     3 4\n     5 6\n</code></pre>\n<p>No extra imports or anything. And very elegant, in my opinion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37903,
                        "reputation": 9926,
                        "user_id": 108518,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/31e7896f9f4ed034b4493772487ff5cb?s=256&d=identicon&r=PG",
                        "display_name": "lambacck",
                        "link": "https://stackoverflow.com/users/108518/lambacck"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1504958709,
                    "last_edit_date": 1504958709,
                    "creation_date": 1275924631,
                    "answer_id": 2990815,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This might not be as fast as the izip_longest solution (I didn't actually test it), but it will work with python &lt; 2.6 (izip_longest was added in 2.6):</p>\n\n<pre><code>from itertools import imap\n\ndef grouper(n, iterable):\n    \"grouper(3, 'ABCDEFG') --&gt; ('A,'B','C'), ('D','E','F'), ('G',None,None)\"\n    args = [iter(iterable)] * n\n\n    return imap(None, *args)\n</code></pre>\n\n<p>If you need to go earlier than 2.3, you can substitute the built-in map for imap. The disadvantage is that it provides no ability to customize the fill value.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835940,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1275921063,
                    "last_edit_date": 1275921063,
                    "creation_date": 1275919403,
                    "answer_id": 2990151,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're using Python 2.6 or newer you can use the grouper <a href=\"http://docs.python.org/library/itertools.html#recipes\" rel=\"noreferrer\">recipe</a> from the <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\"><strong><code>itertools</code></strong></a> module:</p>\n\n<pre><code>from itertools import izip_longest\n\ndef grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n</code></pre>\n\n<p>Call like this:</p>\n\n<pre><code>for item1, item2 in grouper(2, l):\n    # Do something with item1 and item2\n</code></pre>\n\n<p>Note that in Python 3.x you should use <code>zip_longest</code> instead of <code>izip_longest</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 112497,
                        "reputation": 2041,
                        "user_id": 296703,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/e0ce3e07b08f53f4590eb2fdba75ab45?s=256&d=identicon&r=PG",
                        "display_name": "Ishpeck",
                        "link": "https://stackoverflow.com/users/296703/ishpeck"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1275920516,
                    "creation_date": 1275920516,
                    "answer_id": 2990295,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>nums = range(10)\nfor i in range(0, len(nums)-1, 2):\n    print nums[i]\n</code></pre>\n\n<p>Kinda dirty but it works.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 66177,
                        "reputation": 33646,
                        "user_id": 194311,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=256&d=identicon&r=PG",
                        "display_name": "jathanism",
                        "link": "https://stackoverflow.com/users/194311/jathanism"
                    },
                    "is_accepted": false,
                    "score": 144,
                    "last_activity_date": 1275920421,
                    "creation_date": 1275920421,
                    "answer_id": 2990281,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can also use this syntax (<code>L[start:stop:step]</code>):</p>\n\n<pre><code>mylist = [1,2,3,4,5,6,7,8,9,10]\nfor i in mylist[::2]:\n    print i,\n# prints 1 3 5 7 9\n\nfor i in mylist[1::2]:\n    print i,\n# prints 2 4 6 8 10\n</code></pre>\n\n<p>Where the first digit is the starting index (defaults to beginning of list or 0), 2nd is ending slice index (defaults to end of list), and the third digit is the offset or step.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4683,
                        "reputation": 2644,
                        "user_id": 7161,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/ab1330463a1807b7534790240fe970ec?s=256&d=identicon&r=PG",
                        "display_name": "Jorenko",
                        "link": "https://stackoverflow.com/users/7161/jorenko"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1275919601,
                    "creation_date": 1275919601,
                    "answer_id": 2990182,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you have control over the structure of the list, the most pythonic thing to do would probably be to change it from:</p>\n\n<pre><code>l=[1,2,3,4]\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>l=[(1,2),(3,4)]\n</code></pre>\n\n<p>Then, your loop would be:</p>\n\n<pre><code>for i,j in l:\n    print i, j\n</code></pre>\n"
                }
            ]
        },
        {
            "14852140": [
                {
                    "owner": {
                        "account_id": 5189119,
                        "reputation": 494,
                        "user_id": 4152567,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=256",
                        "display_name": "Mihai.Mehe",
                        "link": "https://stackoverflow.com/users/4152567/mihai-mehe"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1697831192,
                    "creation_date": 1697831192,
                    "answer_id": 77333439,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <code>os.path.expanduser(my_path)</code> without escaping the white spaces in <code>my_path</code>.</p>\n<p>If you want to join some subpaths:</p>\n<pre><code>import os\npath = os.path.expanduser(os.path.join(ROOT, my_path))\n</code></pre>\n<p>and check with</p>\n<pre><code>assert os.path.exists(path)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8374827,
                        "reputation": 19,
                        "user_id": 6288621,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/11bac2ce1cf3486fd646b363e485524f?s=256&d=identicon&r=PG",
                        "display_name": "NG. Hai Tuan",
                        "link": "https://stackoverflow.com/users/6288621/ng-hai-tuan"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1693411968,
                    "last_edit_date": 1693411968,
                    "creation_date": 1686993847,
                    "answer_id": 76495552,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It works for me</p>\n<pre><code>import os\n</code></pre>\n<p>Set working directory</p>\n<pre><code>os.chdir(&quot;&quot;&quot;C:/Users/admin/nht1/OneDrive - quarrycubicle/Desktop/Docs/AI Data Analysis/Tai lieu tham khao&quot;&quot;&quot;)\n\nos.getcwd()\n</code></pre>\n<p>Out[1]: 'C:\\Users\\admin\\nht1\\OneDrive - quarrycubicle\\Desktop\\Docs\\AI Data Analysis\\Tai lieu tham khao'</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17910700,
                        "reputation": 1,
                        "user_id": 13012902,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-pavxYYKNHrs/AAAAAAAAAAI/AAAAAAAAAAA/AKF05nCT2A9KZeA7DFu7g_vQGn3kJ93yTA/photo.jpg?sz=256",
                        "display_name": "Nguyen Tuan",
                        "link": "https://stackoverflow.com/users/13012902/nguyen-tuan"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1676973772,
                    "last_edit_date": 1676973772,
                    "creation_date": 1676973523,
                    "answer_id": 75518860,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use triple quotation marks <code>&quot;&quot;&quot;</code> as such:</p>\n<pre><code>filepath = &quot;&quot;&quot;E:/ABC/SEM 2/testfiles/all.txt&quot;&quot;&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26262324,
                        "reputation": 21,
                        "user_id": 19933428,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AFdZucoZ5LxSkeiwOAS5KbBaj_7Aah_F8pkYE3QVa0qT=k-s256",
                        "display_name": "For Cc",
                        "link": "https://stackoverflow.com/users/19933428/for-cc"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1670516778,
                    "creation_date": 1670516778,
                    "answer_id": 74733362,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I found a simple hack try adding a <strong>single quote</strong> before the the double quotes like :</p>\n<pre><code>os.system(r'&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;')\n</code></pre>\n<p>worked for me</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24906055,
                        "reputation": 17,
                        "user_id": 18776107,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJxnUc5tWpDOlkMoJUHSLmVYnDstKWmT6HpXGAUB=k-s256",
                        "display_name": "\u05e9\u05d9 \u05d0\u05dc\u05d1\u05d6",
                        "link": "https://stackoverflow.com/users/18776107/%d7%a9%d7%99-%d7%90%d7%9c%d7%91%d7%96"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1657724270,
                    "last_edit_date": 1657724270,
                    "creation_date": 1657617518,
                    "answer_id": 72949909,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>double back slash <code>\\\\</code> will solve the problem</p>\n<pre><code>subprocess.run('type &quot;C:\\\\Users\\\\nameofuser\\\\blackdrive - somecorp\\\\Desktop\\\\seadlines_data.txt&quot;',shell=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2360323,
                        "reputation": 8426,
                        "user_id": 2082723,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/Hb64a.jpg?s=256",
                        "display_name": "Vettiyanakan",
                        "link": "https://stackoverflow.com/users/2082723/vettiyanakan"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1618287701,
                    "creation_date": 1618287701,
                    "answer_id": 67068705,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>a hack on <strong>Mac</strong>:</p>\n<pre><code>path = '/Volumes/Public/ABY/Documents/Musiq/slumdog millonaire/Mausam and Escape.mp3'\nnPath = path.replace(' ', '\\\\ ')\nprint(nPath)\n</code></pre>\n<p>Output:</p>\n<pre><code>/Volumes/Public/ABY/Documents/Musiq/slumdog\\ millonaire/Mausam\\ and\\ Escape.mp3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19921984,
                        "reputation": 9,
                        "user_id": 14597594,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/acbff21069c5fbca4177f53dc26fafaf?s=256&d=identicon&r=PG",
                        "display_name": "santarosajoe",
                        "link": "https://stackoverflow.com/users/14597594/santarosajoe"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1606019542,
                    "last_edit_date": 1606019542,
                    "creation_date": 1604782360,
                    "answer_id": 64732313,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>(WINDOWS - AWS solution) <br>Solved for windows by putting <strong>tripple quotes around files and paths</strong>.\n<br>Benefits:\n<br>  1)  Prevents excludes that quietly were getting ignored.\n<br>  2)  Files/folders with spaces in them, will no longer kick errors.</p>\n<pre><code>    aws_command = 'aws s3 sync &quot;&quot;&quot;D:/&quot;&quot;&quot; &quot;&quot;&quot;s3://mybucket/my folder/&quot;  --exclude &quot;&quot;&quot;*RECYCLE.BIN/*&quot;&quot;&quot; --exclude &quot;&quot;&quot;*.cab&quot;&quot;&quot; --exclude &quot;&quot;&quot;System Volume Information/*&quot;&quot;&quot; '\n\n    r = subprocess.run(f&quot;powershell.exe {aws_command}&quot;, shell=True, capture_output=True, text=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3327887,
                        "reputation": 1426,
                        "user_id": 2797460,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/KS82y.jpg?s=256",
                        "display_name": "billmanH",
                        "link": "https://stackoverflow.com/users/2797460/billmanh"
                    },
                    "is_accepted": false,
                    "score": 75,
                    "last_activity_date": 1409764745,
                    "creation_date": 1409764745,
                    "answer_id": 25650185,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>path = r\"C:\\Users\\mememe\\Google Drive\\Programs\\Python\\file.csv\"\n</code></pre>\n\n<p>Closing the path in r\"string\" also solved this problem very well. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": true,
                    "score": 21,
                    "last_activity_date": 1360754592,
                    "creation_date": 1360754592,
                    "answer_id": 14852407,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is no problem with whitespaces in the path since you're not using the \"shell\" to open the file. Here is a session from the windows console to prove the point. You're doing something else wrong</p>\n\n<pre><code>Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on wi\n32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt;\n&gt;&gt;&gt; os.makedirs(\"C:/ABC/SEM 2/testfiles\")\n&gt;&gt;&gt; open(\"C:/ABC/SEM 2/testfiles/all.txt\",\"w\")\n&lt;open file 'C:/ABC/SEM 2/testfiles/all.txt', mode 'w' at 0x0000000001D95420&gt;\n&gt;&gt;&gt; exit()\n\nC:\\Users\\Gnibbler&gt;dir \"C:\\ABC\\SEM 2\\testfiles\"\n Volume in drive C has no label.\n Volume Serial Number is 46A0-BB64\n\n Directory of c:\\ABC\\SEM 2\\testfiles\n\n13/02/2013  10:20 PM    &lt;DIR&gt;          .\n13/02/2013  10:20 PM    &lt;DIR&gt;          ..\n13/02/2013  10:20 PM                 0 all.txt\n               1 File(s)              0 bytes\n               2 Dir(s)  78,929,309,696 bytes free\n\nC:\\Users\\Gnibbler&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1588728,
                        "reputation": 430,
                        "user_id": 1867037,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/nPkPJ.jpg?s=256",
                        "display_name": "valentinos",
                        "link": "https://stackoverflow.com/users/1867037/valentinos"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1360754222,
                    "creation_date": 1360754222,
                    "answer_id": 14852277,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try putting double quotes in your filepath variable</p>\n\n<pre><code>\"\\\"E:/ABC/SEM 2/testfiles/all.txt\\\"\"\n</code></pre>\n\n<p>Check the permissions of the file or in any case consider renaming the folder to remove the space</p>\n"
                }
            ]
        },
        {
            "17006641": [
                {
                    "owner": {
                        "account_id": 12043787,
                        "reputation": 496,
                        "user_id": 8809657,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/0yyRT.jpg?s=256",
                        "display_name": "Muhammad Abbas",
                        "link": "https://stackoverflow.com/users/8809657/muhammad-abbas"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1588332308,
                    "last_edit_date": 1588332308,
                    "creation_date": 1587969445,
                    "answer_id": 61453011,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use two for loops in same line by using <code>zip</code> function</p>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>list1 = ['Abbas', 'Ali', 'Usman']\nlist2 = ['Kamran', 'Asgar', 'Hamza', 'Umer']\nlist3 = []\nfor i,j in zip(list1,list2):\n    list3.append(i)\n    list3.append(j)\nprint(list3)\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<p><code>['Abbas', 'Kamran', 'Ali', 'Asgar', 'Usman', 'Hamza']</code></p>\n\n<p>So, by using zip function, we can use two for loops or we can iterate two lists in same row. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 16710270,
                        "reputation": 1,
                        "user_id": 12077641,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-RDjJx17RVKI/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rceXq-bS0s8UvC7VcM8lwjvwBsOmA/photo.jpg?sz=256",
                        "display_name": "rameshbabu reddy",
                        "link": "https://stackoverflow.com/users/12077641/rameshbabu-reddy"
                    },
                    "is_accepted": false,
                    "score": -6,
                    "last_activity_date": 1568707257,
                    "last_edit_date": 1568707257,
                    "creation_date": 1568700517,
                    "answer_id": 57968265,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Below code for best examples for nested loops, while using two for loops please remember the  output of the first loop is input for the second loop. \nLoop termination also important while using the nested loops  </p>\n\n<pre><code>for x in range(1, 10, 1):\n     for y in range(1,x):\n             print y,\n        print\nOutPut :\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4 5 6\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7 8\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1384489,
                        "reputation": 16978,
                        "user_id": 1316786,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/671cbefbe51a03acced16f2fccf9752d?s=256&d=identicon&r=PG",
                        "display_name": "Jeff Tratner",
                        "link": "https://stackoverflow.com/users/1316786/jeff-tratner"
                    },
                    "is_accepted": true,
                    "score": 241,
                    "last_activity_date": 1424877988,
                    "last_edit_date": 1424877988,
                    "creation_date": 1370755577,
                    "answer_id": 17006736,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The best source of information is the <a href=\"http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">official Python tutorial on list comprehensions</a>.  List comprehensions are nearly the same as for loops (certainly any list comprehension can be written as a for-loop) but they are often faster than using a for loop.</p>\n\n<p>Look at this longer list comprehension from the tutorial (the <code>if</code> part filters the comprehension, only parts that pass the if statement are passed into the final part of the list comprehension (here <code>(x,y)</code>):</p>\n\n<pre><code>&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</code></pre>\n\n<p>It's exactly the same as this nested for loop (and, as the tutorial says, note how the order of for and if are the same).</p>\n\n<pre><code>&gt;&gt;&gt; combs = []\n&gt;&gt;&gt; for x in [1,2,3]:\n...     for y in [3,1,4]:\n...         if x != y:\n...             combs.append((x, y))\n...\n&gt;&gt;&gt; combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</code></pre>\n\n<p>The major <em>difference</em> between a list comprehension and a for loop is that the final part of the for loop (where you do something) comes at the beginning rather than at the end.</p>\n\n<p>On to your questions:</p>\n\n<blockquote>\n  <p>What type must object be in order to use this for loop structure?</p>\n</blockquote>\n\n<p>An <a href=\"http://docs.python.org/2/glossary.html#term-iterable\" rel=\"noreferrer\">iterable</a>. Any object that can generate a (finite) set of elements. These include any container, lists, sets, generators, etc.</p>\n\n<blockquote>\n  <p>What is the order in which i and j are assigned to elements in object?</p>\n</blockquote>\n\n<p>They are assigned in exactly the same order as they are generated from each list, as if they were in a nested for loop (for your first comprehension you'd get 1 element for i, then every value from j, 2nd element into i, then every value from j, etc.)</p>\n\n<blockquote>\n  <p>Can it be simulated by a different for loop structure?</p>\n</blockquote>\n\n<p>Yes, already shown above.</p>\n\n<blockquote>\n  <p>Can this for loop be nested with a similar or different structure for loop? And how would it look?</p>\n</blockquote>\n\n<p>Sure, but it's not a great idea. Here, for example, gives you a list of lists of characters:</p>\n\n<pre><code>[[ch for ch in word] for word in (\"apple\", \"banana\", \"pear\", \"the\", \"hello\")]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 94247,
                        "reputation": 10766,
                        "user_id": 257418,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/9ncZpegK.jpg?s=256",
                        "display_name": "lynn",
                        "link": "https://stackoverflow.com/users/257418/lynn"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1370772780,
                    "creation_date": 1370772780,
                    "answer_id": 17008559,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You might be interested in <a href=\"http://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>, which returns an iterable yielding tuples  of values from all the iterables you pass it. That is, <code>itertools.product(A, B)</code> yields all values of the form <code>(a, b)</code>, where the <code>a</code> values come from <code>A</code> and the <code>b</code> values come from <code>B</code>. For example:</p>\n\n<pre><code>import itertools\n\nA = [50, 60, 70]\nB = [0.1, 0.2, 0.3, 0.4]\n\nprint [a + b for a, b in itertools.product(A, B)]\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>[50.1, 50.2, 50.3, 50.4, 60.1, 60.2, 60.3, 60.4, 70.1, 70.2, 70.3, 70.4]\n</code></pre>\n\n<p>Notice how the final argument passed to <code>itertools.product</code> is the \"inner\" one. Generally, <code>itertools.product(a<sub>0</sub>, a<sub>1</sub>, ... a<sub>n</sub>)</code> is equal to <code>[(i<sub>0</sub>, i<sub>1</sub>, ... i<sub>n</sub>) for i<sub>n</sub> in a<sub>n</sub> for i<sub>n-1</sub> in a<sub>n-1</sub> ... for i<sub>0</sub> in a<sub>0</sub>]</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 154611,
                        "reputation": 3009,
                        "user_id": 370662,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/10f19a9e600c4ed64f53a986fba57e21?s=256&d=identicon&r=PG",
                        "display_name": "korylprince",
                        "link": "https://stackoverflow.com/users/370662/korylprince"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1370755826,
                    "creation_date": 1370755826,
                    "answer_id": 17006756,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First of all, your first code doesn't use a for loop per se, but a <a href=\"http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">list comprehension</a>.</p>\n\n<ol>\n<li><p>Would be equivalent to</p>\n\n<p>for j in range(0, width):\n    for i in range(0, height):\n        m[i][j]</p></li>\n<li><p>Much the same way, it generally nests like for loops, right to left. But list comprehension syntax is more complex.</p></li>\n<li><p>I'm not sure what this question is asking</p></li>\n</ol>\n\n<hr>\n\n<ol>\n<li><p>Any iterable object that yields iterable objects that yield exactly two objects (what a mouthful - i.e <code>[(1,2),'ab']</code> would be valid )</p></li>\n<li><p>The order in which the object yields upon iteration. <code>i</code> goes to the first yield, <code>j</code> the second.</p></li>\n<li><p>Yes, but not as pretty. I believe it is functionally equivalent to:</p>\n\n<pre>\nl = list()\nfor i,j in object:\n    l.append(function(i,j))\n</pre>\n\n<p>or even better use <a href=\"http://docs.python.org/2/library/functions.html#map\" rel=\"nofollow\">map</a>:</p>\n\n<pre><code>map(function, object)\n</code></pre>\n\n<p>But of course function would have to get <code>i</code>, <code>j</code> itself.</p></li>\n<li><p>Isn't this the same question as 3?</p></li>\n</ol>\n"
                }
            ]
        },
        {
            "33742912": [
                {
                    "owner": {
                        "account_id": 5658633,
                        "reputation": 2723,
                        "user_id": 4476908,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/535903b296c0574530789216de75f31d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "NotAnAmbiTurner",
                        "link": "https://stackoverflow.com/users/4476908/notanambiturner"
                    },
                    "is_accepted": true,
                    "score": 85,
                    "last_activity_date": 1447702776,
                    "last_edit_date": 1447702776,
                    "creation_date": 1447701723,
                    "answer_id": 33742959,
                    "question_id": 33742912,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Replace <code>exit</code> with <code>break</code>. <code>Exit</code> isn't a way to exit loops in Python.</p>\n\n<p><a href=\"https://docs.python.org/2/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\" rel=\"noreferrer\">break statement docs</a></p>\n"
                }
            ]
        },
        {
            "16842823": [
                {
                    "owner": {
                        "account_id": 1933634,
                        "reputation": 3392,
                        "user_id": 1742489,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/pUY8bIfg.jpg?s=256",
                        "display_name": "Alejandro",
                        "link": "https://stackoverflow.com/users/1742489/alejandro"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1460297702,
                    "last_edit_date": 1460297702,
                    "creation_date": 1372911555,
                    "answer_id": 17461809,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Answering the last part of your question, always you have points in an image, you can find their coordinates by searching, in some order, the local maximums of the image. In case your data is not a point source, you can apply a mask to each peak in order to avoid the peak neighborhood from being a maximum while performing a future search. I propose the following code:</p>\n\n<pre><code>import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport copy\n\ndef get_std(image):\n    return np.std(image)\n\ndef get_max(image,sigma,alpha=20,size=10):\n    i_out = []\n    j_out = []\n    image_temp = copy.deepcopy(image)\n    while True:\n        k = np.argmax(image_temp)\n        j,i = np.unravel_index(k, image_temp.shape)\n        if(image_temp[j,i] &gt;= alpha*sigma):\n            i_out.append(i)\n            j_out.append(j)\n            x = np.arange(i-size, i+size)\n            y = np.arange(j-size, j+size)\n            xv,yv = np.meshgrid(x,y)\n            image_temp[yv.clip(0,image_temp.shape[0]-1),\n                                   xv.clip(0,image_temp.shape[1]-1) ] = 0\n            print xv\n        else:\n            break\n    return i_out,j_out\n\n#reading the image   \nimage = mpimg.imread('ggd4.jpg')\n#computing the standard deviation of the image\nsigma = get_std(image)\n#getting the peaks\ni,j = get_max(image[:,:,0],sigma, alpha=10, size=10)\n\n#let's see the results\nplt.imshow(image, origin='lower')\nplt.plot(i,j,'ro', markersize=10, alpha=0.5)\nplt.show()\n</code></pre>\n\n<p>The image ggd4 for the test can be downloaded from:</p>\n\n<p><a href=\"http://www.ipac.caltech.edu/2mass/gallery/spr99/ggd4.jpg\" rel=\"nofollow noreferrer\">http://www.ipac.caltech.edu/2mass/gallery/spr99/ggd4.jpg</a></p>\n\n<p>The first part is to get some information about the noise in the image. I did it by computing the standard deviation of the full image (actually is better to select an small rectangle without signal). This is telling us how much noise is present in the image. \nThe idea to get the peaks is to ask for successive maximums, which are above of certain threshold (let's say, 3, 4, 5, 10, or 20 times the noise). This is what the function get_max is actually doing. It performs the search of maximums until one of them is below the threshold imposed by the noise. In order to avoid finding the same maximum many times it is necessary to remove the peaks from the image. In the general way, the shape of the mask to do so depends strongly on the problem that one want to solve. for the case of stars, it should be good to remove the star by using a Gaussian function, or something similar. I have chosen for simplicity a square function, and the size of the function (in pixels) is the variable \"size\". \nI think that from this example, anybody can improve the code by adding more general things.   </p>\n\n<p><em>EDIT:</em></p>\n\n<p>The original image looks like:</p>\n\n<p><a href=\"https://i.sstatic.net/AUUUI.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/AUUUI.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>While the image after identifying the luminous points looks like this:</p>\n\n<p><a href=\"https://i.sstatic.net/HzaHW.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/HzaHW.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1199385,
                        "reputation": 1081,
                        "user_id": 1170370,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/3f1a7ea70c61f7db7b0e9d6ba912f23c?s=256&d=identicon&r=PG",
                        "display_name": "msarahan",
                        "link": "https://stackoverflow.com/users/1170370/msarahan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1375593532,
                    "last_edit_date": 1375593532,
                    "creation_date": 1375592896,
                    "answer_id": 18039890,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Too much of a n00b on Stack Overflow to comment on Alejandro's answer elsewhere here.  I would refine his code a bit to use a preallocated numpy array for output:</p>\n\n<pre><code>def get_max(image,sigma,alpha=3,size=10):\n    from copy import deepcopy\n    import numpy as np\n    # preallocate a lot of peak storage\n    k_arr = np.zeros((10000,2))\n    image_temp = deepcopy(image)\n    peak_ct=0\n    while True:\n        k = np.argmax(image_temp)\n        j,i = np.unravel_index(k, image_temp.shape)\n        if(image_temp[j,i] &gt;= alpha*sigma):\n            k_arr[peak_ct]=[j,i]\n            # this is the part that masks already-found peaks.\n            x = np.arange(i-size, i+size)\n            y = np.arange(j-size, j+size)\n            xv,yv = np.meshgrid(x,y)\n            # the clip here handles edge cases where the peak is near the \n            #    image edge\n            image_temp[yv.clip(0,image_temp.shape[0]-1),\n                               xv.clip(0,image_temp.shape[1]-1) ] = 0\n            peak_ct+=1\n        else:\n            break\n    # trim the output for only what we've actually found\n    return k_arr[:peak_ct]\n</code></pre>\n\n<p>In profiling this and Alejandro's code using his example image, this code about 33% faster (0.03 sec for Alejandro's code, 0.02 sec for mine.)  I expect on images with larger numbers of peaks, it would be even faster - appending the output to a list will get slower and slower for more peaks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1162200,
                        "reputation": 42170,
                        "user_id": 1391441,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/FP3Un.jpg?s=256",
                        "display_name": "Gabriel",
                        "link": "https://stackoverflow.com/users/1391441/gabriel"
                    },
                    "is_accepted": true,
                    "score": 2,
                    "last_activity_date": 1372943399,
                    "last_edit_date": 1495541802,
                    "creation_date": 1372943399,
                    "answer_id": 17471172,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm adding this answer because it's the solution I ended up using. It's a combination of Bi Rico's comment here (May 30 at 18:54) and the answer given in this question: <a href=\"https://stackoverflow.com/questions/16822334/find-peak-of-2d-histogram\">Find peak of 2d histogram</a>.</p>\n\n<p>As it turns out using the peak detection algorithm from this question <a href=\"https://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array\">Peak detection in a 2D array</a> only complicates matters. After applying the Gaussian filter to the image all that needs to be done is to ask for the maximum bin (as Bi Rico pointed out) and then obtain the maximum in coordinates.</p>\n\n<p>So instead of using the <em>detect-peaks</em> function as I did above, I simply add the following code after the Gaussian 2D histogram is obtained:</p>\n\n<pre><code># Get 2D histogram.\nH, xedges, yedges = np.histogram2d(x, y, range=rang, bins=binsxy)\n# Get Gaussian filtered 2D histogram.\nH1 = gaussian_filter(H, 2, mode='nearest')\n# Get center of maximum in bin coordinates.\nx_cent_bin, y_cent_bin = np.unravel_index(H1.argmax(), H1.shape)\n# Get center in x,y coordinates.\nx_cent_coor , y_cent_coord = np.average(xedges[x_cent_bin:x_cent_bin + 2]), np.average(yedges[y_cent_g:y_cent_g + 2])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2485942,
                        "reputation": 325,
                        "user_id": 2164368,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/51e32b7fe3ad9e9cb4f917b05dca2601?s=256&d=identicon&r=PG",
                        "display_name": "Basileios",
                        "link": "https://stackoverflow.com/users/2164368/basileios"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1372889520,
                    "creation_date": 1372889520,
                    "answer_id": 17458948,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think the first step needed here is to express the values in H in terms of the standard deviation of the field: </p>\n\n<pre><code>import numpy as np\nH = H / np.std(H)\n</code></pre>\n\n<p>Now you can put a threshold on the values of this H. If the noise is assumed to be Gaussian, picking a threshold of 3 you can be quite sure (99.7%) that this pixel can be associated with a real peak and not noise. See <a href=\"http://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule\" rel=\"nofollow\">here</a>.</p>\n\n<p>Now the further selection can start. It is not exactly clear to me what exactly you want to find. Do you want the exact location of  peak values? Or do you want one location for a cluster of peaks which is in the middle of this cluster?<br>\nAnyway, starting from this point with all pixel values expressed in standard deviations of the field, you should be able to get what you want. If you want to find clusters you could perform a nearest neighbour search on the >3-sigma gridpoints and put a threshold on the distance. I.e. only connect them when they are close enough to each other. If several gridpoints are connected you can define this as a group/cluster and calculate some (sigma-weighted?) center of the cluster.\nHope my first contribution on Stackoverflow is useful for you!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1506721,
                        "reputation": 22651,
                        "user_id": 1409938,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/OKI5u.jpg?s=256",
                        "display_name": "gg349",
                        "link": "https://stackoverflow.com/users/1409938/gg349"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1369948741,
                    "creation_date": 1369948741,
                    "answer_id": 16846045,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The way I would do it:</p>\n\n<p>1) normalize H between 0 and 1.</p>\n\n<p>2) pick a threshold value, as tcaswell suggests. It could be between .9 and .99 for example</p>\n\n<p>3) use masked arrays to keep only the x,y coordinates with H above threshold:</p>\n\n<pre><code>import numpy.ma as ma\nx_masked=ma.masked_array(x, mask= H &lt; thresold)\ny_masked=ma.masked_array(y, mask= H &lt; thresold)\n</code></pre>\n\n<p>4) now you can weight-average on the masked coordinates, with weight something like (H-threshold)^2, or any other power greater or equal to one, depending on your taste/tests.</p>\n\n<p>Comment:\n1) This is not robust with respect to the type of peaks you have, since you may have to adapt the thresold. This is the minor problem;\n2) This DOES NOT work with two peaks as it is, and will give wrong results if the 2nd peak is above threshold.</p>\n\n<p>Nonetheless, it will always give you an answer without crashing (with pros and cons of the thing..)</p>\n"
                }
            ]
        },
        {
            "11460681": [
                {
                    "owner": {
                        "account_id": 808621,
                        "reputation": 364884,
                        "user_id": 908494,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=256&d=identicon&r=PG",
                        "display_name": "abarnert",
                        "link": "https://stackoverflow.com/users/908494/abarnert"
                    },
                    "is_accepted": true,
                    "score": 14,
                    "last_activity_date": 1523899818,
                    "last_edit_date": 1523899818,
                    "creation_date": 1342135021,
                    "answer_id": 11462098,
                    "question_id": 11460681,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Note that this answer from 2012 is out of date. First, the workaround, which the answer already said you probably shouldn't do in 2012, now you <em>can't</em> do it. If you want a similar workaround, you could use <code>pip download</code>, but it's even less likely to be what you want. Especially since <code>pip show</code> has been improved. Fortunately, the question has been marked as a dup of a later question, so there's no reason to read this answer except for historical purposes.</p>\n\n<hr>\n\n<p>You can't, at least not directly.</p>\n\n<p>You can import the pip module in your own code and download the requirements file and then iterate through it. Or, from the command line, you can <code>pip install --no-install --verbose</code>. </p>\n\n<p>But really, unless this is something you need to automate, it's probably easier to just go to <a href=\"http://pypi.python.org/\" rel=\"noreferrer\">http://pypi.python.org/</a> and search for the package there instead of using pip.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2270650,
                        "reputation": 2160,
                        "user_id": 1998161,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/809f6b74a189ee6c23a4268bec73a28a?s=256&d=identicon&r=PG",
                        "display_name": "kdb",
                        "link": "https://stackoverflow.com/users/1998161/kdb"
                    },
                    "is_accepted": false,
                    "score": 166,
                    "last_activity_date": 1487770264,
                    "last_edit_date": 1487770264,
                    "creation_date": 1372191809,
                    "answer_id": 17306829,
                    "question_id": 11460681,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In current pip (version 1.3.1) you can see the dependencies of an installed package by using:</p>\n\n<pre><code>pip show &lt;package&gt;\n</code></pre>\n"
                }
            ]
        },
        {
            "12517451": [
                {
                    "owner": {
                        "account_id": 110545,
                        "reputation": 32447,
                        "user_id": 292477,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/7ca3cdf733e5ad7ca41c58ba43d06dcd?s=256&d=identicon&r=PG",
                        "display_name": "Krumelur",
                        "link": "https://stackoverflow.com/users/292477/krumelur"
                    },
                    "is_accepted": true,
                    "score": 1037,
                    "last_activity_date": 1660219472,
                    "last_edit_date": 1660219472,
                    "creation_date": 1348160919,
                    "answer_id": 12517490,
                    "question_id": 12517451,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.2+, using the APIs requested by the OP, you can <a href=\"https://docs.python.org/3/library/os.html#os.makedirs\" rel=\"noreferrer\">elegantly</a> do the following:</p>\n<pre class=\"lang-py prettyprint-override\"><code>\nimport os\n\nfilename = &quot;/foo/bar/baz.txt&quot;\nos.makedirs(os.path.dirname(filename), exist_ok=True)\nwith open(filename, &quot;w&quot;) as f:\n    f.write(&quot;FOOBAR&quot;)\n\n</code></pre>\n<hr />\n<p>With the Pathlib module (introduced in Python 3.4), there is an alternate syntax (thanks David258):</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pathlib import Path\noutput_file = Path(&quot;/foo/bar/baz.txt&quot;)\noutput_file.parent.mkdir(exist_ok=True, parents=True)\noutput_file.write_text(&quot;FOOBAR&quot;)\n</code></pre>\n<hr />\n<p>In older python, there is a less elegant way:</p>\n<p>The <a href=\"http://docs.python.org/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> function does this. Try the following:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import os\nimport errno\n\nfilename = &quot;/foo/bar/baz.txt&quot;\nif not os.path.exists(os.path.dirname(filename)):\n    try:\n        os.makedirs(os.path.dirname(filename))\n    except OSError as exc: # Guard against race condition\n        if exc.errno != errno.EEXIST:\n            raise\n\nwith open(filename, &quot;w&quot;) as f:\n    f.write(&quot;FOOBAR&quot;)\n\n</code></pre>\n<p>The reason to add the <code>try-except</code> block is to handle the case when the directory was created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, so that to protect us from race conditions.</p>\n<hr />\n"
                }
            ]
        },
        {
            "4948043": [
                {
                    "owner": {
                        "account_id": 65984,
                        "reputation": 12631,
                        "user_id": 193852,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/297a5be5689710657f902068c51debdc?s=256&d=identicon&r=PG",
                        "display_name": "Andrea Spadaccini",
                        "link": "https://stackoverflow.com/users/193852/andrea-spadaccini"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1572041057,
                    "last_edit_date": 1572041057,
                    "creation_date": 1297272580,
                    "answer_id": 4948316,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try <a href=\"https://scapy.net/\" rel=\"noreferrer\">scapy</a>. It is a very powerful program for packet inspection, manipulation and creation.</p>\n\n<p>You can use it to <a href=\"https://scapy.readthedocs.io/en/latest/extending.html\" rel=\"noreferrer\">build your own tools</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1882750,
                        "reputation": 407,
                        "user_id": 1702557,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ae9ce865a3df8004202474394582c108?s=256&d=identicon&r=PG",
                        "display_name": "Pawel",
                        "link": "https://stackoverflow.com/users/1702557/pawel"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1455633425,
                    "creation_date": 1455633425,
                    "answer_id": 35435353,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>pycapfile</code> can be also used. Link to <code>pip</code>: <a href=\"https://pypi.python.org/pypi/pypcapfile\" rel=\"noreferrer\">https://pypi.python.org/pypi/pypcapfile</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4845702,
                        "reputation": 465,
                        "user_id": 5065374,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/ZyHFU.png?s=256",
                        "display_name": "Giac",
                        "link": "https://stackoverflow.com/users/5065374/giac"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1448189244,
                    "creation_date": 1448189244,
                    "answer_id": 33853927,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I recommend you to use Pyshark. this is wrapper for tshark. it also support all of tshark filter, decoder lib, ... and easy to use!\nThis is a great package for parsing .pcap file and also livecapturing</p>\n\n<p><a href=\"https://pypi.python.org/pypi/pyshark\" rel=\"noreferrer\">https://pypi.python.org/pypi/pyshark</a></p>\n\n<p>sample code (from the link):</p>\n\n<pre><code>import pyshark\ncap = pyshark.FileCapture('/root/log.cap')\ncap\n&gt;&gt;&gt; &lt;FileCapture /root/log.cap&gt;\nprint cap[0]\nPacket (Length: 698)\nLayer ETH:\n        Destination: BLANKED\n        Source: BLANKED\n        Type: IP (0x0800)\nLayer IP:\n        Version: 4\n        Header Length: 20 bytes\n        Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))\n        Total Length: 684s\n        Identification: 0x254f (9551)\n        Flags: 0x00\n        Fragment offset: 0\n        Time to live: 1\n        Protocol: UDP (17)\n        Header checksum: 0xe148 [correct]\n        Source: BLANKED\n        Destination: BLANKED\n  ...\ndir(cap[0])\n['__class__', '__contains__', '__delattr__', '__dict__', '__dir__', '__doc__', '__format__', '__getattr__', '__getattribute__', '__getitem__', '__getstate__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_packet_string', 'bssgp', 'captured_length', 'eth', 'frame_info', 'gprs-ns', 'highest_layer', 'interface_captured', 'ip', 'layers', 'length', 'number', 'pretty_print', 'sniff_time', 'sniff_timestamp', 'transport_layer', 'udp']\ncap[0].layers\n[&lt;ETH Layer&gt;, &lt;IP Layer&gt;, &lt;UDP Layer&gt;, &lt;GPRS-NS Layer&gt;, &lt;BSSGP Layer&gt;]\n....\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 80762,
                        "reputation": 3478,
                        "user_id": 228141,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/1Y9ZS.jpg?s=256",
                        "display_name": "theist",
                        "link": "https://stackoverflow.com/users/228141/theist"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1314308423,
                    "last_edit_date": 1314308423,
                    "creation_date": 1297272260,
                    "answer_id": 4948251,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I tried that and then tried pcapy. I choose pcapy because my use was similar to an example which I found googling. </p>\n\n<p><a href=\"http://snipplr.com/view/3579/live-packet-capture-in-python-with-pcapy/\">http://snipplr.com/view/3579/live-packet-capture-in-python-with-pcapy/</a> (or see the same code copied below)</p>\n\n<pre><code>import pcapy\nfrom impacket.ImpactDecoder import *\n\n# list all the network devices\npcapy.findalldevs()\n\nmax_bytes = 1024\npromiscuous = False\nread_timeout = 100 # in milliseconds\npc = pcapy.open_live(\"name of network device to capture from\", max_bytes, \n    promiscuous, read_timeout)\n\npc.setfilter('tcp')\n\n# callback for received packets\ndef recv_pkts(hdr, data):\n    packet = EthDecoder().decode(data)\n    print packet\n\npacket_limit = -1 # infinite\npc.loop(packet_limit, recv_pkts) # capture packets\n</code></pre>\n"
                }
            ]
        },
        {
            "3719243": [
                {
                    "owner": {
                        "account_id": 2458362,
                        "reputation": 28079,
                        "user_id": 2142994,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/1bad25bebfae0b3f4bfd13b07f5d4f3b?s=256&d=identicon&r=PG",
                        "display_name": "Ani Menon",
                        "link": "https://stackoverflow.com/users/2142994/ani-menon"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1532883754,
                    "creation_date": 1532883754,
                    "answer_id": 51582594,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Covers most of the general stuff -</p>\n\n<pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n</code></pre>\n\n<p>Reference: <a href=\"https://github.com/github/gitignore/blob/master/Python.gitignore\" rel=\"noreferrer\">python .gitignore</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1179800,
                        "reputation": 8645,
                        "user_id": 1154983,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GDHFv.png?s=256",
                        "display_name": "seanrose",
                        "link": "https://stackoverflow.com/users/1154983/seanrose"
                    },
                    "is_accepted": false,
                    "score": 533,
                    "last_activity_date": 1390578015,
                    "last_edit_date": 1390578015,
                    "creation_date": 1356627531,
                    "answer_id": 14058267,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://github.com/github/gitignore/blob/master/Python.gitignore\">Github has a great boilerplate .gitignore</a></p>\n\n<pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 129037,
                        "reputation": 29350,
                        "user_id": 327317,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0e197deaf223bdc0b552256da57c2ad5?s=256&d=identicon&r=PG",
                        "display_name": "Davor Lucic",
                        "link": "https://stackoverflow.com/users/327317/davor-lucic"
                    },
                    "is_accepted": true,
                    "score": 91,
                    "last_activity_date": 1284567715,
                    "creation_date": 1284567715,
                    "answer_id": 3719679,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When using <a href=\"http://www.buildout.org/\" rel=\"noreferrer\">buildout</a> I have following in <code>.gitignore</code> (along with <code>*.pyo</code> and <code>*.pyc</code>):</p>\n\n<pre><code>.installed.cfg\nbin\ndevelop-eggs\ndist\ndownloads\neggs\nparts\nsrc/*.egg-info\nlib\nlib64\n</code></pre>\n\n<p>Thanks to <a href=\"http://jacobian.org/writing/django-apps-with-buildout/\" rel=\"noreferrer\">Jacob Kaplan-Moss</a></p>\n\n<p>Also I tend to put <code>.svn</code> in since we use several SCM-s where I work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 66177,
                        "reputation": 33646,
                        "user_id": 194311,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=256&d=identicon&r=PG",
                        "display_name": "jathanism",
                        "link": "https://stackoverflow.com/users/194311/jathanism"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1284567112,
                    "creation_date": 1284567112,
                    "answer_id": 3719609,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here are some other files that may be left behind by setuptools:</p>\n\n<pre><code>MANIFEST\n*.egg-info\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 71038,
                        "reputation": 24813,
                        "user_id": 205508,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4437e31fa0c1333736b30c9543891198?s=256&d=identicon&r=PG",
                        "display_name": "Ofri Raviv",
                        "link": "https://stackoverflow.com/users/205508/ofri-raviv"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1284566809,
                    "creation_date": 1284566809,
                    "answer_id": 3719569,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://djangosnippets.org/snippets/644/\" rel=\"noreferrer\">local_settings.py</a>, for django projects.</p>\n\n<p>*~ for all projects.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 61768,
                        "reputation": 50726,
                        "user_id": 183910,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/5d509eb4ede1cf8d4db7353bbbdb8250?s=256&d=identicon&r=PG",
                        "display_name": "Bernhard Vallant",
                        "link": "https://stackoverflow.com/users/183910/bernhard-vallant"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1284565151,
                    "creation_date": 1284565151,
                    "answer_id": 3719309,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>One question is if you also want to use git for the deploment of your projects. If so you probably would like to exclude your local sqlite file from the repository, same probably applies to file uploads (mostly in your media folder). (I'm talking about django now, since your question is also tagged with django)</p>\n"
                }
            ]
        },
        {
            "17326164": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1626643768,
                    "last_edit_date": 1626643768,
                    "creation_date": 1372266883,
                    "answer_id": 17326452,
                    "question_id": 17326164,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If the other Python program is importable, and the functionality you need can be called via a function, then it is preferable to use <a href=\"http://docs.python.org/2/library/multiprocessing.html\" rel=\"nofollow noreferrer\">multiprocessing</a> instead of <code>subprocess</code>, since the arguments can be passed as Python objects, instead of via strings:</p>\n<pre><code>import somescript\nimport multiprocessing as mp\n\nproc = mp.Process(target=somescript.main, args=...)\nproc.start()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2900509,
                        "reputation": 4756,
                        "user_id": 2487336,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/6eae2a9fe7257a46c91f0515087e2940?s=256&d=identicon&r=PG",
                        "display_name": "xgord",
                        "link": "https://stackoverflow.com/users/2487336/xgord"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1626643716,
                    "last_edit_date": 1626643716,
                    "creation_date": 1372266169,
                    "answer_id": 17326236,
                    "question_id": 17326164,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use <a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow noreferrer\"><code>subprocess</code></a>:</p>\n<pre><code>import subprocess\n\n#code\nprog = subprocess.Popen(['python', filename, args])\n#more code\n</code></pre>\n"
                }
            ]
        },
        {
            "2424921": [
                {
                    "owner": {
                        "account_id": 518383,
                        "reputation": 1228,
                        "user_id": 4620617,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-QtlW1W33Fb0/AAAAAAAAAAI/AAAAAAAAKFw/mQOqtsanDL0/photo.jpg?sz=256",
                        "display_name": "Alberto Salvia Novella",
                        "link": "https://stackoverflow.com/users/4620617/alberto-salvia-novella"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1584806408,
                    "creation_date": 1584806408,
                    "answer_id": 60790010,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Performance wise both can do equally the same, so the question becomes which saves more development time?</p>\n\n<p>Bash relies on calling other commands, and piping them for creating new ones. This has the advantage that you can quickly create new programs just with the code borrowed from other people, no matter what programming language they used.</p>\n\n<p>This also has the side effect of resisting change in sub-commands pretty well, as the interface between them is just plain text.</p>\n\n<p>Additionally Bash is very permissive on how you can write on it. This means it will work well for a wider variety of context, but it also relies on the programmer having the intention of coding in a clean safe manner. Otherwise Bash won't stop you from building a mess.</p>\n\n<p>Python is more structured on style, so a messy programmer won't be as messy. It will also work on operating systems outside Linux, making it instantly more appropriate if you need that kind of portability.</p>\n\n<p>But it isn't as simple for calling other commands. So if your operating system is Unix most likely you will find that developing on Bash is the fastest way to develop.</p>\n\n<p>When to use Bash:</p>\n\n<ul>\n<li>It's a non graphical program, or the engine of a graphical one.</li>\n<li>It's only for Unix.</li>\n</ul>\n\n<p>When to use Python:</p>\n\n<ul>\n<li>It's a graphical program.</li>\n<li>It shall work on Windows.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 215522,
                        "reputation": 2246,
                        "user_id": 470211,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c3dce5eb87db57d57dc548506a79391b?s=256&d=identicon&r=PG",
                        "display_name": "DocSalvager",
                        "link": "https://stackoverflow.com/users/470211/docsalvager"
                    },
                    "is_accepted": true,
                    "score": 116,
                    "last_activity_date": 1580715944,
                    "last_edit_date": 1580715944,
                    "creation_date": 1358935505,
                    "answer_id": 14476979,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Typical mainframe flow...</strong></p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>Input Disk/Tape/User (runtime) --&gt; Job Control Language (JCL) --&gt; Output Disk/Tape/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; COBOL Program --------' \n</code></pre>\n\n<p><strong>Typical Linux flow...</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Input Disk/SSD/User (runtime) --&gt; sh/bash/ksh/zsh/... ----------&gt; Output Disk/SSD/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; Python script --------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; awk script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; sed script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; C/C++ program --------'\n                                   |                          ^\n                                   v                          |\n                                   `--- Java program ---------'\n                                   |                          ^\n                                   v                          |\n                                   :                          :\n</code></pre>\n\n<h2>Shells are the glue of Linux</h2>\n\n<p>Linux shells like sh/ksh/<strong>bash</strong>/... provide input/output/flow-control designation facilities much like the old mainframe Job Control Language... but on steroids! They are <a href=\"http://en.wikipedia.org/wiki/Turing_completeness\" rel=\"noreferrer\">Turing complete languages</a> in their own right while being optimized to efficiently pass data and control to and from other executing processes written in any language the O/S supports.</p>\n\n<p>Most Linux applications, regardless what language the bulk of the program is written in, depend on shell scripts and <strong>Bash</strong> has become the most common. Clicking an icon on the desktop usually runs a short <strong>Bash</strong> script. That script, either directly or indirectly, knows where all the files needed are and sets variables and command line parameters, finally calling the program. That's a shell's simplest use.</p>\n\n<p>Linux as we know it however would hardly be Linux without the thousands of shell scripts that startup the system, respond to events, control execution priorities and compile, configure and run programs. Many of these are quite large and complex.</p>\n\n<p>Shells provide an infrastructure that lets us use pre-built components that are linked together at run time rather than compile time. Those components are free-standing programs in their own right that can be used alone or in other combinations without recompiling. The syntax for calling them is indistinguishable from that of a <strong>Bash</strong> builtin command, and there are in fact numerous builtin commands for which there is also a stand-alone executable on the system, often having additional options.</p>\n\n<p>There is no language-wide difference between <strong>Python</strong> and <strong>Bash</strong> in performance. It entirely depends on how each is coded and which external tools are called.</p>\n\n<p><em>Any</em> of the well known tools like <strong>awk, sed, grep, bc, dc, tr,</strong> etc. will leave doing those operations in either language in the dust. <strong>Bash</strong> then is preferred for anything without a graphical user interface since it is easier and more efficient to call and pass data back from a tool like those with <strong>Bash</strong> than <strong>Python</strong>.</p>\n\n<h2>Performance</h2>\n\n<p>It depends on which programs the <strong>Bash</strong> shell script calls and their suitability for the subtask they are given whether the overall throughput and/or responsiveness will be better or worse than the equivalent <strong>Python</strong>. To complicate matters <strong>Python</strong>, like most languages, can also call other executables, though it is more cumbersome and thus not as often used.</p>\n\n<h2>User Interface</h2>\n\n<p>One area where <strong>Python</strong> is the clear winner is user interface. That makes it an excellent language for building local or client-server applications as it natively supports GTK graphics and is far more intuitive than <strong>Bash</strong>.</p>\n\n<p><strong>Bash</strong> only understands text. Other tools must be called for a GUI and data passed back from them. A <strong>Python</strong> script is one option. Faster but less flexible options are the binaries like <strong>YAD, Zenity, and GTKDialog</strong>.</p>\n\n<p>While shells like <strong>Bash</strong> work well with GUIs like <a href=\"https://sourceforge.net/projects/yad-dialog/\" rel=\"noreferrer\">Yad</a>, <a href=\"http://pclosmag.com/html/issues/200910/page21.html\" rel=\"noreferrer\">GtkDialog (embedded XML-like interface to GTK+ functions)</a>, <a href=\"http://linuxcommand.org/lc3_adv_dialog.php\" rel=\"noreferrer\">dialog</a>, and <a href=\"http://docstore.mik.ua/orelly/unix3/upt/ch36_26.htm\" rel=\"noreferrer\">xmessage</a>, <strong>Python</strong> is much more capable and so better for complex GUI windows.</p>\n\n<h2>Summary</h2>\n\n<p>Building with shell scripts is like assembling a computer with off-the-shelf components the way desktop PCs are.</p>\n\n<p>Building with <strong>Python</strong>, <strong>C++</strong> or most any other language is more like building a computer by soldering the chips (libraries) and other electronic parts together the way smartphones are.</p>\n\n<p>The best results are usually obtained by using <a href=\"https://stackoverflow.com/questions/636841/how-do-multiple-languages-interact-in-one-project\">a combination of languages</a> where each can do what they do best. One developer calls this \"<a href=\"http://memeagora.blogspot.com/2006/12/polyglot-programming.html\" rel=\"noreferrer\">polyglot programming</a>\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14335427,
                        "reputation": 375,
                        "user_id": 10519246,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fadd6f5d03063d9bb1c544c2cbce8de?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "BobC",
                        "link": "https://stackoverflow.com/users/10519246/bobc"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1559080314,
                    "last_edit_date": 1559080314,
                    "creation_date": 1559077174,
                    "answer_id": 56349977,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm posting this late answer primarily because Google likes this question.</p>\n\n<p>I believe the issue and context really should be about the workflow, not the tools.  The overall philosophy is always \"Use the right tool for the job.\"  But before this comes one that many often forget when they get lost in the tools: \"Get the job done.\"</p>\n\n<p>When I have a problem that isn't completely defined, I almost always start with Bash.  I have solved some gnarly problems in large Bash scripts that are both readable and maintainable.</p>\n\n<p>But when does the problem start to exceed what Bash should be asked to do?  I have some checks I use to give me warnings:</p>\n\n<ol>\n<li>Am I wishing Bash had 2D (or higher) arrays?  If yes, it's time to realize that Bash is not a great data processing language.</li>\n<li>Am I doing more work preparing data for other utilities than I am actually running those utilities?  If yes, time again to realize Bash is not a great data processing language.</li>\n<li>Is my script simply getting too large to manage?  If yes, it is important to realize that while Bash can import script libraries, it lacks a package system like other languages.  It's really a \"roll your own\" language compared to most others.  Then again, it has a enormous amount of functionality built-in (some say too much...)</li>\n</ol>\n\n<p>The list goes on.  Bottom-line, when you are working harder to keep your scripts running that you do adding features, it's time to leave Bash.</p>\n\n<p>Let's assume you've decided to move your work to Python.  If your Bash scripts are clean, the initial conversion is quite straightforward.  There are even several converters / translators that will do the first pass for you.</p>\n\n<p>The next question is: What do you give up moving to Python?</p>\n\n<ol>\n<li><p>All calls to external utilities must be wrapped in something from the <code>subprocess</code> module (or equivalent).  There are multiple ways to do this, and until 3.7 it took some effort to get it right (3.7 improved <code>subprocess.run()</code> to handle all common cases on its own).</p></li>\n<li><p>Surprisingly, Python has no standard platform-independent non-blocking utility (with timeout) for polling the keyboard (stdin).  The Bash <code>read</code> command is an awesome tool for simple user interaction.  My most common use is to show a spinner until the user presses a key, while also running a polling function (with each spinner step) to make sure things are still running well.  This is a harder problem than it would appear at first, so I often simply make a call to Bash: Expensive, but it does precisely what I need.</p></li>\n<li><p>If you are developing on an embedded or memory-constrained system, Python's memory footprint can be many times larger than Bash's (depending on the task at hand).  Plus, there is almost always an instance of Bash already in memory, which may not be the case for Python.</p></li>\n<li><p>For scripts that run once and exit quickly, Python's startup time can be much longer than Bash's.  But if the script contains significant calculations, Python quickly pulls ahead.</p></li>\n<li><p>Python has the most comprehensive package system on the planet.  When Bash gets even slightly complex, Python probably has a package that makes whole chunks of Bash become a single call.  However, finding the right package(s) to use is the biggest and most daunting part of becoming a Pythonista.  Fortunately, Google and StackExchange are your friends.</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 5830170,
                        "reputation": 1526,
                        "user_id": 4594990,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/oMg6W.jpg?s=256",
                        "display_name": "vigilancer",
                        "link": "https://stackoverflow.com/users/4594990/vigilancer"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1475887396,
                    "last_edit_date": 1475887396,
                    "creation_date": 1475887029,
                    "answer_id": 39927503,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>When you writing scripts performance does not matter (in most cases).<br>\nIf you care about performance 'Python vs Bash' is a false question.  </p>\n\n<p><strong>Python</strong>:<br>\n+ easier to write<br>\n+ easier to maintain<br>\n+ easier code reuse (try to find universal error-proof way to include files with common code in <code>sh</code>, I dare you)<br>\n+ you can do OOP with it too!<br>\n+ easier arguments parsing. well, not easier, exactly. it still will be too wordy to my taste, but python have <code>argparse</code> facility built in.<br>\n- ugly ugly 'subprocess'. try to chain commands and not to cry a river how ugly your code will become. especially if you care about exit codes.  </p>\n\n<p><strong>Bash</strong>:<br>\n+ ubiquity, as was said earlier, indeed.<br>\n+ simple commands chaining. that's how you glue together different   commands in a simple way. Also <code>Bash</code> (not <code>sh</code>) have some improvements, like <code>pipefail</code>, so chaining is really short and expressive.<br>\n+ do not require 3rd-party programs to be installed. can be executed right away.<br>\n- god, it's full of gotchas. IFS, CDPATH.. thousands of them.</p>\n\n<p>If one writing a script bigger than 100 LOC: choose <em>Python</em><br>\nIf one need path manipulation in script: choose <em>Python(3)</em><br>\nIf one need somewhat like <code>alias</code> but slightly complicated: choose <em>Bash/sh</em>  </p>\n\n<p>Anyway, one should try both sides to get the idea what are they capable of. </p>\n\n<p>Maybe answer can be extended with packaging and IDE support points, but I'm not familiar with this sides.  </p>\n\n<p>As always you have to choose from turd sandwich and giant douche.\nAnd remember, just a few years ago Perl was new hope. Where it is now.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 4657388,
                        "reputation": 4000,
                        "user_id": 3772603,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/ZTvKe.png?s=256",
                        "display_name": "dylnmc",
                        "link": "https://stackoverflow.com/users/3772603/dylnmc"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1456494518,
                    "creation_date": 1456494518,
                    "answer_id": 35653422,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't know if this is accurate, but I have found that python/ruby works much better for scripts that have a lot of mathematical computations. Otherwise you have to use <code>dc</code> or some other \"arbitrary precision calculator\". It just becomes a very big pain. With python you have much more control over floats vs ints and it is much easier to perform a lot of computations and sometimes.</p>\n\n<p>In particular, I would never work with a bash script to handle binary information or bytes. Instead I would use something like python (maybe) or C++ or even Node.JS.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2512130,
                        "reputation": 10472,
                        "user_id": 2184341,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/530767d4f1e6c9ed55c79ef6678d9e1b?s=256&d=identicon&r=PG",
                        "display_name": "Grzegorz Luczywo",
                        "link": "https://stackoverflow.com/users/2184341/grzegorz-luczywo"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1413542547,
                    "last_edit_date": 1413542547,
                    "creation_date": 1407366354,
                    "answer_id": 25171738,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Performance-wise bash outperforms python in the process startup time. </p>\n\n<p>Here are some measurements from my core i7 laptop running Linux Mint:</p>\n\n<pre><code>Starting process                       Startup time\n\nempty /bin/sh script                   1.7 ms\nempty /bin/bash script                 2.8 ms\nempty python script                    11.1 ms\npython script with a few libs*         110 ms\n</code></pre>\n\n<p><em>*Python loaded libs are: os, os.path, json, time, requests, threading, subprocess</em></p>\n\n<p>This shows a huge difference however bash execution time degrades quickly if it has to do anything sensible since it usually must call external processes. </p>\n\n<p>If you care about performance use bash only for:</p>\n\n<ul>\n<li>really simple and frequently called scripts</li>\n<li>scripts that mainly call other processes</li>\n<li>when you need minimal friction between manual administrative actions and scripting - fast check a few commands and place them in the file.sh</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1481617,
                        "reputation": 198,
                        "user_id": 1390860,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ac02a80ebd448c2b32d6ba4e57ecf0e2?s=256&d=identicon&r=PG",
                        "display_name": "zamhassam",
                        "link": "https://stackoverflow.com/users/1390860/zamhassam"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1336816161,
                    "creation_date": 1336816161,
                    "answer_id": 10562652,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are looking to cobble together a quick utility with minimal effort, bash is good.  For a wrapper round an application, bash is invaluable.</p>\n\n<p>Anything that may have you coming back over and over to add improvements is probably (though not always) better suited to a language like Python as Bash code comprising over a 1000 lines gets very painful to maintain. Bash code is also irritating to debug when it gets long.......</p>\n\n<p>Part of the problem with these kind of questions is, from my experience, that shell scripts are usually all custom tasks.  There have been very few shell scripting tasks that I have come across where there is already a solution freely available.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7954,
                        "reputation": 12886,
                        "user_id": 14028,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/66c0b0464838d75ad39c0baeaa01bf4c?s=256&d=identicon&r=PG",
                        "display_name": "Kevin Little",
                        "link": "https://stackoverflow.com/users/14028/kevin-little"
                    },
                    "is_accepted": false,
                    "score": 84,
                    "last_activity_date": 1268546982,
                    "creation_date": 1268546982,
                    "answer_id": 2441363,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Generally, bash works better than python only in those environments where python is not available. :)</p>\n\n<p>Seriously, I have to deal with both languages daily, and will take python instantly over bash if given the choice. Alas, I am forced to use bash on certain \"small\" platforms because someone has (mistakenly, IMHO) decided that python is \"too large\" to fit.</p>\n\n<p>While it is true that bash might be faster than python for some select tasks, it can never be as quick to develop with, or as easy to maintain (at least after you get past 10 lines of code or so). Bash's sole strong point wrt python or ruby or lua, etc., is its ubiquity.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 487472,
                        "reputation": 395,
                        "user_id": 210362,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7c4ecbb9e1886757fd68c6e17068a2b6?s=256&d=identicon&r=PG",
                        "display_name": "Justin",
                        "link": "https://stackoverflow.com/users/210362/justin"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1268321826,
                    "creation_date": 1268321826,
                    "answer_id": 2426281,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bash is primarily a batch / shell scripting language with far less support for various data types and all sorts of quirks around control structures -- not to mention compatibility issues. </p>\n\n<p>Which is faster? Neither, because you are not comparing apples to apples here. If you had to sort an ascii text file and you were using tools like zcat, sort, uniq, and sed then you will smoke Python performance wise. </p>\n\n<p>However, if you need a proper programming environment that supports floating point and various control flow, then Python wins hands down. If you wrote say a recursive algorithm in Bash and Python, the Python version will win in an order of magnitude or more. </p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Roger Pate"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1268311850,
                    "score": 40,
                    "last_activity_date": 1268312638,
                    "last_edit_date": 1268312638,
                    "creation_date": 1268311850,
                    "answer_id": 2424971,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>Developer efficiency</strong> matters much more to me in scenarios where both bash and Python are sensible choices.</p>\n\n<p>Some tasks lend themselves well to bash, and others to Python.  It also isn't unusual for me to start something as a bash script and change it to Python as it evolves over several weeks.  </p>\n\n<p>A big advantage Python has is in corner cases around filename handling, while it has <a href=\"http://docs.python.org/library/glob.html\" rel=\"noreferrer\">glob</a>, <a href=\"http://docs.python.org/library/shutil.html\" rel=\"noreferrer\">shutil</a>, <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a>, and others for common scripting needs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12478,
                        "reputation": 23919,
                        "user_id": 24582,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/729b33d5aa9b07da2c359a325bebb6ad?s=256&d=identicon&r=PG",
                        "display_name": "extraneon",
                        "link": "https://stackoverflow.com/users/24582/extraneon"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1268311849,
                    "creation_date": 1268311849,
                    "answer_id": 2424969,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There are 2 scenario's where Bash performance is at least equal I believe:</p>\n\n<ul>\n<li>Scripting of command line utilities</li>\n<li>Scripts which take only a short time to execute; where starting the Python interpreter takes more time than the operation itself</li>\n</ul>\n\n<p>That said, I usually don't really concern myself with performance of the scripting language itself. If performance is a real issue you don't script but program (possibly in Python).</p>\n"
                }
            ]
        },
        {
            "8290397": [
                {
                    "owner": {
                        "account_id": 186862,
                        "reputation": 225484,
                        "user_id": 424499,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG",
                        "display_name": "Raymond Hettinger",
                        "link": "https://stackoverflow.com/users/424499/raymond-hettinger"
                    },
                    "is_accepted": false,
                    "score": 96,
                    "last_activity_date": 1670266524,
                    "last_edit_date": 1670266524,
                    "creation_date": 1322442569,
                    "answer_id": 8290490,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">recipes in the itertools module</a> provide two ways to do this depending on how you want to handle a final odd-sized lot (keep it, pad it with a fillvalue, ignore it, or raise an exception):</p>\n<pre><code>from itertools import islice, zip_longest\n\ndef batched(iterable, n):\n    &quot;Batch data into lists of length n. The last batch may be shorter.&quot;\n    # batched('ABCDEFG', 3) --&gt; ABC DEF G\n    it = iter(iterable)\n    while True:\n        batch = list(islice(it, n))\n        if not batch:\n            return\n        yield batch\n\ndef grouper(iterable, n, *, incomplete='fill', fillvalue=None):\n    &quot;Collect data into non-overlapping fixed-length chunks or blocks&quot;\n    # grouper('ABCDEFG', 3, fillvalue='x') --&gt; ABC DEF Gxx\n    # grouper('ABCDEFG', 3, incomplete='strict') --&gt; ABC DEF ValueError\n    # grouper('ABCDEFG', 3, incomplete='ignore') --&gt; ABC DEF\n    args = [iter(iterable)] * n\n    if incomplete == 'fill':\n        return zip_longest(*args, fillvalue=fillvalue)\n    if incomplete == 'strict':\n        return zip(*args, strict=True)\n    if incomplete == 'ignore':\n        return zip(*args)\n    else:\n        raise ValueError('Expected fill, strict, or ignore')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1621839,
                        "reputation": 2235,
                        "user_id": 1498217,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/30a4f1ed499ec94782f46f2ca2c0e975?s=256&d=identicon&r=PG",
                        "display_name": "Atra Azami",
                        "link": "https://stackoverflow.com/users/1498217/atra-azami"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1629450113,
                    "last_edit_date": 1629450113,
                    "creation_date": 1594812596,
                    "answer_id": 62913856,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Solution for Python 3.8 if you are working with iterables that don't define a <code>len</code> function, and get exhausted:</p>\n<pre><code>from itertools import islice\n\ndef batcher(iterable, batch_size):\n    iterator = iter(iterable)\n    while batch := list(islice(iterator, batch_size)):\n        yield batch\n</code></pre>\n<p>Example usage:</p>\n<pre><code>def my_gen():\n    yield from range(10)\n \nfor batch in batcher(my_gen(), 3):\n    print(batch)\n\n&gt;&gt;&gt; [0, 1, 2]\n&gt;&gt;&gt; [3, 4, 5]\n&gt;&gt;&gt; [6, 7, 8]\n&gt;&gt;&gt; [9]\n\n</code></pre>\n<p>Could of course be implemented without the walrus operator as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7571809,
                        "reputation": 1463,
                        "user_id": 5745441,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e887d398488bd83fbe4119f5d2711aee?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "0-_-0",
                        "link": "https://stackoverflow.com/users/5745441/0-0"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1624279065,
                    "creation_date": 1624279065,
                    "answer_id": 68068082,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I like this one,</p>\n<pre><code>def batch(x, bs):\n    return [x[i:i+bs] for i in range(0, len(x), bs)]\n</code></pre>\n<p>This returns a list of batches of size <code>bs</code>, you can make it a generator by using a generator expression <code>(i for i in iterable)</code> of course.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 432313,
                        "reputation": 5562,
                        "user_id": 816999,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/190b7d54fa9bbcc29622ebd09fab3a2c?s=256&d=identicon&r=PG",
                        "display_name": "Yongwei Wu",
                        "link": "https://stackoverflow.com/users/816999/yongwei-wu"
                    },
                    "is_accepted": false,
                    "score": 62,
                    "last_activity_date": 1619024459,
                    "last_edit_date": 1619024459,
                    "creation_date": 1564372224,
                    "answer_id": 57247000,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://more-itertools.readthedocs.io/\" rel=\"noreferrer\">More-itertools</a> includes two functions that do what you need:</p>\n<ul>\n<li><a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.chunked\" rel=\"noreferrer\"><code>chunked(iterable, n)</code></a> returns an iterable of lists, each of length <code>n</code> (except the last one, which may be shorter);</li>\n<li><a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ichunked\" rel=\"noreferrer\"><code>ichunked(iterable, n)</code></a> is similar, but returns an iterable of <em>iterables</em> instead.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 18360200,
                        "reputation": 31,
                        "user_id": 13372470,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e98a506246bb3e3801a134965ab95674?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Douw Marx",
                        "link": "https://stackoverflow.com/users/13372470/douw-marx"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1616071408,
                    "creation_date": 1616071408,
                    "answer_id": 66691328,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This code has the following features:</p>\n<blockquote>\n<ul>\n<li>Can take lists or generators (no len()) as input</li>\n<li>Does not require imports of other packages</li>\n<li>No padding added to last batch</li>\n</ul>\n</blockquote>\n<pre><code>def batch_generator(items, batch_size):\n    itemid=0 # Keeps track of current position in items generator/list\n    batch = [] # Empty batch\n    for item in items: \n      batch.append(item) # Append items to batch\n      if len(batch)==batch_size:\n        yield batch\n        itemid += batch_size # Increment the position in items\n        batch = []\n    yield batch # yield last bit\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 49162,
                        "reputation": 22456,
                        "user_id": 146289,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/fa7f6c8be0d09fd8438332eef28a40d3?s=256&d=identicon&r=PG",
                        "display_name": "vdboor",
                        "link": "https://stackoverflow.com/users/146289/vdboor"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1614244110,
                    "creation_date": 1614244110,
                    "answer_id": 66365466,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Moving as much into CPython as possible, by leveraging islice and iter(callable) behavior:</p>\n<pre><code>from itertools import islice\n\ndef chunked(generator, size):\n    &quot;&quot;&quot;Read parts of the generator, pause each time after a chunk&quot;&quot;&quot;\n    # islice returns results until 'size',\n    # make_chunk gets repeatedly called by iter(callable).\n    gen = iter(generator)\n    make_chunk = lambda: list(islice(gen, size))\n    return iter(make_chunk, [])\n</code></pre>\n<p>Inspired by more-itertools, and shortened to the essence of that code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16313176,
                        "reputation": 51,
                        "user_id": 11781161,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ce5a01ddf30f071c59e2fc70dfa1d8c6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "His_Excellency",
                        "link": "https://stackoverflow.com/users/11781161/his-excellency"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1606429966,
                    "creation_date": 1606429966,
                    "answer_id": 65029995,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A workable version without new features in python 3.8, adapted from @Atra Azami's answer.</p>\n<pre><code>import itertools    \n\ndef batch_generator(iterable, batch_size=1):\n    iterable = iter(iterable)\n\n    while True:\n        batch = list(itertools.islice(iterable, batch_size))\n        if len(batch) &gt; 0:\n            yield batch\n        else:\n            break\n\nfor x in batch_generator(range(0, 10), 3):\n    print(x)\n</code></pre>\n<p>Output:</p>\n<pre><code>[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8382566,
                        "reputation": 815,
                        "user_id": 6293961,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/a68367742e8478a356c08cb8f8e5b64a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "W. Zhu",
                        "link": "https://stackoverflow.com/users/6293961/w-zhu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1605341469,
                    "creation_date": 1605341469,
                    "answer_id": 64832009,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Keep taking (at most) n elements until it runs out.</p>\n<pre><code>def chop(n, iterable):\n    iterator = iter(iterable)\n    while chunk := list(take(n, iterator)):\n        yield chunk\n\n\ndef take(n, iterable):\n    iterator = iter(iterable)\n    for i in range(n):\n        try:\n            yield next(iterator)\n        except StopIteration:\n            return\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5440025,
                        "reputation": 527,
                        "user_id": 4328352,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6154cdd9be0141399b556aba22911cdf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "gazorpazorp",
                        "link": "https://stackoverflow.com/users/4328352/gazorpazorp"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1598019415,
                    "creation_date": 1598019415,
                    "answer_id": 63524581,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use</p>\n<pre class=\"lang-py prettyprint-override\"><code>def batchify(arr, batch_size):\n  num_batches = math.ceil(len(arr) / batch_size)\n  return [arr[i*batch_size:(i+1)*batch_size] for i in range(num_batches)]\n  \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4098216,
                        "reputation": 385,
                        "user_id": 3364423,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0102b373d19dca0c25c6be98f763ab4e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yacc143",
                        "link": "https://stackoverflow.com/users/3364423/yacc143"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1590584082,
                    "creation_date": 1590584082,
                    "answer_id": 62043630,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from itertools import *\n\nclass SENTINEL: pass\n\ndef batch(iterable, n):\n    return (tuple(filterfalse(lambda x: x is SENTINEL, group)) for group in zip_longest(fillvalue=SENTINEL, *[iter(iterable)] * n))\n\nprint(list(range(10), 3)))\n# outputs: [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\nprint(list(batch([None]*10, 3)))\n# outputs: [(None, None, None), (None, None, None), (None, None, None), (None,)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 177694,
                        "reputation": 7016,
                        "user_id": 409184,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/WVuqewXK.jpg?s=256",
                        "display_name": "Carl F.",
                        "link": "https://stackoverflow.com/users/409184/carl-f"
                    },
                    "is_accepted": true,
                    "score": 210,
                    "last_activity_date": 1588761338,
                    "last_edit_date": 1588761338,
                    "creation_date": 1322442762,
                    "answer_id": 8290508,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is probably more efficient (faster)</p>\n\n<pre><code>def batch(iterable, n=1):\n    l = len(iterable)\n    for ndx in range(0, l, n):\n        yield iterable[ndx:min(ndx + n, l)]\n\nfor x in batch(range(0, 10), 3):\n    print x\n</code></pre>\n\n<hr>\n\n<p><strong>Example using list</strong></p>\n\n<pre><code>data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # list of data \n\nfor x in batch(data, 3):\n    print(x)\n\n# Output\n\n[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9, 10]\n</code></pre>\n\n<p>It avoids building new lists.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3395920,
                        "reputation": 393,
                        "user_id": 2849548,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/878f8a78af70e694b4884c8f4ccab7d9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "alvitawa",
                        "link": "https://stackoverflow.com/users/2849548/alvitawa"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1584628101,
                    "creation_date": 1584628101,
                    "answer_id": 60759197,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Related functionality you may need:</p>\n\n<pre><code>def batch(size, i):\n    \"\"\" Get the i'th batch of the given size \"\"\"\n    return slice(size* i, size* i + size)\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; [1,2,3,4,5,6,7,8,9,10][batch(3, 1)]\n&gt;&gt;&gt; [4, 5, 6]\n</code></pre>\n\n<p>It gets the i'th batch from the sequence and it can work with other data structures as well, like pandas dataframes (<code>df.iloc[batch(100,0)]</code>) or numpy array (<code>array[batch(100,0)]</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6717350,
                        "reputation": 346,
                        "user_id": 5178765,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d3af6e498684a1681c6ebc435a593df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dimathe47",
                        "link": "https://stackoverflow.com/users/5178765/dimathe47"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1582671060,
                    "creation_date": 1582671060,
                    "answer_id": 60404342,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can just group iterable items by their batch index.</p>\n\n<pre><code>def batch(items: Iterable, batch_size: int) -&gt; Iterable[Iterable]:\n    # enumerate items and group them by batch index\n    enumerated_item_groups = itertools.groupby(enumerate(items), lambda t: t[0] // batch_size)\n    # extract items from enumeration tuples\n    item_batches = ((t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    return item_batches\n</code></pre>\n\n<p>It is often the case when you want to collect inner iterables so here is more advanced version.</p>\n\n<pre><code>def batch_advanced(items: Iterable, batch_size: int, batches_mapper: Callable[[Iterable], Any] = None) -&gt; Iterable[Iterable]:\n    enumerated_item_groups = itertools.groupby(enumerate(items), lambda t: t[0] // batch_size)\n    if batches_mapper:\n        item_batches = (batches_mapper(t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    else:\n        item_batches = ((t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    return item_batches\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>print(list(batch_advanced([1, 9, 3, 5, 2, 4, 2], 4, tuple)))\n# [(1, 9, 3, 5), (2, 4, 2)]\nprint(list(batch_advanced([1, 9, 3, 5, 2, 4, 2], 4, list)))\n# [[1, 9, 3, 5], [2, 4, 2]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 432313,
                        "reputation": 5562,
                        "user_id": 816999,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/190b7d54fa9bbcc29622ebd09fab3a2c?s=256&d=identicon&r=PG",
                        "display_name": "Yongwei Wu",
                        "link": "https://stackoverflow.com/users/816999/yongwei-wu"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1578566384,
                    "last_edit_date": 1578566384,
                    "creation_date": 1564369664,
                    "answer_id": 57246759,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is a very short code snippet I know that does not use <code>len</code> and works under both Python 2 and 3 (not my creation):</p>\n\n<pre><code>def chunks(iterable, size):\n    from itertools import chain, islice\n    iterator = iter(iterable)\n    for first in iterator:\n        yield list(chain([first], islice(iterator, size - 1)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1330565,
                        "reputation": 369,
                        "user_id": 1274577,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ETsm7.jpg?s=256",
                        "display_name": "Atila Romero",
                        "link": "https://stackoverflow.com/users/1274577/atila-romero"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1566318810,
                    "creation_date": 1566318810,
                    "answer_id": 57578026,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>def batch(iterable, n):\n    iterable=iter(iterable)\n    while True:\n        chunk=[]\n        for i in range(n):\n            try:\n                chunk.append(next(iterable))\n            except StopIteration:\n                yield chunk\n                return\n        yield chunk\n\nlist(batch(range(10), 3))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 23634,
                        "reputation": 10167,
                        "user_id": 59352,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/f33c37d52c56856f4c91344d7471eee0?s=256&d=identicon&r=PG",
                        "display_name": "Lycha",
                        "link": "https://stackoverflow.com/users/59352/lycha"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1550212648,
                    "last_edit_date": 1550212648,
                    "creation_date": 1550209589,
                    "answer_id": 54703307,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is an approach using <code>reduce</code> function.</p>\n\n<p>Oneliner:</p>\n\n<pre><code>from functools import reduce\nreduce(lambda cumulator,item: cumulator[-1].append(item) or cumulator if len(cumulator[-1]) &lt; batch_size else cumulator + [[item]], input_array, [[]])\n</code></pre>\n\n<p>Or more readable version:</p>\n\n<pre><code>from functools import reduce\ndef batch(input_list, batch_size):\n  def reducer(cumulator, item):\n    if len(cumulator[-1]) &lt; batch_size:\n      cumulator[-1].append(item)\n      return cumulator\n    else:\n      cumulator.append([item])\n    return cumulator\n  return reduce(reducer, input_list, [[]])\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>&gt;&gt;&gt; batch([1,2,3,4,5,6,7], 3)\n[[1, 2, 3], [4, 5, 6], [7]]\n&gt;&gt;&gt; batch(a, 8)\n[[1, 2, 3, 4, 5, 6, 7]]\n&gt;&gt;&gt; batch([1,2,3,None,4], 3)\n[[1, 2, 3], [None, 4]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1623510,
                        "reputation": 3703,
                        "user_id": 1499598,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/pgfzZ.jpg?s=256",
                        "display_name": "Trideep Rath",
                        "link": "https://stackoverflow.com/users/1499598/trideep-rath"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1548894155,
                    "last_edit_date": 1548894155,
                    "creation_date": 1548893749,
                    "answer_id": 54451553,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This would work for any iterable. </p>\n\n<pre><code>from itertools import zip_longest, filterfalse\n\ndef batch_iterable(iterable, batch_size=2): \n    args = [iter(iterable)] * batch_size \n    return (tuple(filterfalse(lambda x: x is None, group)) for group in zip_longest(fillvalue=None, *args))\n</code></pre>\n\n<p>It would work like this:</p>\n\n<pre><code>&gt;&gt;&gt;list(batch_iterable(range(0,5)), 2)\n[(0, 1), (2, 3), (4,)]\n</code></pre>\n\n<p>PS: It would not work if iterable has None values.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6320,
                        "reputation": 48652,
                        "user_id": 10583,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/3891f38e5165127cac92a4e9e4aba688?s=256&d=identicon&r=PG",
                        "display_name": "Josh Smeaton",
                        "link": "https://stackoverflow.com/users/10583/josh-smeaton"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1548806144,
                    "creation_date": 1548806144,
                    "answer_id": 54431431,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is what I use in my project. It handles iterables or lists as efficiently as possible.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def chunker(iterable, size):\n    if not hasattr(iterable, \"__len__\"):\n        # generators don't have len, so fall back to slower\n        # method that works with generators\n        for chunk in chunker_gen(iterable, size):\n            yield chunk\n        return\n\n    it = iter(iterable)\n    for i in range(0, len(iterable), size):\n        yield [k for k in islice(it, size)]\n\n\ndef chunker_gen(generator, size):\n    iterator = iter(generator)\n    for first in iterator:\n\n        def chunk():\n            yield first\n            for more in islice(iterator, size - 1):\n                yield more\n\n        yield [k for k in chunk()]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 803579,
                        "reputation": 23146,
                        "user_id": 5249307,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5c640cd731ca8e455d79860519b6b208?s=256&d=identicon&r=PG",
                        "display_name": "donkopotamus",
                        "link": "https://stackoverflow.com/users/5249307/donkopotamus"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1414571095,
                    "last_edit_date": 1414571095,
                    "creation_date": 1322442800,
                    "answer_id": 8290514,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As others have noted, the code you have given does exactly what you want.  For another approach using <code>itertools.islice</code> you could see an <a href=\"http://code.activestate.com/recipes/303279-getting-items-in-batches/\" rel=\"noreferrer\">example</a> of following recipe:</p>\n\n<pre><code>from itertools import islice, chain\n\ndef batch(iterable, size):\n    sourceiter = iter(iterable)\n    while True:\n        batchiter = islice(sourceiter, size)\n        yield chain([batchiter.next()], batchiter)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 441989,
                        "reputation": 3496,
                        "user_id": 832391,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d312a0b7fcf2eaa8acab006c2c2f407d?s=256&d=identicon&r=PG",
                        "display_name": "John Doe",
                        "link": "https://stackoverflow.com/users/832391/john-doe"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1322442315,
                    "creation_date": 1322442315,
                    "answer_id": 8290470,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Weird, seems to work fine for me in Python 2.x</p>\n\n<pre><code>&gt;&gt;&gt; def batch(iterable, n = 1):\n...    current_batch = []\n...    for item in iterable:\n...        current_batch.append(item)\n...        if len(current_batch) == n:\n...            yield current_batch\n...            current_batch = []\n...    if current_batch:\n...        yield current_batch\n...\n&gt;&gt;&gt; for x in batch(range(0, 10), 3):\n...     print x\n...\n[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9]\n</code></pre>\n"
                }
            ]
        },
        {
            "26443871": [
                {
                    "owner": {
                        "account_id": 1611852,
                        "reputation": 21346,
                        "user_id": 1490552,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3V3yR.jpg?s=256",
                        "display_name": "Adem &#214;zta\u015f",
                        "link": "https://stackoverflow.com/users/1490552/adem-%c3%96zta%c5%9f"
                    },
                    "is_accepted": true,
                    "score": 64,
                    "last_activity_date": 1466775276,
                    "last_edit_date": 1466775276,
                    "creation_date": 1413661948,
                    "answer_id": 26443912,
                    "question_id": 26443871,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://docs.python.org/2/library/shutil.html#shutil.move\" rel=\"noreferrer\">shutil.move()</a></p>\n\n<pre><code>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.move(source, destination)\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/os.html#os.rename\" rel=\"noreferrer\">os.rename()</a></p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.rename(source, destination)\n</code></pre>\n"
                }
            ]
        },
        {
            "20996193": [
                {
                    "owner": {
                        "account_id": 421758,
                        "reputation": 3165,
                        "user_id": 800158,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://i.sstatic.net/tYupC.jpg?s=256",
                        "display_name": "Inversus",
                        "link": "https://stackoverflow.com/users/800158/inversus"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1440442693,
                    "last_edit_date": 1440442693,
                    "creation_date": 1404984730,
                    "answer_id": 24673008,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As my travels into the depths of PyQt5 continue, so shall I continue to update this answer with some of the shinier treasures I find. </p>\n\n<p>That being said, I am now taking a \"rough draft\" stab at a quick intro to PyQt5. I will also provide links to helpful resources. I am new to this framework as well, and I will elaborate on what I believe to be a good strategy for using it, as I figure that strategy out. There are likely other good strategies, so if anyone has anything to add, then please leave a comment. This is very much a work in progress.</p>\n\n<hr>\n\n<h2>Strategy</h2>\n\n<p>I've learned much from the example code as suggested in the other answer, but something the examples don't help with is PyQt5's deep magic. Frameworks with a lot of magic in them (PyQt5, Django, SQLAlchemy, ...) are great because an enormous amount of drudgery is abstracted away from you. On the flip side, it is not always clear what the hell is going on, or what you're supposed to do about it. </p>\n\n<p>Luckily, it seems we have options:</p>\n\n<ul>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/designer-quick-start.html\">QtDesigner</a>: For those days when your keyboard catches fire, there's a rockin' GUI-Builder called in the installation package. When you see the code this produces (perhaps only in the community version?), you'll see why this <em>may</em> not be the panacea it seems.</p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/qmlfirststeps.html\">QML</a>: Another candidate for panacea: declarative GUI building from formatted JSON. Yum.</p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/qtquick-index.html\">Qt Quick</a>: The framework for QML. By this point, it may seem tantalizingly easy, but don't get sucked in by this stuff just yet. <em>It always seems to come down to learning it by hand.</em> </p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/model-view-programming.html\">The Model-View Framework<sup>(1)</sup></a>: Model-View (not MVC) separates the code that deals with presentation/interaction from the code that manages the data, with the aim of providing modularity. </p></li>\n</ul>\n\n<p>Coding in PyQt5 is greatly simplified by using the set of classes that implement the <em>Model-View design pattern</em>. Model-View is an evolution of Model-View-Controller (MVC), in which the Controller has been reunited with the View. They seem like strange bedfellows, but, most of the program's logic <em>is</em> dealing with either the user, or data: it seems to make a certain sense, at least at a stratospheric level. </p>\n\n<p>From a bird's eye:</p>\n\n<h2>Architecture(s)</h2>\n\n<p><strong>Model-View-Controller</strong></p>\n\n<p>This widely-used design pattern separates the application into 3 layers:</p>\n\n<ol>\n<li><strong><em>Model</em></strong>  ~>  Encapsulates the data. Notifies View and Controller of any changes to the underlying data. This causes updates to the display of output or available commands, respectively.</li>\n<li><strong><em>View</em></strong>  ~>  Displays the relevant output from the Model to the user.</li>\n<li><strong><em>Controller</em></strong>  ~>  Encapsulates user interaction, and notifies the Model and View of relevant events.</li>\n</ol>\n\n<p><strong>Model-View</strong></p>\n\n<ul>\n<li><a href=\"http://qt-project.org/doc/qt-5/graphicsview.html\">The Graphics View Framework<sup>(1)</sup></a>  ~>  Represent everything (including embedded QWidgets, etc) inside a QGraphicsScene as a QGraphicsItem (or derivative thereof), including proxy classes for embedding widgets. The items are supposedly highly optimized, and integrating OpenGL support is a one-liner, which is nice. </li>\n</ul>\n\n<p>This design pattern puts the Controller inside the View. This way, the view is capable of handling the entirety of the user's interaction. In concrete terms, these are the Signals and Slots mechanisms.</p>\n\n<h2>User Interaction Management</h2>\n\n<p>Callbacks</p>\n\n<p>Signals and Slots</p>\n\n<p>..... ** I'm sorry, but I must sign off now. I'll be back to continue to add to this. **</p>\n\n<h2>Practical Example(s)</h2>\n\n<p>Like, for instance, you can take a tree view from the <code>itemviews/editabletreemodel</code> example, then swap in a file system model (<code>QFileSystemModel</code>) from the <code>itemviews/dirview</code> example and you've got a full (working) view of your directory tree. Pretty snazzy. </p>\n\n<p>So, you would take the code from the editabletreemodel example:</p>\n\n<pre><code>headers = (\"Title\", \"Description\")\n\nfile = QFile(':/default.txt')\nfile.open(QIODevice.ReadOnly)\nmodel = TreeModel(headers, file.readAll())\nfile.close()\n\nself.view.setModel(model)\n</code></pre>\n\n<p>...and swap in the model from dirview:</p>\n\n<pre><code>model = QFileSystemModel()\nmodel.setRootPath('')\nself.view.setModel(model)\n</code></pre>\n\n<p>...and it just works. Amazing. </p>\n\n<p>The next step (in my case) (*I think) is implementing a custom model which I will then use several views concurrently, but I don't know if that kinda thing fits your use case.</p>\n\n<h2>Resources</h2>\n\n<p>Here are some gems I found on my travels. Hopefully they help you on yours.</p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/model-view-programming.html\">This is a tutorial on Model-View for Qt5.<sup>(1)</sup></a> It is a very detailed document from the official Qt5 docs. A good deal of useful documentation can be found at the Qt5 site. Keep in mind, it's for Qt5 (the C++ library), but the difference is trivial to read through (and the PyQt5 official docs point there anyway).</p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/designer-quick-start.html\">This PDF contains a quick high-level to PyQt4's Model-View framework.</a> Note that is it for PyQt4 (not PyQt5), but it is actually for Python (as opposed to C++), and I found it very quickly taught me a lot. </p>\n\n<p>I am just starting to play with the Graphics View, and am finding <a href=\"http://qt-project.org/doc/qt-5/graphicsview.html\">this tutorial on the Graphics View Framework</a> very helpful. This is the same View that is used in the <code>qtdemo</code> example code to generate some slick effects. I'll be updating this in a bit. </p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/qtmodules.html\">This is a complete list of all of the Qt5 Modules.</a></p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/classes.html\">This is a complete list of all of the Qt5 Classes.</a></p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/functions.html\">This is a complete list of all functions in the Qt5 API.</a></p>\n\n<p>As katsh pointed out in another answer's comments, <a href=\"https://github.com/baoboa/pyqt5/tree/master/examples\">here is a link to the example code for PyQt5.2.1 on GitHub</a></p>\n\n<p>Additionally, a copy of the example code comes packaged with your distribution and can be found at: </p>\n\n<pre><code>%PYTHON_HOME%\\Lib\\site-packages\\PyQt5\\examples\n</code></pre>\n\n<p>If you're using PyDev (Eclipse), you can run examples by simply right-clicking an example's main module file in PyDev Package Explorer or Navigator =:> Run As =:> Python Run</p>\n\n<p>The best one, in my (not so) humble opinion, is:</p>\n\n<pre><code>%PYTHON_HOME%\\Lib\\site-packages\\PyQt5\\examples\\qtdemo\\qtdemo.py\n</code></pre>\n\n<p>Among my current projects, I'm in the process of reverse engineering this example. If you check it out, you'll see why. To be continued.. ;)</p>\n\n<p>Enjoy!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3911469,
                        "reputation": 291,
                        "user_id": 3236656,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/c236d682bcd13df16741f3eb4a45bf3c?s=256&d=identicon&r=PG",
                        "display_name": "Pete",
                        "link": "https://stackoverflow.com/users/3236656/pete"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1440441912,
                    "last_edit_date": 1440441912,
                    "creation_date": 1390705020,
                    "answer_id": 21359084,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Been looking for PyQt5 tutorials for some time? Look no further! You won't find many around the internet. </p>\n\n<p>Not really tutorials, but <em>pretty self-explanatory basic scripts</em> under the following path:</p>\n\n<blockquote>\n  <p>/python/lib/site-packages/PyQt5/examples </p>\n</blockquote>\n\n<p>you will find about <code>100</code> examples in <code>30</code> folders ranging from beginner to advanced, covering basic windows, menus, tabs, layouts, network, OpenGL, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2013073,
                        "reputation": 2783,
                        "user_id": 1801060,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/1fbee54e7f33933f12e65e4a02aa9d9e?s=256&d=identicon&r=PG",
                        "display_name": "user1801060",
                        "link": "https://stackoverflow.com/users/1801060/user1801060"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1390549515,
                    "creation_date": 1390549515,
                    "answer_id": 21327117,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Have a look at <a href=\"http://www.thehackeruniversity.com/2014/01/23/pyqt5-beginner-tutorial/\">http://www.thehackeruniversity.com/2014/01/23/pyqt5-beginner-tutorial/</a> This is a newbie friendly tutorial</p>\n"
                }
            ]
        },
        {
            "974952": [
                {
                    "owner": {
                        "account_id": 7953874,
                        "reputation": 4443,
                        "user_id": 6003870,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/MXPujapB.png?s=256",
                        "display_name": "\u0412\u0435\u043b\u043e\u041a\u0430\u0441\u0442\u0440\u044a",
                        "link": "https://stackoverflow.com/users/6003870/%d0%92%d0%b5%d0%bb%d0%be%d0%9a%d0%b0%d1%81%d1%82%d1%80%d1%8a"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1489253131,
                    "creation_date": 1489253131,
                    "answer_id": 42738309,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After own diligent searches I found several solutions, where each has advantages and disadvantages. Use the most suitable for your task.</p>\n\n<p>All examples tested with the CPython 3.5 on the operation system GNU/Linux Debian 8.</p>\n\n<hr>\n\n<p><strong>Using a recursion</strong></p>\n\n<p>Code</p>\n\n<pre><code>def get_digits_from_left_to_right(number, lst=None):\n    \"\"\"Return digits of an integer excluding the sign.\"\"\"\n\n    if lst is None:\n        lst = list()\n\n    number = abs(number)\n\n    if number &lt; 10:\n        lst.append(number)\n        return tuple(lst)\n\n    get_digits_from_left_to_right(number // 10, lst)\n    lst.append(number % 10)\n\n    return tuple(lst)\n</code></pre>\n\n<p>Demo</p>\n\n<pre><code>In [121]: get_digits_from_left_to_right(-64517643246567536423)\nOut[121]: (6, 4, 5, 1, 7, 6, 4, 3, 2, 4, 6, 5, 6, 7, 5, 3, 6, 4, 2, 3)\n\nIn [122]: get_digits_from_left_to_right(0)\nOut[122]: (0,)\n\nIn [123]: get_digits_from_left_to_right(123012312312321312312312)\nOut[123]: (1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 3, 1, 2, 3, 1, 2, 3, 1, 2)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the function <code>divmod</code></strong></p>\n\n<p>Code</p>\n\n<pre><code>def get_digits_from_right_to_left(number):\n    \"\"\"Return digits of an integer excluding the sign.\"\"\"\n\n    number = abs(number)\n\n    if number &lt; 10:\n        return (number, )\n\n    lst = list()\n\n    while number:\n        number, digit = divmod(number, 10)\n        lst.insert(0, digit)\n\n    return tuple(lst)\n</code></pre>\n\n<p>Demo</p>\n\n<pre><code>In [125]: get_digits_from_right_to_left(-3245214012321021213)\nOut[125]: (3, 2, 4, 5, 2, 1, 4, 0, 1, 2, 3, 2, 1, 0, 2, 1, 2, 1, 3)\n\nIn [126]: get_digits_from_right_to_left(0)\nOut[126]: (0,)\n\nIn [127]: get_digits_from_right_to_left(9999999999999999)\nOut[127]: (9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9)\n</code></pre>\n\n<hr>\n\n<p><strong>Using a construction <code>tuple(map(int, str(abs(number)))</code></strong></p>\n\n<pre><code>In [109]: tuple(map(int, str(abs(-123123123))))\nOut[109]: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nIn [110]: tuple(map(int, str(abs(1412421321312))))\nOut[110]: (1, 4, 1, 2, 4, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [111]: tuple(map(int, str(abs(0))))\nOut[111]: (0,)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the function <code>re.findall</code></strong></p>\n\n<pre><code>In [112]: tuple(map(int, re.findall(r'\\d', str(1321321312))))\nOut[112]: (1, 3, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [113]: tuple(map(int, re.findall(r'\\d', str(-1321321312))))\nOut[113]: (1, 3, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [114]: tuple(map(int, re.findall(r'\\d', str(0))))\nOut[114]: (0,)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the module <code>decimal</code></strong></p>\n\n<pre><code>In [117]: decimal.Decimal(0).as_tuple().digits\nOut[117]: (0,)\n\nIn [118]: decimal.Decimal(3441120391321).as_tuple().digits\nOut[118]: (3, 4, 4, 1, 1, 2, 0, 3, 9, 1, 3, 2, 1)\n\nIn [119]: decimal.Decimal(-3441120391321).as_tuple().digits\nOut[119]: (3, 4, 4, 1, 1, 2, 0, 3, 9, 1, 3, 2, 1)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2366,
                        "reputation": 8069,
                        "user_id": 3280,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/cYlDd.png?s=256",
                        "display_name": "Alexandru Nedelcu",
                        "link": "https://stackoverflow.com/users/3280/alexandru-nedelcu"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1488683142,
                    "last_edit_date": 1488683142,
                    "creation_date": 1244633436,
                    "answer_id": 975039,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>while number:\n    digit = number % 10\n\n    # do whatever with digit\n\n    # remove last digit from number (as integer)\n    number //= 10\n</code></pre>\n\n<p>On each iteration of the loop, it removes the last digit from number, assigning it to <code>digit</code>. \nIt's in reverse, starts from the last digit, finishes with the first</p>\n"
                },
                {
                    "owner": {
                        "account_id": 58992,
                        "reputation": 16027,
                        "user_id": 176569,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/edfaee6d982f519a6efdad5b2b6c12d0?s=256&d=identicon&r=PG",
                        "display_name": "bpgergo",
                        "link": "https://stackoverflow.com/users/176569/bpgergo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1451075009,
                    "last_edit_date": 1451075009,
                    "creation_date": 1372887215,
                    "answer_id": 17458472,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting to <code>str</code> is definitely slower then dividing by 10.</p>\n\n<p><code>map</code> is sligthly slower than list comprehension:</p>\n\n<pre><code>convert to string with map 2.13599181175\nconvert to string with list comprehension 1.92812991142\nmodulo, division, recursive 0.948769807816\nmodulo, division 0.699964046478\n</code></pre>\n\n<p>These times were returned by the following code on my laptop:</p>\n\n<pre><code>foo = \"\"\"\\\ndef foo(limit):\n    return sorted(set(map(sum, map(lambda x: map(int, list(str(x))), map(lambda x: x * 9, range(limit))))))\n\nfoo(%i)\n\"\"\"\n\nbar = \"\"\"\\\ndef bar(limit):\n    return sorted(set([sum([int(i) for i in str(n)]) for n in [k *9 for k in range(limit)]]))\n\nbar(%i)\n\"\"\"\n\nrac = \"\"\"\\\ndef digits(n):\n    return [n] if n&lt;10 else digits(n / 10)+[n %% 10]\n\ndef rabbit(limit):\n    return sorted(set([sum(digits(n)) for n in [k *9 for k in range(limit)]]))\n\nrabbit(%i)\n\"\"\"\n\nrab = \"\"\"\\\ndef sum_digits(number):\n  result = 0\n  while number:\n    digit = number %% 10\n    result += digit\n    number /= 10\n  return result\n\ndef rabbit(limit):\n    return sorted(set([sum_digits(n) for n in [k *9 for k in range(limit)]]))\n\nrabbit(%i)\n\"\"\"\n\n\nimport timeit\n\nprint \"convert to string with map\", timeit.timeit(foo % 100, number=10000)\nprint \"convert to string with list comprehension\", timeit.timeit(bar % 100, number=10000)\nprint \"modulo, division, recursive\", timeit.timeit(rac % 100, number=10000)\nprint \"modulo, division\", timeit.timeit(rab % 100, number=10000)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5095522,
                        "reputation": 452,
                        "user_id": 4086992,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-vryzRaKbem8/AAAAAAAAAAI/AAAAAAAAHac/ds9OUsjHdPI/photo.jpg?sz=256",
                        "display_name": "Ricardo Alejos",
                        "link": "https://stackoverflow.com/users/4086992/ricardo-alejos"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1442430575,
                    "creation_date": 1442430575,
                    "answer_id": 32616787,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just assuming you want to get the <em>i</em>-th least significant digit from an integer number <em>x</em>, you can try:</p>\n\n<pre><code>(abs(x)%(10**i))/(10**(i-1))\n</code></pre>\n\n<p>I hope it helps.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1084240,
                        "reputation": 309,
                        "user_id": 1080358,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/abfdcba6bff4debbb7292c65c8d1f19e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dohmatob",
                        "link": "https://stackoverflow.com/users/1080358/dohmatob"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1442241171,
                    "creation_date": 1442241171,
                    "answer_id": 32567460,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Answer:</strong> 165</p>\n\n<p><strong>Method:</strong> brute-force! Here is a tiny bit of Python (version 2.7) code to count'em all.</p>\n\n<pre><code>from math import sqrt, floor\nis_ps = lambda x: floor(sqrt(x)) ** 2 == x\ncount = 0\nfor n in range(1002, 10000, 3):\n    if n % 11 and is_ps(sum(map(int, str(n)))):\n        count += 1\n        print \"#%i: %s\" % (count, n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10078,
                        "reputation": 27326,
                        "user_id": 18866,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/0b887c77a19c495b68a6772972c23a23?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy Cantrell",
                        "link": "https://stackoverflow.com/users/18866/jeremy-cantrell"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1431124306,
                    "last_edit_date": 1495541411,
                    "creation_date": 1431124306,
                    "answer_id": 30133786,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Similar to <a href=\"https://stackoverflow.com/a/975039/18866\">this</a> answer but more a more \"pythonic\" way to iterate over the digis would be:</p>\n\n<pre><code>while number:\n    # \"pop\" the rightmost digit\n    number, digit = divmod(number, 10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3481558,
                        "reputation": 63,
                        "user_id": 2913468,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Suw3l.jpg?s=256",
                        "display_name": "Pski17",
                        "link": "https://stackoverflow.com/users/2913468/pski17"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1397049896,
                    "creation_date": 1397049896,
                    "answer_id": 22963974,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>(number/10**x)%10\n</code></pre>\n\n<p>You can use this in a loop, where number is the full number, x is each iteration of the loop (0,1,2,3,...,n) with n being the stop point. x = 0 gives the ones place, x = 1 gives the tens, x = 2 gives the hundreds, and so on. Keep in mind that this will give the value of the digits from right to left, so this might not be the for an ISBN but it will still isolate each digit.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3856844,
                        "reputation": 75,
                        "user_id": 3195552,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0ce25b8f99f309d4b5f8f8a171b11d66?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ben",
                        "link": "https://stackoverflow.com/users/3195552/ben"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1389865707,
                    "creation_date": 1389865707,
                    "answer_id": 21158316,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have made this program and here is the bit of code that actually calculates the check digit in my program</p>\n\n<pre><code>    #Get the 10 digit number\n    number=input(\"Please enter ISBN number: \")\n\n    #Explained below\n    no11 = (((int(number[0])*11) + (int(number[1])*10) + (int(number[2])*9) + (int(number[3])*8) \n           + (int(number[4])*7) + (int(number[5])*6) + (int(number[6])*5) + (int(number[7])*4) +\n           (int(number[8])*3) + (int(number[9])*2))/11)\n\n    #Round to 1 dp\n    no11 = round(no11, 1)\n\n    #explained below\n    no11 = str(no11).split(\".\")\n\n    #get the remainder and check digit\n    remainder = no11[1]\n    no11 = (11 - int(remainder))\n\n    #Calculate 11 digit ISBN\n    print(\"Correct ISBN number is \" + number + str(no11))\n</code></pre>\n\n<p>Its a long line of code, but it splits the number up, multiplies the digits by the appropriate amount, adds them together and divides them by 11, in one line of code. The .split() function just creates a list (being split at the decimal) so you can take the 2nd item in the list and take that from 11 to find the check digit. This could also be made even more efficient by changing these two lines:</p>\n\n<pre><code>    remainder = no11[1]\n    no11 = (11 - int(remainder))\n</code></pre>\n\n<p>To this:</p>\n\n<pre><code>    no11 = (11 - int(no11[1]))\n</code></pre>\n\n<p>Hope this helps :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1058480,
                        "reputation": 505,
                        "user_id": 1060631,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5f2ab57cf2471b41f6a0d2dd319e38a6?s=256&d=identicon&r=PG",
                        "display_name": "shadowfox",
                        "link": "https://stackoverflow.com/users/1060631/shadowfox"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1389649891,
                    "creation_date": 1389649891,
                    "answer_id": 21102087,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the body of this loop to do whatever you want to with the digits</p>\n\n<pre><code>for digit in map(int, str(my_number)):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26340,
                        "reputation": 9449,
                        "user_id": 68457,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/8b26ea862275b9f2618ea6d46d61126a?s=256&d=identicon&r=PG",
                        "display_name": "mavnn",
                        "link": "https://stackoverflow.com/users/68457/mavnn"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1348222056,
                    "last_edit_date": 1348222056,
                    "creation_date": 1244632373,
                    "answer_id": 974967,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>list_of_ints = [int(i) for i in str(ISBN)]\n</code></pre>\n\n<p>Will give you a ordered list of ints. Of course, given duck typing, you might as well work with str(ISBN).</p>\n\n<p>Edit: As mentioned in the comments, this list isn't sorted in the sense of being ascending or descending, but it does have a defined order (sets, dictionaries, etc in python in theory don't, although in practice the order tends to be fairly reliable). If you want to sort it:</p>\n\n<p>list_of_ints.sort()</p>\n\n<p>is your friend. Note that sort() sorts in place (as in, actually changes the order of the existing list) and doesn't return a new list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1772597,
                        "reputation": 619,
                        "user_id": 1665184,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a212e089420466fff584da23195037ea?s=256&d=identicon&r=PG",
                        "display_name": "chyanog",
                        "link": "https://stackoverflow.com/users/1665184/chyanog"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1347698336,
                    "creation_date": 1347698336,
                    "answer_id": 12435874,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Recursion version:</p>\n\n<pre><code>def int_digits(n):\n    return [n] if n&lt;10 else int_digits(n/10)+[n%10]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6714,
                        "reputation": 6926,
                        "user_id": 11414,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/s8vyO.png?s=256",
                        "display_name": "Evgeny Zislis",
                        "link": "https://stackoverflow.com/users/11414/evgeny-zislis"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1318803564,
                    "creation_date": 1318803564,
                    "answer_id": 7787740,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Convert it to string and map over it with the int() function.</p>\n\n<pre><code>map(int, str(1231231231))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75493,
                        "reputation": 33533,
                        "user_id": 216517,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/oBeXz.jpg?s=256",
                        "display_name": "st0le",
                        "link": "https://stackoverflow.com/users/216517/st0le"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1284444436,
                    "creation_date": 1284444436,
                    "answer_id": 3706468,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>On Older versions of Python...</p>\n\n<pre><code>map(int,str(123))\n</code></pre>\n\n<p>On New Version 3k</p>\n\n<pre><code>list(map(int,str(123)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 150802,
                        "reputation": 415,
                        "user_id": 364249,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/1aa32f5d44589f0acca6b6a438bf74b0?s=256&d=identicon&r=PG",
                        "display_name": "Lord British",
                        "link": "https://stackoverflow.com/users/364249/lord-british"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1284441640,
                    "creation_date": 1284441640,
                    "answer_id": 3706281,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How about a one-liner list of digits...</p>\n\n<pre><code>ldigits = lambda n, l=[]: not n and l or l.insert(0,n%10) or ldigits(n/10,l)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222366,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": true,
                    "score": 89,
                    "last_activity_date": 1244634277,
                    "last_edit_date": 1244634277,
                    "creation_date": 1244632267,
                    "answer_id": 974956,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Just create a string out of it.</p>\n\n<pre><code>myinteger = 212345\nnumber_string = str(myinteger)\n</code></pre>\n\n<p>That's enough. Now you can iterate over it:</p>\n\n<pre><code>for ch in number_string:\n    print ch # will print each digit in order\n</code></pre>\n\n<p>Or you can slice it:</p>\n\n<pre><code>print number_string[:2] # first two digits\nprint number_string[-3:] # last three digits\nprint number_string[3] # forth digit\n</code></pre>\n\n<hr>\n\n<p>Or better, don't convert the user's input to an integer (the user types a string)</p>\n\n<pre><code>isbn = raw_input()\nfor pos, ch in enumerate(reversed(isbn)):\n    print \"%d * %d is %d\" % pos + 2, int(ch), int(ch) * (pos + 2)\n</code></pre>\n\n<p>For more information read a <a href=\"http://docs.python.org/tut\" rel=\"noreferrer\">tutorial</a>.</p>\n"
                }
            ]
        },
        {
            "5169257": [
                {
                    "owner": {
                        "account_id": 16960254,
                        "reputation": 1065,
                        "user_id": 12267564,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jV86X.png?s=256",
                        "display_name": "lazos",
                        "link": "https://stackoverflow.com/users/12267564/lazos"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1593102678,
                    "creation_date": 1593102678,
                    "answer_id": 62580062,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you <code>print(type(Num.getone))</code> you will get <code>&lt;class 'function'&gt;</code>.</p>\n<p>It is just a plain function, and be called as usual (with no arguments):</p>\n<pre><code>Num.getone() # returns 1  as expected\n</code></pre>\n<p>but if you print <code>print(type(myObj.getone))</code>  you will get <code>&lt;class 'method'&gt;</code>.</p>\n<p>So when you call <code>getone()</code> from an instance of the class, Python automatically &quot;transforms&quot; the function defined in a class into a method.</p>\n<p>An instance method requires the first argument to be the instance object. You can think <code>myObj.getone()</code>  as syntactic sugar for</p>\n<pre><code>Num.getone(myObj) # this explains the Error 'getone()' takes no arguments (1 given).\n</code></pre>\n<p>For  example:</p>\n<pre><code>class Num:\n    def __init__(self,num):\n        self.n = num\n    def getid(self):\n        return id(self)\n\nmyObj=Num(3)\n</code></pre>\n<p>Now if you</p>\n<pre><code>print(id(myObj) == myObj.getid())    \n# returns True\n</code></pre>\n<p>As you can see <code>self</code> and <code>myObj</code> are the same object</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10374,
                        "reputation": 8712,
                        "user_id": 19556,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/06466d059d58bbaee6320c8f2e733aa5?s=256&d=identicon&r=PG",
                        "display_name": "stderr",
                        "link": "https://stackoverflow.com/users/19556/stderr"
                    },
                    "is_accepted": true,
                    "score": 65,
                    "last_activity_date": 1527221129,
                    "last_edit_date": 1527221129,
                    "creation_date": 1299078695,
                    "answer_id": 5169458,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python: </p>\n\n<ul>\n<li><strong>Instance methods:</strong> require the <code>self</code> argument.</li>\n<li><strong>Class methods:</strong> take the class as a first argument.  </li>\n<li><strong>Static methods:</strong> do not require either the instance (<code>self</code>) or the class (<code>cls</code>) argument.</li>\n</ul>\n\n<p><code>__init__</code> is a special function and without overriding <code>__new__</code> it will always be given the instance of the class as its first argument.  </p>\n\n<p>An example using the builtin classmethod and staticmethod decorators:</p>\n\n<pre><code>import sys\n\nclass Num:\n    max = sys.maxint\n\n    def __init__(self,num):\n        self.n = num\n\n    def getn(self):\n        return self.n\n\n    @staticmethod\n    def getone():\n        return 1\n\n    @classmethod\n    def getmax(cls):\n        return cls.max\n\nmyObj = Num(3)\n# with the appropriate decorator these should work fine\nmyObj.getone()\nmyObj.getmax()\nmyObj.getn()\n</code></pre>\n\n<p>That said, I would try to use <code>@classmethod</code>/<code>@staticmethod</code> sparingly.  If you find yourself creating objects that consist of nothing but <code>staticmethod</code>s the more pythonic thing to do would be to create a new module of related functions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 75842,
                        "reputation": 3615,
                        "user_id": 217419,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/009af01921268eaa911523e3894b993b?s=256&d=identicon&r=PG",
                        "display_name": "neil",
                        "link": "https://stackoverflow.com/users/217419/neil"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1299078298,
                    "creation_date": 1299078298,
                    "answer_id": 5169381,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The current object is explicitly passed to the method as the first parameter.  <code>self</code> is the conventional name.  You can call it anything you want but it is strongly advised that you stick with this convention to avoid confusion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1299078081,
                    "creation_date": 1299078081,
                    "answer_id": 5169336,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The fact that your method does not <em>use</em> the <code>self</code> argument (which is a reference to the instance that the method is attached to) doesn't mean you can leave it out. It always has to be there, because Python is always going to try to pass it in.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 153912,
                        "reputation": 5048,
                        "user_id": 369503,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/dd921a2369e2ca86540b283821e63f3b?s=256&d=identicon&r=PG",
                        "display_name": "Jordan",
                        "link": "https://stackoverflow.com/users/369503/jordan"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1299077909,
                    "creation_date": 1299077909,
                    "answer_id": 5169289,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In python you must always pass in at least one argument to class methods, the argument is <code>self</code> and it is not meaningless its a reference to the instance itself</p>\n"
                },
                {
                    "owner": {
                        "account_id": 76141,
                        "reputation": 815048,
                        "user_id": 218196,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/4P5DY.jpg?s=256",
                        "display_name": "Felix Kling",
                        "link": "https://stackoverflow.com/users/218196/felix-kling"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1299077896,
                    "creation_date": 1299077896,
                    "answer_id": 5169285,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Every method needs to accept one argument: The instance itself (or the class if it is a static method).</p>\n\n<p><a href=\"http://docs.python.org/tutorial/classes.html\" rel=\"noreferrer\">Read more about classes in Python</a>.</p>\n"
                }
            ]
        },
        {
            "30539882": [
                {
                    "owner": {
                        "account_id": 84277,
                        "reputation": 176291,
                        "user_id": 235698,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/KjvlE.png?s=256",
                        "display_name": "Mark Tolonen",
                        "link": "https://stackoverflow.com/users/235698/mark-tolonen"
                    },
                    "is_accepted": true,
                    "score": 13,
                    "last_activity_date": 1484331124,
                    "last_edit_date": 1484331124,
                    "creation_date": 1432941565,
                    "answer_id": 30540470,
                    "question_id": 30539882,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The problem <strike>is</strike><strong>was</strong> (see Python 3.6 update below) with the Windows console, which supports an ANSI character set appropriate for the region targeted by your version of Windows.  Python throws an exception by default when unsupported characters are output.</p>\n\n<p>Python can read an <a href=\"https://docs.python.org/3.4/using/cmdline.html#envvar-PYTHONIOENCODING\" rel=\"nofollow noreferrer\">environment variable</a> to output in other encodings, or to change the error handling default.  Below, I've read the console default and change the default error handling to print a <code>?</code> instead of throwing an error for characters that are unsupported in the console's current code page.</p>\n\n<pre><code>C:\\&gt;chcp\nActive code page: 437   # Note, US Windows OEM code page.\n\nC:\\&gt;set PYTHONIOENCODING=437:replace\n\nC:\\&gt;example.py\nLeo? Jan\u00e1?ek\nZdzis?aw Beksi?ski\n??? ?? ??\n??\n?????? ??? ?????????? ????????\nMinha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0\n</code></pre>\n\n<p>Note the US OEM code page is limited to ASCII and some Western European characters.</p>\n\n<p>Below I've instructed Python to use UTF8, but since the Windows console doesn't support it, I redirect the output to a file and display it in Notepad:</p>\n\n<pre><code>C:\\&gt;set PYTHONIOENCODING=utf8\nC:\\&gt;example &gt;out.txt\nC:\\&gt;notepad out.txt\n</code></pre>\n\n<p><img src=\"https://i.sstatic.net/2jt15.png\" alt=\"enter image description here\"></p>\n\n<p>On Windows, its best to use a Python IDE that supports UTF-8 instead of the console when working with multiple languages.  If only using one language, select it as the system locale in the <code>Region and Language</code> control panel and the console will support the characters of that language.</p>\n\n<h2>Update for Python 3.6</h2>\n\n<p>Python 3.6 now uses Windows Unicode APIs to write directly to the console, so the only limit is the console font's support of the characters.  The following code works in a US Windows console.  I have a Chinese language pack installed, it even displays the Chinese and Japanese if the console font is changed.  Even without the correct font, replacement characters are shown in the console.  Cut-n-paste to an environment such as this web page will display the characters correctly.</p>\n\n<pre><code>#!python3.6\n#coding: utf8\nczech = 'Leo\u0161 Jan\u00e1\u010dek'\nprint(czech)\n\npl = 'Zdzis\u0142aw Beksi\u0144ski'\nprint(pl)\n\njp = '\u30ea\u30f3\u30b0 \u5c71\u6751 \u8c9e\u5b50'\nprint(jp)\n\nchinese = '\u4e94\u884c'\nprint(chinese)\n\nMIR = '\u041c\u0430\u0448\u0438\u043d\u0430 \u0434\u043b\u044f \u0418\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0420\u0430\u0441\u0447\u0451\u0442\u043e\u0432'\nprint(MIR)\n\npt = 'Minha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0'\nprint(pt)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Leo\u0161 Jan\u00e1\u010dek\nZdzis\u0142aw Beksi\u0144ski\n\u30ea\u30f3\u30b0 \u5c71\u6751 \u8c9e\u5b50\n\u4e94\u884c\n\u041c\u0430\u0448\u0438\u043d\u0430 \u0434\u043b\u044f \u0418\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0420\u0430\u0441\u0447\u0451\u0442\u043e\u0432\nMinha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1474281199,
                    "last_edit_date": 1495542881,
                    "creation_date": 1433021211,
                    "answer_id": 30551552,
                    "question_id": 30539882,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Update:</strong> <a href=\"https://stackoverflow.com/a/32176732/4279\">Since Python 3.6, the code example that prints Unicode strings directly should just work now (even without <code>py -mrun</code>)</a>.</p>\n\n<hr>\n\n<p>Python can print text in multiple languages in Windows console whatever <code>chcp</code> says:</p>\n\n<pre><code>T:\\&gt; py -mpip install win-unicode-console\nT:\\&gt; py -mrun your_script.py\n</code></pre>\n\n<p>where <code>your_script.py</code> prints Unicode directly e.g.:</p>\n\n<pre><code>#!/usr/bin/env python3\nprint('\u0161 \u00e1\u010d')      # cz\nprint('\u0142 \u0144')       # pl\nprint('\u30ea\u30f3\u30b0')     # jp\nprint('\u4e94\u884c')      # cn\nprint('\u0448 \u044f \u0436\u0445 \u0451') # ru\nprint('\u00ed \u00e7\u00e1\u00e0')    # pt\n</code></pre>\n\n<p>All you need is to configure the font in your Windows console that can display the desired characters.</p>\n\n<p>You could also run your Python script via IDLE without installing non-stdlib modules:</p>\n\n<pre><code>T:\\&gt; py -midlelib -r your_script.py\n</code></pre>\n\n<p>To write to a file/pipe, use <code>PYTHONIOENCODING=utf-8</code> as <a href=\"https://stackoverflow.com/a/30540470/4279\">@Mark Tolonen suggested</a>:</p>\n\n<pre><code>T:\\&gt; set PYTHONIOENCODING=utf-8\nT:\\&gt; py your_script.py &gt;output-utf8.txt \n</code></pre>\n\n<p>Only the last solution supports non-BMP characters such as <a href=\"https://codepoints.net/U+1F612\" rel=\"noreferrer\">\ud83d\ude12 (U+1F612 UNAMUSED FACE)</a> -- <code>py -mrun</code> can write them but Windows console displays them as boxes even if the font supports corresponding Unicode characters (though you can copy-paste the boxes into another program, to get the characters).</p>\n"
                }
            ]
        },
        {
            "16384109": [
                {
                    "owner": {
                        "account_id": 2150615,
                        "reputation": 32260,
                        "user_id": 1907098,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/lPkVW.png?s=256",
                        "display_name": "Volatility",
                        "link": "https://stackoverflow.com/users/1907098/volatility"
                    },
                    "is_accepted": true,
                    "score": 137,
                    "last_activity_date": 1584996375,
                    "last_edit_date": 1584996375,
                    "creation_date": 1367753900,
                    "answer_id": 16384126,
                    "question_id": 16384109,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"http://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a> should do the trick.</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list(itertools.product([1, 5, 8], [0.5, 4]))\n[(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]\n</code></pre>\n\n<p>Note that <code>itertools.product</code> returns an iterator, so you don't need to convert it into a list if you are only going to iterate over it once.</p>\n\n<p>eg. </p>\n\n<pre><code>for x in itertools.product([1, 5, 8], [0.5, 4]):\n    # do stuff\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1352440,
                        "reputation": 5511,
                        "user_id": 1329892,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c67c31ce6b09f7ef7fd606068431a0e6?s=256&d=identicon&r=PG",
                        "display_name": "SpinUp __ A Davis",
                        "link": "https://stackoverflow.com/users/1329892/spinup-a-davis"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1524879774,
                    "creation_date": 1524879774,
                    "answer_id": 50072046,
                    "question_id": 16384109,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This can be achieved without any imports using a <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">list comprehension</a>. Using your example:</p>\n\n<pre><code>first = [1, 5, 8]\nsecond = [0.5, 4]\n\ncombined = [(f,s) for f in first for s in second]\n\nprint(combined)\n# [(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]\n</code></pre>\n"
                }
            ]
        },
        {
            "2146419": [
                {
                    "owner": {
                        "account_id": 11111296,
                        "reputation": 1,
                        "user_id": 8156991,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1002582946544116/picture?type=large",
                        "display_name": "MIIK7",
                        "link": "https://stackoverflow.com/users/8156991/miik7"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1518553437,
                    "creation_date": 1518553437,
                    "answer_id": 48775034,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>condition1 = False\ncondition2 = False\nval = -1\n#here is the function getstuff is not defined, i hope you define it before\n#calling it into while loop code\n\nwhile condition1 and condition2 is False and val == -1:\n#as you can see above , we can write that in a simplified syntax.\n    val,something1,something2 = getstuff()\n\n    if something1 == 10:\n        condition1 = True\n\n    elif something2 == 20:\n# here you don't have to use \"if\" over and over, if have to then write \"elif\" instead    \n    condition2 = True\n# ihope it can be helpfull\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4551,
                        "reputation": 95781,
                        "user_id": 6899,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=256&d=identicon&r=PG",
                        "display_name": "tzot",
                        "link": "https://stackoverflow.com/users/6899/tzot"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1264623238,
                    "creation_date": 1264623238,
                    "answer_id": 2149931,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have you noticed that in the code you posted, <code>condition2</code> is never set to <code>False</code>? This way, your loop body is never executed.</p>\n\n<p>Also, note that in Python, <code>not condition</code> is preferred to <code>condition == False</code>; likewise, <code>condition</code> is preferred to <code>condition == True</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2164,
                        "reputation": 26078,
                        "user_id": 2979,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a116dfd0007cb23dc3ce48503c2b93b?s=256&d=identicon&r=PG",
                        "display_name": "Tendayi Mawushe",
                        "link": "https://stackoverflow.com/users/2979/tendayi-mawushe"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1264592742,
                    "creation_date": 1264592742,
                    "answer_id": 2146535,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I am not sure it would read better but you could do the following:</p>\n\n<pre><code>while any((not condition1, not condition2, val == -1)):\n    val,something1,something2 = getstuff()\n\n    if something1==10:\n        condition1 = True\n\n    if something2==20:\n        condition2 = True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user97370"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1264591986,
                    "creation_date": 1264591986,
                    "answer_id": 2146459,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>while not condition1 or not condition2 or val == -1:\n</code></pre>\n\n<p>But there was nothing wrong with your original of using an if inside of a while True.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 44762,
                        "reputation": 341037,
                        "user_id": 131527,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG",
                        "display_name": "ghostdog74",
                        "link": "https://stackoverflow.com/users/131527/ghostdog74"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1264591904,
                    "creation_date": 1264591904,
                    "answer_id": 2146444,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>use an infinity loop like what you have originally done. Its cleanest and you can incorporate many conditions as you wish</p>\n\n<pre><code>while 1:\n  if condition1 and condition2:\n      break\n  ...\n  ...\n  if condition3: break\n  ...\n  ...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": true,
                    "score": 23,
                    "last_activity_date": 1264591734,
                    "creation_date": 1264591734,
                    "answer_id": 2146427,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Change the <code>and</code>s to <code>or</code>s.</p>\n"
                }
            ]
        },
        {
            "15614067": [
                {
                    "owner": {
                        "account_id": 232399,
                        "reputation": 33747,
                        "user_id": 497208,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/f53ec83b7a4a74ef31eabd1d86b716e0?s=256&d=identicon&r=PG",
                        "display_name": "Jakub M.",
                        "link": "https://stackoverflow.com/users/497208/jakub-m"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1364212587,
                    "last_edit_date": 1364212587,
                    "creation_date": 1364211864,
                    "answer_id": 15614115,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>sorted(result.iteritems(), key=lambda key_value: key_value[0])\n</code></pre>\n\n<p>This will output sorted results, but the dictionary will remain unsorted. If you want to maintain ordering of a dictionary, use <a href=\"http://docs.python.org/2/library/collections.html#collections.OrderedDict\"><code>OrderedDict</code></a></p>\n\n<p>Actually, if you sort by <em>key</em> you could skip the <code>key=...</code> part, because then the iterated items are sorted first by key and later by value (what NPE uses in his answer)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 12,
                    "last_activity_date": 1364211870,
                    "creation_date": 1364211870,
                    "answer_id": 15614118,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Standard Python dictionaries are inherently unordered. However, you could use <a href=\"http://docs.python.org/2/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>. It preserves the insertion order, so all you have to do is add the key/value pairs in the desired order:</p>\n\n<pre><code>In [4]: collections.OrderedDict(sorted(result.items()))\nOut[4]: OrderedDict([('1', 'value1'), ('2', 'value2')])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 430678,
                        "reputation": 29862,
                        "user_id": 814253,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/6ec359ca87eda89de3251951372a2e8d?s=256&d=identicon&r=PG",
                        "display_name": "DonCallisto",
                        "link": "https://stackoverflow.com/users/814253/doncallisto"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1364211842,
                    "creation_date": 1364211842,
                    "answer_id": 15614106,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python dictionaries are unordered (for definition)</p>\n\n<p>You can use <a href=\"http://docs.python.org/library/collections.html#collections.OrderedDict\" rel=\"nofollow\">OrderedDict</a> instead</p>\n"
                }
            ]
        },
        {
            "1540214": [
                {
                    "owner": {
                        "account_id": 48616,
                        "reputation": 6139,
                        "user_id": 144529,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/5b83e52ed3ff7e8f6e7dd2f931b10498?s=256&d=identicon&r=PG",
                        "display_name": "easement",
                        "link": "https://stackoverflow.com/users/144529/easement"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1633136793,
                    "last_edit_date": 1633136793,
                    "creation_date": 1255033871,
                    "answer_id": 1540241,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Have you seen <a href=\"https://skulpt.org/\" rel=\"nofollow noreferrer\">Skulpt</a>?</p>\n<blockquote>\n<p>Skulpt is an <em><strong>entirely in-browser</strong></em> implementation of Python.</p>\n<p>No preprocessing, plugins or server-side support required, just write Python and reload.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1417542721,
                    "last_edit_date": 1417542721,
                    "creation_date": 1255036067,
                    "answer_id": 1540497,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Noone has mentioned it yet, but <a href=\"http://en.wikipedia.org/wiki/Grail_(web_browser)\" rel=\"nofollow noreferrer\">grail</a> is/was pretty cool</p>\n\n<blockquote>\n  <p>Grail was a free extensible multi-platform web browser written in the Python programming language. The project was started in August 1995, with its first public release in November of that year. [1] The .3 beta contained over 27,000 lines of Python.[1] Its last release was of version 0.6 in 1999, with latest version under development.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 27659,
                        "reputation": 10033,
                        "user_id": 73228,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/gH3tj.jpg?s=256",
                        "display_name": "Andrew",
                        "link": "https://stackoverflow.com/users/73228/andrew"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1326187693,
                    "last_edit_date": 1326187693,
                    "creation_date": 1255033845,
                    "answer_id": 1540238,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python is available for the client: <a href=\"http://www.skulpt.org/\" rel=\"nofollow noreferrer\">skulpt</a></p>\n\n<p>If its client side your interested may be worth checking out</p>\n\n<p><a href=\"http://jqueryui.com/\" rel=\"nofollow noreferrer\">http://jqueryui.com/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 914650,
                        "reputation": 39,
                        "user_id": 947729,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/06bcc5e791e7f49cd53fb53418cdef7b?s=256&d=identicon&r=PG",
                        "display_name": "Tor Iver",
                        "link": "https://stackoverflow.com/users/947729/tor-iver"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1316121162,
                    "creation_date": 1316121162,
                    "answer_id": 7437506,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>On Windows, any language that registers for the Windows Scripting Host can run in IE. At least the ActiveState version of Python could do that; I seem to recall that has been superseded by a more official version these days.</p>\n\n<p>But that solution requires the user to install a python interpreter and run some script or .reg file to put the correct \"magic\" into the registry for the hooks to work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7022,
                        "reputation": 21546,
                        "user_id": 11992,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/09b743ba088c0bf7e07ee429a32acedc?s=256&d=identicon&r=PG",
                        "display_name": "nikow",
                        "link": "https://stackoverflow.com/users/11992/nikow"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1255035621,
                    "last_edit_date": 1255035621,
                    "creation_date": 1255034421,
                    "answer_id": 1540305,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <a href=\"http://pyjs.org/\" rel=\"noreferrer\">pyjamas</a> to convert Python code to JS code that runs in the browser (note that pyjamas also offers much more). So YES, you can use Python for client side web development.</p>\n\n<p>Pyjamas is basically a port of the <a href=\"http://code.google.com/intl/de/webtoolkit/\" rel=\"noreferrer\">Google Web Toolkit</a>, which allows you to write client side code in Java.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 43211,
                        "reputation": 171843,
                        "user_id": 126214,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=256&d=identicon&r=PG",
                        "display_name": "Lennart Regebro",
                        "link": "https://stackoverflow.com/users/126214/lennart-regebro"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1255035035,
                    "creation_date": 1255035035,
                    "answer_id": 1540379,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Silverlight can run IronPython, so you can make Silverlight applications. Which is client-side.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76525,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1255034142,
                    "last_edit_date": 1255034142,
                    "creation_date": 1255033826,
                    "answer_id": 1540234,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python isn't really used for client side, because no major web browsers have Python built in.</p>\n\n<p>However, Javascript has become more and more Python-like as it has evolved.  You might want to study Python and Javascript together.</p>\n\n<p>Take a look at <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\" rel=\"noreferrer\"><a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\" rel=\"noreferrer\">https://developer.mozilla.org/en/New_in_JavaScript_1.7</a></a> and notice the Python-like nature of the new features.  \"array comprehensions\" are just like Python list comprehensions; iterators and generators are straight out of Python; \"destructuring assignments\" are a standard Python idiom.</p>\n\n<p>Javascript is kind of like Python with curly braces.  It uses a very different inheritance model, but libraries are available that implement a more Python-like class system on top of the built-in system in Javascript.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18462,
                        "reputation": 53744,
                        "user_id": 42304,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/9fcbbf743a912163bfd2bf8f55136913?s=256&d=identicon&r=PG",
                        "display_name": "Byron Whitlock",
                        "link": "https://stackoverflow.com/users/42304/byron-whitlock"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1255033820,
                    "creation_date": 1255033820,
                    "answer_id": 1540233,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>No. Browsers don't run Python.</p>\n"
                }
            ]
        },
        {
            "2736255": [
                {
                    "owner": {
                        "account_id": 1605734,
                        "reputation": 9434,
                        "user_id": 1485877,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/tkdN8.jpg?s=256",
                        "display_name": "drhagen",
                        "link": "https://stackoverflow.com/users/1485877/drhagen"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1681235504,
                    "last_edit_date": 1681235504,
                    "creation_date": 1550775636,
                    "answer_id": 54814371,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://www.python.org/dev/peps/pep-0526/\" rel=\"noreferrer\">In Python 3.6+</a>, you can annotate an attribute of an abstract class (or any variable) without providing a value for that attribute.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass Controller(ABC):\n    path: str\n\nclass MyController(Controller):\n    def __init__(self, path: str):\n        self.path = path\n</code></pre>\n<p>This makes for very clean code where it is obvious that the attribute is abstract.</p>\n<p>It should be noted that this will not raise an exception at definition time if a subclass does not provide an implementation. However, an <code>AttributeError</code> exception will be raised if anythhing tries to access the undefined attribute.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1491942,
                        "reputation": 9019,
                        "user_id": 1398841,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/s8gQQ.png?s=256",
                        "display_name": "johnthagen",
                        "link": "https://stackoverflow.com/users/1398841/johnthagen"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1669643836,
                    "last_edit_date": 1669643836,
                    "creation_date": 1470187001,
                    "answer_id": 38732834,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could create an attribute in the <a href=\"https://docs.python.org/3/library/abc.html#abc.ABC\" rel=\"noreferrer\">abc.ABC</a> abstract base class with a value such as <a href=\"https://docs.python.org/library/stdtypes.html?highlight=notimplemented#the-notimplemented-object\" rel=\"noreferrer\"><code>NotImplemented</code></a> so that if the attribute is not overriden and then used, a clear error that expresses intent is shown at run time.</p>\n<p>The following code uses a <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"noreferrer\">PEP 484</a> type hint to help PyCharm correctly statically analyze the type of the <code>path</code> attribute as well.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass Controller(ABC):\n    path: str = NotImplemented\n\nclass MyController(Controller):\n    path = &quot;/home&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5345891,
                        "reputation": 2952,
                        "user_id": 4261472,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/9ERr6.jpg?s=256",
                        "display_name": "Sergei Voitovich",
                        "link": "https://stackoverflow.com/users/4261472/sergei-voitovich"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1666556544,
                    "last_edit_date": 1666556544,
                    "creation_date": 1570704581,
                    "answer_id": 58321197,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For <strong>Python 3.3</strong>+ there's an elegant solution</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC, abstractmethod\n    \nclass BaseController(ABC):\n    @property\n    @abstractmethod\n    def path(self) -&gt; str:\n        ...\n\nclass Controller(BaseController):\n    path = &quot;/home&quot;\n\n\n# Instead of an elipsis, you can add a docstring for clarity\nclass AnotherBaseController(ABC):\n    @property\n    @abstractmethod\n    def path(self) -&gt; str:\n        &quot;&quot;&quot;\n        :return: the url path of this controller\n        &quot;&quot;&quot;\n</code></pre>\n<p>Despite some great answers have already been given, I thought this answer would nevertheless add some value. This approach has two advantages:</p>\n<ol>\n<li><p><code>...</code> in an abstract method's body is more preferable than <code>pass</code>. Unlike <code>pass</code>, <code>...</code> implies <strong>no operations</strong>, where <code>pass</code> only means the absence of an actual implementation</p>\n</li>\n<li><p><code>...</code> is more recommended than throwing <code>NotImplementedError(...)</code>. This automatically prompts an extremely verbose error if the implementation of an abstract field is missing in a subclass. In contrast, <code>NotImplementedError</code> itself doesn't tell why the implementation is missing. Moreover, it requires manual labor to actually raise it.</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 10347888,
                        "reputation": 1330,
                        "user_id": 7632227,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0f905f0bab24dfcbf5e5e37d0fbf8a55?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "James",
                        "link": "https://stackoverflow.com/users/7632227/james"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1648737844,
                    "last_edit_date": 1648737844,
                    "creation_date": 1542821207,
                    "answer_id": 53417582,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Since this question was originally asked, python has changed how abstract classes are implemented. I have used a slightly different approach using the abc.ABC formalism in python 3.6.  Here I define the constant as a property which must be defined in each subclass.</p>\n<pre><code>from abc import ABC, abstractmethod\n\n\nclass Base(ABC):\n\n    @classmethod\n    @property\n    @abstractmethod\n    def CONSTANT(cls):\n        raise NotImplementedError\n\n    def print_constant(self):\n        print(type(self).CONSTANT)\n\n\nclass Derived(Base):\n    CONSTANT = 42\n</code></pre>\n<p>This forces the derived class to define the constant, or else a <code>TypeError</code> exception will be raised when you try to instantiate the subclass. When you want to use the constant for any functionality implemented in the abstract class, you must access the subclass constant by <code>type(self).CONSTANT</code> instead of just <code>CONSTANT</code>, since the value is undefined in the base class.</p>\n<p>There are other ways to implement this, but I like this syntax as it seems to me the most plain and obvious for the reader.</p>\n<p>The previous answers all touched useful points, but I feel the accepted answer does not directly answer the question because</p>\n<ul>\n<li>The question asks for implementation in an abstract class, but the accepted answer does not follow the abstract formalism.</li>\n<li>The question asks that implementation is enforced.  I would argue that enforcement is stricter in this answer because it causes a runtime error when the subclass is instantiated if <code>CONSTANT</code> is not defined. The accepted answer allows the object to be instantiated and only throws an error when <code>CONSTANT</code> is accessed, making the enforcement less strict.</li>\n</ul>\n<p>This is not to fault the original answers.  Major changes to the abstract class syntax have occurred since they were posted, which in this case allow a neater and more functional implementation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4291590,
                        "reputation": 6036,
                        "user_id": 3566606,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/B36KF.jpg?s=256",
                        "display_name": "Jonathan Herrera",
                        "link": "https://stackoverflow.com/users/3566606/jonathan-herrera"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1639710199,
                    "last_edit_date": 1639710199,
                    "creation_date": 1554503729,
                    "answer_id": 55544173,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of Python 3.6 you can use <code>__init_subclass__</code> to check for the class variables of the child class upon initialisation:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass A(ABC):\n    @classmethod\n    def __init_subclass__(cls):\n        required_class_variables = [\n            'foo',\n            'bar',\n        ]\n        for var in required_class_variables:\n            if not hasattr(cls, var):\n                raise NotImplementedError(\n                    f'Class {cls} lacks required `{var}` class attribute'\n                )\n</code></pre>\n<p>This raises an Error on initialisation of the child class, if the missing class variable is not defined, so you don't have to wait until the missing class variable would be accessed.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user297250"
                    },
                    "is_accepted": true,
                    "score": 115,
                    "last_activity_date": 1618943042,
                    "last_edit_date": 1618943042,
                    "creation_date": 1272535860,
                    "answer_id": 2736417,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python has a built-in exception for this, though you won't encounter the exception until runtime.</p>\n<pre><code>class Base(object):\n    @property\n    def path(self):\n        raise NotImplementedError\n\n\nclass SubClass(Base):\n    path = 'blah'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1245419,
                        "reputation": 15461,
                        "user_id": 1206998,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/z3jRS.jpg?s=256",
                        "display_name": "Juh_",
                        "link": "https://stackoverflow.com/users/1206998/juh"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1592036567,
                    "last_edit_date": 1592036567,
                    "creation_date": 1410433832,
                    "answer_id": 25785917,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your base class could implement a <code>__new__</code> method that check for class attribute:</p>\n\n<pre><code>class Controller(object):\n    def __new__(cls, *args, **kargs):\n        if not hasattr(cls,'path'): \n            raise NotImplementedError(\"'Controller' subclasses should have a 'path' attribute\")\n        return object.__new__(cls)\n\nclass C1(Controller):\n    path = 42\n\nclass C2(Controller):\n    pass\n\n\nc1 = C1() \n# ok\n\nc2 = C2()  \n# NotImplementedError: 'Controller' subclasses should have a 'path' attribute\n</code></pre>\n\n<p>This way the error raise at instantiation</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2902425,
                        "reputation": 4138,
                        "user_id": 4601890,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5da93e3ac9b976486925cb38d7d6c25a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dankal444",
                        "link": "https://stackoverflow.com/users/4601890/dankal444"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1590069703,
                    "creation_date": 1590069703,
                    "answer_id": 61936286,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've modified just a bit <a href=\"https://stackoverflow.com/a/53417582/4601890\">@James</a> answer, so that all those decorators do not take so much place. If you had multiple such abstract properties to define, this is handy:</p>\n\n<pre><code>from abc import ABC, abstractmethod\n\ndef abstractproperty(func):\n   return property(classmethod(abstractmethod(func)))\n\nclass Base(ABC):\n\n    @abstractproperty\n    def CONSTANT(cls): ...\n\n    def print_constant(self):\n        print(type(self).CONSTANT)\n\n\nclass Derived(Base):\n    CONSTANT = 42\n\nclass BadDerived(Base):\n    BAD_CONSTANT = 42\n\nDerived()       # -&gt; Fine\nBadDerived()    # -&gt; Error\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5471894,
                        "reputation": 1648,
                        "user_id": 4351027,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/yv5aH.jpg?s=256",
                        "display_name": "zhukovgreen",
                        "link": "https://stackoverflow.com/users/4351027/zhukovgreen"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1570996839,
                    "last_edit_date": 1570996839,
                    "creation_date": 1511415492,
                    "answer_id": 47448292,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python3.6 implementation might looks like this:</p>\n\n<pre><code>In [20]: class X:\n    ...:     def __init_subclass__(cls):\n    ...:         if not hasattr(cls, 'required'):\n    ...:             raise NotImplementedError\n\nIn [21]: class Y(X):\n    ...:     required = 5\n    ...:     \n\nIn [22]: Y()\nOut[22]: &lt;__main__.Y at 0x7f08408c9a20&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 905035,
                        "reputation": 19842,
                        "user_id": 940098,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jGtwG.jpg?s=256",
                        "display_name": "Wtower",
                        "link": "https://stackoverflow.com/users/940098/wtower"
                    },
                    "is_accepted": false,
                    "score": 179,
                    "last_activity_date": 1549654603,
                    "last_edit_date": 1549654603,
                    "creation_date": 1485532027,
                    "answer_id": 41897823,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>Python 3.3+</h2>\n\n<pre><code>from abc import ABCMeta, abstractmethod\n\n\nclass A(metaclass=ABCMeta):\n    def __init__(self):\n        # ...\n        pass\n\n    @property\n    @abstractmethod\n    def a(self):\n        pass\n\n    @abstractmethod\n    def b(self):\n        pass\n\n\nclass B(A):\n    a = 1\n\n    def b(self):\n        pass\n</code></pre>\n\n<p>Failure to declare <code>a</code> or <code>b</code> in the derived class <code>B</code> will raise a <code>TypeError</code> such as:</p>\n\n<blockquote>\n  <p><code>TypeError</code>: Can't instantiate abstract class <code>B</code> with abstract methods <code>a</code></p>\n</blockquote>\n\n<h2>Python 2.7</h2>\n\n<p>There is an <a href=\"https://docs.python.org/2.7/library/abc.html#abc.abstractproperty\" rel=\"noreferrer\">@abstractproperty</a> decorator for this:</p>\n\n<pre><code>from abc import ABCMeta, abstractmethod, abstractproperty\n\n\nclass A:\n    __metaclass__ = ABCMeta\n\n    def __init__(self):\n        # ...\n        pass\n\n    @abstractproperty\n    def a(self):\n        pass\n\n    @abstractmethod\n    def b(self):\n        pass\n\n\nclass B(A):\n    a = 1\n\n    def b(self):\n        pass\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 410225,
                        "reputation": 5901,
                        "user_id": 781938,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/189e7e1ecd0a7516152f0e2d2d5d6130?s=256&d=identicon&r=PG",
                        "display_name": "william_grisaitis",
                        "link": "https://stackoverflow.com/users/781938/william-grisaitis"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1533269423,
                    "creation_date": 1533269423,
                    "answer_id": 51665193,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>class AbstractStuff:\n    @property\n    @abc.abstractmethod\n    def some_property(self):\n        pass\n</code></pre>\n\n<p>As of 3.3 <code>abc.abstractproperty</code> is deprecated, I think.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 162,
                        "reputation": 19293,
                        "user_id": 199,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/cd0f77693ec8cc922a5b3053de9c0097?s=256&d=identicon&r=PG",
                        "display_name": "Brendan",
                        "link": "https://stackoverflow.com/users/199/brendan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1272546799,
                    "last_edit_date": 1272546799,
                    "creation_date": 1272535394,
                    "answer_id": 2736362,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bastien L\u00e9onard's answer mentions the abstract base class module and Brendan Abel's answer deals with non-implemented attributes raising errors. To ensure that the class is not implemented outside of the module, you could prefix the base name with an underscore which denotes it as private to the module (i.e. it is not imported). </p>\n\n<p>i.e.</p>\n\n<pre><code>class _Controller(object):\n    path = '' # There are better ways to declare attributes - see other answers\n\nclass MyController(_Controller):\n    path = '/Home'</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32141,
                        "reputation": 61625,
                        "user_id": 88851,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/f42db155847d3648bc14b86bf838af06?s=256&d=identicon&r=PG",
                        "display_name": "Bastien L&#233;onard",
                        "link": "https://stackoverflow.com/users/88851/bastien-l%c3%a9onard"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1272536588,
                    "last_edit_date": 1272536588,
                    "creation_date": 1272535852,
                    "answer_id": 2736416,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have a look at the abc (Abtract Base Class) module: <a href=\"http://docs.python.org/library/abc.html\" rel=\"nofollow noreferrer\">http://docs.python.org/library/abc.html</a></p>\n\n<p>However, in my opinion the simplest and most common solution is to raise an exception when an instance of the base class is created, or when its property is accessed.</p>\n"
                }
            ]
        },
        {
            "17801344": [
                {
                    "owner": {
                        "account_id": 2926324,
                        "reputation": 3088,
                        "user_id": 2507539,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/47dd6e0a488355ec34f6c6d7cf4a93ff?s=256&d=identicon&r=PG",
                        "display_name": "dilbert",
                        "link": "https://stackoverflow.com/users/2507539/dilbert"
                    },
                    "is_accepted": true,
                    "score": 63,
                    "last_activity_date": 1530738180,
                    "last_edit_date": 1530738180,
                    "creation_date": 1374560344,
                    "answer_id": 17802762,
                    "question_id": 17801344,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>1) What is use of metaclass and when to use it?</p>\n\n<p>Metaclasses are to classes as classes are to objects. They are classes for classes (hence the expression \"meta\").</p>\n\n<p>Metaclasses are typically for when you want to work outside of the normal constraints of OOP.</p>\n\n<p>2) What is difference/similarity between metaclass and inheritance?</p>\n\n<p>A metaclass is not part of an object's class hierarchy whereas base classes are. So when an object does <code>obj.some_method()</code> it will not search the metaclass for this method however the metaclass may have created it during the class' or object's creation.</p>\n\n<p>In this example below, the metaclass <code>MetaCar</code> gives objects a <code>defect</code> attribute based on a random number. The <code>defect</code> attribute is not defined in any of the objects' base classes or the class itself. This, however, could have been achieved using classes only.</p>\n\n<p>However (unlike classes), this metaclass also re-routes object creation; in the <code>some_cars</code> list, all the Toyotas are created using the <code>Car</code> class. The metaclass detects that <code>Car.__init__</code> contains a <code>make</code> argument that matches a pre-existing class by that name and so returns a object of that class instead.</p>\n\n<p>Additionally, you'll also note that in the <code>some_cars</code> list, <code>Car.__init__</code> is called with <code>make=\"GM\"</code>. A <code>GM</code> class has not been defined at this point in the program's evaluation. The metaclass detects that a class doesn't exist by that name in the make argument, so it creates one and updates the global namespace (so it doesn't need to use the return mechanism). It then creates the object using the newly defined class and returns it.</p>\n\n<pre><code>import random\n\nclass CarBase(object):\n    pass\n\nclass MetaCar(type):\n    car_brands = {}\n    def __init__(cls, cls_name, cls_bases, cls_dict):\n        super(MetaCar, cls).__init__(cls_name, cls_bases, cls_dict)\n        if(not CarBase in cls_bases):\n            MetaCar.car_brands[cls_name] = cls\n\n    def __call__(self, *args, **kwargs):\n        make = kwargs.get(\"make\", \"\")\n        if(MetaCar.car_brands.has_key(make) and not (self is MetaCar.car_brands[make])):\n            obj = MetaCar.car_brands[make].__call__(*args, **kwargs)\n            if(make == \"Toyota\"):\n                if(random.randint(0, 100) &lt; 2):\n                    obj.defect = \"sticky accelerator pedal\"\n            elif(make == \"GM\"):\n                if(random.randint(0, 100) &lt; 20):\n                    obj.defect = \"shithouse\"\n            elif(make == \"Great Wall\"):\n                if(random.randint(0, 100) &lt; 101):\n                    obj.defect = \"cancer\"\n        else:\n            obj = None\n            if(not MetaCar.car_brands.has_key(self.__name__)):\n                new_class = MetaCar(make, (GenericCar,), {})\n                globals()[make] = new_class\n                obj = new_class(*args, **kwargs)\n            else:\n                obj = super(MetaCar, self).__call__(*args, **kwargs)\n        return obj\n\nclass Car(CarBase):\n    __metaclass__ = MetaCar\n\n    def __init__(self, **kwargs):\n        for name, value in kwargs.items():\n            setattr(self, name, value)\n\n    def __repr__(self):\n        return \"&lt;%s&gt;\" % self.description\n\n    @property\n    def description(self):\n        return \"%s %s %s %s\" % (self.color, self.year, self.make, self.model)\n\nclass GenericCar(Car):\n    def __init__(self, **kwargs):\n        kwargs[\"make\"] = self.__class__.__name__\n        super(GenericCar, self).__init__(**kwargs)\n\nclass Toyota(GenericCar):\n    pass\n\ncolours = \\\n[\n    \"blue\",\n    \"green\",\n    \"red\",\n    \"yellow\",\n    \"orange\",\n    \"purple\",\n    \"silver\",\n    \"black\",\n    \"white\"\n]\n\ndef rand_colour():\n    return colours[random.randint(0, len(colours) - 1)]\n\nsome_cars = \\\n[\n    Car(make=\"Toyota\", model=\"Prius\", year=2005, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Camry\", year=2007, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Camry Hybrid\", year=2013, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Land Cruiser\", year=2009, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"FJ Cruiser\", year=2012, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Corolla\", year=2010, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Hiace\", year=2006, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Townace\", year=2003, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Aurion\", year=2008, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Supra\", year=2004, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"86\", year=2013, color=rand_colour()),\n    Car(make=\"GM\", model=\"Camaro\", year=2008, color=rand_colour())\n]\n\ndodgy_vehicles = filter(lambda x: hasattr(x, \"defect\"), some_cars)\nprint dodgy_vehicles\n</code></pre>\n\n<p>3) Where should one use metaclass or inheritance?</p>\n\n<p>As mentioned in this answer and in the comments, almost always use inheritance when doing OOP. Metaclasses are for working outside those constraints (refer to example) and is almost always not necessary however some very advanced and <strong>extremely dynamic</strong> program flow can be achieved with them. This is both their strength and their <strong>danger</strong>.</p>\n"
                }
            ]
        },
        {
            "10272898": [
                {
                    "owner": {
                        "account_id": 113371,
                        "reputation": 103267,
                        "user_id": 298607,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/DVW9g.jpg?s=256",
                        "display_name": "dawg",
                        "link": "https://stackoverflow.com/users/298607/dawg"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1627564617,
                    "last_edit_date": 1627564617,
                    "creation_date": 1335424021,
                    "answer_id": 10328699,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can put you logic in a separate function, and then have the elegance of the list comprehension along with the readability of the function:</p>\n<pre><code>def cond(i):\n    if i % 4 == 0: return 'four'\n    elif i % 6 == 0: return 'six'\n    \n    return i\n\nl=[cond(i) for i in range(1,n)]\n</code></pre>\n<p>If you have lots of conditions, it is usually easier to maintain a single dict rather than a big if/else ladder:</p>\n<pre><code>def cond(i):\n    mkey={4:'four',6:'six'}\n    return next((mkey[k] for k in mkey if i%k == 0), i)\n</code></pre>\n<p>This uses the default version of next to find if any integer key is a multiple of that key or the number itself, the default, if not.</p>\n<p>Which could be a single comprehension if desired:</p>\n<pre><code>[next((v for k,v in {4:'four',6:'six'}.items() if i%k==0), i) for i  in range(1,10)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15777442,
                        "reputation": 368,
                        "user_id": 11384887,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eXQTp.jpg?s=256",
                        "display_name": "RyanAbnavi",
                        "link": "https://stackoverflow.com/users/11384887/ryanabnavi"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1555690430,
                    "creation_date": 1555690430,
                    "answer_id": 55764710,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>ar = [\"four\" if i%4==0 else \"six\" if i%6==0  else i for i in range(1,30)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 366823,
                        "reputation": 78480,
                        "user_id": 712603,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://i.sstatic.net/mCoc7.jpg?s=256",
                        "display_name": "David Robinson",
                        "link": "https://stackoverflow.com/users/712603/david-robinson"
                    },
                    "is_accepted": true,
                    "score": 48,
                    "last_activity_date": 1335192621,
                    "last_edit_date": 1335192621,
                    "creation_date": 1335135788,
                    "answer_id": 10272927,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about</p>\n\n<pre><code>ar = [('four' if i % 4 == 0 else ('six' if i % 6 == 0 else i)) for i in range(1, n)]\n</code></pre>\n\n<p>For example, if <code>n = 30</code> this is</p>\n\n<pre><code>[1, 2, 3, 'four', 5, 'six', 7, 'four', 9, 10, 11, 'four', 13, 14, 15, 'four', 17, 'six', 19, 'four', 21, 22, 23, 'four', 25, 26, 27, 'four', 29]\n</code></pre>\n\n<p>ETA: Here's how you could apply a list of conditions:</p>\n\n<pre><code>CONDITIONS = [(lambda i: i % 4 == 0, \"four\"), (lambda i: i % 6 == 0, \"six\"),\n              (lambda i: i % 7 == 0, \"seven\")]\n\ndef apply_conditions(i):\n    for condition, replacement in CONDITIONS:\n        if condition(i):\n            return replacement\n    return i\n\nar = map(apply_conditions, range(0, n))\n</code></pre>\n"
                }
            ]
        },
        {
            "11174024": [
                {
                    "owner": {
                        "account_id": 10755509,
                        "reputation": 372,
                        "user_id": 7913588,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1398861050156718/picture?type=large",
                        "display_name": "Chameera W. Ashan",
                        "link": "https://stackoverflow.com/users/7913588/chameera-w-ashan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1673562763,
                    "creation_date": 1673562763,
                    "answer_id": 75102973,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you need to convert string to json. Then use loads() method instead of load(). load() function uses to load data from a file so used loads() to convert string to json object.</p>\n<pre><code>j_obj = json.loads('[&quot;label&quot; : &quot;data&quot;]')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7623778,
                        "reputation": 1531,
                        "user_id": 5780969,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://i.sstatic.net/9uYh0.jpg?s=256",
                        "display_name": "Raisul Islam",
                        "link": "https://stackoverflow.com/users/5780969/raisul-islam"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1670491665,
                    "creation_date": 1670491665,
                    "answer_id": 74728078,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Open the file as a text file first</p>\n<pre><code>json_data = open(&quot;data.json&quot;, &quot;r&quot;)\n</code></pre>\n<p>Now load it to dict</p>\n<pre><code>dict_data = json.load(json_data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248321,
                        "reputation": 61143,
                        "user_id": 523612,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4ae512dd708a619496d36b1f681f95e0?s=256&d=identicon&r=PG",
                        "display_name": "Karl Knechtel",
                        "link": "https://stackoverflow.com/users/523612/karl-knechtel"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1662892426,
                    "last_edit_date": 1662892426,
                    "creation_date": 1340504372,
                    "answer_id": 11174518,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>AttributeError(&quot;'str' object has no attribute 'read'&quot;,)\n</code></pre>\n<p>This means exactly what it says: something tried to find a <code>.read</code> attribute on the object that you gave it, and you gave it an object of type <code>str</code> (i.e., you gave it a string).</p>\n<p>The error occurred here:</p>\n<pre><code>json.load(jsonStr)['data']['children']\n</code></pre>\n<p>Well, you aren't looking for <code>read</code> anywhere, so it must happen in the <code>json.load</code> function that you called (as indicated by the full traceback). That is because <code>json.load</code> is trying to <code>.read</code> the thing that you gave it, but you gave it <code>jsonStr</code>, which currently names a string (which you created by calling <code>.read</code> on the <code>response</code>).</p>\n<p>Solution: don't call <code>.read</code> yourself; the function will do this, and is expecting you to give it the <code>response</code> directly so that it can do so.</p>\n<p>You could also have figured this out by reading the built-in Python documentation for the function (try <code>help(json.load)</code>, or for the entire module (try <code>help(json)</code>), or by checking the documentation for those functions on <a href=\"http://docs.python.org\" rel=\"nofollow noreferrer\">http://docs.python.org</a> .</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19701170,
                        "reputation": 1,
                        "user_id": 14423895,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3wZEE.jpg?s=256",
                        "display_name": "Hackers Arena",
                        "link": "https://stackoverflow.com/users/14423895/hackers-arena"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1660749582,
                    "creation_date": 1660749582,
                    "answer_id": 73391030,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>use json.loads() function , put the s after that ... just a mistake btw i just realized after i searched error</p>\n<pre><code>def getEntries (self, sub):\nurl = 'http://www.reddit.com/'\nif (sub != ''):\n    url += 'r/' + sub\n\nrequest = urllib2.Request (url + \n    '.json', None, {'User-Agent' : 'Reddit desktop client by /user/RobinJ1995/'})\nresponse = urllib2.urlopen (request)\njsonStr = response.read()\n\nreturn json.loads(jsonStr)['data']['children']\n</code></pre>\n<p>try this</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19977073,
                        "reputation": 1,
                        "user_id": 14641092,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/2NzsW.png?s=256",
                        "display_name": "Shashwat SIngh",
                        "link": "https://stackoverflow.com/users/14641092/shashwat-singh"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654683057,
                    "last_edit_date": 1654683057,
                    "creation_date": 1654406000,
                    "answer_id": 72504948,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>So, don't use <code>json.load(data.read())</code> use <code>json.loads(data.read())</code>:</p>\n<pre><code>def findMailOfDev(fileName):\n    file=open(fileName,'r')\n    data=file.read();\n    data=json.loads(data)\n    return data['mail']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8760326,
                        "reputation": 81,
                        "user_id": 6550424,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-rvIZBtDH8CQ/AAAAAAAAAAI/AAAAAAAAAVw/4-doGD3hlvg/photo.jpg?sz=256",
                        "display_name": "Pallav Ghose",
                        "link": "https://stackoverflow.com/users/6550424/pallav-ghose"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1627686775,
                    "creation_date": 1627686775,
                    "answer_id": 68597902,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of json.load() use json.loads() and it would work:\nex:</p>\n<pre><code>import json\nfrom json import dumps\n\nstrinjJson = '{&quot;event_type&quot;: &quot;affected_element_added&quot;}'\ndata = json.loads(strinjJson)\nprint(data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1499435,
                        "reputation": 688,
                        "user_id": 1404585,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/51889d1fe5bd44d8084b76494290bf6a?s=256&d=identicon&r=PG",
                        "display_name": "music_piano",
                        "link": "https://stackoverflow.com/users/1404585/music-piano"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1583171299,
                    "last_edit_date": 1583171299,
                    "creation_date": 1583166711,
                    "answer_id": 60493016,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You need to open the file first. This doesn't work:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>json_file = json.load('test.json')\n</code></pre>\n\n<p>But this works:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>f = open('test.json')\njson_file = json.load(f)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16919594,
                        "reputation": 700,
                        "user_id": 12236696,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7fe75c0ddf7242d4bec696f8fc8dce77?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "JohnyMSF",
                        "link": "https://stackoverflow.com/users/12236696/johnymsf"
                    },
                    "is_accepted": false,
                    "score": 69,
                    "last_activity_date": 1576834092,
                    "creation_date": 1576834092,
                    "answer_id": 59422786,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Ok, this is an old thread but. \nI had a same issue, my problem was I used <code>json.load</code> instead of <code>json.loads</code></p>\n\n<p>This way, json has no problem with loading any kind of dictionary. </p>\n\n<p><a href=\"https://docs.python.org/3/library/json.html\" rel=\"noreferrer\">Official documentation</a></p>\n\n<blockquote>\n  <p>json.load - Deserialize fp (a .read()-supporting text file or binary file containing a JSON document) to a Python object using this conversion table.</p>\n  \n  <p>json.loads - Deserialize s (a str, bytes or bytearray instance containing a JSON document) to a Python object using this conversion table.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 97405,
                        "reputation": 7053,
                        "user_id": 264215,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/c199cdeb06e400f367a8b168c5da8f66?s=256&d=identicon&r=PG",
                        "display_name": "mutantacule",
                        "link": "https://stackoverflow.com/users/264215/mutantacule"
                    },
                    "is_accepted": true,
                    "score": 285,
                    "last_activity_date": 1539417113,
                    "last_edit_date": 1539417113,
                    "creation_date": 1340498030,
                    "answer_id": 11174103,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem is that for <code>json.load</code> you should pass a file like object with a <code>read</code> function defined. So either you use <a href=\"http://docs.python.org/library/json.html#json.load\" rel=\"noreferrer\"><code>json.load(response)</code></a> or <a href=\"http://docs.python.org/library/json.html#json.loads\" rel=\"noreferrer\"><code>json.loads(response.read())</code></a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 199671,
                        "reputation": 153292,
                        "user_id": 445131,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/2b4pE.jpg?s=256",
                        "display_name": "Eric Leschinski",
                        "link": "https://stackoverflow.com/users/445131/eric-leschinski"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1414612304,
                    "creation_date": 1414612304,
                    "answer_id": 26639363,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>If you get a python error like this:</strong></p>\n\n<pre><code>AttributeError: 'str' object has no attribute 'some_method'\n</code></pre>\n\n<p>You probably poisoned your object accidentally by overwriting your object with a string.</p>\n\n<p><strong>How to reproduce this error in python with a few lines of code:</strong></p>\n\n<pre><code>#!/usr/bin/env python\nimport json\ndef foobar(json):\n    msg = json.loads(json)\n\nfoobar('{\"batman\": \"yes\"}')\n</code></pre>\n\n<p><strong>Run it, which prints:</strong></p>\n\n<pre><code>AttributeError: 'str' object has no attribute 'loads'\n</code></pre>\n\n<p><strong>But change the name of the variablename, and it works fine:</strong></p>\n\n<pre><code>#!/usr/bin/env python\nimport json\ndef foobar(jsonstring):\n    msg = json.loads(jsonstring)\n\nfoobar('{\"batman\": \"yes\"}')\n</code></pre>\n\n<p>This error is caused when you tried to run a method within a string.  String has a few methods, but not the one you are invoking.  So stop trying to invoke a method which String does not define and start looking for where you poisoned your object.</p>\n"
                }
            ]
        },
        {
            "22241420": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 312,
                    "last_activity_date": 1600075004,
                    "last_edit_date": 1600075004,
                    "creation_date": 1394195422,
                    "answer_id": 22250157,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>When you use the <a href=\"http://docs.python.org/2/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\"><code>-m</code> command-line flag</a>, Python will import a module <em>or package</em> for you, then run it as a script. When you don't use the <code>-m</code> flag, the file you named is run as <em>just a script</em>.</p>\n<p>The distinction is important when you try to run a package. There is a big difference between:</p>\n<pre><code>python foo/bar/baz.py\n</code></pre>\n<p>and</p>\n<pre><code>python -m foo.bar.baz\n</code></pre>\n<p>as in the latter case, <code>foo.bar</code> is imported and relative imports will work correctly with <code>foo.bar</code> as the starting point.</p>\n<p>Demo:</p>\n<pre><code>$ mkdir -p test/foo/bar\n$ touch test/foo/__init__.py\n$ touch test/foo/bar/__init__.py\n$ cat &lt;&lt; EOF &gt; test/foo/bar/baz.py \n&gt; if __name__ == &quot;__main__&quot;:\n&gt;     print __package__\n&gt;     print __name__\n&gt; \n&gt; EOF\n$ PYTHONPATH=test python test/foo/bar/baz.py \nNone\n__main__\n$ PYTHONPATH=test python -m foo.bar.baz \nfoo.bar\n__main__\n</code></pre>\n<p>As a result, Python has to actually care about packages when using the <code>-m</code> switch. A normal script can never <em>be</em> a package, so <code>__package__</code> is set to <code>None</code>.</p>\n<p>But run a package or module <em>inside</em> a package with <code>-m</code> and now there is at least the <em>possibility</em> of a package, so the <code>__package__</code> variable is set to a string value; in the above demonstration it is set to <code>'foo.bar'</code>, for plain modules not inside a package it is set to an empty string.</p>\n<p>As for the <code>__main__</code> <em>module</em>, Python imports scripts being run as it would import regular modules. A new module object is created to hold the global namespace and is stored in <code>sys.modules['__main__']</code>. This is what the <code>__name__</code> variable refers to, it is a key in that structure.</p>\n<p>For packages, you can create a <code>__main__.py</code> module inside and have that run when running <code>python -m package_name</code>; in fact that is the only way you <em>can</em> run a package as a script:</p>\n<pre><code>$ PYTHONPATH=test python -m foo.bar\npython: No module named foo.bar.__main__; 'foo.bar' is a package and cannot be directly executed\n$ cp test/foo/bar/baz.py test/foo/bar/__main__.py\n$ PYTHONPATH=test python -m foo.bar\nfoo.bar\n__main__\n</code></pre>\n<p>So, when naming a package for running with <code>-m</code>, Python looks for a <code>__main__</code> module contained in that package and executes that as a script. Its name is then still set to <code>'__main__'</code> and the module object is still stored in <code>sys.modules['__main__']</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 258754,
                        "reputation": 393370,
                        "user_id": 541136,
                        "user_type": "moderator",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/wftMn.jpg?s=256",
                        "display_name": "Aaron Hall",
                        "link": "https://stackoverflow.com/users/541136/aaron-hall"
                    },
                    "is_accepted": false,
                    "score": 56,
                    "last_activity_date": 1571488383,
                    "last_edit_date": 1571488383,
                    "creation_date": 1394168209,
                    "answer_id": 22241810,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 4.0",
                    "body": "\n\n<h1>Execution of Python code with -m option or not</h1>\n\n<p>Use the <code>-m</code> flag. </p>\n\n<p>The results are pretty much the same when you have a script, but when you develop a package, without the <code>-m</code> flag, there's no way to get the imports to work correctly if you want to run a subpackage or module in the package as the main entry point to your program (and believe me, I've tried.)</p>\n\n<h2>The docs</h2>\n\n<p>Like the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\">docs on the -m flag</a> say:</p>\n\n<blockquote>\n  <p>Search sys.path for the named module and execute its contents as the <code>__main__</code> module.</p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>As with the -c option, the current directory will be added to the start of sys.path.</p>\n</blockquote>\n\n<p>so</p>\n\n<pre><code>python -m pdb\n</code></pre>\n\n<p>is roughly equivalent to</p>\n\n<pre><code>python /usr/lib/python3.5/pdb.py\n</code></pre>\n\n<p>(assuming you don't have a package or script in your current directory called pdb.py)</p>\n\n<h2>Explanation:</h2>\n\n<p>Behavior is made \"deliberately similar to\" scripts.</p>\n\n<blockquote>\n  <p>Many standard library modules contain code that is invoked on their execution as a script. An example is the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\">timeit module:</a></p>\n</blockquote>\n\n<p>Some python code is intended to be <a href=\"https://docs.python.org/3/library/timeit.html#module-timeit\" rel=\"noreferrer\">run as a module:</a> (I think this example is better than the commandline option doc example)</p>\n\n<pre><code>$ python -m timeit '\"-\".join(str(n) for n in range(100))'\n10000 loops, best of 3: 40.3 usec per loop\n$ python -m timeit '\"-\".join([str(n) for n in range(100)])'\n10000 loops, best of 3: 33.4 usec per loop\n$ python -m timeit '\"-\".join(map(str, range(100)))'\n10000 loops, best of 3: 25.2 usec per loop\n</code></pre>\n\n<p><a href=\"http://www.python.org/download/releases/2.4/highlights/\" rel=\"noreferrer\">And from the release note highlights for Python 2.4</a>:</p>\n\n<blockquote>\n  <p>The -m command line option - python -m modulename will find a module\n  in the standard library, and invoke it. For example, <code>python -m pdb</code>\n  is equivalent to <code>python /usr/lib/python2.4/pdb.py</code></p>\n</blockquote>\n\n<h2>Follow-up Question</h2>\n\n<blockquote>\n  <p>Also, David Beazley's Python Essential Reference explains it as \"The\n  -m option runs a library module as a script which executes inside the <code>__main__</code> module prior to the execution of the main script\".</p>\n</blockquote>\n\n<p>It means any module you can lookup with an import statement can be run as the entry point of the program - if it has a code block, usually near the end, with <code>if __name__ == '__main__':</code>.</p>\n\n<h2><code>-m</code> without adding the current directory to the path:</h2>\n\n<p>A comment here elsewhere says:</p>\n\n<blockquote>\n  <p>That the -m option also adds the current directory to sys.path, is obviously a security issue (see: preload attack). This behavior is similar to library search order in Windows (before it had been hardened recently). It's a pity that Python does not follow the trend and does not offer a simple way to disable adding . to sys.path</p>\n</blockquote>\n\n<p>Well, this demonstrates the possible issue - (in windows remove the quotes):</p>\n\n<pre><code>echo \"import sys; print(sys.version)\" &gt; pdb.py\n\npython -m pdb\n3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)]\n</code></pre>\n\n<p>Use the <code>-I</code> flag to lock this down for production environments (new in version 3.4):</p>\n\n<pre><code>python -Im pdb\nusage: pdb.py [-c command] ... pyfile [arg] ...\netc...\n</code></pre>\n\n<p>from <a href=\"https://docs.python.org/3.5/using/cmdline.html#cmdoption-I\" rel=\"noreferrer\">the docs</a>:</p>\n\n<blockquote>\n  <p><strong><code>-I</code></strong></p>\n  \n  <p>Run Python in isolated mode. This also implies -E and -s. In isolated mode sys.path contains neither the script\u2019s directory nor the user\u2019s site-packages directory. All PYTHON* environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code.</p>\n</blockquote>\n\n<h3>What does <code>__package__</code> do?</h3>\n\n<p>It enables explicit relative imports, not particularly germane to this question, though - see this answer here: <a href=\"https://stackoverflow.com/questions/21233229/whats-the-purpose-of-the-package-attribute-in-python/48833828#48833828\">What&#39;s the purpose of the &quot;__package__&quot; attribute in Python?</a></p>\n\n\n"
                },
                {
                    "owner": {
                        "account_id": 6475362,
                        "reputation": 1539,
                        "user_id": 5294619,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/a251ec26091e1c4d66d4827e344b635b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ddbug",
                        "link": "https://stackoverflow.com/users/5294619/ddbug"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1473332768,
                    "last_edit_date": 1473332768,
                    "creation_date": 1473288051,
                    "answer_id": 39380060,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The main reason to run a module (or package) as a script with -m is to simplify deployment, especially on Windows. You can install scripts in the same place in the Python library where modules normally go - instead of polluting PATH or global executable directories such as ~/.local (the per-user scripts directory is ridiculously hard to find in Windows). </p>\n\n<p>Then you just type -m and Python finds the script automagically. For example, <code>python -m pip</code> will find the correct pip for the same instance of Python interpreter which executes it. Without -m, if user has several Python versions installed, which one would be the \"global\" pip?</p>\n\n<p>If user prefers \"classic\" entry points for command-line scripts, these can be easily added as small scripts somewhere in PATH, or pip can create these at install time with entry_points parameter in setup.py. </p>\n\n<p>So just check for <code>__name__ == '__main__'</code> and ignore other non-reliable implementation details. </p>\n"
                }
            ]
        },
        {
            "9339025": [
                {
                    "owner": {
                        "account_id": 162132,
                        "reputation": 98149,
                        "user_id": 383402,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/8c4a15feb7408cade1a8ad5bf34d44a4?s=256&d=identicon&r=PG",
                        "display_name": "Borealid",
                        "link": "https://stackoverflow.com/users/383402/borealid"
                    },
                    "is_accepted": true,
                    "score": 69,
                    "last_activity_date": 1358351390,
                    "last_edit_date": 1358351390,
                    "creation_date": 1329544929,
                    "answer_id": 9339040,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In vim, you select the block and then press the <kbd>&lt;</kbd> key.</p>\n\n<p>In Eclipse you select it and then press <kbd>SHIFT</kbd> + <kbd>TAB</kbd>.</p>\n\n<p>Every code editor worth its salt has a one-key way to indent and dedent blocks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 224450,
                        "reputation": 31,
                        "user_id": 484288,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/079580b1cce1c97dbeab22362cc03139?s=256&d=identicon&r=PG",
                        "display_name": "sanja7s",
                        "link": "https://stackoverflow.com/users/484288/sanja7s"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1358351299,
                    "last_edit_date": 1358351299,
                    "creation_date": 1358349736,
                    "answer_id": 14361758,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Perhaps late for your case, but if useful for others:</p>\n\n<p><kbd>SHIFT</kbd> + <kbd>TAB</kbd> will do unindent for the selected text in Eclipse.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 296832,
                        "reputation": 1329,
                        "user_id": 602018,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0dade88e75699619b5c33ae400005e94?s=256&d=identicon&r=PG",
                        "display_name": "42n4",
                        "link": "https://stackoverflow.com/users/602018/42n4"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1347606625,
                    "creation_date": 1347606625,
                    "answer_id": 12419725,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use Preferences-Pydev-Editor settings uncheck change tabs to spaces. It makes detent errors and your problem. And test other options like 4 space tab, 8 space tab and so on.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63644,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1329569505,
                    "creation_date": 1329569505,
                    "answer_id": 9341310,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could also replace the if statement with:</p>\n\n<pre><code>if True:  # if i &lt; 5:\n</code></pre>\n\n<p>and leave everything else alone - no indent/dedent to undo later.</p>\n"
                }
            ]
        },
        {
            "11559062": [
                {
                    "owner": {
                        "account_id": 22519586,
                        "reputation": 21,
                        "user_id": 16713362,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GjqA1-jTC1321bOKSodo158g6fnRThzwRYctVgBhQ=k-s256",
                        "display_name": "Will",
                        "link": "https://stackoverflow.com/users/16713362/will"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1648864148,
                    "last_edit_date": 1648864148,
                    "creation_date": 1629463302,
                    "answer_id": 68862408,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the an <a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)#Expressions\" rel=\"nofollow noreferrer\">f-string</a> too!</p>\n<pre><code>s = &quot;string&quot;\ni = 95\nprint(f&quot;{s}{i}&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14667032,
                        "reputation": 2583,
                        "user_id": 10592609,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eywIU.jpg?s=256",
                        "display_name": "Babatunde Mustapha",
                        "link": "https://stackoverflow.com/users/10592609/babatunde-mustapha"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1648864079,
                    "last_edit_date": 1648864079,
                    "creation_date": 1603465898,
                    "answer_id": 64502669,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let's assume you want to concatenate a string and an integer in a situation like this:</p>\n<pre><code>for i in range(1, 11):\n   string = &quot;string&quot; + i\n</code></pre>\n<p>And you are getting a type or concatenation error.</p>\n<p>The best way to go about it is to do something like this:</p>\n<pre><code>for i in range(1, 11):\n   print(&quot;string&quot;, i)\n</code></pre>\n<p>This will give you concatenated results, like string 1, string 2, string 3, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18091747,
                        "reputation": 570,
                        "user_id": 13151077,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DYN9r.jpg?s=256",
                        "display_name": "Kasra Najafi",
                        "link": "https://stackoverflow.com/users/13151077/kasra-najafi"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1648864012,
                    "last_edit_date": 1648864012,
                    "creation_date": 1593453659,
                    "answer_id": 62644100,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.6 and newer, you can format it just like this:</p>\n<pre><code>new_string = f'{s} {i}'\nprint(new_string)\n</code></pre>\n<p>Or just:</p>\n<pre><code>print(f'{s} {i}')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17660964,
                        "reputation": 11,
                        "user_id": 13022984,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/uMHAC.jpg?s=256",
                        "display_name": "Daniel Jim&#233;nez",
                        "link": "https://stackoverflow.com/users/13022984/daniel-jim%c3%a9nez"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1648863950,
                    "last_edit_date": 1648863950,
                    "creation_date": 1587988803,
                    "answer_id": 61458399,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you only want to print, you can do this:</p>\n<pre><code>print(s, i)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10949616,
                        "reputation": 91,
                        "user_id": 8046369,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cbf77b85c3d4130c1ae5897ba83cb37a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Aakash Wadhwa",
                        "link": "https://stackoverflow.com/users/8046369/aakash-wadhwa"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1648863882,
                    "last_edit_date": 1648863882,
                    "creation_date": 1547145375,
                    "answer_id": 54134938,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The format() method can be used to concatenate a string and an integer:</p>\n<pre><code>print(s + &quot;{}&quot;.format(i))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1156094,
                        "reputation": 2015,
                        "user_id": 1136670,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/d039c79ebf6f79c06418ac31453992f6?s=256&d=identicon&r=PG",
                        "display_name": "CaitlinG",
                        "link": "https://stackoverflow.com/users/1136670/caitling"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1648863854,
                    "last_edit_date": 1648863854,
                    "creation_date": 1373442586,
                    "answer_id": 17565144,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python is an interesting language in that while there is usually one (or two) &quot;obvious&quot; ways to accomplish any given task, flexibility still exists.</p>\n<pre><code>s = &quot;string&quot;\ni = 0\n\nprint (s + repr(i))\n</code></pre>\n<p>The above code snippet is written in Python\u00a03 syntax, but the parentheses after <em>print</em> were always allowed (optional) until version 3 made them mandatory.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 354053,
                        "reputation": 142727,
                        "user_id": 1209279,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=256&d=identicon&r=PG",
                        "display_name": "Levon",
                        "link": "https://stackoverflow.com/users/1209279/levon"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1342696788,
                    "last_edit_date": 1342696788,
                    "creation_date": 1342694569,
                    "answer_id": 11559099,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>String formatting, using the new-style <code>.format()</code> method (with the defaults <a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\">.format()</a> provides):</p>\n\n<pre><code> '{}{}'.format(s, i)\n</code></pre>\n\n<p>Or the older, but \"still sticking around\", <code>%</code>-formatting:</p>\n\n<pre><code> '%s%d' %(s, i)\n</code></pre>\n\n<p>In both examples above there's <em>no</em> space between the two items concatenated. If space is needed, it can simply be added in the format strings.</p>\n\n<p>These provide a <em>lot</em> of control and flexibility about how to concatenate items, the space between them etc. For details about <a href=\"http://docs.python.org/library/string.html#formatspec\" rel=\"noreferrer\">format specifications see this</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 415531,
                        "reputation": 174291,
                        "user_id": 790387,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=256&d=identicon&r=PG",
                        "display_name": "Burhan Khalid",
                        "link": "https://stackoverflow.com/users/790387/burhan-khalid"
                    },
                    "is_accepted": false,
                    "score": 93,
                    "last_activity_date": 1342694658,
                    "creation_date": 1342694658,
                    "answer_id": 11559133,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No string formatting:</p>\n\n<pre><code>&gt;&gt; print 'Foo',0\nFoo 0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user647772"
                    },
                    "is_accepted": true,
                    "score": 198,
                    "last_activity_date": 1342694627,
                    "creation_date": 1342694627,
                    "answer_id": 11559122,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Modern string formatting:</p>\n\n<pre><code>\"{} and {}\".format(\"string\", 1)\n</code></pre>\n"
                }
            ]
        },
        {
            "8200342": [
                {
                    "owner": {
                        "account_id": 2215786,
                        "reputation": 412,
                        "user_id": 1973026,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/iSkvR.jpg?s=256",
                        "display_name": "murasing",
                        "link": "https://stackoverflow.com/users/1973026/murasing"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1391767189,
                    "last_edit_date": 1391767189,
                    "creation_date": 1391766565,
                    "answer_id": 21624346,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def getUniqueItems(iterable):\nresult = []\nfor item in iterable:\n    if item not in result:\n        result.append(item)\nreturn result\n\nprint (''.join(getUniqueItems(list('apple'))))\n</code></pre>\n\n<p>P.S. Same thing like one of the answers here but a little change, set is not really required !</p>\n"
                },
                {
                    "owner": {
                        "account_id": 39819,
                        "reputation": 59227,
                        "user_id": 115049,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/6RN3z.png?s=256",
                        "display_name": "rossipedia",
                        "link": "https://stackoverflow.com/users/115049/rossipedia"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1321777983,
                    "creation_date": 1321777983,
                    "answer_id": 8200355,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could pop 'em into a <code>set</code> and then back into a list:</p>\n\n<pre><code>a = [ ... ]\ns = set(a)\na2 = list(s)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835940,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1321777976,
                    "creation_date": 1321777976,
                    "answer_id": 8200353,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Convert to a set:</p>\n\n<pre><code>a = set(a)\n</code></pre>\n\n<p>Or optionally back to a list:</p>\n\n<pre><code>a = list(set(a))\n</code></pre>\n\n<p>Note that this doesn't preserve order. If you want to preserve order:</p>\n\n<pre><code>seen = set()\nresult = []\nfor item in a:\n    if item not in seen:\n        seen.add(item)\n        result.append(item)\n</code></pre>\n\n<p>See it working online: <a href=\"http://ideone.com/p9yJU\">ideone</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 110545,
                        "reputation": 32447,
                        "user_id": 292477,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/7ca3cdf733e5ad7ca41c58ba43d06dcd?s=256&d=identicon&r=PG",
                        "display_name": "Krumelur",
                        "link": "https://stackoverflow.com/users/292477/krumelur"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1321777963,
                    "creation_date": 1321777963,
                    "answer_id": 8200352,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the set type to remove duplicates</p>\n\n<pre><code>a = list(set(a))\n</code></pre>\n"
                }
            ]
        },
        {
            "38895768": [
                {
                    "owner": {
                        "account_id": 12952183,
                        "reputation": 484,
                        "user_id": 9364104,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-PpLh8ZvYeaw/AAAAAAAAAAI/AAAAAAAAABY/Yb4gaOaqJmc/photo.jpg?sz=256",
                        "display_name": "ayoub mlaouah",
                        "link": "https://stackoverflow.com/users/9364104/ayoub-mlaouah"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1671019228,
                    "creation_date": 1671019228,
                    "answer_id": 74797975,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Short answer:</p>\n<ul>\n<li>By value: <code>df2 = df.copy()</code></li>\n<li>By references : <code>df2 = df</code></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1089798,
                        "reputation": 7138,
                        "user_id": 1084684,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/WIegY.png?s=256",
                        "display_name": "dstromberg",
                        "link": "https://stackoverflow.com/users/1084684/dstromberg"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1507235774,
                    "creation_date": 1507235774,
                    "answer_id": 46594396,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python is neither pass by value nor pass by reference.  It is pass by assignment.</p>\n\n<p>Supporting reference, the Python FAQ:\n<a href=\"https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\" rel=\"noreferrer\">https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference</a></p>\n\n<p>IOW:</p>\n\n<ol>\n<li>If you pass an immutable value, changes to it do not change its\nvalue    in the caller - because you are rebinding the name to a new\nobject.</li>\n<li>If you pass a mutable value, changes made in the called function,\nalso change the value in the caller, so long as you do not rebind\nthat name to a new object.  If you reassign the variable,\ncreating a new object, that change and subsequent changes to the\nname are not seen in the caller.</li>\n</ol>\n\n<p>So if you pass a list, and change its 0th value, that change is seen in both the called and the caller.  But if you reassign the list with a new list, this change is lost.  But if you slice the list and replace <em>that</em> with a new list, that change is seen in both the called and the caller.</p>\n\n<p>EG:</p>\n\n<pre><code>def change_it(list_):\n    # This change would be seen in the caller if we left it alone\n    list_[0] = 28\n\n    # This change is also seen in the caller, and replaces the above\n    # change\n    list_[:] = [1, 2]\n\n    # This change is not seen in the caller.\n    # If this were pass by reference, this change too would be seen in\n    # caller.\n    list_ = [3, 4]\n\nthing = [10, 20]\nchange_it(thing)\n# here, thing is [1, 2]\n</code></pre>\n\n<p>If you're a C fan, you can think of this as passing a pointer by value - not a pointer to a pointer to a value, just a pointer to a value.</p>\n\n<p>HTH.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2504802,
                        "reputation": 18557,
                        "user_id": 3830997,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Lg47I.png?s=256",
                        "display_name": "Matthias Fripp",
                        "link": "https://stackoverflow.com/users/3830997/matthias-fripp"
                    },
                    "is_accepted": true,
                    "score": 180,
                    "last_activity_date": 1471050804,
                    "last_edit_date": 1471050804,
                    "creation_date": 1471030241,
                    "answer_id": 38925257,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The short answer is, Python always does pass-by-value, but every Python variable is actually a pointer to some object, so sometimes it looks like pass-by-reference.</p>\n\n<p>In Python every object is either mutable or non-mutable. e.g., lists, dicts, modules and Pandas data frames are mutable, and ints, strings and tuples are non-mutable. Mutable objects can be changed internally (e.g., add an element to a list), but non-mutable objects cannot. </p>\n\n<p>As I said at the start, you can think of every Python variable as a pointer to an object. When you pass a variable to a function, the variable (pointer) within the function is always a copy of the variable (pointer) that was passed in. So if you assign something new to the internal variable, all you are doing is changing the local variable to point to a different object. This doesn't alter (mutate) the original object that the variable pointed to, nor does it make the external variable point to the new object. At this point, the external variable still points to the original object, but the internal variable points to a new object. </p>\n\n<p>If you want to alter the original object (only possible with mutable data types), you have to do something that alters the object <em>without</em> assigning a completely new value to the local variable. This is why <code>letgo()</code> and <code>letgo3()</code> leave the external item unaltered, but <code>letgo2()</code> alters it. </p>\n\n<p>As @ursan pointed out, if <code>letgo()</code> used something like this instead, then it would alter (mutate) the original object that <code>df</code> points to, which would change the value seen via the global <code>a</code> variable:</p>\n\n<pre><code>def letgo(df):\n    df.drop('b', axis=1, inplace=True)\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\nletgo(a)  # will alter a\n</code></pre>\n\n<p>In some cases, you can completely hollow out the original variable and refill it with new data, without actually doing a direct assignment, e.g. this will alter the original object that <code>v</code> points to, which will change the data seen when you use <code>v</code> later:</p>\n\n<pre><code>def letgo3(x):\n    x[:] = np.array([[3,3],[3,3]])\n\nv = np.empty((2, 2))\nletgo3(v)   # will alter v\n</code></pre>\n\n<p>Notice that I'm not assigning something directly to <code>x</code>; I'm assigning something to the entire internal range of <code>x</code>.</p>\n\n<p>If you absolutely must create a completely new object and make it visible externally (which is sometimes the case with pandas), you have two options. The 'clean' option would be just to return the new object, e.g., </p>\n\n<pre><code>def letgo(df):\n    df = df.drop('b',axis=1)\n    return df\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\na = letgo(a)\n</code></pre>\n\n<p>Another option would be to reach outside your function and directly alter a global variable. This changes <code>a</code> to point to a new object, and any function that refers to <code>a</code> afterward will see that new object:</p>\n\n<pre><code>def letgo():\n    global a\n    a = a.drop('b',axis=1)\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\nletgo()   # will alter a!\n</code></pre>\n\n<p>Directly altering global variables is usually a bad idea, because anyone who reads your code will have a hard time figuring out how <code>a</code> got changed. (I generally use global variables for shared parameters used by many functions in a script, but I don't let them alter those global variables.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5310431,
                        "reputation": 2447,
                        "user_id": 4236984,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/fKrEh.jpg?s=256",
                        "display_name": "ursan",
                        "link": "https://stackoverflow.com/users/4236984/ursan"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1471027680,
                    "creation_date": 1471027680,
                    "answer_id": 38924624,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To add to @Mike Graham's answer, who pointed to a very good read:</p>\n\n<p>In your case, what is important to remember is the difference between <em>names</em> and <em>values</em>. <code>a</code>, <code>df</code>, <code>xx</code>, <code>x</code>, are all <em>names</em>, but they refer to the same or different <em>values</em> at different points of your examples:</p>\n\n<ul>\n<li><p>In the first example, <code>letgo</code> <strong>rebinds</strong> <code>df</code> to another value, because <code>df.drop</code> returns a new <code>DataFrame</code> unless you set the argument <code>inplace = True</code> (<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html\" rel=\"noreferrer\">see doc</a>). That means that the name <code>df</code> (local to the <code>letgo</code> function), which was referring to the value of <code>a</code>, is now referring to a new value, here the <code>df.drop</code> return value. The value <code>a</code> is referring to still exists and hasn't changed.</p></li>\n<li><p>In the second example, <code>letgo2</code> <strong>mutates</strong> <code>x</code>, without rebinding it, which is why <code>xx</code> is modified by <code>letgo2</code>. Unlike the previous example, here the local name <code>x</code> always refers to the value the name <code>xx</code> is referring to, and changes that value <em>in place</em>, which is why the value <code>xx</code> is referring to has changed.</p></li>\n<li><p>In the third example, <code>letgo3</code> <strong>rebinds</strong> <code>x</code> to a new <code>np.array</code>. That causes the name <code>x</code>, local to <code>letgo3</code> and previously referring to the value of <code>xx</code>, to now refer to another value, the new <code>np.array</code>. The value <code>xx</code> is referring to hasn't changed.</p></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 65561,
                        "reputation": 76475,
                        "user_id": 192839,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/GNPsv.jpg?s=256",
                        "display_name": "Mike Graham",
                        "link": "https://stackoverflow.com/users/192839/mike-graham"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1470918089,
                    "creation_date": 1470918089,
                    "answer_id": 38896256,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The question isn't PBV vs. PBR. These names only cause confusion in a language like Python; they were invented for languages that work like C or like Fortran (as the quintessential PBV and PBR languages). It is true, but not enlightening, that Python always passes by value. The question here is whether the value itself is mutated or whether you get a new value. Pandas usually errs on the side of the latter.</p>\n\n<p><a href=\"http://nedbatchelder.com/text/names.html\" rel=\"noreferrer\">http://nedbatchelder.com/text/names.html</a> explains very well what Python's system of names is.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8986270,
                        "reputation": 9,
                        "user_id": 6699751,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-ZoUFh_PPD8A/AAAAAAAAAAI/AAAAAAAANk0/WMurDH9ctGQ/photo.jpg?sz=256",
                        "display_name": "zosan",
                        "link": "https://stackoverflow.com/users/6699751/zosan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1470917182,
                    "creation_date": 1470917182,
                    "answer_id": 38895926,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>you need to make 'a' global at the start of the function otherwise it is a local variable and does not change the 'a' in the main code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 477309,
                        "reputation": 13480,
                        "user_id": 888731,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/n0Qhe.png?s=256",
                        "display_name": "Israel Unterman",
                        "link": "https://stackoverflow.com/users/888731/israel-unterman"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1470916945,
                    "creation_date": 1470916945,
                    "answer_id": 38895844,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the doc for drop:</p>\n\n<blockquote>\n  <p>Return new object with labels in requested axis removed.</p>\n</blockquote>\n\n<p>So a new dataframe is created. The original has not changed.</p>\n\n<p>But as for all objects in python, the data frame is passed to the function by reference.</p>\n"
                }
            ]
        },
        {
            "5832856": [
                {
                    "owner": {
                        "account_id": 7977492,
                        "reputation": 827,
                        "user_id": 6142313,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/743ee9da39f5b4bb23bceb5aa361abaf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Q. Qiao",
                        "link": "https://stackoverflow.com/users/6142313/q-qiao"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1644952541,
                    "last_edit_date": 1644952541,
                    "creation_date": 1644942596,
                    "answer_id": 71130021,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>def get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        lines = []\n        for i, line in enumerate(fp):\n            if i % n == 0 and i != 0:\n                yield lines \n                lines = []\n            lines.append(line)\n    if lines:\n        yield lines \n\nfor lines in b():\n    print(lines)\n</code></pre>\n<p>It is simpler with islice:</p>\n<pre><code>from itertools import islice\n\ndef get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        while True:\n            lines = list(islice(fp, n))\n            if lines:\n                yield lines\n            else:\n                break\n\nfor lines in get_lines_iterator(filename):\n    print(lines)\n</code></pre>\n<p>Another way to do this:</p>\n<pre><code>from itertools import islice\n\ndef get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        for line in fp:\n            yield [line] + list(islice(fp, n-1))\n           \n\nfor lines in get_lines_iterator(filename):\n    print(lines)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1624046576,
                    "last_edit_date": 1624046576,
                    "creation_date": 1304203767,
                    "answer_id": 5845141,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A file object is an iterator over lines in Python. To iterate over the file N lines at a time, you could use <code>grouper()</code> function in the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">Itertools Recipes</a> section of the documenation. (Also see <a href=\"https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks/434411#434411\">What is the most \u201cpythonic\u201d way to iterate over a list in chunks?</a>):</p>\n<pre><code>try:\n   from itertools import izip_longest\nexcept ImportError:  # Python 3\n    from itertools import zip_longest as izip_longest\n\ndef grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(*args, fillvalue=fillvalue)\n</code></pre>\n<h3>Example</h3>\n<pre><code>with open(filename) as f:\n     for lines in grouper(f, N, ''):\n         assert len(lines) == N\n         # process N lines here\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1914531,
                        "reputation": 27517,
                        "user_id": 1727392,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/KP9Ia.jpg?s=256",
                        "display_name": "duhaime",
                        "link": "https://stackoverflow.com/users/1727392/duhaime"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1605790961,
                    "last_edit_date": 1605790961,
                    "creation_date": 1530189597,
                    "answer_id": 51083202,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I needed to read in n lines at a time from files for extremely large files (~1TB) and wrote a <a href=\"https://github.com/duhaime/big-read\" rel=\"nofollow noreferrer\">simple package</a> to do this. If you <code>pip install bigread</code>, you can do:</p>\n<pre><code>from bigread import Reader\n\nstream = Reader(file='large.txt', block_size=10) \nfor i in stream:\n  print(i)\n</code></pre>\n<p><code>block_size</code> is the number of lines to read at a time.</p>\n<hr />\n<p>This package is no longer maintained. I now find it best to use:</p>\n<pre><code>with open('big.txt') as f:\n  for line_idx, line in enumerate(f):\n    print(line)\n</code></pre>\n<p>If you need a memory of previous lines, just store them in a list. If you need to know future lines to decide what to do with the current line, store the current line in a list until you get to that future line...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2947209,
                        "reputation": 1,
                        "user_id": 5543770,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GL6DN.jpg?s=256",
                        "display_name": "Haromn",
                        "link": "https://stackoverflow.com/users/5543770/haromn"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1534929204,
                    "last_edit_date": 1534929204,
                    "creation_date": 1534836171,
                    "answer_id": 51943556,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was looking for an answer to the same question, but did not really like any of the proposed stuff earlier, so I ended up writing this slightly ugly thing that does exactly what I wanted <s>without using strange libraries</s>.</p>\n\n<pre><code>def test(filename, N):\n    with open(filename, 'r') as infile:\n        lines = []\n        for line in infile:\n            line = line.strip()\n            if len(lines) &lt; N-1:\n                lines.append(line)\n            else:\n                lines.append(line)\n                res = lines\n                lines = []\n            yield res\n        else:\n            if len(lines) != 0:\n                yield lines\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3509551,
                        "reputation": 41,
                        "user_id": 2934228,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e89ed8b49894eda8b9c7ad34d5bed104?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ChrisEisenhart",
                        "link": "https://stackoverflow.com/users/2934228/chriseisenhart"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1509575887,
                    "last_edit_date": 1509575887,
                    "creation_date": 1509573100,
                    "answer_id": 47064280,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you can read the full file in ahead of time; </p>\n\n<pre><code>infile = open(filename, 'r').readlines()\nmy_block = [line.strip() for line in infile[:N]]\ncur_pos = 0\nwhile my_block:\n    print (my_block)\n    cur_pos +=1\n    my_block = [line.strip() for line in infile[cur_pos*N:(cur_pos +1)*N]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 221752,
                        "reputation": 607,
                        "user_id": 479917,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6655857cdc68adaba20c04289edaeca5?s=256&d=identicon&r=PG",
                        "display_name": "Anatolij",
                        "link": "https://stackoverflow.com/users/479917/anatolij"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1508385316,
                    "last_edit_date": 1508385316,
                    "creation_date": 1304085067,
                    "answer_id": 5832935,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This code will work with any count of lines in file and any <code>N</code>. If you have <code>1100 lines</code> in file and <code>N = 200</code>, you will get 5 times to process chunks of 200 lines and one time with 100 lines.</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    lines = []\n    for line in infile:\n        lines.append(line)\n        if len(lines) &gt;= N:\n            process(lines)\n            lines = []\n    if len(lines) &gt; 0:\n        process(lines)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10661,
                        "reputation": 7614,
                        "user_id": 20247,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/f4f1b95e46356ae5d1a8d842aa4dba6c?s=256&d=identicon&r=PG",
                        "display_name": "Martin Thurau",
                        "link": "https://stackoverflow.com/users/20247/martin-thurau"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1304217102,
                    "last_edit_date": 1304217102,
                    "creation_date": 1304085311,
                    "answer_id": 5832971,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One solution would be a list comprehension and the slice operator:</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    lines = [line for line in infile][:N]\n</code></pre>\n\n<p>After this <code>lines</code> is tuple of lines. However, this would load the complete file into memory. If you don't want this (i.e. if the file could be really large) there is another solution using a generator expression and <a href=\"http://docs.python.org/library/itertools.html#itertools.islice\" rel=\"noreferrer\"><code>islice</code></a> from the itertools package:</p>\n\n<pre><code>from itertools import islice\nwith open(filename, 'r') as infile:\n    lines_gen = islice(infile, N)\n</code></pre>\n\n<p><code>lines_gen</code> is a generator object, that gives you each line of the file and can be used in a loop like this:</p>\n\n<pre><code>for line in lines_gen:\n    print line\n</code></pre>\n\n<p>Both solutions give you up to N lines (or fewer, if the file doesn't have that much).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3353,
                        "reputation": 39273,
                        "user_id": 4834,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/6a04e124482c3750617f8dacde3388ce?s=256&d=identicon&r=PG",
                        "display_name": "quamrana",
                        "link": "https://stackoverflow.com/users/4834/quamrana"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1304154991,
                    "last_edit_date": 1304154991,
                    "creation_date": 1304085051,
                    "answer_id": 5832931,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may have to do something as simple as:</p>\n\n<pre><code>lines = [infile.readline() for _ in range(N)]\n</code></pre>\n\n<p><strong>Update</strong>  after comments:</p>\n\n<pre><code>lines = [line for line in [infile.readline() for _ in range(N)] if len(line) ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 314876,
                        "reputation": 2199,
                        "user_id": 630321,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2fcad865809b4aec3dd1097eb306d03?s=256&d=identicon&r=PG",
                        "display_name": "Konstant",
                        "link": "https://stackoverflow.com/users/630321/konstant"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1304085292,
                    "last_edit_date": 1495542317,
                    "creation_date": 1304085292,
                    "answer_id": 5832968,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you should be using chunks instead of specifying the number of lines to read. It makes your code more robust and generic. Even if the lines are big, using chunk will upload only the assigned amount of data into memory.</p>\n\n<p>Refer to <a href=\"https://stackoverflow.com/questions/519633/lazy-method-for-reading-big-file-in-python\">this</a> link</p>\n"
                },
                {
                    "owner": {
                        "account_id": 90866,
                        "reputation": 8147,
                        "user_id": 249878,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/50be7ccb1642c90f37be4f14d5767751?s=256&d=identicon&r=PG",
                        "display_name": "yurib",
                        "link": "https://stackoverflow.com/users/249878/yurib"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1304085037,
                    "creation_date": 1304085037,
                    "answer_id": 5832927,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>maybe:  </p>\n\n<pre><code>for x in range(N):\n  lines.append(f.readline())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 374247,
                        "reputation": 14892,
                        "user_id": 724357,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/560e7baed307950747f2ff0ca2b1a13a?s=256&d=identicon&r=PG",
                        "display_name": "Spencer Rathbun",
                        "link": "https://stackoverflow.com/users/724357/spencer-rathbun"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1304085021,
                    "creation_date": 1304085021,
                    "answer_id": 5832922,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about a for loop?</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    while not EOF:\n        lines = []\n        for i in range(next N lines):\n            lines.append(infile.readline())\n        process(lines)\n</code></pre>\n"
                }
            ]
        },
        {
            "860313": [
                {
                    "owner": {
                        "account_id": 34853,
                        "reputation": 1328,
                        "user_id": 98571,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/63da8564b666876354c0125e767a9273?s=256&d=identicon&r=PG",
                        "display_name": "Nico",
                        "link": "https://stackoverflow.com/users/98571/nico"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1371910384,
                    "last_edit_date": 1371910384,
                    "creation_date": 1242248704,
                    "answer_id": 860430,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Well, SQLAlchemy is divided into different parts, the main core part simply handles the DB, transforming your python built queries into the appropriate SQL language for the underlying DB. Then there is the support for sessions, the orm, and the new declarative syntax.</p>\n\n<p>Looks like SQLObject (I can't say for sure, haven't used it in many years, and even then, only once) skips most of it and does the ORM part straight away. This often makes things easier for simple data (which you can get away with in most cases), but SQLAlchemy allows for more complex db layouts, and get down and dirty with the db if you really need it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 461272,
                        "reputation": 20296,
                        "user_id": 862862,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/BeOcj.jpg?s=256",
                        "display_name": "Tyler Liu",
                        "link": "https://stackoverflow.com/users/862862/tyler-liu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1321037622,
                    "creation_date": 1321037622,
                    "answer_id": 8098592,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try <a href=\"http://pypi.python.org/pypi/quick_orm\" rel=\"nofollow\">Quick ORM</a>, it is even simpler:</p>\n\n<pre><code>from quick_orm.core import Database\nfrom sqlalchemy import Column, String\n\nclass User(object):\n    __metaclass__ = Database.DefaultMeta\n    name = Column(String(30))\n\nif __name__ == '__main__':\n    database = Database('sqlite://')\n    database.create_tables()\n\n    user = User(name = 'Hello World')\n    database.session.add_then_commit(user)\n\n    user = database.session.query(User).get(1)\n    print 'My name is', user.name\n</code></pre>\n\n<p><a href=\"http://pypi.python.org/pypi/quick_orm\" rel=\"nofollow\">Quick ORM</a> is built upon SQLAlchemy, so we could say that SQLAlchemy could be as simple as SQLObject.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6435,
                        "reputation": 1908,
                        "user_id": 10815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5099d66b6ea743d01e10be7425d24f44?s=256&d=identicon&r=PG",
                        "display_name": "Joe L.",
                        "link": "https://stackoverflow.com/users/10815/joe-l"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242259369,
                    "last_edit_date": 1242259369,
                    "creation_date": 1242252293,
                    "answer_id": 860667,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Having used SQLObject (and only read about SQLAlchemy), I can say that one of SQLObject's strengths is the ease and simplicity with which you can get things done.  Also, excellent support is provided by the email group (<a href=\"https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss\" rel=\"nofollow noreferrer\">https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss</a>) that gets answers back to you pretty quickly.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 26254,
                        "reputation": 36054,
                        "user_id": 68127,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/XSuO8.jpg?s=256",
                        "display_name": "Jacob Gabrielson",
                        "link": "https://stackoverflow.com/users/68127/jacob-gabrielson"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1242251591,
                    "creation_date": 1242251591,
                    "answer_id": 860616,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The code examples you give aren't apples-to-apples.  The SQLAlchemy version could be pared down a bit:</p>\n\n<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column('id', Integer, primary_key=True)\n    name = Column('name', String)\n    fullname = Column('fullname', String)\n    password = Column('password', String)\n\n    def __repr__(self):\n       return \"\" % (self.name, self.fullname, self.password)\n\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# actually using the ORM isn't too bad..\ned_user = User(name='ed', fullname='Ed Jones', password='edspassword')\nsession.add(ed_user)\n\nour_user = session.query(User).filter_by(name='ed').first()\n\nsession.add_all([\n    User(name='wendy', fullname='Wendy Williams', password='foobar'),\n    User(name='mary', fullname='Mary Contrary', password='xxg527'),\n    User(name='fred', fullname='Fred Flinstone', password='blah')])\n\ned_user.password = 'f8s7ccs'\n\nsession.flush()\n\nfor instance in session.query(User).order_by(User.id):\n    print instance.name, instance.fullname\n\nfor name, fullname in session.query(User.name, User.fullname):\n    print name, fullname\n</code></pre>\n\n<p>You might also find <a href=\"http://elixir.ematia.de/trac/wiki\" rel=\"nofollow noreferrer\">Elixir</a> more like SQLObject (but since I haven't used either, that's just a guess).</p>\n\n<p>Not having used SQLObject at all, I can't comment on what exactly SA does better.  But I have had great experiences with SA, especially when dealing with complicated, real-world, legacy schemas.  It does a good job of coming up with good SQL queries by default, and has lots of ways to tune them.</p>\n\n<p>I've found SQLAlchemy author's <a href=\"http://techspot.zzzeek.org/?p=33\" rel=\"nofollow noreferrer\">elevator pitch</a> to hold up pretty well in practice.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 296559,
                        "reputation": 28600,
                        "user_id": 601581,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/87945c64969674b52fd9412edde91885?s=256&d=identicon&r=PG",
                        "display_name": "Steven",
                        "link": "https://stackoverflow.com/users/601581/steven"
                    },
                    "is_accepted": true,
                    "score": 88,
                    "last_activity_date": 1242251561,
                    "creation_date": 1242251561,
                    "answer_id": 860614,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Well, there is one thing you are missing: the tutorial you mention doesn't \"build\" a complete example, the different snippets of code are not meant to be concatenated into one source file. Rather, they describe the different ways the library can be used. No need to try and do the same thing over and over again yourself.</p>\n\n<p>Leaving out the actually-using-the-orm part from your example, the code could look like this:</p>\n\n<pre><code>from sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, scoped_session\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base(bind=engine)\nSession = scoped_session(sessionmaker(engine))\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    fullname = Column(String)\n    password = Column(String)\n\nBase.metadata.create_all()\n</code></pre>\n\n<p>The \"declarative\" extension takes care of defining the table and mapping it to your class, so you don't need to declare the <code>users_table</code> yourself. The User class will also allow instantiating with keyword arguments, like <code>User(name=\"foo\")</code>, (but not positional arguments though). \nI've also added use of scoped_session, which means you can directly use <code>Session</code> without actually having to instantiate it  (it will instantiate a new session if there isn't already one present in the current thread, or reuse the existing one otherwise)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 26014,
                        "reputation": 5293,
                        "user_id": 67393,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/b72cb6e5656c9541ed9e1a7bf8f06983?s=256&d=identicon&r=PG",
                        "display_name": "Tom Willis",
                        "link": "https://stackoverflow.com/users/67393/tom-willis"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1242248316,
                    "creation_date": 1242248316,
                    "answer_id": 860397,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>you say \"convoluted\".... someone else might say \"flexible\". Sometimes you need it sometimes you don't. Isn't it awesome that you have a choice?</p>\n"
                }
            ]
        },
        {
            "3162271": [
                {
                    "owner": {
                        "account_id": 8221,
                        "reputation": 31229,
                        "user_id": 1502059,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/8e1914b1b81a8160378c298a540b5e00?s=256&d=identicon&r=PG",
                        "display_name": "Nick Bastin",
                        "link": "https://stackoverflow.com/users/1502059/nick-bastin"
                    },
                    "is_accepted": true,
                    "score": 799,
                    "last_activity_date": 1652032329,
                    "last_edit_date": 1652032329,
                    "creation_date": 1278025372,
                    "answer_id": 3162287,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The pythonic way is to use <a href=\"http://docs.python.org/library/functions.html#enumerate\" rel=\"noreferrer\"><code>enumerate</code></a>:</p>\n<pre><code>for idx, item in enumerate(my_list):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9856555,
                        "reputation": 3738,
                        "user_id": 7300865,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5pzLG.jpg?s=256",
                        "display_name": "Muhammad Faizan Fareed",
                        "link": "https://stackoverflow.com/users/7300865/muhammad-faizan-fareed"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1615928353,
                    "last_edit_date": 1615928353,
                    "creation_date": 1584182011,
                    "answer_id": 60681797,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using zip function we can get both element and index.</p>\n<pre><code>countries = ['Pakistan','India','China','Russia','USA']\n\nfor index, element in zip(range(0,countries),countries):\n\n         print('Index : ',index)\n         print(' Element : ', element,'\\n')\n\noutput : Index : 0 Element : Pakistan ...\n</code></pre>\n<hr />\n<p>See also :</p>\n<p><a href=\"https://www.python.org/dev/peps/pep-0212/\" rel=\"nofollow noreferrer\">Python.org</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3101067,
                        "reputation": 1369,
                        "user_id": 2625183,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fd0b1d0b0eab2f0ac708fa96ca15570a?s=256&d=identicon&r=PG",
                        "display_name": "Vikram Garg",
                        "link": "https://stackoverflow.com/users/2625183/vikram-garg"
                    },
                    "is_accepted": false,
                    "score": 126,
                    "last_activity_date": 1507378889,
                    "last_edit_date": 1507378889,
                    "creation_date": 1381912479,
                    "answer_id": 19398650,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Agree with Nick. \nHere is more elaborated code.</p>\n\n<pre><code>#count=0\nfor idx, item in enumerate(list):\n    print item\n    #count +=1\n    #if count % 10 == 0:\n    if (idx+1) % 10 == 0:\n        print 'did ten'\n</code></pre>\n\n<p>I have commented out the count variable in your code.</p>\n"
                }
            ]
        },
        {
            "14573728": [
                {
                    "owner": {
                        "account_id": 933959,
                        "reputation": 4521,
                        "user_id": 963250,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/ea9c34e487f83e05190acf520ba240c2?s=256&d=identicon&r=PG",
                        "display_name": "BenDundee",
                        "link": "https://stackoverflow.com/users/963250/bendundee"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1359433799,
                    "creation_date": 1359433799,
                    "answer_id": 14575672,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I try to use pandas/statsmodels/scipy for my work on a day-to-day basis, but sometimes those packages come up a bit short (LOESS, anybody?). The problem with the RPy module is (last I checked, at least) that it wants a specific version of R that isn't current---my R installation is 2.16 (I think) and RPy wanted 2.14. So either you have to have two parallel installations of R, or you have to downgrade. (If you don't have R installed, then you can just install the correct version of R and use RPy.)</p>\n\n<p>So when I need something that isn't in pandas/statsmodels/scipy I write R scripts, and run them with the <code>subprocess</code> module. This lets me interact with R as little as possible (which I really don't like programming in), but I can still leverage all the stuff that R has that the Python packages don't.</p>\n\n<p>The lesson is that there isn't ever <em>one</em> solution to any problem---you have to assemble a whole bunch of parts that are all useful to you (and maybe write some of your own), in a way that you understand, to solve problems. (R aficionados will disagree, of course!) </p>\n"
                },
                {
                    "owner": {
                        "account_id": 255542,
                        "reputation": 8283,
                        "user_id": 535665,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/272540e56a9b1b5c01fa5ef3c7a91edd?s=256&d=identicon&r=PG",
                        "display_name": "jseabold",
                        "link": "https://stackoverflow.com/users/535665/jseabold"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1359430499,
                    "creation_date": 1359430499,
                    "answer_id": 14575243,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Statsmodels has scipy.stats as a dependency. Scipy.stats has all of the probability distributions and some statistical tests. It's more like library code in the vein of numpy and scipy. Statsmodels on the other hand provides statistical models with a formula framework similar to R and it works with pandas DataFrames. There are also statistical tests, plotting, and plenty of helper functions in statsmodels. Really it depends on what you need, but you definitely don't have to choose one. They have different aims and strengths.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2015601"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1359422006,
                    "creation_date": 1359422006,
                    "answer_id": 14574087,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think THE statistics package is numpy/scipy. It works also great if you want to plot your data using matplotlib. \nHowever, as far as I know, matplotlib doesn't work with Python 3.x yet.</p>\n"
                }
            ]
        },
        {
            "14262433": [
                {
                    "owner": {
                        "account_id": 7926,
                        "reputation": 5140,
                        "user_id": 13969,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/6c6205448de1b8ad8d5baf0f3416d899?s=256&d=identicon&r=PG",
                        "display_name": "rjurney",
                        "link": "https://stackoverflow.com/users/13969/rjurney"
                    },
                    "is_accepted": false,
                    "score": 72,
                    "last_activity_date": 1714326431,
                    "last_edit_date": 1714326431,
                    "creation_date": 1383376447,
                    "answer_id": 19739768,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Option 1</strong>: If your datasets are between 1 and 20GB, you should get a workstation with 48GB of RAM. Then Pandas can hold the entire dataset in RAM. I know its not the answer you're looking for here, but doing scientific computing on a notebook with 4GB of RAM isn't reasonable. In 2024 (question is from 2015) I now have a Macbook M3 Max Pro with 128GB of RAM and encourage people to get the RAM they need for their day-to-day work.</p>\n<p><strong>Option 2</strong>: Keep your Pandas, but backed by a distributed system of more than one computer. Pandas uses one or at least few cores. That much data <em>needs multiple cores or GPUs</em> working on it or processing will be SLOW even if it fits in RAM.</p>\n<p>Here are some other solutions that are both multi-core and multi-machine and now easy enough for any Pandas user to employ.</p>\n<ul>\n<li><a href=\"https://www.dask.org/\" rel=\"nofollow noreferrer\">Dask - <em>scale the Python tools you have</em></a> - has an <a href=\"https://docs.dask.org/en/latest/api.html\" rel=\"nofollow noreferrer\">API quite similar to Pandas</a> and can run on multiple machines. I've always had to start my own Dask pids - which can be confusing - so I would recommend using a Platform as a Service (PaaS) like <a href=\"https://www.coiled.io/\" rel=\"nofollow noreferrer\">Coiled</a> to experiment before setting it up on your own machine.</li>\n<li><a href=\"https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html\" rel=\"nofollow noreferrer\">Pandas API on PySpark</a> - this is somewhat mature as of 2024, but your mileage may vary (YMMV). See: <a href=\"https://spark.apache.org/docs/latest/api/python/getting_started/quickstart_ps.html\" rel=\"nofollow noreferrer\">Quickstart</a>.</li>\n<li><a href=\"https://docs.ray.io/en/latest/ray-more-libs/modin/index.html\" rel=\"nofollow noreferrer\">Modin</a> - Pandas on <a href=\"https://www.ray.io/\" rel=\"nofollow noreferrer\">Ray</a>. I haven't used Ray, but a lot of people do and like it.</li>\n<li><a href=\"https://docs.rapids.ai/api/dask-cuda/stable/\" rel=\"nofollow noreferrer\">Dask CUDA</a> - part of NVIDIA <a href=\"https://rapids.ai/\" rel=\"nofollow noreferrer\">RAPIDS</a>, it can employ multiple GPUs on DataFrame compute, including both sophisticated algorithms and things like regular expressions, which is incredibly powerful for scientific computing.</li>\n</ul>\n<p><strong>Option 3</strong>: If you have big data, consider the leading framework for working with big data: <a href=\"https://spark.apache.org/docs/latest/api/python/index.html\" rel=\"nofollow noreferrer\">PySpark</a> See: <a href=\"https://spark.apache.org/docs/latest/api/python/reference/index.html\" rel=\"nofollow noreferrer\">API Reference</a> (keep it open in a tab). You can mix and match <a href=\"https://spark.apache.org/sql/\" rel=\"nofollow noreferrer\">Spark SQL</a> and PySpark's dataflow API, which is really powerful. I wrote a book on how to do this called <a href=\"https://rads.stackoverflow.com/amzn/click/com/1491960116\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Agile Data Science 2.0</a>, and the code is still current.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3540772,
                        "reputation": 173,
                        "user_id": 2957943,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fee11b3bf402fe16b08895f6cac352b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user2957943",
                        "link": "https://stackoverflow.com/users/2957943/user2957943"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627844799,
                    "creation_date": 1627844799,
                    "answer_id": 68613546,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The parquet file format is ideal for the use case you described.  You can efficiently read in a specific subset of columns with <code>pd.read_parquet(path_to_file, columns=[&quot;foo&quot;, &quot;bar&quot;])</code></p>\n<p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html\" rel=\"nofollow noreferrer\">https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 88646,
                        "reputation": 4107,
                        "user_id": 245024,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/99b5bd1dd14297c67f6fb70c1d182bf1?s=256&d=identicon&r=PG",
                        "display_name": "lev",
                        "link": "https://stackoverflow.com/users/245024/lev"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1623401428,
                    "last_edit_date": 1623401428,
                    "creation_date": 1521365439,
                    "answer_id": 49346364,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It is worth mentioning here <a href=\"https://github.com/ray-project/ray\" rel=\"noreferrer\">Ray</a> as well,<br />\nit's a distributed computation framework, that has it's own implementation for pandas in a distributed way.</p>\n<p>Just replace the pandas import, and the code should work as is:</p>\n<pre><code># import pandas as pd\nimport ray.dataframe as pd\n\n# use pd as usual\n</code></pre>\n<p>can read more details here:</p>\n<p><a href=\"https://rise.cs.berkeley.edu/blog/pandas-on-ray/\" rel=\"noreferrer\">https://rise.cs.berkeley.edu/blog/pandas-on-ray/</a></p>\n<hr />\n<p>Update:\nthe part that handles the pandas distribution, has been extracted to the <a href=\"https://github.com/modin-project/modin\" rel=\"noreferrer\">modin</a> project.</p>\n<p>the proper way to use it is now is:</p>\n<pre><code># import pandas as pd\nimport modin.pandas as pd\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2153644,
                        "reputation": 2694,
                        "user_id": 2115409,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://i.sstatic.net/2YEyO.gif?s=256",
                        "display_name": "Private",
                        "link": "https://stackoverflow.com/users/2115409/private"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1611604677,
                    "last_edit_date": 1611604677,
                    "creation_date": 1458765053,
                    "answer_id": 36188131,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is now, two years after the question, an 'out-of-core' pandas equivalent: <a href=\"http://dask.pydata.org/en/latest/\" rel=\"noreferrer\">dask</a>. It is excellent! Though it does not support all of pandas functionality, you can get really far with it. Update: in the past two years it has been consistently maintained and there is substantial user community working with Dask.</p>\n<p>And now, four years after the question, there is another high-performance 'out-of-core' pandas equivalent in <a href=\"https://github.com/vaexio/vaex\" rel=\"noreferrer\">Vaex</a>. It &quot;uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).&quot; It can handle data sets of billions of rows and does not store them into memory (making it even possible to do analysis on suboptimal hardware).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 324366,
                        "reputation": 128678,
                        "user_id": 644898,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=256&d=identicon&r=PG",
                        "display_name": "Jeff",
                        "link": "https://stackoverflow.com/users/644898/jeff"
                    },
                    "is_accepted": true,
                    "score": 719,
                    "last_activity_date": 1583958587,
                    "last_edit_date": 1583958587,
                    "creation_date": 1357858642,
                    "answer_id": 14268804,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.</p>\n\n<p>It's worth reading <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables\" rel=\"noreferrer\">the docs</a> and <a href=\"https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc\" rel=\"noreferrer\">late in this thread</a> for several suggestions for how to store your data.</p>\n\n<p>Details which will affect how you store your data, like:<br>\n<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\n\n<ol>\n<li>Size of data, # of rows, columns, types of columns; are you appending\nrows, or just columns? </li>\n<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\n(Giving a toy example could enable us to offer more specific recommendations.)</li>\n<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\n<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\n<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\n<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\n</ol>\n\n<h2>Solution</h2>\n\n<p><em>Ensure you have <a href=\"http://pandas.pydata.org/getpandas.html\" rel=\"noreferrer\">pandas at least <code>0.10.1</code></a> installed.</em></p>\n\n<p>Read <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk\" rel=\"noreferrer\">iterating files chunk-by-chunk</a> and <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries\" rel=\"noreferrer\">multiple table queries</a>.</p>\n\n<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\n(The following is pseudocode.)</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\n# create a store\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n#    this maps your fields to a specific group, and defines \n#    what you want to have as data_columns.\n#    you might want to create a nice class wrapping this\n#    (as you will want to have this map and its inversion)  \ngroup_map = dict(\n    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\n    .....\n    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\nfor g, v in group_map.items():\n    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n</code></pre>\n\n<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\n\n<pre><code>for f in files:\n   # read in the file, additional options may be necessary here\n   # the chunksize is not strictly necessary, you may be able to slurp each \n   # file into memory in which case just eliminate this part of the loop \n   # (you can also change chunksize if necessary)\n   for chunk in pd.read_table(f, chunksize=50000):\n       # we are going to append to each table by group\n       # we are not going to create indexes at this time\n       # but we *ARE* going to create (some) data_columns\n\n       # figure out the field groupings\n       for g, v in group_map.items():\n             # create the frame for this group\n             frame = chunk.reindex(columns = v['fields'], copy = False)    \n\n             # append it\n             store.append(g, frame, index=False, data_columns = v['dc'])\n</code></pre>\n\n<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\n\n<p>This is how you get columns and create new ones:</p>\n\n<pre><code>frame = store.select(group_that_I_want)\n# you can optionally specify:\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n#     select only say 3 out of the 20 columns in this sub-table)\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n# limit the columns in this new_group to be only NEW ones\n# (e.g. so you don't overlap from the other tables)\n# add this info to the group_map\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n</code></pre>\n\n<p>When you are ready for post_processing:</p>\n\n<pre><code># This may be a bit tricky; and depends what you are actually doing.\n# I may need to modify this function to be a bit more general:\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\n</code></pre>\n\n<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\n\n<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\n</code></pre>\n\n<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\n\n<p>You also might want to:</p>\n\n<ul>\n<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\n<li>indexes on certain data columns (makes row-subsetting much faster).</li>\n<li>enable compression.</li>\n</ul>\n\n<p>Let me know when you have questions!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11301259,
                        "reputation": 18910,
                        "user_id": 8291949,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/a7pBo.gif?s=256",
                        "display_name": "wp78de",
                        "link": "https://stackoverflow.com/users/8291949/wp78de"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1578503244,
                    "last_edit_date": 1578503244,
                    "creation_date": 1511322940,
                    "answer_id": 47426521,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As noted by others, after some years an 'out-of-core' pandas equivalent has emerged: <a href=\"http://dask.pydata.org/en/latest/\" rel=\"noreferrer\">dask</a>. Though dask is not a drop-in replacement of pandas and all of its functionality it stands out for several reasons:</p>\n\n<p>Dask is a flexible parallel computing library for analytic computing that is optimized for dynamic task scheduling for interactive computational workloads of\n\u201cBig Data\u201d collections like parallel arrays, dataframes, and lists that extend common interfaces like NumPy, Pandas, or Python iterators to larger-than-memory or distributed environments and scales from laptops to clusters.</p>\n\n<blockquote>\n  <p>Dask emphasizes the following virtues:  </p>\n  \n  <ul>\n  <li>Familiar: Provides parallelized NumPy array and Pandas DataFrame    objects</li>\n  <li>Flexible: Provides a task scheduling interface for more custom workloads and integration with other projects.</li>\n  <li>Native: Enables distributed computing in Pure Python with access to the    PyData stack.</li>\n  <li>Fast: Operates with low overhead, low latency, and    minimal serialization necessary for fast numerical algorithms  </li>\n  <li>Scales up: Runs resiliently on clusters with 1000s of cores   Scales    down: Trivial to set up and run on a laptop in a single process  </li>\n  <li>Responsive: Designed with interactive computing in mind it provides    rapid feedback and diagnostics to aid humans</li>\n  </ul>\n</blockquote>\n\n<p>and to add a simple code sample:</p>\n\n<pre><code>import dask.dataframe as dd\ndf = dd.read_csv('2015-*-*.csv')\ndf.groupby(df.user_id).value.mean().compute()\n</code></pre>\n\n<p>replaces some pandas code like this:</p>\n\n<pre><code>import pandas as pd\ndf = pd.read_csv('2015-01-01.csv')\ndf.groupby(df.user_id).value.mean()\n</code></pre>\n\n<p>and, especially noteworthy, provides through the <code>concurrent.futures</code> interface a general infrastructure for the submission of custom tasks:</p>\n\n<pre><code>from dask.distributed import Client\nclient = Client('scheduler:port')\n\nfutures = []\nfor fn in filenames:\n    future = client.submit(load, fn)\n    futures.append(future)\n\nsummary = client.submit(summarize, futures)\nsummary.result()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8725518,
                        "reputation": 31,
                        "user_id": 6527261,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6682bdeeda814494978b73d63c0f4174?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "TiRoX",
                        "link": "https://stackoverflow.com/users/6527261/tirox"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1578492314,
                    "creation_date": 1578492314,
                    "answer_id": 59647574,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>At the moment I am working \"like\" you, just on a lower scale, which is why I don't have a PoC for my suggestion.</p>\n\n<p>However, I seem to find success in using pickle as caching system and outsourcing execution of various functions into files - executing these files from my commando / main file; For example i use a prepare_use.py to convert object types, split a data set into test, validating and prediction data set.</p>\n\n<p>How does your caching with pickle work?\nI use strings in order to access pickle-files that are dynamically created, depending on which parameters and data sets were passed (with that i try to capture and determine if the program was already run, using .shape for data set, dict for passed parameters). \nRespecting these measures, i get a String to try to find and read a .pickle-file and can, if found, skip processing time in order to jump to the execution i am working on right now.</p>\n\n<p>Using databases I encountered similar problems, which is why i found joy in using this solution, however - there are many constraints for sure - for example storing huge pickle sets due to redundancy.\nUpdating a table from before to after a transformation can be done with proper indexing - validating information opens up a whole other book (I tried consolidating crawled rent data and stopped using a database after 2 hours basically - as I would have liked to jump back after every transformation process)</p>\n\n<p>I hope my 2 cents help you in some way.</p>\n\n<p>Greetings.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2730429,
                        "reputation": 3503,
                        "user_id": 2354344,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/laaX5.jpg?s=256",
                        "display_name": "Rob",
                        "link": "https://stackoverflow.com/users/2354344/rob"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1559554850,
                    "creation_date": 1559554850,
                    "answer_id": 56424715,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'd like to point out the Vaex package.</p>\n\n<blockquote>\n  <p>Vaex is a python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. It can calculate statistics such as mean, sum, count, standard deviation etc, on an N-dimensional grid up to a billion (10<sup>9</sup>) objects/rows per second. Visualization is done using histograms, density plots and 3d volume rendering, allowing interactive exploration of big data. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).</p>\n</blockquote>\n\n<p>Have a look at the documentation: <a href=\"https://vaex.readthedocs.io/en/latest/\" rel=\"noreferrer\">https://vaex.readthedocs.io/en/latest/</a>\nThe API is very close to the API of pandas.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1675347,
                        "reputation": 3296,
                        "user_id": 1541036,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/c059052ebdaaedf2d39f62682b758042?s=256&d=identicon&r=PG",
                        "display_name": "ytsaig",
                        "link": "https://stackoverflow.com/users/1541036/ytsaig"
                    },
                    "is_accepted": false,
                    "score": 55,
                    "last_activity_date": 1541227884,
                    "last_edit_date": 1541227884,
                    "creation_date": 1490507985,
                    "answer_id": 43025589,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One trick I found helpful for <strong>large data</strong> use cases is to reduce the volume of the data by reducing float precision to 32-bit. It's not applicable in all cases, but in many applications 64-bit precision is overkill and the 2x memory savings are worth it. To make an obvious point even more obvious:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(int(1e8), 5))\n&gt;&gt;&gt; df.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float64(5)\nmemory usage: 3.7 GB\n\n&gt;&gt;&gt; df.astype(np.float32).info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float32(5)\nmemory usage: 1.9 GB\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5873328,
                        "reputation": 599,
                        "user_id": 4624988,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e3a961891af636a68cecd66058f2fd08?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "timpjohns",
                        "link": "https://stackoverflow.com/users/4624988/timpjohns"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1475595176,
                    "creation_date": 1475595176,
                    "answer_id": 39856364,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I recently came across a similar issue. I found simply reading the data in chunks and appending it as I write it in chunks to the same csv works well. My problem was adding a date column based on information in another table, using the value of certain columns as follows. This may help those confused by dask and hdf5 but more familiar with pandas like myself. </p>\n\n<pre><code>def addDateColumn():\n\"\"\"Adds time to the daily rainfall data. Reads the csv as chunks of 100k \n   rows at a time and outputs them, appending as needed, to a single csv. \n   Uses the column of the raster names to get the date.\n\"\"\"\n    df = pd.read_csv(pathlist[1]+\"CHIRPS_tanz.csv\", iterator=True, \n                     chunksize=100000) #read csv file as 100k chunks\n\n    '''Do some stuff'''\n\n    count = 1 #for indexing item in time list \n    for chunk in df: #for each 100k rows\n        newtime = [] #empty list to append repeating times for different rows\n        toiterate = chunk[chunk.columns[2]] #ID of raster nums to base time\n        while count &lt;= toiterate.max():\n            for i in toiterate: \n                if i ==count:\n                    newtime.append(newyears[count])\n            count+=1\n        print \"Finished\", str(chunknum), \"chunks\"\n        chunk[\"time\"] = newtime #create new column in dataframe based on time\n        outname = \"CHIRPS_tanz_time2.csv\"\n        #append each output to same csv, using no header\n        chunk.to_csv(pathlist[2]+outname, mode='a', header=None, index=None)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 289393,
                        "reputation": 8451,
                        "user_id": 590335,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://www.gravatar.com/avatar/3a49832e1534f2aa5589a85bdc115caa?s=256&d=identicon&r=PG",
                        "display_name": "Ophir Yoktan",
                        "link": "https://stackoverflow.com/users/590335/ophir-yoktan"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1430198541,
                    "creation_date": 1430198541,
                    "answer_id": 29910919,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One more variation</p>\n\n<p>Many of the operations done in pandas can also be done as a db query (sql, mongo)</p>\n\n<p>Using a RDBMS or mongodb allows you to perform some of the aggregations in the DB Query (which is optimized for large data, and uses cache and indexes efficiently)</p>\n\n<p>Later, you can perform post processing using pandas.</p>\n\n<p>The advantage of this method is that you gain the DB optimizations for working with large data, while still defining the logic in a high level declarative syntax - and not having to deal with the details of deciding what to do in memory and what to do out of core.</p>\n\n<p>And although the query language and pandas are different, it's usually not complicated to translate part of the logic from one to another.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2871409,
                        "reputation": 4643,
                        "user_id": 2464684,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/36aa6139ddbdfed093169c9f6ca98a7b?s=256&d=identicon&r=PG",
                        "display_name": "chishaku",
                        "link": "https://stackoverflow.com/users/2464684/chishaku"
                    },
                    "is_accepted": false,
                    "score": 66,
                    "last_activity_date": 1417644580,
                    "creation_date": 1417644580,
                    "answer_id": 27282644,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I know this is an old thread but I think the <a href=\"https://github.com/ContinuumIO/blaze\">Blaze</a> library is worth checking out.  It's built for these types of situations.</p>\n\n<p><strong>From the docs:</strong></p>\n\n<p>Blaze extends the usability of NumPy and Pandas to distributed and out-of-core computing. Blaze provides an interface similar to that of the NumPy ND-Array or Pandas DataFrame but maps these familiar interfaces onto a variety of other computational engines like Postgres or Spark.</p>\n\n<p><strong>Edit:</strong> By the way, it's supported by ContinuumIO and Travis Oliphant, author of NumPy.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4925053,
                        "reputation": 175,
                        "user_id": 3966500,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c03d64541eb5fa3cffc9e8d9ba3ff9ee?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Golf Monkey",
                        "link": "https://stackoverflow.com/users/3966500/golf-monkey"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1412881636,
                    "creation_date": 1412881636,
                    "answer_id": 26286140,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Consider <a href=\"http://www.ruffus.org.uk/\" rel=\"noreferrer\">Ruffus</a> if you go the simple path of creating a data pipeline which is broken down into multiple smaller files. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1814175,
                        "reputation": 1021,
                        "user_id": 1649635,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/dn299.png?s=256",
                        "display_name": "brian_the_bungler",
                        "link": "https://stackoverflow.com/users/1649635/brian-the-bungler"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1408024241,
                    "last_edit_date": 1408024241,
                    "creation_date": 1357942312,
                    "answer_id": 14287518,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the case for pymongo.  I have also prototyped using sql server, sqlite, HDF, ORM (SQLAlchemy) in python.  First and foremost pymongo is a document based DB, so each person would be a document (<code>dict</code> of attributes).  Many people form a collection and you can have many collections (people, stock market, income).</p>\n\n<p>pd.dateframe -> pymongo Note: I use the <code>chunksize</code> in <code>read_csv</code> to keep it to 5 to 10k records(pymongo drops the socket if larger)</p>\n\n<pre><code>aCollection.insert((a[1].to_dict() for a in df.iterrows()))\n</code></pre>\n\n<p>querying: gt = greater than...</p>\n\n<pre><code>pd.DataFrame(list(mongoCollection.find({'anAttribute':{'$gt':2887000, '$lt':2889000}})))\n</code></pre>\n\n<p><code>.find()</code> returns an iterator so I commonly use <code>ichunked</code> to chop into smaller iterators.  </p>\n\n<p>How about a join since I normally get 10 data sources to paste together:</p>\n\n<pre><code>aJoinDF = pandas.DataFrame(list(mongoCollection.find({'anAttribute':{'$in':Att_Keys}})))\n</code></pre>\n\n<p>then (in my case sometimes I have to agg on <code>aJoinDF</code> first before its \"mergeable\".)</p>\n\n<pre><code>df = pandas.merge(df, aJoinDF, on=aKey, how='left')\n</code></pre>\n\n<p>And you can then write the new info to your main collection via the update method below. (logical collection vs physical datasources).</p>\n\n<pre><code>collection.update({primarykey:foo},{key:change})\n</code></pre>\n\n<p>On smaller lookups, just denormalize.  For example, you have code in the document and you just add the field code text and do a <code>dict</code> lookup as you create documents.</p>\n\n<p>Now you have a nice dataset based around a person, you can unleash your logic on each case and make more attributes. Finally you can read into pandas your 3 to memory max key indicators and do pivots/agg/data exploration.  This works for me for 3 million records with numbers/big text/categories/codes/floats/...</p>\n\n<p>You can also use the two methods built into MongoDB (MapReduce and aggregate framework). <a href=\"http://docs.mongodb.org/manual/tutorial/aggregation-examples/\">See here for more info about the aggregate framework</a>, as it seems to be easier than MapReduce and looks handy for quick aggregate work.  Notice I didn't need to define my fields or relations, and I can add items to a document.  At the current state of the rapidly changing numpy, pandas, python toolset, MongoDB helps me just get to work :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2047611,
                        "reputation": 7022,
                        "user_id": 1827356,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/21f270a4064c6c6721b6649c344f792f?s=256&d=identicon&r=PG",
                        "display_name": "user1827356",
                        "link": "https://stackoverflow.com/users/1827356/user1827356"
                    },
                    "is_accepted": false,
                    "score": 169,
                    "last_activity_date": 1387812087,
                    "last_edit_date": 1387812087,
                    "creation_date": 1387482408,
                    "answer_id": 20690383,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think the answers above are missing a simple approach that I've found very useful. </p>\n\n<p>When I have a file that is too large to load in memory, I break up the file into multiple smaller files (either by row or cols)</p>\n\n<p>Example: In case of 30 days worth of trading data of ~30GB size, I break it into a file per day of ~1GB size. I subsequently process each file separately and aggregate results at the end</p>\n\n<p>One of the biggest advantages is that it allows parallel processing of the files (either multiple threads or processes)</p>\n\n<p>The other advantage is that file manipulation (like adding/removing dates in the example) can be accomplished by regular shell commands, which is not be possible in more advanced/complicated file formats</p>\n\n<p>This approach doesn't cover all scenarios, but is very useful in a lot of them</p>\n"
                },
                {
                    "owner": {
                        "account_id": 91333,
                        "reputation": 2047,
                        "user_id": 250839,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/968afbf6585bc7fe0db62bafd234fb07?s=256&d=identicon&r=PG",
                        "display_name": "Johann Hibschman",
                        "link": "https://stackoverflow.com/users/250839/johann-hibschman"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1363966687,
                    "last_edit_date": 1363966687,
                    "creation_date": 1363900770,
                    "answer_id": 15558350,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I spotted this a little late, but I work with a similar problem (mortgage prepayment models). My solution has been to skip the pandas HDFStore layer and use straight pytables. I save each column as an individual HDF5 array in my final file.</p>\n\n<p>My basic workflow is to first get a CSV file from the database. I gzip it, so it's not as huge. Then I convert that to a row-oriented HDF5 file, by iterating over it in python, converting each row to a real data type, and writing it to a HDF5 file. That takes some tens of minutes, but it doesn't use any memory, since it's only operating row-by-row. Then I \"transpose\" the row-oriented HDF5 file into a column-oriented HDF5 file.</p>\n\n<p>The table transpose looks like:</p>\n\n<pre><code>def transpose_table(h_in, table_path, h_out, group_name=\"data\", group_path=\"/\"):\n    # Get a reference to the input data.\n    tb = h_in.getNode(table_path)\n    # Create the output group to hold the columns.\n    grp = h_out.createGroup(group_path, group_name, filters=tables.Filters(complevel=1))\n    for col_name in tb.colnames:\n        logger.debug(\"Processing %s\", col_name)\n        # Get the data.\n        col_data = tb.col(col_name)\n        # Create the output array.\n        arr = h_out.createCArray(grp,\n                                 col_name,\n                                 tables.Atom.from_dtype(col_data.dtype),\n                                 col_data.shape)\n        # Store the data.\n        arr[:] = col_data\n    h_out.flush()\n</code></pre>\n\n<p>Reading it back in then looks like:</p>\n\n<pre><code>def read_hdf5(hdf5_path, group_path=\"/data\", columns=None):\n    \"\"\"Read a transposed data set from a HDF5 file.\"\"\"\n    if isinstance(hdf5_path, tables.file.File):\n        hf = hdf5_path\n    else:\n        hf = tables.openFile(hdf5_path)\n\n    grp = hf.getNode(group_path)\n    if columns is None:\n        data = [(child.name, child[:]) for child in grp]\n    else:\n        data = [(child.name, child[:]) for child in grp if child.name in columns]\n\n    # Convert any float32 columns to float64 for processing.\n    for i in range(len(data)):\n        name, vec = data[i]\n        if vec.dtype == np.float32:\n            data[i] = (name, vec.astype(np.float64))\n\n    if not isinstance(hdf5_path, tables.file.File):\n        hf.close()\n    return pd.DataFrame.from_items(data)\n</code></pre>\n\n<p>Now, I generally run this on a machine with a ton of memory, so I may not be careful enough with my memory usage. For example, by default the load operation reads the whole data set.</p>\n\n<p>This generally works for me, but it's a bit clunky, and I can't use the fancy pytables magic.</p>\n\n<p>Edit: The real advantage of this approach, over the array-of-records pytables default, is that I can then load the data into R using h5r, which can't handle tables. Or, at least, I've been unable to get it to load heterogeneous tables.</p>\n"
                }
            ]
        },
        {
            "4915361": [
                {
                    "owner": {
                        "account_id": 80066,
                        "reputation": 1886,
                        "user_id": 424554,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/mojyk.jpg?s=256",
                        "display_name": "screenglow",
                        "link": "https://stackoverflow.com/users/424554/screenglow"
                    },
                    "is_accepted": false,
                    "score": 125,
                    "last_activity_date": 1727815620,
                    "last_edit_date": 1727815620,
                    "creation_date": 1362035270,
                    "answer_id": 15129556,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Python 2:</h3>\n<ul>\n<li><p><code>raw_input()</code> takes exactly what the user typed and passes it back as a string.</p>\n</li>\n<li><p><code>input()</code> first takes the <code>raw_input()</code> and then performs an <code>eval()</code> on it as well.</p>\n</li>\n</ul>\n<p>The main difference is that <code>input()</code> expects a syntactically correct python statement where <code>raw_input()</code> does not.</p>\n<h3>Python 3:</h3>\n<ul>\n<li><code>raw_input()</code> was renamed to <code>input()</code> so now <code>input()</code> returns the exact string.</li>\n<li>Old <code>input()</code> was removed.</li>\n</ul>\n<p>If you want to use the old <code>input()</code>, meaning you need to evaluate a user input as a python statement, you have to do it manually by using <code>eval(input())</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2182835,
                        "reputation": 313,
                        "user_id": 9371011,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6ff8901c388adaa7ca9cef2545056072?s=256&d=identicon&r=PG",
                        "display_name": "Josef Klotzner",
                        "link": "https://stackoverflow.com/users/9371011/josef-klotzner"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1648649928,
                    "last_edit_date": 1648649928,
                    "creation_date": 1550246475,
                    "answer_id": 54712937,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If You want to ensure, that your code is running with python2 and python3, add <code>input()</code> function at the beginning of your script:</p>\n<pre><code>from sys import version_info\nif version_info.major == 3:\n    pass\nelif version_info.major == 2:\n    try:\n        input = raw_input\n    except NameError:\n        pass\nelse:\n    print (&quot;Unknown python version - input function not safe&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 455,
                    "last_activity_date": 1586028898,
                    "last_edit_date": 1586028898,
                    "creation_date": 1297018405,
                    "answer_id": 4915366,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The difference is that <code>raw_input()</code> does not exist in Python 3.x, while <code>input()</code> does.  Actually, the old <code>raw_input()</code> has been renamed to <code>input()</code>, and the old <code>input()</code> is gone, but can easily be simulated by using <code>eval(input())</code>.  (Remember that <code>eval()</code> is evil. Try to use safer ways of parsing your input if possible.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6246195,
                        "reputation": 1016,
                        "user_id": 4858016,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hf8Zy.jpg?s=256",
                        "display_name": "Rubal",
                        "link": "https://stackoverflow.com/users/4858016/rubal"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1484304808,
                    "last_edit_date": 1484304808,
                    "creation_date": 1434401575,
                    "answer_id": 30854786,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd like to add a little more detail to the explanation provided by everyone for the <strong>python 2 users</strong>. <code>raw_input()</code>, which, by now, you know that evaluates what ever data the user enters as a string. This means that python doesn't try to even understand the entered data again. All it will consider is that the entered data will be string, whether or not it is an actual string or int or anything. </p>\n\n<p>While <code>input()</code> on the other hand tries to understand the data entered by the user. So the input like <code>helloworld</code> would even show the error as '<code>helloworld is undefined</code>'. </p>\n\n<p>In conclusion, for <strong>python 2</strong>, to enter a string too you need to enter it like '<code>helloworld</code>' which is the common structure used in python to use strings. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 5462927,
                        "reputation": 910,
                        "user_id": 4344438,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/WxImb.png?s=256",
                        "display_name": "hackwithharsha",
                        "link": "https://stackoverflow.com/users/4344438/hackwithharsha"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1468443213,
                    "last_edit_date": 1468443213,
                    "creation_date": 1451491305,
                    "answer_id": 34532864,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python 3, <code>raw_input()</code> doesn't exist which was already mentioned by Sven.</p>\n\n<p>In Python 2, the <code>input()</code> function evaluates your input.</p>\n\n<p><strong>Example:</strong> </p>\n\n<pre><code>name = input(\"what is your name ?\")\nwhat is your name ?harsha\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#0&gt;\", line 1, in &lt;module&gt;\n    name = input(\"what is your name ?\")\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'harsha' is not defined\n</code></pre>\n\n<p>In the example above, Python 2.x is trying to evaluate harsha as a variable rather than a string. To avoid that, we can use double quotes around our input like \"harsha\":</p>\n\n<pre><code>&gt;&gt;&gt; name = input(\"what is your name?\")\nwhat is your name?\"harsha\"\n&gt;&gt;&gt; print(name)\nharsha\n</code></pre>\n\n<p><strong>raw_input()</strong></p>\n\n<p>The raw_input()` function doesn't evaluate, it will just read whatever you enter.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>name = raw_input(\"what is your name ?\")\nwhat is your name ?harsha\n&gt;&gt;&gt; name\n'harsha'\n</code></pre>\n\n<p><strong>Example:</strong> </p>\n\n<pre><code> name = eval(raw_input(\"what is your name?\"))\nwhat is your name?harsha\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n    name = eval(raw_input(\"what is your name?\"))\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'harsha' is not defined\n</code></pre>\n\n<p>In example above, I was just trying to evaluate the user input with the <code>eval</code> function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 192844,
                        "reputation": 40230,
                        "user_id": 434217,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/7f1ae3f14fd5b87c2c3f7b36014e185c?s=256&d=identicon&r=PG",
                        "display_name": "Thomas K",
                        "link": "https://stackoverflow.com/users/434217/thomas-k"
                    },
                    "is_accepted": false,
                    "score": 200,
                    "last_activity_date": 1297018903,
                    "creation_date": 1297018903,
                    "answer_id": 4915408,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In Python <strong>2</strong>, <code>raw_input()</code> returns a string, and <code>input()</code> tries to run the input as a Python expression.</p>\n\n<p>Since getting a string was almost always what you wanted, Python 3 does that with <code>input()</code>. As Sven says, if you ever want the old behaviour, <code>eval(input())</code> works.</p>\n"
                }
            ]
        },
        {
            "1319074": [
                {
                    "owner": {
                        "account_id": 54037,
                        "reputation": 973,
                        "user_id": 161638,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/4418153834524b6f40eb24b5dc3f9d8f?s=256&d=identicon&r=PG",
                        "display_name": "marsolk",
                        "link": "https://stackoverflow.com/users/161638/marsolk"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1672972673,
                    "last_edit_date": 1672972673,
                    "creation_date": 1251049367,
                    "answer_id": 1319110,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A callback is simply a function. In Python, functions are just more objects, and so the name of a function can be used as a variable, like so:</p>\n<pre><code>def func():\n    ...\n\nsomething(func)\n</code></pre>\n<p>Note that many functions which accept a callback as an argument usually require that the callback accept certain arguments. In this case, the callback function will need to accept a list of arguments specified in callbackargs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24159,
                        "reputation": 40316,
                        "user_id": 61289,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e34b5cae57e0dd170114dba444e37852?s=256&d=identicon&r=PG",
                        "display_name": "Logan Capaldo",
                        "link": "https://stackoverflow.com/users/61289/logan-capaldo"
                    },
                    "is_accepted": true,
                    "score": 255,
                    "last_activity_date": 1672972635,
                    "last_edit_date": 1672972635,
                    "creation_date": 1251049973,
                    "answer_id": 1319135,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A callback is a function provided by the consumer of an API that the API can then turn around and invoke (calling you back). If I setup a Dr.'s appointment, I can give them my phone number, so they can call me the day before to confirm the appointment. A callback is like that, except instead of just being a phone number, it can be arbitrary instructions like &quot;send me an email at this address, and also call my secretary and have her put it in my calendar.</p>\n<p>Callbacks are often used in situations where an action is asynchronous. If you need to call a function, and immediately continue working, you can't sit there wait for its return value to let you know what happened, so you provide a callback. When the function is done completely its asynchronous work it will then invoke your callback with some predetermined arguments (usually some you supply, and some about the status and result of the asynchronous action you requested).</p>\n<p>If the Dr. is out of the office, or they are still working on the schedule, rather than having me wait on hold until he gets back, which could be several hours, we hang up, and once the appointment has been scheduled, they call me.</p>\n<p>In this specific case, the documented method will compute the <code>result</code>, put it together with any <code>callbackargs</code> specified, and call <code>callback</code>, passing it those values as the arguments.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1672971704,
                    "last_edit_date": 1672971704,
                    "creation_date": 1251049355,
                    "answer_id": 1319108,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want some code to be executed as soon as the result is ready, put that code into a function and pass it as the <code>callback</code> argument. For example, supposing no other arguments are needed for that function:</p>\n<pre><code>def itsdone(result):\n    print(f&quot;Done! result={result}&quot;)\n...\nsubmit(..., callback=itsdone)\n</code></pre>\n<p>For more on how this works in Python, see e.g. <a href=\"http://www.listal.com/video/8878369\" rel=\"nofollow noreferrer\">my presentation</a> on the topic.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 36470,
                        "reputation": 28378,
                        "user_id": 104040,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/60f28d36c1439f965e2fb55419621968?s=256&d=identicon&r=PG",
                        "display_name": "Aiden Bell",
                        "link": "https://stackoverflow.com/users/104040/aiden-bell"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1251049646,
                    "last_edit_date": 1251049646,
                    "creation_date": 1251049295,
                    "answer_id": 1319104,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Looking at the link, just looks like a hook which is called.</p>\n\n<blockquote>\n  <p>callback - callback function which\n  will be called with argument \n          list equal to callbackargs+(result,) \n          as soon as calculation is done</p>\n</blockquote>\n\n<p>The \"as soon as calculation is done\" bit seems ambiguous. The point, as far as I can see of this thing is that the <code>submit()</code> call distributes work to other servers and then returns. Because the finishing is asynchronous, rather block, it allows you to provide a function which is called when some unit of work finishes. If you do:</p>\n\n<pre><code>submit( ..., callback=work_finished, ... )\n</code></pre>\n\n<p>Then submit will ensure <code>work_finished()</code> is called when the unit of distributed work is completed on the target server.</p>\n\n<p>When you call <code>submit()</code> you can provide a <strong>callback</strong> which is called in the same runtime as the caller of <code>submit()</code> ... and it is called after the distribution of the workload function is complete.</p>\n\n<p>Kind of like \"call foo(x,y) when you have done some stuff in submit()\"</p>\n\n<p>But yea, the documentation could be better. Have a ganders at the ppython source and see at which point the callback is called in <code>submit()</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 41913,
                        "reputation": 23473,
                        "user_id": 121971,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/18d21cf45fa95eb028bf94573fa127be?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy Smyth",
                        "link": "https://stackoverflow.com/users/121971/jeremy-smyth"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1251049449,
                    "creation_date": 1251049449,
                    "answer_id": 1319118,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A <a href=\"http://en.wikipedia.org/wiki/Callback_function\" rel=\"nofollow noreferrer\">callback</a> is a function you define that's later called by a function you call.</p>\n\n<p>As an example, consider how AJAX works: you write code that calls a back-end server function. At some point in the future, it returns from that function (the \"A\" stands for Asynchronous, which is what the \"Parallel\" in \"Parallel Python\" is all about). Now - because your code calls the code on the server, you want it to tell you when it's done, and you want to do something with its results. It does so by calling your <em>callback function</em>.</p>\n\n<p>When the called function completes, the standard way for it to tell you it's done is for you to tell it to call a function in your code. That's the callback function, and its job is to handle the results/output from the lower-level function you've called.</p>\n"
                }
            ]
        },
        {
            "10625190": [
                {
                    "owner": {
                        "account_id": 9096548,
                        "reputation": 171,
                        "user_id": 6770328,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/374310df1f743adf1389e43a3c759dd0?s=256&d=identicon&r=PG",
                        "display_name": "Steve",
                        "link": "https://stackoverflow.com/users/6770328/steve"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1546379404,
                    "last_edit_date": 1546379404,
                    "creation_date": 1472476052,
                    "answer_id": 39207112,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Documentation is horrible for PyGitHub, but the product is great.  Here is a quick sample for actually retrieving a file, changing it with a new comment at the beginning of the file and committing it back</p>\n\n<pre><code>from github import Github\ngh = Github(login_or_token='.....', base_url='...../api/v3')\nuser = gh.get_user()\nrepo = user.get_repo(\"RepoName\")\nfile = repo.get_file_contents(\"/App/forms.py\")\ndecoded_content = \"# Test \" + \"\\r\\n\" + file.decoded_content\nrepo.update_file(\"/\"RepoName\"/forms.py\", \"Commit Comments\", decoded_content, file.sha)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 295462,
                        "reputation": 5602,
                        "user_id": 599884,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/2aed663a62fa8bf9f7aebe603d3998bb?s=256&d=identicon&r=PG",
                        "display_name": "Christoph",
                        "link": "https://stackoverflow.com/users/599884/christoph"
                    },
                    "is_accepted": true,
                    "score": 37,
                    "last_activity_date": 1436472987,
                    "last_edit_date": 1436472987,
                    "creation_date": 1389608138,
                    "answer_id": 21088708,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In the end, I ended up using <a href=\"https://github.com/jacquev6/PyGithub\">PyGithub</a>. It works well, and the author is really receptive for feedback and bug reports. :-)</p>\n\n<p><em>(Adapted from my edit to the original question, for better visibility)</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 23634,
                        "reputation": 10167,
                        "user_id": 59352,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/f33c37d52c56856f4c91344d7471eee0?s=256&d=identicon&r=PG",
                        "display_name": "Lycha",
                        "link": "https://stackoverflow.com/users/59352/lycha"
                    },
                    "is_accepted": false,
                    "score": 82,
                    "last_activity_date": 1364532438,
                    "last_edit_date": 1364532438,
                    "creation_date": 1337200634,
                    "answer_id": 10626326,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Since you mentioned you are a beginner python programmer, I would suggest you to try to use the JSON API without any Github library first. It really isn't that difficult and it will help you a lot later in your programming life since same approach can be applied to any JSON API. Especially if it seems that trying out libraries will take days. </p>\n\n<p>I'm not saying that some library isn't easier to use, I'm just saying the small extra effort to use the API directly might be worth it in the long run. At least it will help you understand why some of those libraries seem \"unintuitive\" (as you said).</p>\n\n<p>Simple example to fetch creation time of django repository:</p>\n\n<pre><code>import requests\nimport json\nr = requests.get('https://api.github.com/repos/django/django')\nif(r.ok):\n    repoItem = json.loads(r.text or r.content)\n    print \"Django repository created: \" + repoItem['created_at']\n</code></pre>\n\n<p>This is using the popular <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\">requests library</a>. In your code you'll naturally need to handle the error cases too.</p>\n\n<p>If you need access with authentication it will be a bit more complex.</p>\n"
                }
            ]
        },
        {
            "13279399": [
                {
                    "owner": {
                        "account_id": 51517,
                        "reputation": 4322,
                        "user_id": 153945,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/9a4d93b712845f64e06f64bdfc5c78f9?s=256&d=identicon&r=PG",
                        "display_name": "Jason",
                        "link": "https://stackoverflow.com/users/153945/jason"
                    },
                    "is_accepted": false,
                    "score": 187,
                    "last_activity_date": 1584281185,
                    "last_edit_date": 1584281185,
                    "creation_date": 1386034801,
                    "answer_id": 20341272,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want to retrieve POST data:</p>\n\n<pre><code>first_name = request.form.get(\"firstname\")\n</code></pre>\n\n<p>If you want to retrieve GET (query string) data:</p>\n\n<pre><code>first_name = request.args.get(\"firstname\")\n</code></pre>\n\n<p>Or if you don't care/know whether the value is in the query string or in the post data:</p>\n\n<pre><code>first_name = request.values.get(\"firstname\") \n</code></pre>\n\n<p><strong>request.values</strong> is a <strong>CombinedMultiDict</strong> that combines Dicts from <strong>request.form</strong> and <strong>request.args</strong>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2021454,
                        "reputation": 859,
                        "user_id": 1807534,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/194a5ce0ed6dc95ecf89d793c785ba4e?s=256&d=identicon&r=PG",
                        "display_name": "user1807534",
                        "link": "https://stackoverflow.com/users/1807534/user1807534"
                    },
                    "is_accepted": true,
                    "score": 81,
                    "last_activity_date": 1486109155,
                    "last_edit_date": 1486109155,
                    "creation_date": 1352328274,
                    "answer_id": 13279573,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can get posted form data from <code>request.form</code> and query string data from <code>request.args</code>.</p>\n\n<pre><code>myvar =  request.form[\"myvar\"]\n</code></pre>\n\n\n\n<pre><code>myvar = request.args[\"myvar\"]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5796689,
                        "reputation": 4572,
                        "user_id": 4572274,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/420310811459015/picture?type=large",
                        "display_name": "yardstick17",
                        "link": "https://stackoverflow.com/users/4572274/yardstick17"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1485710492,
                    "creation_date": 1485710492,
                    "answer_id": 41923758,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Adding more to Jason's more generalized way of retrieving the POST data or GET data</p>\n\n<pre><code>from flask_restful import reqparse\n\ndef parse_arg_from_requests(arg, **kwargs):\n    parse = reqparse.RequestParser()\n    parse.add_argument(arg, **kwargs)\n    args = parse.parse_args()\n    return args[arg]\n\nform_field_value = parse_arg_from_requests('FormFieldValue')\n</code></pre>\n"
                }
            ]
        },
        {
            "19210414": [
                {
                    "owner": {
                        "account_id": 269349,
                        "reputation": 35041,
                        "user_id": 558639,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/3f4a1073df397d894cf3ae596988b687?s=256&d=identicon&r=PG",
                        "display_name": "fearless_fool",
                        "link": "https://stackoverflow.com/users/558639/fearless-fool"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1709048623,
                    "creation_date": 1709048623,
                    "answer_id": 78068795,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>For Python 3.6 and later: use f-strings</h2>\n<p>Python 3.6 and beyond supports f-strings (aka &quot;formatted string literals&quot;) like this:</p>\n<pre><code>array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print(' '.join(f'{x:02x}' for x in array_alpha))\n85 35 ea f1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2354997,
                        "reputation": 19774,
                        "user_id": 2063031,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f2677db7242bfbcead46fbf27390160d?s=256&d=identicon&r=PG",
                        "display_name": "ostrokach",
                        "link": "https://stackoverflow.com/users/2063031/ostrokach"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1536256528,
                    "last_edit_date": 1536256528,
                    "creation_date": 1482024385,
                    "answer_id": 41204684,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have a numpy array, you can do the following:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.array([133, 53, 234, 241])\n&gt;&gt;&gt; a.astype(np.uint8).data.hex()\n'8535eaf1'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75297,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "score": 76,
                    "last_activity_date": 1525600721,
                    "last_edit_date": 1525600721,
                    "creation_date": 1511349845,
                    "answer_id": 47433471,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Consider the <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.hex\" rel=\"noreferrer\">hex() method</a> of the <code>bytes</code> type on Python 3.5 and up:</p>\n\n<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print(bytes(array_alpha).hex())\n8535eaf1\n</code></pre>\n\n<p>EDIT: it's also much faster than <code>hexlify</code> (modified @falsetru's benchmarks above)</p>\n\n<pre><code>from timeit import timeit\nN = 10000\nprint(\"bytearray + hexlify -&gt;\", timeit(\n    'binascii.hexlify(data).decode(\"ascii\")',\n    setup='import binascii; data = bytearray(range(255))',\n    number=N,\n))\nprint(\"byte + hex          -&gt;\", timeit(\n    'data.hex()',\n    setup='data = bytes(range(255))',\n    number=N,\n))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>bytearray + hexlify -&gt; 0.011218150997592602\nbyte + hex          -&gt; 0.005952142993919551\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 176857,
                        "reputation": 368116,
                        "user_id": 2225682,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=256&d=identicon&r=PG",
                        "display_name": "falsetru",
                        "link": "https://stackoverflow.com/users/2225682/falsetru"
                    },
                    "is_accepted": true,
                    "score": 174,
                    "last_activity_date": 1509949844,
                    "last_edit_date": 1509949844,
                    "creation_date": 1381073088,
                    "answer_id": 19210442,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using <a href=\"http://docs.python.org/2/library/stdtypes#str.format\" rel=\"noreferrer\"><code>str.format</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print ''.join('{:02x}'.format(x) for x in array_alpha)\n8535eaf1\n</code></pre>\n\n<p>or using <a href=\"http://docs.python.org/2/library/functions.html#format\" rel=\"noreferrer\"><code>format</code></a></p>\n\n<pre><code>&gt;&gt;&gt; print ''.join(format(x, '02x') for x in array_alpha)\n8535eaf1\n</code></pre>\n\n<blockquote>\n  <p><em>Note:</em> In the format statements, the <code>02</code> means it will pad with up to 2 leading <code>0</code>s if necessary. This is important since <code>[0x1, 0x1, 0x1] i.e. (0x010101)</code> would be formatted to <code>\"111\"</code> instead of <code>\"010101\"</code> </p>\n</blockquote>\n\n<p>or using <a href=\"http://docs.python.org/2/library/functions.html#bytearray\" rel=\"noreferrer\"><code>bytearray</code></a> with <a href=\"http://docs.python.org/2/library/binascii.html#binascii.hexlify\" rel=\"noreferrer\"><code>binascii.hexlify</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import binascii\n&gt;&gt;&gt; binascii.hexlify(bytearray(array_alpha))\n'8535eaf1'\n</code></pre>\n\n<hr>\n\n<p>Here is a benchmark of above methods in Python 3.6.1:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>from timeit import timeit\nimport binascii\n\nnumber = 10000\n\ndef using_str_format() -&gt; str:\n    return \"\".join(\"{:02x}\".format(x) for x in test_obj)\n\ndef using_format() -&gt; str:\n    return \"\".join(format(x, \"02x\") for x in test_obj)\n\ndef using_hexlify() -&gt; str:\n    return binascii.hexlify(bytearray(test_obj)).decode('ascii')\n\ndef do_test():\n    print(\"Testing with {}-byte {}:\".format(len(test_obj), test_obj.__class__.__name__))\n    if using_str_format() != using_format() != using_hexlify():\n        raise RuntimeError(\"Results are not the same\")\n\n    print(\"Using str.format       -&gt; \" + str(timeit(using_str_format, number=number)))\n    print(\"Using format           -&gt; \" + str(timeit(using_format, number=number)))\n    print(\"Using binascii.hexlify -&gt; \" + str(timeit(using_hexlify, number=number)))\n\ntest_obj = bytes([i for i in range(255)])\ndo_test()\n\ntest_obj = bytearray([i for i in range(255)])\ndo_test()\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Testing with 255-byte bytes:\nUsing str.format       -&gt; 1.459474583090427\nUsing format           -&gt; 1.5809937679100738\nUsing binascii.hexlify -&gt; 0.014521426401399307\nTesting with 255-byte bytearray:\nUsing str.format       -&gt; 1.443447684109402\nUsing format           -&gt; 1.5608712609513171\nUsing binascii.hexlify -&gt; 0.014114164661833684\n</code></pre>\n\n<p>Methods using <code>format</code> do provide additional formatting options, as example separating numbers with spaces <code>\" \".join</code>, commas <code>\", \".join</code>, upper-case printing <code>\"{:02X}\".format(x)</code>/<code>format(x, \"02X\")</code>, etc., but at a cost of great performance impact.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1381073283,
                    "creation_date": 1381073283,
                    "answer_id": 19210484,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Or, if you are a fan of functional programming:</p>\n\n<pre><code>&gt;&gt;&gt; a = [133, 53, 234, 241]\n&gt;&gt;&gt; \"\".join(map(lambda b: format(b, \"02x\"), a))\n8535eaf1\n&gt;&gt;&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1381073227,
                    "creation_date": 1381073227,
                    "answer_id": 19210468,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>hex_string = \"\".join(\"%02x\" % b for b in array_alpha)\n</code></pre>\n"
                }
            ]
        },
        {
            "31359150": [
                {
                    "owner": {
                        "account_id": 231545,
                        "reputation": 4358,
                        "user_id": 495838,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/1375590dbfa97eeb58785314836ed3ab?s=256&d=identicon&r=PG",
                        "display_name": "saeedgnu",
                        "link": "https://stackoverflow.com/users/495838/saeedgnu"
                    },
                    "is_accepted": true,
                    "score": 60,
                    "last_activity_date": 1626249392,
                    "last_edit_date": 1626249392,
                    "creation_date": 1436632107,
                    "answer_id": 31359287,
                    "question_id": 31359150,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from datetime import datetime\nexcel_date = 42139\ndt = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + excel_date - 2)\ntt = dt.timetuple()\nprint(dt)\nprint(tt)\n</code></pre>\n<p>As mentioned by J.F. Sebastian, this answer only works for any date after 1900/03/01</p>\n<p>EDIT: (in answer to @R.K)</p>\n<p>If your <code>excel_date</code> is a float number, use this code:</p>\n<pre><code>from datetime import datetime\n\ndef floatHourToTime(fh):\n    hours, hourSeconds = divmod(fh, 1)\n    minutes, seconds = divmod(hourSeconds * 60, 1)\n    return (\n        int(hours),\n        int(minutes),\n        int(seconds * 60),\n    )\n\nexcel_date = 42139.23213\ndt = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(excel_date) - 2)\nhour, minute, second = floatHourToTime(excel_date % 1)\ndt = dt.replace(hour=hour, minute=minute, second=second)\n\nprint(dt)\nassert str(dt) == &quot;2015-05-15 00:13:55&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6605994,
                        "reputation": 471,
                        "user_id": 5102804,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1438e5604b2ad1d288214e4d57641dca?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "zverianskii",
                        "link": "https://stackoverflow.com/users/5102804/zverianskii"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1574674327,
                    "last_edit_date": 1574674327,
                    "creation_date": 1436631654,
                    "answer_id": 31359209,
                    "question_id": 31359150,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The module <code>xlrd</code> provides a function <a href=\"http://www.lexicon.net/sjmachin/xlrd.html#xlrd.xldate%5Fas%5Ftuple-function\" rel=\"noreferrer\"><code>xldate_as_tuple</code></a> to convert Excel's numerical date format to a tuple <code>(year, month, day, hour, minute, nearest_second)</code>.</p>\n\n<p>You can then use <a href=\"https://docs.python.org/3.7/library/datetime.html\" rel=\"noreferrer\"><code>datetime.datetime</code></a> to convert the tuple into a <code>datetime</code>-object.</p>\n\n<pre><code>from datetime import datetime\nimport xlrd\n\nexcel_date = 44032\npython_date = datetime(*xlrd.xldate_as_tuple(excel_date, 0))\n</code></pre>\n"
                }
            ]
        },
        {
            "3965104": [
                {
                    "owner": {
                        "account_id": 17166,
                        "reputation": 39899,
                        "user_id": 38140,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/0b5c9699fa348a28c4accd81ebce0a91?s=256&d=identicon&r=PG",
                        "display_name": "gotgenes",
                        "link": "https://stackoverflow.com/users/38140/gotgenes"
                    },
                    "is_accepted": true,
                    "score": 1348,
                    "last_activity_date": 1711120673,
                    "last_edit_date": 1711120673,
                    "creation_date": 1287458671,
                    "answer_id": 3965129,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>if val is not None:\n    # ...\n</code></pre>\n<p>is the Pythonic idiom for testing that a variable is not set to <code>None</code>. This idiom has particular uses in the case of <a href=\"https://web.archive.org/web/20201002220217/http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">declaring keyword functions with default parameters</a>. <code>is</code> tests identity in Python. Because there is one and only one instance of <code>None</code> present in a running Python script/program, <code>is</code> is the optimal test for this. As <a href=\"https://stackoverflow.com/questions/3965104/not-none-test-in-python/3965165#3965165\">Johnsyweb points out</a>, this is discussed in <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a> under &quot;Programming Recommendations&quot;.</p>\n<p>As for why this is preferred to</p>\n<pre><code>if not (val is None):\n    # ...\n</code></pre>\n<p>this is simply part of the <a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"noreferrer\">Zen of Python</a>: &quot;Readability counts.&quot; Good Python is often close to good <a href=\"http://en.wikipedia.org/wiki/Pseudocode\" rel=\"noreferrer\">pseudocode</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1729199,
                        "reputation": 22865,
                        "user_id": 1583175,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/ce34927681daa5192859fb8485f92b26?s=256&d=identicon&r=PG",
                        "display_name": "SheetJS",
                        "link": "https://stackoverflow.com/users/1583175/sheetjs"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1604049444,
                    "last_edit_date": 1604049444,
                    "creation_date": 1382298240,
                    "answer_id": 19481996,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The best bet with these types of questions is to see exactly what python does. The <a href=\"https://docs.python.org/3/library/dis.html\" rel=\"noreferrer\"><code>dis</code></a> module is incredibly informative:</p>\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(&quot;val != None&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               3 (!=)\n              6 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(&quot;not (val is None)&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(&quot;val is not None&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n</code></pre>\n<p>Notice that the last two cases reduce to the same sequence of operations, Python reads <code>not (val is None)</code> and uses the <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\" rel=\"noreferrer\"><code>is not</code> operator</a>. The first uses the <a href=\"https://docs.python.org/3/reference/expressions.html#value-comparisons\" rel=\"noreferrer\"><code>!=</code> operator</a> when comparing with <code>None</code>.</p>\n<p>As pointed out by other answers, using <code>!=</code> when comparing with <code>None</code> is a bad idea.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 29240,
                        "reputation": 141420,
                        "user_id": 78845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7jZ4g.png?s=256",
                        "display_name": "johnsyweb",
                        "link": "https://stackoverflow.com/users/78845/johnsyweb"
                    },
                    "is_accepted": false,
                    "score": 149,
                    "last_activity_date": 1575937355,
                    "last_edit_date": 1592644375,
                    "creation_date": 1287459336,
                    "answer_id": 3965165,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From, Programming Recommendations, <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a>:</p>\n<blockquote>\n<p>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</p>\n<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> \u2014 e.g. when testing whether a variable or argument that defaults to None was set to some other value.  The other value might have a type (such as a container) that could be false in a boolean context!</p>\n</blockquote>\n<p>PEP 8 is essential reading for any Python programmer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1287458614,
                    "creation_date": 1287458614,
                    "answer_id": 3965123,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Either of the latter two, since <code>val</code> could potentially be of a type that defines <code>__eq__()</code> to return true when passed <code>None</code>.</p>\n"
                }
            ]
        },
        {
            "22511792": [
                {
                    "owner": {
                        "account_id": 1482076,
                        "reputation": 5048,
                        "user_id": 1391220,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1cd45d5f04e20582a5a0892dc7b8b227?s=256&d=identicon&r=PG",
                        "display_name": "Sudeep Juvekar",
                        "link": "https://stackoverflow.com/users/1391220/sudeep-juvekar"
                    },
                    "is_accepted": true,
                    "score": 155,
                    "last_activity_date": 1660977358,
                    "last_edit_date": 1660977358,
                    "creation_date": 1395245622,
                    "answer_id": 22511861,
                    "question_id": 22511792,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>.</code> is a shortcut that tells it to search in the <em>current</em> package before the rest of the <code>PYTHONPATH</code>. So, if a same-named module <code>Recipe</code> exists somewhere else in your <code>PYTHONPATH</code>, it won't be loaded.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1565215,
                        "reputation": 9209,
                        "user_id": 1454176,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/O9qna.png?s=256",
                        "display_name": "Zulu",
                        "link": "https://stackoverflow.com/users/1454176/zulu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1395247043,
                    "creation_date": 1395247043,
                    "answer_id": 22512458,
                    "question_id": 22511792,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In addition of Sudeep Juvekar, this question is also related to <code>manage.py</code>'s behavior.</p>\n\n<p>In <a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/\" rel=\"nofollow\">django-admin.py and manage.py</a>:<br></p>\n\n<blockquote>\n  <p>It puts your project\u2019s package on <code>sys.path</code>.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "5628084": [
                {
                    "owner": {
                        "account_id": 92584,
                        "reputation": 38252,
                        "user_id": 253686,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://www.gravatar.com/avatar/9515ab087a2ca71270e6844366f6e689?s=256&d=identicon&r=PG",
                        "display_name": "bradley.ayers",
                        "link": "https://stackoverflow.com/users/253686/bradley-ayers"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1302559867,
                    "creation_date": 1302559867,
                    "answer_id": 5628155,
                    "question_id": 5628084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the built-in <a href=\"http://docs.python.org/library/functions.html#issubclass\" rel=\"noreferrer\"><code>issubclass</code></a> function. e.g.</p>\n\n<pre><code>issubclass(QuizForm, forms.Form)\n</code></pre>\n\n<p>It returns a <code>bool</code> so you can use it directly in <code>self.assertTrue()</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 65732,
                        "reputation": 16216,
                        "user_id": 193256,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/296603ec83f6b1f1a0e1c170bf42846e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "pajton",
                        "link": "https://stackoverflow.com/users/193256/pajton"
                    },
                    "is_accepted": true,
                    "score": 164,
                    "last_activity_date": 1302559757,
                    "creation_date": 1302559757,
                    "answer_id": 5628127,
                    "question_id": 5628084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/library/functions.html#issubclass\" rel=\"noreferrer\">issubclass(myclass, parentclass)</a>.</p>\n\n<p>In your case:</p>\n\n<pre><code>self.assertTrue( issubclass(QuizForm, forms.Form) )\n</code></pre>\n"
                }
            ]
        },
        {
            "7545015": [
                {
                    "owner": {
                        "account_id": 55665,
                        "reputation": 362889,
                        "user_id": 166749,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/f5a1ea24626d10a87d73d47998dc8816?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fred Foo",
                        "link": "https://stackoverflow.com/users/166749/fred-foo"
                    },
                    "is_accepted": true,
                    "score": 36,
                    "last_activity_date": 1334659291,
                    "last_edit_date": 1334659291,
                    "creation_date": 1316947566,
                    "answer_id": 7545025,
                    "question_id": 7545015,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's because <code>.1</code> cannot be represented exactly in a binary floating point representation. If you try</p>\n\n<pre><code>&gt;&gt;&gt; .1\n</code></pre>\n\n<p>Python will respond with <code>.1</code> because it only prints up to a certain precision, but there's already a small round-off error. The same happens with <code>.3</code>, but when you issue</p>\n\n<pre><code>&gt;&gt;&gt; .2 + .1\n0.30000000000000004\n</code></pre>\n\n<p>then the round-off errors in <code>.2</code> and <code>.1</code> accumulate. Also note:</p>\n\n<pre><code>&gt;&gt;&gt; .2 + .1 == .3\nFalse\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 237126,
                        "reputation": 611778,
                        "user_id": 505088,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/LwXPj.png?s=256",
                        "display_name": "David Heffernan",
                        "link": "https://stackoverflow.com/users/505088/david-heffernan"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1316947672,
                    "creation_date": 1316947672,
                    "answer_id": 7545038,
                    "question_id": 7545015,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Not all floating point numbers are exactly representable on a finite machine. Neither 0.1 nor 0.2 are exactly representable in binary floating point. And nor is 0.3.</p>\n\n<p>A number is exactly representable if it is of the form a/b where a and b are an integers and b  is a power of 2. Obviously, the data type needs to have a large enough significand to store the number also.</p>\n\n<p>I recommend <a href=\"http://pages.cs.wisc.edu/~rkennedy/exact-float\" rel=\"noreferrer\">Rob Kennedy's useful webpage</a> as a nice tool to explore representability.</p>\n"
                }
            ]
        },
        {
            "11788472": [
                {
                    "owner": {
                        "account_id": 1448254,
                        "reputation": 28966,
                        "user_id": 1366033,
                        "user_type": "moderator",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/8c68413a839369d73dc9e9013faa0637?s=256&d=identicon&r=PG",
                        "display_name": "KyleMit",
                        "link": "https://stackoverflow.com/users/1366033/kylemit"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1671214080,
                    "creation_date": 1671214080,
                    "answer_id": 74828259,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <a href=\"https://docs.python.org/3/library/string.html#template-strings\" rel=\"nofollow noreferrer\"><strong>Template Strings</strong></a> like this:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from string import Template\ns = Template('$who likes $what')\ns.substitute(who='tim', what='kung pao')\n# 'tim likes kung pao'\n</code></pre>\n<p>This works really well for when you want to build the string template ahead of time and inject the variable elsewhere</p>\n<p><strong>See Also</strong>: <a href=\"https://peps.python.org/pep-0292/\" rel=\"nofollow noreferrer\">PEP 292 \u2013 Simpler String Substitutions</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 46065,
                        "reputation": 159587,
                        "user_id": 135978,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8931e023c82f232d4d02a115710fb8fc?s=256&d=identicon&r=PG",
                        "display_name": "Sean Vieira",
                        "link": "https://stackoverflow.com/users/135978/sean-vieira"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1536367621,
                    "last_edit_date": 1536367621,
                    "creation_date": 1343961668,
                    "answer_id": 11788514,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3.6+ does have variable interpolation - prepend an <code>f</code> to your string:</p>\n\n<pre><code>f\"foo is {bar}\"\n</code></pre>\n\n<p>For versions of Python below this (Python 2 - 3.5) you can use <code>str.format</code> to pass in variables:</p>\n\n<pre><code># Rather than this:\nprint(\"foo is #{bar}\")\n\n# You would do this:\nprint(\"foo is {}\".format(bar))\n\n# Or this:\nprint(\"foo is {bar}\".format(bar=bar))\n\n# Or this:\nprint(\"foo is %s\" % (bar, ))\n\n# Or even this:\nprint(\"foo is %(bar)s\" % {\"bar\": bar})\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 172611,
                        "reputation": 9834,
                        "user_id": 400745,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://i.sstatic.net/g5mCguIz.png?s=256",
                        "display_name": "valk",
                        "link": "https://stackoverflow.com/users/400745/valk"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1532801538,
                    "creation_date": 1532801538,
                    "answer_id": 51573980,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Almost every other answer didn't work for me. Probably it's because I'm on Python3.5. The only thing which worked is:</p>\n\n<pre><code> print(\"Foobar is %s%s\" %('Foo','bar',))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 90162,
                        "reputation": 59454,
                        "user_id": 248296,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/ec020fe58f82e5b8e72544ee7108a825?s=256&d=identicon&r=PG",
                        "display_name": "warvariuc",
                        "link": "https://stackoverflow.com/users/248296/warvariuc"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1506079788,
                    "last_edit_date": 1506079788,
                    "creation_date": 1395390328,
                    "answer_id": 22553645,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python 3.6 has <a href=\"https://www.python.org/dev/peps/pep-0498/#no-use-of-globals-or-locals\" rel=\"noreferrer\">introduced f-strings</a>:</p>\n\n<pre><code>print(f\"foo is {bar}.\")\n</code></pre>\n\n<hr>\n\n<p>Old answer:</p>\n\n<p>Since version 3.2 Python has <a href=\"http://docs.python.org/3/library/stdtypes.html#str.format_map\" rel=\"noreferrer\"><code>str.format_map</code></a> which together with <a href=\"http://docs.python.org/3/library/functions.html#locals\" rel=\"noreferrer\"><code>locals()</code></a> or <a href=\"http://docs.python.org/3/library/functions.html#globals\" rel=\"noreferrer\"><code>globals()</code></a> allows you to do fast:</p>\n\n<pre><code>Python 3.3.2+ (default, Feb 28 2014, 00:52:16) \n&gt;&gt;&gt; bar = \"something\"\n&gt;&gt;&gt; print(\"foo is {bar}\".format_map(locals()))\nfoo is something\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3204464,
                        "reputation": 8987,
                        "user_id": 2705757,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/WecIP.png?s=256",
                        "display_name": "AXO",
                        "link": "https://stackoverflow.com/users/2705757/axo"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1487421065,
                    "last_edit_date": 1487421065,
                    "creation_date": 1463222228,
                    "answer_id": 37225576,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python 3.6 <del>will have</del> has <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"noreferrer\">literal string interpolation</a> using <em>f-strings</em>:</p>\n\n<pre><code>print(f\"foo is {bar}.\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 303989,
                        "reputation": 4852,
                        "user_id": 613247,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/6423317d981c4d0610b0b913b99d6a40?s=256&d=identicon&r=PG",
                        "display_name": "Edmon",
                        "link": "https://stackoverflow.com/users/613247/edmon"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1375133163,
                    "last_edit_date": 1375133163,
                    "creation_date": 1343961406,
                    "answer_id": 11788491,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, absolutely. Python, in my opinion, has great support for string formatting, replacements and operators.</p>\n\n<p>This might be helpful:<br>\n<a href=\"http://docs.python.org/library/stdtypes.html#string-formatting-operations\" rel=\"nofollow\">http://docs.python.org/library/stdtypes.html#string-formatting-operations</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 83772,
                        "reputation": 3960,
                        "user_id": 234658,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3b6fd1b4a240fbd4bfd3d3922789ab14?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dkim",
                        "link": "https://stackoverflow.com/users/234658/dkim"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1344275345,
                    "last_edit_date": 1344275345,
                    "creation_date": 1343962069,
                    "answer_id": 11788563,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have learned the following technique from <a href=\"http://www.dabeaz.com/per.html\" rel=\"noreferrer\">Python Essential Reference</a>:</p>\n\n<pre><code>&gt;&gt;&gt; bar = \"baz\"\n&gt;&gt;&gt; print \"foo is {bar}.\".format(**vars())\nfoo is baz.\n</code></pre>\n\n<p>This is quite useful when we want to refer to many variables in the formatting string:</p>\n\n<ul>\n<li>We don't have to repeat all variables in the argument list again: compare it to the explicit keyword argument-based approaches (such as <code>\"{x}{y}\".format(x=x, y=y)</code> and <code>\"%(x)%(y)\" % {\"x\": x, \"y\": y}</code>).</li>\n<li>We don't have to check one by one if the order of variables in the argument list is consistent with their order in the formatting string: compare it to the positional argument-based approaches (such as <code>\"{}{}\".format(x, y)</code>, <code>\"{0}{1}\".format(x, y)</code> and <code>\"%s%s\" % (x, y)</code>).</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343962607,
                    "creation_date": 1343962607,
                    "answer_id": 11788614,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a big difference between this in Ruby:</p>\n\n<pre><code>print \"foo is #{bar}.\"\n</code></pre>\n\n<p>And these in Python:</p>\n\n<pre><code>print \"foo is {bar}\".format(bar=bar)\n</code></pre>\n\n<p>In the Ruby example, <code>bar</code> is <em>evaluated</em><br>\nIn the Python example, <code>bar</code> is just a key to the dictionary</p>\n\n<p>In the case that you are just using variables the behave more or less the same, but in general, converting Ruby to Python isn't quite so simple</p>\n"
                },
                {
                    "owner": {
                        "account_id": 398541,
                        "reputation": 21836,
                        "user_id": 763269,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/0c27474bcff67974d6a9fcb43cb7ba4e?s=256&d=identicon&r=PG",
                        "display_name": "Chris Johnson",
                        "link": "https://stackoverflow.com/users/763269/chris-johnson"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343962548,
                    "creation_date": 1343962548,
                    "answer_id": 11788610,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I prefer this approach because you don't have to repeat yourself by referencing the variable twice:</p>\n\n<pre>\nalpha = 123\nprint 'The answer is {alpha}'.format(**locals())\n</pre>\n"
                },
                {
                    "owner": {
                        "account_id": 292449,
                        "reputation": 3316,
                        "user_id": 595207,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/3653203c0807fde1d9f77aee7c8f6249?s=256&d=identicon&r=PG",
                        "display_name": "Josiah",
                        "link": "https://stackoverflow.com/users/595207/josiah"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1343961502,
                    "creation_date": 1343961502,
                    "answer_id": 11788500,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\">String formatting</a></p>\n\n<pre><code>&gt;&gt;&gt; bar = 1\n&gt;&gt;&gt; print \"foo is {}.\".format(bar)\nfoo is 1.\n</code></pre>\n"
                }
            ]
        },
        {
            "53797057": [
                {
                    "owner": {
                        "account_id": 3671517,
                        "reputation": 54078,
                        "user_id": 3058609,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/ae60aaaf534608b6181058fa7ad178e8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Adam Smith",
                        "link": "https://stackoverflow.com/users/3058609/adam-smith"
                    },
                    "is_accepted": true,
                    "score": 124,
                    "last_activity_date": 1544912061,
                    "last_edit_date": 1544912061,
                    "creation_date": 1544906407,
                    "answer_id": 53797072,
                    "question_id": 53797057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>*</code> indicates the end of the positional arguments. Every argument after that can only be specified by keyword. This is defined in <a href=\"https://www.python.org/dev/peps/pep-3102/\" rel=\"noreferrer\">PEP 3102</a></p>\n\n<pre><code>&gt;&gt;&gt; def foo1(a, b=None):\n...     print(a, b)\n...\n&gt;&gt;&gt; def foo2(a, *, b=None):\n...     print(a, b)\n...\n&gt;&gt;&gt; foo1(1, 2)\n1 2\n&gt;&gt;&gt; foo2(1, 2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo1() takes 1 positional argument but 2 were given\n&gt;&gt;&gt; foo2(1, b=2)\n1 2\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14381595,
                        "reputation": 3762,
                        "user_id": 10388629,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/g15oI.png?s=256",
                        "display_name": "Picachieu",
                        "link": "https://stackoverflow.com/users/10388629/picachieu"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1544906510,
                    "creation_date": 1544906510,
                    "answer_id": 53797093,
                    "question_id": 53797057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All arguments after the <code>*</code> must have their name explicitly specified. For example, if you had this function:</p>\n\n<pre><code>def somefunction(a,*,b):\n    pass\n</code></pre>\n\n<p>You could write this:</p>\n\n<pre><code>somefunction(0, b=0)\n</code></pre>\n\n<p>but not this:</p>\n\n<pre><code>somefunction(0, 0)\n</code></pre>\n"
                }
            ]
        },
        {
            "5087425": [
                {
                    "owner": {
                        "account_id": 40410,
                        "reputation": 42996,
                        "user_id": 117092,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/8f21aab63da84a913ef6190dcdf9ede4?s=256&d=identicon&r=PG",
                        "display_name": "luc",
                        "link": "https://stackoverflow.com/users/117092/luc"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1298440164,
                    "creation_date": 1298440164,
                    "answer_id": 5087448,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>\" is useful when you have ' into the string and vice versa</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79477,
                        "reputation": 131259,
                        "user_id": 225312,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/98be1fca8529611a09e77da800faa817?s=256&d=identicon&r=PG",
                        "display_name": "user225312",
                        "link": "https://stackoverflow.com/users/225312/user225312"
                    },
                    "is_accepted": true,
                    "score": 61,
                    "last_activity_date": 1298440153,
                    "creation_date": 1298440153,
                    "answer_id": 5087446,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Both are equal and what you use is entirely your preference.</p>\n\n<p>As far as the <code>char</code> vs <code>string</code> thing is concerned, refer to the <code>Zen of Python</code>, (<a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"noreferrer\">PEP 20</a> or <code>import this</code>)</p>\n\n<pre><code>Special cases aren't special enough to break the rules.\n</code></pre>\n\n<p>A string of length 1 is not special enough to have a dedicated <code>char</code> type. </p>\n\n<p>Note that you can do:</p>\n\n<pre><code>&gt;&gt;&gt; print 'Double\" quote inside single'\nDouble\" quote inside single\n&gt;&gt;&gt; print \"Single' quote inside double\"\nSingle' quote inside double\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35995,
                        "reputation": 40669,
                        "user_id": 102371,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/262d914b9ff3f5b7f599de600cf463a8?s=256&d=identicon&r=PG",
                        "display_name": "John Weldon",
                        "link": "https://stackoverflow.com/users/102371/john-weldon"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1298440010,
                    "creation_date": 1298440010,
                    "answer_id": 5087430,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python does not have that restriction of single quotes for chars and double quotes for strings.</p>\n\n<p>As you can see here the grammar explicitly allows both for strings.</p>\n\n<p><a href=\"http://docs.python.org/reference/lexical_analysis.html#string-literals\" rel=\"noreferrer\">http://docs.python.org/reference/lexical_analysis.html#string-literals</a></p>\n"
                }
            ]
        },
        {
            "8249539": [
                {
                    "owner": {
                        "account_id": 1011299,
                        "reputation": 27193,
                        "user_id": 1023815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b8fc2bd5d624ab2d5f54c145ae3d04f2?s=256&d=identicon&r=PG",
                        "display_name": "Adam Zalcman",
                        "link": "https://stackoverflow.com/users/1023815/adam-zalcman"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1322085467,
                    "creation_date": 1322085467,
                    "answer_id": 8249627,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you must, this is how you can do it in a for loop:</p>\n\n<pre><code>mylist = ['first', 'second', 'other']\nendstring = ''\nfor s in mylist:\n  endstring += s\n</code></pre>\n\n<p>but you should consider using <code>join()</code>:</p>\n\n<pre><code>''.join(mylist)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 95306,
                        "reputation": 4414,
                        "user_id": 259645,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/OObkU.jpg?s=256",
                        "display_name": "Aurora",
                        "link": "https://stackoverflow.com/users/259645/aurora"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1322085455,
                    "creation_date": 1322085455,
                    "answer_id": 8249624,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While \"\".join is more pythonic, and the correct answer for this problem, it is indeed possible to use a for loop.</p>\n\n<p>If this is a homework assignment (please add a tag if this is so!), and you are required to use a for loop then what will work (although is not pythonic, and shouldn't really be done this way if you are a professional programmer writing python) is this:</p>\n\n<pre><code>endstring = \"\"\nmylist = ['first', 'second', 'other']\nfor word in mylist:\n  print \"This is the word I am adding: \" + word\n  endstring = endstring + word\nprint \"This is the answer I get: \" + endstring\n</code></pre>\n\n<p>You don't need the 'prints', I just threw them in there so you can see what is happening.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 481212,
                        "reputation": 6656,
                        "user_id": 894885,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/96b3d11d987edfac71b38328edf04b44?s=256&d=identicon&r=PG",
                        "display_name": "Samuel Edwin Ward",
                        "link": "https://stackoverflow.com/users/894885/samuel-edwin-ward"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1322085352,
                    "creation_date": 1322085352,
                    "answer_id": 8249606,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>endstring = ''\nfor s in list:\n    endstring += s\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 69149,
                        "reputation": 235782,
                        "user_id": 201359,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/t7odj.jpg?s=256",
                        "display_name": "&#211;scar L&#243;pez",
                        "link": "https://stackoverflow.com/users/201359/%c3%93scar-l%c3%b3pez"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1322085081,
                    "creation_date": 1322085081,
                    "answer_id": 8249555,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This should work:</p>\n\n<pre><code>endstring = ''.join(list)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10843,
                        "reputation": 335548,
                        "user_id": 20670,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
                        "display_name": "Tim Pietzcker",
                        "link": "https://stackoverflow.com/users/20670/tim-pietzcker"
                    },
                    "is_accepted": true,
                    "score": 87,
                    "last_activity_date": 1322085071,
                    "creation_date": 1322085071,
                    "answer_id": 8249551,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's not how you do it.</p>\n\n<pre><code>&gt;&gt;&gt; ''.join(['first', 'second', 'other'])\n'firstsecondother'\n</code></pre>\n\n<p>is what you want.</p>\n\n<p>If you do it in a <code>for</code> loop, it's going to be inefficient as string \"addition\"/concatenation doesn't scale well (but of course it's possible):</p>\n\n<pre><code>&gt;&gt;&gt; mylist = ['first', 'second', 'other']\n&gt;&gt;&gt; s = \"\"\n&gt;&gt;&gt; for item in mylist:\n...    s += item\n...\n&gt;&gt;&gt; s\n'firstsecondother'\n</code></pre>\n"
                }
            ]
        },
        {
            "9748678": [
                {
                    "owner": {
                        "account_id": 108651,
                        "reputation": 12703,
                        "user_id": 288280,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/O3uY8.jpg?s=256",
                        "display_name": "iTayb",
                        "link": "https://stackoverflow.com/users/288280/itayb"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1475526366,
                    "last_edit_date": 1475526366,
                    "creation_date": 1331980192,
                    "answer_id": 9749230,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.python.org/library/functions.html#hasattr\" rel=\"noreferrer\"><code>hasattr()</code></a> is the Pythonic way to do it. Learn it, love it.</p>\n\n<p><strong>Other possible way</strong> is to check whether the variable name is in <code>locals()</code> or <code>globals()</code>:</p>\n\n<pre><code>if varName in locals() or in globals():\n    do_something()\nelse:\n    do_something_else()\n</code></pre>\n\n<p>I personally hate to catch exceptions in order to check something. It looks and feels ugly. It's identical to checking if a string contains only digits that way:</p>\n\n<pre><code>s = \"84984x\"\ntry:\n    int(s)\n    do_something(s)\nexcept ValueError:\n    do_something_else(s)\n</code></pre>\n\n<p>Instead of gently using <code>s.isdigit()</code>. Eww.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 501376,
                        "reputation": 2162,
                        "user_id": 1207523,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/sIvDd.jpg?s=256",
                        "display_name": "Lindlof",
                        "link": "https://stackoverflow.com/users/1207523/lindlof"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1474276606,
                    "last_edit_date": 1474276606,
                    "creation_date": 1474276114,
                    "answer_id": 39569334,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Very old question but it really needs a good answer. For even a short program, I'd say use a custom function!</p>\n\n<p>Here's an example. It's not perfect for all application but it is for mine, for parsing responses from countless APIs and using Django. It's easy to fix for everyone's own requirements.</p>\n\n<pre><code>from django.core.exceptions import ObjectDoesNotExist\nfrom functools import reduce\n\nclass MultipleObjectsReturned(Exception):\n    pass\n\ndef get_attr(obj, attr, default, asString=False, silent=True):\n    \"\"\"\n    Gets any attribute of obj.\n    Recursively get attributes by separating attribute names with the .-character.        \n    Calls the last attribute if it's a function.\n\n    Usage: get_attr(obj, 'x.y.z', None)\n    \"\"\"\n    try:\n        attr = reduce(getattr, attr.split(\".\"), obj)\n        if hasattr(attr, '__call__'):\n            attr = attr()\n        if attr is None:\n            return default\n        if isinstance(attr, list):\n            if len(attr) &gt; 1:\n                logger.debug(\"Found multiple attributes: \" + str(attr))\n                raise MultipleObjectsReturned(\"Expected a single attribute\")\n            else:\n                return str(attr[0]) if asString else attr[0]\n        else:\n            return str(attr) if asString else attr\n    except AttributeError:\n        if not silent:\n            raise\n        return default\n    except ObjectDoesNotExist:\n        if not silent:\n            raise\n        return default\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 30228,
                        "reputation": 212738,
                        "user_id": 82294,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=256&d=identicon&r=PG",
                        "display_name": "Dietrich Epp",
                        "link": "https://stackoverflow.com/users/82294/dietrich-epp"
                    },
                    "is_accepted": true,
                    "score": 179,
                    "last_activity_date": 1332008056,
                    "last_edit_date": 1332008056,
                    "creation_date": 1331975400,
                    "answer_id": 9748715,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>There is no \"best\" way,</strong> because you are never just checking to see if an attribute exists; it is always a part of some larger program.  There are several correct ways and one notable incorrect way.</p>\n\n<h1>The wrong way</h1>\n\n<pre><code>if 'property' in a.__dict__:\n    a.property\n</code></pre>\n\n<p>Here is a demonstration which shows this technique failing:</p>\n\n<pre><code>class A(object):\n    @property\n    def prop(self):\n        return 3\n\na = A()\nprint \"'prop' in a.__dict__ =\", 'prop' in a.__dict__\nprint \"hasattr(a, 'prop') =\", hasattr(a, 'prop')\nprint \"a.prop =\", a.prop\n</code></pre>\n\n<p>Output:</p>\n\n<pre>\n'prop' in a.__dict__ = False\nhasattr(a, 'prop') = True\na.prop = 3\n</pre>\n\n<p>Most of the time, you don't want to mess with <code>__dict__</code>.  It's a special attribute for doing special things, and checking to see if an attribute exists is fairly mundane.</p>\n\n<h1>The EAFP way</h1>\n\n<p>A common idiom in Python is \"easier to ask for forgiveness than permission\", or EAFP for short.  You will see lots of Python code that uses this idiom, and not just for checking attribute existence.</p>\n\n<pre><code># Cached attribute\ntry:\n    big_object = self.big_object\n    # or getattr(self, 'big_object')\nexcept AttributeError:\n    # Creating the Big Object takes five days\n    # and three hundred pounds of over-ripe melons.\n    big_object = CreateBigObject()\n    self.big_object = big_object\nbig_object.do_something()\n</code></pre>\n\n<p>Note that this is exactly the same idiom for opening a file that may not exist.</p>\n\n<pre><code>try:\n    f = open('some_file', 'r')\nexcept IOError as ex:\n    if ex.errno != errno.ENOENT:\n        raise\n    # it doesn't exist\nelse:\n    # it does and it's open\n</code></pre>\n\n<p>Also, for converting strings to integers.</p>\n\n<pre><code>try:\n    i = int(s)\nexcept ValueError:\n    print \"Not an integer! Please try again.\"\n    sys.exit(1)\n</code></pre>\n\n<p>Even importing optional modules...</p>\n\n<pre><code>try:\n    import readline\nexcept ImportError:\n    pass\n</code></pre>\n\n<h1>The LBYL way</h1>\n\n<p>The <code>hasattr</code> method, of course, works too.  This technique is called \"look before you leap\", or LBYL for short.</p>\n\n<pre><code># Cached attribute\nif not hasattr(self, 'big_object'):\n    big_object = CreateBigObject()\n    self.big_object = CreateBigObject()\nbig_object.do_something()\n</code></pre>\n\n<p>(The <code>hasattr</code> builtin actually behaves strangely in Python versions prior to 3.2 with regard to exceptions -- it will catch exceptions that it shouldn't -- but this is probably irrelevant, since such exceptions are unlikely.  The <code>hasattr</code> technique is also slower than <code>try/except</code>, but you don't call it often enough to care and the difference isn't very big.  Finally, <code>hasattr</code> isn't atomic so it could throw <code>AttributeError</code> if another thread deletes the attribute, but this is a far-fetched scenario and you'll need to be very careful around threads anyway.  I don't consider any of these three differences to be worth worrying about.)</p>\n\n<p>Using <code>hasattr</code> is much simpler than <code>try/except</code>, as long as all you need to know is whether the attribute exists.  The big issue for me is that the LBYL technique looks \"strange\", since as a Python programmer I'm more used to reading the EAFP technique.  If you rewrite the above examples so that they use the <code>LBYL</code> style, you get code that is either clumsy, outright incorrect, or too difficult to write.</p>\n\n<pre><code># Seems rather fragile...\nif re.match('^(:?0|-?[1-9][0-9]*)$', s):\n    i = int(s)\nelse:\n    print \"Not an integer! Please try again.\"\n    sys.exit(1)\n</code></pre>\n\n<p>And LBYL is sometimes outright incorrect:</p>\n\n<pre><code>if os.path.isfile('some_file'):\n    # At this point, some other program could\n    # delete some_file...\n    f = open('some_file', 'r')\n</code></pre>\n\n<p>If you want to write a LBYL function for importing optional modules, be my guest... it sounds like the function would be a total monster.</p>\n\n<h1>The getattr way</h1>\n\n<p>If you just need a default value, <code>getattr</code> is a shorter version of <code>try/except</code>.</p>\n\n<pre><code>x = getattr(self, 'x', default_value)\n</code></pre>\n\n<p>If the default value is expensive to construct, then you'll end up with something like this:</p>\n\n<pre><code>x = getattr(self, 'attr', None)\nif x is None:\n    x = CreateDefaultValue()\n    self.attr = x\n</code></pre>\n\n<p>Or if <code>None</code> is a possible value,</p>\n\n<pre><code>sentinel = object()\n\nx = getattr(self, 'attr', sentinel)\nif x is sentinel:\n    x = CreateDefaultValue()\n    self.attr = x\n</code></pre>\n\n<h1>Conclusion</h1>\n\n<p>Internally, the <code>getattr</code> and <code>hasattr</code> builtins just use <code>try/except</code> technique (except written in C).  So they all behave the same way where it counts, and picking the right one is due to a matter of circumstances and style.</p>\n\n<p>The <code>try/except</code> EAFP code will always rub some programmers the wrong way, and the <code>hasattr/getattr</code> LBYL code will irk other programmers.  They're both correct, and there's often no truly compelling reason to pick one or the other.  (Yet other programmers are disgusted that you would consider it normal for an attribute to be undefined, and some programmers are horrified that it's even possible to have an undefined attribute in Python.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1331979645,
                    "last_edit_date": 1331979645,
                    "creation_date": 1331977214,
                    "answer_id": 9748889,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>hasattr()</code> is the way<sup>*</sup>. </p>\n\n<p><code>a.__dict__</code> is ugly and it doesn't work in many cases. <code>hasattr()</code> actually tries to get attribute and catches <code>AttributeError</code> internally so it works even if you define custom <code>__getattr__()</code> method.</p>\n\n<p>To avoid requesting the attribute twice the third argument for <code>getattr()</code> could be used:</p>\n\n<pre><code>not_exist = object()\n\n# ...\nattr = getattr(obj, 'attr', not_exist)\nif attr is not_exist:\n   do_something_else()\nelse:\n   do_something(attr)\n</code></pre>\n\n<p>You could just use a default value instead of <code>not_exist</code> sentinel if it is more appropriate in your case.</p>\n\n<p>I don't like <code>try: do_something(x.attr) \\n except AttributeError: ..</code> it might hide <code>AttributeError</code> inside <code>do_something()</code> function.</p>\n\n<p><sup>*</sup><a href=\"http://bugs.python.org/issue9666\">Before Python 3.1 <code>hasattr()</code> suppressed all exceptions</a> (not only <code>AttributeError</code>) if it is not desirable <code>getattr()</code> should be used.</p>\n"
                }
            ]
        },
        {
            "53608653": [
                {
                    "owner": {
                        "account_id": 11900153,
                        "reputation": 71492,
                        "user_id": 8708364,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AMH4B.png?s=256",
                        "display_name": "U13-Forward",
                        "link": "https://stackoverflow.com/users/8708364/u13-forward"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1544141071,
                    "last_edit_date": 1544141071,
                    "creation_date": 1543912433,
                    "answer_id": 53608675,
                    "question_id": 53608653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use this <code>df.columns</code> being sliced, and putted into a <code>df[...]</code> bracket:</p>\n\n<pre><code>print(df[df.columns[:-3]])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7681744,
                        "reputation": 34008,
                        "user_id": 5820814,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://graph.facebook.com/1240609682619989/picture?type=large",
                        "display_name": "Mayank Porwal",
                        "link": "https://stackoverflow.com/users/5820814/mayank-porwal"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1543912588,
                    "creation_date": 1543912588,
                    "answer_id": 53608711,
                    "question_id": 53608653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Select everything <strong>EXCEPT the last 3 columns</strong>, do this using <code>iloc</code>: </p>\n\n<pre><code>In [1639]: df\nOut[1639]: \n   a  b  c  d  e\n0  1  3  2  2  2\n1  2  4  1  1  1\n\nIn [1640]: df.iloc[:,:-3]\nOut[1640]: \n   a  b\n0  1  3\n1  2  4\n</code></pre>\n"
                }
            ]
        },
        {
            "40992976": [
                {
                    "owner": {
                        "account_id": 8383924,
                        "reputation": 154,
                        "user_id": 6294917,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-CI3rgRljdsM/AAAAAAAAAAI/AAAAAAAAA24/GqVZeBJkMts/photo.jpg?sz=256",
                        "display_name": "Manuel Salgueiro",
                        "link": "https://stackoverflow.com/users/6294917/manuel-salgueiro"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1481023593,
                    "last_edit_date": 1481023593,
                    "creation_date": 1481019994,
                    "answer_id": 40993036,
                    "question_id": 40992976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let's assume your DataFrame's name is <code>df</code>. </p>\n\n<p>If you want to create a new column with the seconds you should do the following:</p>\n\n<pre><code>df['newColumn'] = df['Time'].dt.total_seconds()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860800,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": true,
                    "score": 60,
                    "last_activity_date": 1481020352,
                    "last_edit_date": 1481020352,
                    "creation_date": 1481019879,
                    "answer_id": 40993004,
                    "question_id": 40992976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you need <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.total_seconds.html\" rel=\"noreferrer\"><code>total_seconds</code></a>:</p>\n\n<pre><code>print (df['col'].dt.total_seconds())\n</code></pre>\n\n<p>Sample:</p>\n\n<pre><code>df = pd.DataFrame({'date1':pd.date_range('2015-01-01', periods=3),\n                   'date2':pd.date_range('2015-01-01 02:00:00', periods=3, freq='23H')})\n\nprint (df)\n       date1               date2\n0 2015-01-01 2015-01-01 02:00:00\n1 2015-01-02 2015-01-02 01:00:00\n2 2015-01-03 2015-01-03 00:00:00\n\ndf['diff'] = df['date2'] - df['date1']\ndf['seconds'] = df['diff'].dt.total_seconds()\n\nprint (df)\n       date1               date2     diff  seconds\n0 2015-01-01 2015-01-01 02:00:00 02:00:00   7200.0\n1 2015-01-02 2015-01-02 01:00:00 01:00:00   3600.0\n2 2015-01-03 2015-01-03 00:00:00 00:00:00      0.0\n</code></pre>\n\n<hr>\n\n<pre><code>df['diff'] = df['date2'] - df['date1']\ndf['diff'] = df['diff'].dt.total_seconds()\n\nprint (df)\n       date1               date2    diff\n0 2015-01-01 2015-01-01 02:00:00  7200.0\n1 2015-01-02 2015-01-02 01:00:00  3600.0\n2 2015-01-03 2015-01-03 00:00:00     0.0\n</code></pre>\n\n<p>If need cast to <code>int</code>:</p>\n\n<pre><code>df['diff'] = df['date2'] - df['date1']\ndf['diff'] = df['diff'].dt.total_seconds().astype(int)\n\nprint (df)\n       date1               date2  diff\n0 2015-01-01 2015-01-01 02:00:00  7200\n1 2015-01-02 2015-01-02 01:00:00  3600\n2 2015-01-03 2015-01-03 00:00:00     0\n</code></pre>\n"
                }
            ]
        },
        {
            "10617045": [
                {
                    "owner": {
                        "account_id": 148195,
                        "reputation": 1978,
                        "user_id": 359793,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/ed8b8e2cc93d904c4936b16676467e47?s=256&d=identicon&r=PG",
                        "display_name": "David",
                        "link": "https://stackoverflow.com/users/359793/david"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1711294855,
                    "last_edit_date": 1711294855,
                    "creation_date": 1710544619,
                    "answer_id": 78170070,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The accepted answer didn't consider that the ops purely asked about array initialization, without any assignment.</p>\n<p>I've ran a benchmark on Python 3.12.2 with all the proposed solutions and this illustrates that using the built-in <code>array()</code> package approach is faster than using the classic <code>[None]*10000</code> approach, and should be the recommended way.</p>\n<p>Additionally, using numpy without initialization is another 10X faster.</p>\n<h2>Using plain Python</h2>\n<pre><code>def direct_none():\n    return [None]*10000\n\ndef direct_zero():\n    return [0]*10000\n\ndef inline_loop_none():\n    return [None for _ in range(10000)]\n\ndef inline_loop_zero():\n    return [0 for _ in range(10000)]\n\ndef loop_none():\n    x = []\n    for i in range(10000):\n            x.append(None)\n    return x\n\ndef loop_zero():\n    x = []\n    for i in range(10000):\n            x.append(0)\n    return x\n</code></pre>\n<h2>Using Python's builtin Array package:</h2>\n<pre><code>import array\nimport itertools\n\ndef array_zero_simple_int():\n    return array.array(&quot;i&quot;, (0,)) * 10000\n\ndef array_zero_simple_long():\n    return array.array(&quot;l&quot;, (0,)) * 10000\n\ndef array_zero_simple_float():\n    return array.array(&quot;f&quot;, (0,)) * 10000\n\ndef array_zero_simple_double():\n    return array.array(&quot;d&quot;, (0,)) * 10000\n\ndef array_zero_itertools():\n    return array.array(&quot;i&quot;, itertools.repeat(0, 10000))\n</code></pre>\n<h2>Using Numpy</h2>\n<pre><code>import numpy\n\ndef numpy_zero():\n    return numpy.zeros(10000)\n\ndef numpy_empty():\n    return numpy.empty(10000)\n</code></pre>\n<h2>Results</h2>\n<pre><code>import sys\nimport timeit\n\nfor fct in [direct_none, direct_zero, inline_loop_none, inline_loop_zero, loop_none, loop_zero, array_zero_simple_int, array_zero_simple_long, array_zero_simple_float, array_zero_simple_double, array_zero_itertools, numpy_zero, numpy_empty]:\n    timer = timeit.timeit(fct, number=1000)\n    r = fct()\n    el_type = type(r[9999]).__name__\n    size = sys.getsizeof(r)\n    print(f'{timer * 1000:7.3f} usec/loop for {fct.__name__}. Returns a {type(r).__name__} of {len(r)} {el_type} elements, and uses {size} bytes')\n\n 12.132 usec/loop for direct_none. Returns a list of 10000 NoneType elements, and uses 80056 bytes\n 12.132 usec/loop for direct_zero. Returns a list of 10000 int elements, and uses 80056 bytes\n150.838 usec/loop for inline_loop_none. Returns a list of 10000 NoneType elements, and uses 85176 bytes\n137.435 usec/loop for inline_loop_zero. Returns a list of 10000 int elements, and uses 85176 bytes\n\n167.163 usec/loop for loop_none. Returns a list of 10000 NoneType elements, and uses 85176 bytes\n167.730 usec/loop for loop_zero. Returns a list of 10000 int elements, and uses 85176 bytes\n  0.794 usec/loop for array_zero_simple_int. Returns a array of 10000 int elements, and uses 40080 bytes\n  1.328 usec/loop for array_zero_simple_long. Returns a array of 10000 int elements, and uses 80080 bytes\n  0.795 usec/loop for array_zero_simple_float. Returns a array of 10000 float elements, and uses 40080 bytes\n  1.262 usec/loop for array_zero_simple_double. Returns a array of 10000 float elements, and uses 80080 bytes\n303.050 usec/loop for array_zero_itertools. Returns a array of 10000 int elements, and uses 40420 bytes\n  1.330 usec/loop for numpy_zero. Returns a ndarray of 10000 float64 elements, and uses 80112 bytes\n  0.131 usec/loop for numpy_empty. Returns a ndarray of 10000 float64 elements, and uses 80112 bytes\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 252856,
                        "reputation": 15427,
                        "user_id": 531179,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://i.sstatic.net/f3A2D.jpg?s=256",
                        "display_name": "ulidtko",
                        "link": "https://stackoverflow.com/users/531179/ulidtko"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1611335568,
                    "last_edit_date": 1611335568,
                    "creation_date": 1337166851,
                    "answer_id": 10617372,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Note also that when you used arrays in C++ you might have had somewhat different needs, which are solved in different ways in Python:</p>\n<ol>\n<li>You might have needed just a collection of items; Python lists deal with this usecase just perfectly.</li>\n<li>You might have needed a proper <strong>array</strong> of homogenous items. Python lists are <strong>not</strong> a good way to store <em>arrays</em>.</li>\n</ol>\n<p>Python solves the need in arrays by <strong><a href=\"https://numpy.org\" rel=\"nofollow noreferrer\">NumPy</a></strong>, which, among other neat things, has a way to create an <em>array</em> of known size:</p>\n<pre><code>from numpy import *\n\nl = zeros(10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5890946,
                        "reputation": 22415,
                        "user_id": 4637585,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/dfeb2b97e1a8da96f2676b14b07c858f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Rolf of Saxony",
                        "link": "https://stackoverflow.com/users/4637585/rolf-of-saxony"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1549039962,
                    "creation_date": 1549039962,
                    "answer_id": 54483838,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is more of a warning than an answer.<br>\nHaving seen in the other answers <code>my_list = [None] * 10</code>, I was tempted and set up an array like this <code>speakers = [['','']] * 10</code> and came to regret it immensely as the resulting <code>list</code> did not behave as I thought it should.<br>\nI resorted to:</p>\n\n<pre><code>speakers = []\nfor i in range(10):\n    speakers.append(['',''])\n</code></pre>\n\n<p>As <code>[['','']] * 10</code> appears to create an <code>list</code> where subsequent elements are a copy of the first element.<br>\nfor example:</p>\n\n<pre><code>&gt;&gt;&gt; n=[['','']]*10\n&gt;&gt;&gt; n\n[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][0] = \"abc\"\n&gt;&gt;&gt; n\n[['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', '']]\n&gt;&gt;&gt; n[0][1] = \"True\"\n&gt;&gt;&gt; n\n[['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True']]\n</code></pre>\n\n<p>Whereas with the <code>.append</code> option:</p>\n\n<pre><code>&gt;&gt;&gt; n=[]\n&gt;&gt;&gt; for i in range(10):\n...  n.append(['',''])\n... \n&gt;&gt;&gt; n\n[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][0] = \"abc\"\n&gt;&gt;&gt; n\n[['abc', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][1] = \"True\"\n&gt;&gt;&gt; n\n[['abc', 'True'], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n</code></pre>\n\n<p>I'm sure that the accepted answer by ninjagecko does attempt to mention this, sadly I was too thick to understand.<br>\nWrapping up, take care!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14552,
                        "reputation": 89133,
                        "user_id": 30038,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/mPvRH.jpg?s=256",
                        "display_name": "Vlad Bezden",
                        "link": "https://stackoverflow.com/users/30038/vlad-bezden"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1547823476,
                    "last_edit_date": 1547823476,
                    "creation_date": 1547823097,
                    "answer_id": 54256367,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can do it using <a href=\"https://docs.python.org/3/library/array.html\" rel=\"noreferrer\">array</a> module. array module is part of python standard library:</p>\n\n<pre><code>from array import array\nfrom itertools import repeat\n\na = array(\"i\", repeat(0, 10))\n# or\na = array(\"i\", [0]*10)\n</code></pre>\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html?highlight=itertools%20repeat#itertools.repeat\" rel=\"noreferrer\">repeat</a> function repeats 0 value 10 times. It's more memory efficient than [0]*10, since it doesn't allocate memory, but repeats returning the same number x number of times.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10282620,
                        "reputation": 31,
                        "user_id": 7587127,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d1d8838e45f06c132f796ab62966af4b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mishaa1",
                        "link": "https://stackoverflow.com/users/7587127/mishaa1"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1498744806,
                    "creation_date": 1498744806,
                    "answer_id": 44827296,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>fix_array = numpy.empty(n, dtype = object)\n</code></pre>\n\n<p>where n is the size of your array</p>\n\n<p>though it works, it may not be the best idea as you have to import a library for this purpose. Hope this helps!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 365893,
                        "reputation": 90929,
                        "user_id": 711085,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fabf3436107ffee76255957a7732d0f1?s=256&d=identicon&r=PG",
                        "display_name": "ninjagecko",
                        "link": "https://stackoverflow.com/users/711085/ninjagecko"
                    },
                    "is_accepted": true,
                    "score": 130,
                    "last_activity_date": 1464955791,
                    "last_edit_date": 1495542874,
                    "creation_date": 1337166321,
                    "answer_id": 10617221,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>(tl;dr: The exact answer to your question is <code>numpy.empty</code> or <code>numpy.empty_like</code>, but you likely don't care and can get away with using <code>myList = [None]*10000</code>.) </p>\n\n<h1>Simple methods</h1>\n\n<p>You can initialize your list to all the same element. Whether it semantically makes sense to use a non-numeric value (that will give an error later if you use it, which is a good thing) or something like 0 (unusual? maybe useful if you're writing a sparse matrix or the 'default' value should be 0 and you're not worried about bugs) is up to you:</p>\n\n<pre><code>&gt;&gt;&gt; [None for _ in range(10)]\n[None, None, None, None, None, None, None, None, None, None]\n</code></pre>\n\n<p>(Here <code>_</code> is just a variable name, you could have used <code>i</code>.)</p>\n\n<p>You can also do so like this:</p>\n\n<pre><code>&gt;&gt;&gt; [None]*10\n[None, None, None, None, None, None, None, None, None, None]\n</code></pre>\n\n<p>You probably don't need to optimize this. You can also append to the array every time you need to:</p>\n\n<pre><code>&gt;&gt;&gt; x = []\n&gt;&gt;&gt; for i in range(10):\n&gt;&gt;&gt;    x.append(i)\n</code></pre>\n\n<hr>\n\n<h1>Performance comparison of simple methods</h1>\n\n<p>Which is best?</p>\n\n<pre><code>&gt;&gt;&gt; def initAndWrite_test():\n...  x = [None]*10000\n...  for i in range(10000):\n...   x[i] = i\n... \n&gt;&gt;&gt; def initAndWrite2_test():\n...  x = [None for _ in range(10000)]\n...  for i in range(10000):\n...   x[i] = i\n... \n&gt;&gt;&gt; def appendWrite_test():\n...  x = []\n...  for i in range(10000):\n...   x.append(i)\n</code></pre>\n\n<p>Results in python2.7:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; for f in [initAndWrite_test, initAndWrite2_test, appendWrite_test]:\n...  print('{} takes {} usec/loop'.format(f.__name__, timeit.timeit(f, number=1000)*1000))\n... \ninitAndWrite_test takes 714.596033096 usec/loop\ninitAndWrite2_test takes 981.526136398 usec/loop\nappendWrite_test takes 908.597946167 usec/loop\n</code></pre>\n\n<p>Results in python 3.2:</p>\n\n<pre><code>initAndWrite_test takes 641.3581371307373 usec/loop\ninitAndWrite2_test takes 1033.6499214172363 usec/loop\nappendWrite_test takes 895.9040641784668 usec/loop\n</code></pre>\n\n<p>As we can see, it is likely better to do the idiom <code>[None]*10000</code> in both python2 and python3. However, if one is doing anything more complicated than assignment (such as anything complicated to generate or process every element in the list), then the overhead becomes a meaninglessly small fraction of the cost. That is, such optimization is premature to worry about if you're doing anything reasonable with the elements of your list.</p>\n\n<hr>\n\n<h1>Uninitialized memory</h1>\n\n<p>These are all however inefficient because they go through memory, writing something in the process. In C this is different: an uninitialized array is filled with random garbage memory (sidenote: that has been reallocated from the system, and can be a <a href=\"https://stackoverflow.com/q/12095135/711085\">security risk</a> when you allocate or fail to mlock and/or fail to delete memory when closing the program). This is a design choice, designed for speedup: the makers of the C language thought that it was better not to automatically initialize memory, and that was the correct choice.</p>\n\n<p>This is not an asymptotic speedup (because it's <code>O(N)</code>), but for example you wouldn't need to first initialize your entire memory block before you overwrite with stuff you actually care about. This, if it were possible, is equivalent to something like (pseudo-code) <code>x = list(size=10000)</code>.</p>\n\n<p>If you want something similar in python, you can use the <code>numpy</code> numerical matrix/N-dimensional-array manipulation package. Specifically, <a href=\"http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html\" rel=\"noreferrer\"><code>numpy.empty</code></a> or <a href=\"http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty_like.html\" rel=\"noreferrer\"><code>numpy.empty_like</code></a></p>\n\n<p>That is the real answer to your question.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1036231,
                        "reputation": 7068,
                        "user_id": 1043456,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/gEo3o.jpg?s=256",
                        "display_name": "jadkik94",
                        "link": "https://stackoverflow.com/users/1043456/jadkik94"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1337166726,
                    "creation_date": 1337166726,
                    "answer_id": 10617340,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use this: <code>[None] * 10</code>. But this won't be \"fixed size\" you can still append, remove ... This is how lists are made.</p>\n\n<p>You could make it a tuple (<code>tuple([None] * 10)</code>) to fix its width, but again, you won't be able to change it (not in all cases, only if the items stored are mutable).</p>\n\n<p>Another option, closer to your requirement, is not a list, but a <code>collections.deque</code> with a maximum length. It's the maximum size, but it could be smaller.</p>\n\n<pre><code>import collections\nmax_4_items = collections.deque([None] * 4, maxlen=4)\n</code></pre>\n\n<p>But, just use a list, and get used to the \"pythonic\" way of doing things.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 317442,
                        "reputation": 7251,
                        "user_id": 634135,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/e663a833765a8e904f7fe53827cc376e?s=256&d=identicon&r=PG",
                        "display_name": "cobie",
                        "link": "https://stackoverflow.com/users/634135/cobie"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1337166098,
                    "creation_date": 1337166098,
                    "answer_id": 10617162,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>your_list = [None]*size_required\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 125976,
                        "reputation": 73072,
                        "user_id": 322129,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/6f1b006173728a91d96289dd324f6271?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Russell Dias",
                        "link": "https://stackoverflow.com/users/322129/russell-dias"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1337165858,
                    "creation_date": 1337165858,
                    "answer_id": 10617105,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python has nothing built-in to support this. Do you really need to optimize it so much as I don't think that appending will add <em>that</em> much overhead.</p>\n\n<p>However, you can do something like <code>l = [None] * 1000</code>.</p>\n\n<p>Alternatively, you could use a generator.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1484087,
                        "reputation": 1603,
                        "user_id": 1392706,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7df9602eeba7af579f708179876600c3?s=256&d=identicon&r=PG",
                        "display_name": "BluePeppers",
                        "link": "https://stackoverflow.com/users/1392706/bluepeppers"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1337165845,
                    "creation_date": 1337165845,
                    "answer_id": 10617101,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's not really the python way to initialize lists like this. Anyway, you can initialize a list like this:</p>\n\n<pre><code>&gt;&gt;&gt; l = [None] * 4\n&gt;&gt;&gt; l\n[None, None, None, None]\n</code></pre>\n"
                }
            ]
        },
        {
            "3203286": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1590083137,
                    "last_edit_date": 1590083137,
                    "creation_date": 1278591528,
                    "answer_id": 3203434,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This will make <code>Foo.number</code> a <em>read-only</em> property:</p>\n\n<pre><code>class MetaFoo(type):\n    @property\n    def number(cls):\n        return cls.x\n\nclass Foo(object, metaclass=MetaFoo):\n    x = 4\n\nprint(Foo.number)\n# 4\n\nFoo.number = 6\n# AttributeError: can't set attribute\n</code></pre>\n\n<hr>\n\n<p><strong>Explanation</strong>: The usual scenario when using <code>@property</code> looks like this:</p>\n\n<pre><code>class Foo(object):\n    @property\n    def number(self):\n        ...\nfoo = Foo()\n</code></pre>\n\n<p>A property defined in <code>Foo</code> is read-only with respect to its instances. That is, <code>foo.number = 6</code> would raise an <code>AttributeError</code>.</p>\n\n<p>Analogously, if you want <code>Foo.number</code> to raise an <code>AttributeError</code> you would need to setup a property defined in <code>type(Foo)</code>. Hence the need for a metaclass.</p>\n\n<hr>\n\n<p>Note that this read-onlyness is not immune from hackers.\nThe property can be made writable by changing Foo's\nclass:</p>\n\n<pre><code>class Base(type): pass\nFoo.__class__ = Base\n\n# makes Foo.number a normal class attribute\nFoo.number = 6   \nprint(Foo.number)\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>6\n</code></pre>\n\n<p>or, if you wish to make <code>Foo.number</code> a settable property,</p>\n\n<pre><code>class WritableMetaFoo(type): \n    @property\n    def number(cls):\n        return cls.x\n    @number.setter\n    def number(cls, value):\n        cls.x = value\nFoo.__class__ = WritableMetaFoo\n\n# Now the assignment modifies `Foo.x`\nFoo.number = 6   \nprint(Foo.number)\n</code></pre>\n\n<p>also prints</p>\n\n<pre><code>6\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 906277,
                        "reputation": 233,
                        "user_id": 941102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/265fc109b3b78378227e0a52ddf6fc4e?s=256&d=identicon&r=PG",
                        "display_name": "Michael Reinhardt",
                        "link": "https://stackoverflow.com/users/941102/michael-reinhardt"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1527187005,
                    "creation_date": 1527187005,
                    "answer_id": 50516046,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The solution of Mikhail Gerasimov is quite complete. Unfortunately, it was one drawback. If you have a class using his classproperty, no child class can use it due to an \n<code>TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases</code> with <code>class Wrapper</code>.</p>\n\n<p>Fortunately, this can be fixed. Just inherit from the metaclass of the given class when creating <code>class Meta</code>.</p>\n\n<pre><code>def classproperty_support(cls):\n  \"\"\"\n  Class decorator to add metaclass to our class.\n  Metaclass uses to add descriptors to class attributes, see:\n  http://stackoverflow.com/a/26634248/1113207\n  \"\"\"\n  # Use type(cls) to use metaclass of given class\n  class Meta(type(cls)): \n      pass\n\n  for name, obj in vars(cls).items():\n      if isinstance(obj, classproperty):\n          setattr(Meta, name, property(obj.fget, obj.fset, obj.fdel))\n\n  class Wrapper(cls, metaclass=Meta):\n      pass\n  return Wrapper\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1125914,
                        "reputation": 39386,
                        "user_id": 1113207,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4e332fe1cf22e027fd875b467a835ae4?s=256&d=identicon&r=PG",
                        "display_name": "Mikhail Gerasimov",
                        "link": "https://stackoverflow.com/users/1113207/mikhail-gerasimov"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1456444903,
                    "creation_date": 1456444903,
                    "answer_id": 35640842,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Problem with solutions above is that it wouldn't work for accessing class variables from instance variable:</p>\n\n<pre><code>print(Foo.number)\n# 4\n\nf = Foo()\nprint(f.number)\n# 'Foo' object has no attribute 'number'\n</code></pre>\n\n<p>Moreover, using metaclass explicit is not so nice, as using regular <code>property</code> decorator.</p>\n\n<p>I tried to solve this problems. Here how it works now:</p>\n\n<pre><code>@classproperty_support\nclass Bar(object):\n    _bar = 1\n\n    @classproperty\n    def bar(cls):\n        return cls._bar\n\n    @bar.setter\n    def bar(cls, value):\n        cls._bar = value\n\n\n# @classproperty should act like regular class variable.\n# Asserts can be tested with it.\n# class Bar:\n#     bar = 1\n\n\nassert Bar.bar == 1\n\nBar.bar = 2\nassert Bar.bar == 2\n\nfoo = Bar()\nbaz = Bar()\nassert foo.bar == 2\nassert baz.bar == 2\n\nBar.bar = 50\nassert baz.bar == 50\nassert foo.bar == 50\n</code></pre>\n\n<p>As you see, we have <code>@classproperty</code> that works same way as <code>@property</code> for class variables. Only thing we will need is additional <code>@classproperty_support</code> class decorator.</p>\n\n<p>Solution also works for read-only class properties.</p>\n\n<p>Here's implementation:</p>\n\n<pre><code>class classproperty:\n    \"\"\"\n    Same as property(), but passes obj.__class__ instead of obj to fget/fset/fdel.\n    Original code for property emulation:\n    https://docs.python.org/3.5/howto/descriptor.html#properties\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n        self.fget = fget\n        self.fset = fset\n        self.fdel = fdel\n        if doc is None and fget is not None:\n            doc = fget.__doc__\n        self.__doc__ = doc\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        if self.fget is None:\n            raise AttributeError(\"unreadable attribute\")\n        return self.fget(obj.__class__)\n\n    def __set__(self, obj, value):\n        if self.fset is None:\n            raise AttributeError(\"can't set attribute\")\n        self.fset(obj.__class__, value)\n\n    def __delete__(self, obj):\n        if self.fdel is None:\n            raise AttributeError(\"can't delete attribute\")\n        self.fdel(obj.__class__)\n\n    def getter(self, fget):\n        return type(self)(fget, self.fset, self.fdel, self.__doc__)\n\n    def setter(self, fset):\n        return type(self)(self.fget, fset, self.fdel, self.__doc__)\n\n    def deleter(self, fdel):\n        return type(self)(self.fget, self.fset, fdel, self.__doc__)\n\n\ndef classproperty_support(cls):\n    \"\"\"\n    Class decorator to add metaclass to our class.\n    Metaclass uses to add descriptors to class attributes, see:\n    http://stackoverflow.com/a/26634248/1113207\n    \"\"\"\n    class Meta(type):\n        pass\n\n    for name, obj in vars(cls).items():\n        if isinstance(obj, classproperty):\n            setattr(Meta, name, property(obj.fget, obj.fset, obj.fdel))\n\n    class Wrapper(cls, metaclass=Meta):\n        pass\n    return Wrapper\n</code></pre>\n\n<p><strong>Note:</strong> code isn't tested much, feel free to note if it doesn't work as you expect.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 300820,
                        "reputation": 3418,
                        "user_id": 608191,
                        "user_type": "registered",
                        "accept_rate": 27,
                        "profile_image": "https://www.gravatar.com/avatar/5afee2f4902e5bbf78c8dc03d1c96ee0?s=256&d=identicon&r=PG",
                        "display_name": "Viktor Haag",
                        "link": "https://stackoverflow.com/users/608191/viktor-haag"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1414596200,
                    "last_edit_date": 1495535443,
                    "creation_date": 1414596200,
                    "answer_id": 26634248,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I agree with <a href=\"https://stackoverflow.com/a/3203434/608191\">unubtu's answer</a>; it seems to work, however, it doesn't work with this precise syntax on <strong>Python 3</strong> (specifically, Python 3.4 is what I struggled with). Here's how one must form the pattern under Python 3.4 to make things work, it seems:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class MetaFoo(type):\n   @property\n   def number(cls):\n      return cls.x\n\nclass Foo(metaclass=MetaFoo):\n   x = 4\n\nprint(Foo.number)\n# 4\n\nFoo.number = 6\n# AttributeError: can't set attribute\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10108,
                        "reputation": 535699,
                        "user_id": 18936,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f6f1bea81a68b2f1cfe3efbb9be94bc?s=256&d=identicon&r=PG",
                        "display_name": "bobince",
                        "link": "https://stackoverflow.com/users/18936/bobince"
                    },
                    "is_accepted": true,
                    "score": 54,
                    "last_activity_date": 1278593034,
                    "creation_date": 1278593034,
                    "answer_id": 3203659,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The <code>property</code> descriptor always returns itself when accessed from a class (ie. when <code>instance</code> is <code>None</code> in its <code>__get__</code> method).</p>\n\n<p>If that's not what you want, you can write a new descriptor that always uses the class object (<code>owner</code>) instead of the instance:</p>\n\n<pre><code>&gt;&gt;&gt; class classproperty(object):\n...     def __init__(self, getter):\n...         self.getter= getter\n...     def __get__(self, instance, owner):\n...         return self.getter(owner)\n... \n&gt;&gt;&gt; class Foo(object):\n...     x= 4\n...     @classproperty\n...     def number(cls):\n...         return cls.x\n... \n&gt;&gt;&gt; Foo().number\n4\n&gt;&gt;&gt; Foo.number\n4\n</code></pre>\n"
                }
            ]
        },
        {
            "19095774": [
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1380550582,
                    "last_edit_date": 1380550582,
                    "creation_date": 1380549070,
                    "answer_id": 19095982,
                    "question_id": 19095774,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As long as your input is within the half-open interval (0, 1] (not including 0), you are fine.  You can't be too close to zero:</p>\n\n<pre><code>&gt;&gt;&gt; math.log(sys.float_info.min)\n-708.3964185322641\n</code></pre>\n\n<p>So simply checking for exactly zero (maybe as the result of an underflow) should be enough, or alternatively catch the exception and handle it.</p>\n\n<p><strong>EDIT</strong>: This also holds for the denormal minimum floating point number:</p>\n\n<pre><code>&gt;&gt;&gt; math.log(sys.float_info.min * sys.float_info.epsilon)\n-744.4400719213812\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16202,
                        "reputation": 47472,
                        "user_id": 35060,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=256&d=identicon&r=PG",
                        "display_name": "ismail",
                        "link": "https://stackoverflow.com/users/35060/ismail"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1380549004,
                    "creation_date": 1380549004,
                    "answer_id": 19095955,
                    "question_id": 19095774,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You are going over the supported precision, use <a href=\"http://docs.python.org/2/library/decimal.html\" rel=\"noreferrer\">Decimal</a> class instead.</p>\n\n<pre><code>&gt;&gt;&gt; from math import log\n&gt;&gt;&gt; from decimal import Decimal\n\n&gt;&gt;&gt; d = Decimal('1E-1024')\n&gt;&gt;&gt; log(d)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: math domain error\n&gt;&gt;&gt; d.ln()\nDecimal('-2357.847135225902780434423250')\n</code></pre>\n"
                }
            ]
        },
        {
            "4382945": [
                {
                    "owner": {
                        "account_id": 191900,
                        "reputation": 66599,
                        "user_id": 432745,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=256&d=identicon&r=PG",
                        "display_name": "pyfunc",
                        "link": "https://stackoverflow.com/users/432745/pyfunc"
                    },
                    "is_accepted": true,
                    "score": 340,
                    "last_activity_date": 1638392606,
                    "last_edit_date": 1638392606,
                    "creation_date": 1291766531,
                    "answer_id": 4382964,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Something along these lines, using ABC</p>\n<pre><code>import abc\n\nclass Shape(object):\n    __metaclass__ = abc.ABCMeta\n    \n    @abc.abstractmethod\n    def method_to_implement(self, input):\n        &quot;&quot;&quot;Method documentation&quot;&quot;&quot;\n        return\n    \n</code></pre>\n<p>Also read this good tutorial: <a href=\"https://pymotw.com/3/abc/\" rel=\"noreferrer\">https://pymotw.com/3/abc/</a></p>\n<p>You can also check out <strong>zope.interface</strong> which was used prior to introduction of ABC in python.</p>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/zope.interface\" rel=\"noreferrer\">http://pypi.python.org/pypi/zope.interface</a></li>\n<li><a href=\"https://zopeinterface.readthedocs.io/en/latest/README.html\" rel=\"noreferrer\">https://zopeinterface.readthedocs.io/en/latest/README.html</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 4353517,
                        "reputation": 7080,
                        "user_id": 3552975,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/Lr5jY.jpg?s=256",
                        "display_name": "Lerner Zhang",
                        "link": "https://stackoverflow.com/users/3552975/lerner-zhang"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1578422272,
                    "last_edit_date": 1578422272,
                    "creation_date": 1497347012,
                    "answer_id": 44517841,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use six and abc to construct a class for both python2 and python3 efficiently as follows: </p>\n\n<pre><code>import six\nimport abc\n\n@six.add_metaclass(abc.ABCMeta)\nclass MyClass(object):\n    \"\"\"\n    documentation\n    \"\"\"\n\n    @abc.abstractmethod\n    def initialize(self, para=None):\n        \"\"\"\n        documentation\n        \"\"\"\n        raise NotImplementedError\n</code></pre>\n\n<p><a href=\"https://pymotw.com/3/abc/\" rel=\"nofollow noreferrer\">This is an awesome document of it.</a> </p>\n"
                },
                {
                    "owner": {
                        "account_id": 466440,
                        "reputation": 7498,
                        "user_id": 871196,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/A5j1M.png?s=256",
                        "display_name": "demented hedgehog",
                        "link": "https://stackoverflow.com/users/871196/demented-hedgehog"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1458361051,
                    "last_edit_date": 1458361051,
                    "creation_date": 1458360159,
                    "answer_id": 36097662,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Abstract base classes are deep magic.  Periodically I implement something using them and am amazed at my own cleverness, very shortly afterwards I find myself completely confused by my own cleverness (this may well just be a personal limitation though).</p>\n\n<p>Another way of doing this (should be in the python std libs if you ask me) is to make a decorator.</p>\n\n<pre><code>def abstractmethod(method):\n    \"\"\"\n    An @abstractmethod member fn decorator.\n    (put this in some library somewhere for reuse).\n\n    \"\"\"\n    def default_abstract_method(*args, **kwargs):\n        raise NotImplementedError('call to abstract method ' \n                                  + repr(method))\n    default_abstract_method.__name__ = method.__name__    \n    return default_abstract_method\n\n\nclass Shape(object):\n\n    def __init__(self, shape_name):\n       self.shape = shape_name\n\n    @abstractmethod\n    def foo(self):\n        print \"bar\"\n        return\n\nclass Rectangle(Shape):\n    # note you don't need to do the constructor twice either\n    pass  \n\nr = Rectangle(\"x\")\nr.foo()\n</code></pre>\n\n<p>I didn't write the decorator.  It just occurred to me someone would have.  You can find it here: <a href=\"http://code.activestate.com/recipes/577666-abstract-method-decorator/\" rel=\"noreferrer\">http://code.activestate.com/recipes/577666-abstract-method-decorator/</a>  Good one jimmy2times.  Note the discussion at the bottom of that page r.e. type safety of the decorator.  (That could be fixed with the inspect module if anyone was so inclined). </p>\n"
                },
                {
                    "owner": {
                        "account_id": 133903,
                        "reputation": 26008,
                        "user_id": 335627,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a5ae92171e80ebdd258752e6e42687c9?s=256&d=identicon&r=PG",
                        "display_name": "kevpie",
                        "link": "https://stackoverflow.com/users/335627/kevpie"
                    },
                    "is_accepted": false,
                    "score": 371,
                    "last_activity_date": 1335126526,
                    "last_edit_date": 1335126526,
                    "creation_date": 1291767901,
                    "answer_id": 4383103,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Before abc was introduced you would see this frequently.</p>\n\n<pre><code>class Base(object):\n    def go(self):\n        raise NotImplementedError(\"Please Implement this method\")\n\n\nclass Specialized(Base):\n    def go(self):\n        print \"Consider me implemented\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 48,
                    "last_activity_date": 1291786659,
                    "last_edit_date": 1291786659,
                    "creation_date": 1291766480,
                    "answer_id": 4382961,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>See the <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">abc module</a>. Basically, you define <code>__metaclass__ = abc.ABCMeta</code> on the class, then decorate each abstract method with <code>@abc.abstractmethod</code>. Classes derived from this class cannot then be instantiated unless all abstract methods have been overridden.</p>\n\n<p>If your class is already using a metaclass, derive it from <code>ABCMeta</code> rather than <code>type</code> and you can continue to use your own metaclass.</p>\n\n<p>A cheap alternative (and the best practice before the <code>abc</code> module was introduced) would be to have all your abstract methods just raise an exception (<code>NotImplementedError</code> is a good one) so that classes derived from it would have to override that method to be useful. </p>\n\n<p>However, the <code>abc</code> solution is better because it keeps such classes from being instantiated at all (i.e., it \"fails faster\"), and also because you can provide a default or base implementation of each method that can be reached using the <code>super()</code> function in derived classes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 110293,
                        "reputation": 3076,
                        "user_id": 291907,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1a1e4c70bc81edc85371bc8777579446?s=256&d=identicon&r=PG",
                        "display_name": "Adam Norberg",
                        "link": "https://stackoverflow.com/users/291907/adam-norberg"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1291783175,
                    "last_edit_date": 1291783175,
                    "creation_date": 1291766631,
                    "answer_id": 4382972,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can't, with language primitives. As has been called out, the <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">abc package</a> provides this functionality in Python 2.6 and later, but there are no options for Python 2.5 and earlier. The <code>abc</code> package is not a new feature of Python; instead, it adds functionality by adding explicit \"does this class say it does this?\" checks, with manually-implemented consistency checks to cause an error during initialization if such declarations are made falsely.</p>\n\n<p>Python is a militantly dynamically-typed language. It does not specify language primitives to allow you to prevent a program from compiling because an object does not match type requirements; this can only be discovered at run time. If you require that a subclass implement a method, document that, and then just call the method in the blind hope that it will be there.</p>\n\n<p>If it's there, fantastic, it simply works; this is called <a href=\"http://en.wikipedia.org/wiki/Duck_typing\" rel=\"noreferrer\">duck typing</a>, and your object has quacked enough like a duck to satisfy the interface. This works just fine <em>even if <code>self</code> is the object you're calling such a method on</em>, for the purposes of mandatory overrides due to base methods that need specific implementations of features (generic functions), because <code>self</code> is a convention, not anything actually special.</p>\n\n<p>The exception is in <code>__init__</code>, because when your initializer is being called, the derived type's initializer hasn't, so it hasn't had the opportunity to staple its own methods onto the object yet.</p>\n\n<p>If the method was't implemented, you'll get an AttributeError (if it's not there at all) or a TypeError (if something by that name is there but it's not a function or it didn't have that signature). It's up to you how you handle that- either call it programmer error and let it crash the program (and it \"should\" be obvious to a python developer what causes that kind of error there- an unmet duck interface), or catch and handle those exceptions when you discover that your object didn't support what you wish it did. Catching AttributeError and TypeError is important in a lot of situations, actually.</p>\n"
                }
            ]
        },
        {
            "2244836": [
                {
                    "owner": {
                        "account_id": 441885,
                        "reputation": 62943,
                        "user_id": 832230,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/VqecB.png?s=256",
                        "display_name": "Asclepius",
                        "link": "https://stackoverflow.com/users/832230/asclepius"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1565456440,
                    "creation_date": 1565456440,
                    "answer_id": 57444083,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of 2019, <a href=\"https://pypi.org/project/atoma/\" rel=\"nofollow noreferrer\"><strong><code>atoma</code></strong></a> is a possible alternative to <code>feedparser</code>, although I have not used it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 32514,
                        "reputation": 76612,
                        "user_id": 90308,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=256&d=identicon&r=PG",
                        "display_name": "FogleBird",
                        "link": "https://stackoverflow.com/users/90308/foglebird"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1550498571,
                    "last_edit_date": 1550498571,
                    "creation_date": 1265901482,
                    "answer_id": 2245392,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using <a href=\"https://pypi.org/project/feedparser/\" rel=\"noreferrer\">feedparser</a> is a much better option than rolling your own with minidom or BeautifulSoup.</p>\n\n<ul>\n<li>It normalizes the differences between all versions of RSS and Atom so you don't have to have different code for each type.</li>\n<li>It's good about detecting different date formats and other variations in feeds.</li>\n<li>It automatically follows HTTP redirects.</li>\n<li>It sanitizes HTML content.</li>\n<li>It has support for ETag and Last-Modified headers so you can see if the feed has changed just by downloading the HTTP header and not the whole feed.</li>\n<li>It has support for authenticated feeds.</li>\n<li>It has support for HTTP proxies.</li>\n</ul>\n\n<p>Like others have mentioned, just try it.  It's like 2 lines of code to parse a feed.  My only complaint is that it just uses dictionaries as its data model and some attributes can be missing from the dictionary if they weren't in the feed, so you have to check for that in your code.  But the documentation is very clear on which attributes will always be in the dictionary and which might be missing.</p>\n\n<p>Finally, I can vouch for it, as I've written an application that uses it.  See here: <a href=\"http://www.feednotifier.com/\" rel=\"noreferrer\">http://www.feednotifier.com/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 62427,
                        "reputation": 3820,
                        "user_id": 185510,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/604d54fe0ba81afc693c64b9a66b0960?s=256&d=identicon&r=PG",
                        "display_name": "Andre Miras",
                        "link": "https://stackoverflow.com/users/185510/andre-miras"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1408053414,
                    "creation_date": 1408053414,
                    "answer_id": 25318203,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I know this is a very old topic, but for what it worth, I was using feedparser (Universal feed parser) version 5.1.3 and I recently swiched to <a href=\"https://github.com/jmoiron/speedparser\" rel=\"nofollow\">speedparser</a> (0.1.8) for performance reasons. It has pretty much the same interfaces, but run faster.</p>\n\n<p>I'm using it for an amateur <a href=\"https://github.com/kivy/python-for-android\" rel=\"nofollow\">Python-for-Android</a> application and speedparser runs about 5 times faster on my feeds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24717,
                        "reputation": 272302,
                        "user_id": 63051,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/b4b87a82355f286bb410cc1854389226?s=256&d=identicon&r=PG",
                        "display_name": "flybywire",
                        "link": "https://stackoverflow.com/users/63051/flybywire"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1265902150,
                    "last_edit_date": 1265902150,
                    "creation_date": 1265901408,
                    "answer_id": 2245384,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>Feedparser is very powerful, configurable and sooo easy to use. A very friendly learning curve, if at all.</strong></p>\n\n<p><strong>Example</strong></p>\n\n<p>Programatically determine how many answers your question has:</p>\n\n<pre><code>easy_install feedparser\npython -c 'import feedparser; print len(feedparser.parse(\"http://bit.ly/c785aj\")[\"entries\"])'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24717,
                        "reputation": 272302,
                        "user_id": 63051,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/b4b87a82355f286bb410cc1854389226?s=256&d=identicon&r=PG",
                        "display_name": "flybywire",
                        "link": "https://stackoverflow.com/users/63051/flybywire"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1265901990,
                    "creation_date": 1265901990,
                    "answer_id": 2245462,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I Strongly recommend feedparser.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 85867,
                        "reputation": 971,
                        "user_id": 239140,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/dff08bf764c02f733d2eb239b54759ff?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "owo",
                        "link": "https://stackoverflow.com/users/239140/owo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1265900492,
                    "creation_date": 1265900492,
                    "answer_id": 2245280,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you want an alternative, try xml.dom.minidom.\nLike \"Django is Python\", \"RSS is XML\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 56396,
                        "reputation": 176,
                        "user_id": 168934,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/951e04baaef9ea5e085fc69263272733?s=256&d=identicon&r=PG",
                        "display_name": "ZenGyro",
                        "link": "https://stackoverflow.com/users/168934/zengyro"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1265900450,
                    "creation_date": 1265900450,
                    "answer_id": 2245273,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In answer to your followup. You could use BeautifulSoup - but feedparser is much better geared towards RSS handing. </p>\n\n<p>Not to snark - but have you read feedparsers <a href=\"http://www.feedparser.org/docs/\" rel=\"nofollow noreferrer\">documentation</a>? I don't know how it could be simpler to use. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 27531,
                        "reputation": 5777,
                        "user_id": 72784,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/d7f633334011a5923b4dc743075b57eb?s=256&d=identicon&r=PG",
                        "display_name": "piotr",
                        "link": "https://stackoverflow.com/users/72784/piotr"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1265896762,
                    "creation_date": 1265896762,
                    "answer_id": 2244847,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://www.feedparser.org/\" rel=\"nofollow noreferrer\">http://www.feedparser.org/</a></p>\n\n<p>First hit on G.</p>\n"
                }
            ]
        },
        {
            "893162": [
                {
                    "owner": {
                        "account_id": 127000,
                        "reputation": 13353,
                        "user_id": 323874,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/281b7c1c63aaeb7acf149cc7d87f1b44?s=256&d=identicon&r=PG",
                        "display_name": "mindthief",
                        "link": "https://stackoverflow.com/users/323874/mindthief"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1671357787,
                    "last_edit_date": 1671357787,
                    "creation_date": 1354743967,
                    "answer_id": 13733057,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You might want to look into <a href=\"https://eclim.org/\" rel=\"nofollow noreferrer\">Eclim</a>, an Eclipse server that allows you to use Eclipse functionality from within your favorite text editor. For python-related functionality, it uses <a href=\"https://rope.sourceforge.net/\" rel=\"nofollow noreferrer\">Rope</a>, <a href=\"https://pypi.org/project/pyflakes/\" rel=\"nofollow noreferrer\">PyFlakes</a>, and <a href=\"https://web.archive.org/web/20220321195444/https://www.logilab.org/857\" rel=\"nofollow noreferrer\">PyLint</a> under the hood.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2643420,
                        "reputation": 1861,
                        "user_id": 2286617,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LlxFO.png?s=256",
                        "display_name": "Jan K. S.",
                        "link": "https://stackoverflow.com/users/2286617/jan-k-s"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1671357772,
                    "last_edit_date": 1671357772,
                    "creation_date": 1366560901,
                    "answer_id": 16133288,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've searched on Google for an app like this for a while, and I've found only options with heavy and ugly interfaces.</p>\n<p>Then I opened Mac App Store and found <a href=\"https://web.archive.org/web/20141109143606/http://krillapps.com:80/coderunner/\" rel=\"nofollow noreferrer\">CodeRunner</a>. Very nice and clean interface. Support many languages like Python, Lua, Perl, Ruby, Javascript, etc. The price is U$10, but it's worth it!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10893,
                        "reputation": 49499,
                        "user_id": 20774,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/3e32e31d4c24c1558abd6567f2ab60ba?s=256&d=identicon&r=PG",
                        "display_name": "James McMahon",
                        "link": "https://stackoverflow.com/users/20774/james-mcmahon"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1671357765,
                    "last_edit_date": 1671357765,
                    "creation_date": 1242916760,
                    "answer_id": 893266,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">Pydev</a> for <a href=\"https://www.eclipse.org/\" rel=\"nofollow noreferrer\">Eclipse</a>, as others have mentioned, is good.</p>\n<p><a href=\"https://netbeans.apache.org/\" rel=\"nofollow noreferrer\">Netbeans</a> has a beta Python plugin that is a little rough around the edges, but could turn into something really cool.</p>\n<p>Additionally there is a long list of programming centric text editors for the mac, that may or may not fit your needs.</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20221217012720/https://macromates.com/\" rel=\"nofollow noreferrer\">Textmate</a> - costs money, people love this program, but I haven't used it enough to see what all the fuss is about.</li>\n<li><a href=\"http://www.jedit.org/\" rel=\"nofollow noreferrer\">Jedit</a> - Java based text editor, has some nice features, but the startup time isn't great (due to Java).</li>\n<li><a href=\"https://web.archive.org/web/20120610040536/http://th.nao.ac.jp/MEMBER/zenitani/emacs-e.html\" rel=\"nofollow noreferrer\">CarbonEmacs</a> - Decent Emacs port.</li>\n<li><a href=\"https://aquamacs.org/\" rel=\"nofollow noreferrer\">AquaEmacs</a> - Better Emacs port.</li>\n<li><a href=\"https://www.barebones.com/products/TextWrangler/\" rel=\"nofollow noreferrer\">TextWrangler</a> - Lite, free (as in beer) verision of BBEdit.</li>\n<li><a href=\"https://www.barebones.com/products/bbedit/\" rel=\"nofollow noreferrer\">BBEdit</a> - The old guard. The defacto editor before Textmate stole its limelight. Expensive.</li>\n<li><a href=\"https://www.peterborgapps.com/smultron/\" rel=\"nofollow noreferrer\">Smultron</a> - Very nice editor, the UI is similar to Textmate.</li>\n<li><a href=\"https://docs.python.org/3/library/idle.html\" rel=\"nofollow noreferrer\">Idle</a> - Python's own little editor, has some nice features, but also some major problems. I've personally found it too unstable for my usage.</li>\n<li><a href=\"https://www.sublimetext.com/\" rel=\"nofollow noreferrer\">Sublime Text</a> - This is really sweet text editor that has some surprisingly good Python support.</li>\n<li><a href=\"https://www.jetbrains.com/pycharm/\" rel=\"nofollow noreferrer\">Pycharm</a> - Another solid full on IDE for Python.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1671357678,
                    "last_edit_date": 1671357678,
                    "creation_date": 1242915938,
                    "answer_id": 893189,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I usually use either <a href=\"https://www.activestate.com/products/komodo-edit/\" rel=\"nofollow noreferrer\">komodo edit</a> or <a href=\"https://aquamacs.org/\" rel=\"nofollow noreferrer\">aquamacs</a> with <a href=\"https://web.archive.org/web/20150428084244/http://rope.sourceforge.net:80/ropemacs.html\" rel=\"nofollow noreferrer\">ropemacs</a>.  Although I should warn you, IDE features won't be what you're used to if you're coming from a Java or C# background.  I personally find that powerful IDEs get in my way more than they help.</p>\n<p><strong>UPDATE</strong>:  I should also point out that if you have the money <a href=\"https://www.activestate.com/products/komodo-ide/\" rel=\"nofollow noreferrer\">Komodo IDE</a> is worth it.  It's the paid version of Komodo Edit.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 116948,
                        "reputation": 26389,
                        "user_id": 306478,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/f790d6d3f1a75a30f6e525890f1d1964?s=256&d=identicon&r=PG",
                        "display_name": "Bijan",
                        "link": "https://stackoverflow.com/users/306478/bijan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1523131157,
                    "last_edit_date": 1523131157,
                    "creation_date": 1374662920,
                    "answer_id": 17831787,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<h2><a href=\"https://code.visualstudio.com\" rel=\"nofollow noreferrer\">Visual Studio Code</a> + <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" rel=\"nofollow noreferrer\">Official Python Plugin</a></h2>\n\n<p>Here you see an overview of its current Python features:</p>\n\n<p><a href=\"https://code.visualstudio.com/docs/languages/python\" rel=\"nofollow noreferrer\">https://code.visualstudio.com/docs/languages/python</a></p>\n\n<h2><strike>Chocolat</h2>\n\n<p><a href=\"http://chocolatapp.com\" rel=\"nofollow noreferrer\">http://chocolatapp.com</a></p>\n\n<p>It's lightweight and offers Code Completion. Costs money.</strike></p>\n\n<p>EDIT:\nApparently Chocolat was an interesting option in 2013 but since then many others came up and development stalled. Nowadays I recommend Visual Studio Code + Python Plugin.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16202,
                        "reputation": 47472,
                        "user_id": 35060,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=256&d=identicon&r=PG",
                        "display_name": "ismail",
                        "link": "https://stackoverflow.com/users/35060/ismail"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1400677377,
                    "last_edit_date": 1400677377,
                    "creation_date": 1242915742,
                    "answer_id": 893174,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Eclipse with <a href=\"http://pydev.org/\" rel=\"noreferrer\">Pydev</a> works best for me on any platform.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 86502,
                        "reputation": 22423,
                        "user_id": 240490,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/536433ff8bf7f50dcab75a920a11d30a?s=256&d=identicon&r=PG",
                        "display_name": "Jonathan Eunice",
                        "link": "https://stackoverflow.com/users/240490/jonathan-eunice"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1372280819,
                    "last_edit_date": 1372280819,
                    "creation_date": 1326293576,
                    "answer_id": 8821307,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>\"Which editor/IDE for ...?\" is a longstanding way to start a \"My dog is too prettier than yours!\" slapfest. Nowadays most editors from <code>vim</code> upwards can be used, there are multiple good alternatives, and even IDEs that started as C or Java tools work pretty well with Python and other dynamic languages.</p>\n\n<p>That said, having tried a bunch of IDEs (Eclipse, NetBeans, XCode, Komodo, PyCharm, ...), I am a fan of ActiveState's Komodo IDE. I use it on Mac OS X primarily, though I've used it for years on Windows as well. The one license follows you to any platform. </p>\n\n<p>Komodo is well-integrated with popular ActiveState builds of the languages themselves (esp. for Windows), works well with the fabulous (and Pythonic) Mercurial change management system (among others), and has good-to-excellent abilities for core tasks like code editing, syntax coloring, code completion, real-time syntax checking, and visual debugging. It is a little weak when it comes to pre-integrated refactoring and code-check tools (e.g. rope, pylint), but it is extensible and has a good facility for integrating external and custom tools.</p>\n\n<p>Some of the things I like about Komodo go beyond the write-run-debug loop. ActiveState has long supported the development community (e.g. with free language builds, package repositories, a recipes site, ...), since before dynamic languages were the trend. The base Komodo Edit editor is free and open source, an extension of Mozilla's Firefox technologies. And Komodo is multi-lingual. I never end up doing just Python, just Perl, or just whatever. Komodo works with the core language (Python, Perl, Ruby, PHP, JavaScript) alongside supporting languages (XML, XSLT, SQL, X/HTML, CSS), non-dynamic languages (Java, C, etc.), and helpers (Makefiles, INI and config files, shell scripts, custom little languages, etc.) Others can do that too, but Komodo puts them all in once place, ready to go. It's a Swiss Army Knife for dynamic languages. (This is contra PyCharm, e.g., which is great itself, but I'd need like a half-dozen of JetBrains' individual IDEs to cover all the things I do).</p>\n\n<p>Komodo IDE is by no means perfect, and editors/IDEs are the ultimate YMMV choice. But I am regularly delighted to use it, and every year I re-up my support subscription quite happily. Indeed, I just remembered! That's coming up this month. Credit card: Out. I have no commercial connection to ActiveState--just a happy customer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 432580,
                        "reputation": 476,
                        "user_id": 817423,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e925b8fda704e705a4c9007d1346e6b3?s=256&d=identicon&r=PG",
                        "display_name": "jdsantiagojr",
                        "link": "https://stackoverflow.com/users/817423/jdsantiagojr"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1364524904,
                    "creation_date": 1364524904,
                    "answer_id": 15696543,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I really enjoy using PyCharm. <a href=\"http://www.jetbrains.com/pycharm/\">http://www.jetbrains.com/pycharm/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 512405,
                        "reputation": 8672,
                        "user_id": 914693,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/38e267e8fb98ec0779c9ab70485d58d5?s=256&d=identicon&r=PG",
                        "display_name": "linello",
                        "link": "https://stackoverflow.com/users/914693/linello"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1363377695,
                    "creation_date": 1363377695,
                    "answer_id": 15441162,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I like Spyder, it has many tools, such as profiling, intelligent indentation helper and a good autocompletion support</p>\n\n<p><a href=\"https://code.google.com/p/spyderlib/\" rel=\"noreferrer\">https://code.google.com/p/spyderlib/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1815935,
                        "reputation": 781,
                        "user_id": 1651012,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2749f0e0fd7db72f8076190d12a9e6d6?s=256&d=identicon&r=PG",
                        "display_name": "Nav",
                        "link": "https://stackoverflow.com/users/1651012/nav"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1362845811,
                    "last_edit_date": 1362845811,
                    "creation_date": 1362844064,
                    "answer_id": 15312606,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I may be a little late for this, but I would recommend <strong>Aptana Studio 3.x</strong> . Its a based on eclipse and has everything ready-to-go for <code>python</code>. It has very good support for <code>DJango, HTML5 and JQuery</code>. For me its a perfect web-development tool. I do <code>HTML5 and Android</code> development too, this way I do not need to keep switching different IDE's. It my all-in-one solution. </p>\n\n<p>Note: you need a good amount of RAM for this to be snazzy !! 4+ GB is awesome !!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 115364,
                        "reputation": 8780,
                        "user_id": 302969,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/a83f5.jpg?s=256",
                        "display_name": "Sagar Hatekar",
                        "link": "https://stackoverflow.com/users/302969/sagar-hatekar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1360180135,
                    "creation_date": 1360180135,
                    "answer_id": 14737493,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been using an Evaluation copy of <a href=\"http://www.sublimetext.com/\" rel=\"nofollow\"><code>Sublime Text</code></a>. What's good is it doesn't really expire. </p>\n\n<p>It's been good so far and was really easy to get started with. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1934205,
                        "reputation": 928,
                        "user_id": 1742878,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/673efd4e0a13fdb1bc5b4ec6d0fa14e8?s=256&d=identicon&r=PG",
                        "display_name": "Dallas",
                        "link": "https://stackoverflow.com/users/1742878/dallas"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1352358668,
                    "creation_date": 1352358668,
                    "answer_id": 13284195,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are looking for an interactive environment and not needing to code modules, I would suggest <a href=\"http://ipython.org/\" rel=\"nofollow\">IPython</a>.  Though this is developed with scientists/statisticians in mind, it will run just as well without any of the scientific packages installed.  The features are powerful, with code completion, integrated help, integrated debugging, etc., and it functions as a notebook with Markdown and MathJax integration.  By far the best choice for those that need powerful features without wishing to load megabytes of GUI into RAM--since it is browser based, it is used in your <em>always loaded</em> chrome/safari instance. ;-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 743405,
                        "reputation": 1889,
                        "user_id": 719397,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/F1dlt.jpg?s=256",
                        "display_name": "Tim",
                        "link": "https://stackoverflow.com/users/719397/tim"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1337374524,
                    "last_edit_date": 1337374524,
                    "creation_date": 1303406578,
                    "answer_id": 5747587,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>My 2 pennies, check out PyCharm\n<a href=\"http://www.jetbrains.com/pycharm/\">http://www.jetbrains.com/pycharm/</a></p>\n\n<p>(also multi-platform)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 38758,
                        "reputation": 350,
                        "user_id": 111443,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d6fb264d188b99af04490dd627db387?s=256&d=identicon&r=PG",
                        "display_name": "user111443",
                        "link": "https://stackoverflow.com/users/111443/user111443"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1243065159,
                    "creation_date": 1243065159,
                    "answer_id": 901101,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have tried many different (Kate, Eclipse, Scite, Vim, Komodo): each one have some glitches, either limited functions, or slow and unresponsive. Final choice after many years: Emacs + ropemacs + flymake. Rope project file open dialog is extremely quick. Rope refactoring and code assist functions are super helpful. Flymake shows syntax mistakes. Emacs is the most configurable editor. I am very happy with this config.  Python related part of config is here: public.halogen-dg.com browser/alex-emacs-settings/configs/cfg_python.el</p>\n"
                },
                {
                    "owner": {
                        "account_id": 32221,
                        "reputation": 5027,
                        "user_id": 89182,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/276d3b553a75e831c6bd099a35e53877?s=256&d=identicon&r=PG",
                        "display_name": "Jeff Ober",
                        "link": "https://stackoverflow.com/users/89182/jeff-ober"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242918222,
                    "creation_date": 1242918222,
                    "answer_id": 893407,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>TextMate or Panic's Coda. NetBeans works very well, if you want a full-blown kitchen sink IDE.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 878281,
                        "reputation": 1564,
                        "user_id": 110152,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1d2c44277afe19fcfd62efb264fb973b?s=256&d=identicon&r=PG",
                        "display_name": "lostlogic",
                        "link": "https://stackoverflow.com/users/110152/lostlogic"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1242916418,
                    "creation_date": 1242916418,
                    "answer_id": 893240,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>macvim + pyflakes.vim</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37350,
                        "reputation": 969,
                        "user_id": 106739,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/8da10c10bd0c80cf6407c1850b5896b4?s=256&d=identicon&r=PG",
                        "display_name": "Up.",
                        "link": "https://stackoverflow.com/users/106739/up"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242916373,
                    "creation_date": 1242916373,
                    "answer_id": 893233,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python support on netbeans is surprisingly good, and comes with most of the features you're looking for.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1242916188,
                    "creation_date": 1242916188,
                    "answer_id": 893215,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you have a budget for your IDE, you should give Wingware Professional a try, see wingware.com .</p>\n"
                },
                {
                    "owner": {
                        "account_id": 25549,
                        "reputation": 1037,
                        "user_id": 65712,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/ac9609181e2a852c602094f23f191ea8?s=256&d=identicon&r=PG",
                        "display_name": "jean",
                        "link": "https://stackoverflow.com/users/65712/jean"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1242916091,
                    "creation_date": 1242916091,
                    "answer_id": 893206,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I've used <a href=\"http://www.wingware.com/\" rel=\"nofollow noreferrer\">WingIDE</a> and have been very happy.  Intellisense is pretty good, some other things are a bit wacky but overall it's a very productive tool</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9437,
                        "reputation": 13697,
                        "user_id": 17443,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/abe006dc565c07bf484f7138a260c09c?s=256&d=identicon&r=PG",
                        "display_name": "Kostas Konstantinidis",
                        "link": "https://stackoverflow.com/users/17443/kostas-konstantinidis"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242915796,
                    "creation_date": 1242915796,
                    "answer_id": 893181,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>since you are familiar with Eclipse maybe you are interested in <a href=\"http://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">Pydev</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 14130,
                        "reputation": 409811,
                        "user_id": 28804,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=256&d=identicon&r=PG",
                        "display_name": "mipadi",
                        "link": "https://stackoverflow.com/users/28804/mipadi"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1242915783,
                    "creation_date": 1242915783,
                    "answer_id": 893179,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I use <a href=\"http://macromates.com/\" rel=\"noreferrer\">TextMate</a> for all my Python programming needs. It's not an IDE per se, but it does a lot of stuff that an IDE does (without all the cruft of an IDE). It has syntax highlighting, code folding, integration with various SCMs through the use of additional bundles (I know it supports SVN, Git, Mercurial, Darcs, and probably a few others). It's also quite extensible and customizable (again, through the use of bundles). It also has a basic concept of projects. One place where it doesn't shine, though, is in code completion; some bundles have limited support for code completion, but it's generally not as amazing as that of most language-specific IDEs. Given how awesome TextMate is, though, I don't know sacrificing that. TextMate's definitely made me much more productive.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17299,
                        "reputation": 7310,
                        "user_id": 38611,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/1eabc9d16eb242f16b504e5f6910a734?s=256&d=identicon&r=PG",
                        "display_name": "jbasko",
                        "link": "https://stackoverflow.com/users/38611/jbasko"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242915706,
                    "creation_date": 1242915706,
                    "answer_id": 893171,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Eclipse PyDev plugin.</p>\n\n<p><a href=\"http://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">http://pydev.sourceforge.net/</a></p>\n"
                }
            ]
        },
        {
            "2621674": [
                {
                    "owner": {
                        "account_id": 6787281,
                        "reputation": 791,
                        "user_id": 5225566,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/93d0c1dbcb7d08eaa6482c72a0f3cc4e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Dmitri",
                        "link": "https://stackoverflow.com/users/5225566/dmitri"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1439958640,
                    "creation_date": 1439958640,
                    "answer_id": 32086605,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use Numpy direct array indexing, as in MATLAB, Julia, ... </p>\n\n<pre><code>a = [10, 11, 12, 13, 14, 15];\ns = [1, 2, 5] ;\n\nimport numpy as np\nlist(np.array(a)[s])\n# [11, 12, 15]\n</code></pre>\n\n<p>Better yet, just stay with Numpy arrays</p>\n\n<pre><code>a = np.array([10, 11, 12, 13, 14, 15])\na[s]\n#array([11, 12, 15])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 108881,
                        "reputation": 2309,
                        "user_id": 288803,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a7957b6a2bdd38792e398a785d5d1dc8?s=256&d=identicon&r=PG",
                        "display_name": "lugte098",
                        "link": "https://stackoverflow.com/users/288803/lugte098"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1271072716,
                    "creation_date": 1271072716,
                    "answer_id": 2621730,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think you're looking for this:</p>\n\n<pre><code>elements = [10, 11, 12, 13, 14, 15]\nindices = (1,1,2,1,5)\n\nresult_list = [elements[i] for i in indices]    \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 34490,
                        "reputation": 5949,
                        "user_id": 97554,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c3bdada2addd08c8dbae280656b5e1e8?s=256&d=identicon&r=PG",
                        "display_name": "Charles Beattie",
                        "link": "https://stackoverflow.com/users/97554/charles-beattie"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1271072638,
                    "creation_date": 1271072638,
                    "answer_id": 2621722,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bounds checked:</p>\n\n<pre><code> [a[index] for index in (1,2,5,20) if 0 &lt;= index &lt; len(a)]\n # [11, 12, 15] \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 81091,
                        "reputation": 26863,
                        "user_id": 228885,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b26ec3c2769168c2cbc64cc3df9cdd9c?s=256&d=identicon&r=PG",
                        "display_name": "Juho Veps&#228;l&#228;inen",
                        "link": "https://stackoverflow.com/users/228885/juho-veps%c3%a4l%c3%a4inen"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1271072519,
                    "creation_date": 1271072519,
                    "answer_id": 2621714,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Try</p>\n\n<pre><code>numbers = range(10, 16)\nindices = (1, 1, 2, 1, 5)\n\nresult = [numbers[i] for i in indices]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 91,
                    "last_activity_date": 1271072262,
                    "creation_date": 1271072262,
                    "answer_id": 2621685,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Perhaps use this:</p>\n\n<pre><code>[a[i] for i in (1,2,5)]\n# [11, 12, 15]\n</code></pre>\n"
                }
            ]
        },
        {
            "24273130": [
                {
                    "owner": {
                        "account_id": 515061,
                        "reputation": 374369,
                        "user_id": 1240268,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/RN9Mw.jpg?s=256",
                        "display_name": "Andy Hayden",
                        "link": "https://stackoverflow.com/users/1240268/andy-hayden"
                    },
                    "is_accepted": true,
                    "score": 216,
                    "last_activity_date": 1403040465,
                    "creation_date": 1403040465,
                    "answer_id": 24273597,
                    "question_id": 24273130,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use iloc to access by position (rather than label):</p>\n\n<pre><code>In [11]: df = pd.DataFrame([[1, 2], [3, 4]], ['a', 'b'], ['A', 'B'])\n\nIn [12]: df\nOut[12]: \n   A  B\na  1  2\nb  3  4\n\nIn [13]: df.iloc[0]  # first row in a DataFrame\nOut[13]: \nA    1\nB    2\nName: a, dtype: int64\n\nIn [14]: df['A'].iloc[0]  # first item in a Series (Column)\nOut[14]: 1\n</code></pre>\n"
                }
            ]
        },
        {
            "7053551": [
                {
                    "owner": {
                        "account_id": 253841,
                        "reputation": 2311,
                        "user_id": 532799,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ea4b7ec02a61bd811006159e8f04ab6f?s=256&d=identicon&r=PG",
                        "display_name": "Sunhwan Jo",
                        "link": "https://stackoverflow.com/users/532799/sunhwan-jo"
                    },
                    "is_accepted": false,
                    "score": 85,
                    "last_activity_date": 1477271422,
                    "last_edit_date": 1477271422,
                    "creation_date": 1313272947,
                    "answer_id": 7053569,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>for k, m in self.materials.items():\n</code></pre>\n\n<p>example:</p>\n\n<pre><code>miles_dict = {'Monday':1, 'Tuesday':2.3, 'Wednesday':3.5, 'Thursday':0.9}\nfor k, v in miles_dict.items():\n    print(\"%s: %s\" % (k, v))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 29240,
                        "reputation": 141420,
                        "user_id": 78845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7jZ4g.png?s=256",
                        "display_name": "johnsyweb",
                        "link": "https://stackoverflow.com/users/78845/johnsyweb"
                    },
                    "is_accepted": true,
                    "score": 192,
                    "last_activity_date": 1417423906,
                    "last_edit_date": 1495539206,
                    "creation_date": 1313273471,
                    "answer_id": 7053615,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>self.materials</code> is a <a href=\"http://www.python.org/doc//current/library/stdtypes.html#mapping-types-dict\" rel=\"noreferrer\"><code>dict</code></a> and by default you are iterating over just the keys (which are strings).</p>\n\n<p>Since <code>self.materials</code> has more than two keys<a href=\"https://stackoverflow.com/questions/7053551/python-valueerror-too-many-values-to-unpack/7053615#comment34696354_7053615\">*</a>, they can't be unpacked into the <a href=\"http://www.python.org/doc//current/library/functions.html#tuple\" rel=\"noreferrer\"><code>tuple</code></a> \"<code>k, m</code>\", hence the <a href=\"http://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" rel=\"noreferrer\"><code>ValueError</code></a> <a href=\"http://docs.python.org/2/library/exceptions.html\" rel=\"noreferrer\">exception</a> is raised.</p>\n\n<p>In Python 2.<em>x</em>, to iterate over the keys and the values (the <a href=\"http://www.python.org/doc//current/library/functions.html#tuple\" rel=\"noreferrer\"><code>tuple</code></a> \"<code>k, m</code>\"), we use <a href=\"http://www.python.org/doc//current/library/stdtypes.html#dict.iteritems\" rel=\"noreferrer\"><code>self.materials.iteritems()</code></a>.</p>\n\n<p>However, since you're throwing the key away anyway, you may as well simply iterate over the dictionary's values:</p>\n\n<pre><code>for m in self.materials.itervalues():\n</code></pre>\n\n<p>In Python 3.<em>x</em>, prefer <a href=\"http://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"noreferrer\"><code>dict.values()</code></a> (which returns a <a href=\"http://docs.python.org/3/library/stdtypes.html#dict-views\" rel=\"noreferrer\">dictionary view object</a>):</p>\n\n<pre><code>for m in self.materials.values():\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248321,
                        "reputation": 61143,
                        "user_id": 523612,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4ae512dd708a619496d36b1f681f95e0?s=256&d=identicon&r=PG",
                        "display_name": "Karl Knechtel",
                        "link": "https://stackoverflow.com/users/523612/karl-knechtel"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1313273438,
                    "creation_date": 1313273438,
                    "answer_id": 7053611,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Iterating over a dictionary object itself actually gives you an iterator over its <em>keys</em>. Python is trying to unpack keys, which you get from <code>m.type + m.purity</code> into <code>(m, k)</code>.</p>\n\n<p>My crystal ball says <code>m.type</code> and <code>m.purity</code> are both strings, so your keys are also strings. Strings are iterable, so they can be unpacked; but iterating over the string gives you an iterator over its characters. So whenever <code>m.type + m.purity</code> is more than two characters long, you have too many values to unpack. (And whenever it's shorter, you have too few values to unpack.)</p>\n\n<p>To fix this, you can iterate explicitly over the <code>items</code> of the dict, which are the (key, value) pairs that you seem to be expecting. But if you only want the values, then just use the values.</p>\n\n<p>(In 2.x, <code>itervalues</code>, <code>iterkeys</code>, and <code>iteritems</code> are typically a better idea; the non-<code>iter</code> versions create a new list object containing the values/keys/items. For large dictionaries and trivial tasks within the iteration, this can be a lot slower than the <code>iter</code> versions which just set up an iterator.)</p>\n"
                }
            ]
        },
        {
            "606448": [
                {
                    "owner": {
                        "account_id": 21041,
                        "reputation": 688,
                        "user_id": 50845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hW2uO.jpg?s=256",
                        "display_name": "leancz",
                        "link": "https://stackoverflow.com/users/50845/leancz"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1609630364,
                    "last_edit_date": 1609630364,
                    "creation_date": 1236160525,
                    "answer_id": 609920,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Bruce Eckel's <em><a href=\"http://docs.linuxtone.org/ebooks/Python/Thinking_In_Python.pdf\" rel=\"nofollow noreferrer\">Thinking in Python</a></em> leans heavily on Design Patterns</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10900,
                        "reputation": 449,
                        "user_id": 20793,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4c6339b58b695fc734ed3fc4e98bdae6?s=256&d=identicon&r=PG",
                        "display_name": "Ed.",
                        "link": "https://stackoverflow.com/users/20793/ed"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1236089025,
                    "score": 153,
                    "last_activity_date": 1546039954,
                    "last_edit_date": 1546039954,
                    "creation_date": 1236089025,
                    "answer_id": 606490,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Some overlap in these</p>\n\n<p><a href=\"https://web.archive.org/web/20180504173504/http://ivory.idyll.org/articles/advanced-swc/\" rel=\"nofollow noreferrer\">Intermediate and Advanced Software Carpentry in Python</a></p>\n\n<p><a href=\"https://web.archive.org/web/20180411011411/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html\" rel=\"nofollow noreferrer\">Code Like a Pythonista: Idiomatic Python</a></p>\n\n<p><a href=\"https://web.archive.org/web/20120118192448/http://jaynes.colorado.edu/PythonIdioms.html\" rel=\"nofollow noreferrer\">Python Idioms and Efficiency</a></p>\n\n<p><a href=\"http://www.youtube.com/watch?v=0vJJlVBVTFg\" rel=\"nofollow noreferrer\">Google Developers Day US - Python Design Patterns</a></p>\n\n<p>Another resource is by example at the <a href=\"https://github.com/ActiveState/code\" rel=\"nofollow noreferrer\">Python Recipes</a>.  A good number do not follow best practices but you can find some patterns in there that are useful</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16121,
                        "reputation": 36794,
                        "user_id": 34813,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/16afab0e0815eb7203cda86555fd322a?s=256&d=identicon&r=PG",
                        "display_name": "Esteban K&#252;ber",
                        "link": "https://stackoverflow.com/users/34813/esteban-k%c3%bcber"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1269378394,
                    "creation_date": 1269378394,
                    "answer_id": 2503633,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Something you can use to simplify your code when calling attributes on objects that might or might not exist is to use the <a href=\"http://code.activestate.com/recipes/68205-null-object-design-pattern/\" rel=\"noreferrer\">Null Object Design Pattern</a> (to which I was introduced in <a href=\"http://books.google.com.ar/books?id=Q0s6Vgb98CQC&amp;pg=PT311&amp;lpg=PT311&amp;dq=Null+object+python+cookbook&amp;source=bl&amp;ots=hc3368UkpC&amp;sig=qRrDqvZwg4FIoMuKo3JJhI7Bu_g&amp;hl=es&amp;ei=TiqpS5jZEMuVtgf08YGnAQ&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&amp;ved=0CBYQ6AEwAw#v=onepage&amp;q=&amp;f=false\" rel=\"noreferrer\">Python Cookbook</a>).</p>\n\n<blockquote>\n  <p>Roughly, the goal with Null objects is to provide an 'intelligent'\n  replacement for the often used primitive data type None in Python or\n  Null (or Null pointers) in other languages. These are used for many\n  purposes including the important case where one member of some group \n  of otherwise similar elements is special for whatever reason. Most \n  often this results in conditional statements to distinguish between\n  ordinary elements and the primitive Null value.</p>\n</blockquote>\n\n<p>This object just eats the lack of attribute error, and you can avoid checking for their existence.</p>\n\n<p>It's nothing more than</p>\n\n<pre><code>class Null(object):\n\n    def __init__(self, *args, **kwargs):\n        \"Ignore parameters.\"\n        return None\n\n    def __call__(self, *args, **kwargs):\n        \"Ignore method calls.\"\n        return self\n\n    def __getattr__(self, mname):\n        \"Ignore attribute requests.\"\n        return self\n\n    def __setattr__(self, name, value):\n        \"Ignore attribute setting.\"\n        return self\n\n    def __delattr__(self, name):\n        \"Ignore deleting attributes.\"\n        return self\n\n    def __repr__(self):\n        \"Return a string representation.\"\n        return \"&lt;Null&gt;\"\n\n    def __str__(self):\n        \"Convert to a string and return it.\"\n        return \"Null\"\n</code></pre>\n\n<p>With this, if you do <code>Null(\"any\", \"params\", \"you\", \"want\").attribute_that_doesnt_exists()</code> it won't explode, but just silently become the equivalent of <code>pass</code>.</p>\n\n<p>Normally you'd do something like</p>\n\n<pre><code>if obj.attr:\n    obj.attr()\n</code></pre>\n\n<p>With this, you just do:</p>\n\n<pre><code>obj.attr()\n</code></pre>\n\n<p>and forget about it. Beware that extensive use of the <code>Null</code> object can potentially hide bugs in your code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 560994,
                        "reputation": 3051,
                        "user_id": 63514,
                        "user_type": "unregistered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/7983d3f4a6f057be951cc0a8b4f1aea3?s=256&d=identicon&r=PG",
                        "display_name": "Anonymous",
                        "link": "https://stackoverflow.com/users/63514/anonymous"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1236168969,
                    "creation_date": 1236168969,
                    "answer_id": 610297,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Type</p>\n\n<pre><code>&gt;&gt;&gt; import this\n</code></pre>\n\n<p>in a Python console.</p>\n\n<p>Although this is usually treated as a (fine!) joke, it contains a couple of valid python-specific axioms.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6771,
                        "reputation": 21436,
                        "user_id": 11515,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/Ck7tu.jpg?s=256",
                        "display_name": "Gilad Naor",
                        "link": "https://stackoverflow.com/users/11515/gilad-naor"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1236089156,
                    "creation_date": 1236089156,
                    "answer_id": 606498,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You may also wish to read this <a href=\"http://people.csail.mit.edu/gregs/ref-dyn-patterns.html\" rel=\"nofollow noreferrer\">article</a> (select the .pdf file), which discusses Design Patterns in dynamic object oriented languages (i.e. Python). To quote the page:</p>\n\n<blockquote>\n  <p>This paper explores how the patterns from the \"Gang of Four\", or \"GOF\" book, as it is often called, appear when similar problems are addressed using a dynamic, higher-order, object-oriented programming language. Some of the patterns disappear -- that is, they are supported directly by language features, some patterns are simpler or have a different focus, and some are essentially unchanged. </p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346708,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1236088124,
                    "creation_date": 1236088124,
                    "answer_id": 606453,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can get started <a href=\"http://www.python.org/workshops/1997-10/proceedings/savikko.html\" rel=\"noreferrer\">here</a> and <a href=\"http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html\" rel=\"noreferrer\">here</a>.  </p>\n\n<p>For a more in depth look at design pattners you should look at <a href=\"http://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612\" rel=\"noreferrer\">Design Patterns: Elements of Reusable Object-Oriented Software</a>.  The source code is not in Python, but it doesn't need to be for you to understand the patterns. </p>\n"
                }
            ]
        },
        {
            "41492721": [
                {
                    "owner": {
                        "account_id": 3170970,
                        "reputation": 20235,
                        "user_id": 2679935,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/wU0qy.jpg?s=256",
                        "display_name": "julienc",
                        "link": "https://stackoverflow.com/users/2679935/julienc"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1569588480,
                    "last_edit_date": 1569588480,
                    "creation_date": 1483644624,
                    "answer_id": 41493168,
                    "question_id": 41492721,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's possible to use <code>request.view_args</code>.\nThe <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.view_args\" rel=\"noreferrer\">documentation</a> defines it this way:</p>\n\n<blockquote>\n  <p>A dict of view arguments that matched the request. </p>\n</blockquote>\n\n<p>Here's an example:</p>\n\n<pre><code>@app.route(\"/data/&lt;section&gt;\")\ndef data(section):\n    assert section == request.view_args['section']\n</code></pre>\n"
                }
            ]
        },
        {
            "2597104": [
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1416960293,
                    "last_edit_date": 1416960293,
                    "creation_date": 1270696421,
                    "answer_id": 2597351,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Probably not what you are hoping for, but usually you would want to have a <code>break</code> after setting <code>find</code> to <code>True</code></p>\n\n<pre><code>for word1 in buf1: \n    find = False \n    for word2 in buf2: \n        ... \n        if res == res1: \n            print \"BINGO \" + word1 + \":\" + word2 \n            find = True \n            break             # &lt;-- break here too\n    if find: \n        break \n</code></pre>\n\n<p>Another way is to use a generator expression to squash the <code>for</code> into a single loop</p>\n\n<pre><code>for word1, word2 in ((w1, w2) for w1 in buf1 for w2 in buf2):\n    ... \n    if res == res1: \n        print \"BINGO \" + word1 + \":\" + word2\n        break \n</code></pre>\n\n<p>You may also consider using <code>itertools.product</code></p>\n\n<pre><code>from itertools import product\nfor word1, word2 in product(buf1, buf2):\n    ... \n    if res == res1: \n        print \"BINGO \" + word1 + \":\" + word2\n        break \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 20204,
                        "reputation": 676,
                        "user_id": 48063,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1ad090ce5daf76c3549f0970637704be?s=256&d=identicon&r=PG",
                        "display_name": "magcius",
                        "link": "https://stackoverflow.com/users/48063/magcius"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1336881666,
                    "last_edit_date": 1336881666,
                    "creation_date": 1270696515,
                    "answer_id": 2597355,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Most times you can use a number of methods to make a single loop that does the same thing as a double loop.</p>\n\n<p>In your example, you can use <a href=\"http://docs.python.org/library/itertools.html#itertools.product\" rel=\"noreferrer\">itertools.product</a> to replace your code snippet with</p>\n\n<pre><code>import itertools\nfor word1, word2 in itertools.product(buf1, buf2):\n    if word1 == word2:\n        print \"BINGO \" + word1 + \":\" + word2\n        break\n</code></pre>\n\n<p>The other itertools functions are good for other patterns too.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37905,
                        "reputation": 6956,
                        "user_id": 108533,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/c2dfddeae5eb2b4cb24780d35c8c3f7f?s=256&d=identicon&r=PG",
                        "display_name": "Guard",
                        "link": "https://stackoverflow.com/users/108533/guard"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1293620791,
                    "creation_date": 1293620791,
                    "answer_id": 4553525,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The recommended way in Python for breaking nested loops is... Exception</p>\n\n<pre><code>class Found(Exception): pass\ntry:\n    for i in range(100):\n        for j in range(1000):\n            for k in range(10000):\n               if i + j + k == 777:\n                  raise Found\nexcept Found:\n    print i, j, k \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 117680,
                        "reputation": 21868,
                        "user_id": 308066,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/9fe764ce8d45fcf5027e811b9cd113c1?s=256&d=identicon&r=PG",
                        "display_name": "dkamins",
                        "link": "https://stackoverflow.com/users/308066/dkamins"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1270692805,
                    "creation_date": 1270692805,
                    "answer_id": 2597129,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Refactor using functions so you can return when you find your \"bingo\".</p>\n\n<p>The proposal to allow explicit breaking out of nested loops has been rejected:\n<a href=\"http://www.python.org/dev/peps/pep-3136/\" rel=\"noreferrer\">http://www.python.org/dev/peps/pep-3136/</a></p>\n"
                }
            ]
        },
        {
            "10043636": [
                {
                    "owner": {
                        "account_id": 14833753,
                        "reputation": 1852,
                        "user_id": 10712525,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-FTfSB070F80/AAAAAAAAAAI/AAAAAAAAFAY/Ylb6AQCPcdk/photo.jpg?sz=256",
                        "display_name": "Lucas Vazquez",
                        "link": "https://stackoverflow.com/users/10712525/lucas-vazquez"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1587222278,
                    "creation_date": 1587222278,
                    "answer_id": 61291323,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use the following with python 3.8</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>string4 = f'{string1}{string2}{string3}'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 478759,
                        "reputation": 1412,
                        "user_id": 891046,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/494e2cbdc7bb8b5d6e2eeb1778ae5cf6?s=256&d=identicon&r=PG",
                        "display_name": "Duke",
                        "link": "https://stackoverflow.com/users/891046/duke"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1483534181,
                    "creation_date": 1483534181,
                    "answer_id": 41464254,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>According to Python docs, using str.join() will give you performance consistence across various implementations of Python. Although CPython optimizes away the quadratic behavior of s = s + t, other Python implementations may not.</p>\n\n<blockquote>\n  <p><strong>CPython implementation detail</strong>: If s and t are both strings, some\n  Python implementations such as CPython can usually perform an in-place\n  optimization for assignments of the form s = s + t or s += t. When\n  applicable, this optimization makes quadratic run-time much less\n  likely. This optimization is both version and implementation\n  dependent. For performance sensitive code, it is preferable to use the\n  str.join() method which assures consistent linear concatenation\n  performance across versions and implementations.</p>\n</blockquote>\n\n<p><a href=\"https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange\" rel=\"nofollow noreferrer\">Sequence Types in Python docs</a> (see the foot note [6])</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6311020,
                        "reputation": 667,
                        "user_id": 5898079,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/64af4abd2448889cf3589f53d534541a?s=256&d=identicon&r=PG",
                        "display_name": "muhammad ali e",
                        "link": "https://stackoverflow.com/users/5898079/muhammad-ali-e"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1461934232,
                    "last_edit_date": 1461934232,
                    "creation_date": 1461933268,
                    "answer_id": 36938478,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>''.join([a, b])</strong> is better solution than <strong>+</strong>.</p>\n\n<p>Because Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such)</p>\n\n<p>form a += b or a = a + b is fragile even in CPython and isn't present at all in implementations <strong>that don't use</strong> <strong>refcounting</strong> <em>(reference counting is a technique of storing the number of references, pointers, or handles to a resource such as an object, block of memory, disk space or other resource</em>)</p>\n\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/#programming-recommendations\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0008/#programming-recommendations</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 324031,
                        "reputation": 13105,
                        "user_id": 644388,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ba13c00b2032c0eea1e2e5bf2725a80e?s=256&d=identicon&r=PG",
                        "display_name": "ggozad",
                        "link": "https://stackoverflow.com/users/644388/ggozad"
                    },
                    "is_accepted": true,
                    "score": 132,
                    "last_activity_date": 1452429868,
                    "last_edit_date": 1452429868,
                    "creation_date": 1333717877,
                    "answer_id": 10043957,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is nothing wrong in concatenating <em>two</em> strings with <code>+</code>. Indeed it's easier to read than <code>''.join([a, b])</code>.</p>\n\n<p>You are right though that concatenating more than 2 strings with <code>+</code> is an O(n^2) operation (compared to O(n) for <code>join</code>) and thus becomes inefficient. However this has not to do with using a loop. Even <code>a + b + c + ...</code> is O(n^2), the reason being that each concatenation produces a new string.</p>\n\n<p>CPython2.4 and above try to mitigate that, but it's still advisable to use <code>join</code> when concatenating more than 2 strings.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 121808,
                        "reputation": 83306,
                        "user_id": 315168,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=256&d=identicon&r=PG",
                        "display_name": "Mikko Ohtamaa",
                        "link": "https://stackoverflow.com/users/315168/mikko-ohtamaa"
                    },
                    "is_accepted": false,
                    "score": 51,
                    "last_activity_date": 1333735265,
                    "last_edit_date": 1333735265,
                    "creation_date": 1333716364,
                    "answer_id": 10043677,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Plus operator is perfectly fine solution to concatenate <strong>two</strong> Python strings. But if you keep adding more than two strings (n > 25) , you might want to think something else.</p>\n\n<p><code>''.join([a, b, c])</code> trick is a performance optimization. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 234199,
                        "reputation": 9305,
                        "user_id": 500202,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7c0f8622f992b847d49c77cdbec81c95?s=256&d=identicon&r=PG",
                        "display_name": "Izkata",
                        "link": "https://stackoverflow.com/users/500202/izkata"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1333722537,
                    "creation_date": 1333722537,
                    "answer_id": 10044897,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>When working with multiple people, it's sometimes difficult to know exactly what's happening.  Using a format string instead of concatenation can avoid one particular annoyance that's happened a whole ton of times to us:</p>\n\n<p>Say, a function requires an argument, and you write it expecting to get a string:</p>\n\n<pre><code>In [1]: def foo(zeta):\n   ...:     print 'bar: ' + zeta\n\nIn [2]: foo('bang')\nbar: bang\n</code></pre>\n\n<p>So, this function may be used pretty often throughout the code.  Your coworkers may know exactly what it does, but not necessarily be fully up-to-speed on the internals, and may not know that the function expects a string.  And so they may end up with this:</p>\n\n<pre><code>In [3]: foo(23)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n\n/home/izkata/&lt;ipython console&gt; in &lt;module&gt;()\n\n/home/izkata/&lt;ipython console&gt; in foo(zeta)\n\nTypeError: cannot concatenate 'str' and 'int' objects\n</code></pre>\n\n<p>There would be no problem if you just used a format string:</p>\n\n<pre><code>In [1]: def foo(zeta):\n   ...:     print 'bar: %s' % zeta\n   ...:     \n   ...:     \n\nIn [2]: foo('bang')\nbar: bang\n\nIn [3]: foo(23)\nbar: 23\n</code></pre>\n\n<p>The same is true for all types of objects that define <code>__str__</code>, which may be passed in as well:</p>\n\n<pre><code>In [1]: from datetime import date\n\nIn [2]: zeta = date(2012, 4, 15)\n\nIn [3]: print 'bar: ' + zeta\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n\n/home/izkata/&lt;ipython console&gt; in &lt;module&gt;()\n\nTypeError: cannot concatenate 'str' and 'datetime.date' objects\n\nIn [4]: print 'bar: %s' % zeta\nbar: 2012-04-15\n</code></pre>\n\n<p>So yes:  If you can use a format string <em>do it</em> and take advantage of what Python has to offer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1370770,
                        "reputation": 13877,
                        "user_id": 1306033,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2173914b52cdfca88c60aa3bb1bd43a?s=256&d=identicon&r=PG",
                        "display_name": "Michael Slade",
                        "link": "https://stackoverflow.com/users/1306033/michael-slade"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1333718886,
                    "creation_date": 1333718886,
                    "answer_id": 10044139,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have done a quick test:</p>\n\n<pre><code>import sys\n\nstr = e = \"a xxxxxxxxxx very xxxxxxxxxx long xxxxxxxxxx string xxxxxxxxxx\\n\"\n\nfor i in range(int(sys.argv[1])):\n    str = str + e\n</code></pre>\n\n<p>and timed it:</p>\n\n<pre><code>mslade@mickpc:/binks/micks/ruby/tests$ time python /binks/micks/junk/strings.py  8000000\n8000000 times\n\nreal    0m2.165s\nuser    0m1.620s\nsys     0m0.540s\nmslade@mickpc:/binks/micks/ruby/tests$ time python /binks/micks/junk/strings.py  16000000\n16000000 times\n\nreal    0m4.360s\nuser    0m3.480s\nsys     0m0.870s\n</code></pre>\n\n<p>There is apparently an optimisation for the <code>a = a + b</code> case.  It does not exhibit O(n^2) time as one might suspect.</p>\n\n<p>So at least in terms of performance, using <code>+</code> is fine.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 950850,
                        "reputation": 63627,
                        "user_id": 977038,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=256&d=identicon&r=PG",
                        "display_name": "Abhijit",
                        "link": "https://stackoverflow.com/users/977038/abhijit"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1333718682,
                    "creation_date": 1333718682,
                    "answer_id": 10044103,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The assumption that one should never, ever use + for string concatenation, but instead always use ''.join may be a myth. It is true that using <code>+</code> creates unnecessary temporary copies of immutable string object but the other not oft quoted fact is that calling <code>join</code> in a loop would generally add the overhead of <code>function call</code>. Lets take your example.</p>\n\n<p>Create two lists, one from the linked SO question and another a bigger fabricated</p>\n\n<pre><code>&gt;&gt;&gt; myl1 = ['A','B','C','D','E','F']\n&gt;&gt;&gt; myl2=[chr(random.randint(65,90)) for i in range(0,10000)]\n</code></pre>\n\n<p>Lets create two functions, <code>UseJoin</code> and <code>UsePlus</code> to use the respective <code>join</code> and <code>+</code> functionality.</p>\n\n<pre><code>&gt;&gt;&gt; def UsePlus():\n    return [myl[i] + myl[i + 1] for i in range(0,len(myl), 2)]\n\n&gt;&gt;&gt; def UseJoin():\n    [''.join((myl[i],myl[i + 1])) for i in range(0,len(myl), 2)]\n</code></pre>\n\n<p>Lets run timeit with the first list</p>\n\n<pre><code>&gt;&gt;&gt; myl=myl1\n&gt;&gt;&gt; t1=timeit.Timer(\"UsePlus()\",\"from __main__ import UsePlus\")\n&gt;&gt;&gt; t2=timeit.Timer(\"UseJoin()\",\"from __main__ import UseJoin\")\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t1.timeit(number=100000)/100000)\n2.48 usec/pass\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t2.timeit(number=100000)/100000)\n2.61 usec/pass\n&gt;&gt;&gt; \n</code></pre>\n\n<p>They have almost the same runtime.</p>\n\n<p>Lets use cProfile</p>\n\n<pre><code>&gt;&gt;&gt; myl=myl2\n&gt;&gt;&gt; cProfile.run(\"UsePlus()\")\n         5 function calls in 0.001 CPU seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.001    0.001    0.001    0.001 &lt;pyshell#1376&gt;:1(UsePlus)\n        1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.000    0.000    0.000    0.000 {len}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n        1    0.000    0.000    0.000    0.000 {range}\n\n\n&gt;&gt;&gt; cProfile.run(\"UseJoin()\")\n         5005 function calls in 0.029 CPU seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.015    0.015    0.029    0.029 &lt;pyshell#1388&gt;:1(UseJoin)\n        1    0.000    0.000    0.029    0.029 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.000    0.000    0.000    0.000 {len}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n     5000    0.014    0.000    0.014    0.000 {method 'join' of 'str' objects}\n        1    0.000    0.000    0.000    0.000 {range}\n</code></pre>\n\n<p>And it looks that using Join, results in unnecessary function calls which could add to the overhead.</p>\n\n<p>Now coming back to the question. Should one discourage the use of <code>+</code> over <code>join</code> in all cases?</p>\n\n<p>I believe no, things should be taken into consideration</p>\n\n<ol>\n<li>Length of the String in Question</li>\n<li>No of Concatenation Operation.</li>\n</ol>\n\n<p>And off-course in a development pre-mature optimization is evil. </p>\n"
                }
            ]
        },
        {
            "5333244": [
                {
                    "owner": {
                        "account_id": 319637,
                        "reputation": 2426,
                        "user_id": 637499,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/3487db152b9efb817711678b7b00db27?s=256&d=identicon&r=PG",
                        "display_name": "tiagoboldt",
                        "link": "https://stackoverflow.com/users/637499/tiagoboldt"
                    },
                    "is_accepted": true,
                    "score": 56,
                    "last_activity_date": 1576932769,
                    "last_edit_date": 1576932769,
                    "creation_date": 1300319967,
                    "answer_id": 5333261,
                    "question_id": 5333244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from PIL import Image\n\nimage = Image.open('File.jpg')\nimage.show()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 332610,
                        "reputation": 1741,
                        "user_id": 658011,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/fe4dc5ea02ac73b9981bcc549a7a288c?s=256&d=identicon&r=PG",
                        "display_name": "dLobatog",
                        "link": "https://stackoverflow.com/users/658011/dlobatog"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1481102119,
                    "last_edit_date": 1481102119,
                    "creation_date": 1300319986,
                    "answer_id": 5333263,
                    "question_id": 5333244,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Don't forget to include</p>\n\n<pre><code>import Image\n</code></pre>\n\n<p>In order to show it use this :</p>\n\n<pre><code>Image.open('pathToFile').show()\n</code></pre>\n"
                }
            ]
        },
        {
            "44409084": [
                {
                    "owner": {
                        "account_id": 5787146,
                        "reputation": 12251,
                        "user_id": 4565943,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://i.sstatic.net/ju2U4.jpg?s=256",
                        "display_name": "&#201;be Isaac",
                        "link": "https://stackoverflow.com/users/4565943/%c3%89be-isaac"
                    },
                    "is_accepted": true,
                    "score": 53,
                    "last_activity_date": 1624615073,
                    "last_edit_date": 1624615073,
                    "creation_date": 1496828856,
                    "answer_id": 44409124,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The answer lies in your question:</p>\n<pre><code>np.array(list(zip(a,b)))\n</code></pre>\n<br>\n<p><strong>Edit:</strong></p>\n<p>Although my post gives the answer as requested by the OP, the conversion to list and back to NumPy array takes some overhead (noticeable for large arrays).</p>\n<p>Hence, <code>dstack</code> would be a computationally efficient alternative  (ref. @zipa's answer).  I was unaware of <code>dstack</code> at the time of posting this answer so credits to @zipa for introducing it to this post.</p>\n<p><strong>Edit 2:</strong></p>\n<p>As can be seen in the <a href=\"https://stackoverflow.com/questions/18730044/converting-two-lists-into-a-matrix\">duplicate question</a>, <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.c_.html\" rel=\"noreferrer\"><code>np.c_</code></a> is even shorter than <code>np.dstack</code>.</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.arange(1, 6)\n&gt;&gt;&gt; b = np.arange(6, 11)\n&gt;&gt;&gt; \n&gt;&gt;&gt; a\narray([1, 2, 3, 4, 5])\n&gt;&gt;&gt; b\narray([ 6,  7,  8,  9, 10])\n&gt;&gt;&gt; np.c_[a, b]\narray([[ 1,  6],\n       [ 2,  7],\n       [ 3,  8],\n       [ 4,  9],\n       [ 5, 10]])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7667854,
                        "reputation": 27804,
                        "user_id": 5811078,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/NlknE.png?s=256",
                        "display_name": "zipa",
                        "link": "https://stackoverflow.com/users/5811078/zipa"
                    },
                    "is_accepted": false,
                    "score": 176,
                    "last_activity_date": 1567362123,
                    "last_edit_date": 1567362123,
                    "creation_date": 1496828979,
                    "answer_id": 44409182,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have numpy arrays you can use <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html\" rel=\"noreferrer\"><code>dstack()</code></a>:</p>\n\n<pre><code>import numpy as np\n\na = np.array([1,2,3,4,5])\nb = np.array([6,7,8,9,10])\n\nc = np.dstack((a,b))\n#or\nd = np.column_stack((a,b))\n\n&gt;&gt;&gt; c\narray([[[ 1,  6],\n        [ 2,  7],\n        [ 3,  8],\n        [ 4,  9],\n        [ 5, 10]]])\n&gt;&gt;&gt; d\narray([[ 1,  6],\n       [ 2,  7],\n       [ 3,  8],\n       [ 4,  9],\n       [ 5, 10]])\n\n&gt;&gt;&gt; c.shape\n(1, 5, 2)\n&gt;&gt;&gt; d.shape\n(5, 2)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5777412,
                        "reputation": 5930,
                        "user_id": 4559110,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/W5NZo.jpg?s=256",
                        "display_name": "akash karothiya",
                        "link": "https://stackoverflow.com/users/4559110/akash-karothiya"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1496828865,
                    "creation_date": 1496828865,
                    "answer_id": 44409128,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <code>zip</code></p>\n\n<pre><code>np.array(list(zip(a,b)))\narray([[ 1,  6],\n   [ 2,  7],\n   [ 3,  8],\n   [ 4,  9],\n   [ 5, 10]])\n</code></pre>\n"
                }
            ]
        },
        {
            "3899645": [
                {
                    "owner": {
                        "account_id": 195757,
                        "reputation": 15142,
                        "user_id": 438838,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/qaPyF.jpg?s=256",
                        "display_name": "dheerosaur",
                        "link": "https://stackoverflow.com/users/438838/dheerosaur"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1286711249,
                    "creation_date": 1286711249,
                    "answer_id": 3900161,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you prefer extend over list comprehensions:</p>\n\n<pre><code>a = []\nfor x, y in l:\n    a.extend([x]*y)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63644,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1286707829,
                    "creation_date": 1286707829,
                    "answer_id": 3900001,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; sum([[item]*count for item,count in a],[])\n['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 63538,
                        "reputation": 67770,
                        "user_id": 188031,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/p2YIF.jpg?s=256",
                        "display_name": "tokland",
                        "link": "https://stackoverflow.com/users/188031/tokland"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1286701289,
                    "creation_date": 1286701289,
                    "answer_id": 3899680,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>An <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\">itertools</a> approach:</p>\n\n<pre><code>import itertools\n\ndef flatten(it):\n    return itertools.chain.from_iterable(it)\n\npairs = [['a',2], ['b',2], ['c',1]]\nflatten(itertools.repeat(item, times) for (item, times) in pairs)\n# ['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 68828,
                        "reputation": 25481,
                        "user_id": 200609,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://i.sstatic.net/YSVRw.jpg?s=256",
                        "display_name": "Richard Fearn",
                        "link": "https://stackoverflow.com/users/200609/richard-fearn"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1286700904,
                    "creation_date": 1286700904,
                    "answer_id": 3899664,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>import operator\na = [['a',2], ['b',2], ['c',1]]\nnums = [[x[0]]*x[1] for x in a]\nnums = reduce(operator.add, nums)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35328,
                        "reputation": 25604,
                        "user_id": 100020,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/7b137a205dff52b6471dfd17158c8b8f?s=256&d=identicon&r=PG",
                        "display_name": "sdcvvc",
                        "link": "https://stackoverflow.com/users/100020/sdcvvc"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1286700765,
                    "creation_date": 1286700765,
                    "answer_id": 3899661,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; [i for i, n in a for k in range(n)]\n['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": true,
                    "score": 65,
                    "last_activity_date": 1286700712,
                    "creation_date": 1286700712,
                    "answer_id": 3899658,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Stacked LCs.</p>\n\n<pre><code>[y for x in a for y in [x[0]] * x[1]]\n</code></pre>\n"
                }
            ]
        },
        {
            "10125568": [
                {
                    "owner": {
                        "account_id": 9114511,
                        "reputation": 1699,
                        "user_id": 6782000,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UY08r.jpg?s=256",
                        "display_name": "Deepak Sharma",
                        "link": "https://stackoverflow.com/users/6782000/deepak-sharma"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1617702184,
                    "last_edit_date": 1617702184,
                    "creation_date": 1568981640,
                    "answer_id": 58028195,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Simply</p>\n<pre><code>import random\nmydict = {&quot;a&quot;:&quot;its a&quot;, &quot;b&quot;:&quot;its b&quot;}\nrandom.sample(mydict.items(), 1)\n\n# [('b', 'its b')]\n# or\n# [('a', 'its a')]\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2934944,
                        "reputation": 5291,
                        "user_id": 2514130,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/4e395d187e74516473c8a14f9639c422?s=256&d=identicon&r=PG",
                        "display_name": "jss367",
                        "link": "https://stackoverflow.com/users/2514130/jss367"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1617137105,
                    "creation_date": 1617137105,
                    "answer_id": 66878256,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you wanted to return a dictionary, you could use a dictionary comprehension instead of the list comprehension in <a href=\"https://stackoverflow.com/a/10125602/2514130\">Sven Marnach's answer</a> like so:</p>\n<pre><code>d = dict.fromkeys(range(100))\nkeys = random.sample(d.keys(), 10)\nsample_d = {k: d[k] for k in keys}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7309608,
                        "reputation": 163,
                        "user_id": 5569333,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/8IPM6.jpg?s=256",
                        "display_name": "Gromph",
                        "link": "https://stackoverflow.com/users/5569333/gromph"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1607777935,
                    "creation_date": 1607777935,
                    "answer_id": 65265193,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have work on this problem,</p>\n<pre><code>import random\n\ndef random_a_dict_and_sample_it( a_dictionary , a_number ): \n    _ = {}\n    for k1 in random.sample( list( a_dictionary.keys() ) , a_number ):\n        _[ k1 ] = a_dictionary[ k1 ]\n    return _\n</code></pre>\n<p><strong>In your case:</strong></p>\n<pre><code>user_dict = random_a_dict_and_sample_it( user_dict , 2 )\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1461252911,
                    "last_edit_date": 1461252911,
                    "creation_date": 1334240713,
                    "answer_id": 10125602,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's what <a href=\"http://docs.python.org//library/random.html?highlight=random.choice#random.sample\" rel=\"noreferrer\"><code>random.sample()</code></a> is for:</p>\n\n<blockquote>\n  <p>Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.</p>\n</blockquote>\n\n<p>This can be used to choose the keys.  The values can subsequently be retrieved by normal dictionary lookup:</p>\n\n<pre><code>&gt;&gt;&gt; d = dict.fromkeys(range(100))\n&gt;&gt;&gt; keys = random.sample(list(d), 10)\n&gt;&gt;&gt; keys\n[52, 3, 10, 92, 86, 42, 99, 73, 56, 23]\n&gt;&gt;&gt; values = [d[k] for k in keys]\n</code></pre>\n\n<p>Alternatively, you can directly sample from <code>d.items()</code>.</p>\n"
                }
            ]
        },
        {
            "23240969": [
                {
                    "owner": {
                        "account_id": 4060346,
                        "reputation": 32129,
                        "user_id": 3337070,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=256&d=identicon&r=PG",
                        "display_name": "sshashank124",
                        "link": "https://stackoverflow.com/users/3337070/sshashank124"
                    },
                    "is_accepted": true,
                    "score": 210,
                    "last_activity_date": 1637760198,
                    "last_edit_date": 1637760198,
                    "creation_date": 1398247312,
                    "answer_id": 23240989,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can do that using <strong><code>count</code></strong>:</p>\n<pre><code>my_dict = {i:MyList.count(i) for i in MyList}\n\n&gt;&gt;&gt; print my_dict     #or print(my_dict) in python-3.x\n{'a': 3, 'c': 3, 'b': 1}\n</code></pre>\n<p><strong>Or</strong> using <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"noreferrer\"><strong><code>collections.Counter</code></strong></a>:</p>\n<pre><code>from collections import Counter\n\na = dict(Counter(MyList))\n\n&gt;&gt;&gt; print a           #or print(a) in python-3.x\n{'a': 3, 'c': 3, 'b': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1295617,
                        "reputation": 8380,
                        "user_id": 1246764,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/FWtTl.png?s=256",
                        "display_name": "Nishant Nawarkhede",
                        "link": "https://stackoverflow.com/users/1246764/nishant-nawarkhede"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1622288090,
                    "last_edit_date": 1622288090,
                    "creation_date": 1398247683,
                    "answer_id": 23241142,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>In [2]: MyList = [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;a&quot;, &quot;c&quot;]\n\nIn [3]: count = {}\n\nIn [4]: for i in MyList:\n   ...:     if not i in count:\n   ...:         count[i] = 1\n   ...:     else:\n   ...:         count[i] +=1\n   ...:\n\nIn [5]: count\nOut[5]: {'a': 3, 'b': 1, 'c': 3}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75137,
                        "reputation": 14381,
                        "user_id": 215600,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/5d9212f4e4c45d580c8a2d75ffd72071?s=256&d=identicon&r=PG",
                        "display_name": "Peter Kelly",
                        "link": "https://stackoverflow.com/users/215600/peter-kelly"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1398248694,
                    "last_edit_date": 1398248694,
                    "creation_date": 1398248363,
                    "answer_id": 23241386,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This works for Python 2.6.6</p>\n\n<pre><code>a = [\"a\", \"b\", \"a\"]\nresult = dict((i, a.count(i)) for i in a)\nprint result\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>{'a': 2, 'b': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1288403,
                        "reputation": 9844,
                        "user_id": 1240996,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/75efea0e709e87c07bf10b995d56a47b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Jayanth Koushik",
                        "link": "https://stackoverflow.com/users/1240996/jayanth-koushik"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1398247691,
                    "creation_date": 1398247691,
                    "answer_id": 23241146,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <code>Counter</code></p>\n\n<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; MyList = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"]\n&gt;&gt;&gt; c = Counter(MyList)\n&gt;&gt;&gt; c\nCounter({'a': 3, 'c': 3, 'b': 1})\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2637065,
                        "reputation": 7683,
                        "user_id": 2281472,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/7c3970db6edffbbb266b3903a2dc3180?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Develop4Life",
                        "link": "https://stackoverflow.com/users/2281472/develop4life"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1398247601,
                    "creation_date": 1398247601,
                    "answer_id": 23241113,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>yourList = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"]\n</code></pre>\n\n<blockquote>\n  <p>expected outputs {a: 3, b: 1,c:3}</p>\n</blockquote>\n\n<pre><code>duplicateFrequencies = {}\nfor i in set(yourList):\n    duplicateFrequencies[i] = yourList.count(i)\n</code></pre>\n\n<p>Cheers!! <a href=\"http://coreygoldberg.blogspot.com/2008/07/python-counting-items-in-list.html\" rel=\"noreferrer\">Reference</a></p>\n"
                }
            ]
        },
        {
            "11821322": [
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1487774407,
                    "last_edit_date": 1495539193,
                    "creation_date": 1344217720,
                    "answer_id": 11821679,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I suggest you consider using the <code>shelve</code> module since your data-structure is a mapping.\nThat was my <a href=\"https://stackoverflow.com/questions/4529914/python-how-to-get-a-object-database/4530124#4530124\">answer</a> to a similar question titled <a href=\"https://stackoverflow.com/questions/5823236/if-i-want-to-build-a-custom-database-how-could-i\"><em>If I want to build a custom database, how could I?</em></a> There's also a bit of sample code in another <a href=\"https://stackoverflow.com/a/4530124/355230\">answer</a> of mine promoting its use for the question <a href=\"https://stackoverflow.com/questions/4529914/how-to-get-a-object-database\"><em>How to get a object database?</em></a></p>\n\n<p>ActiveState has a highly rated <a href=\"http://code.activestate.com/recipes/576642\" rel=\"nofollow noreferrer\">PersistentDict</a> recipe which supports csv, json, and pickle output file formats. It's pretty fast since all three of those formats are implement in C (although the recipe itself is pure Python), so the fact that it reads the whole file into memory when it's opened might be acceptable.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63644,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1344233465,
                    "creation_date": 1344233465,
                    "answer_id": 11823256,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Why mess with all these serialization methods? It's already written to a file as a Python dict (although with the unfortunate name 'dict').  Change your program to write out the data with a better variable name - maybe 'data', or 'catalog', and save the file as a Python file, say data.py.  Then you can just import the data directly at runtime without any clumsy copy/pasting or JSON/shelve/etc. parsing:</p>\n\n<pre><code>from data import catalog\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 202835,
                        "reputation": 71241,
                        "user_id": 450128,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=256&d=identicon&r=PG",
                        "display_name": "Ben",
                        "link": "https://stackoverflow.com/users/450128/ben"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1344221605,
                    "creation_date": 1344221605,
                    "answer_id": 11822009,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>JSON (or YAML, or whatever) serialisation is probably better, but if you're already writing the dictionary to a text file in python syntax, complete with a variable name binding, you could just write that to a .py file instead. Then that python file would be importable and usable as is. There's no need for the \"function which returns a dictionary\"  approach, since you can directly use it as a global in that file. e.g.</p>\n\n<pre><code># generated.py\nplease_dont_use_dict_as_a_variable_name = {'Adam': 'Room 430', 'Bob': 'Room 404'}\n</code></pre>\n\n<p>rather than:</p>\n\n<pre><code># manually_copied.py\ndef get_dict():\n    return {'Adam': 'Room 430', 'Bob': 'Room 404'}\n</code></pre>\n\n<p>The only difference is that <code>manually_copied.get_dict</code> gives you a fresh copy of the dictionary every time, whereas <code>generated.please_dont_use_dict_as_a_variable_name</code>[1] is a single shared object. This may matter if you're modifying the dictionary in your program after retrieving it, but you can always use <code>copy.copy</code> or <code>copy.deepcopy</code> to create a new copy if you need to modify one independently of the others.</p>\n\n<hr>\n\n<p>[1] <code>dict</code>, <code>list</code>, <code>str</code>, <code>int</code>, <code>map</code>, etc are generally viewed as bad variable names. The reason is that these are already defined as built-ins, and are used very commonly. So if you give something a name like that, at the least it's going to cause cognitive-dissonance for people reading your code (including you after you've been away for a while) as they have to keep in mind that \"<code>dict</code> doesn't mean what it normally does here\". It's also quite likely that at some point you'll get an infuriating-to-solve bug reporting that <code>dict</code> objects aren't callable (or something), because some piece of code is trying to use the <em>type</em> <code>dict</code>, but is getting the dictionary object you bound to the name <code>dict</code> instead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 438237,
                        "reputation": 91,
                        "user_id": 826383,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/3dc793d76ba70aa3c62b998373e8820c?s=256&d=identicon&r=PG",
                        "display_name": "Tom",
                        "link": "https://stackoverflow.com/users/826383/tom"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1344218509,
                    "creation_date": 1344218509,
                    "answer_id": 11821761,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>on the JSON direction there is also something called simpleJSON.  My first time using json in python the json library didnt work for me/ i couldnt figure it out.  simpleJSON was...easier to use</p>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1344216706,
                    "creation_date": 1344216706,
                    "answer_id": 11821591,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If the keys are all strings, you can use the <a href=\"http://docs.python.org/library/shelve\" rel=\"noreferrer\">shelve</a> module</p>\n\n<blockquote>\n  <p>A <a href=\"http://docs.python.org/library/shelve\" rel=\"noreferrer\">shelf</a> is a persistent, dictionary-like object. The difference with\n  \u201cdbm\u201d databases is that the values (not the keys!) in a shelf can be\n  essentially arbitrary Python objects \u2014 anything that the pickle module\n  can handle. This includes most class instances, recursive data types,\n  and objects containing lots of shared sub-objects. The keys are\n  ordinary strings.</p>\n</blockquote>\n\n<p><code>json</code> would be a good choice if you need to use the data from other languages</p>\n"
                },
                {
                    "owner": {
                        "account_id": 281021,
                        "reputation": 150571,
                        "user_id": 577088,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5UZyo.jpg?s=256",
                        "display_name": "senderle",
                        "link": "https://stackoverflow.com/users/577088/senderle"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1344215274,
                    "creation_date": 1344215274,
                    "answer_id": 11821487,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>JSON is probably the right way to go in many cases; but there might be an alternative. It looks like your keys and your values are always strings, is that right? You might consider using <a href=\"http://docs.python.org/library/dbm.html\" rel=\"noreferrer\"><code>dbm</code></a>/<a href=\"http://docs.python.org/library/anydbm.html#module-anydbm\" rel=\"noreferrer\"><code>anydbm</code></a>. These are \"databases\" but they act almost exactly like dictionaries. They're great for cheap data persistence.</p>\n\n<pre><code>&gt;&gt;&gt; import anydbm\n&gt;&gt;&gt; dict_of_strings = anydbm.open('data', 'c')\n&gt;&gt;&gt; dict_of_strings['foo'] = 'bar'\n&gt;&gt;&gt; dict_of_strings.close()\n&gt;&gt;&gt; dict_of_strings = anydbm.open('data')\n&gt;&gt;&gt; dict_of_strings['foo']\n'bar'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 444463,
                        "reputation": 1754,
                        "user_id": 836284,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/d8bd8061fdbe2417c0fc82394bcfe797?s=256&d=identicon&r=PG",
                        "display_name": "luanjunyi",
                        "link": "https://stackoverflow.com/users/836284/luanjunyi"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1344213965,
                    "creation_date": 1344213965,
                    "answer_id": 11821401,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If storage efficiency matters, use Pickle or CPickle(for execution performance gain). As Amber pointed out, you can also dump/load via Json. It will be human-readable, but takes more disk.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 49939,
                        "reputation": 524845,
                        "user_id": 148870,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=256&d=identicon&r=PG",
                        "display_name": "Amber",
                        "link": "https://stackoverflow.com/users/148870/amber"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1344213133,
                    "creation_date": 1344213133,
                    "answer_id": 11821343,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Why not dump it to a JSON file, and then load it from there where you need it?</p>\n\n<pre><code>import json\n\nwith open('my_dict.json', 'w') as f:\n    json.dump(my_dict, f)\n\n# elsewhere...\n\nwith open('my_dict.json') as f:\n    my_dict = json.load(f)\n</code></pre>\n\n<p>Loading from JSON is fairly efficient.</p>\n\n<p>Another option would be to use <a href=\"http://docs.python.org/library/pickle\" rel=\"noreferrer\"><code>pickle</code></a>, but unlike JSON, the files it generates aren't human-readable so you lose out on the visual verification you liked from your old method.</p>\n"
                }
            ]
        },
        {
            "11641098": [
                {
                    "owner": {
                        "account_id": 21307,
                        "reputation": 2445,
                        "user_id": 51681,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/43df3993acc9af4e9f619e59cd849aee?s=256&d=identicon&r=PG",
                        "display_name": "Georgios Gousios",
                        "link": "https://stackoverflow.com/users/51681/georgios-gousios"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1346439883,
                    "last_edit_date": 1346439883,
                    "creation_date": 1343222220,
                    "answer_id": 11650594,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just for the fun of it, here is a parallel Ruby version. </p>\n\n<pre><code>require 'benchmark'\n\nnum = ARGV[0].to_i\n\ndef is_prime?(n)\n  (2...n).all?{|m| n%m != 0 }\nend\n\ndef sexy_primes_default(x)\n    (9..x).map do |i|\n        [i-6, i]\n    end.select do |j|\n        j.all?{|j| is_prime? j}\n    end\nend\n\ndef sexy_primes_threads(x)\n    partition = (9..x).map do |i|\n        [i-6, i]\n    end.group_by do |x|\n        x[0].to_s[-1]\n    end\n    threads = Array.new\n    partition.each_key do |k|\n       threads &lt;&lt; Thread.new do\n            partition[k].select do |j|\n                j.all?{|j| is_prime? j}\n            end\n        end\n    end\n    threads.each {|t| t.join}\n    threads.map{|t| t.value}.reject{|x| x.empty?}\nend\n\nputs \"Running up to num #{num}\"\n\nBenchmark.bm(10) do |x|\n    x.report(\"default\") {a = sexy_primes_default(num)}\n    x.report(\"threads\") {a = sexy_primes_threads(num)}\nend\n</code></pre>\n\n<p>On my 1.8GHz Core i5 MacBook Air, the performance results are:</p>\n\n<pre><code># Ruby 1.9.3\n$ ./sexyprimes.rb 100000\nRunning up to num 100000\n                 user     system      total        real\ndefault     68.840000   0.060000  68.900000 ( 68.922703)\nthreads     71.730000   0.090000  71.820000 ( 71.847346)\n\n# JRuby 1.6.7.2 on JVM 1.7.0_05\n$ jruby --1.9 --server sexyprimes.rb 100000\nRunning up to num 100000\n                user     system      total        real\ndefault    56.709000   0.000000  56.709000 ( 56.708000)\nthreads    36.396000   0.000000  36.396000 ( 36.396000)\n\n# JRuby 1.7.0.preview1 on JVM 1.7.0_05\n$ jruby --server sexyprimes.rb 100000\nRunning up to num 100000\n             user     system      total        real\ndefault     52.640000   0.270000  52.910000 ( 51.393000)\nthreads    105.700000   0.290000 105.990000 ( 30.298000)\n</code></pre>\n\n<p>It looks like the JVM's JIT is giving Ruby a nice performance boost in the default case, while true multithreading helps JRuby perform 50% faster in the threaded case. What's more interesting is that JRuby 1.7 improves the JRuby 1.6 score by a healthy 17%!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 70121,
                        "reputation": 4003,
                        "user_id": 203655,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/693b9bfd287e55741c2a4af6f7de0d72?s=256&d=identicon&r=PG",
                        "display_name": "Justin Kramer",
                        "link": "https://stackoverflow.com/users/203655/justin-kramer"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1343364552,
                    "last_edit_date": 1343364552,
                    "creation_date": 1343193544,
                    "answer_id": 11643198,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's a fast Clojure version, using the same basic algorithms:</p>\n\n\n\n<pre class=\"lang-lisp prettyprint-override\"><code>(set! *unchecked-math* true)\n\n(defn is-prime? [^long n]\n  (loop [i 2]\n    (if (zero? (unchecked-remainder-int n i))\n      false\n      (if (&gt;= (inc i) n)\n        true\n        (recur (inc i))))))\n\n(defn sexy-primes [m]\n  (for [x (range 11 (inc m))\n        :when (and (is-prime? x) (is-prime? (- x 6)))]\n    [(- x 6) x]))\n</code></pre>\n\n<p>It runs about 20x faster than your original on my machine. And here's a version that leverages the new reducers library in 1.5 (requires Java 7 or JSR 166):</p>\n\n<pre class=\"lang-lisp prettyprint-override\"><code>(require '[clojure.core.reducers :as r]) ;'\n\n(defn sexy-primes [m]\n  (-&gt;&gt; (vec (range 11 (inc m)))\n       (r/filter #(and (is-prime? %) (is-prime? (- % 6))))\n       (r/map #(list (- % 6) %))\n       (r/fold (fn ([] []) ([a b] (into a b))) conj)))\n</code></pre>\n\n<p>This runs about 40x faster than your original. On my machine, that's 100k in 1.5 seconds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 74486,
                        "reputation": 106281,
                        "user_id": 214010,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/2bfafb4d16a6dc78abef970bcab9ca97?s=256&d=identicon&r=PG",
                        "display_name": "mikera",
                        "link": "https://stackoverflow.com/users/214010/mikera"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1343271880,
                    "last_edit_date": 1343271880,
                    "creation_date": 1343178734,
                    "answer_id": 11641388,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Rough answers:</p>\n\n<ol>\n<li>Scala's static typing is helping it quite a bit here - this means that it uses the JVM pretty efficiently without too much extra effort.</li>\n<li>I'm not exactly sure on the Ruby/Python difference, but I suspect that <code>(2...n).all?</code> in the function <code>is-prime?</code> is likely to be quite well optimised in Ruby (EDIT: sounds like this is indeed the case, see Julian's answer for more detail...)</li>\n<li>Ruby 1.9.3 is just much better optimised</li>\n<li>Clojure code can certainly be accelerated a lot! While Clojure is dynamic by default, you can use type hints, primitive maths etc. to get close to Scala / pure Java speed in many cases when you need to.</li>\n</ol>\n\n<p>Most important optimisation in the Clojure code would be to use typed primitive maths within <code>is-prime?</code>, something like:</p>\n\n<pre><code>(set! *unchecked-math* true) ;; at top of file to avoid using BigIntegers\n\n(defn ^:static is-prime? [^long n]\n  (loop [i (long 2)] \n    (if (zero? (mod n i))\n      false\n      (if (&gt;= (inc i) n) true (recur (inc i))))))\n</code></pre>\n\n<p>With this improvement, I get Clojure completing 10k in 0.635 secs (i.e. the second fastest on your list, beating Scala)</p>\n\n<p><strong>P.S.</strong> note that you have printing code inside your benchmark in some cases - not a good idea as it will distort the results, especially if using a function like <code>print</code> for the first time causes initialisation of IO subsystems or something like that!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7445,
                        "reputation": 62729,
                        "user_id": 12943,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/d6a9924b767fe91c46def7edc7bce035?s=256&d=identicon&r=PG",
                        "display_name": "Bill K",
                        "link": "https://stackoverflow.com/users/12943/bill-k"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343262485,
                    "last_edit_date": 1343262485,
                    "creation_date": 1343238265,
                    "answer_id": 11655541,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The answer to your question #1 is that Yes, the JVM is incredably fast and yes static typing helps.</p>\n\n<p>The JVM should be faster than C in the long run, possibly even faster than \"Normal\" assembly language--Of course you can always hand optimize assembly to beat anything by doing manual runtime profiling and creating a separate version for each CPU, you just have to be amazingly good and knowledgable.</p>\n\n<p>The reasons for Java's speed are: </p>\n\n<p>The JVM can analyze your code while it runs and hand-optimize it--for instance, if you had a method that could be statically analyzed at compile time to be a true function and the JVM noticed that you were often calling it with the same parameters, it COULD actually eliminate the call completely and just inject the results from the last call (I'm not sure if Java actually does this exactly, but it doest a lot of stuff like this). </p>\n\n<p>Due to static typing, the JVM can know a lot about your code at compile time, this lets it pre-optimize quite a bit of stuff.  It also lets the compiler optimize each class individually without knowledge of how another class is planning to use it.  Also Java doesn't have arbitrary pointers to memory location, it KNOWS what values in memory may and may not be changed and can optimize accordingly.</p>\n\n<p>Heap allocation is MUCH more efficient than C, Java's heap allocation is more like C's stack allocation in speed--yet more versatile.  A lot of time has gone into the different algroithims used here, it's an art--for instance, all the objects with a short lifespan (like C's stack variables) are allocated to a \"known\" free location (no searching for a free spot with enough space) and are all freed together in a single step (like a stack pop). </p>\n\n<p>The JVM can know quirks about your CPU architecture and generate machine code specifically for a given CPU.</p>\n\n<p>The JVM can speed your code long after you shipped it.  Much like moving a program to a new CPU can speed it up, moving it to a new version of the JVM can also give you huge speed performances taylored to CPUs that didn't even exist when you initially compiled your code, something c physically cannot do without a recomiple.</p>\n\n<p>By the way, most of the bad rep for java speed comes from the long startup time to load the JVM (Someday someone will build the JVM into the OS and this will go away!) and the fact that many developers are really bad at writing GUI code (especially threaded) which caused Java GUIs to often become unresponsive and glitchy.  Simple to use languages like Java and VB have their faults amplified by the fact that the capibilities of the average programmer tends to be lower than more complicated languages.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 348487,
                        "reputation": 33105,
                        "user_id": 683201,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/m01Ak.jpg?s=256",
                        "display_name": "Eve Freeman",
                        "link": "https://stackoverflow.com/users/683201/eve-freeman"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1343256868,
                    "last_edit_date": 1495540405,
                    "creation_date": 1343243970,
                    "answer_id": 11656994,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Based on <a href=\"https://stackoverflow.com/a/11652251/30433\">x4u's answer</a>, I wrote a scala version using recursion, and I improved on it by only going to the sqrt instead of x/2 for the prime check function. I get ~250ms for 100k, and ~600ms for 1M. I went ahead and went to 10M in ~6s.</p>\n\n<pre><code>import scala.annotation.tailrec\n\nvar count = 0;\ndef print(i:Int) = {\n  println((i - 6) + \" \" + i)\n  count += 1\n}\n\n@tailrec def isPrime(n:Int, i:Int = 3):Boolean = {\n  if(n % i == 0) return false;\n  else if(i * i &gt; n) return true;\n  else isPrime(n = n, i = i + 2)\n}      \n\n@tailrec def findPrimes(max:Int, bitMask:Int = 3, i:Int = 11):Unit = {\n  if (isPrime(i)) {\n    if((bitMask &amp; 1) != 0) print(i)\n    if(i + 2 &lt; max) findPrimes(max = max, bitMask = (bitMask | (1 &lt;&lt; 3)) &gt;&gt; 1, i = i + 2)\n  } else if(i + 2 &lt; max) {\n    findPrimes(max = max, bitMask = bitMask &gt;&gt; 1, i = i + 2)\n  }\n}\n\nval a = System.currentTimeMillis()\nfindPrimes(max=10000000)\nprintln(count)\nval b = System.currentTimeMillis()\nprintln((b - a).toString + \" mils\")\n</code></pre>\n\n<p>I also went back and wrote a CoffeeScript (V8 JavaScript) version, which gets ~15ms for 100k, 250ms for 1M, and 6s for 10M, by using a counter (ignoring I/O). If I turn on the output it takes ~150ms for 100k, 1s for 1M, and 12s for 10M. Couldn't use tail recursion here, unfortunately, so I had to convert it back into loops.</p>\n\n<pre><code>count = 0;\nprint = (i) -&gt;\n  console.log(\"#{i - 6} #{i}\")\n  count += 1\n  return\n\nisPrime = (n) -&gt;\n  i = 3\n  while i * i &lt; n\n    if n % i == 0\n      return false\n    i += 2\n  return true\n\nfindPrimes = (max) -&gt;\n  bitMask = 3\n  for i in [11..max] by 2\n    prime = isPrime(i)\n    if prime\n      if (bitMask &amp; 1) != 0\n        print(i)\n      bitMask |= (1 &lt;&lt; 3)\n    bitMask &gt;&gt;= 1\n  return\n\na = new Date()\nfindPrimes(1000000)\nconsole.log(count)\nb = new Date()\nconsole.log((b - a) + \" ms\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 85022,
                        "reputation": 14047,
                        "user_id": 237321,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/1c7d2d36a86da481db7d5db58bf3109c?s=256&d=identicon&r=PG",
                        "display_name": "x4u",
                        "link": "https://stackoverflow.com/users/237321/x4u"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1343231323,
                    "last_edit_date": 1343231323,
                    "creation_date": 1343227176,
                    "answer_id": 11652251,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I couldn't resist to do a few of the most obvious optimizations for the C version which made the 100k test now take 0.3s on my machine (5 times faster than the C version in the question, both compiled with MSVC 2010 /Ox).</p>\n\n<pre><code>int isprime( int x )\n{\n    int i, n;\n    for( i = 3, n = x &gt;&gt; 1; i &lt;= n; i += 2 )\n        if( x % i == 0 )\n            return 0;\n    return 1;\n}\n\nvoid findprimes( int m )\n{\n    int i, s = 3; // s is bitmask of primes in last 3 odd numbers\n    for( i = 11; i &lt; m; i += 2, s &gt;&gt;= 1 ) {\n        if( isprime( i ) ) {\n            if( s &amp; 1 )\n                printf( \"%d %d\\n\", i - 6, i );\n            s |= 1 &lt;&lt; 3;\n        }\n    }\n}\n\nmain() {\n    findprimes( 10 * 1000 );\n}\n</code></pre>\n\n<p>Here is the identical implemention in Java:</p>\n\n<pre><code>public class prime\n{\n    private static boolean isprime( final int x )\n    {\n        for( int i = 3, n = x &gt;&gt; 1; i &lt;= n; i += 2 )\n            if( x % i == 0 )\n                return false;\n        return true;\n    }\n\n    private static void findprimes( final int m )\n    {\n        int s = 3; // s is bitmask of primes in last 3 odd numbers\n        for( int i = 11; i &lt; m; i += 2, s &gt;&gt;= 1 ) {\n            if( isprime( i ) ) {\n                if( ( s &amp; 1 ) != 0 )\n                    print( i );\n                s |= 1 &lt;&lt; 3;\n            }\n        }\n    }\n\n    private static void print( int i )\n    {\n        System.out.println( ( i - 6 ) + \" \" + i );\n    }\n\n    public static void main( String[] args )\n    {\n        // findprimes( 300 * 1000 ); // for some JIT training\n        long time = System.nanoTime();\n        findprimes( 10 * 1000 );\n        time = System.nanoTime() - time;\n        System.err.println( \"time: \" + ( time / 10000 ) / 100.0 + \"ms\" );\n    }\n}\n</code></pre>\n\n<p>With Java 1.7.0_04 this runs almost exactly as fast as the C version. Client or server VM doesn't show much difference, except that JIT training seems to help the server VM a bit (~3%) while it has almost no effect with the client VM. The output in Java seems to be slower than in C. If the output is replaced with a static counter in both versions, the Java version runs a little faster than the C version.</p>\n\n<p>These are my times for the 100k run:</p>\n\n<ul>\n<li>319ms C compiled with /Ox and output to >NIL:</li>\n<li>312ms C compiled with /Ox and static counter</li>\n<li>324ms Java client VM with output to >NIL:</li>\n<li>299ms Java client VM with static counter</li>\n</ul>\n\n<p>and the 1M run (16386 results):</p>\n\n<ul>\n<li>24.95s C compiled with /Ox and static counter</li>\n<li>25.08s Java client VM with static counter</li>\n<li>24.86s Java server VM with static counter</li>\n</ul>\n\n<p>While this does not really answer your questions, it shows that small tweaks can have a noteworthy impact on performance. So to be able to really compare languages you should try to avoid all algorithmic differences as much as possible.</p>\n\n<p>It also gives a hint why Scala seems rather fast. It runs on the Java VM and thus benefits from its impressive performance.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 109560,
                        "reputation": 33322,
                        "user_id": 290221,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/cca2c2b0d6d8181e9e0c2f6040ce551e?s=256&d=identicon&r=PG",
                        "display_name": "Sebasti&#225;n Grignoli",
                        "link": "https://stackoverflow.com/users/290221/sebasti%c3%a1n-grignoli"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1343224139,
                    "last_edit_date": 1343224139,
                    "creation_date": 1343190738,
                    "answer_id": 11642757,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's the code for the Go (golang.org) version:</p>\n\n<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\n\nfunc main(){\n    findprimes(10*1000)\n}\n\nfunc isprime(x int) bool {\n    for i := 2; i &lt; x; i++ {\n        if x%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc findprimes(m int){\n    for i := 11; i &lt; m; i++ {\n        if isprime(i) &amp;&amp; isprime(i-6) {\n            fmt.Printf(\"%d %d\\n\", i-6, i)\n        }\n    }\n}\n</code></pre>\n\n<p>It ran just as fast as the C version.</p>\n\n<p><strong>Using an Asus u81a</strong>\nIntel Core 2 Duo T6500 2.1GHz, 2MB L2 cache, 800MHz FSB.\n4GB RAM </p>\n\n<p>The 100k version: <code>C: 2.723s</code> <code>Go: 2.743s</code></p>\n\n<p>With 1000000 (1M instead of 100K): <code>C: 3m35.458s</code> <code>Go: 3m36.259s</code> </p>\n\n<p>But I think that it would be fair to use Go's built in multithreading capabilities and compare that version with the regular C version (without multithreading), just because it's almost too easy to do multithreading with Go.</p>\n\n<p>Update: I did a parallel version using Goroutines in Go:</p>\n\n<pre><code>package main\n\nimport (\n  \"fmt\"\n  \"runtime\"\n)\n\nfunc main(){\n    runtime.GOMAXPROCS(4)\n    printer := make(chan string)\n    printer2 := make(chan string)\n    printer3 := make(chan string)\n    printer4 := make(chan string)\n    finished := make(chan int)\n\n    var buffer, buffer2, buffer3 string\n\n    running := 4\n    go findprimes(11, 30000, printer, finished)\n    go findprimes(30001, 60000, printer2, finished)\n    go findprimes(60001, 85000, printer3, finished)\n    go findprimes(85001, 100000, printer4, finished)\n\n    for {\n      select {\n        case i := &lt;-printer:\n          // batch of sexy primes received from printer channel 1, print them\n          fmt.Printf(i)\n        case i := &lt;-printer2:\n          // sexy prime list received from channel, store it\n          buffer = i\n        case i := &lt;-printer3:\n          // sexy prime list received from channel, store it\n          buffer2 = i\n        case i := &lt;-printer4:\n          // sexy prime list received from channel, store it\n          buffer3 = i\n        case &lt;-finished:\n          running--\n          if running == 0 {\n              // all goroutines ended\n              // dump buffer to stdout\n              fmt.Printf(buffer)\n              fmt.Printf(buffer2)\n              fmt.Printf(buffer3)\n              return\n          }\n      }\n    }\n}\n\nfunc isprime(x int) bool {\n    for i := 2; i &lt; x; i++ {\n        if x%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc findprimes(from int, to int, printer chan string, finished chan int){\n    str := \"\"\n    for i := from; i &lt;= to; i++ {\n        if isprime(i) &amp;&amp; isprime(i-6) {\n            str = str + fmt.Sprintf(\"%d %d\\n\", i-6, i)\n      }\n    }\n    printer &lt;- str\n    //fmt.Printf(\"Finished %d to %d\\n\", from, to)\n    finished &lt;- 1\n}\n</code></pre>\n\n<p><s>The parallelized version used in average 2.743 seconds, the exact same time that the regular version used.</s></p>\n\n<p>The parallelized version completed in 1.706 seconds. It used less than 1.5 Mb RAM.</p>\n\n<p><s>One odd thing: My dual core kubuntu 64bit never peaked in both cores.  It looked like Go was using just one core.</s> Fixed with a call to <code>runtime.GOMAXPROCS(4)</code></p>\n\n<p>Update: I ran the paralellized version up to 1M numbers.  <s>One of My CPU cores was at 100% all the time, while the other wasn't used at all (odd).  It took a whole minute more than the C and the regular Go versions. :(</s></p>\n\n<p>With 1000000 (1M instead of 100K): </p>\n\n<p><code>C: 3m35.458s</code> <code>Go: 3m36.259s</code> <code>Go using goroutines:</code><s>3m27.137s</s><code>2m16.125s</code> </p>\n\n<p>The 100k version: </p>\n\n<p><code>C: 2.723s</code> <code>Go: 2.743s</code> <code>Go using goroutines: 1.706s</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343217694,
                    "creation_date": 1343217694,
                    "answer_id": 11649204,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Don't forget Fortran!  (Mostly joking, but I would expect similar performance to C).  The statements with exclamation points are optional, but good style. (<code>!</code> is a comment character in fortran 90)</p>\n\n<pre><code>logical function isprime(n)\nIMPLICIT NONE !\ninteger :: n,i\ndo i=2,n\n   if(mod(n,i).eq.0)) return .false.\nenddo\nreturn .true.\nend\n\nsubroutine findprimes(m)\nIMPLICIT NONE !\ninteger :: m,i\nlogical, external :: isprime\n\ndo i=11,m\n   if(isprime(i) .and. isprime(i-6))then\n      write(*,*) i-6,i\n   endif\nenddo\nend\n\nprogram main\nfindprimes(10*1000)\nend\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 57636,
                        "reputation": 18859,
                        "user_id": 172677,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/lgANn.jpg?s=256",
                        "display_name": "Eastsun",
                        "link": "https://stackoverflow.com/users/172677/eastsun"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343208585,
                    "last_edit_date": 1343208585,
                    "creation_date": 1343198851,
                    "answer_id": 11644114,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is my scala version in both parallel and no-parallel, just for fun:\n(In my dual core compute, the parallel version takes 335ms while the no-parallel version takes 655ms)</p>\n\n<pre><code>object SexyPrimes {\n  def isPrime(n: Int): Boolean = \n    (2 to math.sqrt(n).toInt).forall{ n%_ != 0 }\n\n  def isSexyPrime(n: Int): Boolean = isPrime(n) &amp;&amp; isPrime(n-6)\n\n  def findPrimesPar(n: Int) {\n    for(k &lt;- (11 to n).par)\n      if(isSexyPrime(k)) printf(\"%d %d\\n\",k-6,k)\n  }\n\n  def findPrimes(n: Int) {\n    for(k &lt;- 11 to n)\n      if(isSexyPrime(k)) printf(\"%d %d\\n\",k-6,k)\n  }\n\n\n  def timeOf(call : =&gt;Unit) {\n    val start = System.currentTimeMillis\n    call\n    val end = System.currentTimeMillis\n    println((end-start)+\" mils\")\n  }\n\n  def main(args: Array[String]) {\n    timeOf(findPrimes(100*1000))\n    println(\"------------------------\")\n    timeOf(findPrimesPar(100*1000))\n  }\n}\n</code></pre>\n\n<p>EDIT: According to <em>Emil H</em>'s suggestion, I have changed my code to avoid the effects of IO and jvm warmup:</p>\n\n<p>The result shows in my compute:</p>\n\n<blockquote>\n  <p>List(3432, 1934, 3261, 1716, 3229, 1654, 3214, 1700)</p>\n</blockquote>\n\n<pre><code>object SexyPrimes {\n  def isPrime(n: Int): Boolean = \n    (2 to math.sqrt(n).toInt).forall{ n%_ != 0 }\n\n  def isSexyPrime(n: Int): Boolean = isPrime(n) &amp;&amp; isPrime(n-6)\n\n  def findPrimesPar(n: Int) {\n    for(k &lt;- (11 to n).par)\n      if(isSexyPrime(k)) ()//printf(\"%d %d\\n\",k-6,k)\n  }\n\n  def findPrimes(n: Int) {\n    for(k &lt;- 11 to n)\n      if(isSexyPrime(k)) ()//printf(\"%d %d\\n\",k-6,k)\n  }\n\n\n  def timeOf(call : =&gt;Unit): Long = {\n    val start = System.currentTimeMillis\n    call\n    val end = System.currentTimeMillis\n    end - start \n  }\n\n  def main(args: Array[String]) {\n    val xs = timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::Nil\n    println(xs)\n  }\n}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76525,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343183750,
                    "last_edit_date": 1343183750,
                    "creation_date": 1343181216,
                    "answer_id": 11641623,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Never mind the benchmarks; the problem got me interested and I made some fast tweaks.  This uses the <code>lru_cache</code> decorator, which memoizes a function; so when we call <code>is_prime(i-6)</code> we basically get that prime check for free.  This change cuts the work roughly in half.  Also, we can make the <code>range()</code> calls step through just the odd numbers, cutting the work roughly in half again.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Memoization\">http://en.wikipedia.org/wiki/Memoization</a></p>\n\n<p><a href=\"http://docs.python.org/dev/library/functools.html\">http://docs.python.org/dev/library/functools.html</a></p>\n\n<p>This requires Python 3.2 or newer to get <code>lru_cache</code>, but could work with an older Python if you install a Python recipe that provides <code>lru_cache</code>.  If you are using Python 2.x you should really use <code>xrange()</code> instead of <code>range()</code>.</p>\n\n<p><a href=\"http://code.activestate.com/recipes/577479-simple-caching-decorator/\">http://code.activestate.com/recipes/577479-simple-caching-decorator/</a></p>\n\n<pre><code>from functools import lru_cache\nimport time as time_\n\n@lru_cache()\ndef is_prime(n):\n    return n%2 and all(n%i for i in range(3, n, 2))\n\ndef primes_below(x):\n    return [(i-6, i) for i in range(9, x+1, 2) if is_prime(i) and is_prime(i-6)]\n\ncorrect100 = [(5, 11), (7, 13), (11, 17), (13, 19), (17, 23), (23, 29),\n        (31, 37), (37, 43), (41, 47), (47, 53), (53, 59), (61, 67), (67, 73),\n        (73, 79), (83, 89)]\nassert(primes_below(100) == correct100)\n\na = time_.time()\nprint(primes_below(30*1000))\nb = time_.time()\n\nelapsed = b - a\nprint(\"{} msec\".format(round(elapsed * 1000)))\n</code></pre>\n\n<p>The above took only a very short time to edit.  I decided to take it one step further, and make the primes test only try prime divisors, and only up to the square root of the number being tested.  The way I did it only works if you check numbers in order, so it can accumulate all the primes as it goes; but this problem was already checking the numbers in order so that was fine.</p>\n\n<p>On my laptop (nothing special; processor is a 1.5 GHz AMD Turion II \"K625\") this version produced an answer for 100K in under 8 seconds.</p>\n\n<pre><code>from functools import lru_cache\nimport math\nimport time as time_\n\nknown_primes = set([2, 3, 5, 7])\n\n@lru_cache(maxsize=128)\ndef is_prime(n):\n    last = math.ceil(math.sqrt(n))\n    flag = n%2 and all(n%x for x in known_primes if x &lt;= last)\n    if flag:\n        known_primes.add(n)\n    return flag\n\ndef primes_below(x):\n    return [(i-6, i) for i in range(9, x+1, 2) if is_prime(i) and is_prime(i-6)]\n\ncorrect100 = [(5, 11), (7, 13), (11, 17), (13, 19), (17, 23), (23, 29),\n        (31, 37), (37, 43), (41, 47), (47, 53), (53, 59), (61, 67), (67, 73),\n        (73, 79), (83, 89)]\nassert(primes_below(100) == correct100)\n\na = time_.time()\nprint(primes_below(100*1000))\nb = time_.time()\n\nelapsed = b - a\nprint(\"{} msec\".format(round(elapsed * 1000)))\n</code></pre>\n\n<p>The above code is pretty easy to write in Python, Ruby, etc. but would be more of a pain in C.</p>\n\n<p>You can't compare the numbers on this version against the numbers from the other versions without rewriting the others to use similar tricks.  I'm not trying to prove anything here; I just thought the problem was fun and I wanted to see what sort of easy performance improvements I could glean.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 402910,
                        "reputation": 51079,
                        "user_id": 770361,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/3243e2905cb76df3a79be6daacb5848a?s=256&d=identicon&r=PG",
                        "display_name": "Luigi Plinge",
                        "link": "https://stackoverflow.com/users/770361/luigi-plinge"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1343180569,
                    "last_edit_date": 1495542298,
                    "creation_date": 1343180569,
                    "answer_id": 11641556,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can make the Scala a lot faster by modifying your <code>isPrime</code> method to</p>\n\n<pre><code>  def isPrime(n: Int, i: Int = 2): Boolean = \n    if (i == n) true \n    else if (n % i != 0) isPrime(n, i + 1)\n    else false\n</code></pre>\n\n<p>Not quite as concise but the program runs in 40% of the time! </p>\n\n<p>We cut out the superfluous <code>Range</code> and anonymous <code>Function</code> objects, the Scala compiler recognizes the tail-recursion and turns it into a while-loop, which the JVM can turn into more or less optimal machine code, so it shouldn't be too far off the C version.</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/questions/6146182/how-to-optimize-for-comprehensions-and-loops-in-scala\">How to optimize for-comprehensions and loops in Scala?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 319820,
                        "reputation": 3429,
                        "user_id": 637787,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9fb6aa67570758470fd82d411c6f547d?s=256&d=identicon&r=PG",
                        "display_name": "Julian",
                        "link": "https://stackoverflow.com/users/637787/julian"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1343177865,
                    "last_edit_date": 1343177865,
                    "creation_date": 1343176512,
                    "answer_id": 11641182,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'll answer just #2, since it's the only one I've got anything remotely intelligent to say, but for your Python code, you're creating an intermediate list in <code>is_prime</code>, whereas you're using <code>.map</code> in your <code>all</code> in Ruby which is just iterating.</p>\n\n<p>If you change your <code>is_prime</code> to:</p>\n\n<pre><code>def is_prime(n):\n    return all((n%j &gt; 0) for j in range(2, n))\n</code></pre>\n\n<p>they're on par.</p>\n\n<p>I could optimize the Python further, but my Ruby isn't good enough to know when I've given more of an advantage (e.g., using <code>xrange</code> makes Python win on my machine, but I don't remember if the Ruby range you used creates an entire range in memory or not).</p>\n\n<p><strong>EDIT:</strong> Without being too silly, making the Python code look like:</p>\n\n<pre><code>import time\n\ndef is_prime(n):\n    return all(n % j for j in xrange(2, n))\n\ndef primes_below(x):\n    return [(j-6, j) for j in xrange(9, x + 1) if is_prime(j) and is_prime(j-6)]\n\na = int(round(time.time() * 1000))\nprint(primes_below(10*1000))\nb = int(round(time.time() * 1000))\nprint(str((b-a)) + \" mils\")\n</code></pre>\n\n<p>which doesn't change much more, puts it at 1.5s for me, and, with being extra silly, running it with PyPy puts it at .3s for 10K, and 21s for 100K.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1661177,
                        "reputation": 315,
                        "user_id": 1529452,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3d584673f814490964471ad0f30c1d62?s=256&d=identicon&r=PG",
                        "display_name": "Tomas Lazaro",
                        "link": "https://stackoverflow.com/users/1529452/tomas-lazaro"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1343177591,
                    "last_edit_date": 1343177591,
                    "creation_date": 1343177119,
                    "answer_id": 11641237,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Scala try using Tuple2 instead of List, it should go faster. Just remove the word 'List' since (x, y) is a Tuple2.</p>\n\n<p>Tuple2 is specialized for Int, Long and Double meaning it won't have to box/unbox those raw datatypes. <a href=\"https://github.com/scala/scala/blob/v2.9.2/src/library/scala/Tuple2.scala#L1\" rel=\"nofollow\">Tuple2 source</a>. List isn't specialized. <a href=\"https://github.com/scala/scala/blob/v2.9.2/src/library/scala/collection/immutable/List.scala#L1\" rel=\"nofollow\">List source</a>.</p>\n"
                }
            ]
        },
        {
            "745743": [
                {
                    "owner": {
                        "account_id": 5792,
                        "reputation": 119021,
                        "user_id": 9493,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=256&d=identicon&r=PG",
                        "display_name": "Brian",
                        "link": "https://stackoverflow.com/users/9493/brian"
                    },
                    "is_accepted": false,
                    "score": 100,
                    "last_activity_date": 1696789318,
                    "last_edit_date": 1696789318,
                    "creation_date": 1239740591,
                    "answer_id": 749218,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As the varied responses will tell you, the line between interpreted and compiled is no longer as clear as it was when such terms were coined.  In fact, it's also something of a mistake to consider <em>languages</em> as being either interpreted or compiled, as different <em>implementations</em> of languages may do different things.  These days you can find both <a href=\"https://root.cern.ch/root/html534/guides/users-guide/CINT.html\" rel=\"nofollow noreferrer\">C/C++ interpreters</a> and <a href=\"http://web.archive.org/web/20200426155256/https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/JavaScript_Compiler\" rel=\"nofollow noreferrer\">Javascript compilers</a>.</p>\n<p>Even when looking at an implementation, things still aren't clear-cut. There are layers of interpretation. Here are a few of the gradations between interpreted and compiled:</p>\n<ol>\n<li><p>Pure interpretation.  Pretty much what it says on the tin. Read a line of source and immediately do what it says.  This isn't actually done by many production languages - pretty much just things like shell scripts.</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" rel=\"nofollow noreferrer\">Tokenization</a> + interpretation.  A trivial optimization on the above. Rather than interpret each line from scratch, it's first tokenized (that is, rather than seeing a string like &quot;print 52 + x&quot;, it's translated into a stream of tokens (eg. <code>[PRINT_STATEMENT, INTEGER(52), PLUS_SIGN, IDENTIFIER('x')]</code> ) to avoid repeatedly performing that state of interpretation.  Many versions of basic worked this way.</p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Bytecode\" rel=\"nofollow noreferrer\">Bytecode</a> compilation.  This is the approach taken by languages like Java and C# (though see below).  The code is transformed into instructions for a &quot;virtual machine&quot;.  These instructions are then interpreted.  This is also the approach taken by python (or at least CPython, the most common implementation.) The <a href=\"http://www.jython.org/\" rel=\"nofollow noreferrer\">Jython</a> and <a href=\"https://ironpython.net/\" rel=\"nofollow noreferrer\">IronPython</a> implementations also take this approach, but compile to the bytecode for the Java and C# virtual machines respectively.</p>\n</li>\n<li><p>Bytecode + <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" rel=\"nofollow noreferrer\">Just in Time compilation</a>.  As above, but rather than interpreting the bytecodes, the code that would be performed is compiled from the bytecode at the point of execution and then run.  In some cases, this can actually outperform native compilation, as it is free to perform runtime analysis on the code, and can use specific features of the current processor (while static compilation may need to compile for a lowest common denominator CPU).  Later versions of Java, and C# use this approach.  <a href=\"http://psyco.sourceforge.net/\" rel=\"nofollow noreferrer\">Psyco</a> performs this for python.</p>\n</li>\n<li><p>Native machine-code compilation. The code is compiled to the machine code of the target system. You may think we've now completely eliminated interpretation, but even here there are subtleties.  Some machine code instructions are not actually directly implemented in hardware, but are in fact implemented via <a href=\"http://en.wikipedia.org/wiki/Microcode\" rel=\"nofollow noreferrer\">microcode</a> - even machine code is sometimes interpreted!</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 22779,
                        "reputation": 131359,
                        "user_id": 56541,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/Wm7Xg.png?s=256",
                        "display_name": "David Z",
                        "link": "https://stackoverflow.com/users/56541/david-z"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1363757763,
                    "last_edit_date": 1363757763,
                    "creation_date": 1239665423,
                    "answer_id": 745789,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Technically, Python is compiled to bytecode and then interpreted in a <a href=\"http://en.wikipedia.org/wiki/Virtual_machine\" rel=\"noreferrer\">virtual machine</a>. If the Python compiler is able to write out the bytecode into a .pyc file, it will (usually) do so.</p>\n\n<p>On the other hand, there's no explicit compilation step in Python as there is with Java or C. From the point of view of the developer, it looks like Python is just interpreting the .py file directly. Plus, Python offers an interactive prompt where you can type Python statements and have them executed immediately. So the workflow in Python is much more similar to that of an interpreted language than that of a compiled language. To me (and a lot of other developers, I suppose), that distinction of workflow is more important than whether there's an intermediate bytecode step or not.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5870,
                        "reputation": 49,
                        "user_id": 9646,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9e334d079aafac91ad4ee3293608098b?s=256&d=identicon&r=PG",
                        "display_name": "Phrodo_00",
                        "link": "https://stackoverflow.com/users/9646/phrodo-00"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1239664823,
                    "creation_date": 1239664823,
                    "answer_id": 745752,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Yes, it's interpreted, its main implementation compiles bytecode first and then runs it though (kind of if you took a java source and the JVM compiled it before running it). Still, you can run your application in background. Actually, you can run pretty much anything in background.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user36457"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1239664752,
                    "creation_date": 1239664752,
                    "answer_id": 745751,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python is an interpreted language but it is the bytecode which is interpreted at run time. There are also many tools out there that can assist you in making your programs run as a windows service / UNIX daemon.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2550,
                        "reputation": 200438,
                        "user_id": 3560,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=256&d=identicon&r=PG",
                        "display_name": "John Millikin",
                        "link": "https://stackoverflow.com/users/3560/john-millikin"
                    },
                    "is_accepted": true,
                    "score": 53,
                    "last_activity_date": 1239664651,
                    "creation_date": 1239664651,
                    "answer_id": 745749,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's multiple questions here:</p>\n\n<ol>\n<li>No, Python is not interpreted. The standard implementation compiles to bytecode, and then executes in a virtual machine. Many modern JavaScript engines also do this.</li>\n<li>Regardless of implementation (interpreter, VM, machine code), anything you want can run in the background. You can run shell scripts in the background, if you want.</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 32435,
                        "reputation": 2676,
                        "user_id": 90052,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3d91c3854c3f9d9dc0c2a8c1e11af683?s=256&d=identicon&r=PG",
                        "display_name": "user90052",
                        "link": "https://stackoverflow.com/users/90052/user90052"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1239664579,
                    "creation_date": 1239664579,
                    "answer_id": 745745,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Yes, Python is interpreted, but you can also run them as long-running applications.</p>\n"
                }
            ]
        },
        {
            "6537487": [
                {
                    "owner": {
                        "account_id": 2435854,
                        "reputation": 349,
                        "user_id": 2125780,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cdafc3dd89228f3ab32c5ea496cd29d1?s=256&d=identicon&r=PG",
                        "display_name": "Daymarquez",
                        "link": "https://stackoverflow.com/users/2125780/daymarquez"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1542475435,
                    "last_edit_date": 1542475435,
                    "creation_date": 1362194514,
                    "answer_id": 15170325,
                    "question_id": 6537487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is extremely simple! Rather than importing odd modules for python or trying long commands you can take advantage of windows OS commands.</p>\n\n<p>In windows, commands exist to change the command prompt text color. You can use this in python by starting with a: <code>import os</code></p>\n\n<p>Next you need to have a line changing the text color, place it were you want in your code.\n<code>os.system('color 4')</code></p>\n\n<p>You can figure out the other colors by starting cmd.exe and typing color help.</p>\n\n<p>The good part? Thats all their is to it, to simple lines of code.\n-Day</p>\n"
                },
                {
                    "owner": {
                        "account_id": 210792,
                        "reputation": 34678,
                        "user_id": 462604,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/7176c041527db5489a2181a0f87f57d9?s=256&d=identicon&r=PG",
                        "display_name": "Jakob Bowyer",
                        "link": "https://stackoverflow.com/users/462604/jakob-bowyer"
                    },
                    "is_accepted": true,
                    "score": 75,
                    "last_activity_date": 1309449345,
                    "creation_date": 1309449345,
                    "answer_id": 6537602,
                    "question_id": 6537487,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Or about the best module I have found \n<a href=\"http://pypi.python.org/pypi/colorama\">http://pypi.python.org/pypi/colorama</a></p>\n"
                }
            ]
        },
        {
            "9027862": [
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 43,
                    "last_activity_date": 1496141026,
                    "last_edit_date": 1496141026,
                    "creation_date": 1327629416,
                    "answer_id": 9028088,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>L[x::y]</code> means a slice of <code>L</code> where the <code>x</code> is the index to start from and <code>y</code> is the step size. Here are some examples you can try in the interpreter</p>\n\n<pre><code>&gt;&gt;&gt; L=range(20)\n&gt;&gt;&gt; L\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n</code></pre>\n\n<p>If you want every 3rd element</p>\n\n<pre><code>&gt;&gt;&gt; L[::3]\n[0, 3, 6, 9, 12, 15, 18]\n</code></pre>\n\n<p>Now every third element starting from L[1]</p>\n\n<pre><code>&gt;&gt;&gt; L[1::3]\n[1, 4, 7, 10, 13, 16, 19]\n</code></pre>\n\n<p>Now every third element starting from L[2]</p>\n\n<pre><code>&gt;&gt;&gt; L[2::3]\n[2, 5, 8, 11, 14, 17]\n</code></pre>\n\n<p>You can specify a negative step to go backwards</p>\n\n<pre><code>&gt;&gt;&gt; L[::-1]\n[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n</code></pre>\n\n<p>You can also assign to this slice, but the value must have the same length as the slice you are replacing</p>\n\n<pre><code>&gt;&gt;&gt; L[::3]=[0,0,0,0,0,0,0]\n&gt;&gt;&gt; L\n[0, 1, 2, 0, 4, 5, 0, 7, 8, 0, 10, 11, 0, 13, 14, 0, 16, 17, 0, 19]\n</code></pre>\n\n<p>Finally, you can delete every 3rd element like this</p>\n\n<pre><code>&gt;&gt;&gt; del L[::3]\n&gt;&gt;&gt; L\n[1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 213792,
                        "reputation": 4871,
                        "user_id": 467379,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/28ebaf1c76954ab94e24766f199fc01d?s=256&d=identicon&r=PG",
                        "display_name": "ncmathsadist",
                        "link": "https://stackoverflow.com/users/467379/ncmathsadist"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1327629901,
                    "last_edit_date": 1327629901,
                    "creation_date": 1327627685,
                    "answer_id": 9027898,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It slices</p>\n\n<pre><code>x[startAt:endBefore:skip]\n</code></pre>\n\n<p>if you use <code>skip = 2</code>, every other element the list beginning at <code>startAt</code> and ending at <code>endBefore</code> will be selected.  [Remember: indices live BETWEEN list elements]</p>\n\n<p>To see this, enter </p>\n\n<pre><code>x = range(100)\n</code></pre>\n\n<p>at the Python prompt.  Then try these things</p>\n\n<pre><code>x[::2]\nx[::3]\nx[10:40:6]\n</code></pre>\n\n<p>and see what happens.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1083804,
                        "reputation": 2612,
                        "user_id": 1080024,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/5a37dba069d0f85927181d274125fddc?s=256&d=identicon&r=PG",
                        "display_name": "Divya",
                        "link": "https://stackoverflow.com/users/1080024/divya"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1327628141,
                    "creation_date": 1327628141,
                    "answer_id": 9027954,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the syntax for list slicing. \nWhen you say,</p>\n\n<pre><code>list[a:b:c],\n</code></pre>\n\n<p>a is the starting index, b is the ending index and c is the optional step size. \nThis will give you a list starting at index a(inclusive) and ending at index b(exclusive) picking elements at a step of c.</p>\n\n<p>For example,</p>\n\n<pre><code>l = [1,2,3,4,5,6,7]\n</code></pre>\n\n<p>If I say l[2:6:2], this will give me [3,5].</p>\n\n<p>If you skip the end index, like in your question, it would take elements from the start index (x), pick every yth element until it reaches the end of the list if y is positive and beginning of the list if y is negative. </p>\n\n<p>E.g. l[1::-1] = [2,1]</p>\n\n<p>l[1::2] = [2,4,6]</p>\n\n<p>The default step size is 1. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 59946,
                        "reputation": 30071,
                        "user_id": 179216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/08Iyn.png?s=256",
                        "display_name": "Jeff B",
                        "link": "https://stackoverflow.com/users/179216/jeff-b"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327627687,
                    "last_edit_date": 1495542867,
                    "creation_date": 1327627687,
                    "answer_id": 9027899,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a Slice.</p>\n\n<p>[start:end:step]</p>\n\n<p>Leaving any blank puts them at a default value, in your case it is taking every <code>y</code> elements starting at <code>x</code> and going until the end of the list.</p>\n\n<p>See: <a href=\"https://stackoverflow.com/questions/3453085/what-is-double-colon-in-python\">What is :: (double colon) in Python when subscripting sequences?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 78959,
                        "reputation": 4037,
                        "user_id": 224295,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3cbf477336671514ef027caf00d81996?s=256&d=identicon&r=PG",
                        "display_name": "philofinfinitejest",
                        "link": "https://stackoverflow.com/users/224295/philofinfinitejest"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327627628,
                    "creation_date": 1327627628,
                    "answer_id": 9027892,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Returns a list containing every yth element of list starting at index x.</p>\n\n<pre><code>&gt;&gt;&gt; alist = range(10)\n&gt;&gt;&gt; alist[0::2]\n[0, 2, 4, 6, 8]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 306769,
                        "reputation": 16307,
                        "user_id": 617711,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/fHTfP.jpg?s=256",
                        "display_name": "Rob Wouters",
                        "link": "https://stackoverflow.com/users/617711/rob-wouters"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327627591,
                    "creation_date": 1327627591,
                    "answer_id": 9027890,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It means create a new list from <code>x</code> until the end with step <code>y</code>:</p>\n\n<pre><code>&gt;&gt;&gt; l = range(10)\n&gt;&gt;&gt; list(l[2::2])\n[2, 4, 6, 8]\n</code></pre>\n"
                }
            ]
        },
        {
            "1859865": [
                {
                    "owner": {
                        "account_id": 16568247,
                        "reputation": 1,
                        "user_id": 11972201,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/J8EDI.jpg?s=256",
                        "display_name": "Lucky Pratama",
                        "link": "https://stackoverflow.com/users/11972201/lucky-pratama"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1566671166,
                    "creation_date": 1566671166,
                    "answer_id": 57640568,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To achieve a good speed performance or implementing a real multithreading program, calling python script directly from java (native) is the best way. Just prepare your python script then let java do the rest for concurrent invocation into your python script.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 574805,
                        "reputation": 296,
                        "user_id": 219727,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/1e9c67f240fb33bd542b94474424d218?s=256&d=identicon&r=PG",
                        "display_name": "Ron",
                        "link": "https://stackoverflow.com/users/219727/ron"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1260352033,
                    "creation_date": 1260352033,
                    "answer_id": 1872738,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you know Python and has bought into the \"pythonic\" way of doing things, then Jython allows you to bring that philosophy to the JVM stack. If you do this, it is much more than just adding scripting capability.</p>\n\n<p>In our latest projects, all the custom and business logic is built in Jython, at the same time we can still leverage some of the great tried and tested Java libraries like Solr, Jasperreports, Quartz, Jetty, Velocity to name a few.</p>\n\n<p>It does get compiled to bytecode, however, an extra layer is being added, but is no different to using an ORM instead of straight JDBC for example.</p>\n\n<p>What you gain in productivity far out weighs the minuscule lost in performance.</p>\n\n<p>On the server side, Jython is rarely the bottleneck.  For mini desktop apps, there may be issues, but very much dependent on what you are trying to do.</p>\n\n<p>The latest JDK, together with containers like Jetty or Tomcat are very mature and stable, adding Python on top, in many cases, gives the best of both worlds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11659,
                        "reputation": 54273,
                        "user_id": 22595,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/kxy3v.jpg?s=256",
                        "display_name": "Micha\u0142 Niklas",
                        "link": "https://stackoverflow.com/users/22595/micha%c5%82-niklas"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1260258321,
                    "creation_date": 1260258321,
                    "answer_id": 1865328,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>I need Jython to test JDBC drivers. Some of apps I use work use ODBC, some use JDBC. Using Jython I can test both type of drivers from one Python source\n(to test ODBC I use JDBC-ODBC bridge).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 27626,
                        "reputation": 353559,
                        "user_id": 73070,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/d54ed51c0f03cb461741c3ec77a837b2?s=256&d=identicon&r=PG",
                        "display_name": "Joey",
                        "link": "https://stackoverflow.com/users/73070/joey"
                    },
                    "is_accepted": true,
                    "score": 28,
                    "last_activity_date": 1260205832,
                    "last_edit_date": 1260205832,
                    "creation_date": 1260191417,
                    "answer_id": 1859872,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Quoting <a href=\"http://en.wikipedia.org/wiki/Jython\" rel=\"noreferrer\">Wikipedia</a>:</p>\n\n<blockquote>\n  <p>Jython, successor of JPython, is an implementation of the Python programming language written in Java.</p>\n</blockquote>\n\n<p>As for what uses it may have:</p>\n\n<blockquote>\n  <p>Jython programs can seamlessly import and use any Java class. Except for some standard modules, Jython programs use Java classes instead of Python modules.</p>\n</blockquote>\n\n<p>Performance measurements of Jython, IronPython and CPython show that both Jython and IronPython outperform CPython for some cases with large datasets.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 78514,
                        "reputation": 141,
                        "user_id": 223414,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://www.gravatar.com/avatar/e3e9f70d3ed18c29cf383a6ff4f20725?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Priyabrata Hota",
                        "link": "https://stackoverflow.com/users/223414/priyabrata-hota"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1260199362,
                    "last_edit_date": 1260199362,
                    "creation_date": 1260197878,
                    "answer_id": 1860474,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When will I need Jython?</p>\n\n<p>You can write administrative scripts for Websphere application server using Jython. The scripts are used to automate common administrative tasks and configure security in Websphere application server.</p>\n\n<p>WebSphere utilizes the JMX API to create MBeans that are exposed as an API of internal WebSphere objects. As the Jython scripts are based on Java and they run on the JVM they can access those objects and can be utilized to configure WebSphere. </p>\n\n<p>Besides it is fun to write code in Jython and you learn a new language.</p>\n\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.base.doc/info/aes/ae/txml_launchscript.html\" rel=\"nofollow noreferrer\">Here is the details</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 62802,
                        "reputation": 535,
                        "user_id": 186323,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b03d2828ea62ed01f683b0f55654a71b?s=256&d=identicon&r=PG",
                        "display_name": "Richie",
                        "link": "https://stackoverflow.com/users/186323/richie"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1260195494,
                    "creation_date": 1260195494,
                    "answer_id": 1860242,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Two other reasons:</p>\n\n<ul>\n<li>Embedding scripting into large Java application. </li>\n<li>Use Java threads to write multi-threaded programs in Jython. </li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 15903,
                        "reputation": 328082,
                        "user_id": 34088,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/8a4d6f03a8879432d8563aefbf48e787?s=256&d=identicon&r=PG",
                        "display_name": "Aaron Digulla",
                        "link": "https://stackoverflow.com/users/34088/aaron-digulla"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1260192904,
                    "creation_date": 1260192904,
                    "answer_id": 1860018,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>For example to add a nice scripting language to your code.</p>\n\n<blockquote>\n  <p>What are the drawbacks?</p>\n</blockquote>\n\n<p>The main drawback is that Jython lags behind the official CPython distribution. Currently, you can get a version of Jython that is compatible with Python 2.5.2 while CPython is at 3.1.</p>\n\n<p>Also some esoteric modules aren't supported. Usually, you won't notice and/or be able to easily find a Java replacement.</p>\n\n<blockquote>\n  <p>I assume it is slow?</p>\n</blockquote>\n\n<p>Compared to what? Usually, it's either fast enough or, when it isn't, you can replace a few lines of Python with about 1'000 lines of much faster Java.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9193,
                        "reputation": 345892,
                        "user_id": 16883,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/0382297f273df0a544b0c6c2734de096?s=256&d=identicon&r=PG",
                        "display_name": "Michael Borgwardt",
                        "link": "https://stackoverflow.com/users/16883/michael-borgwardt"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1260192320,
                    "creation_date": 1260192320,
                    "answer_id": 1859971,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>When you want to program in Python but need (or want) to have the result run on a Java virtual machine, or use existing Java components.</p>\n\n<blockquote>\n  <p>What are the drawbacks.</p>\n</blockquote>\n\n<p>Jython may not be 100% compatible with Python, though any incompatibility would be considered a bug. If you later want/need to run on CPython, any code that uses Java components will have to be rewritten.</p>\n\n<blockquote>\n  <p>I assume it is slow?</p>\n</blockquote>\n\n<p>That depends, as always, on your specific usecase. It may actually be faster than CPython in some cases; and of course it depends on the specific JVM you run under - these get better all the time.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 71563,
                        "reputation": 7061,
                        "user_id": 207028,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/94bef01465a5b1125c79ef16e152a246?s=256&d=identicon&r=PG",
                        "display_name": "wisty",
                        "link": "https://stackoverflow.com/users/207028/wisty"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1260192183,
                    "creation_date": 1260192183,
                    "answer_id": 1859951,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The JVM does some nice dynamic optimization, but it's probably nothing to get excited about. JRuby sometimes runs faster on the JVM (<a href=\"http://www.engineyard.com/blog/2009/j-is-for-jvm-why-the-j-in-jruby/\" rel=\"nofollow noreferrer\">http://www.engineyard.com/blog/2009/j-is-for-jvm-why-the-j-in-jruby/</a>) by optimizing the code paths that run a lot, but that's Ruby, not Python. </p>\n\n<p>Java libraries are the main reason. Lots of companies have big globs of Java code that can be scripted with Python. There's also a few open source frameworks (Struts and Eclipse spring to mind) which you can script with Jython.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 62859,
                        "reputation": 5289,
                        "user_id": 186457,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/07f950346ffd9499efde49c0529113b6?s=256&d=identicon&r=PG",
                        "display_name": "Vitaliy Liptchinsky",
                        "link": "https://stackoverflow.com/users/186457/vitaliy-liptchinsky"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1260191603,
                    "creation_date": 1260191603,
                    "answer_id": 1859894,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Jython is a Python implementation which runs on top of JVM. \nTheoretically, Jython is a bit slower, then CPython.</p>\n\n<p>You can find some benchmarks here:\n<a href=\"http://www.smallshire.org.uk/sufficientlysmall/2009/05/22/ironpython-2-0-and-jython-2-5-performance-compared-to-python-2-5/\" rel=\"nofollow noreferrer\">http://www.smallshire.org.uk/sufficientlysmall/2009/05/22/ironpython-2-0-and-jython-2-5-performance-compared-to-python-2-5/</a></p>\n"
                }
            ]
        },
        {
            "14295322": [
                {
                    "owner": {
                        "account_id": 941537,
                        "reputation": 6015,
                        "user_id": 969534,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/8e486349f7b6c6e378e2ae2920690b39?s=256&d=identicon&r=PG",
                        "display_name": "dav1d",
                        "link": "https://stackoverflow.com/users/969534/dav1d"
                    },
                    "is_accepted": true,
                    "score": 24,
                    "last_activity_date": 1547138316,
                    "last_edit_date": 1547138316,
                    "creation_date": 1358011152,
                    "answer_id": 14295815,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would recommend you <a href=\"http://sphinx-doc.org/\" rel=\"nofollow noreferrer\">Sphinx</a>, you add your documentation as <code>__doc__</code> and the <code>autodoc</code> module of Sphinx will generate the docs for you (<a href=\"http://docs.python.org/3/\" rel=\"nofollow noreferrer\">docs.python.org</a> also uses Sphinx). The markup is <a href=\"http://docutils.sourceforge.net/docs/user/rst/quickref.html\" rel=\"nofollow noreferrer\">reStructuredText</a>, similiar to Markdown (if you prefer Markdown, you can use <a href=\"https://pdoc3.github.io/pdoc\" rel=\"nofollow noreferrer\">pdoc</a>).</p>\n\n<p>e.g.:</p>\n\n<pre><code>@app.route('/download/&lt;int:id&gt;')\ndef download_id(id):\n    '''This downloads a certain image specified by *id*'''\n    return ...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 476593,
                        "reputation": 2358,
                        "user_id": 887594,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c70add0db17f235b617a421e924c1ad7?s=256&d=identicon&r=PG",
                        "display_name": "Cl&#233;ment Renaud",
                        "link": "https://stackoverflow.com/users/887594/cl%c3%a9ment-renaud"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1543493962,
                    "last_edit_date": 1543493962,
                    "creation_date": 1416236109,
                    "answer_id": 26975392,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I really like <a href=\"https://swagger.io/tools/swagger-ui\" rel=\"noreferrer\">Swagger</a> because it allows to generate an API documentation by just adding a few decorators and comments into your code. There is a <a href=\"https://github.com/rantav/flask-restful-swagger\" rel=\"noreferrer\">Flask Swagger</a> available.</p>\n\n<pre><code>from flask import Flask\nfrom flask.ext.restful import  Api\nfrom flask_restful_swagger import swagger\n\napp = Flask(__name__)\napi = swagger.docs(Api(app), apiVersion='1', api_spec_url=\"/api/v1/spec\")\n\nclass Unicorn(Resource):\n\"Describing unicorns\"\n@swagger.operation(\n    notes='some really good notes'\n)\ndef get(self, todo_id):\n...\n</code></pre>\n\n<p>Then you can see your methods and notes in an html interface just by visiting /api/v1/spec (it serves needed static automatically). You can also just get all your API description in JSON and parse it otherwise.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 218750,
                        "reputation": 4461,
                        "user_id": 475242,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/y6FOo.jpg?s=256",
                        "display_name": "Cody",
                        "link": "https://stackoverflow.com/users/475242/cody"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1397637872,
                    "creation_date": 1397637872,
                    "answer_id": 23104279,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a Flask extension: <a href=\"https://github.com/acoomans/flask-autodoc\" rel=\"noreferrer\">flask-autodoc</a> for auto documentation specially parsing endpoint route rule. You can add <code>doc</code> decorator to specify which APIs you want to doc: </p>\n\n<pre><code>@app.route('/doc')\n@auto.doc()\ndef documentation():\n    '''\n    return API documentation page\n    '''\n    return auto.html()\n\n@app.route('/')\n@auto.doc()\ndef welcome():\n    '''\n    Welcome API\n    '''\n    commit_hash = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"])\n    commit_msg = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%s\"])\n    date_time = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%cd\"])\n    return \"Welcome to VM Service Server. &lt;br/&gt;\" \\\n           \"The last commit: %s&lt;br/&gt;Date: %s, &lt;br&gt;Hash: %s\" % \\\n           (commit_msg, date_time, commit_hash), 200\n</code></pre>\n\n<p>The simple html documentation page is like this: </p>\n\n<p><img src=\"https://i.sstatic.net/vlQu8.png\" alt=\"enter image description here\"></p>\n"
                }
            ]
        },
        {
            "7102754": [
                {
                    "owner": {
                        "account_id": 31431,
                        "reputation": 7762,
                        "user_id": 86263,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/d4583c9731327f0af726920c388ea327?s=256&d=identicon&r=PG",
                        "display_name": "bitcycle",
                        "link": "https://stackoverflow.com/users/86263/bitcycle"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1681659625,
                    "last_edit_date": 1681659625,
                    "creation_date": 1331944972,
                    "answer_id": 9746249,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same need, to serialize into json.  Take a look at <a href=\"https://stackoverflow.com/questions/2441796/how-to-discover-table-properties-from-sqlalchemy-mapped-object\">this question</a>. It shows how to discover columns programmatically.  So, from that I created the code below.  It works for me, and I'll be using it in my web app.</p>\n<pre><code>def to_json(inst, cls):\n    &quot;&quot;&quot;\n    Jsonify the sql alchemy query result.\n    &quot;&quot;&quot;\n    convert = dict()\n    # add your coversions for things like datetime's \n    # and what-not that aren't serializable.\n    d = dict()\n    for c in cls.__table__.columns:\n        v = getattr(inst, c.name)\n        if c.type in convert.keys() and v is not None:\n            try:\n                d[c.name] = convert[c.type](v)\n            except:\n                d[c.name] = &quot;Error:  Failed to covert using &quot;, str(convert[c.type])\n        elif v is None:\n            d[c.name] = str()\n        else:\n            d[c.name] = v\n    return json.dumps(d)\n\nclass Person(base):\n    __tablename__ = 'person'\n    id = Column(Integer, Sequence('person_id_seq'), primary_key=True)\n    first_name = Column(Text)\n    last_name = Column(Text)\n    email = Column(Text)\n\n    @property\n    def json(self):\n        return to_json(self, self.__class__)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 52591,
                        "reputation": 32616,
                        "user_id": 157176,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e72ba9209373ae37e13ab75054aa0ee5?s=256&d=identicon&r=PG",
                        "display_name": "plaes",
                        "link": "https://stackoverflow.com/users/157176/plaes"
                    },
                    "is_accepted": true,
                    "score": 184,
                    "last_activity_date": 1671786119,
                    "last_edit_date": 1671786119,
                    "creation_date": 1313650335,
                    "answer_id": 7103486,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It seems that you actually haven't executed your query. Try following:</p>\n<pre><code>return jsonify(json_list = qryresult.all())\n</code></pre>\n<p><strong>[Edit]</strong>: Problem with jsonify is, that usually the objects cannot be jsonified automatically. Even Python's datetime fails ;)</p>\n<p>What I have done in the past, is adding an extra property (like <code>serialize</code>) to classes that need to be serialized.</p>\n<pre><code>def dump_datetime(value):\n    &quot;&quot;&quot;Deserialize datetime object into string form for JSON processing.&quot;&quot;&quot;\n    if value is None:\n        return None\n    return [value.strftime(&quot;%Y-%m-%d&quot;), value.strftime(&quot;%H:%M:%S&quot;)]\n\nclass Foo(db.Model):\n    # ... SQLAlchemy defs here..\n    def __init__(self, ...):\n       # self.foo = ...\n       pass\n\n    @property\n    def serialize(self):\n       &quot;&quot;&quot;Return object data in easily serializable format&quot;&quot;&quot;\n       return {\n           'id'         : self.id,\n           'modified_at': dump_datetime(self.modified_at),\n           # This is an example how to deal with Many2Many relations\n           'many2many'  : self.serialize_many2many\n       }\n    @property\n    def serialize_many2many(self):\n       &quot;&quot;&quot;\n       Return object's relations in easily serializable format.\n       NB! Calls many2many's serialize property.\n       &quot;&quot;&quot;\n       return [ item.serialize for item in self.many2many]\n</code></pre>\n<p>And now for views I can just do:</p>\n<pre><code>return jsonify(json_list=[i.serialize for i in qryresult.all()])\n</code></pre>\n<p><strong>[Edit 2019]</strong>:\nIn case you have more complex objects or circular references, use a library like <a href=\"https://marshmallow.readthedocs.io\" rel=\"nofollow noreferrer\">marshmallow</a>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1157460,
                        "reputation": 902,
                        "user_id": 1137693,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bbb53cc3ddce61d165503115ad1988af?s=256&d=identicon&r=PG",
                        "display_name": "YuriBro",
                        "link": "https://stackoverflow.com/users/1137693/yuribro"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1659244559,
                    "last_edit_date": 1659244559,
                    "creation_date": 1358180406,
                    "answer_id": 14322313,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's my approach:\n<a href=\"https://github.com/n0nSmoker/SQLAlchemy-serializer\" rel=\"nofollow noreferrer\">https://github.com/n0nSmoker/SQLAlchemy-serializer</a></p>\n<pre><code>pip install SQLAlchemy-serializer\n</code></pre>\n<p>You can easily add mixin to your model and then just call\n<code>.to_dict()</code> method on its instance.</p>\n<p>You also can write your own mixin on base of <code>SerializerMixin</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1335180,
                        "reputation": 2759,
                        "user_id": 1278112,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/e3d3976fda1b5e2cb21d4a357425063a?s=256&d=identicon&r=PG",
                        "display_name": "Shihe Zhang",
                        "link": "https://stackoverflow.com/users/1278112/shihe-zhang"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1542273616,
                    "last_edit_date": 1542273616,
                    "creation_date": 1540179587,
                    "answer_id": 52922100,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><code>Flask-Restful</code> <code>0.3.6</code> <a href=\"https://flask-restful.readthedocs.io/en/latest/reqparse.html\" rel=\"nofollow noreferrer\">the Request Parsing</a> recommend marshmallow</p>\n\n<blockquote>\n  <p>marshmallow is an ORM/ODM/framework-agnostic library for converting\n  complex datatypes, such as objects, to and from native Python\n  datatypes.</p>\n</blockquote>\n\n<p>A simple <a href=\"https://marshmallow.readthedocs.io/en/3.0/index.html\" rel=\"nofollow noreferrer\">marshmallow</a> example is showing below.</p>\n\n<pre><code>from marshmallow import Schema, fields\n\nclass UserSchema(Schema):\n    name = fields.Str()\n    email = fields.Email()\n    created_at = fields.DateTime()\n\nfrom marshmallow import pprint\n\nuser = User(name=\"Monty\", email=\"monty@python.org\")\nschema = UserSchema()\nresult = schema.dump(user)\npprint(result)\n# {\"name\": \"Monty\",\n#  \"email\": \"monty@python.org\",\n#  \"created_at\": \"2014-08-17T14:54:16.049594+00:00\"}\n</code></pre>\n\n<p>The core features contain</p>\n\n<blockquote>\n  <p>Declaring Schemas<br>\n  Serializing Objects (\u201cDumping\u201d)<br>\n  Deserializing Objects (\u201cLoading\u201d)<br>\n  Handling Collections of Objects<br>\n  Validation<br>\n  Specifying Attribute Names<br>\n  Specifying Serialization/Deserialization Keys<br>\n  Refactoring: Implicit Field Creation<br>\n  Ordering Output<br>\n  \u201cRead-only\u201d and \u201cWrite-only\u201d Fields<br>\n  Specify Default Serialization/Deserialization Values<br>\n  Nesting Schemas<br>\n  Custom Fields</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 3998039,
                        "reputation": 415,
                        "user_id": 3294937,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d09423dada25a84af91c332b3ff8361?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "VinnyQ77",
                        "link": "https://stackoverflow.com/users/3294937/vinnyq77"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1472512367,
                    "creation_date": 1472512367,
                    "answer_id": 39216549,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's my answer if you're using the declarative base (with help from some of the answers already posted):</p>\n\n<pre><code># in your models definition where you define and extend declarative_base()\nfrom sqlalchemy.ext.declarative import declarative_base\n...\nBase = declarative_base()\nBase.query = db_session.query_property()\n...\n\n# define a new class (call \"Model\" or whatever) with an as_dict() method defined\nclass Model():\n    def as_dict(self):\n        return { c.name: getattr(self, c.name) for c in self.__table__.columns }\n\n# and extend both the Base and Model class in your model definition, e.g.\nclass Rating(Base, Model):\n    ____tablename__ = 'rating'\n    id = db.Column(db.Integer, primary_key=True)\n    fullurl = db.Column(db.String())\n    url = db.Column(db.String())\n    comments = db.Column(db.Text)\n    ...\n\n# then after you query and have a resultset (rs) of ratings\nrs = Rating.query.all()\n\n# you can jsonify it with\ns = json.dumps([r.as_dict() for r in rs], default=alchemyencoder)\nprint (s)\n\n# or if you have a single row\nr = Rating.query.first()\n\n# you can jsonify it with\ns = json.dumps(r.as_dict(), default=alchemyencoder)\n\n# you will need this alchemyencoder where your are calling json.dumps to handle datetime and decimal format\n# credit to Joonas @ http://codeandlife.com/2014/12/07/sqlalchemy-results-to-json-the-easy-way/\ndef alchemyencoder(obj):\n    \"\"\"JSON encoder function for SQLAlchemy special classes.\"\"\"\n    if isinstance(obj, datetime.date):\n        return obj.isoformat()\n    elif isinstance(obj, decimal.Decimal):\n        return float(obj)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 208129,
                        "reputation": 346,
                        "user_id": 458426,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e97b773f37c77c6ffc929a55abd7a727?s=256&d=identicon&r=PG",
                        "display_name": "zwalker",
                        "link": "https://stackoverflow.com/users/458426/zwalker"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1468735040,
                    "creation_date": 1468735040,
                    "answer_id": 38418364,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was looking for something like the rails approach used in ActiveRecord to_json and implemented something similar using this Mixin after being unsatisfied with other suggestions.  It handles nested models, and including or excluding attributes of the top level or nested models.</p>\n\n<pre><code>class Serializer(object):\n\n    def serialize(self, include={}, exclude=[], only=[]):\n        serialized = {}\n        for key in inspect(self).attrs.keys():\n            to_be_serialized = True\n            value = getattr(self, key)\n            if key in exclude or (only and key not in only):\n                to_be_serialized = False\n            elif isinstance(value, BaseQuery):\n                to_be_serialized = False\n                if key in include:\n                    to_be_serialized = True\n                    nested_params = include.get(key, {})\n                    value = [i.serialize(**nested_params) for i in value]\n\n            if to_be_serialized:\n                serialized[key] = value\n\n        return serialized\n</code></pre>\n\n<p>Then, to get the BaseQuery serializable I extended BaseQuery</p>\n\n<pre><code>class SerializableBaseQuery(BaseQuery):\n\n    def serialize(self, include={}, exclude=[], only=[]):\n        return [m.serialize(include, exclude, only) for m in self]\n</code></pre>\n\n<p>For the following models</p>\n\n<pre><code>class ContactInfo(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    full_name = db.Column(db.String())\n    source = db.Column(db.String())\n    source_id = db.Column(db.String())\n\n    email_addresses = db.relationship('EmailAddress', backref='contact_info', lazy='dynamic')\n    phone_numbers = db.relationship('PhoneNumber', backref='contact_info', lazy='dynamic')\n\n\nclass EmailAddress(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    email_address = db.Column(db.String())\n    type = db.Column(db.String())\n    contact_info_id = db.Column(db.Integer, db.ForeignKey('contact_info.id'))\n\n\nclass PhoneNumber(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    phone_number = db.Column(db.String())\n    type = db.Column(db.String())\n    contact_info_id = db.Column(db.Integer, db.ForeignKey('contact_info.id'))\n\n    phone_numbers = db.relationship('Invite', backref='phone_number', lazy='dynamic')\n</code></pre>\n\n<p>You could do something like</p>\n\n<pre><code>@app.route(\"/contact/search\", methods=['GET'])\ndef contact_search():\n    contact_name = request.args.get(\"name\")\n    matching_contacts = ContactInfo.query.filter(ContactInfo.full_name.like(\"%{}%\".format(contact_name)))\n\n    serialized_contact_info = matching_contacts.serialize(\n        include={\n            \"phone_numbers\" : {\n                \"exclude\" : [\"contact_info\", \"contact_info_id\"]\n            },\n            \"email_addresses\" : {\n                \"exclude\" : [\"contact_info\", \"contact_info_id\"]\n            }\n        }\n    )\n\n    return jsonify(serialized_contact_info)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user4985526"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1464853496,
                    "creation_date": 1464853496,
                    "answer_id": 37585632,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I just want to add my method to do this.</p>\n\n<p>just define a custome json encoder to serilize your db models.</p>\n\n<pre><code>class ParentEncoder(json.JSONEncoder):\n    def default(self, obj):\n        # convert object to a dict\n        d = {}\n        if isinstance(obj, Parent):\n            return {\"id\": obj.id, \"name\": obj.name, 'children': list(obj.child)}\n        if isinstance(obj, Child):\n            return {\"id\": obj.id, \"name\": obj.name}\n\n        d.update(obj.__dict__)\n        return d\n</code></pre>\n\n<p>then in your view function </p>\n\n<pre><code>parents = Parent.query.all()\ndat = json.dumps({\"data\": parents}, cls=ParentEncoder)\nresp = Response(response=dat, status=200, mimetype=\"application/json\")\nreturn (resp)\n</code></pre>\n\n<p>it works well though the parent have relationships </p>\n"
                },
                {
                    "owner": {
                        "account_id": 345239,
                        "reputation": 2216,
                        "user_id": 678022,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8b8aff07ad4c799ea755b2c40b6632e4?s=256&d=identicon&r=PG",
                        "display_name": "Adversus",
                        "link": "https://stackoverflow.com/users/678022/adversus"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1451124708,
                    "creation_date": 1451124708,
                    "answer_id": 34470342,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are using <code>flask-restful</code> you can use <a href=\"http://flask-restful-cn.readthedocs.org/en/0.3.4/fields.html\" rel=\"noreferrer\">marshal</a>:</p>\n\n<pre><code>from flask.ext.restful import Resource, fields, marshal\n\ntopic_fields = {\n    'title':   fields.String,\n    'content': fields.String,\n    'uri':     fields.Url('topic'),\n    'creator': fields.String,\n    'created': fields.DateTime(dt_format='rfc822')\n}\n\nclass TopicListApi(Resource):\n    def get(self):\n        return {'topics': [marshal(topic, topic_fields) for topic in DbTopic.query.all()]}\n</code></pre>\n\n<p>You need to explicitly list what you are returning and what type it is, which I prefer anyway for an api. Serialization is easily taken care of (no need for <code>jsonify</code>), dates are also not a problem. Note that the content for the <code>uri</code> field is automatically generated based on the <code>topic</code> endpoint and the id.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1524349,
                        "reputation": 2383,
                        "user_id": 1423157,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/4a23a8d8d8cd065089d01c134eb6b8d5?s=256&d=identicon&r=PG",
                        "display_name": "robru",
                        "link": "https://stackoverflow.com/users/1423157/robru"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1443606576,
                    "last_edit_date": 1443606576,
                    "creation_date": 1443606199,
                    "answer_id": 32862881,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Ok, I've been working on this for a few hours, and I've developed what I believe to be the most pythonic solution yet. The following code snippets are python3 but shouldn't be too horribly painful to backport if you need.</p>\n\n<p>The first thing we're gonna do is start with a mixin that makes your db models act kinda like <code>dict</code>s:</p>\n\n<pre><code>from sqlalchemy.inspection import inspect\n\nclass ModelMixin:\n    \"\"\"Provide dict-like interface to db.Model subclasses.\"\"\"\n\n    def __getitem__(self, key):\n        \"\"\"Expose object attributes like dict values.\"\"\"\n        return getattr(self, key)\n\n    def keys(self):\n        \"\"\"Identify what db columns we have.\"\"\"\n        return inspect(self).attrs.keys()\n</code></pre>\n\n<p>Now we're going to define our model, inheriting the mixin:</p>\n\n<pre><code>class MyModel(db.Model, ModelMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    foo = db.Column(...)\n    bar = db.Column(...)\n    # etc ...\n</code></pre>\n\n<p>That's all it takes to be able to pass an instance of <code>MyModel()</code> to <code>dict()</code> and get a real live <code>dict</code> instance out of it, which gets us quite a long way towards making <code>jsonify()</code> understand it. Next, we need to extend <code>JSONEncoder</code> to get us the rest of the way:</p>\n\n<pre><code>from flask.json import JSONEncoder\nfrom contextlib import suppress\n\nclass MyJSONEncoder(JSONEncoder):\n    def default(self, obj):\n        # Optional: convert datetime objects to ISO format\n        with suppress(AttributeError):\n            return obj.isoformat()\n        return dict(obj)\n\napp.json_encoder = MyJSONEncoder\n</code></pre>\n\n<p>Bonus points: if your model contains computed fields (that is, you want your JSON output to contain fields that aren't actually stored in the database), that's easy too. Just define your computed fields as <code>@property</code>s, and extend the <code>keys()</code> method like so:</p>\n\n<pre><code>class MyModel(db.Model, ModelMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    foo = db.Column(...)\n    bar = db.Column(...)\n\n    @property\n    def computed_field(self):\n        return 'this value did not come from the db'\n\n    def keys(self):\n        return super().keys() + ['computed_field']\n</code></pre>\n\n<p>Now it's trivial to jsonify:</p>\n\n<pre><code>@app.route('/whatever', methods=['GET'])\ndef whatever():\n    return jsonify(dict(results=MyModel.query.all()))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3292491,
                        "reputation": 159,
                        "user_id": 2770473,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a59bdde5b71b36e77d9ca76f08aa3312?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "tahoe",
                        "link": "https://stackoverflow.com/users/2770473/tahoe"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1430786633,
                    "last_edit_date": 1430786633,
                    "creation_date": 1430785379,
                    "answer_id": 30042280,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a way to add an as_dict() method on every class, as well as any other method you want to have on every single class.\nNot sure if this is the desired way or not, but it works...</p>\n\n<pre><code>class Base(object):\n    def as_dict(self):\n        return dict((c.name,\n                     getattr(self, c.name))\n                     for c in self.__table__.columns)\n\n\nBase = declarative_base(cls=Base)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1629332,
                        "reputation": 2218,
                        "user_id": 1504213,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/692503161c0d920c75b93c16584f6a75?s=256&d=identicon&r=PG",
                        "display_name": "Carl Ekerot",
                        "link": "https://stackoverflow.com/users/1504213/carl-ekerot"
                    },
                    "is_accepted": false,
                    "score": 57,
                    "last_activity_date": 1421498693,
                    "last_edit_date": 1421498693,
                    "creation_date": 1421266565,
                    "answer_id": 27951648,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's what's usually sufficient for me:</p>\n\n<p>I create a serialization mixin which I use with my models. The serialization function basically fetches whatever attributes the SQLAlchemy inspector exposes and puts it in a dict.</p>\n\n<pre><code>from sqlalchemy.inspection import inspect\n\nclass Serializer(object):\n\n    def serialize(self):\n        return {c: getattr(self, c) for c in inspect(self).attrs.keys()}\n\n    @staticmethod\n    def serialize_list(l):\n        return [m.serialize() for m in l]\n</code></pre>\n\n<p>All that's needed now is to extend the SQLAlchemy model with the <code>Serializer</code> mixin class.</p>\n\n<p>If there are fields you do not wish to expose, or that need special formatting, simply override the <code>serialize()</code> function in the model subclass.</p>\n\n<pre><code>class User(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String)\n    password = db.Column(db.String)\n\n    # ...\n\n    def serialize(self):\n        d = Serializer.serialize(self)\n        del d['password']\n        return d\n</code></pre>\n\n<p>In your controllers, all you have to do is to call the <code>serialize()</code> function (or <code>serialize_list(l)</code> if the query results in a list) on the results:</p>\n\n<pre><code>def get_user(id):\n    user = User.query.get(id)\n    return json.dumps(user.serialize())\n\ndef get_users():\n    users = User.query.all()\n    return json.dumps(User.serialize_list(users))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 70610,
                        "reputation": 600,
                        "user_id": 204604,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/67ed61066b84918690ad0ddba9ca9864?s=256&d=identicon&r=PG",
                        "display_name": "radalin",
                        "link": "https://stackoverflow.com/users/204604/radalin"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1413983020,
                    "creation_date": 1413983020,
                    "answer_id": 26508101,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's been a lot of times and there are lots of valid answers, but the following code block seems to work:</p>\n\n<pre><code>my_object = SqlAlchemyModel()\nmy_serializable_obj = my_object.__dict__\ndel my_serializable_obj[\"_sa_instance_state\"]\nprint(jsonify(my_serializable_object))\n</code></pre>\n\n<p>I'm aware that this is not a perfect solution, nor as elegant as the others, however for those who want o quick fix, they might try this.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3824064,
                        "reputation": 917,
                        "user_id": 3171323,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2377fca36776d23e3f3340149dc94ea4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nick",
                        "link": "https://stackoverflow.com/users/3171323/nick"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1401493310,
                    "last_edit_date": 1401493310,
                    "creation_date": 1399650731,
                    "answer_id": 23568940,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was working with a sql query defaultdict of lists of RowProxy objects named jobDict\nIt took me a while to figure out what Type the objects were.</p>\n\n<p>This was a really simple quick way to resolve to some clean jsonEncoding just by typecasting the row to a list and by initially defining the dict with a value of list.</p>\n\n<pre><code>    jobDict = defaultdict(list)\n    def set_default(obj):\n        # trickyness needed here via import to know type\n        if isinstance(obj, RowProxy):\n            return list(obj)\n        raise TypeError\n\n\n    jsonEncoded = json.dumps(jobDict, default=set_default)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 177309,
                        "reputation": 5353,
                        "user_id": 408556,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/869402f85dcbabcef3da1ee61b88a45a?s=256&d=identicon&r=PG",
                        "display_name": "reubano",
                        "link": "https://stackoverflow.com/users/408556/reubano"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1367616294,
                    "creation_date": 1367616294,
                    "answer_id": 16367765,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For a flat query (no joins) you can do this</p>\n\n<pre><code>@app.route('/results/')\ndef results():\n    data = Table.query.all()\n    result = [d.__dict__ for d in data]\n    return jsonify(result=result)\n</code></pre>\n\n<p>and if you only want to return certain columns from the database you can do this</p>\n\n<pre><code>@app.route('/results/')\ndef results():\n    cols = ['id', 'url', 'shipping']\n    data = Table.query.all()\n    result = [{col: getattr(d, col) for col in cols} for d in data]\n    return jsonify(result=result)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 67033,
                        "reputation": 12087,
                        "user_id": 196358,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/dcd071c0057bee411af9af40e9e03947?s=256&d=identicon&r=PG",
                        "display_name": "Kenny Winker",
                        "link": "https://stackoverflow.com/users/196358/kenny-winker"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1341536984,
                    "last_edit_date": 1495540958,
                    "creation_date": 1341536984,
                    "answer_id": 11354640,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been looking at this problem for the better part of a day, and here's what I've come up with (credit to <a href=\"https://stackoverflow.com/a/5249214/196358\">https://stackoverflow.com/a/5249214/196358</a> for pointing me in this direction).</p>\n\n<p>(Note: I'm using flask-sqlalchemy, so my model declaration format is a bit different from straight sqlalchemy).</p>\n\n<p>In my <code>models.py</code> file:</p>\n\n<pre><code>import json\n\nclass Serializer(object):\n  __public__ = None\n  \"Must be implemented by implementors\"\n\n  def to_serializable_dict(self):\n    dict = {}\n    for public_key in self.__public__:\n      value = getattr(self, public_key)\n      if value:\n        dict[public_key] = value\n    return dict\n\nclass SWEncoder(json.JSONEncoder):\n  def default(self, obj):\n    if isinstance(obj, Serializer):\n      return obj.to_serializable_dict()\n    if isinstance(obj, (datetime)):\n      return obj.isoformat()\n    return json.JSONEncoder.default(self, obj)\n\n\ndef SWJsonify(*args, **kwargs):\n  return current_app.response_class(json.dumps(dict(*args, **kwargs), cls=SWEncoder, indent=None if request.is_xhr else 2), mimetype='application/json')\n  # stolen from https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py\n</code></pre>\n\n<p>and all my model objects look like this:</p>\n\n<pre><code>class User(db.Model, Serializer):\n  __public__ = ['id','username']\n  ... field definitions ...\n</code></pre>\n\n<p>In my views I call SWJsonify wherever I would have called <code>Jsonify</code>, like so:</p>\n\n<pre><code>@app.route('/posts')\ndef posts():\n  posts = Post.query.limit(PER_PAGE).all()\n  return SWJsonify({'posts':posts })\n</code></pre>\n\n<p>Seems to work pretty well. Even on relationships. I haven't gotten far with it, so YMMV, but  so far it feels pretty \"right\" to me.</p>\n\n<p>Suggestions welcome.</p>\n"
                }
            ]
        },
        {
            "311588": [
                {
                    "owner": {
                        "account_id": 25996815,
                        "reputation": 11,
                        "user_id": 19708043,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/568efd52cd66391db15fb403db7329b7?s=256&d=identicon&r=PG",
                        "display_name": "Connor Kress",
                        "link": "https://stackoverflow.com/users/19708043/connor-kress"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1659817049,
                    "last_edit_date": 1659817049,
                    "creation_date": 1659816990,
                    "answer_id": 73263001,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>    allUuids = [\n        x.id\n        for x in self.db.query(schema.allPostsUuid).execute(timeout = 20)\n        if x.type == &quot;post&quot;\n            and x.deleted\n    ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2125606,
                        "reputation": 59,
                        "user_id": 1887870,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dffe23a412b3f9adfae52bfe0500bac4?s=256&d=identicon&r=PG",
                        "display_name": "Henco",
                        "link": "https://stackoverflow.com/users/1887870/henco"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1450275531,
                    "last_edit_date": 1495540048,
                    "creation_date": 1450275531,
                    "answer_id": 34314371,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you're set on a comprehension <a href=\"https://stackoverflow.com/a/311604/1887870\">orestis's answer</a> is good.</p>\n\n<p>For more complex comprehensions like that I'd suggest using a generator with <code>yield</code>:</p>\n\n<pre><code>allUuids = list(self.get_all_uuids())\n\n\ndef get_all_uuids(self):\n    for x in self.db.query(schema.allPostsUuid).execute(timeout = 20):\n        if x.type == \"post\" and x.deleted is not False:\n            yield x.id\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6018,
                        "reputation": 595083,
                        "user_id": 9951,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/CIFG8.png?s=256",
                        "display_name": "Bite code",
                        "link": "https://stackoverflow.com/users/9951/bite-code"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1227417359,
                    "last_edit_date": 1227417359,
                    "creation_date": 1227382578,
                    "answer_id": 311680,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>You should not use a list comprehension for that</strong>.</p>\n\n<p>List comprehensions are an awesome feature, but they are meant to be shortcuts, not regular code.</p>\n\n<p>For such a long snippet, you should use ordinary blocs :</p>\n\n<pre><code>allUuids = []\nfor x in self.db.query(schema.allPostsUuid).execute(timeout = 20) :\n    if x.type == \"post\" and x.deleted is not False :\n        allUuids.append(x.id)\n</code></pre>\n\n<p>Exactly the same behavior, much more readable. Guido would be proud of you :-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1227382332,
                    "creation_date": 1227382332,
                    "answer_id": 311678,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>allUuids = [x.id \n            for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n            if x.type == \"post\" and x.deleted is not False]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "guzzloid"
                    },
                    "is_accepted": false,
                    "score": 58,
                    "last_activity_date": 1227382164,
                    "creation_date": 1227382164,
                    "answer_id": 311675,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Where I work, our coding guidelines would have us do something like this:</p>\n\n<pre><code>all_posts_uuid_query = self.db.query(schema.allPostsUuid)\nall_posts_uuid_list = all_posts_uuid_query.execute(timeout=20)\nall_uuid_list = [\n    x.id \n    for x in all_posts_uuid_list \n    if (\n        x.type == \"post\" \n        and \n        not x.deleted  # &lt;-- if you don't care about NULLs / None\n    )\n]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15443,
                        "reputation": 17130,
                        "user_id": 32617,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/8b5fa6471bfe06047844ec1cfb7382de?s=256&d=identicon&r=PG",
                        "display_name": "orestis",
                        "link": "https://stackoverflow.com/users/32617/orestis"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1227377981,
                    "creation_date": 1227377981,
                    "answer_id": 311604,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It depends on how long they are. I tend to structure them like so:</p>\n\n<pre><code>[x.id for x\n in self.db.query(schema.allPostsUuid).execute(timeout=20)\n if x.type == 'post' \n    and x.deleted is not False\n    and ...\n    and ...]\n</code></pre>\n\n<p>That way every expression has its own line.</p>\n\n<p>If any line becomes too big I like to extract it out in a lambda or expression:</p>\n\n<pre><code>transform = lambda x: x.id\nresults = self.db.query(schema.allPostsUuid).execute(timeout=20)\ncondition = lambda x: x.deleted is not False and ... and ...\n[transform(x) for x in results if condition(x)]\n</code></pre>\n\n<p>And then if a lambda becomes too long it gets promoted to a function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13980,
                        "reputation": 41577,
                        "user_id": 28380,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/e1f7597153b6acca55f0b522481e137d?s=256&d=identicon&r=PG",
                        "display_name": "Ali Afshar",
                        "link": "https://stackoverflow.com/users/28380/ali-afshar"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1227377740,
                    "creation_date": 1227377740,
                    "answer_id": 311597,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For me that's too much. Maybe it's just a terrible example, since \"type\" and \"deleted\" would clearly be part of the db query.</p>\n\n<p>I tend to think that if a list comprehension spans multiple lines it probably shouldn't be a list comprehension. Having said that, I usually just split the thing at \"if\" like other people have and will answer here.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5176,
                        "reputation": 272526,
                        "user_id": 8206,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=256&d=identicon&r=PG",
                        "display_name": "Eli Bendersky",
                        "link": "https://stackoverflow.com/users/8206/eli-bendersky"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1227377433,
                    "creation_date": 1227377433,
                    "answer_id": 311590,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How about:</p>\n\n<pre><code>allUuids = [x.id for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n                   if (x.type == \"post\" and x.deleted is not False)]\n</code></pre>\n\n<p>Generally, long lines can be avoided by pre-computing subexpressions into variables, which might add a minuscule performance cost:</p>\n\n<pre><code>query_ids = self.db.query(schema.allPostsUuid).execute(timeout = 20)\nallUuids = [x.id for x in query_ids\n                   if (x.type == \"post\" and x.deleted is not False)]\n</code></pre>\n\n<p>By the way, isn't '<code>is not False</code>' kind-of superfluous ? Are you worried about differentiating between None and False ? Because otherwise, it suffices to leave the condition as only: i<code>f (x.type == \"post\" and x.deleted)</code></p>\n"
                }
            ]
        },
        {
            "9060653": [
                {
                    "owner": {
                        "account_id": 12525,
                        "reputation": 43732,
                        "user_id": 24718,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/0kiYe.jpg?s=256",
                        "display_name": "monkut",
                        "link": "https://stackoverflow.com/users/24718/monkut"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1560861091,
                    "last_edit_date": 1560861091,
                    "creation_date": 1327909070,
                    "answer_id": 9060720,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As mentioned it's a <a href=\"http://docs.python.org/reference/expressions.html#generator-expressions\" rel=\"nofollow noreferrer\">generator expression</a>.</p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p>The parentheses can be omitted on calls with only one argument. See section <a href=\"https://docs.python.org/reference/expressions.html#calls\" rel=\"nofollow noreferrer\">Calls</a> for the detail.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 186862,
                        "reputation": 225484,
                        "user_id": 424499,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG",
                        "display_name": "Raymond Hettinger",
                        "link": "https://stackoverflow.com/users/424499/raymond-hettinger"
                    },
                    "is_accepted": false,
                    "score": 167,
                    "last_activity_date": 1328063560,
                    "last_edit_date": 1328063560,
                    "creation_date": 1327911234,
                    "answer_id": 9061024,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The other respondents were correct in answering that you had discovered a <a href=\"http://www.python.org/dev/peps/pep-0289/\">generator expression</a> (which has a notation similar to list comprehensions but without the surrounding square brackets).</p>\n\n<p>In general, genexps (as they are affectionately known) are more memory efficient and faster than list comprehensions.</p>\n\n<p>HOWEVER, it the case of <code>''.join()</code>, a list comprehension is both faster and more memory efficient.  The reason is that <em>join</em> needs to make two passes over the data, so it actually needs a real list.  If you give it one, it can start its work immediately.  If you give it a genexp instead, it cannot start work until it builds-up a new list in memory by running the genexp to exhaustion:</p>\n\n<pre><code>~ $ python -m timeit '\"\".join(str(n) for n in xrange(1000))'\n1000 loops, best of 3: 335 usec per loop\n~ $ python -m timeit '\"\".join([str(n) for n in xrange(1000)])'\n1000 loops, best of 3: 288 usec per loop\n</code></pre>\n\n<p>The same result holds when comparing <em>itertools.imap</em> versus <em>map</em>:</p>\n\n<pre><code>~ $ python -m timeit -s'from itertools import imap' '\"\".join(imap(str, xrange(1000)))'\n1000 loops, best of 3: 220 usec per loop\n~ $ python -m timeit '\"\".join(map(str, xrange(1000)))'\n1000 loops, best of 3: 212 usec per loop\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24776,
                        "reputation": 27283,
                        "user_id": 63225,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/2b6513bd28040ce526882afb70f4f7d5?s=256&d=identicon&r=PG",
                        "display_name": "sblom",
                        "link": "https://stackoverflow.com/users/63225/sblom"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1327909100,
                    "last_edit_date": 1327909100,
                    "creation_date": 1327908752,
                    "answer_id": 9060667,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If it's in parens, but not brackets, it's <em>technically</em> a generator expression. Generator expressions were first introduced in Python 2.4.</p>\n\n<p><a href=\"http://wiki.python.org/moin/Generators\" rel=\"nofollow\">http://wiki.python.org/moin/Generators</a></p>\n\n<p>The part after the join, <code>( str(_) for _ in xrange(10) )</code> is, by itself, a generator expression. You could do something like:</p>\n\n<pre><code>mylist = (str(_) for _ in xrange(10))\n''.join(mylist)\n</code></pre>\n\n<p>and it means exactly the same thing that you wrote in the second case above.</p>\n\n<p>Generators have some very interesting properties, not the least of which is that they don't end up allocating an entire list when you don't need one. Instead, a function like join \"pumps\" the items out of the generator expression one at a time, doing its work on the tiny intermediate parts.</p>\n\n<p>In your particular examples, list and generator probably don't perform terribly differently, but in general, I prefer using generator expressions (and even generator functions) whenever I can, mostly because it's extremely rare for a generator to be <em>slower</em> than a full list materialization.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1327908950,
                    "creation_date": 1327908950,
                    "answer_id": 9060697,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Your second example uses a generator expression rather than a list comprehension. The difference is that with the list comprehension, a list is completely built and passed to <code>.join()</code>. With the generator expression, items are generated one by one and consumed by <code>.join()</code>. The latter uses less memory and is generally faster.</p>\n\n<p>As it happens, the list constructor will happily consume any iterable, including a generator expression. So:</p>\n\n<pre><code>[str(n) for n in xrange(10)]\n</code></pre>\n\n<p>is just \"syntactic sugar\" for:</p>\n\n<pre><code>list(str(n) for n in xrange(10))\n</code></pre>\n\n<p>In other words, a list comprehension is just a generator expression that is turned into a list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 77,
                    "last_activity_date": 1327908843,
                    "creation_date": 1327908843,
                    "answer_id": 9060686,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n</code></pre>\n\n<p>This is called a <em>generator expression</em>, and is explained in <a href=\"http://www.python.org/dev/peps/pep-0289/\">PEP 289</a>.</p>\n\n<p>The main difference between generator expressions and list comprehensions is that the former don't create the list in memory.</p>\n\n<p>Note that there's a third way to write the expression:</p>\n\n<pre><code>''.join(map(str, xrange(10)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 285593,
                        "reputation": 25002,
                        "user_id": 584347,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ba8cb56177fdcd9e3e0053414d3ad539?s=256&d=identicon&r=PG",
                        "display_name": "Michael J. Barber",
                        "link": "https://stackoverflow.com/users/584347/michael-j-barber"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327908815,
                    "creation_date": 1327908815,
                    "answer_id": 9060682,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The argument to your second <code>join</code> call is a generator expression. It does produce an iterable.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 36572,
                        "reputation": 598779,
                        "user_id": 104349,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Roseman",
                        "link": "https://stackoverflow.com/users/104349/daniel-roseman"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327908802,
                    "creation_date": 1327908802,
                    "answer_id": 9060679,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's a generator, rather than a list comprehension. Generators are also iterables, but rather than creating the entire list first then passing it to join, it passes each value in the xrange one by one, which can be much more efficient.</p>\n"
                }
            ]
        },
        {
            "4292909": [
                {
                    "owner": {
                        "account_id": 41432,
                        "reputation": 7421,
                        "user_id": 120398,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/cb6fc79bdc91c2d4cd10c02f0d434732?s=256&d=identicon&r=PG",
                        "display_name": "David Fraser",
                        "link": "https://stackoverflow.com/users/120398/david-fraser"
                    },
                    "is_accepted": true,
                    "score": 16,
                    "last_activity_date": 1497310455,
                    "last_edit_date": 1497310455,
                    "creation_date": 1291654483,
                    "answer_id": 4368878,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://www.activestate.com/komodo-edit\" rel=\"nofollow noreferrer\">Komodo Edit</a> meets most of your requirements (as others mentioned in the comments) and supports Python 3 from version 6:</p>\n\n<ul>\n<li><strong>Open source and free.</strong></li>\n<li><em>Cross platform (Windows and Linux, also Mac)</em> \u2015 built on <a href=\"https://developer.mozilla.org/en/docs/XULRunner\" rel=\"nofollow noreferrer\">XULRunner</a>.</li>\n<li><em>Standard features: syntax highlighting, auto-indent, etc.</em> \u2015 Komodo has the best Python auto-completion I've seen; they'll do automatic type inference from variable assignments.</li>\n<li><kbd>Run</kbd> <em>button, rather than console where you have to type \"python foo.py\".</em> \u2015 <a href=\"http://morlockhq.blogspot.com/2008/01/launching-python-shell-and-running-code.html\" rel=\"nofollow noreferrer\">Can be simply added</a>.</li>\n<li><em>Context-aware help</em> \u2015 supported when you press <kbd>(</kbd> plus it will do this nicely on objects that have been instantiated from other classes.</li>\n<li><em>Embedded Python shell</em> \u2015 The full Python shell integration is only in the commercial IDE, but you can easily hook up a shell into a command output window by adding a toolbox recipe for <code>python -i</code>.</li>\n<li><em>Built-in debugger</em> \u2015 Unfortunately not (but neither do lots of the light-weight IDEs recommended above) \u2015 this is only in the commercial Komodo IDE. I'd recommend using <a href=\"http://winpdb.org/\" rel=\"nofollow noreferrer\">Winpdb</a> alongside Komodo Edit for development \u2015 it's faster than the Komodo IDE debugger (and lots of other debuggers) in my experience. Whether this'll fly with high school students would be the question.</li>\n<li><em>Useless crud stripped</em> \u2015 Komodo's clearly got more stuff in it that IDLE so it depends how you see this. Auto-completion can be turned off.</li>\n<li><em>Lightweight for kids who go home to old PCs unable to run beefy IDEs such as Eclipse</em> \u2015 This may also be a downfall \u2015 I'd say Komodo is less beefy than Eclipse though.</li>\n</ul>\n\n<p>Extra things to consider:</p>\n\n<ul>\n<li>Komodo is great at web development: it supports nice syntax highlighting and code completion on embedded CSS inside HTML etc\u2026</li>\n<li>Support for <a href=\"http://community.activestate.com/addons\" rel=\"nofollow noreferrer\">extensions</a> (along the same lines as Firefox, plus the extensions can be written in Python) \u2015 this could be useful if you need some tweaks to the UI etc for the courses.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 423222,
                        "reputation": 799,
                        "user_id": 802480,
                        "user_type": "registered",
                        "accept_rate": 38,
                        "profile_image": "https://www.gravatar.com/avatar/f30476dc1cb3545aa01f9675381f54f7?s=256&d=identicon&r=PG",
                        "display_name": "max_force",
                        "link": "https://stackoverflow.com/users/802480/max-force"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1402210529,
                    "creation_date": 1402210529,
                    "answer_id": 24103754,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://www.jetbrains.com/pycharm/\" rel=\"nofollow\">PyCharm</a> is awesome. Looks good, perform nicely and has now a Free Community Edition!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22422,
                        "reputation": 84962,
                        "user_id": 55246,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/gVHrv.jpg?s=256",
                        "display_name": "Sridhar Ratnakumar",
                        "link": "https://stackoverflow.com/users/55246/sridhar-ratnakumar"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1316381506,
                    "last_edit_date": 1316381506,
                    "creation_date": 1291746612,
                    "answer_id": 4380229,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<blockquote>\n  <p><strong>Is there a free (preferably open source) IDE you'd recommend that supports Python 3,</strong> </p>\n</blockquote>\n\n<p><a href=\"http://www.activestate.com/komodo-ide/downloads\" rel=\"nofollow\">ActiveState Komodo Edit</a> is free and <a href=\"http://www.openkomodo.com/\" rel=\"nofollow\">open source</a>, that also supports Python 3.</p>\n\n<blockquote>\n  <p><strong>Cross platform (Windows and Linux)</strong></p>\n</blockquote>\n\n<p>Since Komodo is based on the Firefox code base, it runs with native look &amp; feel on Windows, Linux and Mac OS X.</p>\n\n<blockquote>\n  <p><strong>Standard features: syntax highlighting, auto-indent, etc.</strong></p>\n</blockquote>\n\n<p><a href=\"http://docs.activestate.com/komodo/6.0/editor.html\" rel=\"nofollow\">Yup</a>.</p>\n\n<blockquote>\n  <p><strong>Run button</strong>, rather than console where you have to type \"python foo.py\".</p>\n</blockquote>\n\n<p><a href=\"http://docs.activestate.com/komodo/6.0/run.html#run_top\" rel=\"nofollow\">Yup</a>. Here's <a href=\"http://www.activestate.com/blog/2010/09/writing-pep8-aware-python-code-komodo\" rel=\"nofollow\">a blog post</a> of mine demonstrating an use (using pep8) of the Run dialog. There is also a \"Toolbox\" feature when you can save Run configurations.</p>\n\n<blockquote>\n  <p><strong>Contest-aware help</strong> (e.g. when they hover over math.floor() it should give help for the function).</p>\n</blockquote>\n\n<p>Komodo <a href=\"http://docs.activestate.com/komodo/6.0/editor.html#AutoComplete\" rel=\"nofollow\">does that</a> (Cmd+hover also works), and <a href=\"http://docs.activestate.com/komodo/6.0/hyperlinks.html#hyperlinks_top\" rel=\"nofollow\">more</a>.</p>\n\n<blockquote>\n  <p><strong>Embedded Python shell. Built-in debugger</strong></p>\n</blockquote>\n\n<p>These two features are only available in Komodo IDE. ActiveState provides <a href=\"http://www.activestate.com/partners/education-partners\" rel=\"nofollow\">free licenses</a> to qualified educational institutions.</p>\n\n<blockquote>\n  <p><strong>Useless crud stripped</strong>, e.g. they don't need refactoring tools during an intro class and auto-completion gets in the way of teaching. </p>\n</blockquote>\n\n<p>Auto-complete and other features can be disabled in Preferences.</p>\n\n<blockquote>\n  <p>Along the same lines, <strong>it should be lightweight</strong> as some kids will go home to old PCs unable to run beefy IDEs such as Eclipse.</p>\n</blockquote>\n\n<p>While Komodo is definitely not as beefy as Eclipse, it depends on what you mean by \"old PCs\". If it can run Firefox 3, then Komodo (which is based on Firefox 3 codebase) too should be able to run on it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 734536,
                        "reputation": 126,
                        "user_id": 698685,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/6b2fa153aedf65251b671af225b38112?s=256&d=identicon&r=PG",
                        "display_name": "Stephan Deibel",
                        "link": "https://stackoverflow.com/users/698685/stephan-deibel"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1312308707,
                    "creation_date": 1312308707,
                    "answer_id": 6916578,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Wing IDE is free for classroom use, including the Wing Pro and Wing Personal product levels.  See <a href=\"https://wingware.com/store/free\">https://wingware.com/store/free</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 378832,
                        "reputation": 1663,
                        "user_id": 731819,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/971abbfd52e5b5ba5ebdae14ac214dd0?s=256&d=identicon&r=PG",
                        "display_name": "Jim Syyap",
                        "link": "https://stackoverflow.com/users/731819/jim-syyap"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1304785088,
                    "last_edit_date": 1304785088,
                    "creation_date": 1304724030,
                    "answer_id": 5917990,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I am teaching myself python, and atm, GEANY works best for me.</p>\n\n<p>Geany is a text editor using the GTK2 toolkit with basic features of an integrated development environment. It was developed to provide a small and fast IDE, which has only a few dependencies from other packages. It supports many filetypes and has some nice features.</p>\n\n<p>You can download it <a href=\"http://www.geany.org/\" rel=\"nofollow\">here</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 34058,
                        "reputation": 14459,
                        "user_id": 95852,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e215c7362074d0346612a10d3a89be9e?s=256&d=identicon&r=PG",
                        "display_name": "John Y",
                        "link": "https://stackoverflow.com/users/95852/john-y"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1291650866,
                    "last_edit_date": 1291650866,
                    "creation_date": 1291444354,
                    "answer_id": 4352297,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I'm going to go in the opposite direction of Eclipse/Pydev (too big) and recommend <a href=\"http://www.scintilla.org/SciTE.html\" rel=\"nofollow\">SciTE</a> (too small).  No, I'm not comfortable even calling it an IDE, but it really nails points 1 and 2, and it is extremely lightweight, suitable for even the wimpiest possible computers that are capable of running Python 3 (or Python 2.3 for that matter).</p>\n\n<p>I think Python is such a nice, small, simple language, if you are only teaching the basics, that you really don't need a full-blown IDE.  I actually find learning an IDE more difficult than learning Python; plus having an IDE sometimes obscures what is part of the language and what is part of the development environment.</p>\n\n<p><i><b>Edit:</b>  The list of criteria in the original question was edited.  Now SciTE actually meets at least the first three.  At the time of this edit, those are (1) runs on Windows and Linux, (2) has typical programming editor features like syntax highlighting and so forth, (3) has a button to execute the script.</i></p>\n"
                },
                {
                    "owner": {
                        "account_id": 128012,
                        "reputation": 283942,
                        "user_id": 325565,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=256&d=identicon&r=PG",
                        "display_name": "Joe Kington",
                        "link": "https://stackoverflow.com/users/325565/joe-kington"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1291502650,
                    "creation_date": 1291502650,
                    "answer_id": 4356238,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://code.google.com/p/iep/\" rel=\"noreferrer\">IEP</a> is another lightweight option that should meet all of your requirements. </p>\n\n<p>It has similar goals to <a href=\"http://code.google.com/p/spyderlib/\" rel=\"noreferrer\">spyder</a> (which is quite nice, and has been mentioned by a couple of other people) but is a bit more lightweight and <em>does</em> support python3.  </p>\n\n<p><img src=\"https://i.sstatic.net/IPAan.png\" alt=\"alt text\"></p>\n\n<p>It's worth taking a look at anyway... </p>\n"
                },
                {
                    "owner": {
                        "account_id": 208639,
                        "reputation": 432,
                        "user_id": 459237,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/17964a443911eac0671bbb33fca86d92?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SimoneF",
                        "link": "https://stackoverflow.com/users/459237/simonef"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1291305293,
                    "creation_date": 1291305293,
                    "answer_id": 4336918,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I have been hearing a lot of praises about Aptana Studio recently ( made by the coders of PyDev ).<br>\n<a href=\"http://aptana.com/products/studio3/download\" rel=\"nofollow\">http://aptana.com/products/studio3/download</a><br>\nPersonally using Eclipse + PyDev and really recommend it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 95908,
                        "reputation": 109,
                        "user_id": 260988,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cd7b9309dd9a2c956a4936020a3fd7e7?s=256&d=identicon&r=PG",
                        "display_name": "Charles Hebert",
                        "link": "https://stackoverflow.com/users/260988/charles-hebert"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1291296758,
                    "creation_date": 1291296758,
                    "answer_id": 4335534,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Give a try to <a href=\"http://code.google.com/p/spyderlib\" rel=\"nofollow\">Spyderlib</a> (Spyder is the Scientific PYthon Development EnviRonment)</p>\n\n<p><a href=\"http://packages.python.org/spyder/_images/spyder.png\" rel=\"nofollow\">Screenshot</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 254673,
                        "reputation": 2821,
                        "user_id": 534235,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8b1cb465851fc20f6cf086ae99e793d9?s=256&d=identicon&r=PG",
                        "display_name": "Wesley Rice",
                        "link": "https://stackoverflow.com/users/534235/wesley-rice"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1291253922,
                    "creation_date": 1291253922,
                    "answer_id": 4330898,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>WingWare's WingIDE is fantastic. I'm not sure if the free Wing 101 has all the features you're looking for, but the personal and professional editions are great little IDEs. </p>\n\n<p>[ <a href=\"http://wingware.com\" rel=\"noreferrer\">http://wingware.com</a> ]</p>\n"
                },
                {
                    "owner": {
                        "account_id": 47548,
                        "reputation": 4708,
                        "user_id": 140894,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/2c13fb3e945ef7056613bb0a234303e9?s=256&d=identicon&r=PG",
                        "display_name": "Don O&#39;Donnell",
                        "link": "https://stackoverflow.com/users/140894/don-odonnell"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1290929772,
                    "creation_date": 1290929772,
                    "answer_id": 4295829,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's Windows only, but the PythonWin IDE that comes with Mark Hammond's pywin32 package meets all your requirements including support for Python 3.1. Download it at: <a href=\"http://sourceforge.net/projects/pywin32/files/\" rel=\"nofollow\">http://sourceforge.net/projects/pywin32/files/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16878,
                        "reputation": 308273,
                        "user_id": 37213,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/eeec80237213c91e5bab56b77ac5b8ca?s=256&d=identicon&r=PG",
                        "display_name": "duffymo",
                        "link": "https://stackoverflow.com/users/37213/duffymo"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1290880786,
                    "creation_date": 1290880786,
                    "answer_id": 4293073,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>JetBrains <a href=\"http://www.jetbrains.com/pycharm/\">PyCharm</a> is terrific.  Not free, though.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 184755,
                        "reputation": 8470,
                        "user_id": 421010,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/ef81dede19750bc1eb4e2ac6f3aa1476?s=256&d=identicon&r=PG",
                        "display_name": "Andrew",
                        "link": "https://stackoverflow.com/users/421010/andrew"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1290880638,
                    "last_edit_date": 1290880638,
                    "creation_date": 1290879015,
                    "answer_id": 4292927,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Eclipse + pydev can do that. It's free. UI isn't very simple, but you have debugger, highlight, shell and completion.</p>\n\n<p><strong>UPD:</strong> Here is <a href=\"http://dev.collabshot.com/show/b472ac/\" rel=\"noreferrer\">sample screenshot</a>. It's pretty simple imo.<br>\n12-18 is more like teenager, not a kid, I'm sure that they fluent with much more complicated interfaces like facebook :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 172044,
                        "reputation": 76867,
                        "user_id": 399815,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/45aaf2885832e62ad4864782daa914f9?s=256&d=identicon&r=PG",
                        "display_name": "Rafe Kettler",
                        "link": "https://stackoverflow.com/users/399815/rafe-kettler"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1290879427,
                    "last_edit_date": 1290879427,
                    "creation_date": 1290879038,
                    "answer_id": 4292932,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The Python IDLE has most of these features (never used the debugger before so I don't know how good it is). It's probably the most minimalist Python IDE out there. See <a href=\"http://docs.python.org/library/idle.html\">http://docs.python.org/library/idle.html</a> for more. IBM also did an overview of IDLE <a href=\"http://www.ibm.com/developerworks/linux/library/l-cpyide/#N100A2\">here</a>.</p>\n\n<p>Also, it's already included in the Windows binary (which is what most schools use, at least here), so you won't have to do any special work to get it up and running. It's available for Linux too.</p>\n\n<p>I've never tried <a href=\"http://code.google.com/p/pyscripter/\">PyScripter</a> before, but it does seem to offer what you need in an IDE and seems fairly simple. Only con is that it's Windows only.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79575,
                        "reputation": 206,
                        "user_id": 225530,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6148669b726b1f4cebcbf2ebc89317f8?s=256&d=identicon&r=PG",
                        "display_name": "snippsat",
                        "link": "https://stackoverflow.com/users/225530/snippsat"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1290879348,
                    "creation_date": 1290879348,
                    "answer_id": 4292966,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://code.google.com/p/pyscripter/\" rel=\"nofollow\">Pyscripter</a> is a nice IDE,has all features you ask for.</p>\n"
                }
            ]
        },
        {
            "2597166": [
                {
                    "owner": {
                        "account_id": 84277,
                        "reputation": 176291,
                        "user_id": 235698,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/KjvlE.png?s=256",
                        "display_name": "Mark Tolonen",
                        "link": "https://stackoverflow.com/users/235698/mark-tolonen"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1270696999,
                    "creation_date": 1270696999,
                    "answer_id": 2597381,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; x=(1,'a',2,'b',3,'c')\n&gt;&gt;&gt; dict(zip(x[::2],x[1::2]))\n{1: 'a', 2: 'b', 3: 'c'}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1270695004,
                    "creation_date": 1270695004,
                    "answer_id": 2597275,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here are a couple of ways for <strong>Python3</strong> using dict comprehensions</p>\n\n<pre><code>&gt;&gt;&gt; x = (1,'a',2,'b',3,'c')\n&gt;&gt;&gt; {k:v for k,v in zip(*[iter(x)]*2)}\n{1: 'a', 2: 'b', 3: 'c'}\n&gt;&gt;&gt; {x[i]:x[i+1] for i in range(0,len(x),2)}\n{1: 'a', 2: 'b', 3: 'c'}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1270693399,
                    "creation_date": 1270693399,
                    "answer_id": 2597182,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>dict(zip(*[iter(val_)] * 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1270693349,
                    "creation_date": 1270693349,
                    "answer_id": 2597178,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>dict(x[i:i+2] for i in range(0, len(x), 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222366,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270693327,
                    "creation_date": 1270693327,
                    "answer_id": 2597173,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>x = (1,'a',2,'b',3,'c') \nd = dict(x[n:n+2] for n in xrange(0, len(x), 2))\nprint d\n</code></pre>\n"
                }
            ]
        },
        {
            "8528178": [
                {
                    "owner": {
                        "account_id": 237172,
                        "reputation": 208015,
                        "user_id": 505154,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Clark",
                        "link": "https://stackoverflow.com/users/505154/andrew-clark"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1706641860,
                    "last_edit_date": 1706641860,
                    "creation_date": 1323992954,
                    "answer_id": 8528203,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest way to create a list where all values are the same is multiplying a one-element list by <code>n</code>.</p>\n<pre><code>&gt;&gt;&gt; [0] * 4\n[0, 0, 0, 0]\n</code></pre>\n<p>So for your loop:</p>\n<pre><code>for i in range(10):\n    print([0] * i)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 341146,
                        "reputation": 7450,
                        "user_id": 671575,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/42c0a00d0cce4e810c026ecff4beda96?s=256&d=identicon&r=PG",
                        "display_name": "Seppo Ervi&#228;l&#228;",
                        "link": "https://stackoverflow.com/users/671575/seppo-ervi%c3%a4l%c3%a4"
                    },
                    "is_accepted": false,
                    "score": 89,
                    "last_activity_date": 1432031049,
                    "last_edit_date": 1495541901,
                    "creation_date": 1360531303,
                    "answer_id": 14802726,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>$python 2.7.8\n\nfrom timeit import timeit\nimport numpy\n\ntimeit(\"list(0 for i in xrange(0, 100000))\", number=1000)\n&gt; 8.173301935195923\n\ntimeit(\"[0 for i in xrange(0, 100000)]\", number=1000)\n&gt; 4.881675958633423\n\ntimeit(\"[0] * 100000\", number=1000)\n&gt; 0.6624710559844971\n\ntimeit('list(itertools.repeat(0, 100000))', 'import itertools', number=1000)\n&gt; 1.0820629596710205\n</code></pre>\n\n<p>You should use <code>[0] * n</code> to generate a list with <code>n</code> zeros.</p>\n\n<p><a href=\"https://stackoverflow.com/a/30216156/671575\">See why [] is faster than list()</a></p>\n\n<p>There is a gotcha though, both <code>itertools.repeat</code> and <code>[0] * n</code> will create lists whose elements refer to same <code>id</code>. This is not a problem with immutable objects like integers or strings but if you try to create list of mutable objects like a list of lists (<code>[[]] * n</code>) then all the elements will refer to the same object.</p>\n\n<pre><code>a = [[]]\u00a0* 10\na[0].append(1)\na\n&gt; [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]\n</code></pre>\n\n<p><code>[0] * n</code> will create the list immediately while <code>repeat</code> can be used to create the list lazily when it is first accessed. </p>\n\n<p>If you're dealing with really large amount of data and your problem doesn't need variable length of list or multiple data types within the list it is better to use <code>numpy</code> arrays.</p>\n\n<pre><code>timeit('numpy.zeros(100000, numpy.int)', 'import numpy', number=1000)\n&gt; 0.057849884033203125\n</code></pre>\n\n<p><code>numpy</code> arrays will also consume less memory.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1110476,
                        "reputation": 6376,
                        "user_id": 1101034,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/TtOV8.gif?s=256",
                        "display_name": "Tiffany",
                        "link": "https://stackoverflow.com/users/1101034/tiffany"
                    },
                    "is_accepted": true,
                    "score": 625,
                    "last_activity_date": 1323997332,
                    "last_edit_date": 1323997332,
                    "creation_date": 1323997000,
                    "answer_id": 8528626,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>#add code here to figure out the number of 0's you need, naming the variable n.\nlistofzeros = [0] * n\n</code></pre>\n\n<p>if you prefer to put it in the function, just drop in that code and add <code>return listofzeros</code></p>\n\n<p>Which would look like this:</p>\n\n<pre><code>def zerolistmaker(n):\n    listofzeros = [0] * n\n    return listofzeros\n</code></pre>\n\n<p>sample output:</p>\n\n<pre><code>&gt;&gt;&gt; zerolistmaker(4)\n[0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(5)\n[0, 0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(15)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 141612,
                        "reputation": 161056,
                        "user_id": 348785,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/7f3dcb0c380783d1be77bfdd5fc5fda6?s=256&d=identicon&r=PG",
                        "display_name": "kev",
                        "link": "https://stackoverflow.com/users/348785/kev"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1323996687,
                    "creation_date": 1323996687,
                    "answer_id": 8528602,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>$ python3\n&gt;&gt;&gt; from itertools import repeat\n&gt;&gt;&gt; list(repeat(0, 7))\n[0, 0, 0, 0, 0, 0, 0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1110430,
                        "reputation": 39,
                        "user_id": 1100997,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a76ca238aaa9436b98752dabdd15275?s=256&d=identicon&r=PG",
                        "display_name": "bugfree",
                        "link": "https://stackoverflow.com/users/1100997/bugfree"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1323994493,
                    "creation_date": 1323994493,
                    "answer_id": 8528360,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the <strong>xrange</strong> way:</p>\n\n<pre><code>list(0 for i in xrange(0,5)) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 251148,
                        "reputation": 6381,
                        "user_id": 528317,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3114d84a5c5144b2a531c610c913bdb9?s=256&d=identicon&r=PG",
                        "display_name": "Gavin Anderegg",
                        "link": "https://stackoverflow.com/users/528317/gavin-anderegg"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1323993461,
                    "creation_date": 1323993461,
                    "answer_id": 8528250,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you want a function which will return an arbitrary number of zeros in a list, try this:</p>\n\n<pre><code>def make_zeros(number):\n    return [0] * number\n\nlist = make_zeros(10)\n\n# list now contains: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1323993052,
                    "creation_date": 1323993052,
                    "answer_id": 8528217,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>zlists = [[0] * i for i in range(10)]\n</code></pre>\n\n<p><code>zlists[0]</code> is a list of 0 zeroes, <code>zlists[1]</code> is a list of 1 zero, <code>zlists[2]</code> is a list of 2 zeroes, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 52820,
                        "reputation": 8391,
                        "user_id": 157880,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/1f658c4191d93b9672ffa04fc3689f9b?s=256&d=identicon&r=PG",
                        "display_name": "Lelouch Lamperouge",
                        "link": "https://stackoverflow.com/users/157880/lelouch-lamperouge"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1323992974,
                    "creation_date": 1323992974,
                    "answer_id": 8528209,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>zeros=[0]*4</code></p>\n\n<p>you can replace <code>4</code> in the above example with whatever number you want.</p>\n"
                }
            ]
        },
        {
            "29147442": [
                {
                    "owner": {
                        "account_id": 42785,
                        "reputation": 2818,
                        "user_id": 124764,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b141ea84f47445e24cbfc6e34d30de54?s=256&d=identicon&r=PG",
                        "display_name": "Zada Zorg",
                        "link": "https://stackoverflow.com/users/124764/zada-zorg"
                    },
                    "is_accepted": true,
                    "score": 164,
                    "last_activity_date": 1576601144,
                    "last_edit_date": 1576601144,
                    "creation_date": 1427813412,
                    "answer_id": 29371584,
                    "question_id": 29147442,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This means, that you should rewrite your code as:</p>\n\n<pre><code>logging.debug(\"detect mimetypes faild because %s\", e)\n</code></pre>\n\n<p>According to <a href=\"https://docs.python.org/2/library/logging.html\" rel=\"noreferrer\">https://docs.python.org/2/library/logging.html</a></p>\n\n<blockquote>\n  <p><strong>Logger.debug(msg, *args, **kwargs)</strong></p>\n  \n  <p>... Logs a message with level DEBUG on this logger. <em>The <code>msg</code> is the message format string, and the <code>args</code> are the arguments which are merged into msg using the string formatting operator.</em> (Note that this means that you can use keywords in the format string, together with a single dictionary argument.) ...</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "606516": [
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346708,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1469808704,
                    "last_edit_date": 1469808704,
                    "creation_date": 1236089811,
                    "answer_id": 606525,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Take a look at <a href=\"http://www.python.org/doc/essays/graphs/\" rel=\"nofollow noreferrer\">this page on implementing graphs in python</a>.</p>\n\n<p>You could also take a look at <a href=\"http://sourceforge.net/projects/pygraphlib/\" rel=\"nofollow noreferrer\">pygraphlib</a> on sourceforge.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8717,
                        "reputation": 21178,
                        "user_id": 15842,
                        "user_type": "registered",
                        "accept_rate": 59,
                        "profile_image": "https://www.gravatar.com/avatar/58d77327a8f46041462b31c117e5c51a?s=256&d=identicon&r=PG",
                        "display_name": "Gregg Lind",
                        "link": "https://stackoverflow.com/users/15842/gregg-lind"
                    },
                    "is_accepted": true,
                    "score": 275,
                    "last_activity_date": 1418134487,
                    "last_edit_date": 1418134487,
                    "creation_date": 1236094407,
                    "answer_id": 606858,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are two excellent choices:</p>\n\n<p><a href=\"http://networkx.github.io/\" rel=\"noreferrer\">NetworkX</a></p>\n\n<p>and </p>\n\n<p><a href=\"http://igraph.org/\" rel=\"noreferrer\">igraph</a></p>\n\n<p>I like NetworkX, but I read good things about igraph as well.  I routinely use NetworkX with graphs with 1 million nodes with no problem (it's about double the overhead of a dict of size V + E)</p>\n\n<p>If you want a feature comparison, see this from the Networkx-discuss list</p>\n\n<p><a href=\"http://groups.google.com/group/networkx-discuss/t/7597ca97abbb3f90?hl=en\" rel=\"noreferrer\">Feature comparison thread</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1477731,
                        "reputation": 53,
                        "user_id": 1387742,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/53356bf7e7da93b41385899a34b043b3?s=256&d=identicon&r=PG",
                        "display_name": "jtguerin",
                        "link": "https://stackoverflow.com/users/1387742/jtguerin"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1337808784,
                    "creation_date": 1337808784,
                    "answer_id": 10728193,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I second zweiterlinde's suggestion to use python-graph.  I've used it as the basis of a graph-based research project that I'm working on.  The library is well written, stable, and has a good interface.  The authors are also quick to respond to inquiries and reports.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 400276,
                        "reputation": 7738,
                        "user_id": 766172,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/8f581bac48616fc169e922911e652c55?s=256&d=identicon&r=PG",
                        "display_name": "syvex",
                        "link": "https://stackoverflow.com/users/766172/syvex"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327089452,
                    "creation_date": 1327089452,
                    "answer_id": 8947137,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm having the most luck with pydot. Some of the others are hard to install and configure on different platforms like Win 7.</p>\n\n<p><a href=\"http://code.google.com/p/pydot/\" rel=\"nofollow\">http://code.google.com/p/pydot/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 60601,
                        "reputation": 5251,
                        "user_id": 180962,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fa21ab3e7b0fdcc3058400a35aef75b?s=256&d=identicon&r=PG",
                        "display_name": "Tiago Peixoto",
                        "link": "https://stackoverflow.com/users/180962/tiago-peixoto"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1290619497,
                    "creation_date": 1290619497,
                    "answer_id": 4269642,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would like to plug my own graph python library: <a href=\"http://graph-tool.skewed.de\" rel=\"noreferrer\">graph-tool</a>.</p>\n\n<p>It is very fast, since it is implemented in C++ with the Boost Graph Library, and it contains lots of algorithms and extensive documentation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20523,
                        "reputation": 1302,
                        "user_id": 49136,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/aed4684d139eb240041898b5dd77b342?s=256&d=identicon&r=PG",
                        "display_name": "lmount",
                        "link": "https://stackoverflow.com/users/49136/lmount"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1236093670,
                    "creation_date": 1236093670,
                    "answer_id": 606808,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Also, you might want to take a look at <a href=\"http://networkx.lanl.gov/\" rel=\"noreferrer\">NetworkX</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 23981,
                        "reputation": 65984,
                        "user_id": 60628,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/837d78446554c800d404141dd0172ccc?s=256&d=identicon&r=PG",
                        "display_name": "Frank",
                        "link": "https://stackoverflow.com/users/60628/frank"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1236090176,
                    "creation_date": 1236090176,
                    "answer_id": 606555,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use the <a href=\"http://www.osl.iu.edu/~dgregor/bgl-python/\" rel=\"noreferrer\">Boost Graph Library - Python Bindings</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4403,
                        "reputation": 14769,
                        "user_id": 6592,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9f74f45309e220fa8bfe9478923d5d45?s=256&d=identicon&r=PG",
                        "display_name": "zweiterlinde",
                        "link": "https://stackoverflow.com/users/6592/zweiterlinde"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1236089869,
                    "creation_date": 1236089869,
                    "answer_id": 606529,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have you looked at <a href=\"http://code.google.com/p/python-graph/\" rel=\"noreferrer\">python-graph</a>?  I haven't used it myself, but the project page looks promising.</p>\n"
                }
            ]
        },
        {
            "4841782": [
                {
                    "owner": {
                        "account_id": 285593,
                        "reputation": 25002,
                        "user_id": 584347,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ba8cb56177fdcd9e3e0053414d3ad539?s=256&d=identicon&r=PG",
                        "display_name": "Michael J. Barber",
                        "link": "https://stackoverflow.com/users/584347/michael-j-barber"
                    },
                    "is_accepted": true,
                    "score": 189,
                    "last_activity_date": 1369227532,
                    "last_edit_date": 1369227532,
                    "creation_date": 1296374796,
                    "answer_id": 4841855,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Mutable default arguments don't generally do what you want. Instead, try this:</p>\n\n<pre><code>class Node:\n     def __init__(self, wordList=None, adjacencyList=None):\n        if wordList is None:\n            self.wordList = []\n        else:\n             self.wordList = wordList \n        if adjacencyList is None:\n            self.adjacencyList = []\n        else:\n             self.adjacencyList = adjacencyList \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 954888,
                        "reputation": 9782,
                        "user_id": 980377,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/dc87153c75336a2482935e051b118d01?s=256&d=identicon&r=PG",
                        "display_name": "Shankar Cabus",
                        "link": "https://stackoverflow.com/users/980377/shankar-cabus"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1360102303,
                    "creation_date": 1360102303,
                    "answer_id": 14717983,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>class Node:\n    def __init__(self, wordList=None adjacencyList=None):\n        self.wordList = wordList or []\n        self.adjacencyList = adjacencyList or []\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 158237,
                        "reputation": 70844,
                        "user_id": 376728,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/908d58f023f47e0a7d07fc671606341d?s=256&d=identicon&r=PG",
                        "display_name": "aaronasterling",
                        "link": "https://stackoverflow.com/users/376728/aaronasterling"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1296375247,
                    "creation_date": 1296375247,
                    "answer_id": 4841873,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Let's illustrate what's happening here:</p>\n\n<pre><code>Python 3.1.2 (r312:79147, Sep 27 2010, 09:45:41) \n[GCC 4.4.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; class Foo:\n...     def __init__(self, x=[]):\n...         x.append(1)\n... \n&gt;&gt;&gt; Foo.__init__.__defaults__\n([],)\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; Foo.__init__.__defaults__\n([1],)\n&gt;&gt;&gt; f2 = Foo()\n&gt;&gt;&gt; Foo.__init__.__defaults__\n([1, 1],)\n</code></pre>\n\n<p>You can see that the default arguments are stored in a tuple which is an attribute of the function in question. This actually has nothing to do with the class in question and goes for any function. In python 2, the attribute will be <code>func.func_defaults</code>. </p>\n\n<p>As other posters have pointed out, you probably want to use <code>None</code> as a sentinel value and give each instance it's own list. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 36781,
                        "reputation": 1798,
                        "user_id": 105004,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7721ad87e179e479cf9815ad1cd07412?s=256&d=identicon&r=PG",
                        "display_name": "krousey",
                        "link": "https://stackoverflow.com/users/105004/krousey"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1296374170,
                    "creation_date": 1296374170,
                    "answer_id": 4841812,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would try:</p>\n\n<pre><code>self.wordList = list(wordList)\n</code></pre>\n\n<p>to force it to make a copy instead of referencing the same object.</p>\n"
                }
            ]
        },
        {
            "31252791": [
                {
                    "owner": {
                        "account_id": 23390276,
                        "reputation": 99,
                        "user_id": 17455016,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4b922e05bc67baf666d7052e31d3691e?s=256&d=identicon&r=PG",
                        "display_name": "Miroslav Petrovic",
                        "link": "https://stackoverflow.com/users/17455016/miroslav-petrovic"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1695999087,
                    "creation_date": 1695999087,
                    "answer_id": 77202924,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One stupid thing previous version seems to be using <code>Flask</code> while current is using <code>flask</code> make sure that you use flask with lowercase</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18957609,
                        "reputation": 41,
                        "user_id": 13833860,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GhSk8oGXT5N18n7YmhCGjamO2P3ftyqLLDZtgSBeQ=k-s256",
                        "display_name": "Hassan",
                        "link": "https://stackoverflow.com/users/13833860/hassan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1655988183,
                    "creation_date": 1655988183,
                    "answer_id": 72730373,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also try this workaround <code>set FLASK_DEBUG=1 &amp;&amp; python -m flask run</code>\nIt worked for me</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19925156,
                        "reputation": 31,
                        "user_id": 14600040,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-Im12FcdRMlM/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclM8dxXUpKw7ihG2hEbVe7qqayGOw/s96-c/photo.jpg?sz=256",
                        "display_name": "moist_wrist3",
                        "link": "https://stackoverflow.com/users/14600040/moist-wrist3"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654816725,
                    "creation_date": 1654816725,
                    "answer_id": 72567585,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you first need to create a Python Environment</p>\n<p>like this:</p>\n<pre><code> py -m venv YOUR_DIR_NAME\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25297912,
                        "reputation": 11,
                        "user_id": 19122730,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJwkiI17dm04QyFl4CDDeNPMMXi8L2ouXZJ3fwth=k-s256",
                        "display_name": " Wanjiku",
                        "link": "https://stackoverflow.com/users/19122730/wanjiku"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654789849,
                    "creation_date": 1654789849,
                    "answer_id": 72563246,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same error where it said flask module not found. this is what I did:</p>\n<ol>\n<li>used venv to create a virtual environment $ python3.6 -m venv --without-pip virtual</li>\n<li>activated the virtual environment using source virtual/bin/activate</li>\n<li>downloaded pip into the virtual environment curl <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"nofollow noreferrer\">https://bootstrap.pypa.io/get-pip.py</a> | python</li>\n<li>installed flask using pip install flask</li>\n</ol>\n<p>after running my application, all was good.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4255191,
                        "reputation": 1401,
                        "user_id": 3481069,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/dT0pX.jpg?s=256",
                        "display_name": "sammy ongaya",
                        "link": "https://stackoverflow.com/users/3481069/sammy-ongaya"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1641815691,
                    "last_edit_date": 1641815691,
                    "creation_date": 1556193409,
                    "answer_id": 55848785,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is what worked for me when I got a similar error in Windows:</p>\n<ol>\n<li><p>Install virtualenv:</p>\n<pre><code>pip install virtualenv\n</code></pre>\n</li>\n<li><p>Create a virtualenv:</p>\n<pre><code>virtualenv flask\n</code></pre>\n</li>\n<li><p>Navigate to Scripts and activate the virtualenv:</p>\n<pre><code>activate\n</code></pre>\n</li>\n<li><p>Install Flask:</p>\n<pre><code>python -m pip install flask\n</code></pre>\n</li>\n<li><p>Check if flask is installed:</p>\n<pre><code>python -m pip list\n</code></pre>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 18502630,
                        "reputation": 117,
                        "user_id": 14443629,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-4-oUMRs_EdE/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckcfjnNBmjl2eEYTw1attCVqEd94A/s96-c/photo.jpg?sz=256",
                        "display_name": "Biku Shah",
                        "link": "https://stackoverflow.com/users/14443629/biku-shah"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1628703420,
                    "creation_date": 1628703420,
                    "answer_id": 68746617,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In your case , the solution is  :</p>\n<p>First:</p>\n<p>Open the  terminal and navigate to the directory/folder where that python file is located ( in ur case the python file you created is run.py) and make sure you have installed flask in that same directory/folder.</p>\n<p>Second :</p>\n<p>Now , type the following command :</p>\n<p>$python3   &quot;pythonfilename&quot; (in ur case, its $python3  &quot;run.py&quot;)</p>\n<p><a href=\"https://i.sstatic.net/yVlxA.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/yVlxA.png\" alt=\"suuceessful\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6699402,
                        "reputation": 489,
                        "user_id": 5166444,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-eMNIJXeavyY/AAAAAAAAAAI/AAAAAAAApZw/n0GPuCGsiyQ/photo.jpg?sz=256",
                        "display_name": "Enderson Menezes",
                        "link": "https://stackoverflow.com/users/5166444/enderson-menezes"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627500771,
                    "last_edit_date": 1627500771,
                    "creation_date": 1617045198,
                    "answer_id": 66860236,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had a similar problem using WSL and PyCharm / VSCode, the problem only occurred in the development environment and not in production. I realized that IDE's with WSL can have problems when exporting PYTHONPATH from their work directory and I started to do it manually.</p>\n<p>Before running your program and inside a VENV, try running the following command:</p>\n<pre><code>export PYTHONPATH=&quot;path/my_user/code&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5512917,
                        "reputation": 61,
                        "user_id": 4378624,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-RqPyuhA5SxM/AAAAAAAAAAI/AAAAAAAAAHs/2edryX19jCs/photo.jpg?sz=256",
                        "display_name": "Bolan Oluwa",
                        "link": "https://stackoverflow.com/users/4378624/bolan-oluwa"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1611914887,
                    "creation_date": 1611914887,
                    "answer_id": 65952422,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest answer to this problem is specifying the correct path to flask in your environment. Make sure the script you are running knows how to get to the flask installation. Using print(sys.path) as mentioned above certainly helped to figure out the path(s) the script was using.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5404214,
                        "reputation": 2303,
                        "user_id": 4303196,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-At8dHdjZue4/AAAAAAAAAAI/AAAAAAAAA1A/LNQh2L2c3QQ/photo.jpg?sz=256",
                        "display_name": "Rollback",
                        "link": "https://stackoverflow.com/users/4303196/rollback"
                    },
                    "is_accepted": true,
                    "score": 217,
                    "last_activity_date": 1602047577,
                    "last_edit_date": 1602047577,
                    "creation_date": 1436210448,
                    "answer_id": 31253927,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try deleting the virtualenv you created.  Then create a new virtualenv with:</p>\n<pre><code>virtualenv flask\n</code></pre>\n<p>Then:</p>\n<pre><code>cd flask\n</code></pre>\n<p>Now let's activate the virtualenv</p>\n<pre><code>source bin/activate\n</code></pre>\n<p>Now you should see <code>(flask)</code> on the left of the command line.</p>\n<p><sub>Edit: In windows there is no &quot;source&quot; that's a linux thing, instead execute the activate.bat file, here I do it using Powershell: PS C:\\DEV\\aProject&gt; <code>&amp; .\\Flask\\Scripts\\activate</code>)\n</sub></p>\n<p>Let's install flask:</p>\n<pre><code>pip install flask\n</code></pre>\n<p>Then create a file named <code>hello.py</code> (NOTE: see <code>UPDATE Flask 1.0.2</code> below):</p>\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n\nif __name__ == &quot;__main__&quot;:\n    app.run()\n</code></pre>\n<p>and run it with:</p>\n<pre><code>python hello.py\n</code></pre>\n<p><strong>UPDATE Flask 1.0.2</strong></p>\n<p>With the new flask release there is no need to run the app from your script.  <code>hello.py</code> should look like this now:</p>\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n</code></pre>\n<p>and run it with:</p>\n<pre><code>FLASK_APP=hello.py flask run\n</code></pre>\n<p>Make sure to be inside the folder where <code>hello.py</code> is when running the latest command.</p>\n<p><em>All the steps before the creation of the hello.py apply for this case as well</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16118288,
                        "reputation": 2020,
                        "user_id": 11634814,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/83c37c4fd3df4bbe9e197763b8e97061?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Evan",
                        "link": "https://stackoverflow.com/users/11634814/evan"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1597879874,
                    "creation_date": 1597879874,
                    "answer_id": 63496318,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another thing - if you're using python3, make sure you are starting your server with <code>python3 server.py</code>, not <code>python server.py</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10888646,
                        "reputation": 111,
                        "user_id": 11554981,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/96c4009e71b87605a7d63bb0f9211e6d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ashish Bansal",
                        "link": "https://stackoverflow.com/users/11554981/ashish-bansal"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1577619054,
                    "creation_date": 1577619054,
                    "answer_id": 59518989,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using Pycharm then this is the virtual environment issue.</p>\n\n<p>So, at the time of creating your Python project you will have to select \"Existing interpreter\" option -> click \"system Interpreter\" -> select the correct option for example \"*\\AppData\\Local\\Programs\\Python\\Python3.6\\python.exe\".</p>\n\n<p>You can use 'New Virtual Env' as well, but I have just given the quick fix that should work for Pycharm users.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4479322,
                        "reputation": 788,
                        "user_id": 3643534,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/orgqV.jpg?s=256",
                        "display_name": "hossein andarkhora",
                        "link": "https://stackoverflow.com/users/3643534/hossein-andarkhora"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1570102620,
                    "creation_date": 1570102620,
                    "answer_id": 58218345,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>my answer just for any users that use Visual Studio Flesk Web project :</p>\n\n<p>Just Right Click on \"Python Environment\" and Click to \"Add Environment\"</p>\n"
                },
                {
                    "owner": {
                        "account_id": 141806,
                        "reputation": 24792,
                        "user_id": 349100,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/wBuM3.png?s=256",
                        "display_name": "Sonic Soul",
                        "link": "https://stackoverflow.com/users/349100/sonic-soul"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1568824089,
                    "last_edit_date": 1568824089,
                    "creation_date": 1568813082,
                    "answer_id": 57993855,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>in my case using Docker, my .env file was not copied, so the following env vars were not set: </p>\n\n<p>.env.local:\n<code>FLASK_APP=src/app.py</code></p>\n\n<p>so in my <code>Dockerfile</code> i had to include:</p>\n\n<pre><code>FROM deploy as dev\nCOPY env ./env\n</code></pre>\n\n<p>which was referenced in docker-compose.yml </p>\n\n<p><code>env_file: ./env/.env.local</code></p>\n\n<p>another thing i had to pay attention to is the path variable to ensure my environment is used</p>\n\n<pre><code>ENV PATH $CONDA_DIR/envs/:my_environment_name_from_yml_file:/bin:$CONDA_DIR/bin:$PATH```\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13764845,
                        "reputation": 5956,
                        "user_id": 9935932,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/09356d88b6bcd282f3453f288f63dd40?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yasin lachini",
                        "link": "https://stackoverflow.com/users/9935932/yasin-lachini"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1556729142,
                    "creation_date": 1556729142,
                    "answer_id": 55939618,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The flask script is nice to start a local development server, but you would have to\nrestart it manually after each change to your code. That is not very nice and Flask can\ndo better. If you enable debug support the server will reload itself on code changes,\nand it will also provide you with a helpful debugger if things go wrong.\nTo enable debug mode you can export the FLASK_DEBUG environment variable before\nrunning the server:\nforexample your file is hello.py</p>\n\n<pre><code>$ export FLASK_APP=hello.py\n$ export FLASK_DEBUG=1\n$ flask run\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8909308,
                        "reputation": 171,
                        "user_id": 10408972,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-Vr78HId6XzU/AAAAAAAAAAI/AAAAAAAAACU/9yfYuRsyguw/photo.jpg?sz=256",
                        "display_name": "Bogdan001",
                        "link": "https://stackoverflow.com/users/10408972/bogdan001"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1544341243,
                    "last_edit_date": 1544341243,
                    "creation_date": 1537806316,
                    "answer_id": 52483594,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>After activating the virtual environment and installing Flask, I created an app.py file. I run it like this : <code>python -m flask run</code>. Hope this will help! </p>\n"
                },
                {
                    "owner": {
                        "account_id": 3859023,
                        "reputation": 2847,
                        "user_id": 3197202,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://i.sstatic.net/xzntl.jpg?s=256",
                        "display_name": "ivanacorovic",
                        "link": "https://stackoverflow.com/users/3197202/ivanacorovic"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1542461809,
                    "creation_date": 1542461809,
                    "answer_id": 53351751,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It worked for me after upgrading pip:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre>\n\n<p>Found that answer here: <a href=\"https://stackoverflow.com/a/49748494/3197202\">https://stackoverflow.com/a/49748494/3197202</a></p>\n\n<p>Then I could just install flask:</p>\n\n<pre><code>pip install flask\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9513480,
                        "reputation": 386,
                        "user_id": 7070685,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0d900c98da5cb6e324675484fdb4180a?s=256&d=identicon&r=PG",
                        "display_name": "rawplutonium",
                        "link": "https://stackoverflow.com/users/7070685/rawplutonium"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1538658554,
                    "creation_date": 1538658554,
                    "answer_id": 52647566,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>this is what worked for me,</p>\n\n<p><code>sudo -H pip install flask</code> </p>\n\n<p>Or for pip3(python3) use :</p>\n\n<p><code>sudo -H pip3 install flask</code></p>\n\n<p><em>Sidenote</em></p>\n\n<p>If you're using virtualenv it's a good idea to \n<code>pip freeze &gt;&gt; requirements.txt</code> \nto allow for the installed packages to be listed in one place.\nThe <code>sudo</code> command and <code>-H</code> flag. For more on <code>sudo</code>'s <code>-H</code> flag, look at <a href=\"https://stackoverflow.com/users/161711/paul-thompson\">Paul's</a> <a href=\"https://stackoverflow.com/a/28619739/7070685\">answer</a>.\nHope this helps you.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7163608,
                        "reputation": 3,
                        "user_id": 5473530,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dd58e338e08309f14d28256dbfa581e1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Tao W",
                        "link": "https://stackoverflow.com/users/5473530/tao-w"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1534884635,
                    "creation_date": 1534884635,
                    "answer_id": 51956530,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>enter your python interactive mode\nthen:</p>\n\n<p><code>import sys</code></p>\n\n<p><code>sys.path</code></p>\n\n<p>it will print your path. Check wether flask is installed in the sys.path.</p>\n\n<p>For MacOS, python path is under \n/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages</p>\n\n<p>But pip'll install python package by default under\n/Library/Python/2.7/site-packages</p>\n\n<p>That's why it doesn't work for MacOS.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 796645,
                        "reputation": 270,
                        "user_id": 900970,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/0a05d103b7a78c952562f57297ce4dae?s=256&d=identicon&r=PG",
                        "display_name": "Abid",
                        "link": "https://stackoverflow.com/users/900970/abid"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1529612436,
                    "creation_date": 1529612436,
                    "answer_id": 50976880,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my case the solution was as simple as starting up my virtual environment like so:</p>\n\n<p><code>$ venv/scripts/activate</code></p>\n\n<p>It turns out I am still fresh to Python :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12020643,
                        "reputation": 2545,
                        "user_id": 8794168,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c7038d08b04c8e70a8c87d05c5ddf350?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yunus",
                        "link": "https://stackoverflow.com/users/8794168/yunus"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1526540879,
                    "last_edit_date": 1526540879,
                    "creation_date": 1525780844,
                    "answer_id": 50233100,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Even i too suggest u virtualenv,\nThis might also solve ur problem. </p>\n\n<pre><code>sudo apt install python-flask\n</code></pre>\n\n<p>If u want to deploy in productionserver then go ahead with above solution else use virtualenv.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 902053,
                        "reputation": 1656,
                        "user_id": 5823681,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LApms.jpg?s=256",
                        "display_name": "khd",
                        "link": "https://stackoverflow.com/users/5823681/khd"
                    },
                    "is_accepted": false,
                    "score": 89,
                    "last_activity_date": 1509823132,
                    "creation_date": 1509823132,
                    "answer_id": 47114637,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For python 3 use</p>\n\n<blockquote>\n  <p>pip3 install flask</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 12009401,
                        "reputation": 36,
                        "user_id": 8786686,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/03ae517e716ea8c80ffbe435cc09d0c0?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Miguel",
                        "link": "https://stackoverflow.com/users/8786686/miguel"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1508192341,
                    "last_edit_date": 1508192341,
                    "creation_date": 1508188098,
                    "answer_id": 46779129,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Go to the flask file in microblog, then activate the virtual environment with <code>source bin/activate</code>, then go to flask/bin and install flask, and the rest of the packages, <code>pip install flask</code>. You will see flask listed inside bin directory. Try to run <code>./run.py</code> again from microblog (or from wherever you have the file).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11231918,
                        "reputation": 31,
                        "user_id": 8239653,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AnjlW.jpg?s=256",
                        "display_name": "NingAnMe",
                        "link": "https://stackoverflow.com/users/8239653/ninganme"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1503562867,
                    "last_edit_date": 1503562867,
                    "creation_date": 1500016667,
                    "answer_id": 45096984,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<ol>\n<li>Edit\n<code>/etc/apache2/sites-available/FlaskApp.conf</code></li>\n<li>Add the following two lines before the \"WSGIScriptAlias\" line:</li>\n</ol>\n\n<p><code>WSGIDaemonProcess FlaskApp python-home=/var/www/FlaskApp/FlaskApp/venv/FlaskApp</code>\n<code>WSGIProcessGroup FlaskApp</code></p>\n\n<ol start=\"3\">\n<li>Restart Apache:<code>service apache2 restart</code></li>\n</ol>\n\n<p>I'm following the Flask tutorial too.And I met the same problem.I found this way to fix it.</p>\n\n<p><a href=\"http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\" rel=\"nofollow noreferrer\">http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6244817,
                        "reputation": 337,
                        "user_id": 4857156,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/EfJNj.jpg?s=256",
                        "display_name": "Norman Pilusa",
                        "link": "https://stackoverflow.com/users/4857156/norman-pilusa"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1502905926,
                    "creation_date": 1502905926,
                    "answer_id": 45720077,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was using python2 but installed this:\nsudo apt-get install libapache2-mod-wsgi-py3</p>\n\n<p>Instead of:\nsudo apt-get install libapache2-mod-wsgi</p>\n\n<p>Correcting the installation solved the no flask problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9155927,
                        "reputation": 583,
                        "user_id": 6808881,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/sUyGg.jpg?s=256",
                        "display_name": "aneesh joshi",
                        "link": "https://stackoverflow.com/users/6808881/aneesh-joshi"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1498106431,
                    "creation_date": 1498106431,
                    "answer_id": 44690276,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I had a similar problem with flasgger.</p>\n\n<p>The reason for that was that I always use </p>\n\n<p><code>sudo pip install flask</code> </p>\n\n<p>but for some reason that's not always the way to go.\nSometimes, you have to do just</p>\n\n<p><code>pip install flask</code></p>\n\n<p>Another gotcha is that sometimes people type <code>pip install Flask</code> with the <strong>cap F</strong></p>\n\n<p>Posting this here in case somebody gets stuck.\nLet me know if it helped.</p>\n\n<p>Useful Link:\n<a href=\"https://stackoverflow.com/questions/33068758/what-is-the-difference-between-pip-install-and-sudo-pip-install\">What is the difference between pip install and sudo pip install?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5749016,
                        "reputation": 2590,
                        "user_id": 4539359,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-vPFpmaoG8AY/AAAAAAAAAAI/AAAAAAAAAGI/pARutC9UK00/photo.jpg?sz=256",
                        "display_name": "Julian",
                        "link": "https://stackoverflow.com/users/4539359/julian"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1496295514,
                    "creation_date": 1496295514,
                    "answer_id": 44299274,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The only way I could solve was by adding my users python dir to myapp.wsgi file. As an example:</p>\n\n<pre><code>sys.path.append('/home/deployer/anaconda3/lib/python3.5/site-packages')\n</code></pre>\n\n<p>I guess that if you install the packages in the global enviroment, you should have no problem, but I had my python packages installed as user.</p>\n"
                }
            ]
        },
        {
            "1810743": [
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835940,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": true,
                    "score": 1056,
                    "last_activity_date": 1670485253,
                    "last_edit_date": 1670485253,
                    "creation_date": 1259359199,
                    "answer_id": 1810760,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try <a href=\"http://docs.python.org/library/os.html#os.chdir\" rel=\"noreferrer\"><code>os.chdir</code></a></p>\n<blockquote>\n<pre><code>import os\nos.chdir(path)\n</code></pre>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Change the current working directory to path. Availability: Unix, Windows.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 7698533,
                        "reputation": 1111,
                        "user_id": 5832044,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/8ce16224fea79f384d0101ccfd70aeb3?s=256&d=identicon&r=PG",
                        "display_name": "dinesh",
                        "link": "https://stackoverflow.com/users/5832044/dinesh"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1540539385,
                    "last_edit_date": 1540539385,
                    "creation_date": 1453606881,
                    "answer_id": 34971949,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import os\nprint os.getcwd()  # Prints the current working directory\n</code></pre>\n\n<p>To set the working directory:</p>\n\n<pre><code>os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')  # Provide the new path here\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11362307,
                        "reputation": 377,
                        "user_id": 8330151,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/56e61c961199972cf5e1dd08a98b5717?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "PritamJ",
                        "link": "https://stackoverflow.com/users/8330151/pritamj"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1504163669,
                    "creation_date": 1504163669,
                    "answer_id": 45975442,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It work for <strong>Mac</strong> also </p>\n\n<pre><code>import os\npath=\"/Users/HOME/Desktop/Addl Work/TimeSeries-Done\"\nos.chdir(path)\n</code></pre>\n\n<p>To check working directory</p>\n\n<pre><code>os.getcwd()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 154,
                    "last_activity_date": 1259359209,
                    "creation_date": 1259359209,
                    "answer_id": 1810762,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Perhaps this is what you are looking for:</p>\n\n<pre><code>import os\nos.chdir(default_path)\n</code></pre>\n"
                }
            ]
        },
        {
            "13443588": [
                {
                    "owner": {
                        "account_id": 67986,
                        "reputation": 113609,
                        "user_id": 198633,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/5b9c04999233026354268c2ee4237e04?s=256&d=identicon&r=PG",
                        "display_name": "inspectorG4dget",
                        "link": "https://stackoverflow.com/users/198633/inspectorg4dget"
                    },
                    "is_accepted": false,
                    "score": 67,
                    "last_activity_date": 1449384610,
                    "last_edit_date": 1449384610,
                    "creation_date": 1353266097,
                    "answer_id": 13443597,
                    "question_id": 13443588,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/2/library/stdtypes.html#str.join\" rel=\"noreferrer\"><code>str.join</code></a>:</p>\n\n<pre><code>In [27]: mylist = ['10', '12', '14']\n\nIn [28]: print '\\n'.join(mylist)\n10\n12\n14\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user648852"
                    },
                    "is_accepted": false,
                    "score": 139,
                    "last_activity_date": 1353287788,
                    "last_edit_date": 1353287788,
                    "creation_date": 1353267834,
                    "answer_id": 13443885,
                    "question_id": 13443588,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Embrace the future! Just to be complete, you can also do this the Python 3k way by using the <a href=\"http://docs.python.org/2/library/functions.html#print\" rel=\"noreferrer\">print function</a>:</p>\n\n<pre><code>from __future__ import print_function  # Py 2.6+; In Py 3k not needed\n\nmylist = ['10', 12, '14']    # Note that 12 is an int\n\nprint(*mylist,sep='\\n')\n</code></pre>\n\n<p>Prints:</p>\n\n<pre><code>10\n12\n14\n</code></pre>\n\n<p>Eventually, <code>print</code> as Python statement <a href=\"http://www.python.org/dev/peps/pep-3105/\" rel=\"noreferrer\">will go away...</a> Might as well start to get used to it. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1853886,
                        "reputation": 212925,
                        "user_id": 1679863,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/f54e86d83eea6143ecc70a485f4e6044?s=256&d=identicon&r=PG",
                        "display_name": "Rohit Jain",
                        "link": "https://stackoverflow.com/users/1679863/rohit-jain"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1353266161,
                    "creation_date": 1353266161,
                    "answer_id": 13443608,
                    "question_id": 13443588,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can just use a simple loop: -</p>\n\n<pre><code>&gt;&gt;&gt; mylist = ['10', '12', '14']\n&gt;&gt;&gt; for elem in mylist:\n        print elem \n\n10\n12\n14\n</code></pre>\n"
                }
            ]
        },
        {
            "11264521": [
                {
                    "owner": {
                        "account_id": 16835706,
                        "reputation": 614,
                        "user_id": 12172457,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/RZwVm.jpg?s=256",
                        "display_name": "Donshel",
                        "link": "https://stackoverflow.com/users/12172457/donshel"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1625231656,
                    "creation_date": 1625231656,
                    "answer_id": 68225861,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I am clearly late but there is an official example which uses</p>\n<pre class=\"lang-py prettyprint-override\"><code>plt.setp(ax.get_xticklabels(), rotation=45, ha=&quot;right&quot;, rotation_mode=&quot;anchor&quot;)\n</code></pre>\n<p>to rotate the labels while keeping them correctly aligned with the ticks, which is both clean and easy.</p>\n<p>Ref: <a href=\"https://matplotlib.org/stable/gallery/images_contours_and_fields/image_annotated_heatmap.html\" rel=\"noreferrer\">https://matplotlib.org/stable/gallery/images_contours_and_fields/image_annotated_heatmap.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3477191,
                        "reputation": 1617,
                        "user_id": 2910092,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/865616ea76f542eaa3af9e0dcd3eca9d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "gizzmole",
                        "link": "https://stackoverflow.com/users/2910092/gizzmole"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1589813546,
                    "creation_date": 1589813546,
                    "answer_id": 61872373,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Simply use</p>\n\n<pre><code>ax.set_xticklabels(label_list, rotation=45)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 295059,
                        "reputation": 9870,
                        "user_id": 599265,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/NbetJ.jpg?s=256",
                        "display_name": "cge",
                        "link": "https://stackoverflow.com/users/599265/cge"
                    },
                    "is_accepted": true,
                    "score": 316,
                    "last_activity_date": 1574438785,
                    "last_edit_date": 1574438785,
                    "creation_date": 1341006003,
                    "answer_id": 11269325,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you prefer a non-object-oriented approach, move <code>plt.xticks(rotation=70)</code> to right <em>before</em> the two <code>avail_plot</code> calls, eg</p>\n\n<pre><code>plt.xticks(rotation=70)\navail_plot(axs[0], dates, s1, 'testing', 'green')\navail_plot(axs[1], dates, s1, 'testing2', 'red')\n</code></pre>\n\n<p>This sets the rotation property before setting up the labels. Since you have two axes here, <code>plt.xticks</code> gets confused after you've made the two plots. At the point when <code>plt.xticks</code> doesn't do anything, <code>plt.gca()</code> does <em>not</em> give you the axes you want to modify, and so <code>plt.xticks</code>, which acts on the current axes, is not going to work.</p>\n\n<p>For an object-oriented approach not using <code>plt.xticks</code>, you can use</p>\n\n<pre><code>plt.setp( axs[1].xaxis.get_majorticklabels(), rotation=70 )\n</code></pre>\n\n<p><em>after</em> the two <code>avail_plot</code> calls.  This sets the rotation on the correct axes specifically.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3502895,
                        "reputation": 3133,
                        "user_id": 2929207,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DxLMZ.png?s=256",
                        "display_name": "Pablo Reyes",
                        "link": "https://stackoverflow.com/users/2929207/pablo-reyes"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1554420855,
                    "last_edit_date": 1554420855,
                    "creation_date": 1485463189,
                    "answer_id": 41882582,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another way to apply<code>horizontalalignment</code> and <code>rotation</code> to each tick label is doing a <code>for</code> loop over the tick labels you want to change:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\nnow = dt.datetime.now()\nhours = [now + dt.timedelta(minutes=x) for x in range(0,24*60,10)]\ndays = [now + dt.timedelta(days=x) for x in np.arange(0,30,1/4.)]\nhours_value = np.random.random(len(hours))\ndays_value = np.random.random(len(days))\n\nfig, axs = plt.subplots(2)\nfig.subplots_adjust(hspace=0.75)\naxs[0].plot(hours,hours_value)\naxs[1].plot(days,days_value)\n\nfor label in axs[0].get_xmajorticklabels() + axs[1].get_xmajorticklabels():\n    label.set_rotation(30)\n    label.set_horizontalalignment(\"right\")\n</code></pre>\n\n<p><a href=\"https://i.sstatic.net/MiE0E.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/MiE0E.png\" alt=\"enter image description here\"></a></p>\n\n<p>And here is an example if you want to control the location of major and minor ticks:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\nfig, axs = plt.subplots(2)\nfig.subplots_adjust(hspace=0.75)\nnow = dt.datetime.now()\nhours = [now + dt.timedelta(minutes=x) for x in range(0,24*60,10)]\ndays = [now + dt.timedelta(days=x) for x in np.arange(0,30,1/4.)]\n\naxs[0].plot(hours,np.random.random(len(hours)))\nx_major_lct = mpl.dates.AutoDateLocator(minticks=2,maxticks=10, interval_multiples=True)\nx_minor_lct = matplotlib.dates.HourLocator(byhour = range(0,25,1))\nx_fmt = matplotlib.dates.AutoDateFormatter(x_major_lct)\naxs[0].xaxis.set_major_locator(x_major_lct)\naxs[0].xaxis.set_minor_locator(x_minor_lct)\naxs[0].xaxis.set_major_formatter(x_fmt)\naxs[0].set_xlabel(\"minor ticks set to every hour, major ticks start with 00:00\")\n\naxs[1].plot(days,np.random.random(len(days)))\nx_major_lct = mpl.dates.AutoDateLocator(minticks=2,maxticks=10, interval_multiples=True)\nx_minor_lct = matplotlib.dates.DayLocator(bymonthday = range(0,32,1))\nx_fmt = matplotlib.dates.AutoDateFormatter(x_major_lct)\naxs[1].xaxis.set_major_locator(x_major_lct)\naxs[1].xaxis.set_minor_locator(x_minor_lct)\naxs[1].xaxis.set_major_formatter(x_fmt)\naxs[1].set_xlabel(\"minor ticks set to every day, major ticks show first day of month\")\nfor label in axs[0].get_xmajorticklabels() + axs[1].get_xmajorticklabels():\n    label.set_rotation(30)\n    label.set_horizontalalignment(\"right\")\n</code></pre>\n\n<p><a href=\"https://i.sstatic.net/GZq89.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/GZq89.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4566798,
                        "reputation": 61807,
                        "user_id": 3707607,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/6af07819191e479e05e35e37774fdbe0?s=256&d=identicon&r=PG",
                        "display_name": "Ted Petrou",
                        "link": "https://stackoverflow.com/users/3707607/ted-petrou"
                    },
                    "is_accepted": false,
                    "score": 217,
                    "last_activity_date": 1507727920,
                    "last_edit_date": 1507727920,
                    "creation_date": 1507571222,
                    "answer_id": 46652187,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Solution works for matplotlib 2.1+</strong></p>\n\n<p>There exists an axes method <code>tick_params</code> that can change tick properties. It also exists as an axis method as <code>set_tick_params</code></p>\n\n<pre><code>ax.tick_params(axis='x', rotation=45)\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>ax.xaxis.set_tick_params(rotation=45)\n</code></pre>\n\n<p>As a side note, the current solution mixes the stateful interface (using pyplot) with the object-oriented interface by using the command <code>plt.xticks(rotation=70)</code>. Since the code in the question uses the object-oriented approach, it's best to stick to that approach throughout. The solution does give a good explicit solution with <code>plt.setp( axs[1].xaxis.get_majorticklabels(), rotation=70 )</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5149286,
                        "reputation": 338088,
                        "user_id": 4124317,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/wsHAV.png?s=256",
                        "display_name": "ImportanceOfBeingErnest",
                        "link": "https://stackoverflow.com/users/4124317/importanceofbeingernest"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1489938697,
                    "last_edit_date": 1489938697,
                    "creation_date": 1489937139,
                    "answer_id": 42888374,
                    "question_id": 11264521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>An easy solution which avoids looping over the ticklabes is to just use</p>\n\n<p><a href=\"http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate\" rel=\"noreferrer\"><code>fig.autofmt_xdate()</code></a></p>\n\n<p>This command automatically rotates the xaxis labels and adjusts their position. The default values are a rotation angle 30\u00b0 and horizontal alignment \"right\". But they can be changed in the function call</p>\n\n<pre><code>fig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')\n</code></pre>\n\n<p>The additional <code>bottom</code> argument is equivalent to setting <code>plt.subplots_adjust(bottom=bottom)</code>, which allows to set the bottom axes padding to a larger value to host the rotated ticklabels.</p>\n\n<p>So basically here you have all the settings you need to have a nice date axis in a single command.</p>\n\n<p>A <a href=\"http://matplotlib.org/examples/api/date_demo.html\" rel=\"noreferrer\">good example</a> can be found on the matplotlib page.</p>\n"
                }
            ]
        },
        {
            "11026959": [
                {
                    "owner": {
                        "account_id": 23898008,
                        "reputation": 91,
                        "user_id": 17896631,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/04ea34419997f4f0875c4ea6ec9a1a68?s=256&d=identicon&r=PG",
                        "display_name": "chirob",
                        "link": "https://stackoverflow.com/users/17896631/chirob"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1704945774,
                    "creation_date": 1704945774,
                    "answer_id": 77797604,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I didn't want to import json or pickle - I'm not sure why but no above or other answers work for me. I finally wrote this which works.  Seems like saving and opening a dict would be easier than this.</p>\n<pre><code>with open(fname, 'w') as f:\n    for i in dic.keys():            \n        f.write(i + &quot;:&quot; + str(dic[i])+'\\n')\n\nmydict = {}\nwith open(fname, mode='r') as f2:\n    for line in f2:\n        s = line.split(':')\n        mydict[s[0]] = s[1].split('\\n')[0]\nprint(mydict)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76525,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": true,
                    "score": 113,
                    "last_activity_date": 1614907354,
                    "last_edit_date": 1614907354,
                    "creation_date": 1339651212,
                    "answer_id": 11027069,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your code is <em>almost right</em>!  You are right, you are just missing one step.  When you read in the file, you are reading it as a string; but you want to turn the string back into a dictionary.</p>\n<p>The error message you saw was because <code>self.whip</code> was a string, not a dictionary.  So you need to convert the string to a dictionary.</p>\n<h2>Example</h2>\n<p>Here is the simplest way: feed the string into <code>eval()</code>.  Like so:</p>\n<pre><code>def reading(self):\n    s = open('deed.txt', 'r').read()\n    self.whip = eval(s)\n</code></pre>\n<p>You can do it in one line, but I think it looks messy this way:</p>\n<pre><code>def reading(self):\n    self.whip = eval(open('deed.txt', 'r').read())\n</code></pre>\n<p>But <code>eval()</code> is sometimes not recommended.  The problem is that <code>eval()</code> will evaluate <em>any</em> string, and if someone tricked you into running a really tricky string, something bad might happen.  In this case, you are just running <code>eval()</code> on your own file, so it should be okay.</p>\n<p>But because <code>eval()</code> is useful, someone made an alternative to it that is safer.  This is called <code>literal_eval</code> and you get it from a Python module called <code>ast</code>.</p>\n<pre><code>import ast\n\ndef reading(self):\n    s = open('deed.txt', 'r').read()\n    self.whip = ast.literal_eval(s)\n</code></pre>\n<p><code>ast.literal_eval()</code> will only evaluate strings that turn into the basic Python types, so there is no way that a tricky string can do something bad on your computer.</p>\n<h2>EDIT</h2>\n<p>Actually, best practice in Python is to use a <code>with</code> statement to make sure the file gets properly closed.  Rewriting the above to use a <code>with</code> statement:</p>\n<pre><code>import ast\n\ndef reading(self):\n    with open('deed.txt', 'r') as f:\n        s = f.read()\n        self.whip = ast.literal_eval(s)\n</code></pre>\n<p>In the most popular Python, known as &quot;CPython&quot;, you usually don't need the <code>with</code> statement as the built-in &quot;garbage collection&quot; features will figure out that you are done with the file and will close it for you.  But other Python implementations, like &quot;Jython&quot; (Python for the Java VM) or &quot;PyPy&quot; (a really cool experimental system with just-in-time code optimization) might not figure out to close the file for you.  It's good to get in the habit of using <code>with</code>, and I think it makes the code pretty easy to understand.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11475676,
                        "reputation": 540,
                        "user_id": 8411263,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-nLuEd7kVkpA/AAAAAAAAAAI/AAAAAAAAACI/XGfe0AyH8n8/photo.jpg?sz=256",
                        "display_name": "Manouchehr Rasouli",
                        "link": "https://stackoverflow.com/users/8411263/manouchehr-rasouli"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1536998999,
                    "last_edit_date": 1536998999,
                    "creation_date": 1502516240,
                    "answer_id": 45646894,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Hi there is a way to write and read the dictionary to file you can turn your dictionary to JSON format and read and write quickly just do this :</p>\n\n<p>To <strong>write</strong> your date:</p>\n\n<pre><code> import json\n\n your_dictionary = {\"some_date\" : \"date\"}\n f = open('destFile.txt', 'w+')\n f.write(json.dumps(your_dictionary))\n</code></pre>\n\n<p>and to <strong>read</strong> your data:</p>\n\n<pre><code> import json\n\n f = open('destFile.txt', 'r')\n your_dictionary = json.loads(f.read())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2877138,
                        "reputation": 2777,
                        "user_id": 2468869,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://i.sstatic.net/eneKm.jpg?s=256",
                        "display_name": "Aravind Krishnakumar",
                        "link": "https://stackoverflow.com/users/2468869/aravind-krishnakumar"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1449625852,
                    "creation_date": 1449625852,
                    "answer_id": 34169420,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can iterate through the key-value pair and write it into file</p>\n\n<pre><code>pair = {'name': name,'location': location}\nwith open('F:\\\\twitter.json', 'a') as f:\n     f.writelines('{}:{}'.format(k,v) for k, v in pair.items())\n     f.write('\\n')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1718514,
                        "reputation": 21333,
                        "user_id": 1575066,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://i.sstatic.net/hGOuL.png?s=256",
                        "display_name": "PascalVKooten",
                        "link": "https://stackoverflow.com/users/1575066/pascalvkooten"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1379233666,
                    "creation_date": 1379233666,
                    "answer_id": 18810422,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I created my own functions which work really nicely:</p>\n\n<pre><code>def writeDict(dict, filename, sep):\n    with open(filename, \"a\") as f:\n        for i in dict.keys():            \n            f.write(i + \" \" + sep.join([str(x) for x in dict[i]]) + \"\\n\")\n</code></pre>\n\n<p>It will store the keyname first, followed by all values. Note that in this case my dict contains integers so that's why it converts to <code>int</code>. This is most likely the part you need to change for your situation.</p>\n\n<pre><code>def readDict(filename, sep):\n    with open(filename, \"r\") as f:\n        dict = {}\n        for line in f:\n            values = line.split(sep)\n            dict[values[0]] = {int(x) for x in values[1:len(values)]}\n        return(dict)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 356448,
                        "reputation": 17780,
                        "user_id": 695964,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/c14aabb9ff37af030af68da83bf2d7dd?s=256&d=identicon&r=PG",
                        "display_name": "KFL",
                        "link": "https://stackoverflow.com/users/695964/kfl"
                    },
                    "is_accepted": false,
                    "score": 199,
                    "last_activity_date": 1339703029,
                    "last_edit_date": 1339703029,
                    "creation_date": 1339650867,
                    "answer_id": 11027021,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Have you tried <a href=\"http://docs.python.org/library/json.html\" rel=\"noreferrer\">the json module</a>? JSON format is very similar to python dictionary. And it's human readable/writable:</p>\n\n<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; d = {\"one\":1, \"two\":2}\n&gt;&gt;&gt; json.dump(d, open(\"text.txt\",'w'))\n</code></pre>\n\n<p>This code dumps to a text file</p>\n\n<pre><code>$ cat text.txt \n{\"two\": 2, \"one\": 1}\n</code></pre>\n\n<p>Also you can load from a JSON file:</p>\n\n<pre><code>&gt;&gt;&gt; d2 = json.load(open(\"text.txt\"))\n&gt;&gt;&gt; print d2\n{u'two': 2, u'one': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 212122,
                        "reputation": 297359,
                        "user_id": 464744,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/3dfd6067f4c69986a652444f44bb6d7c?s=256&d=identicon&r=PG",
                        "display_name": "Blender",
                        "link": "https://stackoverflow.com/users/464744/blender"
                    },
                    "is_accepted": false,
                    "score": 76,
                    "last_activity_date": 1339651247,
                    "last_edit_date": 1339651247,
                    "creation_date": 1339650849,
                    "answer_id": 11027016,
                    "question_id": 11026959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To store Python objects in files, use the <a href=\"http://docs.python.org/library/pickle.html\" rel=\"noreferrer\"><code>pickle</code></a> module:</p>\n\n<pre><code>import pickle\n\na = {\n  'a': 1,\n  'b': 2\n}\n\nwith open('file.txt', 'wb') as handle:\n  pickle.dump(a, handle)\n\nwith open('file.txt', 'rb') as handle:\n  b = pickle.loads(handle.read())\n\nprint a == b # True\n</code></pre>\n\n<p>Notice that I never set <code>b = a</code>, but instead pickled <code>a</code> to a file and then unpickled it into <code>b</code>.</p>\n\n<p>As for your error:</p>\n\n<pre><code>self.whip = open('deed.txt', 'r').read()\n</code></pre>\n\n<p><code>self.whip</code> was a dictionary object. <code>deed.txt</code> contains text, so when you load the contents of <code>deed.txt</code> into <code>self.whip</code>, <code>self.whip</code> becomes the <em>string</em> representation of itself.</p>\n\n<p>You'd probably want to evaluate the string back into a Python object:</p>\n\n<pre><code>self.whip = eval(open('deed.txt', 'r').read())\n</code></pre>\n\n<p>Notice how <code>eval</code> sounds like <code>evil</code>. That's intentional. Use the <code>pickle</code> module instead.</p>\n"
                }
            ]
        },
        {
            "7406102": [
                {
                    "owner": {
                        "account_id": 451432,
                        "reputation": 21137,
                        "user_id": 847331,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/811e96762eac3a693825446a9896712c?s=256&d=identicon&r=PG",
                        "display_name": "Remi",
                        "link": "https://stackoverflow.com/users/847331/remi"
                    },
                    "is_accepted": true,
                    "score": 102,
                    "last_activity_date": 1701499912,
                    "last_edit_date": 1701499912,
                    "creation_date": 1315937059,
                    "answer_id": 7406369,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python:</p>\n<pre><code>&quot;&quot;.join(c for c in filename if c.isalpha() or c.isdigit() or c==' ').rstrip()\n</code></pre>\n<p>this accepts Unicode characters but removes line breaks, etc.</p>\n<p>example:</p>\n<pre><code>filename = u&quot;ad\\nbla'{-+\\)(\u00e7?&quot;\n</code></pre>\n<p>gives: <code>adbla\u00e7</code></p>\n<p><b>edit</b>\n<i>str.isalnum() does alphanumeric on one step. \u2013 comment from queueoverflow below. danodonovan hinted on keeping a dot included.</i></p>\n<pre><code>keepcharacters = (' ','.','_')\n&quot;&quot;.join(c for c in filename if c.isalnum() or c in keepcharacters).rstrip()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4976466,
                        "reputation": 2113,
                        "user_id": 4002633,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/C8djw.jpg?s=256",
                        "display_name": "Bernd Wechner",
                        "link": "https://stackoverflow.com/users/4002633/bernd-wechner"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1694569812,
                    "last_edit_date": 1694569812,
                    "creation_date": 1576646238,
                    "answer_id": 59385895,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I admit there are two schools of thought regarding DIY vs dependencies. But I come from the firm school of thought that prefers not to reinvent wheels, and to see canonical approaches to simple tasks like this. To wit, I am a fan of the pathvalidate library</p>\n<p><a href=\"https://pypi.org/project/pathvalidate/\" rel=\"nofollow noreferrer\">https://pypi.org/project/pathvalidate/</a></p>\n<p>Which includes a function <code>sanitize_filename()</code> which does what you're after.</p>\n<p>I would preference this to any one of the numerous home baked solutions. In the ideal I'd like to see a sanitizer in os.path which is sensitive to filesystem differences and does not do unnecessary sanitising. I imagine pathvalidate takes the conservative approach and produces valid filenames that can span at least NTFS and ext4 comfortably, but it's hard to imagine it even bothers with old DOS constraints.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2979251,
                        "reputation": 7474,
                        "user_id": 2529619,
                        "user_type": "registered",
                        "accept_rate": 48,
                        "profile_image": "https://www.gravatar.com/avatar/8fe42206cbd503e03319de38fa7fd36b?s=256&d=identicon&r=PG",
                        "display_name": "ChaimG",
                        "link": "https://stackoverflow.com/users/2529619/chaimg"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1692545815,
                    "last_edit_date": 1692545815,
                    "creation_date": 1608309578,
                    "answer_id": 65360714,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem with many other answers is that they only deal with character substitutions; not other issues.</p>\n<p>Here is a comprehensive universal solution. It handles all types of issues for you, including (but not limited too) character substitution. It should cover all the bases.</p>\n<p>Works in Windows, *nix, and almost every other file system.</p>\n<pre><code>def txt2filename(txt, chr_set='printable'):\n    &quot;&quot;&quot;Converts txt to a valid filename.\n\n    Args:\n        txt: The str to convert.\n        chr_set:\n            'printable':    Any printable character except those disallowed on Windows/*nix.\n            'extended':     'printable' + extended ASCII character codes 128-255\n            'universal':    For almost *any* file system. '-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    &quot;&quot;&quot;\n\n    FILLER = '-'\n    MAX_LEN = 255  # Maximum length of filename is 255 bytes in Windows and some *nix flavors.\n\n    # Step 1: Remove excluded characters.\n    BLACK_LIST = set(chr(127) + r'&lt;&gt;:&quot;/\\|?*')                           # 127 is unprintable, the rest are illegal in Windows.\n    white_lists = {\n        'universal': {'-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'},\n        'printable': {chr(x) for x in range(32, 127)} - BLACK_LIST,     # 0-32, 127 are unprintable,\n        'extended' : {chr(x) for x in range(32, 256)} - BLACK_LIST,\n    }\n    white_list = white_lists[chr_set]\n    result = ''.join(x\n                     if x in white_list else FILLER\n                     for x in txt)\n\n    # Step 2: Device names, '.', and '..' are invalid filenames in Windows.\n    DEVICE_NAMES = 'CON,PRN,AUX,NUL,COM1,COM2,COM3,COM4,' \\\n                   'COM5,COM6,COM7,COM8,COM9,LPT1,LPT2,' \\\n                   'LPT3,LPT4,LPT5,LPT6,LPT7,LPT8,LPT9,' \\\n                   'CONIN$,CONOUT$,..,.'.split(',')  # This list is an O(n) operation.\n    if result in DEVICE_NAMES:\n        result = f'{FILLER}{result}{FILLER}'\n\n    # Step 3: Truncate long files while preserving the file extension.\n    if len(result) &gt; MAX_LEN:\n        if '.' in txt:\n            result, _, ext = result.rpartition('.')\n            ext = '.' + ext\n        else:\n            ext = ''\n        result = result[:MAX_LEN - len(ext)] + ext\n\n    # Step 4: Windows does not allow filenames to end with '.' or ' ' or begin with ' '.\n    result = re.sub(r'^[. ]', FILLER, result)\n    result = re.sub(r' $', FILLER, result)\n\n    return result\n</code></pre>\n<p>It replaces non-printable characters even if they are technically valid filenames because they are not always simple to deal with.</p>\n<p>No external libraries needed.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2324672,
                        "reputation": 3977,
                        "user_id": 2039471,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/d0c1ffe79f2799b393fac8b06f45cb8b?s=256&d=identicon&r=PG",
                        "display_name": "Alexander C",
                        "link": "https://stackoverflow.com/users/2039471/alexander-c"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1649224661,
                    "creation_date": 1649224661,
                    "answer_id": 71761675,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Extra note for all other answers</strong></p>\n<p>Add hash of original string to the end of filename. It will prevent conflicts\nin case your conversion makes same filename from different strings.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12155295,
                        "reputation": 4444,
                        "user_id": 8874388,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2d11ad02d4a8f077731c0100af2bb7cb?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mitch McMabers",
                        "link": "https://stackoverflow.com/users/8874388/mitch-mcmabers"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1645479915,
                    "last_edit_date": 1645479915,
                    "creation_date": 1645394359,
                    "answer_id": 71199182,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I don't recommend using any of the other answers. They're bloated, use bad techniques, and replace tons of legal characters (some even removed all Unicode characters, which is nuts since they're legal in filenames). A few of them even import huge libraries just for this tiny, easy job... that's crazy.</p>\n<p><strong>Here's a regex one-liner which efficiently replaces every illegal filesystem character and <em>nothing else.</em> No libraries, no bloat, just a perfectly legal filename in one simple command.</strong></p>\n<p>Reference: <a href=\"https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words</a></p>\n<p><strong>Regex:</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>clean = re.sub(r&quot;[/\\\\?%*:|\\&quot;&lt;&gt;\\x7F\\x00-\\x1F]&quot;, &quot;-&quot;, dirty)\n</code></pre>\n<p><strong>Usage:</strong></p>\n<pre><code>import re\n\n# Here's a dirty, illegal filename full of control-characters and illegal chars.\ndirty = &quot;&quot;.join([&quot;\\\\[/\\\\?%*:|\\&quot;&lt;&gt;0x7F0x00-0x1F]&quot;, chr(0x1F) * 15])\n\n# Clean it in one fell swoop.\nclean = re.sub(r&quot;[/\\\\?%*:|\\&quot;&lt;&gt;\\x7F\\x00-\\x1F]&quot;, &quot;-&quot;, dirty)\n\n# Result: &quot;-[----------0x7F0x00-0x1F]---------------&quot;\nprint(clean)\n</code></pre>\n<p>This was an extreme example where almost every character is illegal, because we constructed the dirty string with the same list of characters that the regex removes, and we even padded with a bunch of &quot;0x1F (ascii 31)&quot; at the end just to show that it also removes illegal control-characters.</p>\n<p>This is it. This regex is the only answer you need. It handles every illegal character on modern filesystems (Mac, Windows and Linux). Removing <em>anything</em> more beyond this would fall under the category of &quot;beautifying&quot; and has <strong>nothing</strong> to do with making legal disk filenames.</p>\n<hr />\n<p><strong>More work for Windows users:</strong></p>\n<p>After you've run this command, you could optionally <em>also</em> check <strong>the result</strong> against the list of &quot;special device names&quot; on Windows (a case-insensitive list of words such as &quot;CON&quot;, &quot;AUX&quot;, &quot;COM0&quot;, etc).</p>\n<p>The illegal words can be found at <a href=\"https://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations</a> in the &quot;Reserved words&quot;  and &quot;Comments&quot; columns for the <strong>NTFS</strong> and <strong>FAT</strong> filesystems.</p>\n<p>Filtering reserved words is only necessary if you plan to store the file on a NTFS or FAT-style disk. Because Windows reserves certain &quot;magic filenames&quot; for internal usage. It reserves them case-insensitively and without caring about the extension, meaning that for example <code>aux.c</code> is <a href=\"https://github.com/skeggsb/nouveau/issues/4\" rel=\"noreferrer\">an illegal filename on Windows</a> (very silly).</p>\n<p>All Mac/Linux filesystems don't have silly limitations like that, so you don't have to do anything else if you're on a <strong>good</strong> filesystem. Heck, in fact, most of the &quot;illegal characters&quot; we filtered out in the regex are Windows-specific limitations. Mac/Linux filesystems can store most of them. But we filter them anyway since it makes the filenames portable to Windows machines.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2903325,
                        "reputation": 1,
                        "user_id": 2489422,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0442ff67864f7b33b1a364af784ad186?s=256&d=identicon&r=PG",
                        "display_name": "Dmitry",
                        "link": "https://stackoverflow.com/users/2489422/dmitry"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1607630333,
                    "creation_date": 1607630333,
                    "answer_id": 65241466,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another approach is to specify a replacement for any unwanted symbol. This way filename may look more readable.</p>\n<pre><code>&gt;&gt;&gt; substitute_chars = {'/':'-', ' ':''}\n&gt;&gt;&gt; filename = 'Cedric_Kelly_12/10/2020 7:56 am_317168.pdf'\n&gt;&gt;&gt; &quot;&quot;.join(substitute_chars.get(c, c) for c in filename)\n'Cedric_Kelly_12-10-20207:56am_317168.pdf'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2844763,
                        "reputation": 992,
                        "user_id": 2443487,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/0ccea161c6b70ac5d4186f3e12b1477e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Anders_K",
                        "link": "https://stackoverflow.com/users/2443487/anders-k"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1583410435,
                    "creation_date": 1583410435,
                    "answer_id": 60545188,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you don't mind to import other packages, then werkzeug has a method for sanitizing strings:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from werkzeug.utils import secure_filename\n\nsecure_filename(\"hello.exe\")\n'hello.exe'\nsecure_filename(\"/../../.ssh\")\n'ssh'\nsecure_filename(\"DROP TABLE\")\n'DROP_TABLE'\n\n#fork bomb on Linux\nsecure_filename(\": () {: |: &amp;} ;:\")\n''\n\n#delete all system files on Windows\nsecure_filename(\"del*.*\")\n'del'\n</code></pre>\n\n<p><a href=\"https://pypi.org/project/Werkzeug/\" rel=\"noreferrer\">https://pypi.org/project/Werkzeug/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 2171870,
                        "reputation": 451,
                        "user_id": 1923636,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ni9uS.jpg?s=256",
                        "display_name": "Martin Kunc",
                        "link": "https://stackoverflow.com/users/1923636/martin-kunc"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1569310155,
                    "last_edit_date": 1569310155,
                    "creation_date": 1569308257,
                    "answer_id": 58074667,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is what I came with, being inspired by uglycoyote:</p>\n\n<pre><code>import time\n\ndef make_safe_filename(s):\n    def safe_char(c):\n        if c.isalnum() or c=='.':\n            return c\n        else:\n            return \"_\"\n\n    safe = \"\"\n    last_safe=False\n    for c in s:\n      if len(safe) &gt; 200:\n        return safe + \"_\" + str(time.time_ns() // 1000000)\n\n      safe_c = safe_char(c)\n      curr_safe = c != safe_c\n      if not last_safe or not curr_safe:\n        safe += safe_c\n      last_safe=curr_safe\n    return safe\n</code></pre>\n\n<p>And to test:</p>\n\n<pre><code>print(make_safe_filename( \"hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!hello you crazy $#^#&amp; 2579 people!!! : hi!!!\" ) + \".gif\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 191530,
                        "reputation": 2229,
                        "user_id": 432152,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/a098ed2b0c3c100e9b66d6b13d6d5d18?s=256&d=identicon&r=PG",
                        "display_name": "Filipe Pina",
                        "link": "https://stackoverflow.com/users/432152/filipe-pina"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1531386589,
                    "creation_date": 1531386589,
                    "answer_id": 51301546,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>More or less what has been mentioned here with regexp, but in reverse (replace any NOT listed):</p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; filename = u\"ad\\nbla'{-+\\)(\u00e71?\"\n&gt;&gt;&gt; re.sub(r'[^\\w\\d-]','_',filename)\nu'ad_bla__-_____1_'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 231947,
                        "reputation": 1695,
                        "user_id": 496456,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/274219a82e601812d832a810b83cf8c2?s=256&d=identicon&r=PG",
                        "display_name": "uglycoyote",
                        "link": "https://stackoverflow.com/users/496456/uglycoyote"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1521382792,
                    "last_edit_date": 1521382792,
                    "creation_date": 1492816441,
                    "answer_id": 43553331,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are a few reasonable answers here, but in my case I want to take something which is a string which might have spaces and punctuation and rather than just removing those, i would rather replace it with an underscore.  Even though spaces are an allowable filename character in most OS's they are problematic.  Also, in my case if the original string contained a period I didn't want that to pass through into the filename, or it would generate \"extra extensions\" that I might not want (I'm appending the extension myself)</p>\n\n<pre><code>def make_safe_filename(s):\n    def safe_char(c):\n        if c.isalnum():\n            return c\n        else:\n            return \"_\"\n    return \"\".join(safe_char(c) for c in s).rstrip(\"_\")\n\nprint(make_safe_filename( \"hello you crazy $#^#&amp; 2579 people!!! : die!!!\" ) + \".gif\")\n</code></pre>\n\n<p>prints:</p>\n\n<blockquote>\n  <p>hello_you_crazy_______2579_people______die___.gif</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 45219,
                        "reputation": 2133,
                        "user_id": 133227,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/019f46ecedfe4553c1382e481591dda4?s=256&d=identicon&r=PG",
                        "display_name": "Dragon",
                        "link": "https://stackoverflow.com/users/133227/dragon"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1511286481,
                    "creation_date": 1511286481,
                    "answer_id": 47419486,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No solutions here, only problems that you must consider:</p>\n\n<ul>\n<li><p>what is your minimum maximum filename length? (e.g. DOS supporting only 8-11 characters; most OS don't support >256 characters)</p></li>\n<li><p>what filenames are forbidden in some context? (Windows still doesn't support saving a file as <code>CON.TXT</code> -- see <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20031022-00/?p=42073\" rel=\"noreferrer\">https://blogs.msdn.microsoft.com/oldnewthing/20031022-00/?p=42073</a>)</p></li>\n<li><p>remember that <code>.</code> and <code>..</code> have specific meanings (current/parent directory) and are therefore unsafe.</p></li>\n<li><p>is there a risk that filenames will collide -- either due to removal of characters or the same filename being used multiple times?</p></li>\n</ul>\n\n<p>Consider just hashing the data and using the hexdump of that as a filename?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 475969,
                        "reputation": 3027,
                        "user_id": 886608,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/8cbfbe868e04e6312a3caf151c243144?s=256&d=identicon&r=PG",
                        "display_name": "Ngure Nyaga",
                        "link": "https://stackoverflow.com/users/886608/ngure-nyaga"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1337559271,
                    "creation_date": 1337559271,
                    "answer_id": 10678296,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>My requirements were conservative ( the generated filenames needed to be valid on multiple operating systems, including some ancient mobile OSs ). I ended up with:</p>\n\n<pre><code>    \"\".join([c for c in text if re.match(r'\\w', c)])\n</code></pre>\n\n<p>That white lists the alphanumeric characters ( a-z, A-Z, 0-9 ) and the underscore. The regular expression can be compiled and cached for efficiency, if there are a lot of strings to be matched. For my case, it wouldn't have made any significant difference.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 451432,
                        "reputation": 21137,
                        "user_id": 847331,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/811e96762eac3a693825446a9896712c?s=256&d=identicon&r=PG",
                        "display_name": "Remi",
                        "link": "https://stackoverflow.com/users/847331/remi"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1315936208,
                    "last_edit_date": 1315936208,
                    "creation_date": 1315935816,
                    "answer_id": 7406130,
                    "question_id": 7406102,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python:</p>\n\n<pre><code>for c in r'[]/\\;,&gt;&lt;&amp;*:%=+@!#^()|?^':\n    filename = filename.replace(c,'')\n</code></pre>\n\n<p>(just an example of characters you will want to remove)\nThe <code>r</code> in front of the string makes sure the string is interpreted in it's raw format, allowing you to remove backslash <code>\\</code> as well </p>\n\n<p>Edit:\nregex solution in Python:</p>\n\n<pre><code>import re\nre.sub(r'[]/\\;,&gt;&lt;&amp;*:%=+@!#^()|?^', '', filename)\n</code></pre>\n"
                }
            ]
        },
        {
            "25952790": [
                {
                    "owner": {
                        "account_id": 2376977,
                        "reputation": 151,
                        "user_id": 2080043,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/1Xijj.jpg?s=256",
                        "display_name": "Hemanta Nandi",
                        "link": "https://stackoverflow.com/users/2080043/hemanta-nandi"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1667719912,
                    "last_edit_date": 1667719912,
                    "creation_date": 1667717589,
                    "answer_id": 74333846,
                    "question_id": 25952790,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Do this:</p>\n<p>pd.to_numeric(s, errors='coerce')</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6321039,
                        "reputation": 401096,
                        "user_id": 4909087,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/Zcszo.png?s=256",
                        "display_name": "cs95",
                        "link": "https://stackoverflow.com/users/4909087/cs95"
                    },
                    "is_accepted": true,
                    "score": 91,
                    "last_activity_date": 1578128602,
                    "last_edit_date": 1578128602,
                    "creation_date": 1513951615,
                    "answer_id": 47942854,
                    "question_id": 25952790,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html\" rel=\"noreferrer\"><code>pd.to_numeric</code></a> with <code>errors='coerce'</code></h3>\n\n<pre><code># Setup\ns = pd.Series(['1', '2', '3', '4', '.'])\ns\n\n0    1\n1    2\n2    3\n3    4\n4    .\ndtype: object\n</code></pre>\n\n<p></p>\n\n<pre><code>pd.to_numeric(s, errors='coerce')\n\n0    1.0\n1    2.0\n2    3.0\n3    4.0\n4    NaN\ndtype: float64\n</code></pre>\n\n<p>If you need the <code>NaN</code>s filled in, use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html\" rel=\"noreferrer\"><code>Series.fillna</code></a>.</p>\n\n<pre><code>pd.to_numeric(s, errors='coerce').fillna(0, downcast='infer')\n\n0    1\n1    2\n2    3\n3    4\n4    0\ndtype: float64\n</code></pre>\n\n<p>Note, <code>downcast='infer'</code> will attempt to downcast floats to integers where possible. Remove the argument if you don't want that.</p>\n\n<blockquote>\n  <p>From v0.24+, pandas introduces a <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html\" rel=\"noreferrer\">Nullable Integer</a> type, which allows\n  integers to coexist with NaNs. If you have integers in your column,\n  you can use</p>\n\n<pre><code>pd.__version__\n# '0.24.1'\n\npd.to_numeric(s, errors='coerce').astype('Int32')\n\n0      1\n1      2\n2      3\n3      4\n4    NaN\ndtype: Int32\n</code></pre>\n  \n  <p>There are other options to choose from as well, read the docs for more.</p>\n</blockquote>\n\n<hr>\n\n<h3><strong>Extension for <code>DataFrames</code></strong></h3>\n\n<p>If you need to extend this to DataFrames, you will need to <em>apply</em> it to each row. You can do this using <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html\" rel=\"noreferrer\"><code>DataFrame.apply</code></a>. </p>\n\n<pre><code># Setup.\nnp.random.seed(0)\ndf = pd.DataFrame({\n    'A' : np.random.choice(10, 5), \n    'C' : np.random.choice(10, 5), \n    'B' : ['1', '###', '...', 50, '234'], \n    'D' : ['23', '1', '...', '268', '$$']}\n)[list('ABCD')]\ndf\n\n   A    B  C    D\n0  5    1  9   23\n1  0  ###  3    1\n2  3  ...  5  ...\n3  3   50  2  268\n4  7  234  4   $$\n\ndf.dtypes\n\nA     int64\nB    object\nC     int64\nD    object\ndtype: object\n</code></pre>\n\n<p></p>\n\n<pre><code>df2 = df.apply(pd.to_numeric, errors='coerce')\ndf2\n\n   A      B  C      D\n0  5    1.0  9   23.0\n1  0    NaN  3    1.0\n2  3    NaN  5    NaN\n3  3   50.0  2  268.0\n4  7  234.0  4    NaN\n\ndf2.dtypes\n\nA      int64\nB    float64\nC      int64\nD    float64\ndtype: object\n</code></pre>\n\n<p>You can also do this with <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.transform.html#pandas.DataFrame.transform\" rel=\"noreferrer\"><code>DataFrame.transform</code></a>; although my tests indicate this is marginally slower:</p>\n\n<pre><code>df.transform(pd.to_numeric, errors='coerce')\n\n   A      B  C      D\n0  5    1.0  9   23.0\n1  0    NaN  3    1.0\n2  3    NaN  5    NaN\n3  3   50.0  2  268.0\n4  7  234.0  4    NaN\n</code></pre>\n\n\n\n<p>If you have many columns (numeric; non-numeric), you can make this a little more performant by applying <code>pd.to_numeric</code> on the non-numeric columns only.</p>\n\n<pre><code>df.dtypes.eq(object)\n\nA    False\nB     True\nC    False\nD     True\ndtype: bool\n\ncols = df.columns[df.dtypes.eq(object)]\n# Actually, `cols` can be any list of columns you need to convert.\ncols\n# Index(['B', 'D'], dtype='object')\n\ndf[cols] = df[cols].apply(pd.to_numeric, errors='coerce')\n# Alternatively,\n# for c in cols:\n#     df[c] = pd.to_numeric(df[c], errors='coerce')\n\ndf\n\n   A      B  C      D\n0  5    1.0  9   23.0\n1  0    NaN  3    1.0\n2  3    NaN  5    NaN\n3  3   50.0  2  268.0\n4  7  234.0  4    NaN\n</code></pre>\n\n<p>Applying <code>pd.to_numeric</code> along the columns (i.e., <code>axis=0</code>, the default) should be slightly faster for long DataFrames. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 324366,
                        "reputation": 128678,
                        "user_id": 644898,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=256&d=identicon&r=PG",
                        "display_name": "Jeff",
                        "link": "https://stackoverflow.com/users/644898/jeff"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1411243595,
                    "creation_date": 1411243595,
                    "answer_id": 25952844,
                    "question_id": 25952790,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>In [30]: pd.Series([1,2,3,4,'.']).convert_objects(convert_numeric=True)\nOut[30]: \n0     1\n1     2\n2     3\n3     4\n4   NaN\ndtype: float64\n</code></pre>\n"
                }
            ]
        },
        {
            "11469336": [
                {
                    "owner": {
                        "account_id": 90604,
                        "reputation": 87878,
                        "user_id": 249341,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/ZFHpl.jpg?s=256",
                        "display_name": "Hooked",
                        "link": "https://stackoverflow.com/users/249341/hooked"
                    },
                    "is_accepted": true,
                    "score": 174,
                    "last_activity_date": 1532363834,
                    "last_edit_date": 1592644375,
                    "creation_date": 1342187238,
                    "answer_id": 11471777,
                    "question_id": 11469336,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>This wording is no longer in the documentation.</strong></p>\n<p>Use of the <code>pylab</code> import is now discouraged and the OO interface is recommended for most non-interactive usage.</p>\n<hr />\n<p>From the <a href=\"http://matplotlib.sourceforge.net/faq/usage_faq.html\" rel=\"noreferrer\">documentation</a>, the emphasis is mine:</p>\n<blockquote>\n<p>Matplotlib is the whole package; pylab is a module in matplotlib that gets installed alongside <a href=\"http://matplotlib.sourceforge.net/api/matplotlib_configuration_api.html#module-matplotlib\" rel=\"noreferrer\">matplotlib</a>; and <a href=\"http://matplotlib.sourceforge.net/api/pyplot_api.html#module-matplotlib.pyplot\" rel=\"noreferrer\">matplotlib.pyplot</a> is a module in matplotlib.</p>\n<p>Pyplot provides the state-machine interface to the underlying plotting library in matplotlib. This means that figures and axes are implicitly and automatically created to achieve the desired plot. For example, calling plot from pyplot will automatically create the necessary figure and axes to achieve the desired plot. Setting a title will then automatically set that title to the current axes object:</p>\n<p>Pylab combines the pyplot functionality (for plotting) with the numpy functionality (for mathematics and for working with arrays) in a single namespace, making that namespace (or environment) even more MATLAB-like. For example, one can call the sin and cos functions just like you could in MATLAB, as well as having all the features of pyplot.</p>\n<p>The <strong>pyplot interface is generally preferred for non-interactive plotting</strong> (i.e., scripting). The <strong>pylab interface is convenient for interactive calculations and plotting</strong>, as it minimizes typing. Note that this is what you get if you use the ipython shell with the -pylab option, which imports everything from pylab and makes plotting fully interactive.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "3154460": [
                {
                    "owner": {
                        "account_id": 21017,
                        "reputation": 2030,
                        "user_id": 50774,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a8e662d228ad7f19eea5973542fd0ed6?s=256&d=identicon&r=PG",
                        "display_name": "Lester Cheung",
                        "link": "https://stackoverflow.com/users/50774/lester-cheung"
                    },
                    "is_accepted": false,
                    "score": 83,
                    "last_activity_date": 1715089409,
                    "last_edit_date": 1715089409,
                    "creation_date": 1317873286,
                    "answer_id": 7670181,
                    "question_id": 3154460,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Note the question has changed over the years. Please see <a href=\"https://stackoverflow.com/a/3155023/50774\">Janus's response</a> to get the &quot;human&quot; numbers or keep reading if you just want to format the number as a string with separators.</p>\n<p>With Python\u00a02.7+ or Python\u00a03, you just use the &quot;,&quot; option in your string formatting. See <a href=\"http://www.python.org/dev/peps/pep-0378/\" rel=\"nofollow noreferrer\">PEP 378: Format Specifier for Thousands Separator</a> for more information:</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; &quot;{:,}&quot;.format(100000000)\n'100,000,000'\n</code></pre>\n<p>With Python\u00a03.6+ you can also use the &quot;_&quot; format - see <a href=\"https://www.python.org/dev/peps/pep-0515/\" rel=\"nofollow noreferrer\">PEP 515</a> for details:</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; &quot;{:_}&quot;.format(100000000)\n'100_000_000'\n</code></pre>\n<p>Or you can use a <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow noreferrer\">similar syntax with f-strings</a>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; number = 100000000\n&gt;&gt;&gt;f&quot;{number:,}&quot;\n'100,000,000'\n</code></pre>\n<p>So I don't have to squint while reading big numbers, I have the 2.7 version of the code wrapped up in a shell function:</p>\n<pre class=\"lang-none prettyprint-override\"><code>human_readable_numbers () {\n    python2.7 -c &quot;print('{:,}').format($1)&quot;\n}\n</code></pre>\n<p>Lastly, if for some reason you must work with code from Python versions 2.6 or earlier, you can solve the problem using the <code>locale</code> standard library module:</p>\n<pre class=\"lang-python prettyprint-override\"><code>import locale\nlocale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 2**32, grouping=True) # Returns '4,294,967,296'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 73886,
                        "reputation": 5681,
                        "user_id": 212538,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/8f47479e0460220549065c1d3a231d23?s=256&d=identicon&r=PG",
                        "display_name": "Janus",
                        "link": "https://stackoverflow.com/users/212538/janus"
                    },
                    "is_accepted": true,
                    "score": 112,
                    "last_activity_date": 1715087836,
                    "last_edit_date": 1715087836,
                    "creation_date": 1277957118,
                    "answer_id": 3155023,
                    "question_id": 3154460,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As I understand it, you only want the 'most significant' part. To do so, use <code>floor(log10(abs(n)))</code> to get number of digits and then go from there. Something like this, maybe:</p>\n<pre><code>import math\n\nmillnames = ['',' Thousand',' Million',' Billion',' Trillion']\n\ndef millify(n):\n    n = float(n)\n    millidx = max(0,min(len(millnames)-1,\n                        int(math.floor(0 if n == 0 else math.log10(abs(n))/3))))\n\n    return '{:.0f}{}'.format(n / 10**(3 * millidx), millnames[millidx])\n</code></pre>\n<p>Running the above function for a bunch of different numbers:</p>\n<pre><code>for n in (1.23456789 * 10**r for r in range(-2, 19, 1)):\n    print('%20.1f: %20s' % (n,millify(n)))\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>                 0.0:                    0\n                 0.1:                    0\n                 1.2:                    1\n                12.3:                   12\n               123.5:                  123\n              1234.6:           1 Thousand\n             12345.7:          12 Thousand\n            123456.8:         123 Thousand\n           1234567.9:            1 Million\n          12345678.9:           12 Million\n         123456789.0:          123 Million\n        1234567890.0:            1 Billion\n       12345678900.0:           12 Billion\n      123456789000.0:          123 Billion\n     1234567890000.0:           1 Trillion\n    12345678900000.0:          12 Trillion\n   123456789000000.0:         123 Trillion\n  1234567890000000.0:        1235 Trillion\n 12345678899999998.0:       12346 Trillion\n123456788999999984.0:      123457 Trillion\n1234567890000000000.0:     1234568 Trillion\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 36550,
                        "reputation": 984,
                        "user_id": 104297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/21f5359ed269a6ca2572fb10cd8b4615?s=256&d=identicon&r=PG",
                        "display_name": "alecwh",
                        "link": "https://stackoverflow.com/users/104297/alecwh"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1277946150,
                    "creation_date": 1277946150,
                    "answer_id": 3154485,
                    "question_id": 3154460,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>That number seems pretty human-readable to me. An unfriendly number would be 187289840422780.00. To add commas, you could create your own function or search for one (I found <a href=\"http://code.activestate.com/recipes/146461-commafying-an-integer/\" rel=\"nofollow noreferrer\">this</a>): </p>\n\n<pre><code>import re\n\ndef comma_me(amount):\n    orig = amount\n    new = re.sub(\"^(-?\\d+)(\\d{3})\", '\\g&lt;1&gt;,\\g&lt;2&gt;', amount)\n    if orig == new:\n        return new\n    else:\n        return comma_me(new)\n\nf = 12345678\nprint comma_me(`f`)\nOutput: 12,345,678\n</code></pre>\n\n<p>If you want to round a number to make it more readable, there is a python function for that: <code>round()</code>.</p>\n\n<p>You could move even further away from the actual data and say \"A very high amount\" or \"Above 100 trillion\" using a function that would return a different value based on your programmed benchmarks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1224,
                        "reputation": 15049,
                        "user_id": 1626,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/AxUjq.jpg?s=256",
                        "display_name": "Arkady",
                        "link": "https://stackoverflow.com/users/1626/arkady"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1277945968,
                    "creation_date": 1277945968,
                    "answer_id": 3154477,
                    "question_id": 3154460,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>From <a href=\"http://www.mail-archive.com/webpy@googlegroups.com/msg03551.html\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<pre><code>def commify(n):\n    if n is None: return None\n    if type(n) is StringType:\n        sepdec = localenv['mon_decimal_point']\n    else:\n        #if n is python float number we use everytime the dot\n        sepdec = '.'\n    n = str(n)\n    if sepdec in n:\n        dollars, cents = n.split(sepdec)\n    else:\n        dollars, cents = n, None\n\n    r = []\n    for i, c in enumerate(reversed(str(dollars))):\n        if i and (not (i % 3)):\n            r.insert(0, localenv['mon_thousands_sep'])\n        r.insert(0, c)\n    out = ''.join(r)\n    if cents:\n        out += localenv['mon_decimal_point'] + cents\n    return out\n</code></pre>\n"
                }
            ]
        },
        {
            "9437726": [
                {
                    "owner": {
                        "account_id": 409077,
                        "reputation": 1401,
                        "user_id": 780110,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/f8b55cff1325590e3b97e344e5dfc738?s=256&d=identicon&r=PG",
                        "display_name": "eresonance",
                        "link": "https://stackoverflow.com/users/780110/eresonance"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1598172223,
                    "last_edit_date": 1598172223,
                    "creation_date": 1445619326,
                    "answer_id": 33307710,
                    "question_id": 9437726,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Edward Loper's answer only works if the variable is in the current module. To get a value in another module, you can use <code>getattr</code>:</p>\n<pre><code>import other\nprint getattr(other, &quot;name_of_variable&quot;)\n</code></pre>\n<p><a href=\"https://docs.python.org/3/library/functions.html#getattr\" rel=\"noreferrer\">https://docs.python.org/3/library/functions.html#getattr</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1257651,
                        "reputation": 13156,
                        "user_id": 1216776,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/J0KLS.gif?s=256",
                        "display_name": "stark",
                        "link": "https://stackoverflow.com/users/1216776/stark"
                    },
                    "is_accepted": false,
                    "score": 56,
                    "last_activity_date": 1579205098,
                    "last_edit_date": 1579205098,
                    "creation_date": 1330116394,
                    "answer_id": 9437796,
                    "question_id": 9437726,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Assuming that you know the string is safe to evaluate, then eval will give the value of the variable in the current context.</p>\n\n<pre><code>&gt;&gt;&gt; string = \"blah\"\n&gt;&gt;&gt; string\n'blah'\n&gt;&gt;&gt; x = \"string\"\n&gt;&gt;&gt; eval(x)\n'blah'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 78017,
                        "reputation": 15904,
                        "user_id": 222329,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/5215a9386cbe41e98671177d75a280f4?s=256&d=identicon&r=PG",
                        "display_name": "Edward Loper",
                        "link": "https://stackoverflow.com/users/222329/edward-loper"
                    },
                    "is_accepted": true,
                    "score": 242,
                    "last_activity_date": 1330116401,
                    "creation_date": 1330116401,
                    "answer_id": 9437799,
                    "question_id": 9437726,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If it's a global variable, then you can do:</p>\n\n<pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; globals()['a']\n5\n</code></pre>\n\n<p>A note about the various \"eval\" solutions: you should be careful with eval, especially if the string you're evaluating comes from a potentially untrusted source -- otherwise, you might end up deleting the entire contents of your disk or something like that if you're given a malicious string.</p>\n\n<p>(If it's not global, then you'll need access to whatever namespace it's defined in.  If you don't have that, there's no way you'll be able to access it.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 214591,
                        "reputation": 5361,
                        "user_id": 468653,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/a516b686e58eec3ce5482a03ffbe137e?s=256&d=identicon&r=PG",
                        "display_name": "maxm",
                        "link": "https://stackoverflow.com/users/468653/maxm"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1330116249,
                    "creation_date": 1330116249,
                    "answer_id": 9437765,
                    "question_id": 9437726,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; x=5\n&gt;&gt;&gt; print eval('x')\n5\n</code></pre>\n\n<p>tada!</p>\n"
                }
            ]
        },
        {
            "21053988": [
                {
                    "owner": {
                        "account_id": 998291,
                        "reputation": 36732,
                        "user_id": 1013719,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/U8X0A.jpg?s=256",
                        "display_name": "Ryan Haining",
                        "link": "https://stackoverflow.com/users/1013719/ryan-haining"
                    },
                    "is_accepted": true,
                    "score": 81,
                    "last_activity_date": 1671656641,
                    "last_edit_date": 1671656641,
                    "creation_date": 1389386698,
                    "answer_id": 21054087,
                    "question_id": 21053988,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can &quot;capture&quot; the <code>i</code> when creating the lambda</p>\n<pre><code>lambda x, i=i: x%i==0\n</code></pre>\n<p>This will set the <code>i</code> in the lambda's context equal to whatever <code>i</code> was when it was created.  you could also say <code> lambda x, n=i: x%n==0</code> if you wanted. It's not exactly capture, but it gets you what you need.</p>\n<hr />\n<p>It's an issue of lookup that's analogous to the following with defined functions:</p>\n<pre><code>glob = &quot;original&quot;\n\ndef print_glob():\n    print(glob) # prints &quot;changed&quot; when called below\n\ndef print_param(param=glob): # default set at function creation, not call\n    print(param) # prints &quot;original&quot; when called below\n\n\nglob = &quot;changed&quot;\nprint_glob()\nprint_param()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 808621,
                        "reputation": 364884,
                        "user_id": 908494,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=256&d=identicon&r=PG",
                        "display_name": "abarnert",
                        "link": "https://stackoverflow.com/users/908494/abarnert"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1520816113,
                    "last_edit_date": 1520816113,
                    "creation_date": 1389387937,
                    "answer_id": 21054384,
                    "question_id": 21053988,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The problem is that each of those functions in <code>tests</code> is referring to the variable <code>i</code>.</p>\n\n<p>More commonly, you do this inside a function, in which case you have a local-to-the-defining-scope variable <code>i</code>, which gets stored in a closure, as nicely explained in <a href=\"http://code.activestate.com/recipes/502271/\" rel=\"nofollow noreferrer\">These Nasty Closures</a>.</p>\n\n<p>But here, it's even simpler: <code>i</code> is a global variable, so there is no closure. The functions are compiled to look up <code>i</code> as a global variable when run. Since <code>i</code> has changed, the functions will see the changed value when they run. Simple as that.</p>\n\n<hr>\n\n<p>The traditional way around this (which works for both closures and globals) is fondly known as \"the default-value hack\", even though it's not really a hack. (See <a href=\"https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects\" rel=\"nofollow noreferrer\">the explanation in the FAQ</a>.) Ryan Haining's answer explains how to do this:</p>\n\n<pre><code>lambda x, i=i: x%i==0\n</code></pre>\n\n<p>This creates a parameter named <code>i</code>, with a default value equal to the value of <code>i</code> at the time the function is created. Then, inside the function, when you access parameter <code>i</code>, and you get that value.</p>\n\n<hr>\n\n<p>A different way around this, which may seem more familiar if you're using to languages like JavaScript, is to create a function-creating function, and pass the value of <code>i</code> as an argument to that function-creating function, as in user2864740's answer:</p>\n\n<pre><code>(lambda i: lambda x: x%i)(i)\n</code></pre>\n\n<p>This avoids \"polluting\" the signature of the function with an extra parameter (that someone could accidentally pass an argument to), but at the cost of creating and calling a function for no good reason.</p>\n\n<hr>\n\n<p>A third way around this is to use <code>partial</code>. In cases where all you're trying to do is partially apply a function, using <code>partial</code> instead of defining a wrapper function as a <code>lambda</code> can be cleaner.</p>\n\n<p>Unfortunately, in this case, the function is hidden inside an operator, and the function <code>operator.mod</code> that exposes it doesn't take keyword arguments, so you can't usefully partial its second operand. So, this is a bad solution in this case. If you really wanted to, you could just write a wrapper that behaves better and <code>partial</code> that:</p>\n\n<pre><code>def opmod(a, b):\n    return a % b\n\npartial(operator.mod, b=i)\n</code></pre>\n\n<p>In this case, I think you're better off with the other solutions; just keep this one in your head for cases where it <em>is</em> appropriate.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3415784,
                        "reputation": 61715,
                        "user_id": 2864740,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/98e74e03b5b1cd2dad5f5dc5c245bb0f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user2864740",
                        "link": "https://stackoverflow.com/users/2864740/user2864740"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1389386622,
                    "creation_date": 1389386622,
                    "answer_id": 21054059,
                    "question_id": 21053988,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Create a new function that returns the lambda. Then call that, passing in <code>i</code> as an argument. This will create a new binding scope.</p>\n\n<pre><code>def make_test (i):\n   # this i refers to the parameter (which evaluates to the /value/ passed)\n   return lambda x: x%i==0\n\n# ..\n# the /value/ resulting from evaluating the variable is passed\ntests.append(make_test(i))\n</code></pre>\n"
                }
            ]
        },
        {
            "1466917": [
                {
                    "owner": {
                        "account_id": 14700651,
                        "reputation": 85,
                        "user_id": 10616754,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-IWcvA546mw8/AAAAAAAAAAI/AAAAAAAAApY/eCi6UbCfWxI/photo.jpg?sz=256",
                        "display_name": "Asish Antony",
                        "link": "https://stackoverflow.com/users/10616754/asish-antony"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1575625213,
                    "creation_date": 1575625213,
                    "answer_id": 59210473,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python is one of the most used object-oriented programming languages which is very easy to code and understand.</p>\n\n<p>In order to use Python with SAP, we need to install Python SAP RFC module which is known as PyRFC. One of its available methods is RFC_READ_TABLE which can be called to read data from a table in SAP database.</p>\n\n<p>Also, the PyRFC package provides various bindings which can be utilized to make calls either way. We can use to make calls either from ABAP modules to Python modules or the other way round. One can define equivalent SAP data types which are used in data exchange.</p>\n\n<p>Also, we can create Web Service in Python which can be used for inter-communication. SAP NetWeaver is fully compatible with web services either state full or stateless.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1680088,
                        "reputation": 436,
                        "user_id": 1544543,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1d593ca27535a5728428649ed0cb1ac6?s=256&d=identicon&r=PG",
                        "display_name": "bsrdjan",
                        "link": "https://stackoverflow.com/users/1544543/bsrdjan"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1575029532,
                    "last_edit_date": 1575029532,
                    "creation_date": 1351534479,
                    "answer_id": 13127357,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python RFC connector is now available as open source: <a href=\"https://github.com/SAP/PyRFC\" rel=\"noreferrer\">PyRFC</a> </p>\n"
                },
                {
                    "owner": {
                        "account_id": 2214640,
                        "reputation": 501,
                        "user_id": 2793933,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1bc821fd63b492ee2685039067312de4?s=256&d=identicon&r=PG",
                        "display_name": "hansonap",
                        "link": "https://stackoverflow.com/users/2793933/hansonap"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1436379584,
                    "creation_date": 1436379584,
                    "answer_id": 31300609,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>SAP now has a Python RFC connector called pyrfc. This supersedes sapnwrfc.</p>\n\n<p>This can be found at: <a href=\"https://github.com/SAP/PyRFC\" rel=\"noreferrer\">https://github.com/SAP/PyRFC</a></p>\n\n<p>\"The pyrfc Python package provides Python bindings for SAP NetWeaver RFC Library, for a comfortable way of calling ABAP modules from Python and Python modules from ABAP, via SAP Remote Function Call (RFC) protocol.\"</p>\n"
                },
                {
                    "owner": {
                        "account_id": 564034,
                        "reputation": 81,
                        "user_id": 184861,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/cb23276a97d52bd33be69cc69ad36e34?s=256&d=identicon&r=PG",
                        "display_name": "Frank Bechmann",
                        "link": "https://stackoverflow.com/users/184861/frank-bechmann"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1254821718,
                    "creation_date": 1254821718,
                    "answer_id": 1524563,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>As stated above, when you just want to read tables or do RFC or BAPI calls, you can use CPython with the unmaintained Python SAP RFC module or Piers Harding's <a href=\"http://pypi.python.org/pypi/saprfc/\" rel=\"nofollow noreferrer\">SAP RFC</a>. The RFC calls to just read a table are RFC_GET_TABLE_ENTRIES or RFC_READ_TABLE, where the former is preferred, but also not released to customers.</p>\n\n<p>For a more official way, you can use SAP's JCO connector with Jython or SAP's .Net Connector with Ironpython; both connectors can be downloaded from SAP's service marketplace and both allow to call the RFC functionality including the two calls listed above.</p>\n\n<p>As also stated above, the way proposed by SAP to access backend functionality is via SAP's vast SOA infrastructure. Here you can use Jython with e.g. the Axis library or Ironpython with Microsofts WCF. Note, that the services provided by SAP obviously won't allow you to access the plain tables, instead you just can call, what a service provides. SAP already delivers about 3.000 services (see the ES Wiki on SDN), and creating your own service is in fact dead simple, once you have your business logic in a remote-enabled function module.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1253738705,
                    "creation_date": 1253738705,
                    "answer_id": 1468422,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're talking about (what used to be named) the SAP Database AKA <a href=\"http://www.sapdb.org/\" rel=\"noreferrer\">SapDb</a>, and is now <a href=\"http://www.sapdb.org/\" rel=\"noreferrer\">MaxDB</a> (for a while distributed also by MySql Inc, <a href=\"http://www.sdn.sap.com/irj/scn/weblogs;jsessionid=(J2EE3414800)ID1243106650DB12715359355348892918End?blog=/pub/wlg/7514\" rel=\"noreferrer\">now</a> again by SAP only -- and so named <a href=\"http://www.sdn.sap.com/irj/sdn/maxdb;jsessionid=(J2EE3414800)ID1243106650DB12715359355348892918End\" rel=\"noreferrer\">SAP MaxDB</a>), it comes with several Python access modules, documented <a href=\"http://maxdb.sap.com/doc/7_7/46/71b2a516ae0284e10000000a1553f6/frameset.htm\" rel=\"noreferrer\">here</a>.</p>\n\n<p>This is the only meaning I can attach to \"SAP as the database engine\" -- that you want to access SAP MaxDB.  Other answers make different assumptions and (I believe) are also correct... under those different assumptions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12940,
                        "reputation": 10684,
                        "user_id": 25737,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/5zh2K.png?s=256",
                        "display_name": "Igal Serban",
                        "link": "https://stackoverflow.com/users/25737/igal-serban"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1253731768,
                    "creation_date": 1253731768,
                    "answer_id": 1467921,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Sap is NOT a database server.\nBut with the Python SAP RFC module you can query most table quite easily. It is using some sap unsupported function ( that all the world is using). And this function has some limitation on field size and datatypes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4350,
                        "reputation": 86084,
                        "user_id": 6491,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fd7da9bf7b009ceb7a7037906361c9eb?s=256&d=identicon&r=PG",
                        "display_name": "gimel",
                        "link": "https://stackoverflow.com/users/6491/gimel"
                    },
                    "is_accepted": true,
                    "score": 25,
                    "last_activity_date": 1253723552,
                    "last_edit_date": 1592644375,
                    "creation_date": 1253723066,
                    "answer_id": 1467136,
                    "question_id": 1466917,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"http://pysaprfc.sourceforge.net/\" rel=\"noreferrer\">Python SAP RFC module</a> seems inactive - <a href=\"http://pysaprfc.cvs.sourceforge.net/viewvc/pysaprfc/pysaprfc/\" rel=\"noreferrer\">last (insignificant ) commit</a> 2 years ago - but may serve you:</p>\n<blockquote>\n<p>Pysaprfc is a wrapper around SAP librfc (librfc32.dll on Windows, librfccm.so or librfc.so on Linux). It uses the excellent ctypes extension package by Thomas Heller to access librfc and to define SAP compatible datatypes.</p>\n</blockquote>\n<p>Modern SAP versions go the <a href=\"http://www.sdn.sap.com/irj/sdn/webservices\" rel=\"noreferrer\"><code>Web Service</code> way</a> - you could build a <code>SAP Web Service</code> and consume it from <code>Python</code>.</p>\n<blockquote>\n<p>With SAP NetWeaver, developers can connect applications and data sources to integrate processes using Web services.</p>\n<p>In particular, developers can use one infrastructure to define, implement, and use Web services in an industry standards based way. SAP NetWeaver supports synchronous, asynchronous, stateful and stateless web service models - enabling developers to support different integration scenarios.</p>\n</blockquote>\n<p><a href=\"http://www.piersharding.com/download/python/sapnwrfc/\" rel=\"noreferrer\"><code>sapnwrfc</code></a> supports this <code>SAP NetWeaver</code> functionality, <a href=\"http://pypi.python.org/pypi/sapnwrfc/\" rel=\"noreferrer\">supersedes</a> the older RFC SDK, and is actively maintained.</p>\n"
                }
            ]
        },
        {
            "8028708": [
                {
                    "owner": {
                        "account_id": 37637,
                        "reputation": 95264,
                        "user_id": 107660,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=256&d=identicon&r=PG",
                        "display_name": "Duncan",
                        "link": "https://stackoverflow.com/users/107660/duncan"
                    },
                    "is_accepted": true,
                    "score": 88,
                    "last_activity_date": 1536867069,
                    "last_edit_date": 1536867069,
                    "creation_date": 1320599481,
                    "answer_id": 8028772,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Contrary to other answers already posted you cannot modify <code>locals()</code> directly and expect it to work.</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n    lcl = locals()\n    lcl['xyz'] = 42\n    print(xyz)\n\n\n&gt;&gt;&gt; foo()\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#6&gt;\", line 1, in &lt;module&gt;\n    foo()\n  File \"&lt;pyshell#5&gt;\", line 4, in foo\n    print(xyz)\nNameError: global name 'xyz' is not defined\n</code></pre>\n\n<p>Modifying <code>locals()</code> is undefined. Outside a function when <code>locals()</code> and <code>globals()</code> are the same it will work; inside a function it will <em>usually</em> not work.</p>\n\n<p>Use a dictionary, or set an attribute on an object:</p>\n\n<pre><code>d = {}\nd['xyz'] = 42\nprint(d['xyz'])\n</code></pre>\n\n<p>or if you prefer, use a class:</p>\n\n<pre><code>class C: pass\n\nobj = C()\nsetattr(obj, 'xyz', 42)\nprint(obj.xyz)\n</code></pre>\n\n<p><strong>Edit</strong>:\nAccess to variables in namespaces that aren't functions (so modules, class definitions, instances) are usually done by dictionary lookups (as Sven points out in the comments there are exceptions, for example classes that define <code>__slots__</code>). Function locals can be optimised for speed because the compiler (usually) knows all the names in advance, so there isn't a dictionary until you call <code>locals()</code>.</p>\n\n<p>In the C implementation of Python <code>locals()</code> (called from inside a function) creates an ordinary dictionary initialised from the current values of the local variables. Within each function any number of calls to <code>locals()</code> will return the same dictionary, but every call to <code>locals()</code> will update it with the current values of the local variables. This can give the impression that assignment to elements of the dictionary are ignored (I originally wrote that this was the case). Modifications to existing keys within the dictionary returned from <code>locals()</code> therefore only last until the next call to <code>locals()</code> in the same scope.</p>\n\n<p>In IronPython things work a bit differently. Any function that calls <code>locals()</code> inside it uses a dictionary for its local variables so assignments to local variables change the dictionary and assignments to the dictionary change the variables <strong>BUT</strong> that's only if you explicitly call <code>locals()</code> under that name. If you bind a different name to the <code>locals</code> function in IronPython then calling it gives you the local variables for the scope where the name was bound and there's no way to access the function locals through it:</p>\n\n<pre><code>&gt;&gt;&gt; def foo():\n...     abc = 123\n...     lcl = zzz()\n...     lcl['abc'] = 456\n...     deF = 789\n...     print(abc)\n...     print(zzz())\n...     print(lcl)\n...\n&gt;&gt;&gt; zzz =locals\n&gt;&gt;&gt; foo()\n123\n{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}\n{'__doc__': None, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'zzz': &lt;built-in function locals&gt;, 'foo': &lt;function foo at 0x000000000000002B&gt;, '__name__': '__main__', 'abc': 456}\n&gt;&gt;&gt;\n</code></pre>\n\n<p>This could all change at any time. The only thing guaranteed is that you cannot depend on the results of assigning to the dictionary returned by <code>locals()</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1021083,
                        "reputation": 40902,
                        "user_id": 1031417,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://i.sstatic.net/xlhE1.jpg?s=256",
                        "display_name": "0x90",
                        "link": "https://stackoverflow.com/users/1031417/0x90"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1402148743,
                    "last_edit_date": 1402148743,
                    "creation_date": 1402146795,
                    "answer_id": 24097588,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let's say We have the below dictionary:</p>\n\n<pre><code>DictionaryA = {'No Rating': ['Hobbit', 'Movie C', 'Movie G'],\n               'Forget It': ['Avenger', 'Movie B'], \n               'Must See': ['Children of Men', 'Skyfall', 'Movie F'], \n               '3': ['X-Men', 'Movie D'],\n               '2': ['Captain America', 'Movie E'], \n               '4': ['Transformers', 'Movie A']} \n</code></pre>\n\n<p>I want to create new dictionaries as below:</p>\n\n<pre><code>NewDictionary1 = {'No Rating': ['Hobbit', 'Movie C', 'Movie G']} \nNewDictionary2 = {'Forget It': ['Avenger', 'Movie B']} \nNewDictionary3 = {'Must See': ['Children of Men', 'Skyfall', 'Movie F']}\n</code></pre>\n\n<p>a oneliner:</p>\n\n<pre><code>dics = [{k:v} for k,v in DictionaryA.iteritems()]\n</code></pre>\n\n<p>would be outputted to:</p>\n\n<pre><code>[{'Must See': ['Children of Men', 'Skyfall', 'Movie F']}, {'Forget It': ['Avenger', 'Movie B']}, {'No Rating': ['Hobbit', 'Movie C', 'Movie G']}, {'3': ['X-Men', 'Movie D']}, {'2': ['Captain America', 'Movie E']}, {'4': ['Transformers', 'Movie A']}]\n</code></pre>\n\n<p>But to precisely declaring variables we could go with:</p>\n\n<pre><code>&gt;&gt;&gt; i=0\n&gt;&gt;&gt; lcl = locals()\n&gt;&gt;&gt; for key,val in DictionaryA.iteritems():\n        lcl[\"Dict\" + str(i)] = {key:val}\n        i += 1\n</code></pre>\n\n<p>As can be seen the first 3 <code>Dict</code> variables:</p>\n\n<pre><code>&gt;&gt;&gt; Dict0\n{'Must See': ['Children of Men', 'Skyfall', 'Movie F']}\n&gt;&gt;&gt; Dict1\n{'Forget It': ['Avenger', 'Movie B']}\n&gt;&gt;&gt; Dict2\n{'No Rating': ['Hobbit', 'Movie C', 'Movie G']}\n</code></pre>\n\n<p>As mentioned by others, if you want to put it in a function you should add it to the <code>globals()</code>:</p>\n\n<pre><code>&gt;&gt;&gt; glb = globals()\n&gt;&gt;&gt; for key,val in DictionaryA.iteritems():\n        glb[\"Dict\" + str(i)] = {key:val}\n        i += 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 268945,
                        "reputation": 1566,
                        "user_id": 558008,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/s5Mir.jpg?s=256",
                        "display_name": "\u30b8\u30e7\u30fc\u30b8",
                        "link": "https://stackoverflow.com/users/558008/%e3%82%b8%e3%83%a7%e3%83%bc%e3%82%b8"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1379500725,
                    "last_edit_date": 1495540039,
                    "creation_date": 1379500172,
                    "answer_id": 18869822,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>(Just a quick note for others googlin')</p>\n\n<p>Ok, so modifying <code>locals()</code> <a href=\"https://stackoverflow.com/a/8028772/558008\">is not the way to go</a> ( while modifying <code>globals()</code> <a href=\"http://docs.python.org/2/library/functions.html#globals\" rel=\"noreferrer\">is supposed to work</a>). In the meantime, <code>exec</code> <em>could be</em>, but it's painfully slow, so, as with regular expressions, we may want to <code>compile()</code> it first:</p>\n\n<pre><code># var0 = 0; var1 = 1; var2 = 2\ncode_text = '\\n'.join( \"var%d = %d\" % (n, n) for n in xrange(3) )\n\nfilename = ''\ncode_chunk = compile( code_text, filename, 'exec' )\n\n# now later we can use exec:\nexec code_chunk # executes in the current context\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 68297,
                        "reputation": 163,
                        "user_id": 199343,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/abdad50a407608988648e8606d3b189a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Redsplinter",
                        "link": "https://stackoverflow.com/users/199343/redsplinter"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1350098356,
                    "creation_date": 1350098356,
                    "answer_id": 12869630,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've spent the last... couple hours, I guess, trying to hack around the lack of function closures, and I came up with this, which might help:</p>\n\n<pre><code>common_data = ...stuff...\ndef process(record):\n    ...logic...\n\ndef op():\n    for fing in op.func_dict: # Key line number 1\n        exec(fing + \" = op.func_dict[fing]\") # Key line number 2\n\n    while common_data.still_recieving:\n        with common_data._lock:\n            if common_data.record_available:\n                process(common_data.oldest_record)\n        time.sleep(1.0)\n\nop.func_dict.update(locals()) # Key line number 3\nthreading.Thread(target = op).start()\n\n...\n</code></pre>\n\n<p>It's a pretty heavy handed / contrived example, but if there are a lot of locals or you're still in the process of prototyping this pattern becomes useful.  Mostly I was just bitter about all the data stores being replicated or moved in order to handle callback delegates, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1321631133,
                    "last_edit_date": 1321631133,
                    "creation_date": 1320599533,
                    "answer_id": 8028785,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Others have suggested assigning to <code>locals()</code>. This won't work inside a function, where locals are accessed using the <code>LOAD_FAST</code> opcode, <em>unless</em> you have an <code>exec</code> statement somewhere in the function. To support this statement, which could create new variables that are not known at compile time, Python is then forced to access local variables by name within the function, so writing to <code>locals()</code> works. The <code>exec</code> can be out of the code path that is executed.</p>\n\n<pre><code>def func(varname):\n    locals()[varname] = 42\n    return answer           # only works if we passed in \"answer\" for varname\n    exec \"\"                 # never executed\n\nfunc(\"answer\")\n&gt;&gt;&gt; 42\n</code></pre>\n\n<p>Note: This only works in Python 2.x. They did away with this foolishness in Python 3, and other implementations (Jython, IronPython, etc.) may not support it either.</p>\n\n<p>This is a bad idea, though. How will you access the variables if you don't know their name? By <code>locals()[xxx]</code> probably. So why not just use your own dictionary rather than polluting <code>locals()</code> (and taking the chance of overwriting a variable your function actually needs)?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1011299,
                        "reputation": 27193,
                        "user_id": 1023815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b8fc2bd5d624ab2d5f54c145ae3d04f2?s=256&d=identicon&r=PG",
                        "display_name": "Adam Zalcman",
                        "link": "https://stackoverflow.com/users/1023815/adam-zalcman"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1320606659,
                    "creation_date": 1320606659,
                    "answer_id": 8029645,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use a local dictionary and put all the dynamic bindings as items into the dictionary. Then knowing the name of such a \"dynamic variable\" you can use the name as the key to get its value.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 75311,
                        "reputation": 386324,
                        "user_id": 216074,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=256&d=identicon&r=PG",
                        "display_name": "poke",
                        "link": "https://stackoverflow.com/users/216074/poke"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1320604029,
                    "last_edit_date": 1320604029,
                    "creation_date": 1320599177,
                    "answer_id": 8028728,
                    "question_id": 8028708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><s>You could modify <code>locals()</code> directly:</p>\n\n<pre><code>locals()['foo'] = 'bar'\n</code></pre>\n\n<p></s>\nBut a better way would be to have some dict that holds all your dynamic variable names as dictionary keys:</p>\n\n<pre><code>d = {}\nfor some in thing:\n    d[some] = 'whatever'\n</code></pre>\n"
                }
            ]
        },
        {
            "5620263": [
                {
                    "owner": {
                        "account_id": 3172839,
                        "reputation": 217,
                        "user_id": 2681376,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/iklEe.jpg?s=256",
                        "display_name": "ashoka.devanampriya",
                        "link": "https://stackoverflow.com/users/2681376/ashoka-devanampriya"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1583247915,
                    "last_edit_date": 1583247915,
                    "creation_date": 1415612293,
                    "answer_id": 26840657,
                    "question_id": 5620263,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I encountered this on jython client.\nThe server was only talking TLS and the client using SSL context. </p>\n\n<p><code>javax.net.ssl.SSLContext.getInstance(\"SSL\")</code> </p>\n\n<p>Once the client was to TLS, things started working.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 343015,
                        "reputation": 9451,
                        "user_id": 674475,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/dbeaf2e209fd47052bb35654156ad2bf?s=256&d=identicon&r=PG",
                        "display_name": "Fenikso",
                        "link": "https://stackoverflow.com/users/674475/fenikso"
                    },
                    "is_accepted": true,
                    "score": 73,
                    "last_activity_date": 1390996224,
                    "last_edit_date": 1390996224,
                    "creation_date": 1302521201,
                    "answer_id": 5620590,
                    "question_id": 5620263,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do it even without the HTTP_PROXY environment variable. Try this sample:</p>\n\n<pre><code>import urllib2\n\nproxy_support = urllib2.ProxyHandler({\"http\":\"http://61.233.25.166:80\"})\nopener = urllib2.build_opener(proxy_support)\nurllib2.install_opener(opener)\n\nhtml = urllib2.urlopen(\"http://www.google.com\").read()\nprint html\n</code></pre>\n\n<p>In your case it really seems that the proxy server is refusing the connection.</p>\n\n<hr>\n\n<p>Something more to try:</p>\n\n<pre><code>import urllib2\n\n#proxy = \"61.233.25.166:80\"\nproxy = \"YOUR_PROXY_GOES_HERE\"\n\nproxies = {\"http\":\"http://%s\" % proxy}\nurl = \"http://www.google.com/search?q=test\"\nheaders={'User-agent' : 'Mozilla/5.0'}\n\nproxy_support = urllib2.ProxyHandler(proxies)\nopener = urllib2.build_opener(proxy_support, urllib2.HTTPHandler(debuglevel=1))\nurllib2.install_opener(opener)\n\nreq = urllib2.Request(url, None, headers)\nhtml = urllib2.urlopen(req).read()\nprint html\n</code></pre>\n\n<hr>\n\n<p><strong>Edit 2014:</strong>\nThis seems to be a popular question / answer. However today I would use third party <a href=\"https://pypi.python.org/pypi/requests\" rel=\"noreferrer\"><code>requests</code></a> module instead.</p>\n\n<p>For one request just do:</p>\n\n<pre><code>import requests\n\nr = requests.get(\"http://www.google.com\", \n                 proxies={\"http\": \"http://61.233.25.166:80\"})\nprint(r.text)\n</code></pre>\n\n<p>For multiple requests use <code>Session</code> object so you do not have to add <code>proxies</code> parameter in all your requests:</p>\n\n<pre><code>import requests\n\ns = requests.Session()\ns.proxies = {\"http\": \"http://61.233.25.166:80\"}\n\nr = s.get(\"http://www.google.com\")\nprint(r.text)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2161934,
                        "reputation": 4735,
                        "user_id": 1915920,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/6be77f4bfa373c33055ada8f3414ae09?s=256&d=identicon&r=PG",
                        "display_name": "Andreas Covidiot",
                        "link": "https://stackoverflow.com/users/1915920/andreas-covidiot"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1385371428,
                    "creation_date": 1385371428,
                    "answer_id": 20188479,
                    "question_id": 5620263,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just wanted to mention, that you also may have to set the <strong><code>https_proxy</code></strong> OS environment variable in case https URLs need to be accessed.\nIn my case it was not obvious to me and I tried for hours to discover this.</p>\n\n<p>My use case: Win 7, jython-standalone-2.5.3.jar, setuptools installation via ez_setup.py</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1843671,
                        "reputation": 12224,
                        "user_id": 2441026,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://www.gravatar.com/avatar/460589db7e2073ceeffefff79bafa068?s=256&d=identicon&r=PG",
                        "display_name": "user136036",
                        "link": "https://stackoverflow.com/users/2441026/user136036"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1372254864,
                    "creation_date": 1372254864,
                    "answer_id": 17322054,
                    "question_id": 5620263,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python 3:</p>\n\n<pre><code>import urllib.request\n\nhtmlsource = urllib.request.FancyURLopener({\"http\":\"http://127.0.0.1:8080\"}).open(url).read().decode(\"utf-8\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1083076,
                        "reputation": 351,
                        "user_id": 1079511,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3dd5fa9d6f574a9c5d2ae05a548a56a1?s=256&d=identicon&r=PG",
                        "display_name": "abeusher",
                        "link": "https://stackoverflow.com/users/1079511/abeusher"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1322953716,
                    "creation_date": 1322953716,
                    "answer_id": 8371785,
                    "question_id": 5620263,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I recommend you just use the requests module.  </p>\n\n<p>It is much easier than the built in http clients:\n<a href=\"http://docs.python-requests.org/en/latest/index.html\">http://docs.python-requests.org/en/latest/index.html</a></p>\n\n<p>Sample usage:</p>\n\n<pre><code>r = requests.get('http://www.thepage.com', proxies={\"http\":\"http://myproxy:3129\"})\nthedata = r.content\n</code></pre>\n"
                }
            ]
        },
        {
            "10035752": [
                {
                    "owner": {
                        "account_id": 451584,
                        "reputation": 10214,
                        "user_id": 847552,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc674fd2cf824532531bd2b193bdc920?s=256&d=identicon&r=PG",
                        "display_name": "skovorodkin",
                        "link": "https://stackoverflow.com/users/847552/skovorodkin"
                    },
                    "is_accepted": false,
                    "score": 91,
                    "last_activity_date": 1684872879,
                    "last_edit_date": 1684872879,
                    "creation_date": 1495829155,
                    "answer_id": 44209393,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A smaller and faster than Nolen's function:</p>\n<pre><code>def partitions(n, I=1):\n    yield (n,)\n    for i in range(I, n//2 + 1):\n        for p in partitions(n-i, i):\n            yield (i,) + p\n</code></pre>\n<p>Let's compare them:</p>\n<pre><code>In [10]: %timeit -n 10 r0 = nolen(20)\n1.37 s \u00b1 28.7 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\nIn [11]: %timeit -n 10 r1 = list(partitions(20))\n979 \u00b5s \u00b1 82.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\nIn [13]: sorted(map(sorted, r0)) == sorted(map(sorted, r1))\nOut[14]: True\n</code></pre>\n<p>Looks like it's 1370 times faster for <code>n = 20</code>.</p>\n<p>Anyway, it's still far from <a href=\"http://jeromekelleher.net/generating-integer-partitions.html\" rel=\"noreferrer\"><code>accel_asc</code></a>:</p>\n<pre><code>def accel_asc(n):\n    a = [0 for i in range(n + 1)]\n    k = 1\n    y = n - 1\n    while k != 0:\n        x = a[k - 1] + 1\n        k -= 1\n        while 2 * x &lt;= y:\n            a[k] = x\n            y -= x\n            k += 1\n        l = k + 1\n        while x &lt;= y:\n            a[k] = x\n            a[l] = y\n            yield a[:k + 2]\n            x += 1\n            y -= 1\n        a[k] = x + y\n        y = x + y - 1\n        yield a[:k + 1]\n</code></pre>\n<p>Mine is not only slower, but requires much more memory (but apparently is much easier to remember):</p>\n<pre><code>In [18]: %timeit -n 5 r2 = list(accel_asc(50))\n114 ms \u00b1 1.04 ms per loop (mean \u00b1 std. dev. of 7 runs, 5 loops each)\n\nIn [19]: %timeit -n 5 r3 = list(partitions(50))\n527 ms \u00b1 8.86 ms per loop (mean \u00b1 std. dev. of 7 runs, 5 loops each)\n\nIn [24]: sorted(map(sorted, r2)) == sorted(map(sorted, r3))\nOut[24]: True\n</code></pre>\n<hr />\n<p>You can find other versions on ActiveState: <a href=\"http://code.activestate.com/recipes/218332-generator-for-integer-partitions/\" rel=\"noreferrer\">Generator For Integer Partitions (Python Recipe)</a>.</p>\n<hr />\n<p>I use Python 3.6.1 and IPython 6.0.0.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1210350,
                        "reputation": 18603,
                        "user_id": 1179026,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/abke2.jpg?s=256",
                        "display_name": "Nolen Royalty",
                        "link": "https://stackoverflow.com/users/1179026/nolen-royalty"
                    },
                    "is_accepted": true,
                    "score": 47,
                    "last_activity_date": 1654079536,
                    "last_edit_date": 1654079536,
                    "creation_date": 1333664172,
                    "answer_id": 10036764,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>While this answer is fine, I'd recommend skovorodkin's answer.</strong></p>\n<pre><code>&gt;&gt;&gt; def partition(number):\n...     answer = set()\n...     answer.add((number, ))\n...     for x in range(1, number):\n...         for y in partition(number - x):\n...             answer.add(tuple(sorted((x, ) + y)))\n...     return answer\n... \n&gt;&gt;&gt; partition(4)\nset([(1, 3), (2, 2), (1, 1, 2), (1, 1, 1, 1), (4,)])\n</code></pre>\n<p>If you want all permutations(ie (1, 3) and (3, 1)) change <code>answer.add(tuple(sorted((x, ) + y))</code> to <code>answer.add((x, ) + y)</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 144356,
                        "reputation": 58432,
                        "user_id": 353337,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/500a1e2e864ae08f386afde2cd21add0?s=256&d=identicon&r=PG",
                        "display_name": "Nico Schl&#246;mer",
                        "link": "https://stackoverflow.com/users/353337/nico-schl%c3%b6mer"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1602664597,
                    "last_edit_date": 1602664597,
                    "creation_date": 1501153825,
                    "answer_id": 45349125,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I needed to solve a <em>similar</em> problem, namely the partition of an integer <code>n</code> into <code>d</code> nonnegative parts, with permutations. For this, there's a simple recursive solution (see <a href=\"https://stackoverflow.com/a/45348441/353337\">here</a>):</p>\n\n<pre><code>def partition(n, d, depth=0):\n    if d == depth:\n        return [[]]\n    return [\n        item + [i]\n        for i in range(n+1)\n        for item in partition(n-i, d, depth=depth+1)\n        ]\n\n\n# extend with n-sum(entries)\nn = 5\nd = 3\nlst = [[n-sum(p)] + p for p in partition(n, d-1)]\n\nprint(lst)\n</code></pre>\n<p>Output:</p>\n<pre><code>[\n    [5, 0, 0], [4, 1, 0], [3, 2, 0], [2, 3, 0], [1, 4, 0],\n    [0, 5, 0], [4, 0, 1], [3, 1, 1], [2, 2, 1], [1, 3, 1],\n    [0, 4, 1], [3, 0, 2], [2, 1, 2], [1, 2, 2], [0, 3, 2],\n    [2, 0, 3], [1, 1, 3], [0, 2, 3], [1, 0, 4], [0, 1, 4],\n    [0, 0, 5]\n]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 144356,
                        "reputation": 58432,
                        "user_id": 353337,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/500a1e2e864ae08f386afde2cd21add0?s=256&d=identicon&r=PG",
                        "display_name": "Nico Schl&#246;mer",
                        "link": "https://stackoverflow.com/users/353337/nico-schl%c3%b6mer"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1589741805,
                    "last_edit_date": 1589741805,
                    "creation_date": 1501089305,
                    "answer_id": 45333489,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've compared the solution with <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\"><code>perfplot</code></a> (a little project of mine for such purposes) and found that Nolen's top-voted answer is also the slowest.</p>\n\n<p>Both answers supplied by <a href=\"https://stackoverflow.com/a/44209393/27678\">skovorodkin</a> are <em>much</em> faster. (Note the log-scale.)</p>\n\n<p><a href=\"https://i.sstatic.net/BOO6K.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/BOO6K.png\" alt=\"enter image description here\"></a></p>\n\n<hr>\n\n<p>To to generate the plot:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import perfplot\nimport collections\n\n\ndef nolen(number):\n    answer = set()\n    answer.add((number,))\n    for x in range(1, number):\n        for y in nolen(number - x):\n            answer.add(tuple(sorted((x,) + y)))\n    return answer\n\n\ndef skovorodkin(n):\n    return set(skovorodkin_yield(n))\n\n\ndef skovorodkin_yield(n, I=1):\n    yield (n,)\n    for i in range(I, n // 2 + 1):\n        for p in skovorodkin_yield(n - i, i):\n            yield (i,) + p\n\n\ndef accel_asc(n):\n    return set(accel_asc_yield(n))\n\n\ndef accel_asc_yield(n):\n    a = [0 for i in range(n + 1)]\n    k = 1\n    y = n - 1\n    while k != 0:\n        x = a[k - 1] + 1\n        k -= 1\n        while 2 * x &lt;= y:\n            a[k] = x\n            y -= x\n            k += 1\n        l = k + 1\n        while x &lt;= y:\n            a[k] = x\n            a[l] = y\n            yield tuple(a[: k + 2])\n            x += 1\n            y -= 1\n        a[k] = x + y\n        y = x + y - 1\n        yield tuple(a[: k + 1])\n\n\ndef mct(n):\n    partitions_of = []\n    partitions_of.append([()])\n    partitions_of.append([(1,)])\n    for num in range(2, n + 1):\n        ptitions = set()\n        for i in range(num):\n            for partition in partitions_of[i]:\n                ptitions.add(tuple(sorted((num - i,) + partition)))\n        partitions_of.append(list(ptitions))\n    return partitions_of[n]\n\n\nperfplot.show(\n    setup=lambda n: n,\n    kernels=[nolen, mct, skovorodkin, accel_asc],\n    n_range=range(1, 17),\n    logy=True,\n    # https://stackoverflow.com/a/7829388/353337\n    equality_check=lambda a, b: collections.Counter(set(a))\n    == collections.Counter(set(b)),\n    xlabel=\"n\",\n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1095493,
                        "reputation": 18799,
                        "user_id": 1089161,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61e106a28e171b4407171702b182759f?s=256&d=identicon&r=PG",
                        "display_name": "smichr",
                        "link": "https://stackoverflow.com/users/1089161/smichr"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1574378237,
                    "last_edit_date": 1574378237,
                    "creation_date": 1461865631,
                    "answer_id": 36921965,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think the recipe <a href=\"https://code.activestate.com/recipes/218332-generator-for-integer-partitions/?c=16490#c9\" rel=\"nofollow noreferrer\">here</a> may qualify as being elegant. It's lean (20 lines long), fast and based upon Kelleher and O'Sullivan's work which is referenced therein:</p>\n\n<pre><code>def aP(n):\n    \"\"\"Generate partitions of n as ordered lists in ascending\n    lexicographical order.\n\n    This highly efficient routine is based on the delightful\n    work of Kelleher and O'Sullivan.\n\n    Examples\n    ========\n\n    &gt;&gt;&gt; for i in aP(6): i\n    ...\n    [1, 1, 1, 1, 1, 1]\n    [1, 1, 1, 1, 2]\n    [1, 1, 1, 3]\n    [1, 1, 2, 2]\n    [1, 1, 4]\n    [1, 2, 3]\n    [1, 5]\n    [2, 2, 2]\n    [2, 4]\n    [3, 3]\n    [6]\n\n    &gt;&gt;&gt; for i in aP(0): i\n    ...\n    []\n\n    References\n    ==========\n\n    .. [1] Generating Integer Partitions, [online],\n        Available: http://jeromekelleher.net/generating-integer-partitions.html\n    .. [2] Jerome Kelleher and Barry O'Sullivan, \"Generating All\n        Partitions: A Comparison Of Two Encodings\", [online],\n        Available: http://arxiv.org/pdf/0909.2331v2.pdf\n\n    \"\"\"\n    # The list `a`'s leading elements contain the partition in which\n    # y is the biggest element and x is either the same as y or the\n    # 2nd largest element; v and w are adjacent element indices\n    # to which x and y are being assigned, respectively.\n    a = [1]*n\n    y = -1\n    v = n\n    while v &gt; 0:\n        v -= 1\n        x = a[v] + 1\n        while y &gt;= 2 * x:\n            a[v] = x\n            y -= x\n            v += 1\n        w = v + 1\n        while x &lt;= y:\n            a[v] = x\n            a[w] = y\n            yield a[:w + 1]\n            x += 1\n            y -= 1\n        a[v] = x + y\n        y = a[v] - 1\n        yield a[:w]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5822328,
                        "reputation": 41,
                        "user_id": 4589970,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/49e190f043a1efe4c01a329a4dafb032?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nicolas Blanc",
                        "link": "https://stackoverflow.com/users/4589970/nicolas-blanc"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1560006127,
                    "last_edit_date": 1560006127,
                    "creation_date": 1559824651,
                    "answer_id": 56477760,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is a recursive function, which uses a stack in which we store the numbers of the partitions in increasing order.\nIt is fast enough and very intuitive.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code># get the partitions of an integer\n\nStack = []\ndef Partitions(remainder, start_number = 1):\n    if remainder == 0:\n        print(\" + \".join(Stack))\n    else:\n        for nb_to_add in range(start_number, remainder+1):\n            Stack.append(str(nb_to_add))\n            Partitions(remainder - nb_to_add, nb_to_add)\n            Stack.pop()\n</code></pre>\n\n<p>When the stack is full (the sum of the elements of the stack then corresponds to the number we want the partitions), we print it,\nremove its last value and test the next possible value to be stored in the stack. When all the next values have been tested, we pop the last value of the stack again and we go back to the last calling function.\nHere is an example of the output (with 8):</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>Partitions(8)\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n1 + 1 + 1 + 1 + 1 + 1 + 2\n1 + 1 + 1 + 1 + 1 + 3\n1 + 1 + 1 + 1 + 2 + 2\n1 + 1 + 1 + 1 + 4\n1 + 1 + 1 + 2 + 3\n1 + 1 + 1 + 5\n1 + 1 + 2 + 2 + 2\n1 + 1 + 2 + 4\n1 + 1 + 3 + 3\n1 + 1 + 6\n1 + 2 + 2 + 3\n1 + 2 + 5\n1 + 3 + 4\n1 + 7\n2 + 2 + 2 + 2\n2 + 2 + 4\n2 + 3 + 3\n2 + 6\n3 + 5\n4 + 4\n8\n</code></pre>\n\n<p>The structure of the recursive function is easy to understand and is illustrated below (for the integer 31):</p>\n\n<p><img src=\"https://latex.codecogs.com/gif.latex?$$Stack=[%5Coverset%7B%5Ctext%7Bgiven&space;by&space;Partitions(31,1)%7D%7D%7B%5Coverbrace%7B1,1,3,5,%5Cunderset%7B%5Ctext%7Bgiven&space;by&space;Partitions(21,5)%7D%7D%7B%5Cunderbrace%7B5,7,9%7D%7D%7D%7D]$$\" title=\"$$Pile=[\\overset{\\text{given by Partitions(31,1)}}{\\overbrace{1,1,3,5,\\underset{\\text{given by Partitions(21,5)}}{\\underbrace{5,7,9}}}}]$$\" /></p>\n\n<p><code>remainder</code> corresponds to the value of the remaining number we want a partition (31 and 21 in the example above).\n<code>start_number</code> corresponds to the first number of the partition, its default value is one (1 and 5 in the example above).</p>\n\n<p>If we wanted to return the result in a list and get the number of partitions, we could do this:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def Partitions2_main(nb):\n    global counter, PartitionList, Stack\n    counter, PartitionList, Stack = 0, [], []\n    Partitions2(nb)\n    return PartitionList, counter\n\ndef Partitions2(remainder, start_number = 1):\n    global counter, PartitionList, Stack\n    if remainder == 0:\n        PartitionList.append(list(Stack))\n        counter += 1\n    else:\n        for nb_to_add in range(start_number, remainder+1):\n            Stack.append(nb_to_add)\n            Partitions2(remainder - nb_to_add, nb_to_add)\n            Stack.pop()\n</code></pre>\n\n<p>Last, a big advantage of the function <code>Partitions</code> shown above is that it adapts very easily to find all the compositions of a natural number (two compositions can have the same set of numbers, but the order differs in this case):\nwe just have to drop the variable <code>start_number</code> and set it to 1 in the <code>for</code> loop.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code># get the compositions of an integer\n\nStack = []\ndef Compositions(remainder):\n    if remainder == 0:\n        print(\" + \".join(Stack))\n    else:\n        for nb_to_add in range(1, remainder+1):\n            Stack.append(str(nb_to_add))\n            Compositions(remainder - nb_to_add)\n            Stack.pop()\n</code></pre>\n\n<p>Example of output:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>Compositions(4)\n1 + 1 + 1 + 1\n1 + 1 + 2\n1 + 2 + 1\n1 + 3\n2 + 1 + 1\n2 + 2\n3 + 1\n4\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2404331,
                        "reputation": 508,
                        "user_id": 2101245,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4e004b72bb722450f7a58615b5fb62f7?s=256&d=identicon&r=PG",
                        "display_name": "David Vanderschel",
                        "link": "https://stackoverflow.com/users/2101245/david-vanderschel"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1513450458,
                    "creation_date": 1513450458,
                    "answer_id": 47848961,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm a bit late to the game, but I can offer a contribution which might qualify as more elegant in a few senses:</p>\n\n<pre><code>def partitions(n, m = None):\n  \"\"\"Partition n with a maximum part size of m. Yield non-increasing\n  lists in decreasing lexicographic order. The default for m is\n  effectively n, so the second argument is not needed to create the\n  generator unless you do want to limit part sizes.\n  \"\"\"\n  if m is None or m &gt;= n: yield [n]\n  for f in range(n-1 if (m is None or m &gt;= n) else m, 0, -1):\n    for p in partitions(n-f, f): yield [f] + p\n</code></pre>\n\n<p>Only 3 lines of code.  Yields them in lexicographic order.  Optionally allows imposition of a maximum part size.</p>\n\n<p>I also have a variation on the above for partitions with a given number of parts:</p>\n\n<pre><code>def sized_partitions(n, k, m = None):\n  \"\"\"Partition n into k parts with a max part of m.\n  Yield non-increasing lists.  m not needed to create generator.\n  \"\"\"\n  if k == 1:\n    yield [n]\n    return\n  for f in range(n-k+1 if (m is None or m &gt; n-k+1) else m, (n-1)//k, -1): \n    for p in sized_partitions(n-f, k-1, f): yield [f] + p\n</code></pre>\n\n<p>After composing the above, I ran across a solution I had created almost 5 years ago, but which I had forgotten about.  Besides a maximum part size, this one offers the additional feature that you can impose a maximum length (as opposed to a specific length).  FWIW:</p>\n\n<pre><code>def partitions(sum, max_val=100000, max_len=100000):\n    \"\"\" generator of partitions of sum with limits on values and length \"\"\"\n    # Yields lists in decreasing lexicographical order. \n    # To get any length, omit 3rd arg.\n    # To get all partitions, omit 2nd and 3rd args. \n\n    if sum &lt;= max_val:       # Can start with a singleton.\n        yield [sum]\n\n    # Must have first*max_len &gt;= sum; i.e. first &gt;= sum/max_len.\n    for first in range(min(sum-1, max_val), max(0, (sum-1)//max_len), -1):\n        for p in partitions(sum-first, first, max_len-1):\n            yield [first]+p\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 332332,
                        "reputation": 149,
                        "user_id": 657568,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ee6639a1fd8081b6a1562a44627dfb74?s=256&d=identicon&r=PG",
                        "display_name": "SleX",
                        "link": "https://stackoverflow.com/users/657568/slex"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1495733193,
                    "creation_date": 1495733193,
                    "answer_id": 44186381,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code># -*- coding: utf-8 -*-\nimport timeit\n\nncache = 0\ncache = {}\n\n\ndef partition(number):\n    global cache, ncache\n    answer = {(number,), }\n    if number in cache:\n        ncache += 1\n        return cache[number]\n    if number == 1:\n        cache[number] = answer\n        return answer\n    for x in range(1, number):\n        for y in partition(number - x):\n            answer.add(tuple(sorted((x, ) + y)))\n    cache[number] = answer\n    return answer\n\n\nprint('To 5:')\nfor r in sorted(partition(5))[::-1]:\n    print('\\t' + ' + '.join(str(i) for i in r))\n\nprint(\n    'Time: {}\\nCache used:{}'.format(\n        timeit.timeit(\n            \"print('To 30: {} possibilities'.format(len(partition(30))))\",\n            setup=\"from __main__ import partition\",\n            number=1\n        ), ncache\n    )\n)\n</code></pre>\n\n<p>or <a href=\"https://gist.github.com/sxslex/dd15b13b28c40e695f1e227a200d1646\" rel=\"nofollow noreferrer\">https://gist.github.com/sxslex/dd15b13b28c40e695f1e227a200d1646</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3250247,
                        "reputation": 575,
                        "user_id": 4052278,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://i.sstatic.net/uxtux.jpg?s=256",
                        "display_name": "MT_",
                        "link": "https://stackoverflow.com/users/4052278/mt"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1466446598,
                    "creation_date": 1466446598,
                    "answer_id": 37929191,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Much quicker than the accepted response and not bad looking, either. The accepted response does lots of the same work multiple times because it calculates the partitions for lower integers multiple times. For example, when n=22 the difference is <strong>12.7 seconds against 0.0467 seconds</strong>.</p>\n\n<pre><code>def partitions_dp(n):\n    partitions_of = []\n    partitions_of.append([()])\n    partitions_of.append([(1,)])\n    for num in range(2, n+1):\n        ptitions = set()\n        for i in range(num):\n            for partition in partitions_of[i]:\n                ptitions.add(tuple(sorted((num - i, ) + partition)))\n        partitions_of.append(list(ptitions))\n    return partitions_of[n]\n</code></pre>\n\n<p>The code is essentially the same except we save the partitions of smaller integers so we don't have to calculate them again and again.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 412970,
                        "reputation": 7797,
                        "user_id": 786351,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/232239227b4b1c6c9c145d9ab6e6651f?s=256&d=identicon&r=PG",
                        "display_name": "ElKamina",
                        "link": "https://stackoverflow.com/users/786351/elkamina"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1333659799,
                    "creation_date": 1333659799,
                    "answer_id": 10035972,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>F(x,n) = \\union_(i&gt;=n) { {i}U g| g in F(x-i,i) }\n</code></pre>\n\n<p>Just implement this recursion. F(x,n) is the set of all sets that sum to x and their elements are greater than or equal to n.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1099744,
                        "reputation": 293,
                        "user_id": 1092441,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1b7eb09bc90fdb0ea66f6b248f04d512?s=256&d=identicon&r=PG",
                        "display_name": "Mitch Phillipson",
                        "link": "https://stackoverflow.com/users/1092441/mitch-phillipson"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1333659329,
                    "creation_date": 1333659329,
                    "answer_id": 10035883,
                    "question_id": 10035752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't know if my code is the most elegant, but I've had to solve this many times for research purposes. If you modify the  </p>\n\n<pre><code>sub_nums\n</code></pre>\n\n<p>variable you can restrict what numbers are used in the partition.</p>\n\n<pre><code>def make_partitions(number):\n    out = []\n    tmp = []\n    sub_nums = range(1,number+1)\n    for num in sub_nums:\n        if num&lt;=number:\n            tmp.append([num])\n        for elm in tmp:\n            sum_elm = sum(elm)\n            if sum_elm == number:\n                out.append(elm)\n            else:\n                for num in sub_nums:\n                    if sum_elm + num &lt;= number:\n                         L = [i for i in elm]\n                         L.append(num)\n                         tmp.append(L)\n    return out\n</code></pre>\n"
                }
            ]
        },
        {
            "8495655": [
                {
                    "owner": {
                        "account_id": 40959,
                        "reputation": 99109,
                        "user_id": 118903,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7094252405dd3dd5f798b132834d39b2?s=256&d=identicon&r=PG",
                        "display_name": "Vinay Sajip",
                        "link": "https://stackoverflow.com/users/118903/vinay-sajip"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1323815838,
                    "last_edit_date": 1323815838,
                    "creation_date": 1323808271,
                    "answer_id": 8495770,
                    "question_id": 8495655,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It looks as if you're using a build from source. It looks like you'll need to rebuild Python after installing the <code>libreadline-dev</code> or equivalent package on your distribution.</p>\n\n<p><strong>Update:</strong> There should be no special build steps needed, just running <code>make</code> should do. There are some messages printed at the end about optional modules which couldn't be built because of missing dependencies (in addition to <code>readline</code>, there are also <code>Tcl/Tk</code>, <code>zlib</code>, <code>gdbm</code> and <code>openssl</code> dependencies, for example).</p>\n\n<p>If for some reason just running <code>make</code> doesn't work, try running <code>configure</code> again first (if <code>make</code> doesn't already run it for you).</p>\n"
                }
            ]
        },
        {
            "5882405": [
                {
                    "owner": {
                        "account_id": 55145,
                        "reputation": 759,
                        "user_id": 165087,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cd0762ffce22a67e33faf4c90017bba1?s=256&d=identicon&r=PG",
                        "display_name": "gisle",
                        "link": "https://stackoverflow.com/users/165087/gisle"
                    },
                    "is_accepted": false,
                    "score": 75,
                    "last_activity_date": 1317989720,
                    "creation_date": 1317989720,
                    "answer_id": 7687085,
                    "question_id": 5882405,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>With the <a href=\"http://pypi.python.org/pypi/isoweek/\" rel=\"noreferrer\">isoweek module</a> you can do it with:</p>\n\n<pre><code>from isoweek import Week\nd = Week(2011, 40).monday()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 282179,
                        "reputation": 3565,
                        "user_id": 578907,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24c8dbeb88d776fe8ead5d80f2728233?s=256&d=identicon&r=PG",
                        "display_name": "Uwe Kleine-K&#246;nig",
                        "link": "https://stackoverflow.com/users/578907/uwe-kleine-k%c3%b6nig"
                    },
                    "is_accepted": true,
                    "score": 37,
                    "last_activity_date": 1304514994,
                    "creation_date": 1304514994,
                    "answer_id": 5884021,
                    "question_id": 5882405,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>%W takes the first Monday to be in week 1 but ISO defines week 1 to contain 4 January. So the result from</p>\n\n<pre><code>datetime.strptime('2011221', '%Y%W%w')\n</code></pre>\n\n<p>is off by one iff the first Monday and 4 January are in different weeks.\nThe latter is the case if 4 January is a Friday, Saturday or Sunday.\nSo the following should work:</p>\n\n<pre><code>from datetime import datetime, timedelta, date\ndef tofirstdayinisoweek(year, week):\n    ret = datetime.strptime('%04d-%02d-1' % (year, week), '%Y-%W-%w')\n    if date(year, 1, 4).isoweekday() &gt; 4:\n        ret -= timedelta(days=7)\n    return ret\n</code></pre>\n"
                }
            ]
        },
        {
            "7946798": [
                {
                    "owner": {
                        "account_id": 5361563,
                        "reputation": 4586,
                        "user_id": 4272651,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://graph.facebook.com/100000901707272/picture?type=large",
                        "display_name": "Prasanna",
                        "link": "https://stackoverflow.com/users/4272651/prasanna"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1639174408,
                    "creation_date": 1639174408,
                    "answer_id": 70310935,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is also a way to do it:</p>\n<pre><code>list1 = [1, 2, 3]\nlist2 = [10, 20, 30]\n\nlist(sum(zip(list1, list2), ()))\n</code></pre>\n<p>The idea is similar.</p>\n<ol>\n<li>zip the lists together. (using zip)</li>\n<li>flatten to a tuple (using sum(..., ())</li>\n<li>convert to a list</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 4974930,
                        "reputation": 61800,
                        "user_id": 4001592,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LvJCz.png?s=256",
                        "display_name": "Dani Mesejo",
                        "link": "https://stackoverflow.com/users/4001592/dani-mesejo"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1635000913,
                    "creation_date": 1635000913,
                    "answer_id": 69689292,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A funny approach is to use <a href=\"https://docs.python.org/3.8/library/heapq.html#heapq.merge\" rel=\"nofollow noreferrer\"><code>heapq.merge</code></a> with the position in the final list as key:</p>\n<pre><code>from heapq import merge\nfrom itertools import count\n\na = [1,2,3]\nb = [10,20,30]\n\ncounter = count()\nres = list(merge(a, b, key=lambda x: next(counter)))\nprint(res)\n</code></pre>\n<p><strong>Output</strong></p>\n<pre><code>[1, 10, 2, 20, 3, 30]\n</code></pre>\n<p>For multiple list, you can just unpack them:</p>\n<pre><code>from heapq import merge\nfrom itertools import count\n\na = [1, 2, 3]\nb = [10, 20, 30]\nc = [11, 21, 31]\n\ncounter = count()\nres = list(merge(*[a, b, c], key=lambda x: next(counter)))\nprint(res)\n</code></pre>\n<p><strong>Output</strong></p>\n<pre><code>[1, 10, 11, 2, 20, 21, 3, 30, 31]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1325153,
                        "reputation": 11331,
                        "user_id": 1270148,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/esf9c.png?s=256",
                        "display_name": "Sandy Chapman",
                        "link": "https://stackoverflow.com/users/1270148/sandy-chapman"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1602803741,
                    "last_edit_date": 1602803741,
                    "creation_date": 1428685378,
                    "answer_id": 29566946,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I needed a way to do this with lists of different sizes which the accepted answer doesn't address.</p>\n<p>My solution uses a generator and its usage looks a bit nicer because of it:</p>\n<pre><code>def interleave(l1, l2):\n    iter1 = iter(l1)\n    iter2 = iter(l2)\n    while True:\n        try:\n            if iter1 is not None:\n                yield next(iter1)\n        except StopIteration:\n            iter1 = None\n        try:\n            if iter2 is not None:\n                yield next(iter2)\n        except StopIteration:\n            iter2 = None\n        if iter1 is None and iter2 is None:\n            raise StopIteration()\n</code></pre>\n<p>And its usage:</p>\n<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n&gt;&gt;&gt; list(interleave(a, b))\n[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 'f', 'g']\n&gt;&gt;&gt; list(interleave(b, a))\n['a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5, 'f', 'g']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 173,
                    "last_activity_date": 1594503976,
                    "last_edit_date": 1594503976,
                    "creation_date": 1319998767,
                    "answer_id": 7946825,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Having posted the question, I've realised that I can simply do the following:</p>\n<pre><code>[val for pair in zip(l1, l2) for val in pair]\n</code></pre>\n<p>where <code>l1</code> and <code>l2</code> are the two lists.</p>\n<hr />\n<p>If there are N lists to interleave, then</p>\n<pre><code>lists = [l1, l2, ...]\n[val for tup in zip(*lists) for val in tup]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13857215,
                        "reputation": 4944,
                        "user_id": 10003710,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-8zTS-w1y-AA/AAAAAAAAAAI/AAAAAAAAN8c/dkHCDLhexh4/photo.jpg?sz=256",
                        "display_name": "Amit Yadav",
                        "link": "https://stackoverflow.com/users/10003710/amit-yadav"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1571038429,
                    "creation_date": 1571038429,
                    "answer_id": 58372023,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Too late to the party, and there is plenty of good answers but I would also like to provide a simple solution using <code>extend()</code> method:</p>\n\n<pre><code>list1 = [1, 2, 3]\nlist2 = [10, 20, 30]\n\nnew_list = []\nfor i in range(len(list1)):\n    new_list.extend([list1[i], list2[i]])\nprint(new_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[1, 10, 2, 20, 3, 30]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 72484,
                        "reputation": 5559,
                        "user_id": 209246,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/adb0e3938e80137f0599ac63ac1a56b4?s=256&d=identicon&r=PG",
                        "display_name": "eqzx",
                        "link": "https://stackoverflow.com/users/209246/eqzx"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1564689527,
                    "creation_date": 1564689527,
                    "answer_id": 57316210,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To answer the question's title of \"Interleave multiple lists of the same length in Python\", we can generalize the 2-list answer of @ekhumoro. This explicitly requires that the lists are the same length, unlike the (elegant) solution by @NPE</p>\n\n<pre><code>import itertools\n\ndef interleave(lists):\n    \"\"\"Interleave a list of lists.\n\n    :param lists: List of lists; each inner length must be the same length.\n    :returns: interleaved single list\n    :rtype: list\n\n    \"\"\"\n    if len(set(len(_) for _ in lists)) &gt; 1:\n        raise ValueError(\"Lists are not all the same length!\")\n    joint = list(itertools.chain(*lists))\n    for l_idx, li in enumerate(lists):\n        joint[l_idx::len(lists)] = li\n    return joint\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; interleave([[0,2,4], [1, 3, 5]])\n[0, 1, 2, 3, 4, 5]\n&gt;&gt;&gt; interleave([[0,2,4], [1, 3, 5], [10, 11, 12]])\n[0, 1, 10, 2, 3, 11, 4, 5, 12]\n&gt;&gt;&gt; interleave([[0,2,4], [1, 3, 5], [10, 11, 12], [13, 14, 15]])\n[0, 1, 10, 13, 2, 3, 11, 14, 4, 5, 12, 15]\n&gt;&gt;&gt; interleave([[0,2,4], [1, 3, 5], [10, 11, 12], [13, 14]])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 10, in interleave\nValueError: Lists are not all the same length!\n&gt;&gt;&gt; interleave([[0,2,4]])\n[0, 2, 4]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 959813,
                        "reputation": 120250,
                        "user_id": 984421,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/l9J30.png?s=256",
                        "display_name": "ekhumoro",
                        "link": "https://stackoverflow.com/users/984421/ekhumoro"
                    },
                    "is_accepted": false,
                    "score": 97,
                    "last_activity_date": 1554912301,
                    "last_edit_date": 1554912301,
                    "creation_date": 1320004971,
                    "answer_id": 7947461,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For Python>=2.3, there's <a href=\"http://docs.python.org/2.3/whatsnew/section-slices.html\" rel=\"noreferrer\">extended slice syntax</a>:</p>\n\n<pre><code>&gt;&gt;&gt; a = [0, 2, 4, 6, 8]\n&gt;&gt;&gt; b = [1, 3, 5, 7, 9]\n&gt;&gt;&gt; c = a + b\n&gt;&gt;&gt; c[::2] = a\n&gt;&gt;&gt; c[1::2] = b\n&gt;&gt;&gt; c\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n\n<p>The line <code>c = a + b</code> is used as a simple way to create a new list of exactly the right length (at this stage, its contents are not important). The next two lines do the actual work of interleaving <code>a</code> and <code>b</code>: the first one assigns the elements of <code>a</code> to all the even-numbered indexes of <code>c</code>; the second one assigns the elements of <code>b</code> to all the odd-numbered indexes of <code>c</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5737711,
                        "reputation": 44255,
                        "user_id": 4531270,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/uw3pm.png?s=256",
                        "display_name": "pylang",
                        "link": "https://stackoverflow.com/users/4531270/pylang"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1550641466,
                    "last_edit_date": 1550641466,
                    "creation_date": 1480812685,
                    "answer_id": 40954220,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Given</strong></p>\n\n<pre><code>a = [1, 2, 3]\nb = [10, 20, 30]\nc = [100, 200, 300, 999]\n</code></pre>\n\n<p><strong>Code</strong></p>\n\n<p>Assuming lists of equal length, you can get an interleaved list with <code>itertools.chain</code> and <code>zip</code>:</p>\n\n<pre><code>import itertools\n\n\nlist(itertools.chain(*zip(a, b)))\n# [1, 10, 2, 20, 3, 30]\n</code></pre>\n\n<hr>\n\n<p><strong>Alternatives</strong></p>\n\n<p><em><a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\" rel=\"noreferrer\"><code>itertools.zip_longest</code></a></em></p>\n\n<p>More generally with unequal lists, use <code>zip_longest</code> (recommended):</p>\n\n<pre><code>[x for x in itertools.chain(*itertools.zip_longest(a, c)) if x is not None]\n# [1, 100, 2, 200, 3, 300, 999]\n</code></pre>\n\n<p>Many lists can safely be interleaved:</p>\n\n<pre><code>[x for x in itertools.chain(*itertools.zip_longest(a, b, c)) if x is not None]\n# [1, 10, 100, 2, 20, 200, 3, 30, 300, 999]\n</code></pre>\n\n<p><em><a href=\"https://github.com/erikrose/more-itertools\" rel=\"noreferrer\"><code>more_itertools</code></a></em><sup>+</sup></p>\n\n<p>A library that ships with the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\"><code>roundrobin</code></a> itertools recipe, <a href=\"https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.interleave\" rel=\"noreferrer\"><code>interleave</code></a> and <a href=\"https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.interleave_longest\" rel=\"noreferrer\"><code>interleave_longest</code></a>.</p>\n\n<pre><code>import more_itertools\n\n\nlist(more_itertools.roundrobin(a, b))\n# [1, 10, 2, 20, 3, 30]\n\nlist(more_itertools.interleave(a, b))\n# [1, 10, 2, 20, 3, 30]\n\nlist(more_itertools.interleave_longest(a, c))\n# [1, 100, 2, 200, 3, 300, 999]\n</code></pre>\n\n<p><em><code>yield from</code></em></p>\n\n<p>Finally, for something interesting in Python 3 (though not recommended):</p>\n\n<pre><code>list(filter(None, ((yield from x) for x in zip(a, b))))\n# [1, 10, 2, 20, 3, 30]\n\nlist([(yield from x) for x in zip(a, b)])\n# [1, 10, 2, 20, 3, 30]\n</code></pre>\n\n<p><sub><sup>+</sup>Install using <code>pip install more_itertools</code></sub></p>\n"
                },
                {
                    "owner": {
                        "account_id": 219221,
                        "reputation": 16758,
                        "user_id": 475993,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/be4b172bdc9b13fdfd4545c90cdf9bb4?s=256&d=identicon&r=PG",
                        "display_name": "jon_darkstar",
                        "link": "https://stackoverflow.com/users/475993/jon-darkstar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1482278563,
                    "creation_date": 1482278563,
                    "answer_id": 41253166,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>[el for el in itertools.chain(*itertools.izip_longest([1,2,3], [4,5])) if el is not None]\n</code></pre>\n\n<p>As long as you don't have <code>None</code> that you want to keep</p>\n"
                },
                {
                    "owner": {
                        "account_id": 206161,
                        "reputation": 35462,
                        "user_id": 455276,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JtuFL.jpg?s=256",
                        "display_name": "the wolf",
                        "link": "https://stackoverflow.com/users/455276/the-wolf"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1320005574,
                    "last_edit_date": 1320005574,
                    "creation_date": 1320002426,
                    "answer_id": 7947190,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Alternative:</p>\n\n<pre><code>&gt;&gt;&gt; l1=[1,2,3]\n&gt;&gt;&gt; l2=[10,20,30]\n&gt;&gt;&gt; [y for x in map(None,l1,l2) for y in x if y is not None]\n[1, 10, 2, 20, 3, 30]\n</code></pre>\n\n<p>This works because <a href=\"http://docs.python.org/library/functions.html#map\" rel=\"noreferrer\">map</a> works on lists in parallel. It <a href=\"http://docs.python.org/release/2.2/lib/built-in-funcs.html\" rel=\"noreferrer\">works the same</a> under 2.2. By itself, with <code>None</code> as the called functions, <code>map</code> produces a list of tuples:</p>\n\n<pre><code>&gt;&gt;&gt; map(None,l1,l2,'abcd')\n[(1, 10, 'a'), (2, 20, 'b'), (3, 30, 'c'), (None, None, 'd')]\n</code></pre>\n\n<p>Then just flatten the list of tuples. </p>\n\n<p>The advantage, of course, is <code>map</code>  will work for any number of lists and will work even if they are different lengths:</p>\n\n<pre><code>&gt;&gt;&gt; l1=[1,2,3]\n&gt;&gt;&gt; l2=[10,20,30]\n&gt;&gt;&gt; l3=[101,102,103,104]\n&gt;&gt;&gt; [y for x in map(None,l1,l2,l3) for y in x if y in not None]\n[1, 10, 101, 2, 20, 102, 3, 30, 103, 104]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 316105,
                        "reputation": 17143,
                        "user_id": 632088,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://i.sstatic.net/EyfoY.jpg?s=256",
                        "display_name": "Rusty Rob",
                        "link": "https://stackoverflow.com/users/632088/rusty-rob"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1320002605,
                    "last_edit_date": 1320002605,
                    "creation_date": 1320002094,
                    "answer_id": 7947152,
                    "question_id": 7946798,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I like aix's solution best. here is another way I think should work in 2.2:</p>\n\n<pre><code>&gt;&gt;&gt; x=range(3)\n&gt;&gt;&gt; x\n[0, 1, 2]\n&gt;&gt;&gt; y=range(7,10)\n&gt;&gt;&gt; y\n[7, 8, 9]\n&gt;&gt;&gt; sum(zip(x,y),[])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate list (not \"tuple\") to list\n&gt;&gt;&gt; sum(map(list,zip(x,y)),[])\n[0, 7, 1, 8, 2, 9]\n</code></pre>\n\n<p>and one more way:</p>\n\n<pre><code>&gt;&gt;&gt; a=[x,y]\n&gt;&gt;&gt; [a[i][j] for j in range(3) for i in (0,1)]\n[0, 7, 1, 8, 2, 9]\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>&gt;&gt;&gt; sum((list(i) for i in zip(x,y)),[])\n[0, 7, 1, 8, 2, 9]\n</code></pre>\n"
                }
            ]
        },
        {
            "4235834": [
                {
                    "owner": {
                        "account_id": 242500,
                        "reputation": 1195,
                        "user_id": 514054,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://lh3.googleusercontent.com/-C-5EKkydV9M/AAAAAAAAAAI/AAAAAAAAAA4/dSSabBjqfnM/photo.jpg?sz=256",
                        "display_name": "digitalfoo",
                        "link": "https://stackoverflow.com/users/514054/digitalfoo"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1517247178,
                    "last_edit_date": 1517247178,
                    "creation_date": 1290302229,
                    "answer_id": 4235923,
                    "question_id": 4235834,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This sums it up better than I can say it: </p>\n\n<p><a href=\"http://docs.python.org/faq/windows.html\" rel=\"noreferrer\">http://docs.python.org/faq/windows.html</a></p>\n\n<p>More specifically, check out the 2nd section titled \"How do I make Python scripts executable?\"</p>\n\n<blockquote>\n  <p>On Windows, the standard Python installer already associates the <code>.py</code> extension with a file type (<code>Python.File</code>) and gives that file type an open command that runs the interpreter (<code>D:\\Program Files\\Python\\python.exe \"%1\" %*</code>). This is enough to make scripts executable from the command prompt as <code>foo.py</code>. If you\u2019d rather be able to execute the script by simple typing <code>foo</code> with no extension you need to add <code>.py</code> to the <code>PATHEXT</code> environment variable.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "47006268": [
                {
                    "owner": {
                        "account_id": 1963231,
                        "reputation": 4854,
                        "user_id": 1764129,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/1b80286d42707329e620ab2b2022f02c?s=256&d=identicon&r=PG",
                        "display_name": "p-robot",
                        "link": "https://stackoverflow.com/users/1764129/p-robot"
                    },
                    "is_accepted": true,
                    "score": 45,
                    "last_activity_date": 1509701031,
                    "last_edit_date": 1509701031,
                    "creation_date": 1509320410,
                    "answer_id": 47006391,
                    "question_id": 47006268,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As in the example you mentioned, call <code>plt.scatter</code> for each group:</p>\n\n<pre><code>import numpy as np\nfrom matplotlib import pyplot as plt\n\nscatter_x = np.array([1,2,3,4,5])\nscatter_y = np.array([5,4,3,2,1])\ngroup = np.array([1,3,2,1,3])\ncdict = {1: 'red', 2: 'blue', 3: 'green'}\n\nfig, ax = plt.subplots()\nfor g in np.unique(group):\n    ix = np.where(group == g)\n    ax.scatter(scatter_x[ix], scatter_y[ix], c = cdict[g], label = g, s = 100)\nax.legend()\nplt.show()\n</code></pre>\n\n<p><a href=\"https://i.sstatic.net/30qjq.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/30qjq.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10338398,
                        "reputation": 4797,
                        "user_id": 7625684,
                        "user_type": "registered",
                        "accept_rate": 19,
                        "profile_image": "https://i.sstatic.net/30f7r.png?s=256",
                        "display_name": "HISI",
                        "link": "https://stackoverflow.com/users/7625684/hisi"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1509321007,
                    "last_edit_date": 1509321007,
                    "creation_date": 1509320509,
                    "answer_id": 47006404,
                    "question_id": 47006268,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>check this out:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as  np\n\nfig, ax = plt.subplots()\nscatter_x = np.array([1,2,3,4,5])\nscatter_y = np.array([5,4,3,2,1])\ngroup = np.array([1,3,2,1,3])\nfor g in np.unique(group):\n    i = np.where(group == g)\n    ax.scatter(scatter_x[i], scatter_y[i], label=g)\nax.legend()\nplt.show()\n</code></pre>\n"
                }
            ]
        },
        {
            "28664383": [
                {
                    "owner": {
                        "account_id": 2456564,
                        "reputation": 180181,
                        "user_id": 2141635,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/f6yNV.jpg?s=256",
                        "display_name": "Padraic Cunningham",
                        "link": "https://stackoverflow.com/users/2141635/padraic-cunningham"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1424647550,
                    "last_edit_date": 1424647550,
                    "creation_date": 1424646088,
                    "answer_id": 28664414,
                    "question_id": 28664383,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can set <code>check_keys</code> to False according to the <a href=\"https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/collection.py\">source</a>:</p>\n\n<pre><code> test.insert(d,check_keys=False)\n\n\n def insert(self, doc_or_docs, manipulate=True,\n           safe=None, check_keys=True, continue_on_error=False, **kwargs):\n</code></pre>\n\n<p>It does indeed work:</p>\n\n<pre><code>In [28]: d = {'.aaa' : '.bbb'}\n\nIn [29]: test.insert(d,check_keys=False)\nOut[29]: ObjectId('54ea604bf9664e211e8ed4e6')\n</code></pre>\n\n<p>The docstring states:</p>\n\n<blockquote>\n  <ul>\n  <li><code>check_keys</code> (optional): If <code>True</code> check if keys start with '$'\n          or contain '.', raising :class:<code>~pymongo.errors.InvalidName</code> in either case.</li>\n  </ul>\n</blockquote>\n\n<p>You seem to be able to use any character apart from just the two  <code>$</code> or <code>.</code> so a leading underscore or any other character would be fine and probably a better option. </p>\n\n<p>There is info in the faq about <a href=\"http://docs.mongodb.org/manual/faq/developers/#faq-dollar-sign-escaping\">escaping </a>:</p>\n\n<blockquote>\n  <p>In some cases, you may wish to build a BSON object with a user-provided key. In these situations, keys will need to substitute the reserved $ and . characters. Any character is sufficient, but consider using the Unicode full width equivalents: U+FF04 (i.e. \u201c\uff04\u201d) and U+FF0E (i.e. \u201c\uff0e\u201d).</p>\n</blockquote>\n\n<p>And the dot-notation faq explains why using <code>.</code> is not a good idea:</p>\n\n<blockquote>\n  <p>MongoDB uses the dot notation to access the elements of an array and to access the fields of an embedded document.\n  To access an element of an array by the zero-based index position, concatenate the array name with the dot (.) and zero-based index position, and enclose in quotes:</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user559633"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1424646377,
                    "creation_date": 1424646377,
                    "answer_id": 28664471,
                    "question_id": 28664383,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can't use the '.aaa' as your key because Mongo uses the dot to refer to <a href=\"http://docs.mongodb.org/manual/core/document/#dot-notation\" rel=\"nofollow\">nested documents</a>.</p>\n\n<p>If you want to have the key look like a dot, you can use a unicode equivalent like <code>\\u002E</code>: </p>\n\n<pre><code>&gt;&gt;&gt; d = {'\\u002Eaaa' : '\\u002Ebbb'}    \n</code></pre>\n\n<p>However, I'd suggest your approach of just choosing another character and accepting it as a \"limitation\" of the platform.</p>\n"
                }
            ]
        },
        {
            "17777219": [
                {
                    "owner": {
                        "account_id": 2734060,
                        "reputation": 277765,
                        "user_id": 2357112,
                        "user_type": "registered",
                        "accept_rate": 26,
                        "profile_image": "https://www.gravatar.com/avatar/3f80897d57525afe9eac4fb8c8318052?s=256&d=identicon&r=PG",
                        "display_name": "user2357112",
                        "link": "https://stackoverflow.com/users/2357112/user2357112"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1374443128,
                    "creation_date": 1374443128,
                    "answer_id": 17777254,
                    "question_id": 17777219,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>zip</code> returns an iterator (in Python 3). You can only iterate over an iterator once. The iterator doesn't vanish when it's out of elements, but iterating over it again gives 0 elements. If you want a list, call <code>list</code> on it:</p>\n\n<pre><code>z = list(zip(t, t2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1303256,
                        "reputation": 141960,
                        "user_id": 1252759,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/aGFfT.jpg?s=256",
                        "display_name": "Jon Clements",
                        "link": "https://stackoverflow.com/users/1252759/jon-clements"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1374442963,
                    "creation_date": 1374442963,
                    "answer_id": 17777232,
                    "question_id": 17777219,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Because <code>zip</code> returns an iterator in Python 3.x. If you want to re-use it, then make it a <code>list</code> first:</p>\n\n<pre><code>z = list(zip(t, t2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1374442953,
                    "creation_date": 1374442953,
                    "answer_id": 17777230,
                    "question_id": 17777219,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's how it works in python 3.x.  In python2.x, <code>zip</code> returned a list of tuples, but for python3.x, <code>zip</code> behaves like <code>itertools.izip</code> behaved in python2.x.  To regain the python2.x behavior, just construct a list from <code>zip</code>'s output:</p>\n\n<pre><code>z = list(zip(t,t2))\n</code></pre>\n\n<p>Note that in python3.x, a lot of the builtin functions now return iterators rather than lists (<code>map</code>, <code>zip</code>, <code>filter</code>)</p>\n"
                }
            ]
        },
        {
            "12198468": [
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": true,
                    "score": 82,
                    "last_activity_date": 1687375852,
                    "last_edit_date": 1687375852,
                    "creation_date": 1346334772,
                    "answer_id": 12198497,
                    "question_id": 12198468,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could use a set:</p>\n<pre><code>b_set = set(map(tuple,a))  #need to convert the inner lists to tuples so they are hashable\nb = list(map(list,b_set)) #Now convert tuples back into lists (maybe unnecessary?)\n</code></pre>\n<p>Or, if you prefer list comprehensions/generators:</p>\n<pre><code>b_set = set(tuple(x) for x in a)\nb = [ list(x) for x in b_set ]\n</code></pre>\n<p>Finally, if order is important, you can always sort b:</p>\n<pre><code>b.sort(key = lambda x: a.index(x) )\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1706648,
                        "reputation": 2604,
                        "user_id": 1579380,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/df5d253cc9a17d724612c531e902efde?s=256&d=identicon&r=PG",
                        "display_name": "HerrKaputt",
                        "link": "https://stackoverflow.com/users/1579380/herrkaputt"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1346334892,
                    "creation_date": 1346334892,
                    "answer_id": 12198532,
                    "question_id": 12198468,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>See mgilson's answer if the order of the lists is not important. If you want to retain the order, do something like:</p>\n\n<pre><code>b = list()\nfor sublist in a:\n    if sublist not in b:\n        b.append(sublist)\n</code></pre>\n\n<p>This will keep the order in the original list. However, it is slower and more verbose than using sets.</p>\n"
                }
            ]
        },
        {
            "13779526": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1512569478,
                    "last_edit_date": 1512569478,
                    "creation_date": 1354985364,
                    "answer_id": 13779567,
                    "question_id": 13779526,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use a simple <code>for</code> loop:</p>\n\n<pre><code>seq = ['abc123', 'def456', 'ghi789']\nsub = 'abc'\n\nfor text in seq:\n    if sub in text:\n        print(text)\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>abc123\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1862928,
                        "reputation": 462,
                        "user_id": 1687125,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1c41bbec00cc95c792dfc9241610b153?s=256&d=identicon&r=PG",
                        "display_name": "oathead",
                        "link": "https://stackoverflow.com/users/1687125/oathead"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1478784088,
                    "last_edit_date": 1478784088,
                    "creation_date": 1354985791,
                    "answer_id": 13779631,
                    "question_id": 13779526,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd just use a simple regex, you can do something like this</p>\n\n<pre><code>import re\nold_list = ['abc123', 'def456', 'ghi789']\nnew_list = [x for x in old_list if re.search('abc', x)]\nfor item in new_list:\n    print item\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3347828,
                        "reputation": 3930,
                        "user_id": 2812618,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3c9e3497c26eab8811e1e36f1522fd79?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Frank Zalkow",
                        "link": "https://stackoverflow.com/users/2812618/frank-zalkow"
                    },
                    "is_accepted": false,
                    "score": 87,
                    "last_activity_date": 1476259849,
                    "last_edit_date": 1476259849,
                    "creation_date": 1431452024,
                    "answer_id": 30197797,
                    "question_id": 13779526,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>All the answers work but they always traverse the whole list. If I understand your question, you only need the first match. So you don't have to consider the rest of the list if you found your first match:</p>\n\n<pre><code>mylist = ['abc123', 'def456', 'ghi789']\nsub = 'abc'\nnext((s for s in mylist if sub in s), None) # returns 'abc123'\n</code></pre>\n\n<p>If the match is at the end of the list or for very small lists, it doesn't make a difference, but consider this example:</p>\n\n<pre><code>import timeit\n\nmylist = ['abc123'] + ['xyz123']*1000\nsub = 'abc'\n\ntimeit.timeit('[s for s in mylist if sub in s]', setup='from __main__ import mylist, sub', number=100000)\n# for me 7.949463844299316 with Python 2.7, 8.568840944994008 with Python 3.4\ntimeit.timeit('next((s for s in mylist if sub in s), None)', setup='from __main__ import mylist, sub', number=100000) \n# for me 0.12696599960327148 with Python 2.7, 0.09955992100003641 with Python 3.4\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 366823,
                        "reputation": 78480,
                        "user_id": 712603,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://i.sstatic.net/mCoc7.jpg?s=256",
                        "display_name": "David Robinson",
                        "link": "https://stackoverflow.com/users/712603/david-robinson"
                    },
                    "is_accepted": true,
                    "score": 197,
                    "last_activity_date": 1449513646,
                    "last_edit_date": 1449513646,
                    "creation_date": 1354985362,
                    "answer_id": 13779566,
                    "question_id": 13779526,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>print [s for s in list if sub in s]\n</code></pre>\n\n<p>If you want them separated by newlines:</p>\n\n<pre><code>print \"\\n\".join(s for s in list if sub in s)\n</code></pre>\n\n<p>Full example, with case insensitivity:</p>\n\n<pre><code>mylist = ['abc123', 'def456', 'ghi789', 'ABC987', 'aBc654']\nsub = 'abc'\n\nprint \"\\n\".join(s for s in mylist if sub.lower() in s.lower())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 398682,
                        "reputation": 32409,
                        "user_id": 763505,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/SJO15.png?s=256",
                        "display_name": "Hyperboreus",
                        "link": "https://stackoverflow.com/users/763505/hyperboreus"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1354985367,
                    "creation_date": 1354985367,
                    "answer_id": 13779568,
                    "question_id": 13779526,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This prints all elements that contain sub:</p>\n\n<pre><code>for s in filter (lambda x: sub in x, list): print (s)\n</code></pre>\n"
                }
            ]
        },
        {
            "28590669": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": true,
                    "score": 107,
                    "last_activity_date": 1424282783,
                    "creation_date": 1424282783,
                    "answer_id": 28590707,
                    "question_id": 28590669,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That code would have worked fine in Python 2.x, but it is no longer valid.  In Python 3.x, <code>tkFileDialog</code> was renamed to <code>filedialog</code> and placed inside the Tkinter package.  Nowadays, you import it like so:</p>\n\n<pre><code>import tkinter.filedialog\n# or\nfrom tkinter import filedialog\n</code></pre>\n"
                }
            ]
        },
        {
            "5218895": [
                {
                    "owner": {
                        "account_id": 230451,
                        "reputation": 34226,
                        "user_id": 494061,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/11724c49d0a1cd1fb8792cd3a6a2ba2a?s=256&d=identicon&r=PG",
                        "display_name": "Michael Hoffman",
                        "link": "https://stackoverflow.com/users/494061/michael-hoffman"
                    },
                    "is_accepted": false,
                    "score": 408,
                    "last_activity_date": 1648680648,
                    "last_edit_date": 1648680648,
                    "creation_date": 1321599257,
                    "answer_id": 8178808,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3, you can use the <a href=\"http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement\" rel=\"noreferrer\"><code>nonlocal</code> statement</a> to access non-local, non-global scopes.</p>\n<p>The <code>nonlocal</code> statement causes a variable definition to bind to a previously created variable in the nearest scope. Here are some examples to illustrate:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def sum_list_items(_list):\n    total = 0\n\n    def do_the_sum(_list):\n        for i in _list:\n            total += i\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\n</code></pre>\n<p>The above example will fail with the error: <code>UnboundLocalError: local variable 'total' referenced before assignment</code></p>\n<p>Using <code>nonlocal</code> we can get the code to work:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def sum_list_items(_list):\n    total = 0\n\n    def do_the_sum(_list):\n\n        # Define the total variable as non-local, causing it to bind\n        # to the nearest non-global variable also called total.\n        nonlocal total\n\n        for i in _list:\n            total += i\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\n</code></pre>\n<p>But what does &quot;nearest&quot; mean?  Here is another example:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def sum_list_items(_list):\n\n    total = 0\n\n    def do_the_sum(_list):\n\n        # The nonlocal total binds to this variable.\n        total = 0\n\n        def do_core_computations(_list):\n\n            # Define the total variable as non-local, causing it to bind\n            # to the nearest non-global variable also called total.\n            nonlocal total\n\n            for i in _list:\n                total += i\n\n        do_core_computations(_list)\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\n</code></pre>\n<p>In the above example, <code>total</code> will bind to the variable defined inside the <code>do_the_sum</code> function, and not the outer variable defined in the <code>sum_list_items</code> function, so the code will return <code>0</code>. Note that it is still possible to do double nesting such as this: if <code>total</code> is declared <code>nonlocal</code> in <code>do_the_sum</code> the above example would work as expected.</p>\n<pre class=\"lang-py prettyprint-override\"><code>def sum_list_items(_list):\n\n    # The nonlocal total binds to this variable.\n    total = 0\n\n    def do_the_sum(_list):\n\n        def do_core_computations(_list):\n\n            # Define the total variable as non-local, causing it to bind\n            # to the nearest non-global variable also called total.\n            nonlocal total\n\n            for i in _list:\n                total += i\n\n        do_core_computations(_list)\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\n</code></pre>\n<p>In the above example the nonlocal assignment traverses up two levels before it locates the <code>total</code> variable that is local to <code>sum_list_items</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10413123,
                        "reputation": 11,
                        "user_id": 7677982,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/11deecd7e03b88f8e02cb037445530f7?s=256&d=identicon&r=PG",
                        "display_name": "Edward Macnaghten",
                        "link": "https://stackoverflow.com/users/7677982/edward-macnaghten"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1488974930,
                    "last_edit_date": 1488974930,
                    "creation_date": 1488972781,
                    "answer_id": 42670215,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>My way around...</p>\n\n<pre><code>def outer():\n\nclass Cont(object):\n    var1 = None\n    @classmethod\n    def inner(cls, arg):\n        cls.var1 = arg\n\n\nCont.var1 = \"Before\"\nprint Cont.var1\nCont.inner(\"After\")\nprint Cont.var1\n\nouter()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 366195,
                        "reputation": 2487,
                        "user_id": 711585,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7b6398b1838444aa363e737b6b897ccb?s=256&d=identicon&r=PG",
                        "display_name": "moos",
                        "link": "https://stackoverflow.com/users/711585/moos"
                    },
                    "is_accepted": false,
                    "score": 198,
                    "last_activity_date": 1414646212,
                    "last_edit_date": 1414646212,
                    "creation_date": 1352318882,
                    "answer_id": 13277359,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's an illustration that gets to the essence of David's answer. </p>\n\n<pre><code>def outer():\n    a = 0\n    b = 1\n\n    def inner():\n        print a\n        print b\n        #b = 4\n\n    inner()\n\nouter()\n</code></pre>\n\n<p>With the statement <code>b = 4</code> commented out, this code outputs <code>0 1</code>, just what you'd expect.</p>\n\n<p>But if you uncomment that line, on the line <code>print b</code>, you get the error</p>\n\n<pre><code>UnboundLocalError: local variable 'b' referenced before assignment\n</code></pre>\n\n<p>It seems mysterious that the presence of <code>b = 4</code> might somehow make <code>b</code> disappear on the lines that precede it. But the text David quotes explains why: during static analysis, the interpreter determines that b is assigned to in <code>inner</code>, and that it is therefore a local variable of <code>inner</code>. The print line attempts to print the <code>b</code> in that inner scope before it has been assigned.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1164345,
                        "reputation": 23463,
                        "user_id": 1143274,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/bf11af111cab6e513d68e5e30762deb5?s=256&d=identicon&r=PG",
                        "display_name": "Evgeni Sergeev",
                        "link": "https://stackoverflow.com/users/1143274/evgeni-sergeev"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1413262037,
                    "creation_date": 1413262037,
                    "answer_id": 26352809,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While I used to use @redman's list-based approach, it's not optimal in terms of readability.</p>\n\n<p>Here is a modified @Hans' approach, except I use an attribute of the inner function, rather than the outer. This should be more compatible with recursion, and maybe even multithreading:</p>\n\n<pre><code>def outer(recurse=2):\n    if 0 == recurse:\n        return\n\n    def inner():\n        inner.attribute += 1\n\n    inner.attribute = 0\n    inner()\n    inner()\n    outer(recurse-1)\n    inner()\n    print \"inner.attribute =\", inner.attribute\n\nouter()\nouter()\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>inner.attribute = 3\ninner.attribute = 3\ninner.attribute = 3\ninner.attribute = 3\n</code></pre>\n\n<p>If I <code>s/inner.attribute/outer.attribute/g</code>, we get:</p>\n\n<pre><code>outer.attribute = 3\nouter.attribute = 4\nouter.attribute = 3\nouter.attribute = 4\n</code></pre>\n\n<p>So, indeed, it seems better to make them the inner function's attributes.</p>\n\n<p>Also, it seems sensible in terms of readability: because then the variable conceptually relates to the inner function, and this notation reminds the reader that the variable is shared between the scopes of the inner and the outer functions. A slight downside for the readability is that the <code>inner.attribute</code> may only be set syntactically after the <code>def inner(): ...</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5089803,
                        "reputation": 341,
                        "user_id": 4083216,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/95bb3764313e7456166c445ff6b904ef?s=256&d=identicon&r=PG",
                        "display_name": "Hans",
                        "link": "https://stackoverflow.com/users/4083216/hans"
                    },
                    "is_accepted": false,
                    "score": 34,
                    "last_activity_date": 1411733348,
                    "creation_date": 1411733348,
                    "answer_id": 26059224,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Rather than declaring a special object or map or array,\none can also use a function attribute.\nThis makes the scoping of the variable really clear.</p>\n\n<pre><code>def sumsquares(x,y):\n  def addsquare(n):\n    sumsquares.total += n*n\n\n  sumsquares.total = 0\n  addsquare(x)\n  addsquare(y)\n  return sumsquares.total\n</code></pre>\n\n<p>Of course this attribute belongs to the function (defintion), and not to the function call.\nSo one must be mindful of threading and recursion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 348951,
                        "reputation": 1277,
                        "user_id": 683947,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8a3f4f8e13e0660f1123a096ceae939c?s=256&d=identicon&r=PG",
                        "display_name": "tantrix",
                        "link": "https://stackoverflow.com/users/683947/tantrix"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1400794479,
                    "creation_date": 1400794479,
                    "answer_id": 23817440,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>More from a philosophical point of view, one answer might be \"if you're having namespace problems, give it a namespace of its very own!\"</p>\n\n<p>Providing it in its own class not only allows you to encapsulate the problem but also makes testing easier, eliminates those pesky globals, and reduces the need to shovel variables around between various top-level functions (doubtless there'll be more than just <code>get_order_total</code>).</p>\n\n<p>Preserving the OP's code to focus on the essential change,</p>\n\n<pre><code>class Order(object):\n  PRICE_RANGES = {\n                  64:(25, 0.35),\n                  32:(13, 0.40),\n                  16:(7, 0.45),\n                  8:(4, 0.5)\n                  }\n\n\n  def __init__(self):\n    self._total = None\n\n  def get_order_total(self, quantity):\n      self._total = 0\n      _i = self.PRICE_RANGES.iterkeys()\n      def recurse(_i):\n          try:\n              key = _i.next()\n              if quantity % key != quantity:\n                  self._total += self.PRICE_RANGES[key][0]\n              return recurse(_i) \n          except StopIteration:\n              return (key, quantity % key)\n\n      res = recurse(_i)\n\n#order = Order()\n#order.get_order_total(100)\n</code></pre>\n\n<p>As a PS, one hack which is a variant on the list idea in another answer, but perhaps clearer,</p>\n\n<pre><code>def outer():\n  order = {'total': 0}\n\n  def inner():\n    order['total'] += 42\n\n  inner()\n\n  return order['total']\n\nprint outer()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2549661,
                        "reputation": 8225,
                        "user_id": 2213720,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/R1WfC.png?s=256",
                        "display_name": "CliffordVienna",
                        "link": "https://stackoverflow.com/users/2213720/cliffordvienna"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1380806727,
                    "creation_date": 1380806727,
                    "answer_id": 19160431,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a variation of redman's solution, but using a proper namespace instead of an array to encapsulate the variable:</p>\n\n<pre><code>def foo():\n    class local:\n        counter = 0\n    def bar():\n        print(local.counter)\n        local.counter += 1\n    bar()\n    bar()\n    bar()\n\nfoo()\nfoo()\n</code></pre>\n\n<p>I'm not sure if using a class object this way is considered an ugly hack or a proper coding technique in the python community, but it works fine in python 2.x and 3.x (tested with 2.7.3 and 3.2.3). I'm also unsure about the run-time efficiency of this solution.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2288,
                        "reputation": 193380,
                        "user_id": 3171,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=256&d=identicon&r=PG",
                        "display_name": "David Webb",
                        "link": "https://stackoverflow.com/users/3171/david-webb"
                    },
                    "is_accepted": true,
                    "score": 74,
                    "last_activity_date": 1299662576,
                    "last_edit_date": 1299662576,
                    "creation_date": 1299496954,
                    "answer_id": 5219055,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When I run your code I get this error:</p>\n\n<pre><code>UnboundLocalError: local variable '_total' referenced before assignment\n</code></pre>\n\n<p>This problem is caused by this line:</p>\n\n<pre><code>_total += PRICE_RANGES[key][0]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/tutorial/classes.html#python-scopes-and-namespaces\" rel=\"noreferrer\">The documentation about Scopes and Namespaces</a>  says this:</p>\n\n<blockquote>\n  <p>A special quirk of Python is that \u2013 if no <code>global</code> statement is in effect \u2013 <strong>assignments to names always go into the innermost scope</strong>. Assignments do not copy data \u2014 they just bind names to objects.</p>\n</blockquote>\n\n<p>So since the line is effectively saying:</p>\n\n<pre><code>_total = _total + PRICE_RANGES[key][0]\n</code></pre>\n\n<p>it creates <code>_total</code> in the namespace of <code>recurse()</code>.  Since <code>_total</code> is then new and unassigned you can't use it in the addition.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 212375,
                        "reputation": 5332,
                        "user_id": 465159,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://i.sstatic.net/4p1sN.jpg?s=256",
                        "display_name": "Ant",
                        "link": "https://stackoverflow.com/users/465159/ant"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1299496915,
                    "creation_date": 1299496915,
                    "answer_id": 5219049,
                    "question_id": 5218895,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; def get_order_total(quantity):\n    global PRICE_RANGES\n\n    total = 0\n    _i = PRICE_RANGES.iterkeys()\n    def recurse(_i):\n    print locals()\n    print globals()\n        try:\n            key = _i.next()\n            if quantity % key != quantity:\n                total += PRICE_RANGES[key][0]\n            return recurse(_i)\n        except StopIteration:\n            return (key, quantity % key)\n    print 'main function', locals(), globals()\n\n    res = recurse(_i)\n\n\n&gt;&gt;&gt; get_order_total(20)\nmain function {'total': 0, 'recurse': &lt;function recurse at 0xb76baed4&gt;, '_i': &lt;dictionary-keyiterator object at 0xb6473e64&gt;, 'quantity': 20} {'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'PRICE_RANGES': {64: (25, 0.34999999999999998), 32: (13, 0.40000000000000002), 16: (7, 0.45000000000000001), 8: (4, 0.5)}, '__package__': None, 's': &lt;function s at 0xb646adf4&gt;, 'get_order_total': &lt;function get_order_total at 0xb646ae64&gt;, '__name__': '__main__', '__doc__': None}\n{'recurse': &lt;function recurse at 0xb76baed4&gt;, '_i': &lt;dictionary-keyiterator object at 0xb6473e64&gt;, 'quantity': 20}\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'PRICE_RANGES': {64: (25, 0.34999999999999998), 32: (13, 0.40000000000000002), 16: (7, 0.45000000000000001), 8: (4, 0.5)}, '__package__': None, 's': &lt;function s at 0xb646adf4&gt;, 'get_order_total': &lt;function get_order_total at 0xb646ae64&gt;, '__name__': '__main__', '__doc__': None}\n{'recurse': &lt;function recurse at 0xb76baed4&gt;, '_i': &lt;dictionary-keyiterator object at 0xb6473e64&gt;, 'quantity': 20}\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'PRICE_RANGES': {64: (25, 0.34999999999999998), 32: (13, 0.40000000000000002), 16: (7, 0.45000000000000001), 8: (4, 0.5)}, '__package__': None, 's': &lt;function s at 0xb646adf4&gt;, 'get_order_total': &lt;function get_order_total at 0xb646ae64&gt;, '__name__': '__main__', '__doc__': None}\n{'recurse': &lt;function recurse at 0xb76baed4&gt;, '_i': &lt;dictionary-keyiterator object at 0xb6473e64&gt;, 'quantity': 20}\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, 'PRICE_RANGES': {64: (25, 0.34999999999999998), 32: (13, 0.40000000000000002), 16: (7, 0.45000000000000001), 8: (4, 0.5)}, '__package__': None, 's': &lt;function s at 0xb646adf4&gt;, 'get_order_total': &lt;function get_order_total at 0xb646ae64&gt;, '__name__': '__main__', '__doc__': None}\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#32&gt;\", line 1, in &lt;module&gt;\n    get_order_total(20)\n  File \"&lt;pyshell#31&gt;\", line 18, in get_order_total\n    res = recurse(_i)\n  File \"&lt;pyshell#31&gt;\", line 13, in recurse\n    return recurse(_i)\n  File \"&lt;pyshell#31&gt;\", line 13, in recurse\n    return recurse(_i)\n  File \"&lt;pyshell#31&gt;\", line 12, in recurse\n    total += PRICE_RANGES[key][0]\nUnboundLocalError: local variable 'total' referenced before assignment\n&gt;&gt;&gt; \n</code></pre>\n\n<p>as you see, total is in the local scope of the main function, but it's not in the local scope of recurse (obviously) but neither it is in the global scope, 'cause it's defined only in the local scope of get_order_total</p>\n"
                }
            ]
        },
        {
            "15598160": [
                {
                    "owner": {
                        "account_id": 2469499,
                        "reputation": 5929,
                        "user_id": 2151753,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ea20bf9ab130d367f434ff3545ad2225?s=256&d=identicon&r=PG",
                        "display_name": "svk",
                        "link": "https://stackoverflow.com/users/2151753/svk"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1400140565,
                    "last_edit_date": 1400140565,
                    "creation_date": 1364126412,
                    "answer_id": 15598181,
                    "question_id": 15598160,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>\\t</code> in a string marks an escape sequence for a tab character. For a literal <code>\\</code>, use <code>\\\\</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2524309,
                        "reputation": 1694,
                        "user_id": 2193958,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/edc7567434cfbe5d082ad9a0aa0da1ed?s=256&d=identicon&r=PG",
                        "display_name": "Scintillo",
                        "link": "https://stackoverflow.com/users/2193958/scintillo"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1400140498,
                    "last_edit_date": 1400140498,
                    "creation_date": 1364126765,
                    "answer_id": 15598242,
                    "question_id": 15598160,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>\\</code> is an escape character in Python. <code>\\t</code> gets interpreted as a tab. If you need <code>\\</code> character in a string, you have to use <code>\\\\</code>.</p>\n\n<p>Your code should be:<br>\n<code>test_file=open('c:\\\\Python27\\\\test.txt','r')</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 389327,
                        "reputation": 9354,
                        "user_id": 748731,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/ee7a76e35f8f9fc2b4fad99bfe357e7c?s=256&d=identicon&r=PG",
                        "display_name": "Yarkee",
                        "link": "https://stackoverflow.com/users/748731/yarkee"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1364127254,
                    "creation_date": 1364127254,
                    "answer_id": 15598322,
                    "question_id": 15598160,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>always use 'r' to get a raw string when you want to avoid escape.</p>\n\n<pre><code>test_file=open(r'c:\\Python27\\test.txt','r')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 83,
                    "last_activity_date": 1364126417,
                    "creation_date": 1364126417,
                    "answer_id": 15598183,
                    "question_id": 15598160,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>\\t</code> is a tab character. Use a raw string instead:</p>\n\n<pre><code>test_file=open(r'c:\\Python27\\test.txt','r')\n</code></pre>\n\n<p>or double the slashes:</p>\n\n<pre><code>test_file=open('c:\\\\Python27\\\\test.txt','r')\n</code></pre>\n\n<p>or use forward slashes instead:</p>\n\n<pre><code>test_file=open('c:/Python27/test.txt','r')\n</code></pre>\n"
                }
            ]
        },
        {
            "19767891": [
                {
                    "owner": {
                        "account_id": 421112,
                        "reputation": 31210,
                        "user_id": 799163,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/QGcz9.jpg?s=256",
                        "display_name": "RemcoGerlich",
                        "link": "https://stackoverflow.com/users/799163/remcogerlich"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1589315729,
                    "last_edit_date": 1589315729,
                    "creation_date": 1383569115,
                    "answer_id": 19767980,
                    "question_id": 19767891,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>2020 answer:</strong></p>\n\n<p>Since Python 3.8, the <a href=\"https://stackoverflow.com/questions/50297704/syntax-and-assignment-expressions-what-and-why\">\"walrus operator\" :=</a> exists that does exactly what you want:</p>\n\n<pre><code>while data := fgetcsv(fh, 1000, \",\") != False:\n    pass\n</code></pre>\n\n<p>(if that fgetcsv function existed) </p>\n\n<p><strong>2013 answer:</strong>\nYou can't do that in Python, no assignment in expressions. At least that means you won't accidentally type == instead of = or the other way around and have it work.</p>\n\n<p>Traditional Python style is to just use while True and break:</p>\n\n<pre><code>while True:\n    data = fgetcsv(fh, 1000, \",\")\n    if not data:\n        break\n    # Use data here\n</code></pre>\n\n<p>But nowadays I'd put that in a generator:</p>\n\n<pre><code>def data_parts(fh):\n    while True:\n        data = fgetcsv(fh, 1000, \",\")\n        if not data:\n            break\n        yield data\n</code></pre>\n\n<p>so that in the code that uses the file, the ugliness is hidden away:</p>\n\n<pre><code>for data in data_parts(fh):\n    # Use data here\n</code></pre>\n\n<p>Of course if it's actually CSV reading that you're doing, use the csv module.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2408729,
                        "reputation": 3191,
                        "user_id": 5681083,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-fw-gVyfmLOA/AAAAAAAAAAI/AAAAAAAABEE/DcdcZDdINWQ/photo.jpg?sz=256",
                        "display_name": "Praveen Kulkarni",
                        "link": "https://stackoverflow.com/users/5681083/praveen-kulkarni"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1570993657,
                    "creation_date": 1570993657,
                    "answer_id": 58366899,
                    "question_id": 19767891,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3.8 <a href=\"https://www.python.org/dev/peps/pep-0572/#syntax-and-semantics\" rel=\"noreferrer\">pep-0572</a> now address this case using the new notation <code>:=</code>. Have a look :)</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>while chunk := file.read(8192):\n   process(chunk)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 38,
                    "last_activity_date": 1555856203,
                    "last_edit_date": 1555856203,
                    "creation_date": 1383568837,
                    "answer_id": 19767911,
                    "question_id": 19767891,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You cannot use assignment in an expression. Assignment is itself a statement, and you cannot combine Python statements.</p>\n\n<p>This is an explicit choice made by the language designers; it is all too easy to accidentally use one <code>=</code> and assign, where you meant to use two <code>==</code> and test for equality.</p>\n\n<p>Move the assignment <em>into</em> the loop, or assign <em>before</em> the loop, and assign new values in the loop itself.</p>\n\n<p>For your specific example, the Python <a href=\"http://docs.python.org/2/library/csv.html\" rel=\"noreferrer\"><code>csv</code> module</a> gives you a higher-level API and you'd be looping over the <code>csv.reader()</code> instead:</p>\n\n<pre><code>with open(csvfilename, 'rb') as csvfh:\n    reader = csv.reader(csvfh)\n    for row in reader:\n</code></pre>\n\n<p>I <strong>rarely</strong>, if ever, need to assign in a loop construct. Usually there is a (much) better way of solving the problem at hand.</p>\n\n<p>That said, as of Python 3.8 the language will actually have assignment expressions, using <code>:=</code> as the assignment operator. See <a href=\"https://www.python.org/dev/peps/pep-0572/\" rel=\"noreferrer\">PEP 572</a>. Assignment expressions are actually useful in list comprehensions, for example, when you need to both include a method return value in the list you are building and need to be able to use that value in a test.</p>\n\n<p>Now, you'd have to use a generator expression:</p>\n\n<pre><code>absolute = (os.path.abspath(p) for p in files)\nfiltered = [abs for abs in absolute if included(abs)]\n</code></pre>\n\n<p>but with assignment expressions you can inline the <code>os.path.abspath()</code> call:</p>\n\n<pre><code>filtered = [abs for p in files if included(abs := os.path.abspath(p))]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 485360,
                        "reputation": 21428,
                        "user_id": 901641,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/PR8Bl.png?s=256",
                        "display_name": "ArtOfWarfare",
                        "link": "https://stackoverflow.com/users/901641/artofwarfare"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1454898978,
                    "creation_date": 1454898978,
                    "answer_id": 35261634,
                    "question_id": 19767891,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I wrote a little Python module, which I call <a href=\"https://pypi.python.org/pypi/let/1.0.0\" rel=\"nofollow\"><code>let</code></a>, which allows you to perform a variable assignment anywhere that a function is allowed.</p>\n\n<p>Install it like this:</p>\n\n<pre><code>pip install let\n</code></pre>\n\n<p>I believe the following will accomplish what you're looking for:</p>\n\n<pre><code>from let import let\n\nwhile let(data = fgetcsv(fh, 1000, ',')):\n    # Do whatever you'd like with data here\n</code></pre>\n\n<p>However... Duncan's comment the original question saying to use <code>iter</code> is interesting. I wasn't aware of the function until he brought it up, and I now believe it may be a better solution than mine. It's debatable - <code>iter</code> requires a sentinel to be explicitly provided, whereas mine doesn't care and simply waits for <code>fgetcsv</code> to return any <code>False</code>y value.</p>\n"
                }
            ]
        },
        {
            "15114843": [
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 72,
                    "last_activity_date": 1627589759,
                    "last_edit_date": 1627589759,
                    "creation_date": 1361976236,
                    "answer_id": 15114896,
                    "question_id": 15114843,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python versions before 3.7 dictionaries were inherently unordered, so what you're asking to do doesn't really make sense.</p>\n<p>If you really, really know what you're doing, use</p>\n<pre><code>value_at_index = list(dic.values())[index]\n</code></pre>\n<p>Bear in mind that prior to Python 3.7 adding or removing an element can potentially change the index of every other element.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11373666,
                        "reputation": 191,
                        "user_id": 8811079,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-c_tpLvYsYc8/AAAAAAAAAAI/AAAAAAAAAu0/lfCz82PdtKk/photo.jpg?sz=256",
                        "display_name": "mohammed ali shaik",
                        "link": "https://stackoverflow.com/users/8811079/mohammed-ali-shaik"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1545800949,
                    "last_edit_date": 1545800949,
                    "creation_date": 1545756086,
                    "answer_id": 53924047,
                    "question_id": 15114843,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let us take an example of dictionary:</p>\n\n<pre><code>numbers = {'first':0, 'second':1, 'third':3}\n</code></pre>\n\n<p>When I did </p>\n\n<pre><code>numbers.values()[index]\n</code></pre>\n\n<p>I got an error:'dict_values' object does not support indexing</p>\n\n<p>When I did </p>\n\n<pre><code>numbers.itervalues()\n</code></pre>\n\n<p>to iterate and extract the values it is also giving an error:'dict' object has no attribute 'iteritems'</p>\n\n<p>Hence I came up with new way of accessing dictionary elements by index just by converting them to tuples.</p>\n\n<pre><code>tuple(numbers.items())[key_index][value_index]\n</code></pre>\n\n<p>for example: </p>\n\n<pre><code>tuple(numbers.items())[0][0] gives 'first'\n</code></pre>\n\n<p>if u want to edit the values or sort the values the tuple object does not allow the item assignment. In this case you can use </p>\n\n<pre><code>list(list(numbers.items())[index])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2823562,
                        "reputation": 3757,
                        "user_id": 2426679,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/ae42083756ea100bc8b06658725b4493?s=256&d=identicon&r=PG",
                        "display_name": "sam2426679",
                        "link": "https://stackoverflow.com/users/2426679/sam2426679"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1437776851,
                    "last_edit_date": 1437776851,
                    "creation_date": 1437774583,
                    "answer_id": 31620324,
                    "question_id": 15114843,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While you can do</p>\n\n<pre><code>value = d.values()[index]\n</code></pre>\n\n<p>It should be faster to do</p>\n\n<pre><code>value = next( v for i, v in enumerate(d.itervalues()) if i == index )\n</code></pre>\n\n<p>edit: I just timed it using a dict of len 100,000,000 checking for the index at the very end, and the 1st/values() version took 169 seconds whereas the 2nd/next() version took 32 seconds.</p>\n\n<p>Also, note that this assumes that your index is not negative</p>\n"
                },
                {
                    "owner": {
                        "account_id": 109656,
                        "reputation": 4818,
                        "user_id": 290443,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/2f822f8f82def56dc3237cc4ff794e9e?s=256&d=identicon&r=PG",
                        "display_name": "MikeRand",
                        "link": "https://stackoverflow.com/users/290443/mikerand"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1362002620,
                    "creation_date": 1362002620,
                    "answer_id": 15123364,
                    "question_id": 15114843,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you really just want a random value from the available key range, use <code>random.choice</code> on the dictionary's values (converted to list form, if Python 3).</p>\n\n<pre><code>&gt;&gt;&gt; from random import choice\n&gt;&gt;&gt; d = {1: 'a', 2: 'b', 3: 'c'}\n&gt;&gt;&gt;&gt; choice(list(d.values()))\n</code></pre>\n"
                }
            ]
        },
        {
            "35996253": [
                {
                    "owner": {
                        "account_id": 395708,
                        "reputation": 2040,
                        "user_id": 758801,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/d225df47ec9b29d1cb8dae0831a55f86?s=256&d=identicon&r=PG",
                        "display_name": "Mats Kindahl",
                        "link": "https://stackoverflow.com/users/758801/mats-kindahl"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1457983732,
                    "creation_date": 1457983732,
                    "answer_id": 35996361,
                    "question_id": 35996253,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To convert a generator expression into a list it is sufficient to do:</p>\n\n<pre><code>list(&lt;generator expression&gt;)\n</code></pre>\n\n<p>Beware though if the generator expression can generate an infinite list, you will not get what you expect.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2512154,
                        "reputation": 15373,
                        "user_id": 2184364,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/fe15cfa3ec22be57f1762ba905c8eb70?s=256&d=identicon&r=PG",
                        "display_name": "Julien Spronck",
                        "link": "https://stackoverflow.com/users/2184364/julien-spronck"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1457983650,
                    "creation_date": 1457983650,
                    "answer_id": 35996329,
                    "question_id": 35996253,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you actually need a list, you can just do:</p>\n\n<pre><code>lst = list(generator_object)\n</code></pre>\n\n<p>However, if all you want is to iterate through the object, you do not need a list:</p>\n\n<pre><code>for item in generator_object:\n    # do something with item\n</code></pre>\n\n<p>For example,</p>\n\n<pre><code>sqr = (i**2 for i in xrange(10)) # &lt;generator object &lt;genexpr&gt; at 0x1196acfa0&gt;\nlist(sqr) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nsqr = (i**2 for i in xrange(10))\nfor x in sqr:\n    print x,\n# 0 1 4 9 16 25 36 49 64 81\n</code></pre>\n"
                }
            ]
        },
        {
            "40354399": [
                {
                    "owner": {
                        "account_id": 2322438,
                        "reputation": 8134,
                        "user_id": 2037787,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/004919661254567c1f7bdb08b3c1d30e?s=256&d=identicon&r=PG",
                        "display_name": "backtrack",
                        "link": "https://stackoverflow.com/users/2037787/backtrack"
                    },
                    "is_accepted": true,
                    "score": 24,
                    "last_activity_date": 1477976857,
                    "creation_date": 1477976857,
                    "answer_id": 40354450,
                    "question_id": 40354399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The pip command is a tool for installing and managing Python packages, such as\nthose found in the Python Package Index.</p>\n\n<p>It's a replacement for easy_install. </p>\n\n<p><a href=\"https://github.com/pypa/pip\" rel=\"noreferrer\">https://github.com/pypa/pip</a></p>\n\n<p>Using PIP, You can install the module. It will install the dependency also.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4023422,
                        "reputation": 2523,
                        "user_id": 3312761,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/5e56becd5bf8158229b28dacaf973cc7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Himanshu dua",
                        "link": "https://stackoverflow.com/users/3312761/himanshu-dua"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1477976669,
                    "creation_date": 1477976669,
                    "answer_id": 40354429,
                    "question_id": 40354399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Pip is a package management system used to install and manage software packages written in Python. \nYou have to download PIP.then you can use pip to install packages.\ndownload pip from here: <a href=\"https://pypi.python.org/pypi/pip\" rel=\"noreferrer\">https://pypi.python.org/pypi/pip</a> </p>\n"
                },
                {
                    "owner": {
                        "account_id": 6404890,
                        "reputation": 456,
                        "user_id": 6411264,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/3adb62ab5dd7fdd4b8183bfe62225bc1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "UberStuper",
                        "link": "https://stackoverflow.com/users/6411264/uberstuper"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1477976572,
                    "last_edit_date": 1495540021,
                    "creation_date": 1477976572,
                    "answer_id": 40354417,
                    "question_id": 40354399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I can't add a comment, so take a look at this link </p>\n\n<p><a href=\"https://stackoverflow.com/questions/4750806/how-do-i-install-pip-on-windows\">How do I install pip on Windows?</a></p>\n\n<p>you can think of pip as a \"package\" manager, you use it to install certain libraries or packages to your python installation. </p>\n"
                }
            ]
        },
        {
            "43934304": [
                {
                    "owner": {
                        "account_id": 4761572,
                        "reputation": 11982,
                        "user_id": 3848833,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/003a7e62cfa0ff8097aba525dc5727a8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "cezar",
                        "link": "https://stackoverflow.com/users/3848833/cezar"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1517573181,
                    "last_edit_date": 1517573181,
                    "creation_date": 1494581948,
                    "answer_id": 43934361,
                    "question_id": 43934304,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do this in a try and catch block:</p>\n\n<pre><code>try:\n    if val is None:\n        print(\"null\")\nexcept NameError:\n    # throw an exception or do something else\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10162242,
                        "reputation": 1769,
                        "user_id": 7505329,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://i.sstatic.net/buqbA.jpg?s=256",
                        "display_name": "Ludisposed",
                        "link": "https://stackoverflow.com/users/7505329/ludisposed"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1494581945,
                    "creation_date": 1494581945,
                    "answer_id": 43934360,
                    "question_id": 43934304,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>try:\n    if val is None: # The variable\n        print('It is None')\nexcept NameError:\n    print (\"This variable is not defined\")\nelse:\n    print (\"It is defined and has a value\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3480007,
                        "reputation": 23113,
                        "user_id": 2912340,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://i.sstatic.net/ddQ02.jpg?s=256",
                        "display_name": "\u0141ukasz Rogalski",
                        "link": "https://stackoverflow.com/users/2912340/%c5%81ukasz-rogalski"
                    },
                    "is_accepted": true,
                    "score": 141,
                    "last_activity_date": 1494581934,
                    "creation_date": 1494581934,
                    "answer_id": 43934358,
                    "question_id": 43934304,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Testing for name pointing to <code>None</code> and name existing are two semantically different operations.</p>\n\n<p>To check if <code>val</code> is None:</p>\n\n<pre><code>if val is None:\n    pass  # val exists and is None\n</code></pre>\n\n<p>To check if name exists:</p>\n\n<pre><code>try:\n    val\nexcept NameError:\n    pass  # val does not exist at all\n</code></pre>\n"
                }
            ]
        },
        {
            "13673060": [
                {
                    "owner": {
                        "account_id": 5596936,
                        "reputation": 1337,
                        "user_id": 4434405,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/VH8mD.jpg?s=256",
                        "display_name": "JerodG",
                        "link": "https://stackoverflow.com/users/4434405/jerodg"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1689145475,
                    "last_edit_date": 1689145475,
                    "creation_date": 1507222516,
                    "answer_id": 46591040,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<ul>\n<li>:param s: str; source string</li>\n<li>:param w: int; width to split on</li>\n</ul>\n<blockquote>\n<p>Using the textwrap module:</p>\n<p><a href=\"https://docs.python.org/3.11/library/textwrap.html\" rel=\"nofollow noreferrer\">PyDocs-textwrap</a></p>\n</blockquote>\n<pre><code>import textwrap\ndef wrap(s, w):\n    return textwrap.fill(s, w)\n</code></pre>\n<p>:return str:</p>\n<blockquote>\n<p>Inspired by <a href=\"https://stackoverflow.com/a/13673133/4434405\" title=\"stuff\">Alexander's Answer</a></p>\n<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html\" rel=\"nofollow noreferrer\">PyDocs-data structures</a></p>\n</blockquote>\n<pre><code>def wrap(s, w):\n    return [s[i:i + w] for i in range(0, len(s), w)]\n</code></pre>\n<ul>\n<li>:return list:</li>\n</ul>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/44103651/4434405\">Inspired by Eric's answer</a></p>\n<p><a href=\"https://docs.python.org/3.6/library/re.html\" rel=\"nofollow noreferrer\">PyDocs-regex</a></p>\n</blockquote>\n<pre><code>import re\ndef wrap(s, w):    \n    sre = re.compile(rf'(.{{{w}}})')\n    return [x for x in re.split(sre, s) if x]\n</code></pre>\n<ul>\n<li>:return list:</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 2252734,
                        "reputation": 11064,
                        "user_id": 1984636,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://i.sstatic.net/kUf56.jpg?s=256",
                        "display_name": "sivi",
                        "link": "https://stackoverflow.com/users/1984636/sivi"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1675498352,
                    "creation_date": 1675498352,
                    "answer_id": 75343792,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is a built in function in python for that</p>\n<pre><code>import textwrap\n\ntext = &quot;Your Text.... and so on&quot;\nwidth = 5 #\n\ntextwrap.wrap(text,width)\n</code></pre>\n<p>Vualla</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182761,
                        "reputation": 23527,
                        "user_id": 417685,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/0836acbd3750bd8db85fd7f8ef4e82ef?s=256&d=identicon&r=PG",
                        "display_name": "Alexander",
                        "link": "https://stackoverflow.com/users/417685/alexander"
                    },
                    "is_accepted": true,
                    "score": 124,
                    "last_activity_date": 1646740797,
                    "last_edit_date": 1646740797,
                    "creation_date": 1354477890,
                    "answer_id": 13673133,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>&gt;&gt;&gt; x = &quot;qwertyui&quot;\n&gt;&gt;&gt; chunks, chunk_size = len(x), len(x)//4\n&gt;&gt;&gt; [ x[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]\n['qw', 'er', 'ty', 'ui']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6865267,
                        "reputation": 780,
                        "user_id": 5277967,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-s8vhOohII4w/AAAAAAAAAAI/AAAAAAAABhg/fwXy6-a2SeA/photo.jpg?sz=256",
                        "display_name": "Ethan Bradford",
                        "link": "https://stackoverflow.com/users/5277967/ethan-bradford"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1602181949,
                    "creation_date": 1602181949,
                    "answer_id": 64268655,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In <a href=\"https://stackoverflow.com/questions/9475241/split-string-every-nth-character\">Split string every nth character?</a>, &quot;the wolf&quot; gives the most concise answer:</p>\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall('..','1234567890')\n['12', '34', '56', '78', '90']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18789805,
                        "reputation": 89,
                        "user_id": 13702524,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/yrVaJ.png?s=256",
                        "display_name": "Divyansh",
                        "link": "https://stackoverflow.com/users/13702524/divyansh"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1591568187,
                    "creation_date": 1591568187,
                    "answer_id": 62252377,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code># spliting a string by the length of the string\n\ndef len_split(string,sub_string):\n    n,sub,str1=list(string),len(sub_string),')/^0*/-'\n    for i in range(sub,len(n)+((len(n)-1)//sub),sub+1):\n        n.insert(i,str1)   \n    n=\"\".join(n)\n    n=n.split(str1)\n    return n\n\nx=\"divyansh_looking_for_intership_actively_contact_Me_here\"\nsub=\"four\"\nprint(len_split(x,sub))\n\n# Result-&gt; ['divy', 'ansh', 'tiwa', 'ri_l', 'ooki', 'ng_f', 'or_i', 'nter', 'ship', '_con', 'tact', '_Me_', 'here']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 952742,
                        "reputation": 10025,
                        "user_id": 1485952,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/e3fc3dc2f82fa799629b1660101c896e?s=256&d=identicon&r=PG",
                        "display_name": "fnkr",
                        "link": "https://stackoverflow.com/users/1485952/fnkr"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1581024886,
                    "last_edit_date": 1581024886,
                    "creation_date": 1398849168,
                    "answer_id": 23384110,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I tried Alexanders answer but got this error in Python3:</p>\n\n<blockquote>\n  <p>TypeError: 'float' object cannot be interpreted as an integer</p>\n</blockquote>\n\n<p>This is because the division operator in Python3 is returning a float. This works for me:</p>\n\n<pre><code>&gt;&gt;&gt; x = \"qwertyui\"\n&gt;&gt;&gt; chunks, chunk_size = len(x), len(x)//4\n&gt;&gt;&gt; [ x[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]\n['qw', 'er', 'ty', 'ui']\n</code></pre>\n\n<p>Notice the <code>//</code> at the end of line 2, to ensure truncation to an integer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10056583,
                        "reputation": 417,
                        "user_id": 7434592,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-yqnZP9IHDss/AAAAAAAAAAI/AAAAAAAAAPI/rerXfZvsW0U/photo.jpg?sz=256",
                        "display_name": "\u0410\u043d\u0434\u0440\u0435\u0439 \u041b\u0435\u0434\u043e\u0432\u0441\u043a\u0438\u0445",
                        "link": "https://stackoverflow.com/users/7434592/%d0%90%d0%bd%d0%b4%d1%80%d0%b5%d0%b9-%d0%9b%d0%b5%d0%b4%d0%be%d0%b2%d1%81%d0%ba%d0%b8%d1%85"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1518183262,
                    "creation_date": 1518183262,
                    "answer_id": 48707091,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>some_string=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nx=3 \nres=[some_string[y-x:y] for y in range(x, len(some_string)+x,x)]\nprint(res)\n</code></pre>\n\n<p>will produce </p>\n\n<pre><code>['ABC', 'DEF', 'GHI', 'JKL', 'MNO', 'PQR', 'STU', 'VWX', 'YZ']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11953613,
                        "reputation": 61,
                        "user_id": 8746596,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1708723129179697/picture?type=large",
                        "display_name": "Frederico Wu",
                        "link": "https://stackoverflow.com/users/8746596/frederico-wu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1507560070,
                    "creation_date": 1507560070,
                    "answer_id": 46649073,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>length = 4\nstring = \"abcdefgh\"\nstr_dict = [ o for o in string ]\nparts = [ ''.join( str_dict[ (j * length) : ( ( j + 1 ) * length ) ]   ) for j in xrange(len(string)/length  )]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6701028,
                        "reputation": 343,
                        "user_id": 6054093,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/edee9c8a3a423fe280364fb6f0333d04?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Eric",
                        "link": "https://stackoverflow.com/users/6054093/eric"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1495419432,
                    "last_edit_date": 1495419432,
                    "creation_date": 1495418796,
                    "answer_id": 44103651,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Got an <code>re</code> trick:</p>\n\n<pre><code>In [28]: import re\n\nIn [29]: x = \"qwertyui\"\n\nIn [30]: [x for x in re.split(r'(\\w{2})', x) if x]\nOut[30]: ['qw', 'er', 'ty', 'ui']\n</code></pre>\n\n<p>Then be a func, it might looks like:</p>\n\n<pre><code>def split(string, split_len):\n    # Regex: `r'.{1}'` for example works for all characters\n    regex = r'(.{%s})' % split_len\n    return [x for x in re.split(regex, string) if x]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7833385,
                        "reputation": 1,
                        "user_id": 5922476,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hKNqE.jpg?s=256",
                        "display_name": "pmsh.93",
                        "link": "https://stackoverflow.com/users/5922476/pmsh-93"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1481540514,
                    "last_edit_date": 1481540514,
                    "creation_date": 1480574942,
                    "answer_id": 40904248,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The string splitting is required in many cases like where you have to sort the characters of the string given, replacing a character with an another character etc. But all these operations can be performed with the following mentioned string splitting methods.</p>\n\n<p>The string splitting can be done in two ways:</p>\n\n<ol>\n<li><p>Slicing the given string based on the length of split.</p></li>\n<li><p>Converting the given string to a list with list(str) function, where characters of the string breakdown to form the the elements of a list. Then do the required operation and join them with 'specified character between the characters of the original string'.join(list) to get a new processed string.</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 8817486,
                        "reputation": 4709,
                        "user_id": 6588439,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/81484c2729b1533d2bfa0d9243c6c580?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Zhang Tong",
                        "link": "https://stackoverflow.com/users/6588439/zhang-tong"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1480576020,
                    "creation_date": 1480576020,
                    "answer_id": 40904499,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>l = 'abcdefghijklmn'\n\ndef group(l,n):\n    tmp = len(l)%n\n    zipped = zip(*[iter(l)]*n)\n    return zipped if tmp == 0 else zipped+[tuple(l[-tmp:])]\n\nprint group(l,3)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7578828,
                        "reputation": 1584,
                        "user_id": 5750172,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Emt03.jpg?s=256",
                        "display_name": "thodnev",
                        "link": "https://stackoverflow.com/users/5750172/thodnev"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1469164334,
                    "last_edit_date": 1469164334,
                    "creation_date": 1469163537,
                    "answer_id": 38518478,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here are two generic approaches. Probably worth adding to your own lib of reusables. First one requires the item to be sliceable and second one works with any iterables (but requires their constructor to accept iterable).</p>\n\n<pre><code>def split_bylen(item, maxlen):\n    '''\n    Requires item to be sliceable (with __getitem__ defined)\n    '''\n    return [item[ind:ind+maxlen] for ind in range(0, len(item), maxlen)]\n    #You could also replace outer [ ] brackets with ( ) to use as generator.\n\ndef split_bylen_any(item, maxlen, constructor=None):\n    '''\n    Works with any iterables.\n    Requires item's constructor to accept iterable or alternatively \n    constructor argument could be provided (otherwise use item's class)\n    '''\n    if constructor is None: constructor = item.__class__\n    return [constructor(part) for part in zip(* ([iter(item)] * maxlen))]\n    #OR: return map(constructor, zip(* ([iter(item)] * maxlen)))\n    #    which would be faster if you need an iterable, not list\n</code></pre>\n\n<p>So, in topicstarter's case, the usage is:</p>\n\n<pre><code>string = 'Baboons love bananas'\nparts = 5\nsplitlen = -(-len(string) // parts) # is alternative to math.ceil(len/parts)\n\nfirst_method = split_bylen(string, splitlen)\n#Result :['Babo', 'ons ', 'love', ' ban', 'anas']\n\nsecond_method = split_bylen_any(string, splitlen, constructor=''.join)\n#Result :['Babo', 'ons ', 'love', ' ban', 'anas']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8506761,
                        "reputation": 71,
                        "user_id": 6378063,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/eb9d40beff91cb333e5514c1f607e3d7?s=256&d=identicon&r=PG",
                        "display_name": "Krister Hedfors",
                        "link": "https://stackoverflow.com/users/6378063/krister-hedfors"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1464120635,
                    "creation_date": 1464120635,
                    "answer_id": 37422973,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def split2len(s, n):\n    def _f(s, n):\n        while s:\n            yield s[:n]\n            s = s[n:]\n    return list(_f(s, n))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5029784,
                        "reputation": 51,
                        "user_id": 4040390,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-zNbSrjyQgJI/AAAAAAAAAAI/AAAAAAAAAqs/scE7xQ_pMTc/photo.jpg?sz=256",
                        "display_name": "Moisey Oysgelt",
                        "link": "https://stackoverflow.com/users/4040390/moisey-oysgelt"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1460372673,
                    "last_edit_date": 1460372673,
                    "creation_date": 1458946158,
                    "answer_id": 36229303,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>My solution</p>\n\n<pre><code>   st =' abs de fdgh  1234 556 shg shshh'\n   print st\n\n   def splitStringMax( si, limit):\n    ls = si.split()\n    lo=[]\n    st=''\n    ln=len(ls)\n    if ln==1:\n        return [si]\n    i=0\n    for l in ls:\n        st+=l\n        i+=1\n        if i &lt;ln:\n            lk=len(ls[i])\n            if (len(st))+1+lk &lt; limit:\n                st+=' '\n                continue\n        lo.append(st);st=''\n    return lo\n\n   ############################\n\n   print  splitStringMax(st,7)\n   # ['abs de', 'fdgh', '1234', '556', 'shg', 'shshh']\n    print  splitStringMax(st,12)\n\n   # ['abs de fdgh', '1234 556', 'shg shshh']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user1658543"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1444243117,
                    "creation_date": 1444243117,
                    "answer_id": 32999980,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>And for dudes who prefer it to be a bit more readable:</p>\n\n<pre><code>def itersplit_into_x_chunks(string,x=10): # we assume here that x is an int and &gt; 0\n    size = len(string)\n    chunksize = size//x\n    for pos in range(0, size, chunksize):\n        yield string[pos:pos+chunksize]\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>&gt;&gt;&gt; list(itersplit_into_x_chunks('qwertyui',x=4))\n['qw', 'er', 'ty', 'ui']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 390895,
                        "reputation": 229,
                        "user_id": 751239,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/44c54e850fde13d19d432c248555b3f8?s=256&d=identicon&r=PG",
                        "display_name": "bobchase",
                        "link": "https://stackoverflow.com/users/751239/bobchase"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1407783642,
                    "creation_date": 1407783642,
                    "answer_id": 25250485,
                    "question_id": 13673060,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a one-liner that doesn't need to know the length of the string beforehand:</p>\n\n<pre><code>from functools import partial\nfrom StringIO import StringIO\n\n[l for l in iter(partial(StringIO(data).read, 4), '')]\n</code></pre>\n\n<p>If you have a file or socket, then you don't need the StringIO wrapper:</p>\n\n<pre><code>[l for l in iter(partial(file_like_object.read, 4), '')]\n</code></pre>\n"
                }
            ]
        },
        {
            "41910583": [
                {
                    "owner": {
                        "account_id": 10277076,
                        "reputation": 1460,
                        "user_id": 7583614,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/810116295795835/picture?type=large",
                        "display_name": "Don Feto",
                        "link": "https://stackoverflow.com/users/7583614/don-feto"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1660157913,
                    "creation_date": 1660157913,
                    "answer_id": 73311416,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The Reason most of the time is because the file security is set to not modify or write to normal users</p>\n<h1>To enable Full control  to Users</h1>\n<p>right-click the file, choose <code>Properties</code> and select the <code>Security tab</code>. Then <code>Users</code> then <code> Edit</code>, select <code>Users</code>  then</p>\n<h3>Check Full control</h3>\n<p><a href=\"https://i.sstatic.net/9ERqH.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/9ERqH.png\" alt=\"enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 18099963,
                        "reputation": 1238,
                        "user_id": 13157917,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/05474e7c5e7f39c765813dfe3c52ef8b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Alexander",
                        "link": "https://stackoverflow.com/users/13157917/alexander"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1614540304,
                    "last_edit_date": 1614540304,
                    "creation_date": 1600733554,
                    "answer_id": 64001421,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For future searchers, if none of the above worked, for me, python was trying to open a folder as a file.</p>\n<p>Check at the location where you try to open the file, if you have a folder with exactly the same name as the file you try to open (the file extension is part of the file name).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20219904,
                        "reputation": 406,
                        "user_id": 14829702,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/75e6da55cb9c0a8f223b6d32dde2cb8c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Pengshe",
                        "link": "https://stackoverflow.com/users/14829702/pengshe"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1608031490,
                    "last_edit_date": 1608031490,
                    "creation_date": 1608031172,
                    "answer_id": 65304845,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If nothing worked for you, make sure the file is not open in another program. I was trying to import an xlsx file and Excel was blocking me from doing so.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4757987,
                        "reputation": 5137,
                        "user_id": 3846228,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/j0fFT.jpg?s=256",
                        "display_name": "dot.Py",
                        "link": "https://stackoverflow.com/users/3846228/dot-py"
                    },
                    "is_accepted": true,
                    "score": 10,
                    "last_activity_date": 1594863275,
                    "last_edit_date": 1594863275,
                    "creation_date": 1485612605,
                    "answer_id": 41910734,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your user don't have the right permissions to <code>read</code> the file, since you used <a href=\"https://docs.python.org/3/library/functions.html#open\" rel=\"noreferrer\"><code>open()</code></a> without specifying a mode.</p>\n<p>Since you're using Windows, you should read a little more about <a href=\"https://technet.microsoft.com/en-us/library/cc754344(v=ws.11).aspx\" rel=\"noreferrer\">File and Folder Permissions</a>.</p>\n<p>Also, if you want to play with your file permissions, you should <code>right-click</code> it, choose <code>Properties</code> and select <code>Security</code> tab.</p>\n<p>Or if you want to be a little more hardcore, you can run your script as admin.</p>\n<p><strong>SO Related Questions:</strong></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/13215716/ioerror-errno-13-permission-denied-when-trying-to-open-hidden-file-in-w-mod\">Example1</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 8685314,
                        "reputation": 897,
                        "user_id": 6499948,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/zDO8C.jpg?s=256",
                        "display_name": "PythonMan",
                        "link": "https://stackoverflow.com/users/6499948/pythonman"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1550058937,
                    "creation_date": 1550058937,
                    "answer_id": 54669624,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have this problem in Windows 10, and you know you have premisions on folder (You could write before but it just started to print exception PermissionError recently).. You will need to install Windows updates... I hope someone will help this info. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 5562144,
                        "reputation": 943,
                        "user_id": 4410883,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/18rPK.jpg?s=256",
                        "display_name": "Gaurav Shrivastava",
                        "link": "https://stackoverflow.com/users/4410883/gaurav-shrivastava"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1537571376,
                    "creation_date": 1537571376,
                    "answer_id": 52452024,
                    "question_id": 41910583,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem here is your user doesn't have proper <a href=\"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc754344(v=ws.11)\" rel=\"noreferrer\">rights/permissions</a> to open the file this means that you'd need to grant some administrative privileges to your python ide before you run that command.</p>\n\n<p>As you are a windows user you just need to <strong><em>right click on python ide => select option 'Run as Administrator'</em></strong> and then run your command.</p>\n\n<p>And if you are using the command line to run the codes, do the same <strong><em>open the command prompt with admin rights</em></strong>. Hope it helps</p>\n"
                }
            ]
        },
        {
            "7684408": [
                {
                    "owner": {
                        "account_id": 83527,
                        "reputation": 2654,
                        "user_id": 234121,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/bdue8.jpg?s=256",
                        "display_name": "Divisible by Zero",
                        "link": "https://stackoverflow.com/users/234121/divisible-by-zero"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1595428595,
                    "last_edit_date": 1595428595,
                    "creation_date": 1367562789,
                    "answer_id": 16353007,
                    "question_id": 7684408,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Like madjar suggested, there is likely a circular import in your code. If you're having trouble finding out where the circle is (which modules and imports are involved), you can use the traceback option to get an idea of where the problem lies:</p>\n<pre><code>python manage.py validate --traceback\n</code></pre>\n<p>Edit - Validate is deprecated from django 1.7. So please run the following command -</p>\n<pre><code>python manage.py check --traceback\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5898945,
                        "reputation": 2789,
                        "user_id": 4643167,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-oU4O3jqK4-U/AAAAAAAAAAI/AAAAAAAAAC8/auWhzM1vL7A/photo.jpg?sz=256",
                        "display_name": "ugali soft",
                        "link": "https://stackoverflow.com/users/4643167/ugali-soft"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1586321683,
                    "last_edit_date": 1586321683,
                    "creation_date": 1529676855,
                    "answer_id": 50989906,
                    "question_id": 7684408,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try to import Locally your model instead of as public one, Example</p>\n\n<pre><code>def sample_function():\n    from effects.models import Effect # import within function or class\n</code></pre>\n\n<p>or import model as String -> 'APP_NAME.MODEL_NAME'</p>\n\n<pre><code>pay_methods = models.ManyToManyField('payment_app.AllowedPayMethod')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9151311,
                        "reputation": 1526,
                        "user_id": 6805800,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://lh3.googleusercontent.com/-cyN0h9Zirp4/AAAAAAAAAAI/AAAAAAAAD94/64n1VqNQK50/photo.jpg?sz=256",
                        "display_name": "Jonathan Porter",
                        "link": "https://stackoverflow.com/users/6805800/jonathan-porter"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1515639945,
                    "creation_date": 1515639945,
                    "answer_id": 48199205,
                    "question_id": 7684408,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Similar situation to Pythonator - I had an alternate cause for the same error message.</p>\n\n<p>In my case, I had forgotten to activate the virtual environment I set up for my project and was trying to run the server. After activating the environment and running the server again I had no issues.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2823610,
                        "reputation": 191,
                        "user_id": 2426715,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b436945c32ec044601a4156626e1dd7f?s=256&d=identicon&r=PG",
                        "display_name": "Pythonator",
                        "link": "https://stackoverflow.com/users/2426715/pythonator"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1369755236,
                    "creation_date": 1369755236,
                    "answer_id": 16795989,
                    "question_id": 7684408,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This was the first post that came up on Google so I will post this alternative cause of error.</p>\n\n<p>In my code there was no circular imports, I solved this problem by manually deleting all .pyc files in my project. Apparently restarting the application wasn't recompiling my code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 956684,
                        "reputation": 12941,
                        "user_id": 981855,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/44e220c5150326866af030a7c9d944b3?s=256&d=identicon&r=PG",
                        "display_name": "madjar",
                        "link": "https://stackoverflow.com/users/981855/madjar"
                    },
                    "is_accepted": true,
                    "score": 103,
                    "last_activity_date": 1317974148,
                    "creation_date": 1317974148,
                    "answer_id": 7684485,
                    "question_id": 7684408,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a circular import in your code, that's why the Item can't be imported in action.</p>\n\n<p>You can solve the problem by removing the import of a class in one of your files, and replacing it with a string containing the name of the class, <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey\">as explained in the documentation</a>. For example :</p>\n\n<pre><code>effects = models.ManyToManyField('effects.Effect',through='ItemEffect',blank=True)\n</code></pre>\n"
                }
            ]
        },
        {
            "26255671": [
                {
                    "owner": {
                        "account_id": 2450950,
                        "reputation": 76727,
                        "user_id": 2137255,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/zzmt4.png?s=256",
                        "display_name": "Zero",
                        "link": "https://stackoverflow.com/users/2137255/zero"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1507990543,
                    "creation_date": 1507990543,
                    "answer_id": 46745542,
                    "question_id": 26255671,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could use <code>set_index</code> and <code>unstack</code></p>\n\n<pre><code>In [1923]: df.set_index([df.index, 'key'])['val'].unstack()\nOut[1923]:\nkey      bar     baz      foo\nid\n2    bananas  apples  oranges\n3      kiwis    None   grapes\n</code></pre>\n\n<p>Or, a simplified <code>groupby</code></p>\n\n<pre><code>In [1926]: df.groupby([df.index, 'key'])['val'].first().unstack()\nOut[1926]:\nkey      bar     baz      foo\nid\n2    bananas  apples  oranges\n3      kiwis    None   grapes\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 312041,
                        "reputation": 77781,
                        "user_id": 625914,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/f1932d8bf4e9dbf779a48b41bbf21592?s=256&d=identicon&r=PG",
                        "display_name": "behzad.nouri",
                        "link": "https://stackoverflow.com/users/625914/behzad-nouri"
                    },
                    "is_accepted": true,
                    "score": 151,
                    "last_activity_date": 1412769439,
                    "creation_date": 1412769439,
                    "answer_id": 26256360,
                    "question_id": 26255671,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are a few ways:</p>\n\n<p>using <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot_table.html#pandas.pivot_table\" rel=\"noreferrer\"><code>.pivot_table</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; df.pivot_table(values='val', index=df.index, columns='key', aggfunc='first')\nkey      bar     baz      foo\nid                           \n2    bananas  apples  oranges\n3      kiwis     NaN   grapes\n</code></pre>\n\n<p>using <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot\" rel=\"noreferrer\"><code>.pivot</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; df.pivot(index=df.index, columns='key')['val']\nkey      bar     baz      foo\nid                           \n2    bananas  apples  oranges\n3      kiwis     NaN   grapes\n</code></pre>\n\n<p>using <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby\" rel=\"noreferrer\"><code>.groupby</code></a> followed by <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack\" rel=\"noreferrer\"><code>.unstack</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; df.reset_index().groupby(['id', 'key'])['val'].aggregate('first').unstack()\nkey      bar     baz      foo\nid                           \n2    bananas  apples  oranges\n3      kiwis     NaN   grapes\n</code></pre>\n"
                }
            ]
        },
        {
            "38707513": [
                {
                    "owner": {
                        "account_id": 3816309,
                        "reputation": 10032,
                        "user_id": 3165602,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/8b194cca5dcf6906c0911564bfb4166c?s=256&d=identicon&r=PG",
                        "display_name": "Oleg Sklyar",
                        "link": "https://stackoverflow.com/users/3165602/oleg-sklyar"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1470083412,
                    "creation_date": 1470083412,
                    "answer_id": 38707576,
                    "question_id": 38707513,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It is generally a bad practice to suppress errors or exceptions without handling them, but this can be easily done like this:</p>\n\n<pre><code>try:\n    # block raising an exception\nexcept:\n    pass # doing nothing on exception\n</code></pre>\n\n<p>This can obviously be used in any other control statement, such as a loop:</p>\n\n<pre><code>for i in xrange(0,960):\n    try:\n        ... run your code\n    except:\n        pass\n</code></pre>\n"
                }
            ]
        },
        {
            "2187583": [
                {
                    "owner": {
                        "account_id": 33994,
                        "reputation": 107390,
                        "user_id": 95612,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
                        "display_name": "Jochen Ritzel",
                        "link": "https://stackoverflow.com/users/95612/jochen-ritzel"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1265144410,
                    "creation_date": 1265144410,
                    "answer_id": 2187665,
                    "question_id": 2187583,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://docs.python.org/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">http://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>\n\n<blockquote>\n  <p>Now what happens when the user writes\n  <code>from sound.effects import *</code>? Ideally,\n  one would hope that this somehow goes\n  out to the filesystem, finds which\n  submodules are present in the package,\n  and imports them all. This could take\n  a long time and importing sub-modules\n  might have unwanted side-effects that\n  should only happen when the sub-module\n  is explicitly imported.</p>\n  \n  <p>The only solution is for the package\n  author to provide an explicit index of\n  the package. The import statement uses\n  the following convention: if a\n  package\u2019s <code>__init__.py</code> code defines a\n  list named <code>__all__</code>, it is taken to be\n  the list of module names that should\n  be imported when <code>from package import *</code>\n  is encountered. It is up to the\n  package author to keep this list\n  up-to-date when a new version of the\n  package is released. Package authors\n  may also decide not to support it, if\n  they don\u2019t see a use for importing *\n  from their package.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 2550,
                        "reputation": 200438,
                        "user_id": 3560,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=256&d=identicon&r=PG",
                        "display_name": "John Millikin",
                        "link": "https://stackoverflow.com/users/3560/john-millikin"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1265144174,
                    "creation_date": 1265144174,
                    "answer_id": 2187636,
                    "question_id": 2187583,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It has two purposes:</p>\n\n<ol>\n<li><p>Anybody who reads the source will know what the exposed public API is. It doesn't <em>prevent</em> them from poking around in private declarations, but does provide a good warning not to.</p></li>\n<li><p>When using <code>from mod import *</code>, only names listed in <code>__all__</code> will be imported. This is not as important, in my opinion, because importing everything is a <em>really</em> bad idea.</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303469,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1265144103,
                    "creation_date": 1265144103,
                    "answer_id": 2187631,
                    "question_id": 2187583,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It controls what you get pulled into your namepsace when you </p>\n\n<pre><code>from blah import *\n</code></pre>\n\n<p>See <a href=\"http://docs.python.org/tutorial/modules.html\" rel=\"nofollow noreferrer\">Importing * from a Package</a></p>\n"
                }
            ]
        },
        {
            "5636419": [
                {
                    "owner": {
                        "account_id": 5764112,
                        "reputation": 271,
                        "user_id": 12501654,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/898289346878719/picture?type=large",
                        "display_name": "Sacchit Jaiswal",
                        "link": "https://stackoverflow.com/users/12501654/sacchit-jaiswal"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1575933566,
                    "last_edit_date": 1575933566,
                    "creation_date": 1575924441,
                    "answer_id": 59256352,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>class initialclass:\n        def __init__(self):\n                self.attr1 = 'one'\n                self.attr2 = 'two'\nclass inheritedclass(initialclass):\n        def __init__(self):\n                super().__init__()\n                self.attr3 = 'three'\n        def somemethod(self):\n                print (self.attr1, self.attr2, self.attr3)\na=inheritedclass()\na.somemethod()\n\n 1. List item\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 23998,
                        "reputation": 134283,
                        "user_id": 60711,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=256&d=identicon&r=PG",
                        "display_name": "vartec",
                        "link": "https://stackoverflow.com/users/60711/vartec"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1302619368,
                    "last_edit_date": 1495541897,
                    "creation_date": 1302618189,
                    "answer_id": 5636785,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First of all you're mixing <code>__init__</code> and <code>__new__</code>, they are <a href=\"https://stackoverflow.com/questions/674304/pythons-use-of-new-and-init\">different things</a>. <code>__new__</code> doesn't take instance (<code>self</code>) as argument, it takes class (<code>cls</code>). \nAs for the main part of your question, what you have to do is use <code>super</code> to invoke superclass' <code>__init__</code>.</p>\n\n<p>Your code should look like this:</p>\n\n<pre><code>class initialclass(object):\n    def __init__(self):\n        self.attr1 = 'one'\n        self.attr2 = 'two'    \n\nclass inheritedclass(initialclass):\n    def __init__(self):\n        self.attr3 = 'three'\n        super(inheritedclass, self).__init__()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user395760"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1302617861,
                    "creation_date": 1302617861,
                    "answer_id": 5636694,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's incredibly simple. Define a new <code>__init__</code> method and call the parent's <code>__init__</code> at the beginning.</p>\n\n<pre><code># assuming a class Base, its __init__ takes one parameter x\n\nclass Derived(Base):\n    def __init__(self, x, y):\n        # whatever initialization is needed so we can say Derived is-a Base\n        super(Derived, self).__init__(x)\n        # now, add whatever makes Derived special - do your own initialization\n        self.y = y\n</code></pre>\n\n<p>In Python 3, you don't have to (and therefore propably shouldn't, for simplicity) explicitly inherit from <code>object</code> or pass the class and <code>self</code> to <code>super</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 274419,
                        "reputation": 50885,
                        "user_id": 566644,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/6722f2fff4ed219599052f1848f6b738?s=256&d=identicon&r=PG",
                        "display_name": "Lauritz V. Thaulow",
                        "link": "https://stackoverflow.com/users/566644/lauritz-v-thaulow"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1302617342,
                    "creation_date": 1302617342,
                    "answer_id": 5636568,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just call a designated method from the parent's init, if it exists:</p>\n\n<pre><code>class initialclass():\n    def __init__(self):\n        self.attr1 = 'one'\n        self.attr2 = 'two'  \n        if hasattr(self, 'init_subclass'):\n            self.init_subclass()\n\nclass inheritedclass(initialclass):\n    def init_subclass(self):\n        self.attr3 = 'three'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 358474,
                        "reputation": 1865,
                        "user_id": 699262,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/68dc989fa1d99295677d7c7b49fb6d23?s=256&d=identicon&r=PG",
                        "display_name": "Yexo",
                        "link": "https://stackoverflow.com/users/699262/yexo"
                    },
                    "is_accepted": true,
                    "score": 39,
                    "last_activity_date": 1302616896,
                    "creation_date": 1302616896,
                    "answer_id": 5636463,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As far as I know that's not possible, however you can call the init method of the superclass, like this:</p>\n\n<pre><code>class inheritedclass(initialclass):\n    def __init__(self):\n        initialclass.__init__(self)\n        self.attr3 = 'three'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 21147,
                        "reputation": 135619,
                        "user_id": 51197,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/QG9pG.jpg?s=256",
                        "display_name": "Adam Matan",
                        "link": "https://stackoverflow.com/users/51197/adam-matan"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1302616856,
                    "creation_date": 1302616856,
                    "answer_id": 5636453,
                    "question_id": 5636419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just call the parent's <code>__init__</code> using <code>super</code>:</p>\n\n<pre><code>class inheritedclass(initialclass):\n    def __new__(self):\n        self.attr3 = 'three'\n        super(initialclass, self).__init__()\n</code></pre>\n\n<p>I strongly advise to follow Python's naming conventions and start a class with a Capital letter, e.g. <code>InheritedClass</code> and <code>InitialClass</code>. This helps quickly distinguish classes from methods and variables.</p>\n"
                }
            ]
        },
        {
            "60047685": [
                {
                    "owner": {
                        "account_id": 27709424,
                        "reputation": 1026,
                        "user_id": 21152416,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Hqxeu.jpg?s=256",
                        "display_name": "Victor Egiazarian",
                        "link": "https://stackoverflow.com/users/21152416/victor-egiazarian"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1721479378,
                    "creation_date": 1721479378,
                    "answer_id": 78772793,
                    "question_id": 60047685,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would say it's rather a good practice if done wisely. Making model responsible for model related operations makes your code cleaner and clearer. I will provide a few examples that I use quite often.</p>\n<ol>\n<li>Custom <code>model_validate</code> aka <code>from_orm</code> to create a DTO / schema from a db model if field names don't match.</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>class UserDb(BaseOrmModel):\n    id = sa.Column(UUID(as_uuid=True), default=sa.func.uuid_generate_v4(), primary_key=True)\n    name = sa.Column(sa.String(), nullable=False)\n\n    posts = relationship(&quot;Post&quot;, ...)\n\n\nclass UserDTO(BaseModel):\n    username: str\n    post_messages: list[str]\n\n    @classmethod\n    def from_db_model(cls, user: UserDb) -&gt; &quot;UserDTO&quot;:\n        &quot;&quot;&quot;Build DTO based on db model provided.&quot;&quot;&quot;\n\n        return cls(\n            username=user.name,\n            post_messages=[post.message for post in user.posts]\n        )\n\n\nuser_db = user_repository.get_user(...)\nuser_dto = UserDTO.from_db_model(user=user_db)\n</code></pre>\n<ol start=\"2\">\n<li>Converting one schema to another. For example, if you get a request body and want to use it as a body for another request.</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>class UserPaddleCreateIn(BaseModel):\n    id: str\n    username: str\n\n\nclass UserCreateIn(BaseModel):\n    id: UUID\n    name: str\n    age: int\n\n    def to_paddle_schema(self) -&gt; UserPaddleCreateIn:\n        &quot;&quot;&quot;Convert schema to input for Paddle requests.&quot;&quot;&quot;\n\n        return UserPaddleCreateIn(\n            id=f&quot;paddle_{self.id!r}&quot;,\n            username=self.name,\n        )\n\n\n@router.post(&quot;/users&quot;, summary=&quot;User signup&quot;, ...)\nasync def signup(user: UserCreateIn) -&gt; UserCreateOut:\n    # Preprocess user\n    paddle_client.create_user(user=user.to_paddle_schema())\n    # Do something else\n</code></pre>\n<ol start=\"3\">\n<li>Build schemas with predefined values. Useful as a shortcut when you have a lot of fields in your schema.</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>class Access(Enum):\n    PERMITTED = &quot;permitted&quot;\n    PROHIBITED = &quot;prohibited&quot;\n\n\nclass Permissions(BaseModel):\n    users: Access\n    posts: Access\n    comments: Access\n\n    @classmethod\n    def all_permitted(cls) -&gt; &quot;Permissions&quot;:\n        &quot;&quot;&quot;Build max permissions.&quot;&quot;&quot;\n\n        return cls(\n            users=Access.PERMITTED,\n            posts=Access.PERMITTED,\n            comments=Access.PERMITTED\n        )\n\n    @classmethod\n    def all_prohibited(cls) -&gt; &quot;Permissions&quot;:\n        &quot;&quot;&quot;Build min permissions.&quot;&quot;&quot;\n\n        return cls(\n            users=Access.PROHIBITED,\n            posts=Access.PROHIBITED,\n            comments=Access.PROHIBITED\n        )\n\n\npermissions = Permissions.all_permitted()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 915658,
                        "reputation": 13119,
                        "user_id": 949890,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://i.sstatic.net/5RSJE.jpg?s=256",
                        "display_name": "Samuel Colvin",
                        "link": "https://stackoverflow.com/users/949890/samuel-colvin"
                    },
                    "is_accepted": true,
                    "score": 77,
                    "last_activity_date": 1581010652,
                    "last_edit_date": 1581010652,
                    "creation_date": 1580774544,
                    "answer_id": 60048805,
                    "question_id": 60047685,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yes, it's fine. We should probably document it.</p>\n\n<p>The only problem comes when you have a field name which conflicts with the method, but that's not a problem if you know what your data looks like. Also, it's possible to over object orient your code, but you're a long way from that.</p>\n"
                }
            ]
        },
        {
            "14590279": [
                {
                    "owner": {
                        "account_id": 114804,
                        "reputation": 6234,
                        "user_id": 301749,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/0db17b931de393be1705d8e76eea4bc2?s=256&d=identicon&r=PG",
                        "display_name": "jeffknupp",
                        "link": "https://stackoverflow.com/users/301749/jeffknupp"
                    },
                    "is_accepted": true,
                    "score": 90,
                    "last_activity_date": 1359486185,
                    "creation_date": 1359486185,
                    "answer_id": 14590294,
                    "question_id": 14590279,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Subprocess is a module. You need to import it.</p>\n\n<p>Put this as the second line in your file: <code>import subprocess</code></p>\n"
                }
            ]
        },
        {
            "573768": [
                {
                    "owner": {
                        "account_id": 10472,
                        "reputation": 1691,
                        "user_id": 19814,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/09a6862b8fefcd93adefe2352976496d?s=256&d=identicon&r=PG",
                        "display_name": "Luka Marinko",
                        "link": "https://stackoverflow.com/users/19814/luka-marinko"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1492860018,
                    "last_edit_date": 1492860018,
                    "creation_date": 1235253184,
                    "answer_id": 573805,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I came across <a href=\"http://www.nltk.org/\" rel=\"nofollow noreferrer\">Natural Language Toolkit</a> a while ago. You could probably use it as a starting point. It also has a lot of modules and addons, so maybe they already have something similar.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 204382,
                        "reputation": 11389,
                        "user_id": 517336,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/0c4c1736becefccc7bc4ef863687797a?s=256&d=identicon&r=PG",
                        "display_name": "Sonson123",
                        "link": "https://stackoverflow.com/users/517336/sonson123"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1407916784,
                    "creation_date": 1407916784,
                    "answer_id": 25280946,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Maybe <a href=\"http://textblob.readthedocs.org/en/dev/\" rel=\"nofollow\">TextBlob</a> (based on NLTK and pattern) is the right sentiment analysis tool for you.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 288627,
                        "reputation": 6706,
                        "user_id": 589165,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://www.gravatar.com/avatar/6ab25467e258f303d8d9a9fa75145c93?s=256&d=identicon&r=PG",
                        "display_name": "Finn &#197;rup Nielsen",
                        "link": "https://stackoverflow.com/users/589165/finn-%c3%85rup-nielsen"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1405505681,
                    "last_edit_date": 1405505681,
                    "creation_date": 1310997250,
                    "answer_id": 6733983,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have constructed a word list labeled with sentiment. You can access it from here:</p>\n\n<p><a href=\"http://www2.compute.dtu.dk/pubdb/views/edoc_download.php/6010/zip/imm6010.zip\" rel=\"nofollow noreferrer\">http://www2.compute.dtu.dk/pubdb/views/edoc_download.php/6010/zip/imm6010.zip</a></p>\n\n<p>You will find a short Python program on my blog: </p>\n\n<p><a href=\"http://finnaarupnielsen.wordpress.com/2011/06/20/simplest-sentiment-analysis-in-python-with-af/\" rel=\"nofollow noreferrer\">http://finnaarupnielsen.wordpress.com/2011/06/20/simplest-sentiment-analysis-in-python-with-af/</a></p>\n\n<p>This post displays how to use the word list with single sentences as well as with Twitter.</p>\n\n<p>Word lists approaches have their limitations. You will find a investigation of the limitations of my word list in the article \"A new ANEW: Evaluation of a word list for sentiment analysis in microblogs\". That article is available from my homepage.</p>\n\n<p>Please note a <code>unicode(s, 'utf-8')</code> is missing from the code (for paedagogic reasons).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1910006,
                        "reputation": 25261,
                        "user_id": 2327328,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://i.sstatic.net/S9zSI.jpg?s=256",
                        "display_name": "philshem",
                        "link": "https://stackoverflow.com/users/2327328/philshem"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1395054752,
                    "creation_date": 1395054752,
                    "answer_id": 22452811,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For those interested in coding Twitter Sentiment Analyis from scratch, there is a Coursera course \"<a href=\"https://www.coursera.org/course/datasci\" rel=\"nofollow\">Data Science</a>\" with python code on GitHub (as part of assignment 1 - <a href=\"https://github.com/uwescience/datasci_course_materials/tree/master/assignment1\" rel=\"nofollow\">link</a>). The sentiments are part of the <a href=\"https://github.com/uwescience/datasci_course_materials/blob/master/assignment1/AFINN-README.txt\" rel=\"nofollow\">AFINN-111</a>.</p>\n\n<p>You can find working solutions, for example <a href=\"https://github.com/calvdee/coursera-data-sci/tree/master/assignment1\" rel=\"nofollow\">here</a>. In addition to the AFINN-111 sentiment list, there is a simple implementation of builing a dynamic term list based on frequency of terms in tweets that have a pos/neg score (see <a href=\"https://github.com/calvdee/coursera-data-sci/blob/master/assignment1/term_sentiment.py\" rel=\"nofollow\">here</a>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24693,
                        "reputation": 21940,
                        "user_id": 62970,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/d3bcb48eb7c81b50b4eac82f009001dd?s=256&d=identicon&r=PG",
                        "display_name": "MarkusQ",
                        "link": "https://stackoverflow.com/users/62970/markusq"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1375874614,
                    "last_edit_date": 1375874614,
                    "creation_date": 1236110047,
                    "answer_id": 607885,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Good luck with that.</p>\n\n<p>Sentiment is enormously contextual, and tweeting culture makes the problem worse because <em>you aren't given the context</em> for most tweets.  The whole point of twitter is that you can leverage the huge amount of shared \"real world\" context to pack meaningful communication in a very short message.</p>\n\n<p>If they say the video is bad, does that mean bad, or <em>bad</em>?</p>\n\n<blockquote>\n  <p>A linguistics professor was lecturing\n  to her class one day. \"In English,\"\n  she said, \"A double negative forms a\n  positive. In some languages, though,\n  such as Russian, a double negative is\n  still a negative. However, there is no\n  language wherein a double positive can\n  form a negative.\"</p>\n  \n  <p>A voice from the back of the room\n  piped up, \"Yeah . . .right.\"</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 781654,
                        "reputation": 21,
                        "user_id": 842362,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/305312a8bbfa6d60c1d40626ac3e16a1?s=256&d=identicon&r=PG",
                        "display_name": "cyhex",
                        "link": "https://stackoverflow.com/users/842362/cyhex"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1353136880,
                    "last_edit_date": 1353136880,
                    "creation_date": 1310548982,
                    "answer_id": 6676746,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Take a look at <a href=\"http://smm.streamcrab.com\" rel=\"nofollow\">Twitter sentiment analysis tool</a>. It's written in python, and it uses Naive Bayes classifier with semi-supervised machine learning. The source can be found <a href=\"https://github.com/cyhex/smm\" rel=\"nofollow\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 61067,
                        "reputation": 6541,
                        "user_id": 182155,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/822e9dcb98370997e2fc5a1a5d7b920c?s=256&d=identicon&r=PG",
                        "display_name": "Eugene Osovetsky",
                        "link": "https://stackoverflow.com/users/182155/eugene-osovetsky"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1268446065,
                    "creation_date": 1268446065,
                    "answer_id": 2436991,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's a Twitter Sentiment API by TweetFeel that does advanced linguistic analysis of tweets, and can retrieve positive/negative tweets. See <a href=\"http://www.webservius.com/corp/docs/tweetfeel_sentiment.htm\" rel=\"nofollow noreferrer\">http://www.webservius.com/corp/docs/tweetfeel_sentiment.htm</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6167,
                        "reputation": 7649,
                        "user_id": 10272,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/2cdc5c3059c40c76d5ca7bec8d149f9e?s=256&d=identicon&r=PG",
                        "display_name": "Ran",
                        "link": "https://stackoverflow.com/users/10272/ran"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1237467847,
                    "creation_date": 1237467847,
                    "answer_id": 662118,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Thanks everyone for your suggestions, they were indeed very useful!\nI ended up using a Naive Bayesian classifier, which I borrowed from <a href=\"http://www.divmod.org/trac/wiki/DivmodReverend\" rel=\"noreferrer\">here</a>. \nI started by feeding it with a list of good/bad keywords and then added a \"learn\" feature by employing user feedback. It turned out to work pretty nice.</p>\n\n<p>The full details of my work as in a <a href=\"http://www.gbsheli.com/2009/03/twitgraph-en.html\" rel=\"noreferrer\">blog post</a>.</p>\n\n<p>Again, your help was very useful, so thank you!</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user18015"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1237184560,
                    "creation_date": 1237184560,
                    "answer_id": 649418,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Somewhat wacky thought: you could try using the Twitter API to download a large set of tweets, and then classifying a subset of that set using emoticons: one positive group for  \":)\", \":]\", \":D\", etc, and another negative group with \":(\", etc.</p>\n\n<p>Once you have that crude classification, you could search for more clues with frequency or ngram analysis or something along those lines.</p>\n\n<p>It may seem silly, but serious research has been done on this (search for \"sentiment analysis\" and emoticon). Worth a look.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 3987,
                        "reputation": 15901,
                        "user_id": 5856,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c97876b3b4e3954ca92f8a12745d800b?s=256&d=identicon&r=PG",
                        "display_name": "Stompchicken",
                        "link": "https://stackoverflow.com/users/5856/stompchicken"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1236854053,
                    "last_edit_date": 1236854053,
                    "creation_date": 1235256605,
                    "answer_id": 573859,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think you may find it difficult to find what you're after. The closest thing that I know of is <a href=\"http://alias-i.com/lingpipe/index.html\" rel=\"nofollow noreferrer\">LingPipe</a>, which has some <a href=\"http://alias-i.com/lingpipe/demos/tutorial/sentiment/read-me.html\" rel=\"nofollow noreferrer\">sentiment analysis functionality</a> and is available under a limited kind of open-source licence, but is written in Java.</p>\n\n<p>Also, sentiment analysis systems are usually developed by training a system on product/movie review data which is significantly different from the average tweet. They are going to be optimised for text with several sentences, all about the same topic. I suspect you would do better coming up with a rule-based system yourself, perhaps based on a lexicon of sentiment terms like <a href=\"http://www.cs.pitt.edu/mpqa/\" rel=\"nofollow noreferrer\">the one the University of Pittsburgh provide</a>.</p>\n\n<p>Check out <a href=\"http://www.wefeelfine.org/\" rel=\"nofollow noreferrer\">We Feel Fine</a> for an implementation of similar idea with a really beautiful interface (and <a href=\"http://twitrratr.com/\" rel=\"nofollow noreferrer\">twitrratr</a>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11872,
                        "reputation": 6668,
                        "user_id": 23102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bd87354fbc19d5e7924fc6687fcf3104?s=256&d=identicon&r=PG",
                        "display_name": "Robert Elwell",
                        "link": "https://stackoverflow.com/users/23102/robert-elwell"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1235262383,
                    "creation_date": 1235262383,
                    "answer_id": 574015,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>With most of these kinds of applications, you'll have to roll much of your own code for a statistical classification task. As Lucka suggested, NLTK is the perfect tool for natural language manipulation in Python, so long as your goal doesn't interfere with the non commercial nature of its license.  However, I would suggest other software packages for modeling.  I haven't found many strong advanced machine learning models available for Python, so I'm going to suggest some standalone binaries that easily cooperate with it.</p>\n\n<p>You may be interested in <a href=\"http://tadm.sf.net\" rel=\"noreferrer\">The Toolkit for Advanced Discriminative Modeling</a>, which can be easily interfaced with Python.  This has been used for classification tasks in various areas of natural language processing.  You also have a pick of a number of different models.  I'd suggest starting with Maximum Entropy classification so long as you're already familiar with implementing a Naive Bayes classifier.  If not, you may want to look into it and code one up to really get a decent understanding of statistical classification as a machine learning task.</p>\n\n<p>The University of Texas at Austin computational linguistics groups have held classes where most of the projects coming out of them have used this great tool.  You can look at the course page for <a href=\"http://comp.ling.utexas.edu/jbaldrid/courses/2006/cl2/\" rel=\"noreferrer\">Computational Linguistics II</a> to get an idea of how to make it work and what previous applications it has served.</p>\n\n<p>Another great tool which works in the same vein is <a href=\"http://mallet.cs.umass.edu/\" rel=\"noreferrer\">Mallet</a>.  The difference between Mallet is that there's a bit more documentation and some more models available, such as decision trees, and it's in Java, which, in my opinion, makes it a little slower.  <a href=\"http://www.cs.waikato.ac.nz/ml/weka/\" rel=\"noreferrer\">Weka</a> is a whole suite of different machine learning models in one big package that includes some graphical stuff, but it's really mostly meant for pedagogical purposes, and isn't really something I'd put into production.</p>\n\n<p>Good luck with your task.  The real difficult part will probably be the amount of knowledge engineering required up front for you to classify the 'seed set' off of which your model will learn.  It needs to be pretty sizeable, depending on whether you're doing binary classification (happy vs sad) or a whole range of emotions (which will require even more).  Make sure to hold out some of this engineered data for testing, or run some tenfold or remove-one tests to make sure you're actually doing a good job predicting before you put it out there. And most of all, have fun!  This is the best part of NLP and AI, in my opinion.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Ben Coe"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1235257464,
                    "creation_date": 1235257464,
                    "answer_id": 573875,
                    "question_id": 573768,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A lot of research papers indicate that a good starting point for sentiment analysis is looking at adjectives, e.g., are they positive adjectives or negative adjectives. For a short block of text this is pretty much your only option... There are papers that look at entire documents, or sentence level analysis, but as you say tweets are quite short... There is no real magic approach to understanding the sentiment of a sentence, so I think your best bet would be hunting down one of these research papers and trying to get their data-set of positively/negatively oriented adjectives.</p>\n\n<p>Now, this having been said, sentiment is domain specific, and you might find it difficult to get a high-level of accuracy with a general purpose data-set.</p>\n\n<p>Good luck.</p>\n"
                }
            ]
        },
        {
            "5194057": [
                {
                    "owner": {
                        "account_id": 1741194,
                        "reputation": 4583,
                        "user_id": 3486460,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2330c22c3384aadb0ecd96ecc37f4b29?s=256&d=identicon&r=PG",
                        "display_name": "kamran kausar",
                        "link": "https://stackoverflow.com/users/3486460/kamran-kausar"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1720426070,
                    "last_edit_date": 1720426070,
                    "creation_date": 1578421576,
                    "answer_id": 59634071,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>UNITS = {1000: ['KB', 'MB', 'GB'],\n            1024: ['KiB', 'MiB', 'GiB']}\n\ndef approximate_size(size, use_base_1024=True):\n    mult = 1024 if use_base_1024 else 1000\n    for unit in UNITS[mult]:\n        size = size / mult\n        if size &lt; mult:\n            return '{0:.3f} {1}'.format(size, unit)\n            \napproximate_size(2123, False)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10839978,
                        "reputation": 823,
                        "user_id": 7971585,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/8L6LW.jpg?s=256",
                        "display_name": "Peter F",
                        "link": "https://stackoverflow.com/users/7971585/peter-f"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1665297867,
                    "last_edit_date": 1665297867,
                    "creation_date": 1538873319,
                    "answer_id": 52684562,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here are some easy-to-copy one liners to use if you already know what unit size you want.  If you're looking for in a more generic function with a few nice options, see my FEB 2021 update further on...</p>\n<h3>Bytes</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath):,} B&quot;) \n</code></pre>\n<h3>Kilobits</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;7):,.0f} kb&quot;)\n</code></pre>\n<h3>Kilobytes</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;10):,.0f} KB&quot;)\n</code></pre>\n<h3>Megabits</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;17):,.0f} mb&quot;)\n</code></pre>\n<h3>Megabytes</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;20):,.0f} MB&quot;)\n</code></pre>\n<h3>Gigabits</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;27):,.0f} gb&quot;)\n</code></pre>\n<h3>Gigabytes</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;30):,.0f} GB&quot;)\n</code></pre>\n<h3>Terabytes</h3>\n<pre><code>print(f&quot;{os.path.getsize(filepath)/(1&lt;&lt;40):,.0f} TB&quot;)\n</code></pre>\n<hr />\n<p><strong>UPDATE FEB 2021</strong>\nHere are my updated and fleshed-out functions to a) get file/folder size, b) convert into desired units:</p>\n<pre><code>from pathlib import Path\n\ndef get_path_size(path = Path('.'), recursive=False):\n    &quot;&quot;&quot;\n    Gets file size, or total directory size\n\n    Parameters\n    ----------\n    path: str | pathlib.Path\n        File path or directory/folder path\n\n    recursive: bool\n        True -&gt; use .rglob i.e. include nested files and directories\n        False -&gt; use .glob i.e. only process current directory/folder\n\n    Returns\n    -------\n    int:\n        File size or recursive directory size in bytes\n        Use cleverutils.format_bytes to convert to other units e.g. MB\n    &quot;&quot;&quot;\n    path = Path(path)\n    if path.is_file():\n        size = path.stat().st_size\n    elif path.is_dir():\n        path_glob = path.rglob('*.*') if recursive else path.glob('*.*')\n        size = sum(file.stat().st_size for file in path_glob)\n    return size\n\n\ndef format_bytes(bytes, unit, SI=False):\n    &quot;&quot;&quot;\n    Converts bytes to common units such as kb, kib, KB, mb, mib, MB\n\n    Parameters\n    ---------\n    bytes: int\n        Number of bytes to be converted\n\n    unit: str\n        Desired unit of measure for output\n\n\n    SI: bool\n        True -&gt; Use SI standard e.g. KB = 1000 bytes\n        False -&gt; Use JEDEC standard e.g. KB = 1024 bytes\n\n    Returns\n    -------\n    str:\n        E.g. &quot;7 MiB&quot; where MiB is the original unit abbreviation supplied\n    &quot;&quot;&quot;\n    if unit.lower() in &quot;b bit bits&quot;.split():\n        return f&quot;{bytes*8} {unit}&quot;\n    unitN = unit[0].upper()+unit[1:].replace(&quot;s&quot;,&quot;&quot;)  # Normalised\n    reference = {&quot;Kb Kib Kibibit Kilobit&quot;: (7, 1),\n                 &quot;KB KiB Kibibyte Kilobyte&quot;: (10, 1),\n                 &quot;Mb Mib Mebibit Megabit&quot;: (17, 2),\n                 &quot;MB MiB Mebibyte Megabyte&quot;: (20, 2),\n                 &quot;Gb Gib Gibibit Gigabit&quot;: (27, 3),\n                 &quot;GB GiB Gibibyte Gigabyte&quot;: (30, 3),\n                 &quot;Tb Tib Tebibit Terabit&quot;: (37, 4),\n                 &quot;TB TiB Tebibyte Terabyte&quot;: (40, 4),\n                 &quot;Pb Pib Pebibit Petabit&quot;: (47, 5),\n                 &quot;PB PiB Pebibyte Petabyte&quot;: (50, 5),\n                 &quot;Eb Eib Exbibit Exabit&quot;: (57, 6),\n                 &quot;EB EiB Exbibyte Exabyte&quot;: (60, 6),\n                 &quot;Zb Zib Zebibit Zettabit&quot;: (67, 7),\n                 &quot;ZB ZiB Zebibyte Zettabyte&quot;: (70, 7),\n                 &quot;Yb Yib Yobibit Yottabit&quot;: (77, 8),\n                 &quot;YB YiB Yobibyte Yottabyte&quot;: (80, 8),\n                 }\n    key_list = '\\n'.join([&quot;     b Bit&quot;] + [x for x in reference.keys()]) +&quot;\\n&quot;\n    if unitN not in key_list:\n        raise IndexError(f&quot;\\n\\nConversion unit must be one of:\\n\\n{key_list}&quot;)\n    units, divisors = [(k,v) for k,v in reference.items() if unitN in k][0]\n    if SI:\n        divisor = 1000**divisors[1]/8 if &quot;bit&quot; in units else 1000**divisors[1]\n    else:\n        divisor = float(1 &lt;&lt; divisors[0])\n    value = bytes / divisor\n    return f&quot;{value:,.0f} {unitN}{(value != 1 and len(unitN) &gt; 3)*'s'}&quot;\n\n\n# Tests \n&gt;&gt;&gt; assert format_bytes(1,&quot;b&quot;) == '8 b'\n&gt;&gt;&gt; assert format_bytes(1,&quot;bits&quot;) == '8 bits'\n&gt;&gt;&gt; assert format_bytes(1024, &quot;kilobyte&quot;) == &quot;1 Kilobyte&quot;\n&gt;&gt;&gt; assert format_bytes(1024, &quot;kB&quot;) == &quot;1 KB&quot;\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;mb&quot;) == '54 Mb'\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;mib&quot;) == '54 Mib'\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;Mb&quot;) == '54 Mb'\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;MB&quot;) == '7 MB'\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;mebibytes&quot;) == '7 Mebibytes'\n&gt;&gt;&gt; assert format_bytes(7141000, &quot;gb&quot;) == '0 Gb'\n&gt;&gt;&gt; assert format_bytes(1000000, &quot;kB&quot;) == '977 KB'\n&gt;&gt;&gt; assert format_bytes(1000000, &quot;kB&quot;, SI=True) == '1,000 KB'\n&gt;&gt;&gt; assert format_bytes(1000000, &quot;kb&quot;) == '7,812 Kb'\n&gt;&gt;&gt; assert format_bytes(1000000, &quot;kb&quot;, SI=True) == '8,000 Kb'\n&gt;&gt;&gt; assert format_bytes(125000, &quot;kb&quot;) == '977 Kb'\n&gt;&gt;&gt; assert format_bytes(125000, &quot;kb&quot;, SI=True) == '1,000 Kb'\n&gt;&gt;&gt; assert format_bytes(125*1024, &quot;kb&quot;) == '1,000 Kb'\n&gt;&gt;&gt; assert format_bytes(125*1024, &quot;kb&quot;, SI=True) == '1,024 Kb'\n</code></pre>\n<hr />\n<p><strong>UPDATE OCT 2022</strong></p>\n<p><em>My answer to a recent comment was too long, so here's some further explanation of the 1&lt;&lt;20 magic!  I also notice that <em>float</em> isn't needed so I've removed that from the examples above.</em></p>\n<p>As stated in another reply (above) &quot;&lt;&lt;&quot; is called a &quot;bitwise operator&quot;.   It converts the left hand side to binary and moves the binary digits 20 places to the left (in this case).   When we count normally in decimal, the total number of digits dictates whether we've reached the tens, hundreds, thousands, millions etc.  Similar thing in binary except the number of digits dictates whether we're talking bits, bytes, kilobytes, megabytes etc.  So.... 1&lt;&lt;20 is actually the same as (binary) 1 with 20 (binary) zeros after it, or if you remember how to convert from binary to decimal: 2 to the power of 20 (2**20) which equals 1048576.  In the snippets above, os.path.getsize returns a value in BYTES and 1048576 bytes are strictly speaking a Mebibyte (MiB) and casually speaking a Megabyte (MB).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10075303,
                        "reputation": 873,
                        "user_id": 7755797,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/kJe38.jpg?s=256",
                        "display_name": "rhoitjadhav",
                        "link": "https://stackoverflow.com/users/7755797/rhoitjadhav"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1617345766,
                    "last_edit_date": 1617345766,
                    "creation_date": 1575457855,
                    "answer_id": 59174649,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here it is:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def convert_bytes(size):\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size &lt; 1024.0:\n            return &quot;%3.1f %s&quot; % (size, x)\n        size /= 1024.0\n\n    return size\n</code></pre>\n<p>Output</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; convert_bytes(1024)\n'1.0 KB'\n&gt;&gt;&gt; convert_bytes(102400)\n'100.0 KB'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3805400,
                        "reputation": 221,
                        "user_id": 3157974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c873afd2a1a059a2d82ebad7f3002f93?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy",
                        "link": "https://stackoverflow.com/users/3157974/jeremy"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1606703055,
                    "creation_date": 1606703055,
                    "answer_id": 65067356,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I wanted 2 way conversion, and I wanted to use Python 3 format() support to be most pythonic. Maybe try datasize library module? <a href=\"https://pypi.org/project/datasize/\" rel=\"nofollow noreferrer\">https://pypi.org/project/datasize/</a></p>\n<pre><code>$ pip install -qqq datasize\n$ python\n...\n&gt;&gt;&gt; from datasize import DataSize\n&gt;&gt;&gt; 'My new {:GB} SSD really only stores {:.2GiB} of data.'.format(DataSize('750GB'),DataSize(DataSize('750GB') * 0.8))\n'My new 750GB SSD really only stores 558.79GiB of data.'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64856,
                        "reputation": 31438,
                        "user_id": 191246,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/zRo29.png?s=256",
                        "display_name": "ccpizza",
                        "link": "https://stackoverflow.com/users/191246/ccpizza"
                    },
                    "is_accepted": false,
                    "score": 62,
                    "last_activity_date": 1565965712,
                    "last_edit_date": 1565965712,
                    "creation_date": 1350382284,
                    "answer_id": 12912296,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of a size divisor of <code>1024 * 1024</code> you could use the <code>&lt;&lt;</code> <a href=\"https://docs.python.org/3.3/reference/expressions.html?highlight=bitwise#shifting-operations\" rel=\"noreferrer\">bitwise shifting operator</a>, i.e. <code>1&lt;&lt;20</code> to get megabytes, <code>1&lt;&lt;30</code> to get gigabytes, etc.</p>\n\n<p>In the simplest scenario you can have e.g. a constant <code>MBFACTOR = float(1&lt;&lt;20)</code> which can then be used with bytes, i.e.: <code>megas = size_in_bytes/MBFACTOR</code>. </p>\n\n<p>Megabytes are usually all that you need, or otherwise something like this can be used:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code># bytes pretty-printing\nUNITS_MAPPING = [\n    (1&lt;&lt;50, ' PB'),\n    (1&lt;&lt;40, ' TB'),\n    (1&lt;&lt;30, ' GB'),\n    (1&lt;&lt;20, ' MB'),\n    (1&lt;&lt;10, ' KB'),\n    (1, (' byte', ' bytes')),\n]\n\n\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Get human-readable file sizes.\n    simplified version of https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes &gt;= factor:\n            break\n    amount = int(bytes / factor)\n\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix\n        if amount == 1:\n            suffix = singular\n        else:\n            suffix = multiple\n    return str(amount) + suffix\n\nprint(pretty_size(1))\nprint(pretty_size(42))\nprint(pretty_size(4096))\nprint(pretty_size(238048577))\nprint(pretty_size(334073741824))\nprint(pretty_size(96995116277763))\nprint(pretty_size(3125899904842624))\n\n## [Out] ###########################\n1 byte\n42 bytes\n4 KB\n227 MB\n311 GB\n88 TB\n2 PB\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1053986,
                        "reputation": 3921,
                        "user_id": 1057102,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/aa4ab1bb8e4d2ecfcfd5e70d61359ee2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "sleblanc",
                        "link": "https://stackoverflow.com/users/1057102/sleblanc"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1558390642,
                    "creation_date": 1558390642,
                    "answer_id": 56228851,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is my implementation:</p>\n\n<pre><code>from bisect import bisect\n\ndef to_filesize(bytes_num, si=True):\n    decade = 1000 if si else 1024\n    partitions = tuple(decade ** n for n in range(1, 6))\n    suffixes = tuple('BKMGTP')\n\n    i = bisect(partitions, bytes_num)\n    s = suffixes[i]\n\n    for n in range(i):\n        bytes_num /= decade\n\n    f = '{:.3f}'.format(bytes_num)\n\n    return '{}{}'.format(f.rstrip('0').rstrip('.'), s)\n</code></pre>\n\n<p>It will print up to three decimals and it strips trailing zeros and periods. The boolean parameter <code>si</code> will toggle usage of 10-based vs. 2-based size magnitude.</p>\n\n<p>This is its counterpart. It allows to write clean configuration files like <code>{'maximum_filesize': from_filesize('10M')</code>. It returns an integer that approximates the intended filesize. I am not using bit shifting because the source value is a floating point number (it will accept <code>from_filesize('2.15M')</code> just fine). Converting it to an integer/decimal would work but makes the code more complicated and it already works as it is.</p>\n\n<pre><code>def from_filesize(spec, si=True):\n    decade = 1000 if si else 1024\n    suffixes = tuple('BKMGTP')\n\n    num = float(spec[:-1])\n    s = spec[-1]\n    i = suffixes.index(s)\n\n    for n in range(i):\n        num *= decade\n\n    return int(num)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18774,
                        "reputation": 643,
                        "user_id": 43370,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f857cd712f02fcee2bb7b5504394621?s=256&d=identicon&r=PG",
                        "display_name": "Keith",
                        "link": "https://stackoverflow.com/users/43370/keith"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1543624285,
                    "creation_date": 1543624285,
                    "answer_id": 53566690,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's a version that matches the output of <em>ls -lh</em>.</p>\n\n<pre><code>def human_size(num: int) -&gt; str:\n    base = 1\n    for unit in ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']:\n        n = num / base\n        if n &lt; 9.95 and unit != 'B':\n            # Less than 10 then keep 1 decimal place\n            value = \"{:.1f}{}\".format(n, unit)\n            return value\n        if round(n) &lt; 1000:\n            # Less than 4 digits so use this\n            value = \"{}{}\".format(round(n), unit)\n            return value\n        base *= 1024\n    value = \"{}{}\".format(round(n), unit)\n    return value\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5745825,
                        "reputation": 12608,
                        "user_id": 4537090,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://i.sstatic.net/Dwxvn.jpg?s=256",
                        "display_name": "WesternGun",
                        "link": "https://stackoverflow.com/users/4537090/westerngun"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1509985254,
                    "creation_date": 1509985254,
                    "answer_id": 47141366,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here my two cents, which permits casting up and down, and adds customizable precision:</p>\n\n<pre><code>def convertFloatToDecimal(f=0.0, precision=2):\n    '''\n    Convert a float to string of decimal.\n    precision: by default 2.\n    If no arg provided, return \"0.00\".\n    '''\n    return (\"%.\" + str(precision) + \"f\") % f\n\ndef formatFileSize(size, sizeIn, sizeOut, precision=0):\n    '''\n    Convert file size to a string representing its value in B, KB, MB and GB.\n    The convention is based on sizeIn as original unit and sizeOut\n    as final unit. \n    '''\n    assert sizeIn.upper() in {\"B\", \"KB\", \"MB\", \"GB\"}, \"sizeIn type error\"\n    assert sizeOut.upper() in {\"B\", \"KB\", \"MB\", \"GB\"}, \"sizeOut type error\"\n    if sizeIn == \"B\":\n        if sizeOut == \"KB\":\n            return convertFloatToDecimal((size/1024.0), precision)\n        elif sizeOut == \"MB\":\n            return convertFloatToDecimal((size/1024.0**2), precision)\n        elif sizeOut == \"GB\":\n            return convertFloatToDecimal((size/1024.0**3), precision)\n    elif sizeIn == \"KB\":\n        if sizeOut == \"B\":\n            return convertFloatToDecimal((size*1024.0), precision)\n        elif sizeOut == \"MB\":\n            return convertFloatToDecimal((size/1024.0), precision)\n        elif sizeOut == \"GB\":\n            return convertFloatToDecimal((size/1024.0**2), precision)\n    elif sizeIn == \"MB\":\n        if sizeOut == \"B\":\n            return convertFloatToDecimal((size*1024.0**2), precision)\n        elif sizeOut == \"KB\":\n            return convertFloatToDecimal((size*1024.0), precision)\n        elif sizeOut == \"GB\":\n            return convertFloatToDecimal((size/1024.0), precision)\n    elif sizeIn == \"GB\":\n        if sizeOut == \"B\":\n            return convertFloatToDecimal((size*1024.0**3), precision)\n        elif sizeOut == \"KB\":\n            return convertFloatToDecimal((size*1024.0**2), precision)\n        elif sizeOut == \"MB\":\n            return convertFloatToDecimal((size*1024.0), precision)\n</code></pre>\n\n<p>Add <code>TB</code>, etc, as you wish.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2354920,
                        "reputation": 16830,
                        "user_id": 2062973,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/GD1pm.png?s=256",
                        "display_name": "James Sapam",
                        "link": "https://stackoverflow.com/users/2062973/james-sapam"
                    },
                    "is_accepted": false,
                    "score": 271,
                    "last_activity_date": 1492890033,
                    "last_edit_date": 1492890033,
                    "creation_date": 1360622099,
                    "answer_id": 14822210,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is what I use: </p>\n\n<pre><code>import math\n\ndef convert_size(size_bytes):\n   if size_bytes == 0:\n       return \"0B\"\n   size_name = (\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\")\n   i = int(math.floor(math.log(size_bytes, 1024)))\n   p = math.pow(1024, i)\n   s = round(size_bytes / p, 2)\n   return \"%s %s\" % (s, size_name[i])\n</code></pre>\n\n<p>NB : size should be sent in Bytes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1362290,
                        "reputation": 10202,
                        "user_id": 1515697,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/733f4b3d2139b2faa5188c9656785e50?s=256&d=identicon&r=PG",
                        "display_name": "Romeo Mihalcea",
                        "link": "https://stackoverflow.com/users/1515697/romeo-mihalcea"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1477935349,
                    "creation_date": 1477935349,
                    "answer_id": 40347452,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just in case anyone's searching for the reverse of this problem (as I sure did) here's what works for me:</p>\n\n<pre><code>def get_bytes(size, suffix):\n    size = int(float(size))\n    suffix = suffix.lower()\n\n    if suffix == 'kb' or suffix == 'kib':\n        return size &lt;&lt; 10\n    elif suffix == 'mb' or suffix == 'mib':\n        return size &lt;&lt; 20\n    elif suffix == 'gb' or suffix == 'gib':\n        return size &lt;&lt; 30\n\n    return False\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3210808,
                        "reputation": 19073,
                        "user_id": 2710873,
                        "user_type": "registered",
                        "accept_rate": 33,
                        "profile_image": "https://i.sstatic.net/pBhk3Luf.jpg?s=256",
                        "display_name": "Pavan Gupta",
                        "link": "https://stackoverflow.com/users/2710873/pavan-gupta"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1449600802,
                    "last_edit_date": 1449600802,
                    "creation_date": 1439553656,
                    "answer_id": 32009595,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the compact function to calculate size</p>\n\n<pre><code>def GetHumanReadable(size,precision=2):\n    suffixes=['B','KB','MB','GB','TB']\n    suffixIndex = 0\n    while size &gt; 1024 and suffixIndex &lt; 4:\n        suffixIndex += 1 #increment the index of the suffix\n        size = size/1024.0 #apply the division\n    return \"%.*f%s\"%(precision,size,suffixes[suffixIndex])\n</code></pre>\n\n<p>For more detailed output and vice versa operation please refer: <a href=\"http://code.activestate.com/recipes/578019-bytes-to-human-human-to-bytes-converter/\">http://code.activestate.com/recipes/578019-bytes-to-human-human-to-bytes-converter/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 43211,
                        "reputation": 171843,
                        "user_id": 126214,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=256&d=identicon&r=PG",
                        "display_name": "Lennart Regebro",
                        "link": "https://stackoverflow.com/users/126214/lennart-regebro"
                    },
                    "is_accepted": true,
                    "score": 151,
                    "last_activity_date": 1299246120,
                    "last_edit_date": 1299246120,
                    "creation_date": 1299245457,
                    "answer_id": 5194348,
                    "question_id": 5194057,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There is <a href=\"http://pypi.python.org/pypi/hurry.filesize/\" rel=\"noreferrer\">hurry.filesize</a> that will take the size in bytes and make a nice string out if it.</p>\n\n<pre><code>&gt;&gt;&gt; from hurry.filesize import size\n&gt;&gt;&gt; size(11000)\n'10K'\n&gt;&gt;&gt; size(198283722)\n'189M'\n</code></pre>\n\n<p>Or if you want 1K == 1000 (which is what most users assume):</p>\n\n<pre><code>&gt;&gt;&gt; from hurry.filesize import size, si\n&gt;&gt;&gt; size(11000, system=si)\n'11K'\n&gt;&gt;&gt; size(198283722, system=si)\n'198M'\n</code></pre>\n\n<p>It has IEC support as well (but that wasn't documented):</p>\n\n<pre><code>&gt;&gt;&gt; from hurry.filesize import size, iec\n&gt;&gt;&gt; size(11000, system=iec)\n'10Ki'\n&gt;&gt;&gt; size(198283722, system=iec)\n'189Mi'\n</code></pre>\n\n<p>Because it's written by the Awesome Martijn Faassen, the code is small, clear and extensible. Writing your own systems is dead easy.</p>\n\n<p>Here is one:</p>\n\n<pre><code>mysystem = [\n    (1024 ** 5, ' Megamanys'),\n    (1024 ** 4, ' Lotses'),\n    (1024 ** 3, ' Tons'), \n    (1024 ** 2, ' Heaps'), \n    (1024 ** 1, ' Bunches'),\n    (1024 ** 0, ' Thingies'),\n    ]\n</code></pre>\n\n<p>Used like so:</p>\n\n<pre><code>&gt;&gt;&gt; from hurry.filesize import size\n&gt;&gt;&gt; size(11000, system=mysystem)\n'10 Bunches'\n&gt;&gt;&gt; size(198283722, system=mysystem)\n'189 Heaps'\n</code></pre>\n"
                }
            ]
        },
        {
            "6005066": [
                {
                    "owner": {
                        "account_id": 349478,
                        "reputation": 934,
                        "user_id": 684799,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2e52f5a4a2820829c9d5dc7d82b0feb?s=256&d=identicon&r=PG",
                        "display_name": "Vijay",
                        "link": "https://stackoverflow.com/users/684799/vijay"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1673320640,
                    "last_edit_date": 1673320640,
                    "creation_date": 1305411254,
                    "answer_id": 6005122,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>&gt;&gt;&gt; dic0 = {'dic0':0}\n&gt;&gt;&gt; dic1 = {'dic1':1}\n&gt;&gt;&gt; ndic = dict(list(dic0.items()) + list(dic1.items()))\n&gt;&gt;&gt; ndic\n{'dic0': 0, 'dic1': 1}\n&gt;&gt;&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 191753,
                        "reputation": 47638,
                        "user_id": 432509,
                        "user_type": "registered",
                        "accept_rate": 47,
                        "profile_image": "https://i.sstatic.net/PsT5q.png?s=256",
                        "display_name": "ideasman42",
                        "link": "https://stackoverflow.com/users/432509/ideasman42"
                    },
                    "is_accepted": false,
                    "score": 52,
                    "last_activity_date": 1673320455,
                    "last_edit_date": 1673320455,
                    "creation_date": 1388114975,
                    "answer_id": 20794314,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here are quite a few ways to add dictionaries.</p>\n<p>You can use Python3's dictionary unpacking feature:</p>\n<pre><code>ndic = {**dic0, **dic1}\n</code></pre>\n<p>Note that in the case of duplicates, values from later arguments are used. This is also the case for the other examples listed here.</p>\n<hr />\n<p>Or create a new dict by adding both items.</p>\n<pre><code>ndic = dict(tuple(dic0.items()) + tuple(dic1.items()))\n</code></pre>\n<hr />\n<p>If modifying <code>dic0</code> is OK:</p>\n<pre><code>dic0.update(dic1)\n</code></pre>\n<hr />\n<p>If modifying <code>dic0</code> is <strong>NOT</strong> OK:</p>\n<pre><code>ndic = dic0.copy()\nndic.update(dic1)\n</code></pre>\n<hr />\n<p>If all the keys in one dict are ensured to be strings (<code>dic1</code> in this case, of course args can be swapped)</p>\n<pre><code>ndic = dict(dic0, **dic1)\n</code></pre>\n<hr />\n<p>In some cases it may be handy to use dict comprehensions (Python 2.7 or newer),<br>Especially if you want to filter out or transform some keys/values at the same time.</p>\n<pre><code>ndic = {k: v for d in (dic0, dic1) for k, v in d.items()}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 380173,
                        "reputation": 156,
                        "user_id": 734018,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/173fdfd7e5b749d4ea41adfb729dd045?s=256&d=identicon&r=PG",
                        "display_name": "LukeFitz",
                        "link": "https://stackoverflow.com/users/734018/lukefitz"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1636366886,
                    "last_edit_date": 1636366886,
                    "creation_date": 1305411343,
                    "answer_id": 6005129,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest way to do it is to simply use your example code, but using the items() member of each dictionary. So, the code would be:</p>\n<pre><code>dic0 = {'dic0': 0}\ndic1 = {'dic1': 1}\ndic2 = dict(dic0.items() + dic1.items())\n</code></pre>\n<p>I tested this in IDLE and it works fine.\nHowever, the previous question on this topic states that this method is slow and chews up memory. There are several other ways recommended there, so please see that if memory usage is important.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 59314,
                        "reputation": 17088,
                        "user_id": 177511,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/701586486b117227002bcd1dc9af5cb1?s=256&d=identicon&r=PG",
                        "display_name": "bluepnume",
                        "link": "https://stackoverflow.com/users/177511/bluepnume"
                    },
                    "is_accepted": true,
                    "score": 211,
                    "last_activity_date": 1630077706,
                    "last_edit_date": 1630077706,
                    "creation_date": 1305412418,
                    "answer_id": 6005217,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you're interested in creating a new dict without using intermediary storage: (this is faster, and in my opinion, cleaner than using <code>dict.items()</code>)</p>\n<pre><code>dic2 = dict(dic0, **dic1)\n</code></pre>\n<p>Or if you're happy to use one of the existing dicts:</p>\n<pre><code>dic0.update(dic1)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 36572,
                        "reputation": 598779,
                        "user_id": 104349,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Roseman",
                        "link": "https://stackoverflow.com/users/104349/daniel-roseman"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1305411072,
                    "creation_date": 1305411072,
                    "answer_id": 6005104,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>dic0.update(dic1)\n</code></pre>\n\n<p>Note this doesn't actually return the combined dictionary, it just mutates <code>dic0</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 50598,
                        "reputation": 32570,
                        "user_id": 151019,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/ab97924548209ed725801c0a08c40d1e?s=256&d=identicon&r=PG",
                        "display_name": "mmmmmm",
                        "link": "https://stackoverflow.com/users/151019/mmmmmm"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1305411059,
                    "creation_date": 1305411059,
                    "answer_id": 6005101,
                    "question_id": 6005066,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You are looking for the <a href=\"http://docs.python.org/library/stdtypes.html#mapping-types-dict\" rel=\"noreferrer\">update method</a></p>\n\n<pre><code>dic0.update( dic1 )\nprint( dic0 ) \n</code></pre>\n\n<p>gives</p>\n\n<pre><code>{'dic0': 0, 'dic1': 1}\n</code></pre>\n"
                }
            ]
        },
        {
            "24928585": [
                {
                    "owner": {
                        "account_id": 77071,
                        "reputation": 578,
                        "user_id": 220225,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b69bb3db70f2c5ddfdbbf92dc67f45a6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Windowlicker",
                        "link": "https://stackoverflow.com/users/220225/windowlicker"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1600255170,
                    "creation_date": 1600255170,
                    "answer_id": 63918912,
                    "question_id": 24928585,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>While @toine is completly right about using <code>_</code>, you could also refine this by means of a list comprehension:</p>\n<pre class=\"lang-py prettyprint-override\"><code>list_1 = [3 for _ in range(5)]\n</code></pre>\n<p>This avoids the ITM (&quot;initialize, than modify&quot;) anti-pattern.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2658784,
                        "reputation": 2016,
                        "user_id": 2298935,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/4e6cf47a45636de5036da34d16f42415?s=256&d=identicon&r=PG",
                        "display_name": "toine",
                        "link": "https://stackoverflow.com/users/2298935/toine"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1406190387,
                    "last_edit_date": 1495540817,
                    "creation_date": 1406190387,
                    "answer_id": 24928645,
                    "question_id": 24928585,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can replace <code>i</code> with <code>_</code> to make it an 'invisible' variable.</p>\n\n<p>See related: <a href=\"https://stackoverflow.com/questions/5893163/underscore-in-python\">What is the purpose of the single underscore &quot;_&quot; variable in Python?</a>.</p>\n"
                }
            ]
        },
        {
            "8634700": [
                {
                    "owner": {
                        "account_id": 5463752,
                        "reputation": 20077,
                        "user_id": 4453737,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/65896720ba21fbba90e7e9348cf2646f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mohideen bin Mohammed",
                        "link": "https://stackoverflow.com/users/4453737/mohideen-bin-mohammed"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1705195433,
                    "last_edit_date": 1705195433,
                    "creation_date": 1455194344,
                    "answer_id": 35339578,
                    "question_id": 8634700,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Simply copy your script, and put it under &quot;<code>&quot;&quot;&quot; your entire code &quot;&quot;&quot;</code>&quot;...</p>\n<p>Specify this line in a variable... Like,</p>\n<pre><code>a = &quot;&quot;&quot; your entire code &quot;&quot;&quot;\nprint a.replace('    ','    ') # First 4 spaces tab, second four spaces from the space bar\n\nprint a.replace('Here please press the tab button. It will insert some space&quot;,&quot; Here simply press the space bar four times&quot;)\n# Here we are replacing tab space by four character space as per the PEP 8 style guide...\n</code></pre>\n<p>Now execute this code in <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> using <kbd>Ctrl</kbd> + <kbd>B</kbd>. Now it will print the indented code in the console. That's it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2644913,
                        "reputation": 101,
                        "user_id": 2287824,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a3c0ce737c4e967c38db150c47e5b2df?s=256&d=identicon&r=PG",
                        "display_name": "user2287824",
                        "link": "https://stackoverflow.com/users/2287824/user2287824"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1705195165,
                    "last_edit_date": 1705195165,
                    "creation_date": 1368653481,
                    "answer_id": 16575302,
                    "question_id": 8634700,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Find all tabs and replaced by 4 spaces in <a href=\"https://en.wikipedia.org/wiki/Notepad%2B%2B\" rel=\"nofollow noreferrer\">Notepad++</a>. It worked.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1119098,
                        "reputation": 11649,
                        "user_id": 1107807,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/0940e5c940bcd5df354ab93963d0fc60?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Don Question",
                        "link": "https://stackoverflow.com/users/1107807/don-question"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1705195045,
                    "last_edit_date": 1705195045,
                    "creation_date": 1324894207,
                    "answer_id": 8634759,
                    "question_id": 8634700,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can't mix tab and spaces for indentation. The best practice is to convert all tabs to spaces.</p>\n<p>How can we fix this? Well, just delete all the spaces/tabs before each line and convert them uniformly either to tabs <em>or</em> spaces, but don't mix them. The best solution: enable the option in your editor to convert any tabs to spaces automagically.</p>\n<p>Also be aware that your actual problem may lie in the lines before this block, and Python throws the error here, because of a leading invalid indentation which doesn't match the following indentations!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1705194331,
                    "last_edit_date": 1705194331,
                    "creation_date": 1324894139,
                    "answer_id": 8634745,
                    "question_id": 8634700,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Run your program with</p>\n<pre class=\"lang-none prettyprint-override\"><code>python -t script.py\n</code></pre>\n<p>This will warn you if you have mixed tabs and spaces.</p>\n<p>On <a href=\"https://en.wikipedia.org/wiki/Unix-like\" rel=\"nofollow noreferrer\">Unix-like</a> systems, you can see where the tabs are by running</p>\n<pre class=\"lang-none prettyprint-override\"><code>cat -A script.py\n</code></pre>\n<p>And you can automatically convert tabs to 4 spaces with the command</p>\n<pre class=\"lang-none prettyprint-override\"><code>expand -t 4 script.py &gt; fixed_script.py\n</code></pre>\n<p>PS. Be sure to use a programming editor (e.g., <a href=\"https://en.wikipedia.org/wiki/Emacs\" rel=\"nofollow noreferrer\">Emacs</a> and <a href=\"https://en.wikipedia.org/wiki/Vim_%28text_editor%29\" rel=\"nofollow noreferrer\">Vim</a>), not a word processor, when programming. You won't get this problem with a programming editor.</p>\n<p>PPS. For Emacs users, <kbd>M-x</kbd> <code>whitespace-mode</code> will show the same information as <code>cat -A</code> from within an Emacs buffer!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1069835,
                        "reputation": 1594,
                        "user_id": 1069389,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/7bf697b38fc6b9dbcf2a03400ef642ee?s=256&d=identicon&r=PG",
                        "display_name": "ilstam",
                        "link": "https://stackoverflow.com/users/1069389/ilstam"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1705193569,
                    "last_edit_date": 1705193569,
                    "creation_date": 1324893959,
                    "answer_id": 8634723,
                    "question_id": 8634700,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Check if you mixed tabs and spaces. That is a frequent source of indentation errors.</p>\n"
                }
            ]
        },
        {
            "8659275": [
                {
                    "owner": {
                        "account_id": 286206,
                        "reputation": 7664,
                        "user_id": 585339,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a003233b3ffb20b07a29c6757f361560?s=256&d=identicon&r=PG",
                        "display_name": "enderskill",
                        "link": "https://stackoverflow.com/users/585339/enderskill"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1560867573,
                    "last_edit_date": 1560867573,
                    "creation_date": 1325094137,
                    "answer_id": 8659316,
                    "question_id": 8659275,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://docs.python.org/2/library/commands.html\" rel=\"nofollow noreferrer\">commands.getstatusoutput</a> would work well for this situation. (Deprecated since Python 2.6)</p>\n\n<pre><code>import commands\nprint(commands.getstatusoutput(\"cat syscall_list.txt | grep f89e7000 | awk '{print $2}'\"))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13549034,
                        "reputation": 791,
                        "user_id": 9774394,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/mbb1H.jpg?s=256",
                        "display_name": "Ravishankar Sivasubramaniam",
                        "link": "https://stackoverflow.com/users/9774394/ravishankar-sivasubramaniam"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1554835670,
                    "creation_date": 1554835670,
                    "answer_id": 55599396,
                    "question_id": 8659275,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>os.popen works for this. popen - opens a pipe to or from command. The return value is an open file object connected to the pipe, which can be read. split('\\n') converts the output to list</p>\n\n<pre><code>import os\nlist_of_ls = os.popen(\"ls\").read().split('\\n')\nprint list_of_ls\n</code></pre>\n\n<pre><code>import os\nlist_of_call = os.popen(\"cat syscall_list.txt | grep f89e7000 | awk '{print $2}'\").read().split('\\n')\nprint list_of_call\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3723986,
                        "reputation": 441,
                        "user_id": 3098279,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3b13344d0cad86bed43937b1adc3ea6f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Prakash D",
                        "link": "https://stackoverflow.com/users/3098279/prakash-d"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1553141505,
                    "creation_date": 1553141505,
                    "answer_id": 55273665,
                    "question_id": 8659275,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In python 3 you can use </p>\n\n<pre><code>import subprocess as sp\noutput = sp.getoutput('whoami --version')\nprint (output)\n\n``\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 306769,
                        "reputation": 16307,
                        "user_id": 617711,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/fHTfP.jpg?s=256",
                        "display_name": "Rob Wouters",
                        "link": "https://stackoverflow.com/users/617711/rob-wouters"
                    },
                    "is_accepted": true,
                    "score": 61,
                    "last_activity_date": 1325095008,
                    "last_edit_date": 1325095008,
                    "creation_date": 1325094272,
                    "answer_id": 8659333,
                    "question_id": 8659275,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\"><code>subprocess</code></a> module instead:</p>\n\n<pre><code>import subprocess\noutput = subprocess.check_output(\"cat syscall_list.txt | grep f89e7000 | awk '{print $2}'\", shell=True)\n</code></pre>\n\n<p>Edit: this is new in Python 2.7. In earlier versions this should work (with the command rewritten as shown below):</p>\n\n<pre><code>import subprocess\noutput = subprocess.Popen(['awk', '/f89e7000/ {print $2}', 'syscall_list.txt'], stdout=subprocess.PIPE).communicate()[0]\n</code></pre>\n\n<hr>\n\n<p>As a side note, you can rewrite</p>\n\n<pre><code>cat syscall_list.txt | grep f89e7000\n</code></pre>\n\n<p>To</p>\n\n<pre><code>grep f89e7000 syscall_list.txt\n</code></pre>\n\n<p>And you can even replace the entire statement with a single <code>awk</code> script:</p>\n\n<pre><code>awk '/f89e7000/ {print $2}' syscall_list.txt\n</code></pre>\n\n<p>Leading to:</p>\n\n<pre><code>import subprocess\noutput = subprocess.check_output(['awk', '/f89e7000/ {print $2}', 'syscall_list.txt'])\n</code></pre>\n"
                }
            ]
        },
        {
            "9347406": [
                {
                    "owner": {
                        "account_id": 3890706,
                        "reputation": 11010,
                        "user_id": 3220983,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/ypq01.jpg?s=256",
                        "display_name": "BuvinJ",
                        "link": "https://stackoverflow.com/users/3220983/buvinj"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1485026251,
                    "last_edit_date": 1495541403,
                    "creation_date": 1485026251,
                    "answer_id": 41783439,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Check out my answer at <a href=\"https://stackoverflow.com/questions/805066/call-a-parent-classs-method-from-child-class-in-python/41783372#41783372\">Call a parent class&#39;s method from child class in Python?</a>.</p>\n\n<p>It's a slight twist on some others here (that don't use super).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6417364,
                        "reputation": 8587,
                        "user_id": 4975126,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://lh4.googleusercontent.com/-wxykA2o2_PU/AAAAAAAAAAI/AAAAAAAAEyY/VGbVvqSSw1Q/photo.jpg?sz=256",
                        "display_name": "Aidan Gomez",
                        "link": "https://stackoverflow.com/users/4975126/aidan-gomez"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1447289452,
                    "creation_date": 1447289452,
                    "answer_id": 33662644,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In line with the other answers, there are multiple ways to call super class methods (including the constructor), however in Python-3.x the process has been simplified:</p>\n\n<p><strong>Python-2.x</strong></p>\n\n<pre><code>class A(object):\n def __init__(self):\n   print \"world\"\n\nclass B(A):\n def __init__(self):\n   print \"hello\"\n   super(B, self).__init__()\n</code></pre>\n\n<p><strong>Python-3.x</strong></p>\n\n<pre><code>class A(object):\n def __init__(self):\n   print \"world\"\n\nclass B(A):\n def __init__(self):\n   print \"hello\"\n   super().__init__()\n</code></pre>\n\n<p><code>super()</code> is now equivalent to <code>super(&lt;containing classname&gt;, self)</code> as per <a href=\"https://docs.python.org/3.5/library/functions.html#super\" rel=\"noreferrer\">the docs</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 296248,
                        "reputation": 11022,
                        "user_id": 601095,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/35473ae65b00c9c10ab6be83e6f4c2d5?s=256&d=identicon&r=PG",
                        "display_name": "Doboy",
                        "link": "https://stackoverflow.com/users/601095/doboy"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1329636571,
                    "creation_date": 1329636571,
                    "answer_id": 9347502,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>you can use super or if you can be more explicit and do something like this.</p>\n\n<pre><code>class B(A):\n  def f(self, num):\n    return 7 * A.f(self, num)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 169315,
                        "reputation": 10162,
                        "user_id": 395321,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/FgXQf.jpg?s=256",
                        "display_name": "pillmuncher",
                        "link": "https://stackoverflow.com/users/395321/pillmuncher"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1329636355,
                    "creation_date": 1329636355,
                    "answer_id": 9347487,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Why not keep it simple?</p>\n\n<pre><code>class B(A):\n    def f(self, num):\n        return 7 * A.f(self, num)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 241426,
                        "reputation": 5513,
                        "user_id": 512225,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/b01d1b190b75cd4a4c828052fd3bedbb?s=256&d=identicon&r=PG",
                        "display_name": "jimifiki",
                        "link": "https://stackoverflow.com/users/512225/jimifiki"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1329636294,
                    "creation_date": 1329636294,
                    "answer_id": 9347483,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you know you want to use A you can also explicitly refer to A in this way: </p>\n\n<pre><code>class B(A):\n    def f(self,num): \n        return 7 * A.f(self,num)\n</code></pre>\n\n<p>remember you have to explicitly give the self argument to the member function A.f()</p>\n"
                },
                {
                    "owner": {
                        "account_id": 127812,
                        "reputation": 35624,
                        "user_id": 325241,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/c4304a7108b702fabbaac8484393c18b?s=256&d=identicon&r=PG",
                        "display_name": "wong2",
                        "link": "https://stackoverflow.com/users/325241/wong2"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1329635328,
                    "creation_date": 1329635328,
                    "answer_id": 9347423,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>class B(A):\n    def f(self, num):\n        return 7 * super(B, self).f(num)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 94267,
                        "reputation": 47691,
                        "user_id": 257465,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/882a999c825707d8bfa799ee20bda1f2?s=256&d=identicon&r=PG",
                        "display_name": "tzaman",
                        "link": "https://stackoverflow.com/users/257465/tzaman"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1329635241,
                    "creation_date": 1329635241,
                    "answer_id": 9347418,
                    "question_id": 9347406,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/library/functions.html#super\" rel=\"noreferrer\"><code>super</code></a>:</p>\n\n<pre><code>return 7 * super(B, self).f(num)\n</code></pre>\n\n<p>Or in python 3, it's just:</p>\n\n<pre><code>return 7 * super().f(num)\n</code></pre>\n"
                }
            ]
        },
        {
            "3948873": [
                {
                    "owner": {
                        "account_id": 75420,
                        "reputation": 21941,
                        "user_id": 216356,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/dc105cdd75395154274f9da3d7612a9f?s=256&d=identicon&r=PG",
                        "display_name": "Noctis Skytower",
                        "link": "https://stackoverflow.com/users/216356/noctis-skytower"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1473439778,
                    "last_edit_date": 1495541822,
                    "creation_date": 1472233864,
                    "answer_id": 39172073,
                    "question_id": 3948873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>uzumaki</strong> already provided one metaclass as a possible solution to the question asked above, but here is another with example usage. Following an attempt to create a <code>Child</code> class, another way of making it difficult to override methods is shown. Putting two underscores before but not after an attribute name will automatically cause name mangling to be invoked. See <a href=\"https://stackoverflow.com/a/27928203/216356\">this answer</a> to another question for an easy-to-use way of accessing this ability manually.</p>\n\n<pre><code>#! /usr/bin/env python3\nclass Access(type):\n\n    __SENTINEL = object()\n\n    def __new__(mcs, name, bases, class_dict):\n        private = {key\n                   for base in bases\n                   for key, value in vars(base).items()\n                   if callable(value) and mcs.__is_final(value)}\n        if any(key in private for key in class_dict):\n            raise RuntimeError('certain methods may not be overridden')\n        return super().__new__(mcs, name, bases, class_dict)\n\n    @classmethod\n    def __is_final(mcs, method):\n        try:\n            return method.__final is mcs.__SENTINEL\n        except AttributeError:\n            return False\n\n    @classmethod\n    def final(mcs, method):\n        method.__final = mcs.__SENTINEL\n        return method\n\n\nclass Parent(metaclass=Access):\n\n    @Access.final\n    def do_something(self):\n        \"\"\"This is where some seriously important stuff goes on.\"\"\"\n        pass\n\n\ntry:\n    class Child(Parent):\n\n        def do_something(self):\n            \"\"\"This should not be allowed.\"\"\"\n            pass\nexcept RuntimeError:\n    print('Child cannot be created.')\n\n\nclass AnotherParent:\n\n    def __do_something(self):\n        print('Some seriously important stuff is going on.')\n\n    def do_parent_thing(self):\n        self.__do_something()\n\n\nclass AnotherChild(AnotherParent):\n\n    def __do_something(self):\n        print('This is allowed.')\n\n    def do_child_thing(self):\n        self.__do_something()\n\n\nexample = AnotherChild()\nexample.do_parent_thing()\nexample.do_child_thing()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4450006,
                        "reputation": 1953,
                        "user_id": 3622232,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/5fc4dcf9b4ef6ab2dd6d69725c5f945b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "uzumaki",
                        "link": "https://stackoverflow.com/users/3622232/uzumaki"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1425279161,
                    "last_edit_date": 1425279161,
                    "creation_date": 1425277897,
                    "answer_id": 28803868,
                    "question_id": 3948873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If a API lets you provide subclasses of a certain class and calls your (legally) overridden methods, but also other API methods of that class with simple names like \"add\", accidentally overriding those methods could lead to hard-to-track-down bugs. It's better to at least warn the user.</p>\n\n<p>The cases where a user wants/needs to override a method that will completely break the API is practically zero. The cases where a user accidentally overrides something that he shouldn't and needs hours to find the culprit are far more frequent. Debugging faulty behaviour caused by this can be cumbersome.</p>\n\n<p>This is how I use to warn or protect attributes from being accidentally overridden:</p>\n\n<pre><code>def protect(*protected):\n    \"\"\"Returns a metaclass that protects all attributes given as strings\"\"\"\n    class Protect(type):\n        has_base = False\n        def __new__(meta, name, bases, attrs):\n            if meta.has_base:\n                for attribute in attrs:\n                    if attribute in protected:\n                        raise AttributeError('Overriding of attribute \"%s\" not allowed.'%attribute)\n            meta.has_base = True\n            klass = super().__new__(meta, name, bases, attrs)\n            return klass\n    return Protect\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre><code>class Parent(metaclass=protect(\"do_something\", \"do_something_else\")):\n    def do_something(self):\n        '''This is where some seriously important stuff goes on'''\n        pass\n\nclass Child(Parent):\n    def do_something(self):\n        '''This will raise an error during class creation.'''\n        pass\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8083,
                        "reputation": 374652,
                        "user_id": 14343,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
                        "display_name": "Ned Batchelder",
                        "link": "https://stackoverflow.com/users/14343/ned-batchelder"
                    },
                    "is_accepted": true,
                    "score": 20,
                    "last_activity_date": 1287233010,
                    "creation_date": 1287233010,
                    "answer_id": 3948937,
                    "question_id": 3948873,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You are right: what you are attempting is contrary to Python's structure and its culture.</p>\n\n<p>Document your API, and educate your users how to use it.  It's their program, so if they still want to override your function, who are you to prevent them?</p>\n"
                }
            ]
        },
        {
            "12738889": [
                {
                    "owner": {
                        "account_id": 33972,
                        "reputation": 15569,
                        "user_id": 95509,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/24d176a8da2fe77fcae7833a15e120ed?s=256&d=identicon&r=PG",
                        "display_name": "Bartek",
                        "link": "https://stackoverflow.com/users/95509/bartek"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1349406208,
                    "creation_date": 1349406208,
                    "answer_id": 12738912,
                    "question_id": 12738889,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Check out <a href=\"http://www.python.org/dev/peps/pep-0328/#rationale-for-relative-imports\" rel=\"noreferrer\">PEP 328's section on relative imports</a></p>\n\n<p>The rationale seems to be as written:</p>\n\n<blockquote>\n  <p>Several use cases were presented, the most important of which is being able to rearrange the structure of large packages without having to edit sub-packages. In addition, a module inside a package can't easily import itself without relative imports.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "5996881": [
                {
                    "owner": {
                        "account_id": 10056274,
                        "reputation": 20384,
                        "user_id": 7434365,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/h6XG2.jpg?s=256",
                        "display_name": "Joe Iddon",
                        "link": "https://stackoverflow.com/users/7434365/joe-iddon"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1732830515,
                    "last_edit_date": 1732830515,
                    "creation_date": 1506782521,
                    "answer_id": 46503770,
                    "question_id": 5996881,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Could you not string together some one-line <code>python</code> conditional statements?</h3>\n<p>I came across this question when looking for a way to limit <code>pixel</code> values between <code>0</code> and <code>255</code>, and didn't think that using <code>max()</code> and <code>min()</code> was very readable so wrote the following <code>function</code>:</p>\n<pre><code>def clamp(x, minn, maxx):\n   return x if x &gt; minn and x &lt; maxx else (minn if x &lt; minn else maxx)\n</code></pre>\n<p>I would be interested to see how someone more experienced than me would find this way of clamping a value. I assume it must be less efficient than using <code>min()</code> and <code>max()</code>, but it may be useful for someone looking for a more readable <em>(to me at least)</em> <code>function</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 132887,
                        "reputation": 1625,
                        "user_id": 1261573,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6c4dd28878a046011cd00eb5049c8130?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Bj&#246;rn",
                        "link": "https://stackoverflow.com/users/1261573/bj%c3%b6rn"
                    },
                    "is_accepted": false,
                    "score": 87,
                    "last_activity_date": 1405507037,
                    "last_edit_date": 1405507037,
                    "creation_date": 1405420326,
                    "answer_id": 24755898,
                    "question_id": 5996881,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Simply use <code>numpy.clip()</code> (<a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.clip.html\">doc</a>):</p>\n\n<pre><code>n = np.clip(n, minN, maxN)\n</code></pre>\n\n<p>It also works for whole arrays:</p>\n\n<pre><code>my_array = np.clip(my_array, minN, maxN)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 66813,
                        "reputation": 23254,
                        "user_id": 195823,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3ee8771e44a8f01cc73c697cab4ae605?s=256&d=identicon&r=PG",
                        "display_name": "Adrien Plisson",
                        "link": "https://stackoverflow.com/users/195823/adrien-plisson"
                    },
                    "is_accepted": true,
                    "score": 130,
                    "last_activity_date": 1359108854,
                    "last_edit_date": 1359108854,
                    "creation_date": 1305315674,
                    "answer_id": 5996949,
                    "question_id": 5996881,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def clamp(n, minn, maxn):\n    return max(min(maxn, n), minn)\n</code></pre>\n\n<p>or functionally equivalent:</p>\n\n<pre><code>clamp = lambda n, minn, maxn: max(min(maxn, n), minn)\n</code></pre>\n\n<p>now, you use:</p>\n\n<pre><code>n = clamp(n, 7, 42)\n</code></pre>\n\n<p>or make it perfectly clear:</p>\n\n<pre><code>n = minn if n &lt; minn else maxn if n &gt; maxn else n\n</code></pre>\n\n<p>even clearer:</p>\n\n<pre><code>def clamp(n, minn, maxn):\n    if n &lt; minn:\n        return minn\n    elif n &gt; maxn:\n        return maxn\n    else:\n        return n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 44216,
                        "reputation": 46125,
                        "user_id": 129655,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/aa81588f4aa842d08c9539f9313df4cc?s=256&d=identicon&r=PG",
                        "display_name": "Platinum Azure",
                        "link": "https://stackoverflow.com/users/129655/platinum-azure"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1349971081,
                    "last_edit_date": 1349971081,
                    "creation_date": 1305315806,
                    "answer_id": 5996978,
                    "question_id": 5996881,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Define a class and have a method for setting the value which performs those validations.</p>\n\n<p>Something vaguely like the below:</p>\n\n<pre><code>class BoundedNumber(object):\n    def __init__(self, value, min_=1, max_=10):\n        self.min_ = min_\n        self.max_ = max_\n        self.set(value)\n\n    def set(self, newValue):\n        self.n = max(self.min_, min(self.max_, newValue))\n\n# usage\n\nbounded = BoundedNumber(something())\nbounded.set(someOtherThing())\n\nbounded2 = BoundedNumber(someValue(), min_=8, max_=10)\nbounded2.set(5)    # bounded2.n = 8\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 200669,
                        "reputation": 6947,
                        "user_id": 446649,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/wdJbC.jpg?s=256",
                        "display_name": "Jessica",
                        "link": "https://stackoverflow.com/users/446649/jessica"
                    },
                    "is_accepted": false,
                    "score": 59,
                    "last_activity_date": 1305315639,
                    "creation_date": 1305315639,
                    "answer_id": 5996939,
                    "question_id": 5996881,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you want to be cute, you can do:</p>\n\n<pre><code>n = sorted([minN, n, maxN])[1]\n</code></pre>\n"
                }
            ]
        },
        {
            "3416401": [
                {
                    "owner": {
                        "account_id": 99059,
                        "reputation": 38177,
                        "user_id": 267781,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/68a8fe57dcd1a8717c20703c7f1bf91d?s=256&d=identicon&r=PG",
                        "display_name": "MattH",
                        "link": "https://stackoverflow.com/users/267781/matth"
                    },
                    "is_accepted": true,
                    "score": 118,
                    "last_activity_date": 1655749766,
                    "last_edit_date": 1655749766,
                    "creation_date": 1281022986,
                    "answer_id": 3416473,
                    "question_id": 3416401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>List comprehensions:</p>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\n\n[ x for x in l if &quot;2&quot; not in x ]\n\n# Returns: ['1', '336']\n\n[ x for x in l if &quot;2&quot; in x ]\n\n# Returns: ['32', '523']\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\nstringVal = &quot;2&quot;\n\nprint(f&quot;{[ x for x in l if stringVal not in x ]}&quot;)\n\n# Returns: ['1', '336']\n\nprint(f&quot;{[ x for x in l if stringVal in x ]}&quot;)\n\n# Returns: ['32', '523']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10292291,
                        "reputation": 82,
                        "user_id": 7593693,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1e957a09827fc176fbfed08885537bc1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "J.Doe",
                        "link": "https://stackoverflow.com/users/7593693/j-doe"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1655749529,
                    "last_edit_date": 1655749529,
                    "creation_date": 1552423901,
                    "answer_id": 55130466,
                    "question_id": 3416401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In addition to @Matth, if you want to combine multiple statements you can write:</p>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\n\n[ x for x in l if &quot;2&quot; not in x and &quot;3&quot; not in x]\n\n# Returns: ['1']\n</code></pre>\n<h2>fString Example</h2>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\n\nstringValA = &quot;2&quot;\nstringValB = &quot;3&quot;\n\nprint(f&quot;{[ x for x in l if stringValA not in x and stringValB not in x ]}&quot;)\n\n# Returns: ['1']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 86104,
                        "reputation": 1782,
                        "user_id": 239678,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c9cdfaa56df410910328e4b19581b285?s=256&d=identicon&r=PG",
                        "display_name": "loevborg",
                        "link": "https://stackoverflow.com/users/239678/loevborg"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1655749199,
                    "last_edit_date": 1655749199,
                    "creation_date": 1281023050,
                    "answer_id": 3416485,
                    "question_id": 3416401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If I understand you correctly,</p>\n<h2>Example:</h2>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\n\n[x for x in l if &quot;2&quot; not in x]\n\n# Returns: ['1', '336']\n</code></pre>\n<h3>fString Example:</h3>\n<pre class=\"lang-py prettyprint-override\"><code>l = ['1', '32', '523', '336']\n\nstringVal = &quot;2&quot;\n\nprint(f&quot;{[x for x in l if stringVal not in x]}&quot;)\n\n# Returns: ['1', '336']\n</code></pre>\n<p>might do the job.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 167378,
                        "reputation": 5545,
                        "user_id": 392132,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/817dc5e40debb5c94a9d540b732910b8?s=256&d=identicon&r=PG",
                        "display_name": "Tony Veijalainen",
                        "link": "https://stackoverflow.com/users/392132/tony-veijalainen"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1281023585,
                    "creation_date": 1281023585,
                    "answer_id": 3416589,
                    "question_id": 3416401,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Problem you could have is that you are trying to modify the sequence l same time as you loop over it in for t loop.</p>\n"
                }
            ]
        },
        {
            "868690": [
                {
                    "owner": {
                        "account_id": 2029541,
                        "reputation": 97,
                        "user_id": 1813655,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/409ead2e79175423f497387282d677ae?s=256&d=identicon&r=PG",
                        "display_name": "Yarnix",
                        "link": "https://stackoverflow.com/users/1813655/yarnix"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1352503889,
                    "creation_date": 1352503889,
                    "answer_id": 13317537,
                    "question_id": 868690,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A good rule of thumb: use the built-in help system in Python.\nExample below...</p>\n\n<pre><code>jdoe@server:~$ python\nPython 2.7.3 (default, Aug  1 2012, 05:14:39) \n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import memcache\n&gt;&gt;&gt; dir()\n['__builtins__', '__doc__', '__name__', '__package__', 'memcache']\n&gt;&gt;&gt; help(memcache)\n\n------------------------------------------\nNAME\n    memcache - client module for memcached (memory cache daemon)\n\nFILE\n    /usr/lib/python2.7/dist-packages/memcache.py\n\nMODULE DOCS\n    http://docs.python.org/library/memcache\n\nDESCRIPTION\n    Overview\n    ========\n\n    See U{the MemCached homepage&lt;http://www.danga.com/memcached&gt;} for more about memcached.\n\n    Usage summary\n    =============\n...\n------------------------------------------\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 325510,
                        "reputation": 15229,
                        "user_id": 646735,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/6858fa3f1506758186d280c47d83ec77?s=256&d=identicon&r=PG",
                        "display_name": "Felix Yan",
                        "link": "https://stackoverflow.com/users/646735/felix-yan"
                    },
                    "is_accepted": false,
                    "score": 43,
                    "last_activity_date": 1329203810,
                    "last_edit_date": 1329203810,
                    "creation_date": 1329203264,
                    "answer_id": 9272995,
                    "question_id": 868690,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I would advise you to use <code>pylibmc</code> instead.</p>\n\n<p>It can act as a drop-in replacement of python-memcache, but a lot faster(as it's written in C). And you can find handy documentation for it <a href=\"http://sendapatch.se/projects/pylibmc/\">here</a>.</p>\n\n<p>And to the question, as pylibmc just acts as a drop-in replacement, you can still refer to documentations of pylibmc for your python-memcache programming.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7412,
                        "reputation": 239470,
                        "user_id": 12870,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/f0af40756420859b5b63cbceb6d30505?s=256&d=identicon&r=PG",
                        "display_name": "Oli",
                        "link": "https://stackoverflow.com/users/12870/oli"
                    },
                    "is_accepted": true,
                    "score": 147,
                    "last_activity_date": 1274576803,
                    "last_edit_date": 1274576803,
                    "creation_date": 1242394640,
                    "answer_id": 868731,
                    "question_id": 868690,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's fairly simple. You write values using keys and expiry times. You get values using keys. You can expire keys from the system.</p>\n\n<p>Most clients follow the same rules. You can read the generic instructions and best practices on <a href=\"http://www.danga.com/memcached/\" rel=\"noreferrer\">the memcached homepage</a>.</p>\n\n<p>If you really want to dig into it, I'd look at the source. Here's the header comment:</p>\n\n<pre><code>\"\"\"\nclient module for memcached (memory cache daemon)\n\nOverview\n========\n\nSee U{the MemCached homepage&lt;http://www.danga.com/memcached&gt;} for more about memcached.\n\nUsage summary\n=============\n\nThis should give you a feel for how this module operates::\n\n    import memcache\n    mc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\n    mc.set(\"some_key\", \"Some value\")\n    value = mc.get(\"some_key\")\n\n    mc.set(\"another_key\", 3)\n    mc.delete(\"another_key\")\n\n    mc.set(\"key\", \"1\")   # note that the key used for incr/decr must be a string.\n    mc.incr(\"key\")\n    mc.decr(\"key\")\n\nThe standard way to use memcache with a database is like this::\n\n    key = derive_key(obj)\n    obj = mc.get(key)\n    if not obj:\n        obj = backend_api.get(...)\n        mc.set(key, obj)\n\n    # we now have obj, and future passes through this code\n    # will use the object from the cache.\n\nDetailed Documentation\n======================\n\nMore detailed documentation is available in the L{Client} class.\n\"\"\"\n</code></pre>\n"
                }
            ]
        },
        {
            "18833759": [
                {
                    "owner": {
                        "account_id": 4773248,
                        "reputation": 1120,
                        "user_id": 3857234,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/pFqlb.jpg?s=256",
                        "display_name": "Vinayak Kaniyarakkal",
                        "link": "https://stackoverflow.com/users/3857234/vinayak-kaniyarakkal"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1505037146,
                    "last_edit_date": 1505037146,
                    "creation_date": 1435402162,
                    "answer_id": 31087903,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def is_prime(n):\n    return all(n%j for j in xrange(2, int(n**0.5)+1)) and n&gt;1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6962107,
                        "reputation": 29,
                        "user_id": 5341223,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/b703be17297a43e282abd5645399f3ab?s=256&d=identicon&r=PG",
                        "display_name": "Chikak",
                        "link": "https://stackoverflow.com/users/5341223/chikak"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1460395054,
                    "last_edit_date": 1460395054,
                    "creation_date": 1442390199,
                    "answer_id": 32602801,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><pre><code># is digit prime? we will see (Coder: Chikak)</p>\n\n<p>def is_prime(x):\n    flag = False\n    if x &lt; 2:\n        return False\n    else:\n        for count in range(2, x):\n            if x % count == 0:\n                flag = True\n                break\n        if flag == True:\n            return False\n        return True\n</pre></code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3240096,
                        "reputation": 3284,
                        "user_id": 2733350,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/jdsNP.jpg?s=256",
                        "display_name": "Destructor",
                        "link": "https://stackoverflow.com/users/2733350/destructor"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1453212132,
                    "last_edit_date": 1453212132,
                    "creation_date": 1379352333,
                    "answer_id": 18833845,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def isprime(n):\n    '''check if integer n is a prime'''\n\n    # make sure n is a positive integer\n    n = abs(int(n))\n\n    # 0 and 1 are not primes\n    if n &lt; 2:\n        return False\n\n    # 2 is the only even prime number\n    if n == 2: \n        return True    \n\n    # all other even numbers are not primes\n    if not n &amp; 1: \n        return False\n\n    # range starts with 3 and only needs to go up \n    # the square root of n for all odd numbers\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n\n    return True\n</code></pre>\n\n<p>Taken from: </p>\n\n<blockquote>\n  <p><a href=\"http://www.daniweb.com/software-development/python/code/216880/check-if-a-number-is-a-prime-number-python\" rel=\"noreferrer\">http://www.daniweb.com/software-development/python/code/216880/check-if-a-number-is-a-prime-number-python</a></p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 6184988,
                        "reputation": 719,
                        "user_id": 4819353,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/80wMN.jpg?s=256",
                        "display_name": "dasdachs",
                        "link": "https://stackoverflow.com/users/4819353/dasdachs"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1429706336,
                    "last_edit_date": 1429706336,
                    "creation_date": 1429704747,
                    "answer_id": 29797206,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Begginer here, so please let me know if I am way of, but I'd do it like this:</p>\n\n<pre><code>def prime(n):\n    count = 0\n    for i in range(1, (n+1)): \n         if n % i == 0: \n             count += 1\n    if count &gt; 2:\n        print \"Not a prime\"\n    else:\n        print \"A prime\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5617301,
                        "reputation": 11,
                        "user_id": 4448193,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-HtDsi_TAFb0/AAAAAAAAAAI/AAAAAAAAEEM/WzXF8gVMvRU/photo.jpg?sz=256",
                        "display_name": "Sakti Rout",
                        "link": "https://stackoverflow.com/users/4448193/sakti-rout"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1429523733,
                    "last_edit_date": 1429523733,
                    "creation_date": 1421132914,
                    "answer_id": 27916629,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<h2>Prime number check.</h2>\n\n<pre><code>def is_prime(x):\n    if x &lt; 2:\n        return False\n    else:\n        if x == 2:\n            return True\n        else:\n            for i in range(2, x):\n                if x % i == 0:\n                    return False\n            return True\nx = int(raw_input(\"enter a prime number\"))\nprint is_prime(x)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5019354,
                        "reputation": 11,
                        "user_id": 4033240,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/100003499911674/picture?type=large",
                        "display_name": "Datta Munde",
                        "link": "https://stackoverflow.com/users/4033240/datta-munde"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1422895437,
                    "creation_date": 1422895437,
                    "answer_id": 28282504,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>max=int(input(\"Find primes upto what numbers?\"))\nprimeList=[]\nfor x in range(2,max+1):\n    isPrime=True\n    for y in range(2,int(x**0.5)+1) :\n        if x%y==0:\n            isPrime=False\n            break\n\n    if isPrime:\n        primeList.append(x)\nprint(primeList)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2192681,
                        "reputation": 89,
                        "user_id": 1939250,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f1d86e47c127c1ec81e57a559b62b156?s=256&d=identicon&r=PG",
                        "display_name": "Keisuke URAGO",
                        "link": "https://stackoverflow.com/users/1939250/keisuke-urago"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1414699290,
                    "last_edit_date": 1495540021,
                    "creation_date": 1414696119,
                    "answer_id": 26661384,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This example is use reduce(), but slow it:</p>\n\n<pre><code>def makepnl(pnl, n):\n    for p in pnl:\n        if n % p == 0:\n            return pnl\n    pnl.append(n)\n    return pnl\n\ndef isprime(n):\n    return True if n == reduce(makepnl, range(3, n + 1, 2), [2])[-1] else False\n\nfor i in range(20):\n    print i, isprime(i)\n</code></pre>\n\n<p>It use <a href=\"https://stackoverflow.com/questions/21783160/sieve-of-atkin-implementation-in-python\" title=\"Sieve Of Atkin Implementation in Python\">Sieve Of Atkin</a>, faster than above:</p>\n\n<pre><code>def atkin(limit):\n    if limit &gt; 2:\n        yield 2\n    if limit &gt; 3:\n        yield 3\n\n    import math\n    is_prime = [False] * (limit + 1)\n\n    for x in range(1,int(math.sqrt(limit))+1):\n        for y in range(1,int(math.sqrt(limit))+1):\n            n = 4*x**2 + y**2\n\n            if n&lt;=limit and (n%12==1 or n%12==5):\n                # print \"1st if\"                                                                                                                    \n                is_prime[n] = not is_prime[n]\n            n = 3*x**2+y**2\n            if n&lt;= limit and n%12==7:\n                # print \"Second if\"                                                                                                                 \n                is_prime[n] = not is_prime[n]\n            n = 3*x**2 - y**2\n            if x&gt;y and n&lt;=limit and n%12==11:\n                # print \"third if\"                                                                                                                  \n                is_prime[n] = not is_prime[n]\n\n    for n in range(5,int(math.sqrt(limit))):\n        if is_prime[n]:\n            for k in range(n**2,limit+1,n**2):\n                is_prime[k] = False\n\n    for n in range(5,limit):\n        if is_prime[n]: yield n\n\ndef isprime(n):\n    r = list(atkin(n+1))\n    if not r: return False\n    return True if n == r[-1] else False\n\nfor i in range(20):\n    print i, isprime(i)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3237765,
                        "reputation": 9,
                        "user_id": 2731483,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/giFFy.png?s=256",
                        "display_name": "saegarde",
                        "link": "https://stackoverflow.com/users/2731483/saegarde"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1411578529,
                    "creation_date": 1411578529,
                    "answer_id": 26022667,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a slight variation in that it keeps track of the factors.</p>\n\n<pre><code>def prime(a):\n    list=[]\n    x=2\n    b=True\n\n    while x&lt;a:\n        if a%x==0:\n            b=False\n            list.append(x)\n        x+=1\n\n    if b==False:\n        print \"Not Prime\"\n        print list\n    else:\n        print \"Prime\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4697988,
                        "reputation": 11,
                        "user_id": 3802395,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/1a50b85ae7ad9d524d80aa467b974c47?s=256&d=identicon&r=PG",
                        "display_name": "Francis Mujjuni",
                        "link": "https://stackoverflow.com/users/3802395/francis-mujjuni"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1404403783,
                    "last_edit_date": 1404403783,
                    "creation_date": 1404402223,
                    "answer_id": 24558107,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>a=input(\"Enter number:\")\n\ndef isprime(): \n\n    total=0\n    factors=(1,a)# The only factors of a number\n    pfactors=range(1,a+1) #considering all possible factors\n\n\n    if a==1 or a==0:# One and Zero are not prime numbers\n        print \"%d is NOT prime\"%a\n\n\n    elif a==2: # Two is the only even prime number\n        print \"%d is  prime\"%a\n\n\n    elif a%2==0:#Any even number is not prime except two\n        print \"%d is NOT prime\"%a  \n\n\n\n    else:#a number is prime if its multiples are 1 and itself \n         #The sum of the number that return zero moduli should be equal to the \"only\" factors\n        for number in pfactors: \n            if (a%number)==0: \n                total+=number\n        if total!=sum(factors):\n            print \"%d is NOT prime\"%a \n        else:\n             print \"%d is  prime\"%a\nisprime()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 161001,
                        "reputation": 45472,
                        "user_id": 1322401,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JlaPg.jpg?s=256",
                        "display_name": "Steven Rumbalski",
                        "link": "https://stackoverflow.com/users/1322401/steven-rumbalski"
                    },
                    "is_accepted": true,
                    "score": 70,
                    "last_activity_date": 1395070167,
                    "last_edit_date": 1395070167,
                    "creation_date": 1379352438,
                    "answer_id": 18833870,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You need to stop iterating once you know a number isn't prime.  Add a <code>break</code> once you find prime to exit the while loop.</p>\n\n<p>Making only minimal changes to your code to make it work:</p>\n\n<pre><code>a=2\nnum=13\nwhile num &gt; a :\n  if num%a==0 &amp; a!=num:\n    print('not prime')\n    break\n  i += 1\nelse: # loop not exited via break\n  print('prime')\n</code></pre>\n\n<p>Your algorithm is equivalent to:</p>\n\n<pre><code>for a in range(a, num):\n    if a % num == 0:\n        print('not prime')\n        break\nelse: # loop not exited via break\n    print('prime')\n</code></pre>\n\n<p>If you throw it into a function you can dispense with <code>break</code> and for-else:</p>\n\n<pre><code>def is_prime(n):\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n</code></pre>\n\n<p>Even if you are going to brute-force for prime like this you only need to iterate up to the square root of <code>n</code>.  Also, you can skip testing the even numbers after two.</p>\n\n<p>With these suggestions:</p>\n\n<pre><code>import math\ndef is_prime(n):\n    if n % 2 == 0 and n &gt; 2: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n</code></pre>\n\n<p>Note that this code does not properly handle <code>0</code>, <code>1</code>, and negative numbers.</p>\n\n<p>We make this simpler by using <code>all</code> with a generator expression to replace the for-loop.</p>\n\n<pre><code>import math\ndef is_prime(n):\n    if n % 2 == 0 and n &gt; 2: \n        return False\n    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4111216,
                        "reputation": 11,
                        "user_id": 3373964,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/7bf3af973a16546cdd2d06229740ec2a?s=256&d=identicon&r=PG",
                        "display_name": "CodingOcean",
                        "link": "https://stackoverflow.com/users/3373964/codingocean"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1393831984,
                    "creation_date": 1393831984,
                    "answer_id": 22141062,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This would do the job:</p>\n\n<pre><code>number=int(raw_input(\"Enter a number to see if its prime:\"))\nif number &lt;= 1:\n    print \"number is not prime\"\nelse:\n    a=2\n    check = True\n    while a != number:\n        if number%a == 0:\n            print \"Number is not prime\"\n            check = False\n            break\n        a+=1\n    if check == True:\n        print \"Number is prime\" \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1379354186,
                    "last_edit_date": 1379354186,
                    "creation_date": 1379352683,
                    "answer_id": 18833918,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The two main problems with your code are:</p>\n\n<ol>\n<li>After designating a number not prime, you continue to check the rest of the divisors even though you already know it is not prime, which can lead to it printing \"prime\" after printing \"not prime\".  Hint: use the `break' statement.</li>\n<li>You designate a number prime before you have checked all the divisors you need to check, because you are printing \"prime\" <em>inside</em> the loop. So you get \"prime\" multiple times, once for each divisor that doesn't go evenly into the number being tested. Hint: use an <code>else</code> clause with the loop to print \"prime\" only if the loop exits without breaking.</li>\n</ol>\n\n<p>A couple pretty significant inefficiencies:</p>\n\n<ol>\n<li>You should keep track of the numbers you have already found that are prime and only divide by those. Why divide by 4 when you have already divided by 2? If a number is divisible by 4 it is also divisible by 2, so you would have already caught it and there is no need to divide by 4.</li>\n<li>You need only to test up to the square root of the number being tested because any factor larger than that would need to be multiplied with a number smaller than that, and that would already have been tested by the time you get to the larger one.</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 233303,
                        "reputation": 22219,
                        "user_id": 498705,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/EYkZa.jpg?s=256",
                        "display_name": "Prashant Kumar",
                        "link": "https://stackoverflow.com/users/498705/prashant-kumar"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1379352394,
                    "creation_date": 1379352394,
                    "answer_id": 18833857,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After you determine that a number is composite (not prime), your work is done. You can exit the loop with <code>break</code>.</p>\n\n<pre><code>while num &gt; a :\n  if num%a==0 &amp; a!=num:\n    print('not prime')\n    break          # not going to update a, going to quit instead\n  else:\n    print('prime')\n    a=(num)+1\n</code></pre>\n\n<p>Also, you might try and become more familiar with some constructs in Python. Your loop can be shortened to a one-liner that still reads well in my opinion.</p>\n\n<pre><code>any(num % a == 0 for a in range(2, num))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3213747,
                        "reputation": 3913,
                        "user_id": 2713087,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1715485601/picture?type=large",
                        "display_name": "Ofir Israel",
                        "link": "https://stackoverflow.com/users/2713087/ofir-israel"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1379352357,
                    "creation_date": 1379352357,
                    "answer_id": 18833850,
                    "question_id": 18833759,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Your problem is that the loop continues to run even thought you've \"made up your mind\" already. You should add the line <code>break</code> after <code>a=a+1</code></p>\n"
                }
            ]
        },
        {
            "13361510": [
                {
                    "owner": {
                        "account_id": 372833,
                        "reputation": 88817,
                        "user_id": 722121,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=256&d=identicon&r=PG",
                        "display_name": "Gareth Latty",
                        "link": "https://stackoverflow.com/users/722121/gareth-latty"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1698876239,
                    "last_edit_date": 1698876239,
                    "creation_date": 1352813288,
                    "answer_id": 13361543,
                    "question_id": 13361510,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of Python 3.9 (<a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP 584</a> in particular), dicts gains union (<code>|</code>) and update (<code>|=</code>) operations just like sets, so that becomes the &quot;one true way&quot; to achieve what you are looking for.</p>\n<pre><code>d3 = d1 | d2\n</code></pre>\n<p>With the second dictionary taking precedence in the case of key collision.</p>\n<p>That PEP lists the other options available in earlier Python versions, which all have their downsides. If you are up to <a href=\"https://www.python.org/dev/peps/pep-0448/\" rel=\"noreferrer\">PEP 448</a> (Python 3.5), I would recommend using:</p>\n<pre><code>{**d1, **d2}\n</code></pre>\n<p>This is unpacking both dictionaries into a new one, resulting in a union.</p>\n<p>One problem is the behavior you want is ambiguous - dictionaries can't have duplicate keys, so it is unclear what you want to happen if both contain the same key. The spec is explicit about what should happen when using this method:</p>\n<blockquote>\n<p>In dictionaries, later values will always override earlier ones</p>\n</blockquote>\n<p>If you want the reverse behaviour, you can simply swap the order of the dictionaries in the literal.</p>\n<p>Your approach doesn't work because <a href=\"http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects\" rel=\"noreferrer\">dictionary views are set-like</a>, so they don't have addition implemented.</p>\n<p>What you probably want is the <a href=\"https://docs.python.org/3/library/stdtypes.html#frozenset.union\" rel=\"noreferrer\">union</a>: <code>d1.items() | d2.items()</code>, which will give you a set of tuples of <code>(key, value)</code>. If you then pass it to <code>dict()</code> and there are duplicates, the &quot;last&quot; value will be the one used, however sets (unlike the views themselves) are unordered, so there is no guarantee about which item will end up &quot;first&quot; in the combined set, meaning that which one &quot;wins&quot; will be arbitrary.</p>\n<p>So, in short, as long as order/duplicate selection isn't important:</p>\n<pre><code>dict(d1.items() | d2.items())\n</code></pre>\n<p>In Python 2, <code>dict.items()</code> simply returns a <code>list</code>, where your approach will work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11979491,
                        "reputation": 167,
                        "user_id": 8765729,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/86c3834cb4ec8543b58b6fe94b7a498e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Cyrill",
                        "link": "https://stackoverflow.com/users/8765729/cyrill"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1682285148,
                    "creation_date": 1682285148,
                    "answer_id": 76087348,
                    "question_id": 13361510,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm surprised nobody has mentioned <code>ChainMap</code>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from collections import ChainMap\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\ncombined = ChainMap(dict1, dict2)\n\nprint(combined['a']) # Output: 1\nprint(combined['c']) # Output: 3\n</code></pre>\n<p>From the documentation:</p>\n<blockquote>\n<p>It is often much faster than creating a new dictionary and running multiple update() calls.</p>\n</blockquote>\n<p>It will also preserve order if that's important.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1145527,
                        "reputation": 3517,
                        "user_id": 1128392,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/82dc2d8b993dc54d3a183e558888d439?s=256&d=identicon&r=PG",
                        "display_name": "erwaman",
                        "link": "https://stackoverflow.com/users/1128392/erwaman"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1542638004,
                    "last_edit_date": 1542638004,
                    "creation_date": 1542637178,
                    "answer_id": 53376589,
                    "question_id": 13361510,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another approach to the other suggested answers is:</p>\n\n<p><code>dict(list(d1.items()) + list(d2.items()))</code></p>\n\n<p>If there are keys present in both <code>d1</code> and <code>d2</code>, the value in <code>d2</code> will be used in the final dictionary.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1352813298,
                    "creation_date": 1352813298,
                    "answer_id": 13361547,
                    "question_id": 13361510,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In python3, <code>dict.items()</code> returns an object with type <code>dict_items</code> which apparently can't be added.  (in python 2, it returned a <code>list</code> which could be added).</p>\n\n<p>An alternative way to add a pair of dictionaries which works on py2k and py3k:</p>\n\n<pre><code>d = dict1.copy()\nd.update(dict2)\n</code></pre>\n\n<p>Of course, there's some ambiguity about what you want to happen in the case of key collisions.  e.g. if both dicts have <code>key1</code>, whose <code>key1</code> should be preserved in the output?  Or should you use some combination of both of their values?  In the latter case, you'll probably want something from the <code>collections</code> module (either <code>defaultdict</code> or <code>Counter</code>)</p>\n"
                }
            ]
        },
        {
            "311654": [
                {
                    "owner": {
                        "account_id": 1472,
                        "reputation": 175363,
                        "user_id": 1965,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/ad348387d020a15171daed0ab492a49b?s=256&d=identicon&r=PG",
                        "display_name": "FlySwat",
                        "link": "https://stackoverflow.com/users/1965/flyswat"
                    },
                    "is_accepted": true,
                    "score": 73,
                    "last_activity_date": 1227381946,
                    "last_edit_date": 1227381946,
                    "creation_date": 1227381424,
                    "answer_id": 311661,
                    "question_id": 311654,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There is a bunch on here:</p>\n\n<p><a href=\"http://www.webservicex.net/WS/wscatlist.aspx\" rel=\"noreferrer\">http://www.webservicex.net/WS/wscatlist.aspx</a></p>\n\n<p>Just google for \"Free WebService\" or \"Open WebService\" and you'll find tons of open SOAP endpoints.</p>\n\n<p>Remember, you can get a WSDL from any ASMX endpoint by adding ?WSDL to the url.</p>\n"
                }
            ]
        },
        {
            "17351016": [
                {
                    "owner": {
                        "account_id": 1628488,
                        "reputation": 18579,
                        "user_id": 1503495,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://i.sstatic.net/cP1dF.jpg?s=256",
                        "display_name": "codeofnode",
                        "link": "https://stackoverflow.com/users/1503495/codeofnode"
                    },
                    "is_accepted": true,
                    "score": 653,
                    "last_activity_date": 1650905675,
                    "last_edit_date": 1650905675,
                    "creation_date": 1372359401,
                    "answer_id": 17351115,
                    "question_id": 17351016,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/7943751/what-is-the-python3-equivalent-of-python-m-simplehttpserver\">What is the Python 3 equivalent of &quot;python -m SimpleHTTPServer&quot;</a></em>:</p>\n<p><code>SimpleHTTPServer</code> is for <code>python2</code>, so you're getting the error.</p>\n<p>In <code>python3</code>, The following works:</p>\n<pre><code>python -m http.server [&lt;portNo&gt;]\n</code></pre>\n<p>Because using <strong>Python 3</strong>, the module <code>SimpleHTTPServer</code> has been replaced by <code>http.server</code>, at least in Windows.</p>\n"
                }
            ]
        },
        {
            "37601644": [
                {
                    "owner": {
                        "account_id": 258754,
                        "reputation": 393370,
                        "user_id": 541136,
                        "user_type": "moderator",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/wftMn.jpg?s=256",
                        "display_name": "Aaron Hall",
                        "link": "https://stackoverflow.com/users/541136/aaron-hall"
                    },
                    "is_accepted": true,
                    "score": 255,
                    "last_activity_date": 1616020833,
                    "last_edit_date": 1616020833,
                    "creation_date": 1464899760,
                    "answer_id": 37601645,
                    "question_id": 37601644,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n<h2>What's the purpose of enums? What value do they create for the language? When should I use them and when should I avoid them?</h2>\n</blockquote>\n<p>The Enum type got into Python via <a href=\"https://www.python.org/dev/peps/pep-0435/\" rel=\"noreferrer\">PEP 435</a>. The reasoning given is:</p>\n<blockquote>\n<p>The properties of an enumeration are useful for defining an immutable, related set of constant values that may or may not have a semantic meaning.</p>\n</blockquote>\n<p>When using numbers and strings for this purpose, they could be characterized as <a href=\"https://en.wikipedia.org/wiki/Magic_number_(programming)\" rel=\"noreferrer\">&quot;magic numbers&quot;</a> or &quot;magic strings&quot;. Numbers rarely carry with them the semantics, and strings are easily confused (capitalization? spelling? snake or camel-case?)</p>\n<p>Days of the week and school letter grades are examples of this kind of collections of values.</p>\n<p>Here's an example from the <a href=\"https://docs.python.org/3/library/enum.html#creating-an-enum\" rel=\"noreferrer\">docs</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from enum import Enum\n\nclass Color(Enum):\n    red = 1\n    green = 2\n    blue = 3\n</code></pre>\n<p>Like the bare class, this is much more readable and elegant than the namedtuple example, it is also immutable, and it has further benefits as we'll see below.</p>\n<h3>Strictly dominant: The type of the enum member is the enum</h3>\n<pre><code>&gt;&gt;&gt; type(Color.red)\n&lt;enum 'Color'&gt;\n&gt;&gt;&gt; isinstance(Color.green, Color)\nTrue\n</code></pre>\n<p>This allows you to define functionality on the members in the Enum definition. Defining functionality on the values could be accomplished with the other prior methods, but it would be very inelegant.</p>\n<h3>Improvement: String coercion</h3>\n<p>The string representation is human readable, while the repr has more information:</p>\n<pre><code>&gt;&gt;&gt; print(Color.red)\nColor.red\n&gt;&gt;&gt; print(repr(Color.red))\n&lt;Color.red: 1&gt;\n</code></pre>\n<p>I find this to be an improvement over the magic numbers and even possibly better than strings from the namedtuple.</p>\n<h3>Iteration (parity):</h3>\n<p>The enum supports iteration (like the namedtuple, but not so much the bare class) too:</p>\n<pre><code>&gt;&gt;&gt; for color in Color:\n        print(color)\nColor.red\nColor.green\nColor.blue\n</code></pre>\n<p>The <code>__members__</code> attribute is an ordered mapping of the names of the enums to their respective enum objects (similar to namedtuple's <code>_asdict()</code> function).</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; Color.__members__\nmappingproxy(OrderedDict([('red', &lt;Color.red: 1&gt;), ('green', &lt;Color.green: 2&gt;), \n('blue', &lt;Color.blue: 3&gt;)]))\n</code></pre>\n<h3>Supported by pickle (parity)</h3>\n<p>You can serialize and deserialize the enum (in case anyone was worried about this):</p>\n<pre><code>&gt;&gt;&gt; import pickle\n&gt;&gt;&gt; color.red is pickle.loads(pickle.dumps(color.red))\nTrue\n</code></pre>\n<h3>Improvement: Aliases</h3>\n<p>This is a nice feature that the bare class doesn't have, and it would be difficult to tell the alias was there in the <code>namedtuple</code>.</p>\n<pre><code>class Color(Enum):\n    red = 1\n    green = 2\n    blue = 3\n    really_blue = 3\n</code></pre>\n<p>The alias comes after the canonical name, but they are both the same:</p>\n<pre><code>&gt;&gt;&gt; Color.blue is Color.really_blue\nTrue\n</code></pre>\n<p>If aliases should be prohibited to avoid value collisions, use the <code>enum.unique</code> decorator (a strictly dominant feature).</p>\n<h3>Strictly dominant: comparisons done with <code>is</code></h3>\n<p>The enum is intended to be tested with <code>is</code>, which is a fast check for a single object's identity in the process.</p>\n<pre><code>&gt;&gt;&gt; Color.red is Color.red\nTrue\n&gt;&gt;&gt; Color.red is Color.blue\nFalse\n&gt;&gt;&gt; Color.red is not Color.blue\nTrue\n</code></pre>\n<p>Tests for equality work as well, but tests for identity with <code>is</code> are optimal.</p>\n<h3>Different semantics from other Python classes</h3>\n<p>Enum classes have different semantics from regular Python types. The values of the Enum are instances of the Enum, and are singletons in memory for those values - there is no other purpose for instantiating them.</p>\n<pre><code>&gt;&gt;&gt; Color.red is Color(1)\n</code></pre>\n<p>This is important to keep in mind, perhaps it is a downside, but comparing on this dimension is comparing apples with oranges.</p>\n<h3>Enums not assumed to be ordered</h3>\n<p>While the Enum class knows what order the members are created in, enums are not assumed to be ordered. This is a feature because many things that may be enumerated have no natural order, and therefore order would be arbitrary.</p>\n<p>However, you can give your enums order (see the next section).</p>\n<h3>Subclassing</h3>\n<p>You can't subclass an Enum with members declared, but you <em>can</em> subclass an Enum that doesn't declare members to share behavior (see the OrderedEnum recipe in the <a href=\"https://docs.python.org/3/library/enum.html#orderedenum\" rel=\"noreferrer\">docs</a>).</p>\n<p>This is a feature - it makes little sense to subclass an Enum with members, but again, the comparison is apples and oranges.</p>\n<h2>When should I use <code>enum.Enum</code>?</h2>\n<p>This is the new canonical enumeration in Python. Collaborators will expect your enums to behave like these enums.</p>\n<p>Use it anywhere you have a canonical source of enumerated data in your code where you want explicitly specified to use the canonical name, instead of arbitrary data.</p>\n<p>For example, if in your code you want users to state that it's not <code>&quot;Green&quot;</code>, <code>&quot;green&quot;</code>, 2, or <code>&quot;Greene&quot;</code>, but <code>Color.green</code> - use the enum.Enum object. It's both explicit and specific.</p>\n<p>There are a lot of examples and recipes in the <a href=\"https://docs.python.org/3/library/enum.html#interesting-examples\" rel=\"noreferrer\">documentation</a>.</p>\n<h3>When should I avoid them?</h3>\n<p>Stop rolling your own or letting people guess about magic numbers and strings. Don't avoid them. Embrace them.</p>\n<p>However, if your enum members are required to be integers for historic reasons, there's the <code>IntEnum</code> from the same module, which has the same behavior, but is also an integer because it subclasses the builtin <code>int</code> before subclassing <code>Enum</code>. From <code>IntEnum</code>'s help:</p>\n<pre><code>class IntEnum(builtins.int, Enum)\n</code></pre>\n<p>we can see that the IntEnum values would test as an instance of an <code>int</code>.</p>\n"
                }
            ]
        },
        {
            "287085": [
                {
                    "owner": {
                        "account_id": 10809,
                        "reputation": 98713,
                        "user_id": 20578,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/idUMq.jpg?s=256",
                        "display_name": "Paul D. Waite",
                        "link": "https://stackoverflow.com/users/20578/paul-d-waite"
                    },
                    "is_accepted": true,
                    "score": 285,
                    "last_activity_date": 1727799579,
                    "last_edit_date": 1727799579,
                    "creation_date": 1226587287,
                    "answer_id": 287101,
                    "question_id": 287085,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Putting <code>*args</code> and/or <code>**kwargs</code> as the last items in your function definition\u2019s argument list allows that function to accept an arbitrary number of arguments and/or keyword arguments.</p>\n<p>For example, if you wanted to write a function that returned the sum of all its arguments, no matter how many you supply, you could write it like this:</p>\n<pre><code>def my_sum(*args):\n    return sum(args)\n</code></pre>\n<p>It\u2019s probably more commonly used in object-oriented programming, when you\u2019re overriding a function, and want to call the original function with whatever arguments the user passes in.</p>\n<p>You don\u2019t actually have to call them <code>args</code> and <code>kwargs</code>, that\u2019s just a convention. It\u2019s the <code>*</code> and <code>**</code> that do the magic.</p>\n<p>There's a more in-depth look in <a href=\"https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"nofollow noreferrer\">the official Python documentation on arbitrary argument lists</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2933251,
                        "reputation": 1062,
                        "user_id": 2512851,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/5f954338dc631d03b2b4bcc844900b9d?s=256&d=identicon&r=PG",
                        "display_name": "Kaushik Ghose",
                        "link": "https://stackoverflow.com/users/2512851/kaushik-ghose"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1371998497,
                    "creation_date": 1371998497,
                    "answer_id": 17261859,
                    "question_id": 287085,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just to clarify how to unpack the arguments, and take care of missing arguments etc.</p>\n\n<pre><code>def func(**keyword_args):\n  #--&gt;keyword_args is a dictionary\n  print 'func:'\n  print keyword_args\n  if keyword_args.has_key('b'): print keyword_args['b']\n  if keyword_args.has_key('c'): print keyword_args['c']\n\ndef func2(*positional_args):\n  #--&gt;positional_args is a tuple\n  print 'func2:'\n  print positional_args\n  if len(positional_args) &gt; 1:\n    print positional_args[1]\n\ndef func3(*positional_args, **keyword_args):\n  #It is an error to switch the order ie. def func3(**keyword_args, *positional_args):\n  print 'func3:'\n  print positional_args\n  print keyword_args\n\nfunc(a='apple',b='banana')\nfunc(c='candle')\nfunc2('apple','banana')#It is an error to do func2(a='apple',b='banana')\nfunc3('apple','banana',a='apple',b='banana')\nfunc3('apple',b='banana')#It is an error to do func3(b='banana','apple')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75297,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1226597495,
                    "creation_date": 1226597495,
                    "answer_id": 287616,
                    "question_id": 287085,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Another good use for <code>*args</code> and <code>**kwargs</code>: you can define generic \"catch all\" functions, which is great for decorators where you return such a wrapper instead of the original function.</p>\n\n<p>An example with a trivial caching decorator:</p>\n\n<pre><code>import pickle, functools\ndef cache(f):\n  _cache = {}\n  def wrapper(*args, **kwargs):\n    key = pickle.dumps((args, kwargs))\n    if key not in _cache:\n      _cache[key] = f(*args, **kwargs) # call the wrapped function, save in cache\n    return _cache[key] # read value from cache\n  functools.update_wrapper(wrapper, f) # update wrapper's metadata\n  return wrapper\n\nimport time\n@cache\ndef foo(n):\n  time.sleep(2)\n  return n*2\n\nfoo(10) # first call with parameter 10, sleeps\nfoo(10) # returns immediately\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75297,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "score": 75,
                    "last_activity_date": 1226597023,
                    "last_edit_date": 1495540966,
                    "creation_date": 1226597023,
                    "answer_id": 287582,
                    "question_id": 287085,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Notice the cool thing in <a href=\"https://stackoverflow.com/questions/287085/what-does-args-and-kwargs-mean#287293\">S.Lott's comment</a> - you can also call functions with <code>*mylist</code> and <code>**mydict</code> to unpack positional and keyword arguments:</p>\n\n<pre><code>def foo(a, b, c, d):\n  print a, b, c, d\n\nl = [0, 1]\nd = {\"d\":3, \"c\":2}\n\nfoo(*l, **d)\n</code></pre>\n\n<p>Will print: <code>0 1 2 3</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 98,
                    "last_activity_date": 1226591096,
                    "creation_date": 1226591096,
                    "answer_id": 287293,
                    "question_id": 287085,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Also, we use them for managing inheritance.</p>\n\n<pre><code>class Super( object ):\n   def __init__( self, this, that ):\n       self.this = this\n       self.that = that\n\nclass Sub( Super ):\n   def __init__( self, myStuff, *args, **kw ):\n       super( Sub, self ).__init__( *args, **kw )\n       self.myStuff= myStuff\n\nx= Super( 2.7, 3.1 )\ny= Sub( \"green\", 7, 6 )\n</code></pre>\n\n<p>This way Sub doesn't really know (or care) what the superclass initialization is.  Should you realize that you need to change the superclass, you can fix things without having to sweat the details in each subclass.</p>\n"
                }
            ]
        },
        {
            "57708": [
                {
                    "owner": {
                        "account_id": 1192229,
                        "reputation": 1318,
                        "user_id": 1164730,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/ef42739720ca39ec0d70759ef5be3eb0?s=256&d=identicon&r=PG",
                        "display_name": "Vladislav",
                        "link": "https://stackoverflow.com/users/1164730/vladislav"
                    },
                    "is_accepted": true,
                    "score": 61,
                    "last_activity_date": 1585295807,
                    "last_edit_date": 1585295807,
                    "creation_date": 1348724084,
                    "answer_id": 12614706,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The standard lib\u2019s very own HTMLParser has an undocumented function unescape() which does exactly what you think it does:</p>\n\n<p>up to Python 3.4:\n</p>\n\n<pre><code>import HTMLParser\nh = HTMLParser.HTMLParser()\nh.unescape('&amp;copy; 2010') # u'\\xa9 2010'\nh.unescape('&amp;#169; 2010') # u'\\xa9 2010'\n</code></pre>\n\n<p>Python 3.4+:</p>\n\n<pre><code>import html\nhtml.unescape('&amp;copy; 2010') # u'\\xa9 2010'\nhtml.unescape('&amp;#169; 2010') # u'\\xa9 2010'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6708,
                        "reputation": 8721,
                        "user_id": 11403,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://www.gravatar.com/avatar/70e672f6980b03825917f6d138420c2b?s=256&d=identicon&r=PG",
                        "display_name": "Markus Amalthea Magnuson",
                        "link": "https://stackoverflow.com/users/11403/markus-amalthea-magnuson"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1532115348,
                    "last_edit_date": 1532115348,
                    "creation_date": 1418307120,
                    "answer_id": 27424874,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are on Python 3.4 or newer, you can simply use the <a href=\"https://docs.python.org/3.4/library/html.html#html.unescape\" rel=\"noreferrer\"><code>html.unescape</code></a>:</p>\n\n<pre><code>import html\n\ns = html.unescape(s)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2385485,
                        "reputation": 3501,
                        "user_id": 2086547,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ddeaab9def502a711e65a4b3a9c94015?s=256&d=identicon&r=PG",
                        "display_name": "Victor",
                        "link": "https://stackoverflow.com/users/2086547/victor"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1451051716,
                    "last_edit_date": 1495540982,
                    "creation_date": 1451051716,
                    "answer_id": 34463462,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the Python 3 version of <a href=\"https://stackoverflow.com/a/58125/2086547\">dF's answer</a>:</p>\n\n<pre><code>import re\nimport html.entities\n\ndef unescape(text):\n    \"\"\"\n    Removes HTML or XML character references and entities from a text string.\n\n    :param text:    The HTML (or XML) source text.\n    :return:        The plain text, as a Unicode string, if necessary.\n    \"\"\"\n    def fixup(m):\n        text = m.group(0)\n        if text[:2] == \"&amp;#\":\n            # character reference\n            try:\n                if text[:3] == \"&amp;#x\":\n                    return chr(int(text[3:-1], 16))\n                else:\n                    return chr(int(text[2:-1]))\n            except ValueError:\n                pass\n        else:\n            # named entity\n            try:\n                text = chr(html.entities.name2codepoint[text[1:-1]])\n            except KeyError:\n                pass\n        return text # leave as is\n    return re.sub(\"&amp;#?\\w+;\", fixup, text)\n</code></pre>\n\n<p>The main changes concern <code>htmlentitydefs</code> that is now <code>html.entities</code> and <code>unichr</code> that is now <code>chr</code>. See this <a href=\"http://docs.pythonsprints.com/python3_porting/py-porting.html#reorganization\" rel=\"nofollow noreferrer\">Python 3 porting guide</a>.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user3946687"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1446496897,
                    "last_edit_date": 1446496897,
                    "creation_date": 1446496115,
                    "answer_id": 33486253,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Another solution is the builtin library xml.sax.saxutils (both for html and xml). However, it will convert only &amp;gt, &amp;amp and &amp;lt.</p>\n\n<pre><code>from xml.sax.saxutils import unescape\n\nescaped_text = unescape(text_to_escape)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2184,
                        "reputation": 75655,
                        "user_id": 3002,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a9929763a96cad537d72c9eda8fe3741?s=256&d=identicon&r=PG",
                        "display_name": "dF.",
                        "link": "https://stackoverflow.com/users/3002/df"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1441127576,
                    "last_edit_date": 1441127576,
                    "creation_date": 1221183641,
                    "answer_id": 58125,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python has the <a href=\"https://docs.python.org/2/library/htmllib.html#module-htmlentitydefs\" rel=\"noreferrer\">htmlentitydefs</a> module, but this doesn't include a function to unescape HTML entities.</p>\n\n<p>Python developer Fredrik Lundh (author of elementtree, among other things) has  such a function <a href=\"http://effbot.org/zone/re-sub.htm#unescape-html\" rel=\"noreferrer\">on his website</a>, which works with decimal, hex and named entities:</p>\n\n<pre><code>import re, htmlentitydefs\n\n##\n# Removes HTML or XML character references and entities from a text string.\n#\n# @param text The HTML (or XML) source text.\n# @return The plain text, as a Unicode string, if necessary.\n\ndef unescape(text):\n    def fixup(m):\n        text = m.group(0)\n        if text[:2] == \"&amp;#\":\n            # character reference\n            try:\n                if text[:3] == \"&amp;#x\":\n                    return unichr(int(text[3:-1], 16))\n                else:\n                    return unichr(int(text[2:-1]))\n            except ValueError:\n                pass\n        else:\n            # named entity\n            try:\n                text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])\n            except KeyError:\n                pass\n        return text # leave as is\n    return re.sub(\"&amp;#?\\w+;\", fixup, text)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 685338,
                        "reputation": 31,
                        "user_id": 541895,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/15333d314d1e06def209df953fa12fa5?s=256&d=identicon&r=PG",
                        "display_name": "rogerhu",
                        "link": "https://stackoverflow.com/users/541895/rogerhu"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1363276697,
                    "last_edit_date": 1363276697,
                    "creation_date": 1292327546,
                    "answer_id": 4438857,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Not sure why the Stack Overflow thread does not include the ';' in the search/replace (i.e. lambda m: '&amp;#%d*<em>;</em>*') If you don't, BeautifulSoup can barf because the adjacent character can be interpreted as part of the HTML code (i.e. &amp;#39B for &amp;#39Blackout).                                                                                                                                                                                                                                                                                     </p>\n\n<p>This worked better for me:</p>\n\n<pre><code>import re\nfrom BeautifulSoup import BeautifulSoup\n\nhtml_string='&lt;a href=\"/cgi-bin/article.cgi?f=/c/a/2010/12/13/BA3V1GQ1CI.DTL\"title=\"\"&gt;&amp;#x27;Blackout in a can; on some shelves despite ban&lt;/a&gt;'\n\nhexentityMassage = [(re.compile('&amp;#x([^;]+);'), \nlambda m: '&amp;#%d;' % int(m.group(1), 16))]\n\nsoup = BeautifulSoup(html_string, \nconvertEntities=BeautifulSoup.HTML_ENTITIES, \nmarkupMassage=hexentityMassage)\n</code></pre>\n\n<ol>\n<li>The int(m.group(1), 16) converts the number (specified in base-16) format back to an integer.                                                                             </li>\n<li>m.group(0) returns the entire match, m.group(1) returns the regexp capturing group                                                                                   </li>\n<li>Basically using markupMessage is the same as:<br>\nhtml_string = re.sub('&amp;#x([^;]+);', lambda m: '&amp;#%d;' % int(m.group(1), 16), html_string)                                                                            </li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 545924,
                        "reputation": 1034,
                        "user_id": 1196188,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dabecf63b104f806a51c1ca72c329e90?s=256&d=identicon&r=PG",
                        "display_name": "pragmar",
                        "link": "https://stackoverflow.com/users/1196188/pragmar"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1328814105,
                    "last_edit_date": 1328814105,
                    "creation_date": 1328813748,
                    "answer_id": 9216990,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>An alternative, if you have lxml:</p>\n\n<pre><code>&gt;&gt;&gt; import lxml.html\n&gt;&gt;&gt; lxml.html.fromstring('&amp;#x01ce').text\nu'\\u01ce'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1318266459,
                    "last_edit_date": 1495540037,
                    "creation_date": 1221169948,
                    "answer_id": 57745,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could find an answer here -- <a href=\"https://stackoverflow.com/questions/53224/getting-international-characters-from-a-web-page#53246\">Getting international characters from a web page?</a></p>\n\n<p><strong>EDIT</strong>: It seems like <code>BeautifulSoup</code> doesn't convert entities written in hexadecimal form. It can be fixed:</p>\n\n<pre><code>import copy, re\nfrom BeautifulSoup import BeautifulSoup\n\nhexentityMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)\n# replace hexadecimal character reference by decimal one\nhexentityMassage += [(re.compile('&amp;#x([^;]+);'), \n                     lambda m: '&amp;#%d;' % int(m.group(1), 16))]\n\ndef convert(html):\n    return BeautifulSoup(html,\n        convertEntities=BeautifulSoup.HTML_ENTITIES,\n        markupMassage=hexentityMassage).contents[0].string\n\nhtml = '&lt;html&gt;&amp;#x01ce;&amp;#462;&lt;/html&gt;'\nprint repr(convert(html))\n# u'\\u01ce\\u01ce'\n</code></pre>\n\n<p><strong>EDIT</strong>: </p>\n\n<p><a href=\"http://effbot.org/zone/re-sub.htm#unescape-html\" rel=\"nofollow noreferrer\"><code>unescape()</code></a> function mentioned by <a href=\"https://stackoverflow.com/questions/57708/convert-xml-html-entities-into-unicode-string-in-python/58125#58125\">@dF</a> which uses  <code>htmlentitydefs</code> standard module and <code>unichr()</code> might be more appropriate in this case.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24481,
                        "reputation": 6962,
                        "user_id": 62262,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/sMJuS.jpg?s=256",
                        "display_name": "karlcow",
                        "link": "https://stackoverflow.com/users/62262/karlcow"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1235245558,
                    "creation_date": 1235245558,
                    "answer_id": 573629,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>This is a function which should help you to get it right and convert entities back to utf-8 characters.</p>\n\n<pre><code>def unescape(text):\n   \"\"\"Removes HTML or XML character references \n      and entities from a text string.\n   @param text The HTML (or XML) source text.\n   @return The plain text, as a Unicode string, if necessary.\n   from Fredrik Lundh\n   2008-01-03: input only unicode characters string.\n   http://effbot.org/zone/re-sub.htm#unescape-html\n   \"\"\"\n   def fixup(m):\n      text = m.group(0)\n      if text[:2] == \"&amp;#\":\n         # character reference\n         try:\n            if text[:3] == \"&amp;#x\":\n               return unichr(int(text[3:-1], 16))\n            else:\n               return unichr(int(text[2:-1]))\n         except ValueError:\n            print \"Value Error\"\n            pass\n      else:\n         # named entity\n         # reescape the reserved characters.\n         try:\n            if text[1:-1] == \"amp\":\n               text = \"&amp;amp;amp;\"\n            elif text[1:-1] == \"gt\":\n               text = \"&amp;amp;gt;\"\n            elif text[1:-1] == \"lt\":\n               text = \"&amp;amp;lt;\"\n            else:\n               print text[1:-1]\n               text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])\n         except KeyError:\n            print \"keyerror\"\n            pass\n      return text # leave as is\n   return re.sub(\"&amp;#?\\w+;\", fixup, text)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3577,
                        "reputation": 7519,
                        "user_id": 5169,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/7vacP.jpg?s=256",
                        "display_name": "chryss",
                        "link": "https://stackoverflow.com/users/5169/chryss"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1221174548,
                    "creation_date": 1221174548,
                    "answer_id": 57877,
                    "question_id": 57708,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use the builtin <code>unichr</code> -- BeautifulSoup isn't necessary:</p>\n\n<pre><code>&gt;&gt;&gt; entity = '&amp;#x01ce'\n&gt;&gt;&gt; unichr(int(entity[3:],16))\nu'\\u01ce'\n</code></pre>\n"
                }
            ]
        },
        {
            "38420847": [
                {
                    "owner": {
                        "account_id": 6520532,
                        "reputation": 1094,
                        "user_id": 5044915,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/01b88a211ab6bda2d8c63fb58ced833e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Alex",
                        "link": "https://stackoverflow.com/users/5044915/alex"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1630090398,
                    "creation_date": 1630090398,
                    "answer_id": 68958154,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Late to the party, but here's my preferred solution:</p>\n<pre><code>#load data\ndata = pd.DataFrame({'Name' : [3, 4,6], 'Age' : [18, 92,98], 'Weight' : [68, 59,49]})\n\n#list for cols to scale\ncols_to_scale = ['Age','Weight']\n\n#create and fit scaler\nscaler = StandardScaler()\nscaler.fit(data[cols_to_scale])\n\n#scale selected data\ndata[cols_to_scale] = scaler.transform(data[cols_to_scale])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 21760762,
                        "reputation": 51,
                        "user_id": 16065356,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gh4OnihjpeMq8Ng3tX2A4qk-Rc7HbCVTK_iEC-kZQ=k-s256",
                        "display_name": "Addy",
                        "link": "https://stackoverflow.com/users/16065356/addy"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1623344896,
                    "creation_date": 1623344896,
                    "answer_id": 67925655,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest way I find is:</p>\n<pre><code>from sklearn.preprocessing import StandardScaler\n# I'm selecting only numericals to scale\nnumerical = temp.select_dtypes(include='float64').columns\n# This will transform the selected columns and merge to the original data frame\ntemp.loc[:,numerical] = StandardScaler().fit_transform(temp.loc[:,numerical])\n</code></pre>\n<h1>Output</h1>\n<pre><code>         Age  Name    Weight\n0 -1.411004     3  1.202703\n1  0.623041     4  0.042954\n2  0.787964     6 -1.245657\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2285236"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1560958978,
                    "last_edit_date": 1560958978,
                    "creation_date": 1468756980,
                    "answer_id": 38420977,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>Update:</h2>\n\n<p>Currently the best way to handle this is to use ColumnTransformer as explained <a href=\"https://stackoverflow.com/a/54322771/2285236\">here</a>.</p>\n\n<hr>\n\n<p>First create a copy of your dataframe:</p>\n\n<pre><code>scaled_features = data.copy()\n</code></pre>\n\n<p>Don't include the Name column in the transformation:</p>\n\n<pre><code>col_names = ['Age', 'Weight']\nfeatures = scaled_features[col_names]\nscaler = StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)\n</code></pre>\n\n<p>Now, don't create a new dataframe but assign the result to those two columns:</p>\n\n<pre><code>scaled_features[col_names] = features\nprint(scaled_features)\n\n\n        Age  Name    Weight\n0 -1.411004     3  1.202703\n1  0.623041     4  0.042954\n2  0.787964     6 -1.245657\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2853,
                        "reputation": 7250,
                        "user_id": 4045,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/26b8325f7fc2bbf90b7030f48936f21f?s=256&d=identicon&r=PG",
                        "display_name": "Guy C",
                        "link": "https://stackoverflow.com/users/4045/guy-c"
                    },
                    "is_accepted": true,
                    "score": 64,
                    "last_activity_date": 1548236940,
                    "last_edit_date": 1548236940,
                    "creation_date": 1548231678,
                    "answer_id": 54322771,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Introduced in v0.20 is <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html\" rel=\"noreferrer\">ColumnTransformer</a> which applies transformers to a specified set of columns of an array or pandas DataFrame.</p>\n\n<pre><code>import pandas as pd\ndata = pd.DataFrame({'Name' : [3, 4,6], 'Age' : [18, 92,98], 'Weight' : [68, 59,49]})\n\ncol_names = ['Name', 'Age', 'Weight']\nfeatures = data[col_names]\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\n\nct = ColumnTransformer([\n        ('somename', StandardScaler(), ['Age', 'Weight'])\n    ], remainder='passthrough')\n\nct.fit_transform(features)\n</code></pre>\n\n<p>NB: Like Pipeline it also has a shorthand version <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_transformer.html\" rel=\"noreferrer\">make_column_transformer</a> which doesn't require naming the transformers</p>\n\n<h2>Output</h2>\n\n<pre><code>-1.41100443,  1.20270298,  3.       \n 0.62304092,  0.04295368,  4.       \n 0.78796352, -1.24565666,  6.       \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12029782,
                        "reputation": 79,
                        "user_id": 8800393,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6f9c24ebb975b699bab1f33bb31c378a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Danil",
                        "link": "https://stackoverflow.com/users/8800393/danil"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1530022153,
                    "last_edit_date": 1530022153,
                    "creation_date": 1530021852,
                    "answer_id": 51044853,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another option would be to drop Name column before scaling then merge it back together:</p>\n\n<pre><code>data = pd.DataFrame({'Name' : [3, 4,6], 'Age' : [18, 92,98], 'Weight' : [68, 59,49]})\nfrom sklearn.preprocessing import StandardScaler\n\n# Save the variable you don't want to scale\nname_var = data['Name']\n\n# Fit scaler to your data\nscaler.fit(data.drop('Name', axis = 1))\n\n# Calculate scaled values and store them in a separate object\nscaled_values = scaler.transform(data.drop('Name', axis = 1))\n\ndata = pd.DataFrame(scaled_values, index = data.index, columns = data.drop('ID', axis = 1).columns)\ndata['Name'] = name_var\n\nprint(data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7265372,
                        "reputation": 5850,
                        "user_id": 5540305,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/EuHvE.jpg?s=256",
                        "display_name": "hashcode55",
                        "link": "https://stackoverflow.com/users/5540305/hashcode55"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1468764458,
                    "creation_date": 1468764458,
                    "answer_id": 38422081,
                    "question_id": 38420847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A more pythonic way to do this - </p>\n\n<pre><code>from sklearn.preprocessing import StandardScaler\ndata[['Age','Weight']] = data[['Age','Weight']].apply(\n                           lambda x: StandardScaler().fit_transform(x))\ndata \n</code></pre>\n\n<p>Output - </p>\n\n<pre><code>         Age  Name    Weight\n0 -1.411004     3  1.202703\n1  0.623041     4  0.042954\n2  0.787964     6 -1.245657\n</code></pre>\n"
                }
            ]
        },
        {
            "6357361": [
                {
                    "owner": {
                        "account_id": 191753,
                        "reputation": 47638,
                        "user_id": 432509,
                        "user_type": "registered",
                        "accept_rate": 47,
                        "profile_image": "https://i.sstatic.net/PsT5q.png?s=256",
                        "display_name": "ideasman42",
                        "link": "https://stackoverflow.com/users/432509/ideasman42"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1722910154,
                    "last_edit_date": 1722910154,
                    "creation_date": 1354344095,
                    "answer_id": 13657112,
                    "question_id": 6357361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python3.x this is the closest thing I could come up with to executing a file directly, that matches running <code>python /path/to/somefile.py</code>.</p>\n<p>Notes:</p>\n<ul>\n<li>Uses binary reading to avoid encoding issues</li>\n<li>Garenteed to close the file <em>(Python3.x warns about this)</em></li>\n<li>defines <code>__main__</code>, some scripts depend on this to check if they are loading as a module or not for eg. <code>if __name__ == &quot;__main__&quot;</code></li>\n<li>setting <code>__file__</code> is nicer for exception messages and some scripts use <code>__file__</code> to get the paths of other files relative to them.</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code>def exec_file(filepath):\n    global_namespace = {\n        &quot;__file__&quot;: filepath,\n        &quot;__name__&quot;: &quot;__main__&quot;,\n    }\n    with open(filepath, 'rb') as file:\n        exec(compile(file.read(), filepath, 'exec'), global_namespace)\n\n# Execute the file.\nexec_file(&quot;/path/to/somefile.py&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1585555834,
                    "last_edit_date": 1585555834,
                    "creation_date": 1308139635,
                    "answer_id": 6357418,
                    "question_id": 6357361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>2to3</code> script replaces</p>\n\n<pre><code>execfile(filename, globals, locals)\n</code></pre>\n\n<p>by</p>\n\n<pre><code>exec(compile(open(filename, \"rb\").read(), filename, 'exec'), globals, locals)\n</code></pre>\n\n<p>This seems to be the official recommendation. You may want to use a <code>with</code> block to ensure that the file is promptly closed again:</p>\n\n<pre><code>with open(filename, \"rb\") as source_file:\n    code = compile(source_file.read(), filename, \"exec\")\nexec(code, globals, locals)\n</code></pre>\n\n<p>You can omit the <code>globals</code> and <code>locals</code> arguments to execute the file in the current scope, or use <code>exec(code, {})</code> to use a new temporary dictionary as both the globals and locals dictionary, effectively executing the file in a new temporary scope.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 43211,
                        "reputation": 171843,
                        "user_id": 126214,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=256&d=identicon&r=PG",
                        "display_name": "Lennart Regebro",
                        "link": "https://stackoverflow.com/users/126214/lennart-regebro"
                    },
                    "is_accepted": false,
                    "score": 70,
                    "last_activity_date": 1573477194,
                    "last_edit_date": 1573477194,
                    "creation_date": 1308140111,
                    "answer_id": 6357529,
                    "question_id": 6357361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>execfile(filename)\n</code></pre>\n\n<p>can be replaced with</p>\n\n<pre><code>exec(open(filename).read())\n</code></pre>\n\n<p>which works in all versions of Python</p>\n\n<p>Newer versions of Python will warn you that you didn't close that file, so then you can do this is you want to get rid of that warning:</p>\n\n<pre><code>with open(filename) as infile:\n    exec(infile.read())\n</code></pre>\n\n<p>But really, if you care about closing files, you should care enough to not use <code>exec</code> in the first place.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 397124,
                        "reputation": 19015,
                        "user_id": 761090,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/f1f2a78bb5182bae8adb98e08aa214c6?s=256&d=identicon&r=PG",
                        "display_name": "eudoxos",
                        "link": "https://stackoverflow.com/users/761090/eudoxos"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1445201685,
                    "creation_date": 1445201685,
                    "answer_id": 33203154,
                    "question_id": 6357361,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Standard <a href=\"https://docs.python.org/2/library/runpy.html#runpy.run_path\" rel=\"nofollow\">runpy.run_path</a> is an alternative.</p>\n"
                }
            ]
        },
        {
            "16245106": [
                {
                    "owner": {
                        "account_id": 1929501,
                        "reputation": 5967,
                        "user_id": 1739226,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/9tg3k.png?s=256",
                        "display_name": "Jacek Przemieniecki",
                        "link": "https://stackoverflow.com/users/1739226/jacek-przemieniecki"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1367013605,
                    "last_edit_date": 1367013605,
                    "creation_date": 1367013286,
                    "answer_id": 16245812,
                    "question_id": 16245106,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm pretty sure this is not something you should do, but you can force Python to import specific file as a module using <a href=\"http://docs.python.org/2/library/imp.html\" rel=\"nofollow\" title=\"imp\">imp</a>:</p>\n\n<pre><code>import imp\n\nwith open(\"foo.py\") as source:\n    foo = imp.load_module(\"foo\", source, \"./\", ('', '', imp.PY_SOURCE))\n</code></pre>\n\n<p>now you can do:</p>\n\n<pre><code>gaz_instance = foo.gaz()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 240600,
                        "reputation": 101739,
                        "user_id": 510937,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=256&d=identicon&r=PG",
                        "display_name": "Bakuriu",
                        "link": "https://stackoverflow.com/users/510937/bakuriu"
                    },
                    "is_accepted": true,
                    "score": 21,
                    "last_activity_date": 1367012927,
                    "last_edit_date": 1367012927,
                    "creation_date": 1367010977,
                    "answer_id": 16245345,
                    "question_id": 16245106,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The actual problem you are having, using a single import, is due to the <a href=\"http://docs.python.org/2/tutorial/modules.html#packages\" rel=\"noreferrer\">packages</a> having the precedence over modules:</p>\n\n<blockquote>\n  <p>Note that when using <code>from package import item</code>, the item can be either\n  a submodule (or subpackage) of the package, or some other name defined\n  in the package, like a function, class or variable. The <code>import</code>\n  statement first tests whether the item is defined in the package; if\n  not, it assumes it is a module and attempts to load it. If it fails to\n  find it, an <code>ImportError</code> exception is raised.</p>\n</blockquote>\n\n<p>Anyway I'd <em>strongly</em> suggest to rename the file or the directory since you <strong>cannot</strong> import more than one module with a given name. The problem occurs because each module/package object is stored into <code>sys.modules</code>, which is a simple <code>dict</code> and thus it cannot contain multiple equal keys.</p>\n\n<p>In particular, assuming <code>foo.py</code> and the <code>foo</code> directory are in different directories(and if they aren't you still can't import <code>foo.py</code>), when doing:</p>\n\n<pre><code>from foo import gaz\n</code></pre>\n\n<p>It will load <code>foo.py</code> and put the module into <code>sys.modules</code>, then trying to do:</p>\n\n<pre><code>from foo.bar import wakaka\n</code></pre>\n\n<p>Will fail because the import tries to use the module <code>foo.py</code> instead of the package.</p>\n\n<p>The opposite happens if you first import <code>foo.bar</code>; the imports will use the package instead of the module.</p>\n"
                }
            ]
        },
        {
            "3236213": [
                {
                    "owner": {
                        "account_id": 11659,
                        "reputation": 54273,
                        "user_id": 22595,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/kxy3v.jpg?s=256",
                        "display_name": "Micha\u0142 Niklas",
                        "link": "https://stackoverflow.com/users/22595/micha%c5%82-niklas"
                    },
                    "is_accepted": true,
                    "score": 18,
                    "last_activity_date": 1592804111,
                    "last_edit_date": 1592804111,
                    "creation_date": 1279017695,
                    "answer_id": 3236306,
                    "question_id": 3236213,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For a long time Java offered no such method. Like many others I did my versions of such join for array of strings and collections (iterators).</p>\n<p>But Java 8 added <code>String.join()</code>:</p>\n<pre><code>String[] arr = { &quot;ala&quot;, &quot;ma&quot;, &quot;kota&quot; };\nString joined = String.join(&quot; &quot;, arr);\nSystem.out.println(joined);\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 37416,
                        "reputation": 75947,
                        "user_id": 106979,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/aOb1r.jpg?s=256",
                        "display_name": "fortran",
                        "link": "https://stackoverflow.com/users/106979/fortran"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1372930794,
                    "last_edit_date": 1372930794,
                    "creation_date": 1279018947,
                    "answer_id": 3236460,
                    "question_id": 3236213,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A compromise solution between not writing extra \"utils\" code and not using external libraries that I've found is the following <em>two-liner</em>:</p>\n\n<pre><code>/* collection is an object that formats to something like \"[1, 2, 3...]\"\n  (as the case of ArrayList, Set, etc.)\n  That is part of the contract of the Collection interface.\n*/\nString res = collection.toString();\nres = res.substring(1, res.length()-1);\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 48192,
                        "reputation": 11019,
                        "user_id": 143069,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/JKcVg.jpg?s=256",
                        "display_name": "ILMTitan",
                        "link": "https://stackoverflow.com/users/143069/ilmtitan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1279026727,
                    "creation_date": 1279026727,
                    "answer_id": 3237475,
                    "question_id": 3236213,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Not in the standard library. It is in <a href=\"http://commons.apache.org/lang/api/org/apache/commons/lang/StringUtils.html#join%28java.lang.Iterable,%20char%29\" rel=\"nofollow noreferrer\">StringUtils</a> of <a href=\"http://commons.apache.org/lang/\" rel=\"nofollow noreferrer\">commons lang</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 607975,
                        "reputation": 1065,
                        "user_id": 325923,
                        "user_type": "unregistered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/276fdf7c0266f2a1c6019a0e80a3fd57?s=256&d=identicon&r=PG",
                        "display_name": "BobTurbo",
                        "link": "https://stackoverflow.com/users/325923/bobturbo"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1279020603,
                    "last_edit_date": 1279020603,
                    "creation_date": 1279020010,
                    "answer_id": 3236616,
                    "question_id": 3236213,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Nope there is not. Here is my attempt:</p>\n\n<pre><code>/**\n * Join a collection of strings and add commas as delimiters.\n * @require words.size() &gt; 0 &amp;&amp; words != null\n */\npublic static String concatWithCommas(Collection&lt;String&gt; words) {\n    StringBuilder wordList = new StringBuilder();\n    for (String word : words) {\n        wordList.append(word + \",\");\n    }\n    return new String(wordList.deleteCharAt(wordList.length() - 1));\n}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 102991,
                        "reputation": 383108,
                        "user_id": 276101,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/30fe97e726af0ea4ff8b756fbf2e6d15?s=256&d=identicon&r=PG",
                        "display_name": "polygenelubricants",
                        "link": "https://stackoverflow.com/users/276101/polygenelubricants"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1279017149,
                    "creation_date": 1279017149,
                    "answer_id": 3236231,
                    "question_id": 3236213,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There is nothing in the standard library, but Guava for example has <a href=\"http://guava-libraries.googlecode.com/svn-history/r13/trunk/javadoc/com/google/common/base/Joiner.html\" rel=\"noreferrer\"><code>Joiner</code></a> that does this.</p>\n\n<blockquote>\n<pre><code>Joiner joiner = Joiner.on(\";\").skipNulls();\n. . .\nreturn joiner.join(\"Harry\", null, \"Ron\", \"Hermione\");\n// returns \"Harry; Ron; Hermione\"\n</code></pre>\n</blockquote>\n\n<p>You can always write your own using a <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/StringBuilder.html\" rel=\"noreferrer\"><code>StringBuilder</code></a>, though.</p>\n"
                }
            ]
        },
        {
            "508277": [
                {
                    "owner": {
                        "account_id": 4675491,
                        "reputation": 9266,
                        "user_id": 4698026,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://lh4.googleusercontent.com/-P-bQf8VLKQY/AAAAAAAAAAI/AAAAAAAAAO4/a_8mG7UXRfo/photo.jpg?sz=256",
                        "display_name": "Himanshu Mishra",
                        "link": "https://stackoverflow.com/users/4698026/himanshu-mishra"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1483722268,
                    "creation_date": 1483722268,
                    "answer_id": 41510615,
                    "question_id": 508277,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm not sure about the best tool, but dependency analysis is best done using extracting and scanning the python files of the project.</p>\n\n<p>Here is one such tool using the above technique : <a href=\"http://orkohunter.net/depends/\" rel=\"nofollow noreferrer\">orkohunter.net/depends</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16595,
                        "reputation": 41671,
                        "user_id": 36330,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/087bc3a6b2fe0dbbf39ca49f40e2bac1?s=256&d=identicon&r=PG",
                        "display_name": "joeforker",
                        "link": "https://stackoverflow.com/users/36330/joeforker"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242334988,
                    "creation_date": 1242334988,
                    "answer_id": 865757,
                    "question_id": 508277,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>PyStructure \u2013 Automated Structure and Dependency Analysis of Python Code</p>\n\n<p>This is used for PyDev's refactoring features. <a href=\"http://pystructure.ifs.hsr.ch/trac/\" rel=\"nofollow noreferrer\">http://pystructure.ifs.hsr.ch/trac/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10015,
                        "reputation": 57674,
                        "user_id": 18745,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/8ba0489ea90652c08d1406f2afe2e0e2?s=256&d=identicon&r=PG",
                        "display_name": "Dzinx",
                        "link": "https://stackoverflow.com/users/18745/dzinx"
                    },
                    "is_accepted": true,
                    "score": 29,
                    "last_activity_date": 1233730850,
                    "last_edit_date": 1233730850,
                    "creation_date": 1233699973,
                    "answer_id": 509194,
                    "question_id": 508277,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I recommend using <a href=\"http://furius.ca/snakefood/\" rel=\"noreferrer\">snakefood</a> for creating graphical dependency graphs of Python projects. It detects dependencies nicely enough to immediately see areas for refactorisation. Its usage is pretty straightforward if you read a little bit of documentation.</p>\n\n<p>Of course, you can omit the graph-creation step and receive a dependency dictionary in a file instead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8415,
                        "reputation": 42163,
                        "user_id": 15154,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/cdca0dc45085388c1b753104ce4c8648?s=256&d=identicon&r=PG",
                        "display_name": "John Fouhy",
                        "link": "https://stackoverflow.com/users/15154/john-fouhy"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1233696633,
                    "creation_date": 1233696633,
                    "answer_id": 508975,
                    "question_id": 508277,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I don't know what is the <em>best</em> dependency analysis tool.  You could look into <code>modulefinder</code> \u2013 it's a module in the standard library that determines the set of modules imported by a script.</p>\n\n<p>Of course, with python you have problems of conditional imports, and even potentially scripts calling <code>__import__</code> directly, so it may not find everything.  This is why tools like py2exe need special help to cope with packages like PIL.</p>\n"
                }
            ]
        },
        {
            "12534135": [
                {
                    "owner": {
                        "account_id": 15097903,
                        "reputation": 1,
                        "user_id": 10895828,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-vsKNHAfuOM4/AAAAAAAAAAI/AAAAAAAAAm8/_UTiXdb9a-o/photo.jpg?sz=256",
                        "display_name": "Daniel Castillo",
                        "link": "https://stackoverflow.com/users/10895828/daniel-castillo"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1600457701,
                    "creation_date": 1600457701,
                    "answer_id": 63961813,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This might be helpful for someone. I was having this same issue (or at least a similar issue) and what helped me was to get the path in which Python (Be aware of the version you want to use python, python3, etc...) by running this:</p>\n<pre><code>which python3\n</code></pre>\n<p>And then, I replaced python3 for the full path of python3 in my crontab file.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15305164,
                        "reputation": 9,
                        "user_id": 11042186,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/388d4f7ea930fb6dc5bbe45e31e4fd1b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mohammed Khair Tarig",
                        "link": "https://stackoverflow.com/users/11042186/mohammed-khair-tarig"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1569100183,
                    "last_edit_date": 1569100183,
                    "creation_date": 1569098600,
                    "answer_id": 58043952,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was working on project that includes <code>paramiko lib</code>, when I run the Check_.py from <code>cmdlin</code> it works perfect but when I set the crontab it fails with error <code>no module name paramiko</code>. </p>\n\n<p>So to make it short:<br>\n - there were two different python versions installed 3.7 and 2.4, so I used <code>whreris python3</code> to locate the python path <code>/usr/local/bin/python3.7m</code> so replacing the <code>python</code> with the path will solve the issue.</p>\n\n<h3>Example</h3>\n\n<pre><code>* * * * * cd /home/MKhair/hlthchk/BR/ &amp;&amp; /usr/local/bin/python3.7m /home/MKhair/hlthchk/BR/Check_.py\n* * * * * cd [ path-to-the-script-dir] &amp;&amp; [path-to-python] [path-to-the-script]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 159564,
                        "reputation": 9993,
                        "user_id": 379037,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/jtIIn.jpg?s=256",
                        "display_name": "JJC",
                        "link": "https://stackoverflow.com/users/379037/jjc"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1568144579,
                    "last_edit_date": 1568144579,
                    "creation_date": 1417012767,
                    "answer_id": 27151871,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Typically, crontab problems like this are caused by the PATH environment variable being more restrictive/different than what your normal user's PATH environment is.  Since your shell uses the PATH environment to find the executable (e.g. /usr/bin/python is found in /usr/bin when you type \"python\" at a shell prompt), when the PATH is missing common locations, like /usr/bin or /usr/sbin, your cron job will fail. This has bit me many times.  The simple fix is just to explicitly set the PATH yourself near the top of your crontab file, before any commands that need it. So, just edit the crontab as usual and add something like this near the top (if your binary is not in one of the below paths, you'll need to add it after a colon):</p>\n\n<pre><code>PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin\n</code></pre>\n\n<p>Alternately, just use absolute paths to your binaries and scripts in crontab.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 471243,
                        "reputation": 2157,
                        "user_id": 878915,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ed0870e5d6b30b12a448c8b0a2fe1f20?s=256&d=identicon&r=PG",
                        "display_name": "shargors",
                        "link": "https://stackoverflow.com/users/878915/shargors"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1553860568,
                    "last_edit_date": 1553860568,
                    "creation_date": 1348244136,
                    "answer_id": 12534242,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It is possible that the script does not start because it cannot locate the python interpreter.  Crontab environment may be very different from the shell environment which you are using.  The search paths may be differ significantly.\nAlso, you test your script by starting the python interpreter explicitly while you expect the crontab to only start the script.\nI put this line at the top of my python scripts: </p>\n\n<blockquote>\n  <p><code>\\#!/bin/env python</code>  </p>\n</blockquote>\n\n<p>This line will help locate the interpreter regardless of which directory it is installed in as long as it is in the search path.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 902667,
                        "reputation": 31222,
                        "user_id": 938380,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/6d8945030b731a058733ae59586edf21?s=256&d=identicon&r=PG",
                        "display_name": "Brian",
                        "link": "https://stackoverflow.com/users/938380/brian"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1536571341,
                    "creation_date": 1536571341,
                    "answer_id": 52254656,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's usually because the python used by crontab is different from the one you use in the shell.\nThe easiest way to solve this is:</p>\n\n<ol>\n<li>get the python you use in the shell:</li>\n</ol>\n\n<p><code>$ which python # it may be \"python3\" or something else\n/usr/bin/python\n</code></p>\n\n<ol start=\"2\">\n<li>use that specific python in crontab file:</li>\n</ol>\n\n<p><code>* * * * * /usr/bin/python test.py</code></p>\n\n<p>Also want to mention that using <code>env -i /bin/bash --noprofile --norc</code> in the shell lets you have the same environment as the one used by crontab, and this is super helpful to debug.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10597965,
                        "reputation": 3816,
                        "user_id": 7805917,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/44a9e844e013e7c5ae10d7645e6e333c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Inder",
                        "link": "https://stackoverflow.com/users/7805917/inder"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1536270042,
                    "creation_date": 1536270042,
                    "answer_id": 52212495,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using anaconda for python then the path to use will be :</p>\n\n<pre><code>/home/username/anaconda3/bin/python test.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10246513,
                        "reputation": 2371,
                        "user_id": 7562147,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/96e55645f22eef29ca2978c9b9f8e650?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Taras Vaskiv",
                        "link": "https://stackoverflow.com/users/7562147/taras-vaskiv"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1519154519,
                    "creation_date": 1519154519,
                    "answer_id": 48892727,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try this </p>\n\n<pre><code>* * * * * cd &lt;directory_where_python_file_is&gt; &amp;&amp; bin/app etc/app_defaults.yaml\n</code></pre>\n\n<p>There is some path issue with cron. So when you move to directory with python file, cron  works like charm!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7698998,
                        "reputation": 791,
                        "user_id": 5832318,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f24397cf898846839c886ca81a528ebc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "JJSanDiego",
                        "link": "https://stackoverflow.com/users/5832318/jjsandiego"
                    },
                    "is_accepted": false,
                    "score": 69,
                    "last_activity_date": 1516926608,
                    "last_edit_date": 1592644375,
                    "creation_date": 1516926608,
                    "answer_id": 48454125,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are a lot of half answers across the internet so I thought I would capture this to save someone else some time.</p>\n<p>First, cronjob does a poor job of telling you where this is failing. I recommend sending stderr output to a log file like this:</p>\n<h1>Crontab Command:</h1>\n<pre><code># m h  dom mon dow   command\n* * * * * /path/to/your_file.sh &gt;&gt; out.txt  2&gt;&amp;1\n</code></pre>\n<p>As this is likely running the command as user, check home directory for the log file. Note this script runs every minute which is good for debugging.</p>\n<p>The next issue is you probably have a path problem... as script likely is trying to execute from your home directory. This script sets the current directory, echos it to file, and then runs your program.</p>\n<p>Try this :</p>\n<h1>Script File</h1>\n<pre><code>#!/bin/sh\ncd &quot;$(dirname &quot;$0&quot;)&quot;;\nCWD=&quot;$(pwd)&quot;\necho $CWD\npython your_python_file.py\n</code></pre>\n<p>Hope this saves someone else some debugging time!!!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 467764,
                        "reputation": 559,
                        "user_id": 873350,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/62HJj.png?s=256",
                        "display_name": "Hamed Moghaddam",
                        "link": "https://stackoverflow.com/users/873350/hamed-moghaddam"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1513215614,
                    "creation_date": 1513215614,
                    "answer_id": 47804672,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Easiest way to handle this is to add your python installation's path to PATH in top of the shell script. \nSomething like:</p>\n\n<pre><code>#!/usr/bin/env bash\nexport PATH=\"{path to your python installation}:$PATH\"\npython {python_file_name}.py\n</code></pre>\n\n<p>As @Shargors said you can test it by </p>\n\n<pre><code>env -i /bin/bash --noprofile --norc\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 239052,
                        "reputation": 33,
                        "user_id": 508376,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/zFjLR.jpg?s=256",
                        "display_name": "Brainiac",
                        "link": "https://stackoverflow.com/users/508376/brainiac"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1453831661,
                    "last_edit_date": 1453831661,
                    "creation_date": 1453724124,
                    "answer_id": 34992399,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Sometimes I am facing same problem. Whatever I try something as advised here, I may not get result.</p>\n\n<p>So I begin to write \"trigger\" bash script as follow (let's name it trigger.sh):</p>\n\n<pre><code>#!/bin/bash\n\n/full_path/python_script.py\n</code></pre>\n\n<p>And I am calling trigger.sh from crontab and everything is fine.</p>\n\n<p>EDIT: Of course, don't forget to do following (give execution right):</p>\n\n<pre><code>$chmod +x python_script.py\n$chmod +x trigger.sh\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5082218,
                        "reputation": 179,
                        "user_id": 4128756,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c0c058c2d4772aae394367c36169f8f4?s=256&d=identicon&r=PG",
                        "display_name": "charkh",
                        "link": "https://stackoverflow.com/users/4128756/charkh"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1420031901,
                    "creation_date": 1420031901,
                    "answer_id": 27721726,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd got the same problem. Despite the fact that the script executed manually was working, in crontab no options mentioned above were working at all. I've moved my script from /home/user/script_directory/ to /opt/scripts/ and it started to work. Possible cause of the problem should be the access (read) permissions to subfolder located in home directory.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2837210,
                        "reputation": 1801,
                        "user_id": 2651663,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/x30jD.jpg?s=256",
                        "display_name": "Minnow",
                        "link": "https://stackoverflow.com/users/2651663/minnow"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1380209004,
                    "last_edit_date": 1492086165,
                    "creation_date": 1380209004,
                    "answer_id": 19032288,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While the answers here clearly delineate the problem and solution, I wanted to add another answer which helped me.  </p>\n\n<p>If your python script is calling a database, then be sure you can connect to the db properly within the cron env (to identify the cron env--> <a href=\"https://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work\">https://askubuntu.com/questions/23009/reasons-why-crontab-does-not-work</a>).  I had a file that would run from the shell, but not as a crontab unless I connected to the database as root from within the python script.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 355383,
                        "reputation": 41,
                        "user_id": 694309,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/373b6beefa55b4508a903db22670a021?s=256&d=identicon&r=PG",
                        "display_name": "Veerabahu",
                        "link": "https://stackoverflow.com/users/694309/veerabahu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1348251124,
                    "last_edit_date": 1495540930,
                    "creation_date": 1348251124,
                    "answer_id": 12535932,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<ul>\n<li>Is the cron user (where the script fails) and the terminal user (when the script succeeds) are same ? </li>\n<li>Can you redirect the job output to some file as mentioned in <a href=\"https://stackoverflow.com/questions/4811738/cron-job-log-how-to-log\">Cron Job Log - How to Log?</a>. We could see whether that helps. </li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1864761,
                        "reputation": 7423,
                        "user_id": 1688590,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5h8db.jpg?s=256",
                        "display_name": "xbello",
                        "link": "https://stackoverflow.com/users/1688590/xbello"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1348248582,
                    "last_edit_date": 1348248582,
                    "creation_date": 1348248016,
                    "answer_id": 12535189,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try to put in your crontab:</p>\n\n<pre><code>* * * * * python /path/to/your/script.py\n</code></pre>\n\n<p>rather than</p>\n\n<pre><code>* * * * * /path/to/your/script.py\n</code></pre>\n\n<p>Also the shebang line is <code>#!/usr/bin/env python</code> in some environments. <strong>env</strong> is an executable, and you have to know where it lives with \"<code>$ which env</code>\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 292061,
                        "reputation": 55844,
                        "user_id": 594589,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/0f9d5953607841d6a50b843a1107e51e?s=256&d=identicon&r=PG",
                        "display_name": "dm03514",
                        "link": "https://stackoverflow.com/users/594589/dm03514"
                    },
                    "is_accepted": true,
                    "score": 45,
                    "last_activity_date": 1348247582,
                    "creation_date": 1348247582,
                    "answer_id": 12535094,
                    "question_id": 12534135,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>What happens when you type </p>\n\n<p><code>/home/me/project/myscript.py</code> into the shell?</p>\n\n<p>Can you explicitly use <code>/usr/bin/python</code> in your crontbb command?</p>\n\n<p>Can you either use an absolute path to your <code>test.db</code>  or <code>cd</code> to the correct directory then execute your python script?</p>\n\n<p>This is helpful to have debug statements in your python and log some data.  Crontab can be very tricky to debug.</p>\n"
                }
            ]
        },
        {
            "328059": [
                {
                    "owner": {
                        "account_id": 16693464,
                        "reputation": 723,
                        "user_id": 12065399,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/WsfEn.jpg?s=256",
                        "display_name": "Andre Nevares",
                        "link": "https://stackoverflow.com/users/12065399/andre-nevares"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1659633109,
                    "creation_date": 1659633109,
                    "answer_id": 73239892,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>... Also If you want to get rid of <code>\\n</code></h3>\n<p>In case the items on your list are with \\n and you want to get rid of them:</p>\n<pre><code>with open('your_file.txt') as f:\n    list= f.read().splitlines() \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5624674,
                        "reputation": 933,
                        "user_id": 4453469,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-6H9VlFXwb_U/AAAAAAAAAAI/AAAAAAAAODQ/z0E3p8JrlUk/photo.jpg?sz=256",
                        "display_name": "Jonathan Koren",
                        "link": "https://stackoverflow.com/users/4453469/jonathan-koren"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1502109389,
                    "creation_date": 1502109389,
                    "answer_id": 45547078,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Assuming you also want to strip whitespace at beginning and end of each line, you can map the string strip function to the list returned by readlines:</p>\n\n<pre><code>map(str.strip, open('filename').readlines())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 238348,
                        "reputation": 1955,
                        "user_id": 507186,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://i.sstatic.net/JNfAB.jpg?s=256",
                        "display_name": "Absulit",
                        "link": "https://stackoverflow.com/users/507186/absulit"
                    },
                    "is_accepted": false,
                    "score": 70,
                    "last_activity_date": 1439220141,
                    "creation_date": 1439220141,
                    "answer_id": 31923407,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I did it this way</p>\n\n<pre><code>lines_list = open('file.txt').read().splitlines()\n</code></pre>\n\n<p>Every line comes with its end of line characters (\\n\\r); this way the characters are removed.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13607,
                        "reputation": 4161,
                        "user_id": 27461,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/79f06a59954d7cfb349f9dbf92a33704?s=256&d=identicon&r=PG",
                        "display_name": "Brian C. Lane",
                        "link": "https://stackoverflow.com/users/27461/brian-c-lane"
                    },
                    "is_accepted": true,
                    "score": 99,
                    "last_activity_date": 1303517047,
                    "last_edit_date": 1303517047,
                    "creation_date": 1227996214,
                    "answer_id": 328068,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's a lot easier than that:</p>\n\n<pre><code>List = open(\"filename.txt\").readlines()\n</code></pre>\n\n<p>This returns a list of each line in the file.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17723,
                        "reputation": 90832,
                        "user_id": 39975,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/995543cb35c3b92a2eb43275116815a7?s=256&d=identicon&r=PG",
                        "display_name": "Dustin",
                        "link": "https://stackoverflow.com/users/39975/dustin"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1227996460,
                    "creation_date": 1227996460,
                    "answer_id": 328074,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Please read <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP8</a>.  You're swaying pretty far from python conventions.</p>\n\n<p>If you want a list of lists of each line split by comma, I'd do this:</p>\n\n<pre><code>l = []\nfor line in in_file:\n    l.append(line.split(','))\n</code></pre>\n\n<p>You'll get a newline on each record.  If you don't want that:</p>\n\n<pre><code>l = []\nfor line in in_file:\n    l.append(line.rstrip().split(','))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16316,
                        "reputation": 165692,
                        "user_id": 35364,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/f11512869fe2f8d87a2f2b687b76686c?s=256&d=identicon&r=PG",
                        "display_name": "hasen",
                        "link": "https://stackoverflow.com/users/35364/hasen"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1227996434,
                    "creation_date": 1227996434,
                    "answer_id": 328073,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>f.readlines() returns a list that contains each line as an item in the list</p>\n\n<p>if you want eachline to be split(\",\") you can use list comprehensions</p>\n\n<pre><code>[ list.split(\",\") for line in file ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1227996399,
                    "creation_date": 1227996399,
                    "answer_id": 328072,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A file is <em>almost</em> a list of lines.  You can trivially use it in a <strong>for</strong> loop.</p>\n\n<pre><code>myFile= open( \"SomeFile.txt\", \"r\" )\nfor x in myFile:\n    print x\nmyFile.close()\n</code></pre>\n\n<p>Or, if you want an actual list of lines, simply create a list from the file.</p>\n\n<pre><code>myFile= open( \"SomeFile.txt\", \"r\" )\nmyLines = list( myFile )\nmyFile.close()\nprint len(myLines), myLines\n</code></pre>\n\n<p>You can't do <code>someList[i]</code> to put a <em>new</em> item at the end of a list.  You must do <code>someList.append(i)</code>.</p>\n\n<p>Also, <em>never</em> start a simple variable name with an uppercase letter.  <code>List</code> confuses folks who know Python.</p>\n\n<p>Also, <em>never</em> use a built-in name as a variable.  <code>list</code> is an existing data type, and using it as a variable confuses folks who know Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75297,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1227996374,
                    "creation_date": 1227996374,
                    "answer_id": 328070,
                    "question_id": 328059,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>my_list = [line.split(',') for line in open(\"filename.txt\")]\n</code></pre>\n"
                }
            ]
        },
        {
            "51167612": [
                {
                    "owner": {
                        "account_id": 1199994,
                        "reputation": 339,
                        "user_id": 1170848,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GvIi8.jpg?s=256",
                        "display_name": "razmik",
                        "link": "https://stackoverflow.com/users/1170848/razmik"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1550592738,
                    "last_edit_date": 1550592738,
                    "creation_date": 1530688370,
                    "answer_id": 51167813,
                    "question_id": 51167612,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The recommended way to delete a column or row in pandas dataframes is using drop.</p>\n\n<p>To delete a column,</p>\n\n<pre><code>df.drop('column_name', axis=1, inplace=True)\n</code></pre>\n\n<p>To delete a row,</p>\n\n<pre><code>df.drop('row_index', axis=0, inplace=True)\n</code></pre>\n\n<p>You can refer <a href=\"https://stackoverflow.com/questions/13411544/delete-column-from-pandas-dataframe-using-del-df-column-name\">this post</a> to see a detailed conversation about column delete approaches.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2665108,
                        "reputation": 17368,
                        "user_id": 2303761,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://i.sstatic.net/IRUzX.jpg?s=256",
                        "display_name": "YaOzI",
                        "link": "https://stackoverflow.com/users/2303761/yaozi"
                    },
                    "is_accepted": true,
                    "score": 40,
                    "last_activity_date": 1530690972,
                    "last_edit_date": 1530690972,
                    "creation_date": 1530688292,
                    "answer_id": 51167786,
                    "question_id": 51167612,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Follow the <a href=\"http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe\" rel=\"noreferrer\">doc</a>:</p>\n\n<blockquote>\n  <p>DataFrame is a <strong>2-dimensional labeled data structure</strong> with columns of potentially different types.</p>\n</blockquote>\n\n<p>And <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html#pandas.DataFrame.drop\" rel=\"noreferrer\"><code>pandas.DataFrame.drop</code></a>:</p>\n\n<blockquote>\n  <p><strong>Drop specified labels</strong> from rows or columns.</p>\n</blockquote>\n\n<p>So, I think we should stick with <code>df.drop</code>. Why? I think the pros are:</p>\n\n<ol>\n<li><p>It gives us more control of the remove action:</p>\n\n<pre><code># This will return a NEW DataFrame object, leave the original `df` untouched.\ndf.drop('a', axis=1)  \n# This will modify the `df` inplace. **And return a `None`**.\ndf.drop('a', axis=1, inplace=True)  \n</code></pre></li>\n<li><p>It can handle more complicated cases with it's args. E.g. with <code>level</code>, we can handle MultiIndex deletion. And with <code>errors</code>, we can prevent some bugs.</p></li>\n<li><p>It's a more unified and object oriented way.</p></li>\n</ol>\n\n<hr>\n\n<p>And just like @jezrael noted in his answer:</p>\n\n<p>Option 1: Using key word <code>del</code> is a limited way. </p>\n\n<p>Option 3: And <code>df=df[['b','c']]</code> isn't even a deletion in essence. It first <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html\" rel=\"noreferrer\">select data by indexing</a> with <code>[]</code> syntax, then unbind the name <code>df</code> with the original DataFrame and bind it with the new one (i.e. <code>df[['b','c']]</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7191057,
                        "reputation": 3801,
                        "user_id": 5491375,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/5d50049ded2d03eb65e6aabc752eeeaf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "aydow",
                        "link": "https://stackoverflow.com/users/5491375/aydow"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1530688526,
                    "creation_date": 1530688526,
                    "answer_id": 51167862,
                    "question_id": 51167612,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From a speed perspective, option 1 seems to be the best. Obviously, based on the other answers, that doesn't mean it's actually the best option.</p>\n\n<pre><code>In [52]: import timeit\n\nIn [53]: s1 = \"\"\"\n    ...: import pandas as pd\n    ...: df=pd.DataFrame({'a':[1,2,3,4,5],'b':[6,7,8,9,10],'c':[11,12,13,14,15]})\n    ...: del df['a']\n    ...: \"\"\"\n\nIn [54]: s2 = \"\"\"\n    ...: import pandas as pd\n    ...: df=pd.DataFrame({'a':[1,2,3,4,5],'b':[6,7,8,9,10],'c':[11,12,13,14,15]})\n    ...: df=df.drop('a',1)\n    ...: \"\"\"\n\nIn [55]: s3 = \"\"\"\n    ...: import pandas as pd\n    ...: df=pd.DataFrame({'a':[1,2,3,4,5],'b':[6,7,8,9,10],'c':[11,12,13,14,15]})\n    ...: df=df[['b','c']]\n    ...: \"\"\"\n\nIn [56]: timeit.timeit(stmt=s1, number=100000)\nOut[56]: 53.37321400642395\n\nIn [57]: timeit.timeit(stmt=s2, number=100000)\nOut[57]: 79.68139410018921\n\nIn [58]: timeit.timeit(stmt=s3, number=100000)\nOut[58]: 76.25269913673401\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860800,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1530688039,
                    "creation_date": 1530688039,
                    "answer_id": 51167717,
                    "question_id": 51167612,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my opinion the best is use 2. and 3. option, because first has limits - you can remove only one column and <a href=\"https://stackoverflow.com/a/37000877\">cannot use dot notation</a> - <code>del df.a</code>.</p>\n\n<p>3.solution is not deleting, but selecting and <a href=\"https://stackoverflow.com/a/46314092\">piRSquared</a> create nice answer for multiple possible solutions with same idea.</p>\n"
                }
            ]
        },
        {
            "52273546": [
                {
                    "owner": {
                        "account_id": 11319409,
                        "reputation": 10820,
                        "user_id": 8300135,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7e756693b8ce163f11d77a0f02526a0b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SpghttCd",
                        "link": "https://stackoverflow.com/users/8300135/spghttcd"
                    },
                    "is_accepted": true,
                    "score": 75,
                    "last_activity_date": 1693397317,
                    "last_edit_date": 1693397317,
                    "creation_date": 1536661802,
                    "answer_id": 52273900,
                    "question_id": 52273546,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>fig, axs = plt.subplots()\n</code></pre>\n<p>returns a figure with only one single subplot, so axs already holds it without indexing.</p>\n<pre><code>fig, axs = plt.subplots(3)\n</code></pre>\n<p>returns a 1D array of subplots.</p>\n<pre><code>fig, axs = plt.subplots(3, 2)\n</code></pre>\n<p>returns a 2D array of subplots.</p>\n<p>Note that this is only due to the default setting of the kwarg <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.subplots.html\" rel=\"noreferrer\"><code>squeeze=True</code></a>.<br />\nBy setting it to <code>False</code> you can force the result to be a 2D-array, independent of the number or arrangement of the subplots.</p>\n<pre><code>import numpy\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nimarray = numpy.random.rand(10,10,3) * 255\nim = Image.fromarray(imarray.astype('uint8')).convert('RGBA')\n\n#rows = 1; cols = 1;\n#rows = 5; cols = 3;\nrows = 1; cols = 5;\nfig, ax = plt.subplots(rows, cols, squeeze=False)\nfig.suptitle('random plots')\ni = 0\nfor r in range(rows):\n    for c in range(cols): \n        ax[r][c].imshow(im)\n        i = i + 1     \nplt.show()\nplt.close()\n</code></pre>\n"
                }
            ]
        },
        {
            "43131274": [
                {
                    "owner": {
                        "account_id": 9648469,
                        "reputation": 3166,
                        "user_id": 7160346,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Vz8Zz.jpg?s=256",
                        "display_name": "Ravi",
                        "link": "https://stackoverflow.com/users/7160346/ravi"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1552658867,
                    "last_edit_date": 1552658867,
                    "creation_date": 1532668526,
                    "answer_id": 51551156,
                    "question_id": 43131274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import matplotlib.pyplot as plt\nl=['batting_team', 'bowling_team']\nfigure, axes = plt.subplots(1, 2)\nindex = 0\nfor axis in axes:\n  sns.countplot(high_scores[index])\n  index = index+1\nplt.show()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4111189,
                        "reputation": 4872,
                        "user_id": 3373942,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/lU4jQ.jpg?s=256",
                        "display_name": "Robbie",
                        "link": "https://stackoverflow.com/users/3373942/robbie"
                    },
                    "is_accepted": true,
                    "score": 101,
                    "last_activity_date": 1490927069,
                    "creation_date": 1490927069,
                    "answer_id": 43131357,
                    "question_id": 43131274,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Something like this:</p>\n\n<pre><code>import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nbatData = ['a','b','c','a','c']\nbowlData = ['b','a','d','d','a']\n\ndf=pd.DataFrame()\ndf['batting']=batData\ndf['bowling']=bowlData\n\n\nfig, ax =plt.subplots(1,2)\nsns.countplot(df['batting'], ax=ax[0])\nsns.countplot(df['bowling'], ax=ax[1])\nfig.show()\n</code></pre>\n\n<p><a href=\"https://i.sstatic.net/XyzDl.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/XyzDl.png\" alt=\"enter image description here\"></a></p>\n\n<p>The idea is to specify the subplots in the figure - there are numerous ways to do this but the above will work fine.</p>\n"
                }
            ]
        },
        {
            "426378": [
                {
                    "owner": {
                        "account_id": 444903,
                        "reputation": 870,
                        "user_id": 837017,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a39ae7e80e45b9129d82782c52aa4a3a?s=256&d=identicon&r=PG",
                        "display_name": "cwadding",
                        "link": "https://stackoverflow.com/users/837017/cwadding"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1454098440,
                    "last_edit_date": 1454098440,
                    "creation_date": 1454098113,
                    "answer_id": 35093161,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are using <a href=\"https://pypi.python.org/pypi/SQLAlchemy\" rel=\"noreferrer\">SQLAlchemy</a> as your ORM then the de facto standard is <a href=\"https://pypi.python.org/pypi/alembic\" rel=\"noreferrer\">Alembic</a>.</p>\n\n<p>Another alternative that haven't been mentioned is <a href=\"https://pypi.python.org/pypi/yoyo-migrations\" rel=\"noreferrer\">yoyo-migrations</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 127693,
                        "reputation": 137,
                        "user_id": 1245255,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/428861249a432b1f54c1867d87cd9d4e?s=256&d=identicon&r=PG",
                        "display_name": "mondaini",
                        "link": "https://stackoverflow.com/users/1245255/mondaini"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1330698168,
                    "creation_date": 1330698168,
                    "answer_id": 9534828,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been using <a href=\"https://github.com/guilhermechapiewski/simple-db-migrate\" rel=\"nofollow\" title=\"simple-db-migrate\">simple-db-migrate</a></p>\n\n<p>Pros:</p>\n\n<ul>\n<li>it allows me to rollback the migrations (IDK if other do this too). </li>\n<li>integrates with manage.py</li>\n<li>everyone that knows SQL can create a migration</li>\n<li>it doesn't run a migration twice: the application writes the migration information(timestamp, query, etc.) on a table </li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>if you add a migration with a lower timestamp than the latest migration installed, this migration doesn't run</li>\n<li>Only MySQL is supported</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 11261,
                        "reputation": 49734,
                        "user_id": 21640,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/492a3c5c13fb44d27229364e0993fa11?s=256&d=identicon&r=PG",
                        "display_name": "Marcin",
                        "link": "https://stackoverflow.com/users/21640/marcin"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1328200911,
                    "creation_date": 1328200911,
                    "answer_id": 9116190,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just to note that since 2009, pretty much every project mentioned here other than South is dead. <a href=\"http://south.aeracode.org/\" rel=\"nofollow\">South</a> is the de facto standard, for better or worse.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15955,
                        "reputation": 43852,
                        "user_id": 34258,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0f004343b1c3b4acff06803503c1d028?s=256&d=identicon&r=PG",
                        "display_name": "Van Gale",
                        "link": "https://stackoverflow.com/users/34258/van-gale"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1237501110,
                    "creation_date": 1237501110,
                    "answer_id": 664280,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Besides South, dmigrations, django-evolution, and Migratory I thought I would add <a href=\"http://github.com/ricardochimal/simplemigrations/tree/master\" rel=\"nofollow noreferrer\">simplemigrations</a> as another tool I've seen for automating Django migrations.</p>\n\n<p>I've used three of these in the past but do migrations by hand now.  I'm thinking about trying South again due to the latest features added.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8690,
                        "reputation": 26827,
                        "user_id": 15770,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/XEC8x.jpg?s=256",
                        "display_name": "akaihola",
                        "link": "https://stackoverflow.com/users/15770/akaihola"
                    },
                    "is_accepted": true,
                    "score": 22,
                    "last_activity_date": 1231668368,
                    "creation_date": 1231668368,
                    "answer_id": 432679,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I've been using <a href=\"http://south.aeracode.org/\" rel=\"noreferrer\">South</a>, but <a href=\"http://bitbucket.org/DeadWisdom/migratory/\" rel=\"noreferrer\">Migratory</a> looks promising as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 21873,
                        "reputation": 26191,
                        "user_id": 53495,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/21e10bea0de20a200e5c7801e10227a9?s=256&d=identicon&r=PG",
                        "display_name": "Brian Clapper",
                        "link": "https://stackoverflow.com/users/53495/brian-clapper"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1231627439,
                    "creation_date": 1231627439,
                    "answer_id": 431901,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>We use Django at work, and we've been using <a href=\"http://code.google.com/p/dmigrations/\" rel=\"nofollow noreferrer\">dmigrations</a>. While it has its quirks, it's been useful so far. Some features:</p>\n\n<ul>\n<li>It uses a table in the database to keep track of which migrations have been applied.</li>\n<li>Because it knows which ones have been applied, you can migrate up and back down.</li>\n<li>It integrates with <code>manage.py</code> as a command.</li>\n<li>The individual migration scripts are Python, but if your migration logic is pure SQL, <em>dmigrations</em> makes it easy to just can the SQL and have it executed.</li>\n</ul>\n\n<p>One problem is that it only currently supports MySQL. However, one of our guys make a local hack to it to support PostgreSQL, which we use. As I recall, the hack wasn't all that extensive, so it shouldn't be terribly difficult to hack it up to support other RDBMSs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 21737,
                        "reputation": 139,
                        "user_id": 53081,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4eca5b168cd24277f19eb0c4230b914e?s=256&d=identicon&r=PG",
                        "display_name": "mcella",
                        "link": "https://stackoverflow.com/users/53081/mcella"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1231455958,
                    "creation_date": 1231455958,
                    "answer_id": 426411,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://bitbucket.org/DeadWisdom/migratory/\" rel=\"nofollow noreferrer\">Migratory</a> looks nice and simple.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17306,
                        "reputation": 48346,
                        "user_id": 38626,
                        "user_type": "registered",
                        "accept_rate": 51,
                        "profile_image": "https://www.gravatar.com/avatar/0c1235b75e5f26b854dce060f906d2dc?s=256&d=identicon&r=PG",
                        "display_name": "MiniQuark",
                        "link": "https://stackoverflow.com/users/38626/miniquark"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1231455549,
                    "creation_date": 1231455549,
                    "answer_id": 426391,
                    "question_id": 426378,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I like <a href=\"http://code.google.com/p/django-evolution/\" rel=\"nofollow noreferrer\">django-evolution</a>:</p>\n\n<p>pros:</p>\n\n<ul>\n<li>clean design</li>\n<li>no SQL needed</li>\n<li>flexible</li>\n<li>trivial to install</li>\n<li>easy to use</li>\n</ul>\n\n<p>cons:</p>\n\n<ul>\n<li>migrations are not fixed in the codebase</li>\n<li>a risk exists of accidently running a migration twice</li>\n</ul>\n"
                }
            ]
        },
        {
            "106896": [
                {
                    "owner": {
                        "account_id": 703628,
                        "reputation": 15503,
                        "user_id": 595305,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/de73cca7e15d1d8feb243f3c125dc3ca?s=256&d=identicon&r=PG",
                        "display_name": "mike rodent",
                        "link": "https://stackoverflow.com/users/595305/mike-rodent"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1321037345,
                    "creation_date": 1321037345,
                    "answer_id": 8098533,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I find myself splitting things up when I get annoyed with the bigness of files and when the desirable structure of relatedness starts to emerge naturally.  Often these two stages seem to coincide.</p>\n\n<p>It can be very annoying if you split things up too early, because you start to realise that a totally different ordering of structure is required.</p>\n\n<p>On the other hand, when any .java or .py file is getting to more than about 700 lines I start to get annoyed constantly trying to remember where \"that particular bit\" is.</p>\n\n<p>With Python/Jython circular dependency of import statements also seems to play a role: if you try to split too many cooperating basic building blocks into separate files this \"restriction\"/\"imperfection\" of the language seems to force you to group things, perhaps in rather a sensible way.</p>\n\n<p>As to splitting into packages, I don't really know, but I'd say probably the same rule of annoyance and emergence of happy structure works at all levels of modularity.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 175361,
                        "reputation": 3138,
                        "user_id": 405326,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/02f2dfb9ec8e5a381dc692d194262134?s=256&d=identicon&r=PG",
                        "display_name": "khatchad",
                        "link": "https://stackoverflow.com/users/405326/khatchad"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1319475001,
                    "creation_date": 1319475001,
                    "answer_id": 7879007,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I happen to like the Java model for the following reason. Placing each class in an individual file promotes reuse by making classes easier to see when browsing the source code. If you have a bunch of classes grouped into a single file, it may not be obvious to other developers that there are classes there that can be reused simply by browsing the project's <em>directory structure</em>. Thus, if you think that your class can possibly be reused, I would put it in its own file.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": true,
                    "score": 365,
                    "last_activity_date": 1271239173,
                    "last_edit_date": 1271239173,
                    "creation_date": 1221906459,
                    "answer_id": 107836,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A Python file is called a \"module\" and it's one way to organize your software so that it makes \"sense\".  Another is a directory, called a \"package\".</p>\n\n<p>A module is a distinct thing that may have one or two dozen closely-related classes.  The trick is that a module is something you'll import, and you need that import to be perfectly sensible to people who will read, maintain and extend your software.</p>\n\n<p>The rule is this: <strong>a module is the unit of reuse</strong>.  </p>\n\n<p>You can't easily reuse a single class.  You should be able to reuse a module without any difficulties.  Everything in your library (and everything you download and add) is either a module or a package of modules.</p>\n\n<p>For example, you're working on something that reads spreadsheets, does some calculations and loads the results into a database.  What do you want your main program to look like?</p>\n\n<pre><code>from ssReader import Reader\nfrom theCalcs import ACalc, AnotherCalc\nfrom theDB import Loader\n\ndef main( sourceFileName ):\n    rdr= Reader( sourceFileName )\n    c1= ACalc( options )\n    c2= AnotherCalc( options )\n    ldr= Loader( parameters )\n    for myObj in rdr.readAll():\n        c1.thisOp( myObj )\n        c2.thatOp( myObj )\n        ldr.laod( myObj )\n</code></pre>\n\n<p>Think of the import as the way to organize your code in concepts or chunks.  Exactly how many classes are in each import doesn't matter.  What matters is the overall organization that you're portraying with your <code>import</code> statements.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 579,
                        "reputation": 169245,
                        "user_id": 745,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=256&d=identicon&r=PG",
                        "display_name": "dbr",
                        "link": "https://stackoverflow.com/users/745/dbr"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1228028252,
                    "creation_date": 1228028252,
                    "answer_id": 328563,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It entirely depends on how big the project is, how long the classes are, if they will be used from other files and so on.</p>\n\n<p>For example I quite often use a series of classes for data-abstraction - so I may have 4 or 5 classes that may only be 1 line long (<code>class SomeData: pass</code>).</p>\n\n<p>It would be stupid to split each of these into separate files - but since they may be used from different files, putting all these in a separate <code>data_model.py</code> file would make sense, so I can do <code>from mypackage.data_model import SomeData, SomeSubData</code></p>\n\n<p>If you have a class with lots of code in it, maybe with some functions only it uses, it would be a good idea to split this class and the helper-functions into a separate file.</p>\n\n<p>You should structure them so you do <code>from mypackage.database.schema import MyModel</code>, not <code>from mypackage.email.errors import MyDatabaseModel</code> - if where you are importing things from make sense, and the files aren't tens of thousands of lines long, you have organised it correctly.</p>\n\n<p>The <a href=\"http://www.python.org/doc/2.5.2/tut/node8.html#SECTION008400000000000000000\" rel=\"noreferrer\">Python Modules documentation</a> has some useful information on organising packages.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1887,
                        "reputation": 15507,
                        "user_id": 2600,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/b6b87721c444078a99633d6ed9352cec?s=256&d=identicon&r=PG",
                        "display_name": "Chris Upchurch",
                        "link": "https://stackoverflow.com/users/2600/chris-upchurch"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1221880264,
                    "creation_date": 1221880264,
                    "answer_id": 106909,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Since there is no artificial limit, it really depends on what's comprehensible.  If you have a bunch of fairly short, simple classes that are logically grouped together, toss in a bunch of 'em.  If you have big, complex classes or classes that don't make sense as a group, go one file per class.  Or pick something in between.  Refactor as things change.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1221880125,
                    "creation_date": 1221880125,
                    "answer_id": 106903,
                    "question_id": 106896,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would say to put as many classes as can be logically grouped in that file without making it too big and complex.</p>\n"
                }
            ]
        },
        {
            "1614236": [
                {
                    "owner": {
                        "account_id": 1783578,
                        "reputation": 51,
                        "user_id": 1625643,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/kCs23.jpg?s=256",
                        "display_name": "Aruz",
                        "link": "https://stackoverflow.com/users/1625643/aruz"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1666119432,
                    "creation_date": 1666119432,
                    "answer_id": 74116178,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>newlist = list(map(float, mylist))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7100580,
                        "reputation": 125,
                        "user_id": 5432316,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/51AfT.png?s=256",
                        "display_name": "mnaghd01",
                        "link": "https://stackoverflow.com/users/5432316/mnaghd01"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1621752532,
                    "last_edit_date": 1621752532,
                    "creation_date": 1621745055,
                    "answer_id": 67656208,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the <code>map()</code> function to convert the list directly to <code>floats</code>:</p>\n<pre><code>float_list = map(float, list)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4848986,
                        "reputation": 800,
                        "user_id": 8696747,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-KdNsdF4N54A/AAAAAAAAAAI/AAAAAAAAAW8/sb6AS3sAw1g/photo.jpg?sz=256",
                        "display_name": "Amin Kiany",
                        "link": "https://stackoverflow.com/users/8696747/amin-kiany"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1607960601,
                    "last_edit_date": 1607960601,
                    "creation_date": 1527338135,
                    "answer_id": 50542830,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This would be an other method (without using any loop!):</p>\n<pre><code>import numpy as np\nlist(np.float_(list_name))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19033826,
                        "reputation": 46,
                        "user_id": 13895330,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6698cb98f499cc109500ca0983c153c2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "vitorrr",
                        "link": "https://stackoverflow.com/users/13895330/vitorrr"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1594255736,
                    "creation_date": 1594255736,
                    "answer_id": 62805718,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you can use numpy to avoid looping:</p>\n<pre><code>import numpy as np\nlist(np.array(my_list).astype(float)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15998684,
                        "reputation": 1,
                        "user_id": 11545988,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/3e0f7a1b8d0d0f21c91932c7a60d3020?s=256&d=identicon&r=PG",
                        "display_name": "user11545988",
                        "link": "https://stackoverflow.com/users/11545988/user11545988"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1558627606,
                    "last_edit_date": 1558627606,
                    "creation_date": 1558627528,
                    "answer_id": 56279131,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>for i in range(len(list)): list[i]=float(list[i])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14280555,
                        "reputation": 1,
                        "user_id": 10315388,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1921658617869622/picture?type=large",
                        "display_name": "Gui",
                        "link": "https://stackoverflow.com/users/10315388/gui"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1558175316,
                    "last_edit_date": 1558175316,
                    "creation_date": 1536069220,
                    "answer_id": 52167948,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have solve this problem in my program using:</p>\n\n<pre><code>number_input = float(\"{:.1f}\".format(float(input())))\nlist.append(number_input)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5180052,
                        "reputation": 1572,
                        "user_id": 9041224,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-T8U-zWvMyb0/AAAAAAAAAAI/AAAAAAAAAJw/pSn1rsMzKmk/photo.jpg?sz=256",
                        "display_name": "Max Kleiner",
                        "link": "https://stackoverflow.com/users/9041224/max-kleiner"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1551792853,
                    "creation_date": 1551792853,
                    "answer_id": 55004115,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had to extract numbers first from a list of float strings:</p>\n\n<pre><code>   df4['sscore'] = df4['simscore'].str.findall('\\d+\\.\\d+')\n</code></pre>\n\n<p>then each convert to a float:</p>\n\n<pre><code>   ad=[]\n   for z in range(len(df4)):\n      ad.append([float(i) for i in df4['sscore'][z]])\n</code></pre>\n\n<p>in the end assign all floats to a dataframe as float64:</p>\n\n<pre><code>   df4['fscore'] = np.array(ad,dtype=float)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5189486,
                        "reputation": 956,
                        "user_id": 4152824,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/WxmSv.jpg?s=256",
                        "display_name": "Alireza",
                        "link": "https://stackoverflow.com/users/4152824/alireza"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1537102046,
                    "last_edit_date": 1537102046,
                    "creation_date": 1537101450,
                    "answer_id": 52354202,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you can even do this by numpy</p>\n\n<pre><code>import numpy as np\nnp.array(your_list,dtype=float)\n</code></pre>\n\n<p>this return np array of your list as float</p>\n\n<p>you also can set 'dtype' as int</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11228172,
                        "reputation": 1,
                        "user_id": 8237193,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b64db5ac03003e8682837ceb61cae282?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Barry O&#39;Sullivan",
                        "link": "https://stackoverflow.com/users/8237193/barry-osullivan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1526474974,
                    "last_edit_date": 1526474974,
                    "creation_date": 1526474002,
                    "answer_id": 50371087,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import numpy as np\nmy_list = ['0.49', '0.54', '0.54', '0.54', '0.54', '0.54', '0.55', '0.54', '0.54', '0.54', '0.55', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54', \n'0.55', '0.55', '0.54']\nprint(type(my_list), type(my_list[0]))   \n# &lt;class 'list'&gt; &lt;class 'str'&gt;\n</code></pre>\n\n<p>which displays the type as a list of strings. You can convert this list to an array of floats simultaneously using numpy:</p>\n\n<pre><code>    my_list = np.array(my_list).astype(np.float)\n\n    print(type(my_list), type(my_list[0]))  \n    # &lt;class 'numpy.ndarray'&gt; &lt;class 'numpy.float64'&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12824384,
                        "reputation": 181,
                        "user_id": 9278038,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1994602317471885/picture?type=large",
                        "display_name": "Samlex",
                        "link": "https://stackoverflow.com/users/9278038/samlex"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1517098312,
                    "last_edit_date": 1517098312,
                    "creation_date": 1517096473,
                    "answer_id": 48481713,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is how I would do it.</p>\n\n<pre><code>my_list = ['0.49', '0.54', '0.54', '0.54', '0.54', '0.54', '0.55', '0.54', \n    '0.54', '0.54', '0.55', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54', \n    '0.55', '0.55', '0.54']\nprint type(my_list[0]) # prints &lt;type 'str'&gt;\nmy_list = [float(i) for i in my_list]\nprint type(my_list[0]) # prints &lt;type 'float'&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7552388,
                        "reputation": 707,
                        "user_id": 5733316,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/kWGkU.jpg?s=256",
                        "display_name": "bfree67",
                        "link": "https://stackoverflow.com/users/5733316/bfree67"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1452179620,
                    "creation_date": 1452179620,
                    "answer_id": 34658667,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use numpy to convert a list directly to a floating array or matrix.</p>\n\n<pre><code>    import numpy as np\n    list_ex = [1, 0] # This a list\n    list_int = np.array(list_ex) # This is a numpy integer array\n</code></pre>\n\n<p>If you want to convert the integer array to a floating array then add 0. to it</p>\n\n<pre><code>    list_float = np.array(list_ex) + 0. # This is a numpy floating array\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 56214,
                        "reputation": 33050,
                        "user_id": 168352,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/wXknm.jpg?s=256",
                        "display_name": "Denis Otkidach",
                        "link": "https://stackoverflow.com/users/168352/denis-otkidach"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1256313207,
                    "last_edit_date": 1256313207,
                    "creation_date": 1256312683,
                    "answer_id": 1614311,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><code>float(item)</code> do the right thing: it converts its argument to float and and return it, but it doesn't change argument in-place. A simple fix for your code is:</p>\n\n<pre><code>new_list = []\nfor item in list:\n    new_list.append(float(item))\n</code></pre>\n\n<p>The same code can written shorter using list comprehension: <code>new_list = [float(i) for i in list]</code></p>\n\n<p>To change list in-place:</p>\n\n<pre><code>for index, item in enumerate(list):\n    list[index] = float(item)\n</code></pre>\n\n<p>BTW, avoid using <code>list</code> for your variables, since it masquerades built-in function with the same name.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10843,
                        "reputation": 335548,
                        "user_id": 20670,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
                        "display_name": "Tim Pietzcker",
                        "link": "https://stackoverflow.com/users/20670/tim-pietzcker"
                    },
                    "is_accepted": false,
                    "score": 166,
                    "last_activity_date": 1256312720,
                    "last_edit_date": 1256312720,
                    "creation_date": 1256312072,
                    "answer_id": 1614249,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><code>map(float, mylist)</code> should do it. </p>\n\n<p>(In Python 3, map ceases to return a list object, so if you want a new list and not just something to iterate over, you either need <code>list(map(float, mylist)</code> - or use SilentGhost's answer which arguably is more pythonic.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7405,
                        "reputation": 318727,
                        "user_id": 12855,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=256&d=identicon&r=PG",
                        "display_name": "SilentGhost",
                        "link": "https://stackoverflow.com/users/12855/silentghost"
                    },
                    "is_accepted": true,
                    "score": 628,
                    "last_activity_date": 1256312068,
                    "creation_date": 1256312068,
                    "answer_id": 1614247,
                    "question_id": 1614236,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>[float(i) for i in lst]\n</code></pre>\n\n<p>to be precise, it creates a new list with float values. Unlike the <code>map</code> approach it will work in py3k.</p>\n"
                }
            ]
        },
        {
            "23306653": [
                {
                    "owner": {
                        "account_id": 4305472,
                        "reputation": 1905,
                        "user_id": 3517954,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a631ee1404f7d10c8510b911ff2eed02?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "agrinh",
                        "link": "https://stackoverflow.com/users/3517954/agrinh"
                    },
                    "is_accepted": false,
                    "score": 123,
                    "last_activity_date": 1660014583,
                    "last_edit_date": 1660014583,
                    "creation_date": 1398487263,
                    "answer_id": 23306721,
                    "question_id": 23306653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Places is a list and not a dictionary. This line below should therefore not work:</p>\n<pre><code>print(data['places']['latitude'])\n</code></pre>\n<p>You need to select one of the items in places and then you can list the place's properties. So to get the first post code you'd do:</p>\n<pre><code>print(data['places'][0]['post code'])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 65494,
                        "reputation": 812,
                        "user_id": 192684,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e274584b454e7c0a221e90aac2bcf431?s=256&d=identicon&r=PG",
                        "display_name": "Ezequiel Bertti",
                        "link": "https://stackoverflow.com/users/192684/ezequiel-bertti"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1592638177,
                    "last_edit_date": 1592638177,
                    "creation_date": 1490885335,
                    "answer_id": 43121260,
                    "question_id": 23306653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm using this lib to access nested dict keys</p>\n\n<p><a href=\"https://github.com/mewwts/addict\" rel=\"nofollow noreferrer\">https://github.com/mewwts/addict</a></p>\n\n<pre><code> import requests\n from addict import Dict\n r = requests.get('http://api.zippopotam.us/us/ma/belmont')\n j = Dict(r.json())\n\n print j.state\n print j.places[1]['post code']  # only work with keys without '-', space, or starting with number \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3401666,
                        "reputation": 924,
                        "user_id": 2853673,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://i.sstatic.net/zzVRW.jpg?s=256",
                        "display_name": "MONTYHS",
                        "link": "https://stackoverflow.com/users/2853673/montyhs"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1398676849,
                    "creation_date": 1398676849,
                    "answer_id": 23337192,
                    "question_id": 23306653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In your code j is Already json data and j['places'] is list not dict.     </p>\n\n<pre><code> r = requests.get('http://api.zippopotam.us/us/ma/belmont')\n j = r.json()\n\n print j['state']\n for each in j['places']:\n    print each['latitude']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2622673,
                        "reputation": 4370,
                        "user_id": 2270375,
                        "user_type": "registered",
                        "accept_rate": 42,
                        "profile_image": "https://www.gravatar.com/avatar/54d4053e63d305aa01a0d1c1a34b6a1a?s=256&d=identicon&r=PG",
                        "display_name": "apardes",
                        "link": "https://stackoverflow.com/users/2270375/apardes"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1398487216,
                    "creation_date": 1398487216,
                    "answer_id": 23306717,
                    "question_id": 23306653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I did not realize that the first nested element is actually an array. The correct way access to the post code key is as follows:</p>\n\n<pre><code>r = requests.get('http://api.zippopotam.us/us/ma/belmont')\nj = r.json()\n\nprint j['state']\nprint j['places'][1]['post code']\n</code></pre>\n"
                }
            ]
        },
        {
            "31097247": [
                {
                    "owner": {
                        "account_id": 1584761,
                        "reputation": 9363,
                        "user_id": 1469380,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/g2O1U.jpg?s=256",
                        "display_name": "Srivatsan",
                        "link": "https://stackoverflow.com/users/1469380/srivatsan"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1601548129,
                    "last_edit_date": 1601548129,
                    "creation_date": 1435477443,
                    "answer_id": 31097302,
                    "question_id": 31097247,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>numpy unique</code>. Since you want the unique rows, we need to put them into tuples:</p>\n<pre><code>import numpy as np\n\ndata = np.array([[1,8,3,3,4],\n                 [1,8,9,9,4],\n                 [1,8,3,3,4]])\n</code></pre>\n<p><em><strong>just applying <code>np.unique</code> to the <code>data</code></strong></em> array will result in this:</p>\n<pre><code>&gt;&gt;&gt; uniques\narray([1, 3, 4, 8, 9])\n</code></pre>\n<p><em><strong>prints out the unique elements in the list</strong></em>. So putting them into tuples results in:</p>\n<pre><code>new_array = [tuple(row) for row in data]\nuniques = np.unique(new_array)\n</code></pre>\n<p>which prints:</p>\n<pre><code>&gt;&gt;&gt; uniques\narray([[1, 8, 3, 3, 4],\n       [1, 8, 9, 9, 4]])\n</code></pre>\n<p><strong>UPDATE</strong></p>\n<p>In the new version, you need to set <code>np.unique(data, axis=0)</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3996536,
                        "reputation": 221359,
                        "user_id": 3293881,
                        "user_type": "registered",
                        "accept_rate": 17,
                        "profile_image": "https://i.sstatic.net/6ZYnq.jpg?s=256",
                        "display_name": "Divakar",
                        "link": "https://stackoverflow.com/users/3293881/divakar"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1435480068,
                    "last_edit_date": 1435480068,
                    "creation_date": 1435477293,
                    "answer_id": 31097280,
                    "question_id": 31097247,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One approach with <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html\" rel=\"noreferrer\"><code>lex-sorting</code></a> -</p>\n\n<pre><code># Perform lex sort and get sorted data\nsorted_idx = np.lexsort(data.T)\nsorted_data =  data[sorted_idx,:]\n\n# Get unique row mask\nrow_mask = np.append([True],np.any(np.diff(sorted_data,axis=0),1))\n\n# Get unique rows\nout = sorted_data[row_mask]\n</code></pre>\n\n<p>Sample run -</p>\n\n<pre><code>In [199]: data\nOut[199]: \narray([[1, 8, 3, 3, 4],\n       [1, 8, 9, 9, 4],\n       [1, 8, 3, 3, 4],\n       [1, 8, 3, 3, 4],\n       [1, 8, 0, 3, 4],\n       [1, 8, 9, 9, 4]])\n\nIn [200]: sorted_idx = np.lexsort(data.T)\n     ...: sorted_data =  data[sorted_idx,:]\n     ...: row_mask = np.append([True],np.any(np.diff(sorted_data,axis=0),1))\n     ...: out = sorted_data[row_mask]\n     ...: \n\nIn [201]: out\nOut[201]: \narray([[1, 8, 0, 3, 4],\n       [1, 8, 3, 3, 4],\n       [1, 8, 9, 9, 4]])\n</code></pre>\n\n<p>Runtime tests -</p>\n\n<p>This section times all approaches proposed in the solutions presented thus far.</p>\n\n<pre><code>In [34]: data = np.random.randint(0,10,(10000,10))\n\nIn [35]: def tuple_based(data):\n    ...:     new_array = [tuple(row) for row in data]\n    ...:     return np.unique(new_array)\n    ...: \n    ...: def lexsort_based(data):                 \n    ...:     sorted_data =  data[np.lexsort(data.T),:]\n    ...:     row_mask = np.append([True],np.any(np.diff(sorted_data,axis=0),1))\n    ...:     return sorted_data[row_mask]\n    ...: \n    ...: def unique_based(a):\n    ...:     a = np.ascontiguousarray(a)\n    ...:     unique_a = np.unique(a.view([('', a.dtype)]*a.shape[1]))\n    ...:     return unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))\n    ...: \n\nIn [36]: %timeit tuple_based(data)\n10 loops, best of 3: 63.1 ms per loop\n\nIn [37]: %timeit lexsort_based(data)\n100 loops, best of 3: 8.92 ms per loop\n\nIn [38]: %timeit unique_based(data)\n10 loops, best of 3: 29.1 ms per loop\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4312833,
                        "reputation": 4163,
                        "user_id": 3523490,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/0198ba4e4308178f044fe57d03bb0dad?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "AvidLearner",
                        "link": "https://stackoverflow.com/users/3523490/avidlearner"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1435477200,
                    "last_edit_date": 1495542743,
                    "creation_date": 1435477200,
                    "answer_id": 31097277,
                    "question_id": 31097247,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A simple solution can be:</p>\n\n<pre><code>import numpy as np\ndef unique_rows(a):\n    a = np.ascontiguousarray(a)\n    unique_a = np.unique(a.view([('', a.dtype)]*a.shape[1]))\n    return unique_a.view(a.dtype).reshape((unique_a.shape[0], a.shape[1]))\n\ndata = np.array([[1,8,3,3,4],\n                 [1,8,9,9,4],\n                 [1,8,3,3,4]])\n\n\nprint unique_rows(data)\n#prints:\n[[1 8 3 3 4]\n [1 8 9 9 4]]\n</code></pre>\n\n<p>You can check <a href=\"https://stackoverflow.com/questions/8560440/removing-duplicate-columns-and-rows-from-a-numpy-2d-array\">this</a> for many more solutions for this problem</p>\n"
                }
            ]
        },
        {
            "31826335": [
                {
                    "owner": {
                        "account_id": 3940864,
                        "reputation": 3086,
                        "user_id": 3255354,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/100002055139416/picture?type=large",
                        "display_name": "Eugene V",
                        "link": "https://stackoverflow.com/users/3255354/eugene-v"
                    },
                    "is_accepted": true,
                    "score": 193,
                    "last_activity_date": 1516734704,
                    "last_edit_date": 1516734704,
                    "creation_date": 1438761001,
                    "answer_id": 31826470,
                    "question_id": 31826335,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Python 3</strong></p>\n\n<pre><code>import base64\nfrom io import BytesIO\n\nbuffered = BytesIO()\nimage.save(buffered, format=\"JPEG\")\nimg_str = base64.b64encode(buffered.getvalue())\n</code></pre>\n\n<p><strong>Python 2</strong></p>\n\n<pre><code>import base64\nimport cStringIO\n\nbuffer = cStringIO.StringIO()\nimage.save(buffer, format=\"JPEG\")\nimg_str = base64.b64encode(buffer.getvalue())\n</code></pre>\n"
                }
            ]
        },
        {
            "3637668": [
                {
                    "owner": {
                        "account_id": 29074,
                        "reputation": 64869,
                        "user_id": 78259,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
                        "display_name": "Chas. Owens",
                        "link": "https://stackoverflow.com/users/78259/chas-owens"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1659363222,
                    "last_edit_date": 1659363222,
                    "creation_date": 1283534267,
                    "answer_id": 3638038,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Who says they aren't?  Take a look at <a href=\"https://search.cpan.org/%7Epardus/Zoidberg-0.96/man1/zoiduser.pod\" rel=\"nofollow noreferrer\"><code>Zoidberg</code></a>.  <a href=\"https://en.wikipedia.org/wiki/REPL\" rel=\"nofollow noreferrer\">REPLs</a> (Read Eval Print Loops) make crappy shells because every command must be syntactically correct, and running a program goes from being:</p>\n<pre><code>foo arg1 arg2 arg3\n</code></pre>\n<p>to</p>\n<pre><code>system &quot;foo&quot;, &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;\n</code></pre>\n<p>And don't even get me started on trying to do redirection.</p>\n<p>So, you need a custom shell (rather than a REPL) that understands commands and redirection and the language you want to use to bind commands together.  I think <code>zoid</code> (the Zoidberg shell) does a pretty good job of it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15387,
                        "reputation": 66361,
                        "user_id": 32453,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/bec38d63650c8912b6ba9b557fb953b9?s=256&d=identicon&r=PG",
                        "display_name": "rogerdpack",
                        "link": "https://stackoverflow.com/users/32453/rogerdpack"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1655845162,
                    "last_edit_date": 1655845162,
                    "creation_date": 1283531708,
                    "answer_id": 3637741,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think it's a question of parsing.  Shell languages assume by default the normal <code>$ xxx</code> command means you mean a command to run. In Python and Ruby need you to do <em>system(&quot;command&quot;)</em> or what not.</p>\n<p>It's not that they're unsuitable, just that nobody has really done it yet; at least I think so. <a href=\"http://rush.heroku.com/\" rel=\"nofollow noreferrer\">Rush</a> is an example attempt in Ruby, and Python has <a href=\"https://en.wikipedia.org/wiki/IPython\" rel=\"nofollow noreferrer\">IPython</a> or something like that.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 124754,
                        "reputation": 16735,
                        "user_id": 320057,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/3PiyJ.jpg?s=256",
                        "display_name": "Ivo van der Wijk",
                        "link": "https://stackoverflow.com/users/320057/ivo-van-der-wijk"
                    },
                    "is_accepted": false,
                    "score": 55,
                    "last_activity_date": 1655151103,
                    "last_edit_date": 1655151103,
                    "creation_date": 1283531730,
                    "answer_id": 3637744,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A shell language has to be easy to use. You want to type one-time throw away commands, not small programs. I.e., you want to type</p>\n<pre><code>ls -laR /usr\n</code></pre>\n<p>not</p>\n<pre><code>shell.ls(&quot;/usr&quot;, long=True, all=True, recursive=True)\n</code></pre>\n<p>This (also) means shell languages don't really care if an argument is an option, a string, a number or something else.</p>\n<p>Also, programming constructs in shells are an add-on, and not even always build-in. I.e. consider the combination of <strong>if</strong> and <strong>[</strong> in <a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"nofollow noreferrer\">Bash</a> or <a href=\"https://en.wikipedia.org/wiki/Bourne_shell\" rel=\"nofollow noreferrer\">Bourne shell</a> (<code>sh</code>), <a href=\"https://linux.die.net/man/1/seq\" rel=\"nofollow noreferrer\">seq</a> for generating sequences, and so on.</p>\n<p>Finally, shells have specific needs that you need less, or differently in programming. I.e., pipes, file redirection, process/job control, and so on.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 872850,
                        "reputation": 42144,
                        "user_id": 923315,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/j6lLI.jpg?s=256",
                        "display_name": "peter",
                        "link": "https://stackoverflow.com/users/923315/peter"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1651518928,
                    "last_edit_date": 1651518928,
                    "creation_date": 1328981979,
                    "answer_id": 9242414,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For the Windows users, I haven't yet felt the need for <a href=\"https://en.wikipedia.org/wiki/PowerShell\" rel=\"nofollow noreferrer\">PowerShell</a>, because I still use <a href=\"https://en.wikipedia.org/wiki/Take_Command_Console\" rel=\"nofollow noreferrer\">4NT</a> (now <a href=\"https://en.wikipedia.org/wiki/Take_Command_Console\" rel=\"nofollow noreferrer\">Take Command Console</a>) from <a href=\"https://en.wikipedia.org/wiki/Take_Command_Console\" rel=\"nofollow noreferrer\">JP Software</a>. It is a very good shell with lots of programming abilities. So it combines the best of both worlds.</p>\n<p>When you take a look at, for example, <a href=\"https://en.wikipedia.org/wiki/Interactive_Ruby_Shell\" rel=\"nofollow noreferrer\">IRB</a> (the <a href=\"https://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"nofollow noreferrer\">Ruby</a> interpreter), it must be well possible to extend it with more one-liners to do daily scripted or mass file management and on the minute tasks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55986,
                        "reputation": 113603,
                        "user_id": 167735,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5deb8de031f80c23f19e9b6d389e5afe?s=256&d=identicon&r=PG",
                        "display_name": "slebetman",
                        "link": "https://stackoverflow.com/users/167735/slebetman"
                    },
                    "is_accepted": false,
                    "score": 42,
                    "last_activity_date": 1651419900,
                    "last_edit_date": 1651419900,
                    "creation_date": 1283531941,
                    "answer_id": 3637769,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n<p>If you know of such a language, please post it as well.</p>\n</blockquote>\n<p>Tcl is one such language. Mainly because it is designed to primarily be a shell interpreter for CAD programs. Here's one hardcore Python programmer's* experience of realising why Tcl was designed the way it was: <em><a href=\"http://www.yosefk.com/blog/i-cant-believe-im-praising-tcl.html\" rel=\"nofollow noreferrer\">I can't believe I'm praising Tcl</a></em></p>\n<p>For me, I've written and have been using and improved Tcl shell (written in Tcl, of course) as my main Linux login shell on my homebrewed router: <a href=\"http://wiki.tcl.tk/16139\" rel=\"nofollow noreferrer\">Pure Tcl readline</a></p>\n<p>Some of the reasons I like Tcl in general has everything to do with the similarity of its syntax to traditional shells:</p>\n<ol>\n<li><p>At its most basic, Tcl syntax is <code>command argument argument...</code>. There's nothing else. This is the same as <a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"nofollow noreferrer\">Bash</a>, <a href=\"https://en.wikipedia.org/wiki/C_shell\" rel=\"nofollow noreferrer\">C shell</a> or even DOS shell.</p>\n</li>\n<li><p>A bareword is considered a string. This is again similar to traditional shells allowing you to write: <code>open myfile.txt w+</code> instead of <code>open &quot;myfile.txt&quot; &quot;w+&quot;</code>.</p>\n</li>\n<li><p>Because of the foundations of 1 and 2, Tcl ends up with very little extraneous syntax. You write code with less punctuation: <code>puts Hello</code> instead of <code>printf(&quot;Hello&quot;);</code>. When writing programs you don't feel the hurt so much, because you spend a lot of time thinking about what to write. When you use a shell to copy a file you don't think you just type and having to type <code>(</code> and <code>&quot;</code> and <code>,</code> and <code>)</code> and <code>;</code> again and again gets annoying very quickly.</p>\n</li>\n</ol>\n<p><em>*Note: not me; I'm a hardcore Tcl programmer</em></p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user559914"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1651419498,
                    "last_edit_date": 1651419498,
                    "creation_date": 1293907400,
                    "answer_id": 4575203,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Scalability <em>and</em> extensibility? <a href=\"https://en.wikipedia.org/wiki/Common_Lisp\" rel=\"nofollow noreferrer\">Common Lisp</a> (you can even run <a href=\"https://en.wikipedia.org/wiki/CLISP\" rel=\"nofollow noreferrer\">CLISP</a>, and possibly other implementations, <em>as</em> a login shell in Unix environments).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 214385,
                        "reputation": 20260,
                        "user_id": 468327,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/cc767569f5863a7c261991ee5b23f147?s=256&d=identicon&r=PG",
                        "display_name": "Joel Berger",
                        "link": "https://stackoverflow.com/users/468327/joel-berger"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1651419374,
                    "last_edit_date": 1651419374,
                    "creation_date": 1328984596,
                    "answer_id": 9242784,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://stackoverflow.com/questions/3637668/why-are-scripting-languages-e-g-perl-python-ruby-not-suitable-as-shell-lang/3638038#3638038\">These answers</a> inspired me to take over maintenance of the Perl-based shell Zoidberg. After some fixes, it is usable again!</p>\n<p>Check out the <a href=\"http://p3rl.org/zoiduser\" rel=\"nofollow noreferrer\">user's guide</a> or install <a href=\"https://metacpan.org/module/Bundle::Zoidberg\" rel=\"nofollow noreferrer\"><code>Bundle::Zoidberg</code></a> using your favorite <a href=\"https://en.wikipedia.org/wiki/CPAN\" rel=\"nofollow noreferrer\">CPAN</a> client.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2172,
                        "reputation": 369069,
                        "user_id": 2988,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
                        "display_name": "J&#246;rg W Mittag",
                        "link": "https://stackoverflow.com/users/2988/j%c3%b6rg-w-mittag"
                    },
                    "is_accepted": true,
                    "score": 482,
                    "last_activity_date": 1368205072,
                    "last_edit_date": 1368205072,
                    "creation_date": 1283559983,
                    "answer_id": 3640403,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are a couple of differences that I can think of; just thoughtstreaming here, in no particular order:</p>\n\n<ol>\n<li><p>Python &amp; Co. are designed to be good at scripting. Bash &amp; Co. are designed to be <em>only</em> good at scripting, with absolutely no compromise. IOW: Python is designed to be good both at scripting and non-scripting, Bash cares only about scripting.</p></li>\n<li><p>Bash &amp; Co. are untyped, Python &amp; Co. are strongly typed, which means that the number <code>123</code>, the string <code>123</code> and the file <code>123</code> are quite different. They are, however, not <em>statically</em> typed, which means they need to have different literals for those, in order to keep them apart.<br>\nExample:</p>\n\n<pre><code>                | Ruby             | Bash    \n-----------------------------------------\nnumber          | 123              | 123\nstring          | '123'            | 123\nregexp          | /123/            | 123\nfile            | File.open('123') | 123\nfile descriptor | IO.open('123')   | 123\nURI             | URI.parse('123') | 123\ncommand         | `123`            | 123\n</code></pre></li>\n<li><p>Python &amp; Co. are designed to scale <em>up</em> to 10000, 100000, maybe even 1000000 line programs, Bash &amp; Co. are designed to scale <em>down</em> to 10 <em>character</em> programs.</p></li>\n<li><p>In Bash &amp; Co., files, directories, file descriptors, processes are all first-class objects, in Python, only Python objects are first-class, if you want to manipulate files, directories etc., you have to wrap them in a Python object first.</p></li>\n<li><p>Shell programming is basically dataflow programming. Nobody realizes that, not even the people who write shells, but it turns out that shells are quite good at that, and general-purpose languages not so much. In the general-purpose programming world, dataflow seems to be mostly viewed as a concurrency model, not so much as a programming paradigm.</p></li>\n</ol>\n\n<p>I have the feeling that trying to address these points by bolting features or DSLs onto a general-purpose programming language doesn't work. At least, I have yet to see a convincing implementation of it. There is <strong>RuSH</strong> (Ruby shell), which tries to implement a shell in Ruby, there is <a href=\"http://rush.heroku.com/\" rel=\"noreferrer\"><strong>rush</strong></a>, which is an internal DSL for shell programming in Ruby, there is <a href=\"http://code.google.com/p/hotwire-shell/\" rel=\"noreferrer\"><strong>Hotwire</strong></a>, which is a Python shell, but IMO none of those come even close to competing with Bash, Zsh, fish and friends.</p>\n\n<p>Actually, IMHO, the best current shell is <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/dd835506%28v=vs.85%29.aspx\" rel=\"noreferrer\"><strong>Microsoft PowerShell</strong></a>, which is very surprising considering that for several <em>decades</em> now, Microsoft has continually had the <em>worst</em> shells <em>evar</em>. I mean, <code>COMMAND.COM</code>? Really? (Unfortunately, they still have a crappy terminal. It's still the \"command prompt\" that has been around since, what? Windows 3.0?)</p>\n\n<p>PowerShell was basically created by ignoring everything Microsoft has ever done (<code>COMMAND.COM</code>, <code>CMD.EXE</code>, VBScript, JScript) and instead starting from the Unix shell, then removing all backwards-compatibility cruft (like backticks for command substitution) and massaging it a bit to make it more Windows-friendly (like using the now unused backtick as an escape character instead of the backslash which is the path component separator character in Windows). After that, is when the magic happens.</p>\n\n<p>They address <strong>problem 1 and 3</strong> from above, by basically making the opposite choice compared to Python. Python cares about large programs first, scripting second. Bash cares only about scripting. PowerShell cares about scripting first, large programs second. A defining moment for me was watching a video of an interview with Jeffrey Snover (PowerShell's lead designer), when the interviewer asked him how big of a program one could write with PowerShell and Snover answered without missing a beat: \"80 characters.\" At that moment I realized that this is <em>finally</em> a guy at Microsoft who \"gets\" shell programming (probably related to the fact that PowerShell was <em>neither</em> developed by Microsoft's programming language group (i.e. lambda-calculus math nerds) nor the OS group (kernel nerds) but rather the server group (i.e. sysadmins who actually <em>use</em> shells)), and that I should probably take a serious look at PowerShell.</p>\n\n<p><strong>Number 2</strong> is solved by having arguments be statically typed. So, you can write just <code>123</code> and PowerShell knows whether it is a string or a number or a file, because the cmdlet (which is what shell commands are called in PowerShell) declares the types of its arguments to the shell. This has pretty deep ramifications: unlike Unix, where each command is responsible for parsing its own arguments (the shell basically passes the arguments as an array of strings), argument parsing in PowerShell is done by the <em>shell</em>. The cmdlets specify all their options and flags and arguments, as well as their types and names and documentation(!) to the shell, which then can perform argument parsing, tab completion, IntelliSense, inline documentation popups etc. in one centralized place. (This is not revolutionary, and the PowerShell designers acknowledge shells like the DIGITAL Command Language (DCL) and the IBM OS/400 Command Language (CL) as prior art. For anyone who has ever used an AS/400, this should sound familiar. In OS/400, you can write a shell command and if you don't know the syntax of certain arguments, you can simply leave them out and hit <kbd>F4</kbd>, which will bring a menu (similar to an HTML form) with labelled fields, dropdown, help texts etc. This is only possible because the OS knows about all the possible arguments and their types.) In the Unix shell, this information is often duplicated three times: in the argument parsing code in the command itself, in the <code>bash-completion</code> script for tab-completion and in the manpage.</p>\n\n<p><strong>Number 4</strong> is solved by the fact that PowerShell operates on strongly typed objects, which includes stuff like files, processes, folders and so on.</p>\n\n<p><strong>Number 5</strong> is particularly interesting, because PowerShell is the only shell I know of, where the people who wrote it were actually <em>aware</em> of the fact that shells are essentially dataflow engines and deliberately implemented it as a dataflow engine.</p>\n\n<p>Another nice thing about PowerShell are the naming conventions: all cmdlets are named <code>Action-Object</code> and moreover, there are also standardized names for specific actions and specific objects. (Again, this should sound familar to OS/400 users.) For example, everything which is related to receiving some information is called <code>Get-Foo</code>. And everything operating on (sub-)objects is called <code>Bar-ChildItem</code>. So, the equivalent to <code>ls</code> is <code>Get-ChildItem</code> (although PowerShell also provides builtin aliases <code>ls</code> and <code>dir</code>&nbsp;&ndash; in fact, whenever it makes sense, they provide both Unix and <code>CMD.EXE</code> aliases as well as abbreviations (<code>gci</code> in this case)).</p>\n\n<p>But the <strong>killer feature</strong> IMO is the strongly typed object pipelines. While PowerShell is derived from the Unix shell, there is one very important distinction: in Unix, all communication (both via pipes and redirections as well as via command arguments) is done with untyped, unstructured strings. In PowerShell, it's all strongly typed, structured objects. This is so incredibly powerful that I seriously wonder why noone else has thought of it. (Well, they have, but they never became popular.) In my shell scripts, I estimate that up to one third of the commands is only there to act as an adapter between two other commands that don't agree on a common textual format. Many of those adapters go away in PowerShell, because the cmdlets exchange structured objects instead of unstructured text. And if you look <em>inside</em> the commands, then they pretty much consist of three stages: parse the textual input into an internal object representation, manipulate the objects, convert them back into text. Again, the first and third stage basically go away, because the data already comes in as objects.</p>\n\n<p>However, the designers have taken great care to preserve the dynamicity and flexibility of shell scripting through what they call an <em>Adaptive Type System</em>. </p>\n\n<p>Anyway, I don't want to turn this into a PowerShell commercial. There are plenty of things that are <em>not</em> so great about PowerShell, although most of those have to do either with Windows or with the specific implementation, and not so much with the concepts. (E.g. the fact that it is implemented in .NET means that the very first time you start up the shell can take up to several seconds if the .NET framework is not already in the filesystem cache due to some other application that needs it. Considering that you often use the shell for well under a second, that is completely unacceptable.)</p>\n\n<p>The most important point I want to make is that if you want to look at existing work in scripting languages and shells, <strong>you shouldn't stop at Unix and the Ruby/Python/Perl/PHP family</strong>. For example, <a href=\"http://www.tcl.tk/\" rel=\"noreferrer\">Tcl</a> was already mentioned. <a href=\"http://en.wikipedia.org/wiki/REXX\" rel=\"noreferrer\">Rexx</a> would be another scripting language. <a href=\"http://www.gnu.org/software/emacs/emacs.html\" rel=\"noreferrer\">Emacs Lisp</a> would be yet another. And in the shell realm there are some of the already mentioned mainframe/midrange shells such as the OS/400 command line and DCL. Also, Plan9's rc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 107038,
                        "reputation": 137077,
                        "user_id": 284795,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=256&d=identicon&r=PG",
                        "display_name": "Colonel Panic",
                        "link": "https://stackoverflow.com/users/284795/colonel-panic"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1359892547,
                    "last_edit_date": 1359892547,
                    "creation_date": 1350143823,
                    "answer_id": 12874771,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You beg the question. Not everyone agrees that shell languages are superior. For one, <a href=\"http://viewsourcecode.org/why/hacking/wearingRubySlippersToWork.html\" rel=\"nofollow\">_Why doesn't</a></p>\n\n<blockquote>\n  <p>Not long ago a friend asked me how to recursively search his PHP scripts for a string. He had a lot of big binary files and templates in those directories that could have really bogged down a plain grep. I couldn't think of a way to use grep to make this happen, so I figured using find and grep together would be my best bet.</p>\n\n<pre><code>  find . -name \"*.php\" -exec grep 'search_string' {} \\; -print\n</code></pre>\n  \n  <p>Here's the above file search reworked in Ruby:</p>\n\n<pre><code>  Dir['**/*.php'].each do |path|\n    File.open( path ) do |f|\n      f.grep( /search_string/ ) do |line|\n        puts path, ':', line\n      end\n    end\n  end\n</code></pre>\n  \n  <p>Your first reaction may be, \"Well, that's quite a bit wordier than the original.\" And I just have to shrug and let it be. \"It's a lot easier to extend,\" I say. And it works across platforms.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 47499,
                        "reputation": 145892,
                        "user_id": 140740,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bf6eddcd47c263a1a5d31bdb4f7b6424?s=256&d=identicon&r=PG",
                        "display_name": "DigitalRoss",
                        "link": "https://stackoverflow.com/users/140740/digitalross"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1358231076,
                    "last_edit_date": 1358231076,
                    "creation_date": 1314338700,
                    "answer_id": 7200600,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<h2>No.</h2>\n\n<hr>\n\n<p><em>No, scripting languages are probably not suitable for shells.</em></p>\n\n<hr>\n\n<p>The problem is the dichotomy between <em>macro languages</em> and, well, everything else.</p>\n\n<p>The shell is in a category with other legacy macro languages such as <a href=\"http://en.wikipedia.org/wiki/Nroff\" rel=\"noreferrer\">nroff</a> and <a href=\"http://en.wikipedia.org/wiki/M4_%28computer_language%29\" rel=\"noreferrer\">m4</a>. In these processors, everything is a string and the processor defines a mapping from input strings to output strings.</p>\n\n<p>Certain boundaries are crossed in both directions in all languages, but it's usually quite clear whether a system's category is <em>macro</em> or, hmm, I'm not aware of an official term ... I will say <em>\"a real language\".</em></p>\n\n<p>So sure, you <em>could</em> type in all your commands in a language like Ruby, and it might even be a second-best choice to a real shell, but it will never be a macro language. There is too much syntax to respect. It takes too many quotes.</p>\n\n<p>But the macro language has its own issues when you start programming in it, because too many compromises had to be made to get rid of all that syntax. Strings are typed in with no quotes.  Various amounts of magic need to be re-introduced to inject the missing syntax. I did a <kbd>code-golf</kbd> in nroff once, just to be different. It was pretty strange. The source code to big implementations in macro languages is scary.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 690071,
                        "reputation": 71,
                        "user_id": 559824,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/f727d8d576ab228a47ad070640bda16a?s=256&d=identicon&r=PG",
                        "display_name": "rob",
                        "link": "https://stackoverflow.com/users/559824/rob"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1306159286,
                    "last_edit_date": 1306159286,
                    "creation_date": 1293896145,
                    "answer_id": 4574536,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Since both are formally programming languages, what you can do in one, you can do in the other. Actually it is a design emphasis issue. Shell languages are designed for interactive use, while scripting languages aren't.  </p>\n\n<p>The basic difference in the design is the storage of data between commands and the scope of variables. In Bash, etc. you have to jump through hoops to store a value (for example, commands like <code>set a='something'</code>), while in languages like Python you simply use an assignment statement (<code>a = 'something'</code>).  When using the values in a shell language you have to tell the language that your want the value of the variable, while in scripting languages you have to tell the language when you want the immediate value of the string.  This has effects when used interactively.</p>\n\n<p>In a scripting language where <code>ls</code> was defined as a command</p>\n\n<pre><code>a = some_value\n\nls a*b  \n</code></pre>\n\n<p>(What does <code>a</code> mean? Does this mean some_value * (whatever b is) or do you mean\n           'a'anystring'b'?.   In a scripting language the default is what is stored in memory for a.)</p>\n\n<pre><code>ls 'a*b'  Now means what the Unix ls a*b means.\n</code></pre>\n\n<p>In a Bash-like language</p>\n\n<pre><code>set a=some_value\n\nls a*b   means what the Unix ls a*b means.\n\nls $a*b  uses an explicit recall of the value of a.\n</code></pre>\n\n<p>Scripting languages make it easy to store and recall values and hard to have a transient scope on a value. Shell languages make it possible to store and recall values, but have a trivially transient scope per command.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 49011,
                        "reputation": 7746,
                        "user_id": 145809,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/aaea37d495579344fbd2553c06aac127?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SFEley",
                        "link": "https://stackoverflow.com/users/145809/sfeley"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1302222832,
                    "creation_date": 1302222832,
                    "answer_id": 5589163,
                    "question_id": 3637668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's cultural.  The <a href=\"http://en.wikipedia.org/wiki/Bourne_shell\" rel=\"noreferrer\">Bourne shell</a> is almost 25 years old; it was one of the first scripting languages, and it was the first <em>good</em> solution to the central need of Unix admins.  (I.e., a 'glue' to tie all the other utilities together and to do typical Unix tasks without having to compile a damn C program every time.)  </p>\n\n<p>By modern standards, its syntax is atrocious and its weird rules and punctuation-as-statement style (useful in the 1970s when every byte counted) make it hard for non-admins to penetrate it.  But it <em>did the job.</em>  The flaws and shortcomings were addressed by evolutionary improvements in its descendants (ksh, bash, zsh) without having to reconceive the ideas behind it.   Admins stuck to the core syntax because, weird as it was, nothing else handled the simple stuff better without getting in the way.</p>\n\n<p>For complex stuff, Perl came along and morphed into a sort of half-admin, half-application language.  But the more complex something gets, the more it's seen as an application rather than admin work, so the business people tend to look for \"programmers\" rather than \"admins\" to do it, despite the fact that the right kind of geek tends to be both.  So that's where the focus went, and the evolutionary improvements to the application capabilities of Perl resulted in...well, Python and Ruby.  (That's an oversimplification, but Perl was one of several inspirations for both languages.)</p>\n\n<p>Result?  Specialization.  Admins tend to think modern interpreted languages are too heavyweight for the things they're paid to do every day.  And overall, they're right.  They don't need objects.  They don't care about data structures.  They need <em>commands.</em>  They need <em>glue.</em>  Nothing else tries to do <em>commands</em> better than the Bourne shell concept (except maybe Tcl, which was already mentioned here); and Bourne is good enough.</p>\n\n<p>Programmers -- who nowadays are having to learn about devops more and more -- look at the limitations of the Bourne shell and wonder how the hell anyone could put up with it.  But the tools they know, while they certainly lean towards the Unixish style of I/O and file operations, aren't <em>better</em> for the purpose.  I've written things like backup scripts and file renaming one-offs in Ruby, because I know it better than I know bash, but any dedicated admin could do the same thing in bash -- <em>probably</em> in fewer lines and with less overhead, but either way, it'd work just as well.</p>\n\n<p>It's a common thing to ask \"Why does everyone use <em>Y</em> when <em>Z</em> is better?\" -- but evolution in technology, like evolution in everything else, tends to stop at <em>good enough.</em>  The 'better' solution doesn't win unless the difference is viewed as a deal-breaking frustration.  Bourne-type scripting might be frustrating to <em>you</em>, but for the people who use it all the time and for the jobs it was meant for, it's always done the job.</p>\n"
                }
            ]
        },
        {
            "20431270": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": true,
                    "score": 52,
                    "last_activity_date": 1386355594,
                    "creation_date": 1386355594,
                    "answer_id": 20431335,
                    "question_id": 20431270,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>On Python 2.x, simply use the <a href=\"http://docs.python.org/2.7/library/stdtypes.html#dict.items\" rel=\"noreferrer\"><code>items</code></a> method:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; dct = OrderedDict([(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')])\n&gt;&gt;&gt; dct.items()\n[(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')]\n&gt;&gt;&gt;\n</code></pre>\n\n<p>On Python 3.x, do the same but also put it in <a href=\"http://docs.python.org/3.2/library/functions.html#list\" rel=\"noreferrer\"><code>list</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; dct = OrderedDict([(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')])\n&gt;&gt;&gt; list(dct.items())\n[(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')]\n&gt;&gt;&gt;\n</code></pre>\n"
                }
            ]
        },
        {
            "11813287": [
                {
                    "owner": {
                        "account_id": 1489648,
                        "reputation": 27065,
                        "user_id": 1397061,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/a15b8b7f8e8121405aa5649d9acdfcc3?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "1&#39;&#39;",
                        "link": "https://stackoverflow.com/users/1397061/1"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1538067848,
                    "last_edit_date": 1538067848,
                    "creation_date": 1475958284,
                    "answer_id": 39937010,
                    "question_id": 11813287,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A more terse version of <a href=\"https://stackoverflow.com/a/14298025/1397061\">Roland Puntaier's answer</a> is: </p>\n\n<pre><code>import builtins\n\ndef insert_into_global_namespace():\n    builtins.var = 'an object'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4398470,
                        "reputation": 4651,
                        "user_id": 3584851,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/707792e73661bc0864606f51403da6a2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jolvi",
                        "link": "https://stackoverflow.com/users/3584851/jolvi"
                    },
                    "is_accepted": false,
                    "score": 53,
                    "last_activity_date": 1481566953,
                    "last_edit_date": 1481566953,
                    "creation_date": 1419457671,
                    "answer_id": 27642440,
                    "question_id": 11813287,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It is as simple as</p>\n\n<pre><code>globals()['var'] = \"an object\"\n</code></pre>\n\n<p>and/or</p>\n\n<pre><code>def insert_into_namespace(name, value, name_space=globals()):\n    name_space[name] = value\n\ninsert_into_namespace(\"var\", \"an object\")\n</code></pre>\n\n<p>Remark that <code>globals</code> is a built-in keyword, that is, <code>'globals' in __builtins__.__dict__</code> evaluates to <code>True</code>. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 4938910,
                        "reputation": 210,
                        "user_id": 3976240,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/606cb017cb52e325f86389ebc98ac4e7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Steve Newcomb",
                        "link": "https://stackoverflow.com/users/3976240/steve-newcomb"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1408987520,
                    "creation_date": 1408987520,
                    "answer_id": 25491174,
                    "question_id": 11813287,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't think anyone has explained how to create and set a global variable whose name is itself the value of a variable.</p>\n\n<p>Here's an answer I don't like, but at least it works[1], usually[2].  </p>\n\n<p>I wish someone would show me a better way to do it. I have found several use cases and I'm actually using this ugly answer:</p>\n\n<pre><code>########################################\ndef insert_into_global_namespace(\n    new_global_name,\n    new_global_value = None,\n):\n    executable_string = \"\"\"\nglobal %s\n%s = %r\n\"\"\" % (\n        new_global_name,\n        new_global_name, new_global_value,\n    )\n    exec executable_string  ## suboptimal!\n\nif __name__ == '__main__':\n    ## create global variable foo with value 'bar':\n    insert_into_global_namespace(\n        'foo',\n        'bar',\n    )\n    print globals()[ 'foo']\n########################################\n</code></pre>\n\n<ol>\n<li><p>Python exec should be avoided for many reasons.</p></li>\n<li><p>N.B.: Note the lack of an \"in\" keyword on the \"exec\" line (\"unqualified exec\").</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 2016772,
                        "reputation": 3491,
                        "user_id": 1803897,
                        "user_type": "registered",
                        "accept_rate": 33,
                        "profile_image": "https://www.gravatar.com/avatar/921ed2f776bd064b49d8aadb378dd15a?s=256&d=identicon&r=PG",
                        "display_name": "Roland Puntaier",
                        "link": "https://stackoverflow.com/users/1803897/roland-puntaier"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1358025348,
                    "creation_date": 1358025348,
                    "answer_id": 14298025,
                    "question_id": 11813287,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>But be aware that assigning function variables declared global only injects into the module namespace. You cannot use these variables globally after an import:</p>\n\n<pre><code>from that_module import call_that_function\ncall_that_function()\nprint(use_var_declared_global)\n</code></pre>\n\n<p>and you get</p>\n\n<pre><code>NameError: global name 'use_var_declared_global' is not defined\n</code></pre>\n\n<p>You would have to do import again to import also those new \"module globals\".\nThe builtins module is \"real global\" though:</p>\n\n<pre><code>class global_injector:\n    '''Inject into the *real global namespace*, i.e. \"builtins\" namespace or \"__builtin__\" for python2.\n    Assigning to variables declared global in a function, injects them only into the module's global namespace.\n    &gt;&gt;&gt; Global= sys.modules['__builtin__'].__dict__\n    &gt;&gt;&gt; #would need \n    &gt;&gt;&gt; Global['aname'] = 'avalue'\n    &gt;&gt;&gt; #With\n    &gt;&gt;&gt; Global = global_injector()\n    &gt;&gt;&gt; #one can do\n    &gt;&gt;&gt; Global.bname = 'bvalue'\n    &gt;&gt;&gt; #reading from it is simply\n    &gt;&gt;&gt; bname\n    bvalue\n\n    '''\n    def __init__(self):\n        try:\n            self.__dict__['builtin'] = sys.modules['__builtin__'].__dict__\n        except KeyError:\n            self.__dict__['builtin'] = sys.modules['builtins'].__dict__\n    def __setattr__(self,name,value):\n        self.builtin[name] = value\nGlobal = global_injector()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1530005,
                        "reputation": 250906,
                        "user_id": 1427416,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/QWHKg.png?s=256",
                        "display_name": "BrenBarn",
                        "link": "https://stackoverflow.com/users/1427416/brenbarn"
                    },
                    "is_accepted": true,
                    "score": 20,
                    "last_activity_date": 1344130351,
                    "creation_date": 1344130351,
                    "answer_id": 11813291,
                    "question_id": 11813287,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, just use the <code>global</code> statement.</p>\n\n<pre><code>def func():\n    global var\n    var = \"stuff\"\n</code></pre>\n"
                }
            ]
        },
        {
            "582056": [
                {
                    "owner": {
                        "account_id": 24973,
                        "reputation": 36293,
                        "user_id": 63841,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bd62b73ef97949be699e61da1d99d4a0?s=256&d=identicon&r=PG",
                        "display_name": "simplyharsh",
                        "link": "https://stackoverflow.com/users/63841/simplyharsh"
                    },
                    "is_accepted": true,
                    "score": 498,
                    "last_activity_date": 1708868069,
                    "last_edit_date": 1708868069,
                    "creation_date": 1288352454,
                    "answer_id": 4051447,
                    "question_id": 582056,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Well we don't actually need <code>inspect</code> here.</p>\n<pre><code>&gt;&gt;&gt; func = lambda x, y: (x, y)\n&gt;&gt;&gt; \n&gt;&gt;&gt; func.__code__.co_argcount\n2\n&gt;&gt;&gt; func.__code__.co_varnames\n('x', 'y')\n&gt;&gt;&gt;\n&gt;&gt;&gt; def func2(x,y=3):\n...  print(func2.__code__.co_varnames)\n...  pass # Other things\n... \n&gt;&gt;&gt; func2(3,3)\n('x', 'y')\n&gt;&gt;&gt; \n&gt;&gt;&gt; func2.__defaults__\n(3,)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11431,
                        "reputation": 15915,
                        "user_id": 22035,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/5df866a23fdeb8d6f2f3201578715bb0?s=256&d=identicon&r=PG",
                        "display_name": "Oli",
                        "link": "https://stackoverflow.com/users/22035/oli"
                    },
                    "is_accepted": false,
                    "score": 157,
                    "last_activity_date": 1689263409,
                    "last_edit_date": 1689263409,
                    "creation_date": 1235489464,
                    "answer_id": 582193,
                    "question_id": 582056,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import inspect\n\ndef func(a,b,c=5):\n    pass\n\n&gt;&gt;&gt; inspect.getargspec(func)  # inspect.signature(func) in Python 3\n(['a', 'b', 'c'], None, None, (5,))\n</code></pre>\n<p>so for getting arguments list alone use:</p>\n<pre><code>&gt;&gt;&gt; inspect.getargspec(func)[0]\n['a', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "unbeknown"
                    },
                    "is_accepted": false,
                    "score": 305,
                    "last_activity_date": 1656857953,
                    "last_edit_date": 1656857953,
                    "creation_date": 1235487819,
                    "answer_id": 582097,
                    "question_id": 582056,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://docs.python.org/library/functions.html#locals\" rel=\"noreferrer\"><code>locals()</code></a> returns a dictionary with local names:</p>\n<pre><code>def func(a, b, c):\n    print(locals().keys())\n</code></pre>\n<p>prints the list of parameters. If you use other local variables those will be included in this list. But you could make a copy at the beginning of your function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 21062,
                        "reputation": 18940,
                        "user_id": 50902,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/19d468858e7d32da4a5bb6e49394fd52?s=256&d=identicon&r=PG",
                        "display_name": "kmkaplan",
                        "link": "https://stackoverflow.com/users/50902/kmkaplan"
                    },
                    "is_accepted": false,
                    "score": 199,
                    "last_activity_date": 1235492282,
                    "last_edit_date": 1235492282,
                    "creation_date": 1235489644,
                    "answer_id": 582206,
                    "question_id": 582056,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you also want the values you can use the <code>inspect</code> module</p>\n\n<pre><code>import inspect\n\ndef func(a, b, c):\n    frame = inspect.currentframe()\n    args, _, _, values = inspect.getargvalues(frame)\n    print 'function name \"%s\"' % inspect.getframeinfo(frame)[2]\n    for i in args:\n        print \"    %s = %s\" % (i, values[i])\n    return [(i, values[i]) for i in args]\n\n&gt;&gt;&gt; func(1, 2, 3)\nfunction name \"func\"\n    a = 1\n    b = 2\n    c = 3\n[('a', 1), ('b', 2), ('c', 3)]\n</code></pre>\n"
                }
            ]
        },
        {
            "6005159": [
                {
                    "owner": {
                        "account_id": 64005,
                        "reputation": 124761,
                        "user_id": 189179,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bab16b3716e0e72b8b1a7741d68f5ee2?s=256&d=identicon&r=PG",
                        "display_name": "Ben James",
                        "link": "https://stackoverflow.com/users/189179/ben-james"
                    },
                    "is_accepted": true,
                    "score": 353,
                    "last_activity_date": 1399465401,
                    "last_edit_date": 1399465401,
                    "creation_date": 1305411983,
                    "answer_id": 6005180,
                    "question_id": 6005159,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <code>%s</code> specifier converts the object using <a href=\"https://docs.python.org/2/library/functions.html#str\"><code>str()</code></a>, and <code>%r</code> converts it using <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a>.</p>\n\n<p>For some objects such as integers, they yield the same result, but <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a> is special in that (for types where this is possible) it conventionally returns a result that is valid Python syntax, which could be used to unambiguously recreate the object it represents.</p>\n\n<p>Here's an example, using a date:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; d = datetime.date.today()\n&gt;&gt;&gt; str(d)\n'2011-05-14'\n&gt;&gt;&gt; repr(d)\n'datetime.date(2011, 5, 14)'\n</code></pre>\n\n<p>Types for which <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a> doesn't produce Python syntax include those that point to external resources such as a <code>file</code>, which you can't guarantee to recreate in a different context.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3429136,
                        "reputation": 578,
                        "user_id": 2935467,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/d90p8.jpg?s=256",
                        "display_name": "Pramod Bhat",
                        "link": "https://stackoverflow.com/users/2935467/pramod-bhat"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1398709169,
                    "last_edit_date": 1398709169,
                    "creation_date": 1385792428,
                    "answer_id": 20297266,
                    "question_id": 6005159,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the <code>%r</code> for debugging, since it displays the \"raw\" data of the variable, \nbut the others are used for displaying to users.</p>\n\n<p>That's how <code>%r</code> formatting works; it prints it the way you wrote it (or close to it). It's the \"raw\" format for debugging. Here <code>\\n</code> used to display to users doesn't work. <code>%r</code> shows the representation if the raw data of the variable.</p>\n\n<pre><code>months = \"\\nJan\\nFeb\\nMar\\nApr\\nMay\\nJun\\nJul\\nAug\"\nprint \"Here are the months: %r\" % months\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Here are the months: '\\nJan\\nFeb\\nMar\\nApr\\nMay\\nJun\\nJul\\nAug'\n</code></pre>\n\n<p>Check <a href=\"http://learnpythonthehardway.org/book/ex6.html\" rel=\"noreferrer\">this example</a> from Learn Python the Hard Way.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 326532,
                        "reputation": 627,
                        "user_id": 648345,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/b5de62bfe6894509fa3c6dcadcf5eb83?s=256&d=identicon&r=PG",
                        "display_name": "macloo",
                        "link": "https://stackoverflow.com/users/648345/macloo"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1357947602,
                    "creation_date": 1357947602,
                    "answer_id": 14288432,
                    "question_id": 6005159,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a version of Ben James's answer, above:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; x = datetime.date.today()\n&gt;&gt;&gt; print x\n2013-01-11\n&gt;&gt;&gt; \n&gt;&gt;&gt; \n&gt;&gt;&gt; print \"Today's date is %s ...\" % x\nToday's date is 2013-01-11 ...\n&gt;&gt;&gt; \n&gt;&gt;&gt; print \"Today's date is %r ...\" % x\nToday's date is datetime.date(2013, 1, 11) ...\n&gt;&gt;&gt;\n</code></pre>\n\n<p>When I ran this, it helped me see the usefulness of %r. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 250063,
                        "reputation": 300331,
                        "user_id": 526535,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/dcbad5e0bb2af6ced698ea8e3cf9c450?s=256&d=identicon&r=PG",
                        "display_name": "manojlds",
                        "link": "https://stackoverflow.com/users/526535/manojlds"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1305412655,
                    "last_edit_date": 1305412655,
                    "creation_date": 1305412200,
                    "answer_id": 6005201,
                    "question_id": 6005159,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>%r</code> shows with quotes:</p>\n\n<p>It will be like:</p>\n\n<pre><code>I said: 'There are 10 types of people.'.\n</code></pre>\n\n<p>If you had used <code>%s</code> it would have been:</p>\n\n<pre><code>I said: There are 10 types of people..\n</code></pre>\n"
                }
            ]
        },
        {
            "2335160": [
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835940,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": true,
                    "score": 29,
                    "last_activity_date": 1621946886,
                    "last_edit_date": 1621946886,
                    "creation_date": 1267111688,
                    "answer_id": 2335174,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The scope is as you would expect.</p>\n<p>The perhaps surprising thing is that the default value is only calculated once and reused, so each time you call the function you get the same list, not a new list initialized to [].</p>\n<p>The list is stored in <code>f.__defaults__</code> (or <code>f.func_defaults</code> in Python 2.)</p>\n<pre><code>def f(a, L=[]):\n    L.append(a)\n    return L\n\nprint f(1)\nprint f(2)\nprint f(3)\nprint f.__defaults__\nf.__defaults__ = (['foo'],) # Don't do this!\nprint f(4)\n</code></pre>\n<p>Result:</p>\n<pre><code>[1]\n[1, 2]\n[1, 2, 3]\n([1, 2, 3],)\n['foo', 4]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 44621,
                        "reputation": 19085,
                        "user_id": 131084,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b5129079df8199b730d06eec3c944f38?s=256&d=identicon&r=PG",
                        "display_name": "jcdyer",
                        "link": "https://stackoverflow.com/users/131084/jcdyer"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1267115499,
                    "creation_date": 1267115499,
                    "answer_id": 2335665,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Say you have the following code:</p>\n\n<pre><code>def func(a=[]):\n    a.append(1)\n    print(\"A:\", a)\n\nfunc()\nfunc()\nfunc()\n</code></pre>\n\n<p>You can use python's indentation to help you understand what's going on.  Everything that is flush to the left margin is executed when the file gets executed.  Everything that's indented is compiled into a code object which gets executed when <code>func()</code> is called.  So the function is defined and its default arguments set once, when the program gets executed (because the <code>def</code> statement is flush left).  </p>\n\n<p>What it does with the default arguments is an interesting issue.  In python 3, it puts most of the information about a function in two places:  <code>func.__code__</code> and <code>func.__defaults__</code>.   In python 2, <code>func.__code__</code> was <code>func.func_code</code> <code>func.__defaults__</code> was <code>func.func_defaults</code>.  Later versions of python 2, including 2.6 have both sets of names, to aid the transition from python 2 to python 3.  I will use the more modern <code>__code__</code> and <code>__defaults__</code>.  If you're stuck on an older python, the concepts are the same; just the names differ.  </p>\n\n<p>The default values are stored in <code>func.__defaults__</code>, and retrieved each time the function is called.  </p>\n\n<p>Thus when you define the function above, the body of the function gets compiled and stored in variables under <code>__code__</code>, to be executed later, and the default arguments get stored in <code>__defaults__</code>.  When you call the function, it uses the values in <code>__defaults__</code>.  If those values get modified for any reason, it only has the modified version available to use.  </p>\n\n<p>Play around defining different functions in the interactive interpreter, and see what you can figure out about how python creates and uses functions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 46065,
                        "reputation": 159587,
                        "user_id": 135978,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8931e023c82f232d4d02a115710fb8fc?s=256&d=identicon&r=PG",
                        "display_name": "Sean Vieira",
                        "link": "https://stackoverflow.com/users/135978/sean-vieira"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1267113437,
                    "last_edit_date": 1495540810,
                    "creation_date": 1267112416,
                    "answer_id": 2335263,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The explaination is given in answers to <a href=\"https://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument\">this question</a>.  To sum it up here:</p>\n\n<p>Functions in Python are a kind of object. Because they are a kind of object, they act like objects when instantiated. A function, if defined with a mutable attribute as a default argument, is exactly the same as a class with a static attribute that is a mutable list.</p>\n\n<p>Lennart Regebro has <a href=\"https://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument/1133255#1133255\">a good explanation</a> and the <a href=\"https://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument/1145781#1145781\">answer to the question</a> by Roberto Liffredo is excellent.</p>\n\n<p>To adapt Lennart's answer ... if I have a <code>BananaBunch</code> class:</p>\n\n<pre><code>class BananaBunch:\n    bananas = []\n\n    def addBanana(self, banana):\n        self.bananas.append(banana)\n\n\nbunch = BananaBunch()\n&gt;&gt;&gt; bunch\n&lt;__main__.BananaBunch instance at 0x011A7FA8&gt;\n&gt;&gt;&gt; bunch.addBanana(1)\n&gt;&gt;&gt; bunch.bananas\n[1]\n&gt;&gt;&gt; for i in range(6):\n    bunch.addBanana(\"Banana #\" + i)\n&gt;&gt;&gt; for i in range(6):\n    bunch.addBanana(\"Banana #\" + str(i))\n\n&gt;&gt;&gt; bunch.bananas\n[1, 'Banana #0', 'Banana #1', 'Banana #2', 'Banana #3', 'Banana #4', 'Banana #5']\n\n// And for review ... \n//If I then add something to the BananaBunch class ...\n&gt;&gt;&gt; BananaBunch.bananas.append(\"A mutated banana\")\n\n//My own bunch is suddenly corrupted. :-)\n&gt;&gt;&gt; bunch.bananas\n[1, 'Banana #0', 'Banana #1', 'Banana #2', 'Banana #3', 'Banana #4', 'Banana #5', 'A mutated banana']\n</code></pre>\n\n<p>How does this apply to functions?  <a href=\"http://docs.python.org/reference/datamodel.html#types\" rel=\"nofollow noreferrer\">Functions in Python are objects</a>.  This bears repeating. <a href=\"http://docs.python.org/reference/compound_stmts.html#function-definitions\" rel=\"nofollow noreferrer\"><strong>Functions in Python are object</strong></a>s. </p>\n\n<p>So when you create a function, you are creating an object.  When you give a function a mutable default value, you are populating that object's attribute with a mutable value, and every time you call that function you are operating on the same attribute. So if you are using a mutable call (like append), then you are modifying the same object, just as if you were adding bananas to the <code>bunch</code> object.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 84687,
                        "reputation": 2268,
                        "user_id": 236554,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/02c5a6ba07dbac3fbc753c19650b4d7f?s=256&d=identicon&r=PG",
                        "display_name": "manifest",
                        "link": "https://stackoverflow.com/users/236554/manifest"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1267113170,
                    "creation_date": 1267113170,
                    "answer_id": 2335353,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You have to keep in mind that python is an interpreted language.  What is happening here is when the function \"f\" is defined, it creates the list and assigns it to the default parameter \"L\" of function \"f\".  Later, when you call this function, the same list is used as the default parameter.  In short, the code on the \"def\" line, only gets executed once when the function is defined.  This is a common python pitfall, of which I have fallen in myself.</p>\n\n<pre><code>def f(a, L=[]):\n    L.append(a)\n    return L\n\nprint f(1)\nprint f(2)\nprint f(3)\n</code></pre>\n\n<p>There have been suggestions for idioms in other answers here to fix this issue.  The one I would suggest is as follows:</p>\n\n<pre><code>def f(a, L=None):\n    L = L or []\n    L.append(a)\n    return L\n</code></pre>\n\n<p>This uses the or short circuit to either take the \"L\" that was passed, or create a new list.</p>\n\n<p>The answer to your scope question is the \"L\" only has a scope within the function \"f\", but because the default parameters are only assigned once to a single list instead of every time you call the function it behaves as if the default parameter \"L\" has a global scope.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 88931,
                        "reputation": 70019,
                        "user_id": 245706,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/e714b10afcc8d86b0fcfe79c02e6c61b?s=256&d=identicon&r=PG",
                        "display_name": "AndiDog",
                        "link": "https://stackoverflow.com/users/245706/andidog"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1267112731,
                    "last_edit_date": 1267112731,
                    "creation_date": 1267112393,
                    "answer_id": 2335258,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The \"problem\" here is that <code>L=[]</code> is only evaluated <em>once</em>, that is, when the file is compiled. Python steps through each line of the file and compiles it. By the time it reaches the <code>def</code> with the default parameter, it creates that list instance once.</p>\n\n<p>If you put <code>L = []</code> inside the function code, the instance is not created at \"compile time\" (actually compile time can also be called part of the run time) because Python compiles the function's code but does not call it. So you will get a <em>new</em> list instance because the creation is done every time you call the function (instead of once during compilation).</p>\n\n<p>A solution for that problem is not to use mutable objects as default parameters, or only fixed instances like <code>None</code>:</p>\n\n<pre><code>def f(a, L = None):\n    if l == None:\n        l = []\n    L.append(a)\n    return L\n</code></pre>\n\n<p>Note that in both cases you described, the scope of <code>L</code> is the function scope.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2288,
                        "reputation": 193380,
                        "user_id": 3171,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=256&d=identicon&r=PG",
                        "display_name": "David Webb",
                        "link": "https://stackoverflow.com/users/3171/david-webb"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1267112077,
                    "last_edit_date": 1267112077,
                    "creation_date": 1267111764,
                    "answer_id": 2335187,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The scope of the <code>L</code> variable is behaving as you expect.  </p>\n\n<p>The \"problem\" is with the list you're creating with <code>[]</code>.  Python does not create a new list each time you call the function.  <code>L</code> gets assigned the same list each time you call which is why the function \"remembers\" previous calls. </p>\n\n<p>So in effect this is what you have:</p>\n\n<pre><code>mylist = []\ndef f(a, L=mylist):\n    L.append(a)\n    return L\n</code></pre>\n\n<p>The <a href=\"http://docs.python.org/tutorial/controlflow.html#default-argument-values\" rel=\"noreferrer\">Python Tutorial puts it this way</a>:</p>\n\n<blockquote>\n  <p>The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. </p>\n</blockquote>\n\n<p>and suggests the following way to code the expected behaviour:</p>\n\n<pre><code>def f(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 28533,
                        "reputation": 26589,
                        "user_id": 76310,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/wQ3Km.jpg?s=256",
                        "display_name": "Joe Koberg",
                        "link": "https://stackoverflow.com/users/76310/joe-koberg"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1267111847,
                    "creation_date": 1267111847,
                    "answer_id": 2335197,
                    "question_id": 2335160,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's even less \"magic\" than you might suspect. This is equivalent to </p>\n\n<pre><code>m = []\n\ndef f(a, L=m):\n    L.append(a)\n    return L\n\nprint f(1)\nprint f(2)\nprint f(3)\n</code></pre>\n\n<p><code>m</code> is only created once.</p>\n"
                }
            ]
        },
        {
            "25674169": [
                {
                    "owner": {
                        "account_id": 3068514,
                        "reputation": 3968,
                        "user_id": 2599709,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/3c565ca54f4e129a36e857b20f5ff86f?s=256&d=identicon&r=PG",
                        "display_name": "Chrispresso",
                        "link": "https://stackoverflow.com/users/2599709/chrispresso"
                    },
                    "is_accepted": true,
                    "score": 57,
                    "last_activity_date": 1632148891,
                    "last_edit_date": 1632148891,
                    "creation_date": 1409864553,
                    "answer_id": 25674934,
                    "question_id": 25674169,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let's take a look at your list comprehension then, but first let's start with list comprehension at it's easiest.</p>\n<pre><code>l = [1,2,3,4,5]\nprint [x for x in l] # prints [1, 2, 3, 4, 5]\n</code></pre>\n<p>You can look at this the same as a for loop structured like so:</p>\n<pre><code>for x in l:\n    print x\n</code></pre>\n<p>Now let's look at another one:</p>\n<pre><code>l = [1,2,3,4,5]\na = [x for x in l if x % 2 == 0]\nprint a # prints [2,4]\n</code></pre>\n<p>That is the exact same as this:</p>\n<pre><code>a = []\nl = [1,2,3,4,5]\nfor x in l:\n    if x % 2 == 0:\n        a.append(x)\nprint a # prints [2,4]\n</code></pre>\n<p>Now let's take a look at the examples you provided.</p>\n<pre><code>l = [[1,2,3],[4,5,6]]\nflattened_l = [item for sublist in l for item in sublist]\nprint flattened_l # prints [1,2,3,4,5,6]\n</code></pre>\n<p>For list comprehension start at the farthest to the left for loop and work your way in. The variable, item, in this case, is what will be added. It will produce this equivalent:</p>\n<pre><code>l = [[1,2,3],[4,5,6]]\nflattened_l = []\nfor sublist in l:\n    for item in sublist:\n        flattened_l.append(item)\n</code></pre>\n<p>Now for the last one</p>\n<pre><code>exactly_the_same_as_l = [item for item in sublist for sublist in l]\n</code></pre>\n<p>Using the same knowledge we can create a for loop and see how it would behave:</p>\n<pre><code>for item in sublist:\n    for sublist in l:\n        exactly_the_same_as_l.append(item)\n</code></pre>\n<p>Now the only reason the above one works is because when flattened_l was created, it also created <code>sublist</code>. It is a scoping reason to why that did not throw an error. If you ran that without defining the flattened_l first, you would get a <code>NameError</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 448947,
                        "reputation": 791,
                        "user_id": 843454,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/a32a385115abc8319ef54acc17ace18f?s=256&d=identicon&r=PG",
                        "display_name": "mklbtz",
                        "link": "https://stackoverflow.com/users/843454/mklbtz"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1535468807,
                    "creation_date": 1535468807,
                    "answer_id": 52061082,
                    "question_id": 25674169,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>While this approach definitely <em>works</em> for flattening lists, I wouldn't recommend it unless your sublists are known to be very small (1 or 2 elements each). </p>\n\n<p>I've done a bit of profiling with <code>timeit</code> and found that this takes roughly 2-3 times longer than using a single loop and calling extend\u2026 </p>\n\n<pre><code>def flatten(l):\n    flattened = []\n    for sublist in l:\n        flattened.extend(sublist)\n    return flattened\n</code></pre>\n\n<p>While it's not as pretty, the speedup is significant. I suppose this works so well because <code>extend</code> can more efficiently copy the whole sublist at once instead of copying each element, one at a time. I would recommend using <code>extend</code> if you know your sublists are medium-to-large in size. The larger the sublist, the bigger the speedup. </p>\n\n<p><strong>One final caveat:</strong> obviously, this only holds true if you need to <em>eagerly</em> form this flattened list. Perhaps you'll be sorting it later, for example. If you're ultimately going to just loop through the list as-is, this will not be any better than using the nested loops approach outlined by others. But for that use case, you want to return a generator instead of a list for the added benefit of laziness\u2026</p>\n\n<pre><code>def flatten(l):\n    return (item for sublist in l for item in sublist) # note the parens\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 61964,
                        "reputation": 17250,
                        "user_id": 184379,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/4d5dd5bf22405e741f37257e2b5e15b0?s=256&d=identicon&r=PG",
                        "display_name": "Tjorriemorrie",
                        "link": "https://stackoverflow.com/users/184379/tjorriemorrie"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1498782758,
                    "creation_date": 1498782758,
                    "answer_id": 44836928,
                    "question_id": 25674169,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For the lazy dev that wants a quick answer:</p>\n\n<pre><code>&gt;&gt;&gt; a = [[1,2], [3,4]]\n&gt;&gt;&gt; [i for g in a for i in g]\n[1, 2, 3, 4]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 50008,
                        "reputation": 17420,
                        "user_id": 149076,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/ZHnYp.jpg?s=256",
                        "display_name": "Jim Dennis",
                        "link": "https://stackoverflow.com/users/149076/jim-dennis"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1409877272,
                    "creation_date": 1409877272,
                    "answer_id": 25676987,
                    "question_id": 25674169,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Note, of course, that the sort of comprehension will only \"flatten\" a list of lists (or list of other iterables).  Also if you pass it a list of strings you'll \"flatten\" it into a list of characters.</p>\n\n<p>To generalize this in a meaningful way you first want to be able to cleanly distinguish between strings (or bytearrays) and other types of sequences (or other Iterables).  So let's start with a simple function:</p>\n\n<pre><code>import collections\ndef non_str_seq(p):\n    '''p is putatively a sequence and not a string nor bytearray'''\n    return isinstance(p, collections.Iterable) and not (isinstance(p, str) or isinstance(p, bytearray))\n</code></pre>\n\n<p>Using that we can then build a recursive function to flatten any </p>\n\n<pre><code>def flatten(s):\n    '''Recursively flatten any sequence of objects\n    '''\n    results = list()\n    if non_str_seq(s):\n        for each in s:\n            results.extend(flatten(each))\n    else:\n        results.append(s)\n    return results\n</code></pre>\n\n<p>There are probably more elegant ways to do this.  But this works for all the Python built-in types that I know of.  Simple objects (numbers, strings, instances of None, True, False are all returned wrapped in list.  Dictionaries are returned as lists of keys (in hash order).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1212452,
                        "reputation": 767,
                        "user_id": 1180742,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UqTeC.jpg?s=256",
                        "display_name": "Eliezer",
                        "link": "https://stackoverflow.com/users/1180742/eliezer"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1409864003,
                    "last_edit_date": 1409864003,
                    "creation_date": 1409863890,
                    "answer_id": 25674791,
                    "question_id": 25674169,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The for loops are evaluated from left to right. Any <code>list comprehension</code> can be re-written as a for loop, as follows:</p>\n\n<pre><code>l = [[1,2,3],[4,5,6]]\nflattened_l = []\nfor sublist in l:\n    for item in sublist:\n        flattened_l.append(item)\n</code></pre>\n\n<p>The above is the correct code for flattening a list, whether you choose to write it concisely as a list comprehension, or in this extended version.</p>\n\n<p>The second list comprehension you wrote will raise a NameError, as 'sublist' has not yet been defined. You can see this by writing the list comprehension as a for loop:</p>\n\n<pre><code>l = [[1,2,3],[4,5,6]]\nflattened_l = []\nfor item in sublist:\n    for sublist in l:\n        flattened_l.append(item)\n</code></pre>\n\n<p>The only reason you didn't see the error when you ran your code was because you had previously defined sublist when implementing your first list comprehension. </p>\n\n<p>For more information, you may want to check out <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow noreferrer\">Guido's tutorial on list comprehensions</a>.        </p>\n"
                }
            ]
        },
        {
            "17162682": [
                {
                    "owner": {
                        "account_id": 5273310,
                        "reputation": 165,
                        "user_id": 4285293,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://i.sstatic.net/WLI1X.jpg?s=256",
                        "display_name": "Vinicius Dantas",
                        "link": "https://stackoverflow.com/users/4285293/vinicius-dantas"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1527463877,
                    "last_edit_date": 1527463877,
                    "creation_date": 1438045608,
                    "answer_id": 31665827,
                    "question_id": 17162682,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would like to add my information as a comment into alecxe's answer, but I do not have enough reputation for that.</p>\n\n<p>In case of someone still looking for an answer, I forked HTMLTestRunner into a simple TestRunner, which has a tabular, colored, terminal-friendly output.\nThis is a sample of its output:</p>\n\n<p><a href=\"https://i.sstatic.net/upSC0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/upSC0.png\" alt=\"Example\"></a></p>\n\n<p>The source code is at <a href=\"https://gist.github.com/viniciusd/73e6eccd39dea5e714b1464e3c47e067\" rel=\"nofollow noreferrer\">https://gist.github.com/viniciusd/73e6eccd39dea5e714b1464e3c47e067</a></p>\n\n<p>I shall rewrite it from scratch soon but keeping the output format.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 289746,
                        "reputation": 2232,
                        "user_id": 590904,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/klpiB.jpg?s=256",
                        "display_name": "Carlos",
                        "link": "https://stackoverflow.com/users/590904/carlos"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1371567716,
                    "last_edit_date": 1371567716,
                    "creation_date": 1371566529,
                    "answer_id": 17171836,
                    "question_id": 17162682,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Take a look at <a href=\"http://twistedmatrix.com/trac/wiki/TwistedTrial\" rel=\"nofollow noreferrer\">Twisted's Trial</a>. </p>\n\n<p>By default, it uses the <code>TreeReporter</code> test runner, which looks like:</p>\n\n<p><img src=\"https://i.sstatic.net/AzOs2.png\" alt=\"Trial&#39;s reporting\"></p>\n\n<p>It has the following:</p>\n\n<ul>\n<li><p>It's a command line report, just run:</p>\n\n<p><code>trial test_name.py</code></p></li>\n<li><p>Colored output: red for failure, green for success</p></li>\n<li><p>The report uses a tree like structure. It displays the tests under the TestCases they belong, allowing you to quickly traverse the results to find a specific test. (Although it provides a couple of more <a href=\"http://twistedmatrix.com/documents/current/api/twisted.trial.reporter.html\" rel=\"nofollow noreferrer\">reports</a>).</p></li>\n<li><p>It also includes a test library, derived from Python's <code>unittest.TestCase</code>. You can use this library by subclassing  <code>twisted.trial.unittest.TestCase</code>. This provides a few more <a href=\"http://twistedmatrix.com/documents/current/api/twisted.trial.unittest.TestCase.html\" rel=\"nofollow noreferrer\">assertion methods</a>. </p></li>\n<li><p>It includes the option to generate statement coverage for your tests.</p></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 403854,
                        "reputation": 473017,
                        "user_id": 771848,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/2DTBv.jpg?s=256",
                        "display_name": "alecxe",
                        "link": "https://stackoverflow.com/users/771848/alecxe"
                    },
                    "is_accepted": true,
                    "score": 34,
                    "last_activity_date": 1371540709,
                    "last_edit_date": 1495535495,
                    "creation_date": 1371540334,
                    "answer_id": 17162936,
                    "question_id": 17162682,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is not exactly what you are asking, but there are several options for having a readable test output there:</p>\n\n<ul>\n<li><a href=\"http://tungwaiyip.info/software/HTMLTestRunner.html\" rel=\"noreferrer\">HTMLTestRunner</a> generates easy to use HTML test reports in a tabular form. <a href=\"http://tungwaiyip.info/software/sample_test_report.html\" rel=\"noreferrer\">Here</a>'s a sample report.</li>\n<li><a href=\"https://github.com/cboylan/nose-html-output\" rel=\"noreferrer\">nose-html-output</a> plugin for <a href=\"https://nose.readthedocs.org/en/latest/\" rel=\"noreferrer\">nose</a> test runner</li>\n<li><a href=\"https://pypi.python.org/pypi/unittest-xml-reporting\" rel=\"noreferrer\">unittest-xml-reporting</a> - PyUnit-based test runner with JUnit like XML reporting</li>\n<li>nose with <code>--with-xunit</code> option will produce junit xml style reports that are easy to read and convert</li>\n</ul>\n\n<p>Also see:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1758354/how-to-produce-html-unit-test-output-in-python\">How to produce html unit test output in Python?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5138311/python-unittest-reporting-in-html\">Python Unittest Reporting in HTML</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5203633/unittest-colored-output\">unittest colored output</a> (coloring the output can make results readable too)</li>\n</ul>\n\n<p>If you want to see test results in a tabular form in the console anyway, I think that a good idea would be to write your <a href=\"https://nose.readthedocs.org/en/latest/plugins/writing.html\" rel=\"noreferrer\">own nose plugin</a> or test runner based on <code>unittest.TestProgram</code> as it was done in <a href=\"http://tungwaiyip.info/software/HTMLTestRunner_0_8_2/HTMLTestRunner.py\" rel=\"noreferrer\">HTMLTestRunner</a>.</p>\n\n<p>Hope that helps.</p>\n"
                }
            ]
        },
        {
            "17015230": [
                {
                    "owner": {
                        "account_id": 23243289,
                        "reputation": 61,
                        "user_id": 17332200,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f4a03350610a54207c6c923b27b1fa1c?s=256&d=identicon&r=PG",
                        "display_name": "mmore500",
                        "link": "https://stackoverflow.com/users/17332200/mmore500"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1703795677,
                    "creation_date": 1703795677,
                    "answer_id": 77729059,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For situations where a <strong>function continues after exception-handled code</strong>, you can avoid nesting a <code>try</code>/<code>except</code> fallback sequence without needing a helper function to <code>return</code> from by <strong>using a dummy loop</strong>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>def my_function();\n    # ...preceding function content\n\n    while &quot;make breakable&quot;:  # dummy loop\n        try:\n            x = tryfirst()\n            break  # tryfirst worked\n        except Exception:\n            pass  # fallback to trysecond\n        try:\n            x = trysecond()\n            break  # trysecond worked\n        except Exception:\n            pass  # fallback to trythird\n        try:\n            x = trythird()\n            break  # trythird worked\n        except Exception:\n            raise Exception()  # give up\n\n    # subsequent function content...\n</code></pre>\n<p>You could also use an inline immediately invoked function for similar effect.</p>\n<pre class=\"lang-py prettyprint-override\"><code>def my_function();\n    # ...preceding function content\n\n    def try_fallback_sequence():\n        try:\n            x = tryfirst()\n            return  # tryfirst worked\n        except Exception:\n            return  # fallback to trysecond\n        try:\n            x = trysecond()\n            return  # trysecond worked\n        except Exception:\n            pass  # fallback to trythird\n        try:\n            x = trythird()\n            return  # trythird worked\n        except Exception:\n            raise Exception()  # give up\n\n    try_fallback_sequence()\n\n    # subsequent function content...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 127316,
                        "reputation": 7310,
                        "user_id": 324389,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/82ad175014437c2616703f5804a80f8b?s=256&d=identicon&r=PG",
                        "display_name": "lqc",
                        "link": "https://stackoverflow.com/users/324389/lqc"
                    },
                    "is_accepted": true,
                    "score": 288,
                    "last_activity_date": 1691566778,
                    "last_edit_date": 1691566778,
                    "creation_date": 1370821605,
                    "answer_id": 17015303,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your first example is perfectly fine. Even the official Python documentation recommends this style known as <a href=\"https://docs.python.org/3/glossary.html#term-EAFP\" rel=\"noreferrer\">EAFP</a>.</p>\n<p>Personally, I prefer to avoid nesting when it's not necessary:</p>\n<pre><code>def __getattribute__(self, item):\n    try:\n        return object.__getattribute__(self, item)\n    except AttributeError:\n        pass  # Fallback to dict\n    try:\n        return self.dict[item]\n    except KeyError:\n        raise AttributeError(&quot;The object doesn't have such attribute&quot;) from None\n</code></pre>\n<p>PS. <code>has_key()</code> has been deprecated for a long time in Python 2. Use <code>item in self.dict</code> instead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1620768541,
                    "last_edit_date": 1620768541,
                    "creation_date": 1370821936,
                    "answer_id": 17015343,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my opinion, this would be the most Pythonic way to handle it, although and because it makes your question moot. Note that this defines <code>__getattr__()</code> instead of <code>__getattribute__() </code>, because doing so means it only has to deal with the &quot;special&quot; attributes being kept in the internal dictionary.</p>\n<pre><code>def __getattr__(self, name):\n    ''' Only called when an attribute lookup in the &quot;usual&quot; places has failed. '''\n    try:\n        return self.my_dict[name]\n    except KeyError:\n        raise AttributeError(&quot;some customized error message&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2185959,
                        "reputation": 902,
                        "user_id": 1934380,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c71f8c85d39a7b2bcf705bf4d968cac4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ravaging Care",
                        "link": "https://stackoverflow.com/users/1934380/ravaging-care"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1610669882,
                    "last_edit_date": 1610669882,
                    "creation_date": 1567606432,
                    "answer_id": 57790350,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A good and simple example for nested try/except could be the following:</p>\n<pre><code>import numpy as np\n\ndef divide(x, y):\n    try:\n        out = x/y\n    except:\n        try:\n            out = np.inf * x / abs(x)\n        except:\n            out = np.nan\n    finally:\n        return out\n\n</code></pre>\n<p>Now try various combinations and you will get the correct result:</p>\n<pre><code>divide(15, 3)\n# 5.0\n\ndivide(15, 0)\n# inf\n\ndivide(-15, 0)\n# -inf\n\ndivide(0, 0)\n# nan\n\n</code></pre>\n<p>(Of course, we have NumPy, so we don't need to create this function.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3307466,
                        "reputation": 95,
                        "user_id": 6696806,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3c0bd4e9a09eb32cbefd7c5a6d56cca9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Guanghua Shu",
                        "link": "https://stackoverflow.com/users/6696806/guanghua-shu"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1610669830,
                    "last_edit_date": 1610669830,
                    "creation_date": 1551127722,
                    "answer_id": 54874442,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If <em>try-except-finally</em> is nested inside a <em>finally</em> block, the result from &quot;child&quot; finally is preserved. I have not found an official explanation yet, but the following code snippet shows this behavior in Python 3.6.</p>\n<pre><code>def f2():\n    try:\n        a = 4\n        raise SyntaxError\n    except SyntaxError as se:\n        print('log SE')\n        raise se from None\n    finally:\n        try:\n            raise ValueError\n        except ValueError as ve:\n            a = 5\n            print('log VE')\n            raise ve from None\n        finally:\n            return 6\n        return a\n\nIn [1]: f2()\nlog SE\nlog VE\nOut[2]: 6\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1514897,
                        "reputation": 8327,
                        "user_id": 1416144,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://www.gravatar.com/avatar/bab2906fe97538ebda3121f8e9c04807?s=256&d=identicon&r=PG",
                        "display_name": "S\u0142awomir Lenart",
                        "link": "https://stackoverflow.com/users/1416144/s%c5%82awomir-lenart"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1610660264,
                    "last_edit_date": 1610660264,
                    "creation_date": 1522087199,
                    "answer_id": 49497763,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Just be careful - in this case the first <code>finally</code> is touched, <em>but</em> skipped too.</p>\n<pre><code>def a(z):\n    try:\n        100/z\n    except ZeroDivisionError:\n        try:\n            print('x')\n        finally:\n            return 42\n    finally:\n        return 1\n\n\nIn [1]: a(0)\nx\nOut[1]: 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1267942,
                        "reputation": 12035,
                        "user_id": 1224827,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/hSBmJ.jpg?s=256",
                        "display_name": "Blairg23",
                        "link": "https://stackoverflow.com/users/1224827/blairg23"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1610660074,
                    "last_edit_date": 1610660074,
                    "creation_date": 1452795308,
                    "answer_id": 34796820,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>According to <a href=\"https://docs.python.org/2/tutorial/errors.html\" rel=\"nofollow noreferrer\">the documentation</a>, it is better to handle multiple exceptions through tuples or like this:</p>\n<pre><code>import sys\n\ntry:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(s.strip())\nexcept IOError as e:\n    print &quot;I/O error({0}): {1}&quot;.format(e.errno, e.strerror)\nexcept ValueError:\n    print &quot;Could not convert data to an integer.&quot;\nexcept:\n    print &quot;Unexpected error: &quot;, sys.exc_info()[0]\n    raise\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4607230,
                        "reputation": 616,
                        "user_id": 3736354,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/ATOom.jpg?s=256",
                        "display_name": "Steve Zelaznik",
                        "link": "https://stackoverflow.com/users/3736354/steve-zelaznik"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1610660032,
                    "last_edit_date": 1610660032,
                    "creation_date": 1422889497,
                    "answer_id": 28280633,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I like to avoid raising a new exception while handling an old one.  It makes the error messages confusing to read.</p>\n<p>For example, in my code, I originally wrote</p>\n<pre><code>try:\n    return tuple.__getitem__(self, i)(key)\nexcept IndexError:\n    raise KeyError(key)\n</code></pre>\n<p>And I got this message.</p>\n<pre><code>&gt;&gt;&gt; During handling of above exception, another exception occurred.\n</code></pre>\n<p>I wanted this:</p>\n<pre><code>try:\n    return tuple.__getitem__(self, i)(key)\nexcept IndexError:\n    pass\nraise KeyError(key)\n</code></pre>\n<p>It doesn't affect how exceptions are handled.  In either block of code, a KeyError would have been caught.  This is merely an issue of getting style points.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1806685,
                        "reputation": 183,
                        "user_id": 1643661,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/6rjWc.png?s=256",
                        "display_name": "owobeid",
                        "link": "https://stackoverflow.com/users/1643661/owobeid"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1610659739,
                    "last_edit_date": 1610659739,
                    "creation_date": 1370821770,
                    "answer_id": 17015322,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I don't think it's a matter of being Pythonic or elegant. It's a matter of preventing exceptions as much as you can. Exceptions are meant to handle errors that might occur in code or events you have no control over.</p>\n<p>In this case, you have full control when checking if an item is an attribute or in a dictionary, so avoid nested exceptions and stick with your second attempt.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 143145,
                        "reputation": 2274,
                        "user_id": 351295,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/547fb6f0a82f79a66ec7661f3b7fa657?s=256&d=identicon&r=PG",
                        "display_name": "Bruno Penteado",
                        "link": "https://stackoverflow.com/users/351295/bruno-penteado"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1610659679,
                    "last_edit_date": 1610659679,
                    "creation_date": 1370821571,
                    "answer_id": 17015298,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>While in Java it's indeed a bad practice to use exceptions for flow control (mainly because exceptions force the JVM to gather resources (<a href=\"https://stackoverflow.com/questions/6092992/why-is-it-easier-to-ask-forgiveness-than-permission-in-python-but-not-in-java\">more here</a>)), in Python you have two important principles: <a href=\"http://docs.python.org/2/glossary.html#term-duck-typing\" rel=\"noreferrer\" title=\"If it looks like a duck and quacks like a duck, it must be a duck.\">duck typing</a> and <a href=\"http://docs.python.org/2/glossary.html#term-eafp\" rel=\"noreferrer\" title=\"Easier to ask for forgiveness than permission\">EAFP</a>. This basically means that you are encouraged to try using an object the way you think it would work, and handle when things are not like that.</p>\n<p>In summary, the only problem would be your code getting too much indented. If you feel like it, try to simplify some of the nestings, like <a href=\"https://stackoverflow.com/users/324389/lqc\">lqc</a> suggested in <a href=\"https://stackoverflow.com/a/17015303/4575793\">the suggested answer above</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1610656188,
                    "last_edit_date": 1610656188,
                    "creation_date": 1370821237,
                    "answer_id": 17015252,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python it is <a href=\"http://docs.python.org/3/glossary.html#term-eafp\" rel=\"nofollow noreferrer\">easier to ask for forgiveness than permission</a>. Don't sweat the nested exception handling.</p>\n<p>(Besides, <code>has*</code> almost always uses exceptions under the cover anyway.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1530005,
                        "reputation": 250906,
                        "user_id": 1427416,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/QWHKg.png?s=256",
                        "display_name": "BrenBarn",
                        "link": "https://stackoverflow.com/users/1427416/brenbarn"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1370821978,
                    "last_edit_date": 1370821978,
                    "creation_date": 1370821559,
                    "answer_id": 17015295,
                    "question_id": 17015230,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For your specific example, you don't actually need to nest them.  If the expression in the <code>try</code> block succeeds, the function will return, so any code after the whole try/except block will only be run if the first attempt fails.  So you can just do:</p>\n\n<pre><code>def __getattribute__(self, item):\n    try:\n        return object.__getattribute__(item)\n    except AttributeError:\n        pass\n    # execution only reaches here when try block raised AttributeError\n    try:\n        return self.dict[item]\n    except KeyError:\n        print \"The object doesn't have such attribute\"\n</code></pre>\n\n<p>Nesting them isn't bad, but I feel like leaving it flat makes the structure more clear: you're sequentially trying a series of things and returning the first one that works.</p>\n\n<p>Incidentally, you might want to think about whether you really want to use <code>__getattribute__</code> instead of <code>__getattr__</code> here.  Using <code>__getattr__</code> will simplify things because you'll know that the normal attribute lookup process has already failed.</p>\n"
                }
            ]
        },
        {
            "13590976": [
                {
                    "owner": {
                        "account_id": 4312684,
                        "reputation": 183,
                        "user_id": 3523376,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0d658f67cdac29c1c5335eb27eafc815?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Qin Chen",
                        "link": "https://stackoverflow.com/users/3523376/qin-chen"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1442669393,
                    "last_edit_date": 1442669393,
                    "creation_date": 1401712355,
                    "answer_id": 23994661,
                    "question_id": 13590976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Instead of <strong>ffmpeg</strong>, you might want to use <strong>avconv</strong></p>\n\n<pre><code>avconv -f image2 -i figMatplotlib%d.png -r 76 -s 800x600 foo.avi\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 231940,
                        "reputation": 92469,
                        "user_id": 496445,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/db00d7b4388686c6d280e8f0578c7e39?s=256&d=identicon&r=PG",
                        "display_name": "jdi",
                        "link": "https://stackoverflow.com/users/496445/jdi"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1354043989,
                    "creation_date": 1354043989,
                    "answer_id": 13591474,
                    "question_id": 13590976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you really need a scripted python solution, you can look into using <a href=\"http://www.pythonware.com/products/pil/\">PIL</a></p>\n\n<p>But if you just want to easily convert a sequence of png images to a movie, you can simply use ffmpeg:</p>\n\n<pre><code>ffmpeg -f image2 -r 1/5 -i image%05d.png -vcodec mpeg4 -y movie.mp4\n</code></pre>\n\n<p>This command takes images with 5 digit padding (image00001.png) and compresses them into an mpeg4 quicktime, at a rate of holding each frame for 5 seconds. You could do a different fps if your images are greater: <code>-r 24</code> (24 frames per second)</p>\n"
                }
            ]
        },
        {
            "803265": [
                {
                    "owner": {
                        "account_id": 420026,
                        "reputation": 98544,
                        "user_id": 797495,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/BKD7l.jpg?s=256",
                        "display_name": "Pedro Lobito",
                        "link": "https://stackoverflow.com/users/797495/pedro-lobito"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1685551696,
                    "creation_date": 1685551696,
                    "answer_id": 76375734,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Late answer, but the following works for Python3:</p>\n<pre><code>import subprocess\nimport sys\n\nprocess = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\nwhile True:\n    out = process.stdout.read(1)\n    if process.poll() is not None:\n        break\n    if out != '':\n        sys.stdout.buffer.write(out)\n        sys.stdout.flush()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1817229,
                        "reputation": 2357,
                        "user_id": 1652085,
                        "user_type": "registered",
                        "accept_rate": 27,
                        "profile_image": "https://i.sstatic.net/ahOT2.jpg?s=256",
                        "display_name": "schirrmacher",
                        "link": "https://stackoverflow.com/users/1652085/schirrmacher"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1677753571,
                    "creation_date": 1677753571,
                    "answer_id": 75614299,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is my solution:</p>\n<pre><code>process = subprocess.Popen(command, stdout=PIPE, stderr=PIPE)\n\nerror_output = &quot;&quot;\n\nwhile True:\n\n    # The empty string is important to fulfill the exit condition (see below)\n    stdout_line = &quot;&quot;\n    if process.stdout:\n        stdout = process.stdout.readline()\n        if stdout:\n            stdout_line = stdout.decode(&quot;utf-8&quot;)\n            log.debug(stdout_line)\n\n    # The empty string is important to fulfill the exit condition (see below)\n    stderr_line = &quot;&quot;\n    if process.stderr:\n        stderr = process.stderr.readline()\n        if stderr:\n            stderr_line = stderr.decode(&quot;utf-8&quot;)\n            error_output += stderr_line\n            log.debug(stderr_line)\n\n    # It might be the case that the process is finished but reading the\n    # output is not finished. This is why we check both conditions:\n    # Condition for readline:\n    #   https://docs.python.org/3.6/tutorial/inputoutput.html#methods-of-file-objects\n    # Condition for poll:\n    #   https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll\n    if stdout_line == &quot;&quot; and stderr_line == &quot;&quot; and process.poll() != None:\n        break\n\nif process.returncode != 0:\n    raise Exception(error_output)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19390140,
                        "reputation": 89,
                        "user_id": 14179001,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d86e074cd83a7fd83e2691a98a5f5020?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Scott Shambarger",
                        "link": "https://stackoverflow.com/users/14179001/scott-shambarger"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1674242076,
                    "last_edit_date": 1674242076,
                    "creation_date": 1674064123,
                    "answer_id": 75163285,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>These are all great examples, but I've found they either (a) handle partial lines (eg &quot;Are you sure (Y/n):&quot;) but are really slow or b) are quick but hang on partial lines.</p>\n<p>I've worked on the following which:</p>\n<ul>\n<li>provides real-time output for both stdout and stderr to their respective streams</li>\n<li>is extremely fast as it works with stream buffering</li>\n<li>allows for using timeouts as it never blocks on read()</li>\n<li>efficiently saves stdout and stderr independently</li>\n<li>handles text encoding (though easily adaptable to binary streams)</li>\n<li>works on Python 3.6+</li>\n</ul>\n<pre class=\"lang-py prettyprint-override\"><code>import os\nimport subprocess\nimport sys\nimport selectors\nimport io\n\ndef run_command(command: str) -&gt; (int, str):\n\n    proc = subprocess.Popen(\n        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n    )\n\n    sel = selectors.DefaultSelector()\n    for fobj in [ proc.stdout, proc.stderr ]:\n        os.set_blocking(fobj.fileno(), False)\n        sel.register(fobj, selectors.EVENT_READ)\n\n    out=io.StringIO()\n    err=io.StringIO()\n\n    # loop until all descriptors removed\n    while len(sel.get_map()) &gt; 0:\n        events = sel.select()\n        if len(events) == 0:\n            # timeout or signal, kill to prevent wait hanging\n            proc.terminate()\n            break\n        for key, _ in events:\n            # read all available data\n            buf = key.fileobj.read().decode(errors='ignore')\n            if buf == '':\n                sel.unregister(key.fileobj)\n            elif key.fileobj == proc.stdout:\n                sys.stdout.write(buf)\n                sys.stdout.flush()\n                out.write(buf)\n            elif key.fileobj == proc.stderr:\n                sys.stderr.write(buf)\n                sys.stderr.flush()\n                err.write(buf)\n\n    sel.close()\n    proc.wait()\n    if proc.returncode != 0:\n        return (proc.returncode, err.getvalue())\n    return (0, out.getvalue())\n</code></pre>\n<p>I didn't include the timeout logic (as the subject is real-time output), but it's simple to add them to select()/wait() and no longer worry about infinite hangs.</p>\n<p>I've timed <code>cat '25MB-file'</code> and compared to the <code>.read(1)</code> solutions, it's roughly 300 times faster.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2242450,
                        "reputation": 4813,
                        "user_id": 1976597,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/4ca148e0f69fad2ea48e281d58b74e46?s=256&d=identicon&r=PG",
                        "display_name": "David Gilbertson",
                        "link": "https://stackoverflow.com/users/1976597/david-gilbertson"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1663134288,
                    "creation_date": 1663134288,
                    "answer_id": 73712019,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yet another answer! I had the following requirements:</p>\n<ul>\n<li>Run some command and print the output to stdout as though the user ran it</li>\n<li>Display to the user any prompts from the command. E.g. <code>pip uninstall numpy</code> will prompt with <code>... Proceed (Y/n)?</code> (which does not end in a newline)</li>\n<li>Capture the output (that the user saw) as a string</li>\n</ul>\n<p>This worked for me (only tested in Python 3.10 on Windows):</p>\n<pre class=\"lang-py prettyprint-override\"><code>def run(*args: list[str]) -&gt; str:\n    proc = subprocess.Popen(\n        *args,\n        text=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n    )\n\n    result = &quot;&quot;\n\n    while proc.poll() is None:\n        output = proc.stdout.read(1)\n\n        if output:\n            sys.stdout.write(output)\n            sys.stdout.flush()\n            result += output\n\n    return result\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13316087,
                        "reputation": 459,
                        "user_id": 12887070,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8851a9f8c13fd2f8ea43f33141515517?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "perry_the_python",
                        "link": "https://stackoverflow.com/users/12887070/perry-the-python"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1646423815,
                    "creation_date": 1646423815,
                    "answer_id": 71356636,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is what worked for me:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import subprocess\nimport sys\n\ndef run_cmd_print_output_to_console_and_log_to_file(cmd, log_file_path):\n    make_file_if_not_exist(log_file_path)\n    logfile = open(log_file_path, 'w')\n\n    proc=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell = True)\n    for line in proc.stdout:\n        sys.stdout.write(line.decode(&quot;utf-8&quot;) )\n        print(line.decode(&quot;utf-8&quot;).strip(), file=logfile, flush=True)\n    proc.wait()\n\n    logfile.close()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6995375,
                        "reputation": 6213,
                        "user_id": 9038547,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/6b6537d7b0f3e79aac6aab3f67f099ab?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Deena",
                        "link": "https://stackoverflow.com/users/9038547/deena"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1639734164,
                    "last_edit_date": 1639734164,
                    "creation_date": 1470230927,
                    "answer_id": 38745040,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Found this &quot;plug-and-play&quot; function <a href=\"http://www.saltycrane.com/blog/2009/10/how-capture-stdout-in-real-time-python/\" rel=\"nofollow noreferrer\">here</a>. Worked like a charm!</p>\n<pre><code>import subprocess\n\ndef myrun(cmd):\n    &quot;&quot;&quot;from\n    http://blog.kagesenshi.org/2008/02/teeing-python-subprocesspopen-output.html\n    &quot;&quot;&quot;\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,\n                         stderr=subprocess.STDOUT)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        stdout.append(line)\n        print line,\n        if line == '' and p.poll() != None:\n            break\n    return ''.join(stdout)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9683709,
                        "reputation": 463,
                        "user_id": 7184343,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://lh6.googleusercontent.com/-U8X4Vln3Wvc/AAAAAAAAAAI/AAAAAAAAAEc/FhpvqMe8D6g/photo.jpg?sz=256",
                        "display_name": "Muhammad Abdullah",
                        "link": "https://stackoverflow.com/users/7184343/muhammad-abdullah"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1626507628,
                    "creation_date": 1626507628,
                    "answer_id": 68418453,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>def run_command(command):\nprocess = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE)\nwhile True:\n    output = process.stdout.readline()\n    if output == '' and process.poll() is not None:\n        break\n    if output:\n        print(output.strip())\nrc = process.poll()\nreturn rc\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8866,
                        "reputation": 60464,
                        "user_id": 16148,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/XTzm1.jpg?s=256",
                        "display_name": "Corey Goldberg",
                        "link": "https://stackoverflow.com/users/16148/corey-goldberg"
                    },
                    "is_accepted": false,
                    "score": 42,
                    "last_activity_date": 1611688557,
                    "last_edit_date": 1611688557,
                    "creation_date": 1308586431,
                    "answer_id": 6414278,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>By setting the buffer size to 1, you essentially force the process to not buffer the output.</p>\n<pre><code>p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)\nfor line in iter(p.stdout.readline, b''):\n    print line,\np.stdout.close()\np.wait()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6301070,
                        "reputation": 147,
                        "user_id": 4895710,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/b6c0236ca899f5c99066d01998858d77?s=256&d=identicon&r=PG",
                        "display_name": "sairam",
                        "link": "https://stackoverflow.com/users/4895710/sairam"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1602750514,
                    "last_edit_date": 1602750514,
                    "creation_date": 1431519970,
                    "answer_id": 30214720,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Real Time Output Issue resolved:\nI encountered a similar issue in Python, while capturing the real time output from C program.  I added <code>fflush(stdout);</code> in my C code. It worked for me. Here is the code.</p>\n<p>C program:</p>\n<pre><code>#include &lt;stdio.h&gt;\nvoid main()\n{\n    int count = 1;\n    while (1)\n    {\n        printf(&quot; Count  %d\\n&quot;, count++);\n        fflush(stdout);\n        sleep(1);\n    }\n}\n</code></pre>\n<p>Python program:</p>\n<pre><code>#!/usr/bin/python\n\nimport os, sys\nimport subprocess\n\n\nprocExe = subprocess.Popen(&quot;.//count&quot;, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n\nwhile procExe.poll() is None:\n    line = procExe.stdout.readline()\n    print(&quot;Print:&quot; + line)\n</code></pre>\n<p>Output:</p>\n<pre><code>Print: Count  1\nPrint: Count  2\nPrint: Count  3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 138937,
                        "reputation": 1028,
                        "user_id": 344198,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad6f40e3a5e62ff3e31fb0f38dcfab97?s=256&d=identicon&r=PG",
                        "display_name": "Gabe",
                        "link": "https://stackoverflow.com/users/344198/gabe"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1602750376,
                    "last_edit_date": 1602750376,
                    "creation_date": 1278425362,
                    "answer_id": 3186931,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using <a href=\"http://www.noah.org/wiki/Pexpect\" rel=\"nofollow noreferrer\">pexpect</a> with non-blocking readlines will resolve this problem. It stems from the fact that pipes are buffered, and so your app's output is getting buffered by the pipe, therefore you can't get to that output until the buffer fills or the process dies.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 232343,
                        "reputation": 952,
                        "user_id": 497121,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://www.gravatar.com/avatar/7ffecc813fcf64fad5cec4e987d5435b?s=256&d=identicon&r=PG",
                        "display_name": "timger",
                        "link": "https://stackoverflow.com/users/497121/timger"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1596946895,
                    "creation_date": 1596946895,
                    "answer_id": 63322429,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>if you just want to forward the log to console in realtime</p>\n<p>Below code will work for both</p>\n<pre><code> p = subprocess.Popen(cmd,\n                         shell=True,\n                         cwd=work_dir,\n                         bufsize=1,\n                         stdin=subprocess.PIPE,\n                         stderr=sys.stderr,\n                         stdout=sys.stdout)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17703429,
                        "reputation": 196,
                        "user_id": 12852603,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/23fPN.jpg?s=256",
                        "display_name": "Djai",
                        "link": "https://stackoverflow.com/users/12852603/djai"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1585462993,
                    "creation_date": 1585462993,
                    "answer_id": 60910847,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Few answers suggesting python 3.x or pthon 2.x , Below code will work for both.</p>\n\n<pre><code> p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        if not isinstance(line, (str)):\n            line = line.decode('utf-8')\n        stdout.append(line)\n        print (line)\n        if (line == '' and p.poll() != None):\n            break\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11399254,
                        "reputation": 1628,
                        "user_id": 8356662,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bd698ade87f360b7c6eee0980c7d21e4?s=256&d=identicon&r=PG",
                        "display_name": "pavelicii",
                        "link": "https://stackoverflow.com/users/8356662/pavelicii"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1568710910,
                    "last_edit_date": 1568710910,
                    "creation_date": 1568710178,
                    "answer_id": 57970619,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.x the process might hang because the output is a byte array instead of a string. Make sure you decode it into a string. </p>\n\n<p>Starting from Python 3.6 you can do it using the parameter <code>encoding</code> in <a href=\"https://docs.python.org/3/library/subprocess.html#popen-constructor\" rel=\"noreferrer\">Popen Constructor</a>. The complete example:</p>\n\n<pre><code>process = subprocess.Popen(\n    'my_command',\n    stdout=subprocess.PIPE,\n    stderr=subprocess.STDOUT,\n    shell=True,\n    encoding='utf-8',\n    errors='replace'\n)\n\nwhile True:\n    realtime_output = process.stdout.readline()\n\n    if realtime_output == '' and process.poll() is not None:\n        break\n\n    if realtime_output:\n        print(realtime_output.strip(), flush=True)\n</code></pre>\n\n<p>Note that this code <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.STDOUT\" rel=\"noreferrer\">redirects</a> <code>stderr</code> to <code>stdout</code> and <a href=\"https://docs.python.org/3/library/codecs.html#error-handlers\" rel=\"noreferrer\">handles output errors</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14259093,
                        "reputation": 9,
                        "user_id": 10300458,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1aac85fb836fcec52242ec12eccc457e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dan",
                        "link": "https://stackoverflow.com/users/10300458/dan"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1558903568,
                    "creation_date": 1558903568,
                    "answer_id": 56317226,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>(This solution has been tested with Python 2.7.15)<br>\nYou just need to sys.stdout.flush() after each line read/write:</p>\n\n<pre><code>while proc.poll() is None:\n    line = proc.stdout.readline()\n    sys.stdout.write(line)\n    # or print(line.strip()), you still need to force the flush.\n    sys.stdout.flush()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1667355,
                        "reputation": 1003,
                        "user_id": 1534504,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/cRD0g.jpg?s=256",
                        "display_name": "Pablo",
                        "link": "https://stackoverflow.com/users/1534504/pablo"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1542298889,
                    "creation_date": 1542298889,
                    "answer_id": 53323746,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://kevinmccarthy.org/2016/07/25/streaming-subprocess-stdin-and-stdout-with-asyncio-in-python/\" rel=\"noreferrer\">Streaming subprocess stdin and stdout with asyncio in Python</a> blog post by <a href=\"https://kevinmccarthy.org/author/kevin/\" rel=\"noreferrer\">Kevin McCarthy</a> shows how to do it with asyncio:</p>\n\n<pre><code>import asyncio\nfrom asyncio.subprocess import PIPE\nfrom asyncio import create_subprocess_exec\n\n\nasync def _read_stream(stream, callback):\n    while True:\n        line = await stream.readline()\n        if line:\n            callback(line)\n        else:\n            break\n\n\nasync def run(command):\n    process = await create_subprocess_exec(\n        *command, stdout=PIPE, stderr=PIPE\n    )\n\n    await asyncio.wait(\n        [\n            _read_stream(\n                process.stdout,\n                lambda x: print(\n                    \"STDOUT: {}\".format(x.decode(\"UTF8\"))\n                ),\n            ),\n            _read_stream(\n                process.stderr,\n                lambda x: print(\n                    \"STDERR: {}\".format(x.decode(\"UTF8\"))\n                ),\n            ),\n        ]\n    )\n\n    await process.wait()\n\n\nasync def main():\n    await run(\"docker build -t my-docker-image:latest .\")\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 45260,
                        "reputation": 67902,
                        "user_id": 133374,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/8337eb6c24313a1e0e81ecae24f20406?s=256&d=identicon&r=PG",
                        "display_name": "Albert",
                        "link": "https://stackoverflow.com/users/133374/albert"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1539767651,
                    "creation_date": 1539767651,
                    "answer_id": 52851256,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Depending on the use case, you might also want to disable the buffering in the subprocess itself.</p>\n\n<p>If the subprocess will be a Python process, you could do this before the call:</p>\n\n<pre><code>os.environ[\"PYTHONUNBUFFERED\"] = \"1\"\n</code></pre>\n\n<p>Or alternatively pass this in the <code>env</code> argument to <code>Popen</code>.</p>\n\n<p>Otherwise, if you are on Linux/Unix, you can use the <code>stdbuf</code> tool. E.g. like:</p>\n\n<pre><code>cmd = [\"stdbuf\", \"-oL\"] + cmd\n</code></pre>\n\n<p>See also <a href=\"https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe/\">here</a> about <code>stdbuf</code> or other options.</p>\n\n<p>(See also <a href=\"https://stackoverflow.com/a/52851238/133374\">here</a> for the same answer.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13719,
                        "reputation": 10557,
                        "user_id": 27731,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dcfa1c418931de41e55e63b46b1abad8?s=256&d=identicon&r=PG",
                        "display_name": "Dave",
                        "link": "https://stackoverflow.com/users/27731/dave"
                    },
                    "is_accepted": true,
                    "score": 95,
                    "last_activity_date": 1535576365,
                    "last_edit_date": 1535576365,
                    "creation_date": 1241026013,
                    "answer_id": 803421,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I tried this, and for some reason while the code</p>\n\n<pre><code>for line in p.stdout:\n  ...\n</code></pre>\n\n<p>buffers aggressively, the variant</p>\n\n<pre><code>while True:\n  line = p.stdout.readline()\n  if not line: break\n  ...\n</code></pre>\n\n<p>does not. Apparently this is a known bug: <a href=\"http://bugs.python.org/issue3907\" rel=\"noreferrer\">http://bugs.python.org/issue3907</a> (The issue is now \"Closed\" as of Aug 29, 2018)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 147587,
                        "reputation": 5419,
                        "user_id": 358804,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/5e6ceef905d14ade228ea22c445d57bc?s=256&d=identicon&r=PG",
                        "display_name": "Aidan Feldman",
                        "link": "https://stackoverflow.com/users/358804/aidan-feldman"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1519201026,
                    "creation_date": 1519201026,
                    "answer_id": 48900986,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can direct the subprocess output to the streams directly. Simplified example:</p>\n\n<pre><code>subprocess.run(['ls'], stderr=sys.stderr, stdout=sys.stdout)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7034970,
                        "reputation": 79,
                        "user_id": 5389435,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/66063def4d0fd6c52c4ca14f6e94b761?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Badslacks",
                        "link": "https://stackoverflow.com/users/5389435/badslacks"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1514383864,
                    "creation_date": 1514383864,
                    "answer_id": 47993624,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the basic skeleton that I always use for this. It makes it easy to implement timeouts and is able to deal with inevitable hanging processes.</p>\n\n<pre><code>import subprocess\nimport threading\nimport Queue\n\ndef t_read_stdout(process, queue):\n    \"\"\"Read from stdout\"\"\"\n\n    for output in iter(process.stdout.readline, b''):\n        queue.put(output)\n\n    return\n\nprocess = subprocess.Popen(['dir'],\n                           stdout=subprocess.PIPE,\n                           stderr=subprocess.STDOUT,\n                           bufsize=1,\n                           cwd='C:\\\\',\n                           shell=True)\n\nqueue = Queue.Queue()\nt_stdout = threading.Thread(target=t_read_stdout, args=(process, queue))\nt_stdout.daemon = True\nt_stdout.start()\n\nwhile process.poll() is None or not queue.empty():\n    try:\n        output = queue.get(timeout=.5)\n\n    except Queue.Empty:\n        continue\n\n    if not output:\n        continue\n\n    print(output),\n\nt_stdout.join()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11170951,
                        "reputation": 21,
                        "user_id": 8197934,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4502d5c08a0aaee82a7b814c470fd477?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "rhyno183",
                        "link": "https://stackoverflow.com/users/8197934/rhyno183"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1498114422,
                    "last_edit_date": 1498114422,
                    "creation_date": 1498112081,
                    "answer_id": 44691499,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may use an iterator over each byte in the output of the subprocess. This allows inline update (lines ending with '\\r' overwrite previous output line) from the subprocess:</p>\n\n<pre><code>from subprocess import PIPE, Popen\n\ncommand = [\"my_command\", \"-my_arg\"]\n\n# Open pipe to subprocess\nsubprocess = Popen(command, stdout=PIPE, stderr=PIPE)\n\n\n# read each byte of subprocess\nwhile subprocess.poll() is None:\n    for c in iter(lambda: subprocess.stdout.read(1) if subprocess.poll() is None else {}, b''):\n        c = c.decode('ascii')\n        sys.stdout.write(c)\nsys.stdout.flush()\n\nif subprocess.returncode != 0:\n    raise Exception(\"The subprocess did not terminate correctly.\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2571185,
                        "reputation": 47,
                        "user_id": 2229866,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0525cbd02934f4f4d8680fd1dbe96fb4?s=256&d=identicon&r=PG",
                        "display_name": "Jason Hedlund",
                        "link": "https://stackoverflow.com/users/2229866/jason-hedlund"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1390504461,
                    "creation_date": 1390504461,
                    "answer_id": 21317334,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I used this solution to get realtime output on a subprocess. This loop will stop as soon as the process completes leaving out a need for a break statement or possible infinite loop. </p>\n\n<pre><code>sub_process = subprocess.Popen(my_command, close_fds=True, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nwhile sub_process.poll() is None:\n    out = sub_process.stdout.read(1)\n    sys.stdout.write(out)\n    sys.stdout.flush()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1780699,
                        "reputation": 398,
                        "user_id": 1623530,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ea55ed01039f140bd95fcd36294adc38?s=256&d=identicon&r=PG",
                        "display_name": "Andres Restrepo",
                        "link": "https://stackoverflow.com/users/1623530/andres-restrepo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1371585260,
                    "last_edit_date": 1371585260,
                    "creation_date": 1362728010,
                    "answer_id": 15288921,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Complete solution:</p>\n\n<pre><code>import contextlib\nimport subprocess\n\n# Unix, Windows and old Macintosh end-of-line\nnewlines = ['\\n', '\\r\\n', '\\r']\ndef unbuffered(proc, stream='stdout'):\n    stream = getattr(proc, stream)\n    with contextlib.closing(stream):\n        while True:\n            out = []\n            last = stream.read(1)\n            # Don't loop forever\n            if last == '' and proc.poll() is not None:\n                break\n            while last not in newlines:\n                # Don't loop forever\n                if last == '' and proc.poll() is not None:\n                    break\n                out.append(last)\n                last = stream.read(1)\n            out = ''.join(out)\n            yield out\n\ndef example():\n    cmd = ['ls', '-l', '/']\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        # Make all end-of-lines '\\n'\n        universal_newlines=True,\n    )\n    for line in unbuffered(proc):\n        print line\n\nexample()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 34591,
                        "reputation": 114723,
                        "user_id": 97828,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=256&d=identicon&r=PG",
                        "display_name": "Nadia Alramli",
                        "link": "https://stackoverflow.com/users/97828/nadia-alramli"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1241027720,
                    "last_edit_date": 1241027720,
                    "creation_date": 1241025670,
                    "answer_id": 803396,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can try this:</p>\n\n<pre><code>import subprocess\nimport sys\n\nprocess = subprocess.Popen(\n    cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n)\n\nwhile True:\n    out = process.stdout.read(1)\n    if out == '' and process.poll() != None:\n        break\n    if out != '':\n        sys.stdout.write(out)\n        sys.stdout.flush()\n</code></pre>\n\n<p>If you use readline instead of read, there will be some cases where the input message is not printed. Try it with a command the requires an inline input and see for yourself.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1273,
                        "reputation": 192421,
                        "user_id": 1694,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=256&d=identicon&r=PG",
                        "display_name": "Eli Courtwright",
                        "link": "https://stackoverflow.com/users/1694/eli-courtwright"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1241025849,
                    "creation_date": 1241025849,
                    "answer_id": 803408,
                    "question_id": 803265,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I ran into the same problem awhile back.  My solution was to ditch iterating for the <code>read</code> method, which will return immediately even if your subprocess isn't finished executing, etc.</p>\n"
                }
            ]
        },
        {
            "14057924": [
                {
                    "owner": {
                        "account_id": 1071094,
                        "reputation": 30117,
                        "user_id": 1070354,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/56ca246e6d24b9a09114ff4542bcc2b1?s=256&d=identicon&r=PG",
                        "display_name": "favoretti",
                        "link": "https://stackoverflow.com/users/1070354/favoretti"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1356626224,
                    "creation_date": 1356626224,
                    "answer_id": 14057986,
                    "question_id": 14057924,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you press <code>Ctrl-X</code>, for exit, it will ask you whether you want to save the file.\n<code>Ctrl-O</code> is for saving file without exiting the editor.</p>\n\n<p><code>Ctrl-G</code> is for help on key combinations.</p>\n"
                }
            ]
        },
        {
            "24814024": [
                {
                    "owner": {
                        "account_id": 8174980,
                        "reputation": 101,
                        "user_id": 6467726,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-yEkjTox5XxM/AAAAAAAAAAI/AAAAAAAAAKs/vsG56frYKcs/photo.jpg?sz=256",
                        "display_name": "Alceu Rodrigues de Freitas Jun",
                        "link": "https://stackoverflow.com/users/6467726/alceu-rodrigues-de-freitas-jun"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1491260341,
                    "creation_date": 1491260341,
                    "answer_id": 43195665,
                    "question_id": 24814024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you can't define a default value and want to do something else (or just omit the entry):</p>\n\n<pre><code>if key in dict:\n    rank = dict[key]\nelse:\n    # do something or just skip the else block entirely\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4336192,
                        "reputation": 1921,
                        "user_id": 3540618,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/nb0i0.png?s=256",
                        "display_name": "Stack of Pancakes",
                        "link": "https://stackoverflow.com/users/3540618/stack-of-pancakes"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1454102010,
                    "last_edit_date": 1454102010,
                    "creation_date": 1405633480,
                    "answer_id": 24814077,
                    "question_id": 24814024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <code>your_dict.get(key, \"default value\")</code> instead of directly referencing a key.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3464965,
                        "reputation": 2246,
                        "user_id": 2900807,
                        "user_type": "registered",
                        "accept_rate": 54,
                        "profile_image": "https://www.gravatar.com/avatar/8b6ce567b2eb5d317e489fea5676e8fd?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Serendipity",
                        "link": "https://stackoverflow.com/users/2900807/serendipity"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1423684312,
                    "last_edit_date": 1495535479,
                    "creation_date": 1423684312,
                    "answer_id": 28463228,
                    "question_id": 24814024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Don't use the \"default\" argument name. For example, if we want 1.0 as default value,</p>\n\n<pre><code>rank = dict.get(key, 1.0)\n</code></pre>\n\n<p>For more details:\n<a href=\"https://stackoverflow.com/questions/24463202/typeerror-get-takes-no-keyword-arguments\">TypeError: get() takes no keyword arguments</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 334798,
                        "reputation": 2370,
                        "user_id": 1908482,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/715b6b6afa0d806eb3b163a80ded4faf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Eugen",
                        "link": "https://stackoverflow.com/users/1908482/eugen"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1405633515,
                    "creation_date": 1405633515,
                    "answer_id": 24814083,
                    "question_id": 24814024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could use syntax like this: <code>product.get(\"your field\", \"default value\")</code></p>\n"
                }
            ]
        },
        {
            "36757965": [
                {
                    "owner": {
                        "account_id": 7690257,
                        "reputation": 612,
                        "user_id": 5826823,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7a74bcaa5f8fdd911047917f00cc936f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SSung2710",
                        "link": "https://stackoverflow.com/users/5826823/ssung2710"
                    },
                    "is_accepted": true,
                    "score": 46,
                    "last_activity_date": 1542555522,
                    "last_edit_date": 1542555522,
                    "creation_date": 1461202784,
                    "answer_id": 36758098,
                    "question_id": 36757965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would use </p>\n\n<pre><code>def example(arg1, arg2, arg3):\n     if arg1 == 1 and arg2 == 2 and arg3 == 3:\n          print(\"Example Text\")\n</code></pre>\n\n<p>The <code>and</code> operator is identical to the logic gate with the same name; it will return 1 if and only if all of the inputs are 1. You can also use <code>or</code> operator if you want that logic gate.</p>\n\n<p>EDIT: Actually, the code provided in your post works fine with me. I don't see any problems with that. I think that this might be a problem with your Python, not the actual language.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152248,
                        "reputation": 1495,
                        "user_id": 366640,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/f6aae435ec485fd8c249cec75ed3577b?s=256&d=identicon&r=PG",
                        "display_name": "burkesquires",
                        "link": "https://stackoverflow.com/users/366640/burkesquires"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1527946024,
                    "last_edit_date": 1527946024,
                    "creation_date": 1527940461,
                    "answer_id": 50656647,
                    "question_id": 36757965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Darian Moody has a nice solution to this challenge in his <a href=\"https://www.djm.org.uk/posts/python-multiple-line-conditions-and-all-builtin/\" rel=\"noreferrer\">blog post</a>:</p>\n\n<pre><code>a = 1\nb = 2\nc = True\n\nrules = [a == 1,\n         b == 2,\n         c == True]\n\nif all(rules):\n    print(\"Success!\")\n</code></pre>\n\n<p>The all() method returns <code>True</code> when all elements in the given iterable are true. If not, it returns <code>False</code>.</p>\n\n<p>You can read a <em>little</em> more about it in the python docs <a href=\"https://docs.python.org/3.4/library/functions.html#all\" rel=\"noreferrer\">here</a> and more information and examples <a href=\"https://www.programiz.com/python-programming/methods/built-in/all\" rel=\"noreferrer\">here</a>.</p>\n\n<p>(I also answered the similar question with this info here - <a href=\"https://stackoverflow.com/questions/36757965/how-to-have-multiple-conditions-for-one-if-statement-in-python/50656647#50656647\">How to have multiple conditions for one if statement in python</a>)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12008956,
                        "reputation": 31,
                        "user_id": 8786376,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fb1c6c33b60804018f5ae356eda69725?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Elyria",
                        "link": "https://stackoverflow.com/users/8786376/elyria"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1508183065,
                    "creation_date": 1508183065,
                    "answer_id": 46777955,
                    "question_id": 36757965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Might be a bit odd or bad practice but this is one way of going about it.</p>\n\n<pre><code>(arg1, arg2, arg3) = (1, 2, 3)\n\nif (arg1 == 1)*(arg2 == 2)*(arg3 == 3):\n    print('Example.')\n</code></pre>\n\n<p>Anything multiplied by 0 == 0. If any of these conditions fail then it evaluates to false.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4255673,
                        "reputation": 701,
                        "user_id": 6845464,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/50535174d9fc7ee560500935d7b826c0?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "no nein",
                        "link": "https://stackoverflow.com/users/6845464/no-nein"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1500326239,
                    "creation_date": 1500326239,
                    "answer_id": 45153810,
                    "question_id": 36757965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I am a little late to the party but I thought I'd share a way of doing it, if you have identical types of conditions, i.e. checking if all, any or at given amount of A_1=A_2 and B_1=B_2, this can be done in the following way:</p>\n\n<pre><code>cond_list_1=[\"1\",\"2\",\"3\"]\ncond_list_2=[\"3\",\"2\",\"1\"]\nnr_conds=1\n\nif len([True for i, j in zip(cond_list_1, cond_list_2) if i == j])&gt;=nr_conds:\n    print(\"At least \" + str(nr_conds) + \" conditions are fullfilled\")\n\nif len([True for i, j in zip(cond_list_1, cond_list_2) if i == j])==len(cond_list_1):\n    print(\"All conditions are fullfilled\")\n</code></pre>\n\n<p>This means you can just change in the two initial lists, at least for me this makes it easier.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2155133,
                        "reputation": 172,
                        "user_id": 4801007,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/iV8cpNuj.png?s=256",
                        "display_name": "Christian Henry",
                        "link": "https://stackoverflow.com/users/4801007/christian-henry"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1461248774,
                    "last_edit_date": 1461248774,
                    "creation_date": 1461204217,
                    "answer_id": 36758318,
                    "question_id": 36757965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Assuming you're passing in strings rather than integers, try casting the arguments to integers:</p>\n\n<pre><code>def example(arg1, arg2, arg3):\n     if int(arg1) == 1 and int(arg2) == 2 and int(arg3) == 3:\n          print(\"Example Text\")\n</code></pre>\n\n<p>(Edited to emphasize I'm not asking for clarification; I was trying to be diplomatic in my answer. \ud83d\ude42)</p>\n"
                }
            ]
        },
        {
            "942543": [
                {
                    "owner": {
                        "account_id": 12165188,
                        "reputation": 1063,
                        "user_id": 10720618,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61df1351fd3cdf6d64859a548f852046?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "kym",
                        "link": "https://stackoverflow.com/users/10720618/kym"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1632688628,
                    "creation_date": 1632688628,
                    "answer_id": 69338766,
                    "question_id": 942543,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://stackoverflow.com/a/942551/10720618\">Ben Bank's answer</a> works well if  you want the combinations to be ordered lexicographically. However, if you want the combinations to be randomly ordered, here's a solution:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import random\nfrom math import comb\n\n\ndef cgen(i,n,k):\n    &quot;&quot;&quot;\n    returns the i-th combination of k numbers chosen from 0,1,...,n-1\n    \n    forked from: https://math.stackexchange.com/a/1227692\n    changed from 1-indexed to 0-indexed.\n    &quot;&quot;&quot;\n    # 1-index\n    i += 1\n    \n    c = []\n    r = i+0\n    j = 0\n    for s in range(1,k+1):\n        cs = j+1\n        while r-comb(n-cs,k-s)&gt;0:\n            r -= comb(n-cs,k-s)\n            cs += 1\n        c.append(cs-1)\n        j = cs\n    return c\n\n\ndef generate_random_combinations(n, k, shuffle=random.shuffle):\n    &quot;&quot;&quot;\n    Generate combinations in random order of k numbers chosen from 0,1,...,n-1.\n    \n    :param shuffle: Function to in-place shuffle the indices of the combinations. Use for seeding.\n    &quot;&quot;&quot;\n    total_combinations = comb(n, k)\n    combination_indices = list(range(total_combinations))\n    shuffle(combination_indices)\n    \n    for i in combination_indices:\n        yield cgen(i, n, k)\n</code></pre>\n<h3>Example Usage</h3>\n<p>For <code>N=100</code> and <code>k=4</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>gen_combos = generate_random_combinations(100, 4)\n\nfor i in range(3):\n    print(next(gen_combos))\n</code></pre>\n<p>results in:</p>\n<pre><code>[4, 9, 55, 79]\n[11, 49, 58, 64]\n[75, 82, 83, 91]\n</code></pre>\n<h3>Use Case</h3>\n<p>For my use case, I'm implementing an algorithm that's searching for a single (or a few) combination and halts when it finds a valid combination. On average, it traverses a very small subset of all possible combinations, so there's no need to build all possible combinations up front and then shuffle (the population size is too big to fit all combinations in memory, anyway).</p>\n<p>The randomness is crucial to finding a solution quickly because lexicographic ordering results in a single value in the population being included in all combinations until it's exhausted. For example, if we have <code>n=100</code> and <code>k=4</code>, then the results will be like:</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>index</th>\n<th>combination</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>(0, 1, 2, 3)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>(0, 1, 2, 4)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>(0, 1, 2, 5)</td>\n</tr>\n<tr>\n<td>...</td>\n<td></td>\n</tr>\n<tr>\n<td>156848</td>\n<td>(0, 97, 98, 99)</td>\n</tr>\n<tr>\n<td>156849</td>\n<td>(1, 2, 3, 4)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>If <code>0</code> is not part of a valid solution, then we will have searched 156849 combinations for no reason. Randomizing the order helps mitigate this issue (see example output above).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5807,
                        "reputation": 399210,
                        "user_id": 9530,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=256&d=identicon&r=PG",
                        "display_name": "Adam Rosenfield",
                        "link": "https://stackoverflow.com/users/9530/adam-rosenfield"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1561466891,
                    "last_edit_date": 1561466891,
                    "creation_date": 1243988983,
                    "answer_id": 942565,
                    "question_id": 942543,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you're just calling a function, you can't really do much better than:</p>\n\n<pre><code>for i in my_list:\n    for j in my_list:\n        foo(i, j)\n</code></pre>\n\n<p>If you want to collect a list of the results of calling the function, you can do:</p>\n\n<pre><code>[foo(i, j) for i in my_list for j in my_list]\n</code></pre>\n\n<p>which will return you a list of the result of applying <code>foo(i, j)</code> to each possible pair <code>(i, j)</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15967460,
                        "reputation": 11,
                        "user_id": 11522617,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-fq9nqrAMGt0/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfUwFgWV6Oh1nGcrwuULjj-XaQbMg/mo/photo.jpg?sz=256",
                        "display_name": "karan dave",
                        "link": "https://stackoverflow.com/users/11522617/karan-dave"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1559895285,
                    "last_edit_date": 1559895285,
                    "creation_date": 1559895206,
                    "answer_id": 56490455,
                    "question_id": 942543,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>my_list = [1,2,3,4]\n\npairs=[[x,y] for x in my_list for y in my_list]\nprint (pairs)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7655051,
                        "reputation": 8495,
                        "user_id": 5802289,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/tehnK.jpg?s=256",
                        "display_name": "J0ANMM",
                        "link": "https://stackoverflow.com/users/5802289/j0anmm"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1510915651,
                    "last_edit_date": 1510915651,
                    "creation_date": 1466342138,
                    "answer_id": 37907649,
                    "question_id": 942543,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I had a similar problem and found the solution <a href=\"http://www.wellho.net/resources/ex.php4?item=y104/tessapy\" rel=\"noreferrer\">here</a>. It works without having to import any module.</p>\n\n<p>Supposing a list like:</p>\n\n<pre><code>people = [\"Lisa\",\"Pam\",\"Phil\",\"John\"]\n</code></pre>\n\n<p>A simplified one-line solution would look like this.</p>\n\n<p><strong>All possible pairs</strong>, including duplicates:</p>\n\n<pre><code>result = [foo(p1, p2) for p1 in people for p2 in people]\n</code></pre>\n\n<p><strong>All possible pairs, excluding duplicates</strong>:</p>\n\n<pre><code>result = [foo(p1, p2) for p1 in people for p2 in people if p1 != p2]\n</code></pre>\n\n<p><strong>Unique pairs</strong>, where order is irrelevant:</p>\n\n<pre><code>result = [foo(people[p1], people[p2]) for p1 in range(len(people)) for p2 in range(p1+1,len(people))]\n</code></pre>\n\n<hr>\n\n<p>In case you don't want to operate but just to get the pairs, removing the function <code>foo</code> and using just a tuple would be enough.</p>\n\n<p><strong>All possible pairs</strong>, including duplicates:</p>\n\n<pre><code>list_of_pairs = [(p1, p2) for p1 in people for p2 in people]\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>('Lisa', 'Lisa')\n('Lisa', 'Pam')\n('Lisa', 'Phil')\n('Lisa', 'John')\n('Pam', 'Lisa')\n('Pam', 'Pam')\n('Pam', 'Phil')\n('Pam', 'John')\n('Phil', 'Lisa')\n('Phil', 'Pam')\n('Phil', 'Phil')\n('Phil', 'John')\n('John', 'Lisa')\n('John', 'Pam')\n('John', 'Phil')\n('John', 'John')\n</code></pre>\n\n<p><strong>All possible pairs, excluding duplicates</strong>:</p>\n\n<pre><code>list_of_pairs = [(p1, p2) for p1 in people for p2 in people if p1 != p2]\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>('Lisa', 'Pam')\n('Lisa', 'Phil')\n('Lisa', 'John')\n('Pam', 'Lisa')\n('Pam', 'Phil')\n('Pam', 'John')\n('Phil', 'Lisa')\n('Phil', 'Pam')\n('Phil', 'John')\n('John', 'Lisa')\n('John', 'Pam')\n('John', 'Phil')\n</code></pre>\n\n<p><strong>Unique pairs</strong>, where order is irrelevant:</p>\n\n<pre><code>list_of_pairs = [(people[p1], people[p2]) for p1 in range(len(people)) for p2 in range(p1+1,len(people))]\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>('Lisa', 'Pam')\n('Lisa', 'Phil')\n('Lisa', 'John')\n('Pam', 'Phil')\n('Pam', 'John')\n('Phil', 'John')\n</code></pre>\n\n<p><em>Edit: After the rework to simplify this solution, I realised it is the same approach than Adam Rosenfield. I hope the larger explanation helps some to understand it better.</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 19699,
                        "reputation": 56432,
                        "user_id": 46387,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/f21bda50069eba70879c3204a6788315?s=256&d=identicon&r=PG",
                        "display_name": "Ben Blank",
                        "link": "https://stackoverflow.com/users/46387/ben-blank"
                    },
                    "is_accepted": true,
                    "score": 298,
                    "last_activity_date": 1244052725,
                    "last_edit_date": 1244052725,
                    "creation_date": 1243988683,
                    "answer_id": 942551,
                    "question_id": 942543,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Check out <a href=\"http://docs.python.org/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>product()</code></a> in the <code>itertools</code> module.  It does exactly what you describe.</p>\n\n<pre><code>import itertools\n\nmy_list = [1,2,3,4]\nfor pair in itertools.product(my_list, repeat=2):\n    foo(*pair)\n</code></pre>\n\n<p>This is equivalent to:</p>\n\n<pre><code>my_list = [1,2,3,4]\nfor x in my_list:\n    for y in my_list:\n        foo(x, y)\n</code></pre>\n\n<p><strong>Edit:</strong> There are two very similar functions as well, <a href=\"http://docs.python.org/library/itertools.html#itertools.permutations\" rel=\"noreferrer\"><code>permutations()</code></a> and <a href=\"http://docs.python.org/library/itertools.html#itertools.combinations\" rel=\"noreferrer\"><code>combinations()</code></a>.  To illustrate how they differ:</p>\n\n<p><code>product()</code> generates every possible pairing of elements, including all duplicates:</p>\n\n<pre><code>1,1  1,2  1,3  1,4\n2,1  2,2  2,3  2,4\n3,1  3,2  3,3  3,4\n4,1  4,2  4,3  4,4\n</code></pre>\n\n<p><code>permutations()</code> generates all unique orderings of each unique pair of elements, eliminating the <code>x,x</code> duplicates:</p>\n\n<pre><code> .   1,2  1,3  1,4\n2,1   .   2,3  2,4\n3,1  3,2   .   3,4\n4,1  4,2  4,3   .\n</code></pre>\n\n<p>Finally, <code>combinations()</code> only generates each unique pair of elements, in lexicographic order:</p>\n\n<pre><code> .   1,2  1,3  1,4\n .    .   2,3  2,4\n .    .    .   3,4\n .    .    .    .\n</code></pre>\n\n<p>All three of these functions were introduced in Python 2.6.</p>\n"
                }
            ]
        },
        {
            "11968976": [
                {
                    "owner": {
                        "account_id": 1261495,
                        "reputation": 46,
                        "user_id": 4603527,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b029ec59f82c07cf9c6f8c6c53a791f1?s=256&d=identicon&r=PG",
                        "display_name": "Georg3.14159265",
                        "link": "https://stackoverflow.com/users/4603527/georg3-14159265"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1675361835,
                    "creation_date": 1675361835,
                    "answer_id": 75327361,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Following up on Pygirl and Flimm, use of <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"nofollow noreferrer\">pathlib</a>, (really helpful reference, btw) their solution included the full path in the result, so here is a solution that outputs just the file names:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pathlib import Path\np = Path(destination_dir) # destination_dir = './' in original post\nfiles = [x.name for x in p.iterdir() if x.is_file()]\nprint(files)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4812682,
                        "reputation": 1854,
                        "user_id": 3885696,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/1f031d0158f3f2678c9632f53805752e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nir",
                        "link": "https://stackoverflow.com/users/3885696/nir"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1667401401,
                    "last_edit_date": 1667401401,
                    "creation_date": 1666558808,
                    "answer_id": 74174748,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To list files in a specific folder excluding files in its sub-folders with <code>os.walk</code> use:</p>\n<pre><code>_, _, file_list = next(os.walk(data_folder))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 48070,
                        "reputation": 100916,
                        "user_id": 142637,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/9SiZh.png?s=256",
                        "display_name": "sloth",
                        "link": "https://stackoverflow.com/users/142637/sloth"
                    },
                    "is_accepted": true,
                    "score": 552,
                    "last_activity_date": 1658201576,
                    "last_edit_date": 1658201576,
                    "creation_date": 1345032595,
                    "answer_id": 11969014,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Just use <a href=\"http://docs.python.org/library/os#os.listdir\" rel=\"noreferrer\"><code>os.listdir</code></a> and <a href=\"http://docs.python.org/library/os.path.html#os.path.isfile\" rel=\"noreferrer\"><code>os.path.isfile</code></a> instead of <a href=\"http://docs.python.org/library/os#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a>.</p>\n<p><strong>Example:</strong><br></p>\n<pre><code>import os\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\nfor f in files:\n    # do something\n</code></pre>\n<hr />\n<p>But be careful while applying this to other directory, like</p>\n<pre><code>files = [f for f in os.listdir(somedir) if os.path.isfile(f)]\n</code></pre>\n<p>which would not work because <code>f</code> is not a full path but relative to the current directory.</p>\n<p>Therefore, for filtering on another directory, do <code>os.path.isfile(os.path.join(somedir, f))</code></p>\n<p><em>(Thanks <a href=\"https://stackoverflow.com/users/1311956/causality\">Causality</a> for the hint)</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8925805,
                        "reputation": 13319,
                        "user_id": 6660373,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/ClQwn.jpg?s=256",
                        "display_name": "Pygirl",
                        "link": "https://stackoverflow.com/users/6660373/pygirl"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1646424099,
                    "last_edit_date": 1646424099,
                    "creation_date": 1573235190,
                    "answer_id": 58771482,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a> module.</p>\n<pre><code>from pathlib import Path\nx = Path('./')\nprint(list(filter(lambda y:y.is_file(), x.iterdir())))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": false,
                    "score": 92,
                    "last_activity_date": 1540342791,
                    "last_edit_date": 1540342791,
                    "creation_date": 1345032565,
                    "answer_id": 11969008,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>os.listdir</code> for this purpose.  If you only want <em>files</em> and not <em>directories</em>, you can filter the results using <code>os.path.isfile</code>.</p>\n\n<p>example:</p>\n\n<pre><code>files = os.listdir(os.curdir)  #files and directories\n</code></pre>\n\n<p>or</p>\n\n<pre><code>files = filter(os.path.isfile, os.listdir( os.curdir ) )  # files only\nfiles = [ f for f in os.listdir( os.curdir ) if os.path.isfile(f) ] #list comprehension version.\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9298548,
                        "reputation": 880,
                        "user_id": 9409280,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10154264974693551/picture?type=large",
                        "display_name": "Ozgur Oz",
                        "link": "https://stackoverflow.com/users/9409280/ozgur-oz"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1519571351,
                    "creation_date": 1519571351,
                    "answer_id": 48974983,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>import os\nfor subdir, dirs, files in os.walk('./'):\n    for file in files:\n      do some stuff\n      print file\n</code></pre>\n\n<p>You can improve this code with <code>del dirs[:]</code>which will be like following .</p>\n\n<pre><code>import os\nfor subdir, dirs, files in os.walk('./'):\n    del dirs[:]\n    for file in files:\n      do some stuff\n      print file\n</code></pre>\n\n<p>Or even better if you could point os.walk with current working directory .</p>\n\n<pre><code>import os\ncwd = os.getcwd()\nfor subdir, dirs, files in os.walk(cwd, topdown=True):\n    del dirs[:]  # remove the sub directories.\n    for file in files:\n      do some stuff\n      print file\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4179253,
                        "reputation": 574,
                        "user_id": 3424788,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/16HUm.jpg?s=256",
                        "display_name": "2114L3",
                        "link": "https://stackoverflow.com/users/3424788/2114l3"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1481035818,
                    "last_edit_date": 1481035818,
                    "creation_date": 1474724075,
                    "answer_id": 39676916,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>this can be done with os.walk()</p>\n\n<p><strong>python 3.5.2 tested;</strong></p>\n\n<pre><code>import os\nfor root, dirs, files in os.walk('.', topdown=True):\n    dirs.clear() #with topdown true, this will prevent walk from going into subs\n    for file in files:\n      #do some stuff\n      print(file)\n</code></pre>\n\n<p>remove the dirs.clear() line and the files in sub folders are included again.</p>\n\n<p>update with <strong>references</strong>;</p>\n\n<p><a href=\"https://docs.python.org/3/library/os.html#os.walk\" rel=\"noreferrer\">os.walk</a> documented here and talks about the triple list being created and topdown effects.</p>\n\n<p><a href=\"https://docs.python.org/3.3/tutorial/datastructures.html\" rel=\"noreferrer\">.clear()</a> documented here for emptying a list</p>\n\n<p>so by clearing the relevant list from os.walk you can effect its result to your needs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1494025,
                        "reputation": 2836,
                        "user_id": 1400411,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Yts8L.jpg?s=256",
                        "display_name": "prasastoadi",
                        "link": "https://stackoverflow.com/users/1400411/prasastoadi"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1477305439,
                    "creation_date": 1477305439,
                    "answer_id": 40216322,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <code><a href=\"https://docs.python.org/3/library/os.html#os.scandir\" rel=\"noreferrer\">os.scandir()</a></code>. New function in stdlib starts from Python 3.5.</p>\n\n<pre><code>import os\n\nfor entry in os.scandir('.'):\n    if entry.is_file():\n        print(entry.name)\n</code></pre>\n\n<p>Faster than <code>os.listdir()</code>. <code>os.walk()</code> <a href=\"https://docs.python.org/3/whatsnew/3.5.html#optimizations\" rel=\"noreferrer\">implements</a> <code>os.scandir()</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4361906,
                        "reputation": 637,
                        "user_id": 3558690,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3fa1d8cd11aa2fda898f6efece341a3b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nasimuddin Ansari",
                        "link": "https://stackoverflow.com/users/3558690/nasimuddin-ansari"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1405361977,
                    "last_edit_date": 1405361977,
                    "creation_date": 1402393169,
                    "answer_id": 24137699,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>import os\n\ndestdir = '/var/tmp/testdir'\n\nfiles = [ f for f in os.listdir(destdir) if os.path.isfile(os.path.join(destdir,f)) ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1701138,
                        "reputation": 43359,
                        "user_id": 1561176,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/022b5d51f385a2b717c90e8cd371f2fe?s=256&d=identicon&r=PG",
                        "display_name": "Inbar Rose",
                        "link": "https://stackoverflow.com/users/1561176/inbar-rose"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1345032555,
                    "creation_date": 1345032555,
                    "answer_id": 11969004,
                    "question_id": 11968976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>instead of <code>os.walk</code>, just use <code>os.listdir</code></p>\n"
                }
            ]
        },
        {
            "1704401": [
                {
                    "owner": {
                        "account_id": 146541,
                        "reputation": 901,
                        "user_id": 357035,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/8fbb40ab8fa0760a4a7858b76a8ed0f2?s=256&d=identicon&r=PG",
                        "display_name": "bresson",
                        "link": "https://stackoverflow.com/users/357035/bresson"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1608479460,
                    "last_edit_date": 1608479460,
                    "creation_date": 1608431326,
                    "answer_id": 65376428,
                    "question_id": 1704401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python3's Pool class has a map() method and that's all you need to parallelize map:</p>\n<pre><code>from multiprocessing import Pool\n\nwith Pool() as P:\n    xtransList = P.map(some_func, a_list)\n</code></pre>\n<p>Using <code>with Pool() as P</code> is similar to a process pool and will execute each item in the list in parallel. You can provide the number of cores:</p>\n<pre><code>with Pool(processes=4) as P:\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2403303,
                        "reputation": 91,
                        "user_id": 3633154,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/148fd3824cc929dcbb58fc2d329e2e91?s=256&d=identicon&r=PG",
                        "display_name": "Justin Winokur",
                        "link": "https://stackoverflow.com/users/3633154/justin-winokur"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1557519073,
                    "creation_date": 1557519073,
                    "answer_id": 56084242,
                    "question_id": 1704401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I know this is an old post, but just in case, I wrote a tool to make this super, super easy called <a href=\"https://github.com/Jwink3101/parmapper\" rel=\"nofollow noreferrer\">parmapper</a> (I actually call it parmap in my use but the name was taken).</p>\n\n<p>It handles a lot of the setup and deconstruction of processes and adds tons of features. In rough order of importance</p>\n\n<ul>\n<li>Can take lambda and other unpickleable functions</li>\n<li>Can apply starmap and other similar call methods to make it very easy to directly use.</li>\n<li>Can split amongst both threads and/or processes</li>\n<li>Includes features such as progress bars</li>\n</ul>\n\n<p>It does incur a small cost but for most uses, that is negligible.</p>\n\n<p>I hope you find it useful.</p>\n\n<p>(Note: It, like <code>map</code> in Python 3+, returns an iterable so if you expect all results to pass through it immediately, use <code>list()</code>)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15159559,
                        "reputation": 817,
                        "user_id": 10939143,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-1KUPd-Fnmz0/AAAAAAAAAAI/AAAAAAAAAAA/AKxrwcbswy5bX4TCTXZuu8KhHK71bZ9bcg/mo/photo.jpg?sz=256",
                        "display_name": "Ion Stoica",
                        "link": "https://stackoverflow.com/users/10939143/ion-stoica"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1549494887,
                    "creation_date": 1549494887,
                    "answer_id": 54564007,
                    "question_id": 1704401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This can be done elegantly with <a href=\"https://github.com/ray-project/ray\" rel=\"noreferrer\">Ray</a>, a system that allows you to easily parallelize and distribute your Python code.</p>\n\n<p>To parallelize your example, you'd need to define your map function with the <code>@ray.remote</code> decorator, and then invoke it with <code>.remote</code>. This will ensure that every instance of the remote function will executed in a different process.</p>\n\n<pre><code>import time\nimport ray\n\nray.init()\n\n# Define the function you want to apply map on, as remote function. \n@ray.remote\ndef f(x):\n    # Do some work...\n    time.sleep(1)\n    return x*x\n\n# Define a helper parmap(f, list) function.\n# This function executes a copy of f() on each element in \"list\".\n# Each copy of f() runs in a different process.\n# Note f.remote(x) returns a future of its result (i.e., \n# an identifier of the result) rather than the result itself.  \ndef parmap(f, list):\n    return [f.remote(x) for x in list]\n\n# Call parmap() on a list consisting of first 5 integers.\nresult_ids = parmap(f, range(1, 6))\n\n# Get the results\nresults = ray.get(result_ids)\nprint(results)\n</code></pre>\n\n<p>This will print:</p>\n\n<pre><code>[1, 4, 9, 16, 25]\n</code></pre>\n\n<p>and it will finish in approximately <code>len(list)/p</code> (rounded up the nearest integer) where <code>p</code> is number of cores on your machine. Assuming a machine with 2 cores, our example will execute in <code>5/2</code> rounded up, i.e, in approximately <code>3</code> sec.</p>\n\n<p>There are a number of advantages of using Ray over the <a href=\"https://docs.python.org/2/library/multiprocessing.html\" rel=\"noreferrer\">multiprocessing</a> module. In particular, the <strong>same code</strong> will run on a single machine as well as on a cluster of machines. For more advantages of Ray see <a href=\"https://stackoverflow.com/questions/20548628/how-to-do-parallel-programming-in-python/48177988#48177988\">this related post</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3725558,
                        "reputation": 1316,
                        "user_id": 4266357,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/yDF6Q.jpg?s=256",
                        "display_name": "Good Fit",
                        "link": "https://stackoverflow.com/users/4266357/good-fit"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1548103733,
                    "creation_date": 1548103733,
                    "answer_id": 54297573,
                    "question_id": 1704401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For those who looking for Python equivalent of R's mclapply(), here is my implementation. It is an improvement of the following two examples:</p>\n\n<ul>\n<li>\"<a href=\"http://blog.adeel.io/2016/11/06/parallelize-pandas-map-or-apply/\" rel=\"noreferrer\">Parallelize Pandas map() or apply()</a>\", as mentioned by @Rafael\nValero.</li>\n<li><a href=\"https://stackoverflow.com/questions/10834960/how-to-do-multiple-arguments-to-map-function-where-one-remains-the-same-in-pytho\">How to apply map to functions with multiple arguments</a>.</li>\n</ul>\n\n<p>It can be apply to map functions with single or multiple arguments.</p>\n\n<pre><code>import numpy as np, pandas as pd\nfrom scipy import sparse\nimport functools, multiprocessing\nfrom multiprocessing import Pool\n\nnum_cores = multiprocessing.cpu_count()\n\ndef parallelize_dataframe(df, func, U=None, V=None):\n\n    #blockSize = 5000\n    num_partitions = 5 # int( np.ceil(df.shape[0]*(1.0/blockSize)) )\n    blocks = np.array_split(df, num_partitions)\n\n    pool = Pool(num_cores)\n    if V is not None and U is not None:\n        # apply func with multiple arguments to dataframe (i.e. involves multiple columns)\n        df = pd.concat(pool.map(functools.partial(func, U=U, V=V), blocks))\n    else:\n        # apply func with one argument to dataframe (i.e. involves single column)\n        df = pd.concat(pool.map(func, blocks))\n\n    pool.close()\n    pool.join()\n\n    return df\n\ndef square(x):\n    return x**2\n\ndef test_func(data):\n    print(\"Process working on: \", data.shape)\n    data[\"squareV\"] = data[\"testV\"].apply(square)\n    return data\n\ndef vecProd(row, U, V):\n    return np.sum( np.multiply(U[int(row[\"obsI\"]),:], V[int(row[\"obsJ\"]),:]) )\n\ndef mProd_func(data, U, V):\n    data[\"predV\"] = data.apply( lambda row: vecProd(row, U, V), axis=1 )\n    return data\n\ndef generate_simulated_data():\n\n    N, D, nnz, K = [302, 184, 5000, 5]\n    I = np.random.choice(N, size=nnz, replace=True)\n    J = np.random.choice(D, size=nnz, replace=True)\n    vals = np.random.sample(nnz)\n\n    sparseY = sparse.csc_matrix((vals, (I, J)), shape=[N, D])\n\n    # Generate parameters U and V which could be used to reconstruct the matrix Y\n    U = np.random.sample(N*K).reshape([N,K])\n    V = np.random.sample(D*K).reshape([D,K])\n\n    return sparseY, U, V\n\ndef main():\n    Y, U, V = generate_simulated_data()\n\n    # find row, column indices and obvseved values for sparse matrix Y\n    (testI, testJ, testV) = sparse.find(Y)\n\n    colNames = [\"obsI\", \"obsJ\", \"testV\", \"predV\", \"squareV\"]\n    dtypes = {\"obsI\":int, \"obsJ\":int, \"testV\":float, \"predV\":float, \"squareV\": float}\n\n    obsValDF = pd.DataFrame(np.zeros((len(testV), len(colNames))), columns=colNames)\n    obsValDF[\"obsI\"] = testI\n    obsValDF[\"obsJ\"] = testJ\n    obsValDF[\"testV\"] = testV\n    obsValDF = obsValDF.astype(dtype=dtypes)\n\n    print(\"Y.shape: {!s}, #obsVals: {}, obsValDF.shape: {!s}\".format(Y.shape, len(testV), obsValDF.shape))\n\n    # calculate the square of testVals    \n    obsValDF = parallelize_dataframe(obsValDF, test_func)\n\n    # reconstruct prediction of testVals using parameters U and V\n    obsValDF = parallelize_dataframe(obsValDF, mProd_func, U, V)\n\n    print(\"obsValDF.shape after reconstruction: {!s}\".format(obsValDF.shape))\n    print(\"First 5 elements of obsValDF:\\n\", obsValDF.iloc[:5,:])\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 612,
                        "reputation": 43936,
                        "user_id": 802,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/1808bccf0f59a49a486f738a0f8076a8?s=256&d=identicon&r=PG",
                        "display_name": "Fl&#225;vio Amieiro",
                        "link": "https://stackoverflow.com/users/802/fl%c3%a1vio-amieiro"
                    },
                    "is_accepted": true,
                    "score": 148,
                    "last_activity_date": 1539149671,
                    "last_edit_date": 1539149671,
                    "creation_date": 1257806995,
                    "answer_id": 1704501,
                    "question_id": 1704401,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I seems like what you need is the <a href=\"http://docs.python.org/library/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.map\" rel=\"noreferrer\">map method in multiprocessing.Pool()</a>:</p>\n\n<blockquote>\n  <p><strong>map(func, iterable[, chunksize])</strong></p>\n\n<pre><code>A parallel equivalent of the map() built-in function (it supports only\none iterable argument though). It blocks till the result is ready.\n\nThis method chops the iterable into a number of chunks which it submits to the \nprocess pool as separate tasks. The (approximate) size of these chunks can be \nspecified by setting chunksize to a positive integ\n</code></pre>\n</blockquote>\n\n<p>For example, if you wanted to map this function:</p>\n\n<pre><code>def f(x):\n    return x**2\n</code></pre>\n\n<p>to range(10), you could do it using the built-in map() function:</p>\n\n<pre><code>map(f, range(10))\n</code></pre>\n\n<p>or using a multiprocessing.Pool() object's method map():</p>\n\n<pre><code>import multiprocessing\npool = multiprocessing.Pool()\nprint pool.map(f, range(10))\n</code></pre>\n"
                }
            ]
        },
        {
            "1761744": [
                {
                    "owner": {
                        "account_id": 28164,
                        "reputation": 61369,
                        "user_id": 74939,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/05cc371af855f1b67886051cff4af8d4?s=256&d=identicon&r=PG",
                        "display_name": "Stephan202",
                        "link": "https://stackoverflow.com/users/74939/stephan202"
                    },
                    "is_accepted": false,
                    "score": 56,
                    "last_activity_date": 1258620153,
                    "last_edit_date": 1258620153,
                    "creation_date": 1258619350,
                    "answer_id": 1761754,
                    "question_id": 1761744,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Yes, <a href=\"http://docs.python.org/3.1/library/getpass.html\" rel=\"noreferrer\"><code>getpass</code></a>: \"Prompt the user for a password without echoing.\"</p>\n\n<p><strong>Edit:</strong> I had not played with this module myself yet, so this is what I just cooked up (wouldn't be surprised if you find similar code all over the place, though):</p>\n\n<pre><code>import getpass\n\ndef login():\n    user = input(\"Username [%s]: \" % getpass.getuser())\n    if not user:\n        user = getpass.getuser()\n\n    pprompt = lambda: (getpass.getpass(), getpass.getpass('Retype password: '))\n\n    p1, p2 = pprompt()\n    while p1 != p2:\n        print('Passwords do not match. Try again')\n        p1, p2 = pprompt()\n\n    return user, p1\n</code></pre>\n\n<p>(This is Python 3.x; use <a href=\"http://docs.python.org/library/functions.html#raw_input\" rel=\"noreferrer\"><code>raw_input</code></a> instead of <a href=\"http://docs.python.org/3.1/library/functions.html#input\" rel=\"noreferrer\"><code>input</code></a> when using Python 2.x.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55645,
                        "reputation": 74913,
                        "user_id": 166686,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2428725d68892ed63f4d492549eebb76?s=256&d=identicon&r=PG",
                        "display_name": "mjv",
                        "link": "https://stackoverflow.com/users/166686/mjv"
                    },
                    "is_accepted": true,
                    "score": 299,
                    "last_activity_date": 1258619342,
                    "creation_date": 1258619342,
                    "answer_id": 1761753,
                    "question_id": 1761744,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; import getpass\n&gt;&gt;&gt; pw = getpass.getpass()\n</code></pre>\n"
                }
            ]
        },
        {
            "11125212": [
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1528298116,
                    "last_edit_date": 1528298116,
                    "creation_date": 1340214523,
                    "answer_id": 11125256,
                    "question_id": 11125212,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One option is to use a combination of <code>chain.from_iterable()</code> and <code>zip()</code>:</p>\n\n<pre><code># Python 3:\nfrom itertools import chain\nlist(chain.from_iterable(zip(list_a, list_b)))\n\n# Python 2:\nfrom itertools import chain, izip\nlist(chain.from_iterable(izip(list_a, list_b)))\n</code></pre>\n\n<p><strong>Edit</strong>: As pointed out by sr2222 in the comments, this does not work\nwell if the lists have different lengths.  In that case, depending on\nthe desired semantics, you might want to use the (far more general) <code>roundrobin()</code>\nfunction from the <a href=\"http://docs.python.org/library/itertools.html#recipes\" rel=\"noreferrer\">recipe\nsection</a> of the\n<code>itertools</code> documentation:</p>\n\n<pre><code>def roundrobin(*iterables):\n    \"roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C\"\n    # Recipe credited to George Sakkis\n    pending = len(iterables)\n    nexts = cycle(iter(it).next for it in iterables)\n    while pending:\n        try:\n            for next in nexts:\n                yield next()\n        except StopIteration:\n            pending -= 1\n            nexts = cycle(islice(nexts, pending))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 451158,
                        "reputation": 250259,
                        "user_id": 846892,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/E9dZn.png?s=256",
                        "display_name": "Ashwini Chaudhary",
                        "link": "https://stackoverflow.com/users/846892/ashwini-chaudhary"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1340215391,
                    "creation_date": 1340215391,
                    "answer_id": 11125477,
                    "question_id": 11125212,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This one works only in python 2.x, but will work for lists of different lengths:</p>\n\n<pre><code>[y for x in map(None,lis_a,lis_b) for y in x]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 237172,
                        "reputation": 208015,
                        "user_id": 505154,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Clark",
                        "link": "https://stackoverflow.com/users/505154/andrew-clark"
                    },
                    "is_accepted": false,
                    "score": 35,
                    "last_activity_date": 1340214668,
                    "creation_date": 1340214668,
                    "answer_id": 11125298,
                    "question_id": 11125212,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a pretty straightforward method using a  list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; lists = [['a', 'b', 'c'], ['d', 'e', 'f']]\n&gt;&gt;&gt; [x for t in zip(*lists) for x in t]\n['a', 'd', 'b', 'e', 'c', 'f']\n</code></pre>\n\n<p>Or if you had the lists as separate variables (as in other answers):</p>\n\n<pre><code>[x for t in zip(list_a, list_b) for x in t]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24776,
                        "reputation": 27283,
                        "user_id": 63225,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/2b6513bd28040ce526882afb70f4f7d5?s=256&d=identicon&r=PG",
                        "display_name": "sblom",
                        "link": "https://stackoverflow.com/users/63225/sblom"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1340214583,
                    "creation_date": 1340214583,
                    "answer_id": 11125274,
                    "question_id": 11125212,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could do something simple using built in functions:</p>\n\n<pre><code>sum(zip(list_a, list_b),())\n</code></pre>\n"
                }
            ]
        },
        {
            "49291740": [
                {
                    "owner": {
                        "account_id": 8372756,
                        "reputation": 38365,
                        "user_id": 6287308,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-KPPWAxK_Ri4/AAAAAAAAAAI/AAAAAAAAAuo/vaJ24rGswv4/photo.jpg?sz=256",
                        "display_name": "Vaishali",
                        "link": "https://stackoverflow.com/users/6287308/vaishali"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1521089619,
                    "last_edit_date": 1521089619,
                    "creation_date": 1521089260,
                    "answer_id": 49291784,
                    "question_id": 49291740,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Multiple ways</p>\n\n<ol>\n<li><p>Use str.contains to find rows containing '-'</p>\n\n<pre><code>df[~df['Charge_Per_Line'].str.contains('-')]\n</code></pre></li>\n<li><p>Replace '-' by nan and use dropna()</p>\n\n<pre><code>df.replace('-', np.nan, inplace = True)\ndf = df.dropna()\n</code></pre></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 12672477,
                        "reputation": 164273,
                        "user_id": 9209546,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/qk9vC.jpg?s=256",
                        "display_name": "jpp",
                        "link": "https://stackoverflow.com/users/9209546/jpp"
                    },
                    "is_accepted": true,
                    "score": 76,
                    "last_activity_date": 1521089223,
                    "creation_date": 1521089223,
                    "answer_id": 49291779,
                    "question_id": 49291740,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If the relevant entries in Charge_Per_Line are empty (<code>NaN</code>) when you read into pandas, you can use <code>df.dropna</code>:</p>\n\n<pre><code>df = df.dropna(axis=0, subset=['Charge_Per_Line'])\n</code></pre>\n\n<p>If the values are genuinely <code>-</code>, then you can replace them with <code>np.nan</code> and then use <code>df.dropna</code>:</p>\n\n<pre><code>import numpy as np\n\ndf['Charge_Per_Line'] = df['Charge_Per_Line'].replace('-', np.nan)\ndf = df.dropna(axis=0, subset=['Charge_Per_Line'])\n</code></pre>\n"
                }
            ]
        },
        {
            "311775": [
                {
                    "owner": {
                        "account_id": 4680725,
                        "reputation": 101,
                        "user_id": 3789506,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/NzWFy.jpg?s=256",
                        "display_name": "RaihanShezan",
                        "link": "https://stackoverflow.com/users/3789506/raihanshezan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1672504361,
                    "creation_date": 1672504361,
                    "answer_id": 74970833,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Fastest Way - use * like list1 = [False] * 1_000_000</h3>\n<p>Comparing all the common methods (list appending vs preallocation vs for vs while), I found that using * gives the most efficient execution time.</p>\n<pre class=\"lang-py prettyprint-override\"><code>import time\n\nlarge_int = 10_000_000\nstart_time = time.time()\n\n# Test 1: List comprehension\nl1 = [False for _ in range(large_int)]\nend_time_1 = time.time()\n\n# Test 2: Using *\nl2 = [False] * large_int\nend_time_2 = time.time()\n\n# Test 3: Using append with for loop &amp; range\nl3 = []\nfor _ in range(large_int):\n    l3.append(False)\nend_time_3 = time.time()\n\n# Test 4: Using append with while loop\nl4, i = [], 0\nwhile i &lt; large_int:\n    l4.append(False)\n    i += 1\nend_time_4 = time.time()\n\n# Results\ndiff_1 = end_time_1 - start_time\ndiff_2 = end_time_2 - end_time_1\ndiff_3 = end_time_3 - end_time_2\ndiff_4 = end_time_4 - end_time_3\nprint(f&quot;Test 1. {diff_1:.4f} seconds&quot;)\nprint(f&quot;Test 2. {diff_2:.4f} seconds&quot;)\nprint(f&quot;Test 3. {diff_3:.4f} seconds&quot;)\nprint(f&quot;Test 4. {diff_4:.4f} seconds&quot;)\n\nprint(&quot;\\nTest 2 is faster than - &quot;)\nprint(f&quot;            Test 1 by - {(diff_1 / diff_2 * 100 - 1):,.0f}%&quot;)\nprint(f&quot;            Test 3 by - {(diff_3 / diff_2 * 100 - 1):,.0f}%&quot;)\nprint(f&quot;            Test 4 by - {(diff_4 / diff_2 * 100 - 1):,.0f}%&quot;)\n</code></pre>\n<p><a href=\"https://i.sstatic.net/UjPQ4.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/UjPQ4.png\" alt=\"python list initialization\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1082519,
                        "reputation": 34045,
                        "user_id": 1079110,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/07tNg.jpg?s=256",
                        "display_name": "danijar",
                        "link": "https://stackoverflow.com/users/1079110/danijar"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1662127654,
                    "creation_date": 1662127654,
                    "answer_id": 73583831,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python's <code>list</code> doesn't support preallocation. Numpy allows you to preallocate memory, but in practice it doesn't seem to be worth it if your goal is to speed up the program.</p>\n<p>This test simply writes an integer into the list, but in a real application you'd likely do more complicated things per iteration, which further reduces the importance of the memory allocation.</p>\n<pre><code>import timeit\nimport numpy as np\n\ndef list_append(size=1_000_000):\n    result = []\n    for i in range(size):\n        result.append(i)\n    return result\n\ndef list_prealloc(size=1_000_000):\n    result = [None] * size\n    for i in range(size):\n        result[i] = i\n    return result\n\ndef numpy_prealloc(size=1_000_000):\n    result = np.empty(size, np.int32)\n    for i in range(size):\n        result[i] = i\n    return result\n\nsetup = 'from __main__ import list_append, list_prealloc, numpy_prealloc'\nprint(timeit.timeit('list_append()', setup=setup, number=10))     # 0.79\nprint(timeit.timeit('list_prealloc()', setup=setup, number=10))   # 0.62\nprint(timeit.timeit('numpy_prealloc()', setup=setup, number=10))  # 0.73\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": true,
                    "score": 119,
                    "last_activity_date": 1638037022,
                    "last_edit_date": 1638037022,
                    "creation_date": 1227391354,
                    "answer_id": 311833,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>Warning: This answer is contested. See comments.</h2>\n<pre><code>def doAppend( size=10000 ):\n    result = []\n    for i in range(size):\n        message= &quot;some unique object %d&quot; % ( i, )\n        result.append(message)\n    return result\n\ndef doAllocate( size=10000 ):\n    result=size*[None]\n    for i in range(size):\n        message= &quot;some unique object %d&quot; % ( i, )\n        result[i]= message\n    return result\n</code></pre>\n<p><strong>Results</strong>. (evaluate each function 144 times and average the duration)</p>\n<pre><code>simple append 0.0102\npre-allocate  0.0098\n</code></pre>\n<p><strong>Conclusion</strong>.  It barely matters.</p>\n<p>Premature optimization is the root of all evil.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10021778,
                        "reputation": 111,
                        "user_id": 7411248,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-M_Nv4_MqBH4/AAAAAAAAAAI/AAAAAAAAB0o/tal4PjeY87I/photo.jpg?sz=256",
                        "display_name": "Russell Troxel",
                        "link": "https://stackoverflow.com/users/7411248/russell-troxel"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1608518332,
                    "last_edit_date": 1608518332,
                    "creation_date": 1484245235,
                    "answer_id": 41620272,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As others have mentioned, the simplest way to preseed a list is with <code>NoneType</code> objects.</p>\n<p>That being said, you should understand the way Python lists actually work before deciding this is necessary.</p>\n<p>In the <a href=\"https://en.wikipedia.org/wiki/CPython\" rel=\"nofollow noreferrer\">CPython</a> implementation of a list, the underlying array is always created with overhead room, in progressively larger sizes <code>( 4, 8, 16, 25, 35, 46, 58, 72, 88, 106, 126, 148, 173, 201, 233, 269, 309, 354, 405, 462, 526, 598, 679, 771, 874, 990, 1120, etc)</code>, so that resizing the list does not happen nearly so often.</p>\n<p>Because of this behavior, <em>most</em> <code>list.append()</code> functions are <code>O(1)</code> complexity for appends, only having increased complexity when crossing one of these boundaries, at which point the complexity will be <code>O(n)</code>. This behavior is what leads to the minimal increase in execution time in <a href=\"https://stackoverflow.com/questions/311775/create-a-list-with-initial-capacity-in-python/311833#311833\">S.Lott's answer</a>.</p>\n<p>Source: <em><a href=\"http://www.laurentluce.com/posts/python-list-implementation/\" rel=\"nofollow noreferrer\">Python list implementation</a></em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3006077,
                        "reputation": 61,
                        "user_id": 2550607,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/eae1c5a5b8fb023a9a1de98f48271017?s=256&d=identicon&r=PG",
                        "display_name": "J450n",
                        "link": "https://stackoverflow.com/users/2550607/j450n"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1608518132,
                    "last_edit_date": 1608518132,
                    "creation_date": 1406686953,
                    "answer_id": 25027798,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Concerns about preallocation in Python arise if you're working with <a href=\"https://en.wikipedia.org/wiki/NumPy\" rel=\"nofollow noreferrer\">NumPy</a>, which has more C-like arrays. In this instance, preallocation concerns are about the shape of the data and the default value.</p>\n<p>Consider NumPy if you're doing numerical computation on massive lists and want performance.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 94350,
                        "reputation": 24219,
                        "user_id": 257645,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/SE5gW.jpg?s=256",
                        "display_name": "kfsone",
                        "link": "https://stackoverflow.com/users/257645/kfsone"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1608517837,
                    "last_edit_date": 1608517837,
                    "creation_date": 1402525261,
                    "answer_id": 24173567,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The Pythonic way for this is:</p>\n<pre><code>x = [None] * numElements\n</code></pre>\n<p>Or whatever default value you wish to prepopulate with, e.g.</p>\n<pre><code>bottles = [Beer()] * 99\nsea = [Fish()] * many\nvegetarianPizzas = [None] * peopleOrderingPizzaNotQuiche\n</code></pre>\n<p>(<em>Caveat Emptor</em>: The <code>[Beer()] * 99</code> syntax creates <em>one</em> <code>Beer</code> and then populates an array with 99 references to the same single instance)</p>\n<p>Python's default approach can be pretty efficient, although that efficiency decays as you increase the number of elements.</p>\n<p>Compare</p>\n<pre><code>import time\n\nclass Timer(object):\n    def __enter__(self):\n        self.start = time.time()\n        return self\n\n    def __exit__(self, *args):\n        end = time.time()\n        secs = end - self.start\n        msecs = secs * 1000  # Millisecs\n        print('%fms' % msecs)\n\nElements   = 100000\nIterations = 144\n\nprint('Elements: %d, Iterations: %d' % (Elements, Iterations))\n\n\ndef doAppend():\n    result = []\n    i = 0\n    while i &lt; Elements:\n        result.append(i)\n        i += 1\n\ndef doAllocate():\n    result = [None] * Elements\n    i = 0\n    while i &lt; Elements:\n        result[i] = i\n        i += 1\n\ndef doGenerator():\n    return list(i for i in range(Elements))\n\n\ndef test(name, fn):\n    print(&quot;%s: &quot; % name, end=&quot;&quot;)\n    with Timer() as t:\n        x = 0\n        while x &lt; Iterations:\n            fn()\n            x += 1\n\n\ntest('doAppend', doAppend)\ntest('doAllocate', doAllocate)\ntest('doGenerator', doGenerator)\n</code></pre>\n<p>with</p>\n<pre><code>#include &lt;vector&gt;\ntypedef std::vector&lt;unsigned int&gt; Vec;\n\nstatic const unsigned int Elements = 100000;\nstatic const unsigned int Iterations = 144;\n\nvoid doAppend()\n{\n    Vec v;\n    for (unsigned int i = 0; i &lt; Elements; ++i) {\n        v.push_back(i);\n    }\n}\n\nvoid doReserve()\n{\n    Vec v;\n    v.reserve(Elements);\n    for (unsigned int i = 0; i &lt; Elements; ++i) {\n        v.push_back(i);\n    }\n}\n\nvoid doAllocate()\n{\n    Vec v;\n    v.resize(Elements);\n    for (unsigned int i = 0; i &lt; Elements; ++i) {\n        v[i] = i;\n    }\n}\n\n#include &lt;iostream&gt;\n#include &lt;chrono&gt;\nusing namespace std;\n\nvoid test(const char* name, void(*fn)(void))\n{\n    cout &lt;&lt; name &lt;&lt; &quot;: &quot;;\n\n    auto start = chrono::high_resolution_clock::now();\n    for (unsigned int i = 0; i &lt; Iterations; ++i) {\n        fn();\n    }\n    auto end = chrono::high_resolution_clock::now();\n\n    auto elapsed = end - start;\n    cout &lt;&lt; chrono::duration&lt;double, milli&gt;(elapsed).count() &lt;&lt; &quot;ms\\n&quot;;\n}\n\nint main()\n{\n    cout &lt;&lt; &quot;Elements: &quot; &lt;&lt; Elements &lt;&lt; &quot;, Iterations: &quot; &lt;&lt; Iterations &lt;&lt; '\\n';\n\n    test(&quot;doAppend&quot;, doAppend);\n    test(&quot;doReserve&quot;, doReserve);\n    test(&quot;doAllocate&quot;, doAllocate);\n}\n</code></pre>\n<p>On my Windows 7 <a href=\"https://en.wikipedia.org/wiki/Intel_Core#Core_i7\" rel=\"noreferrer\">Core\u00a0i7</a>, 64-bit Python gives</p>\n<pre><code>Elements: 100000, Iterations: 144\ndoAppend: 3587.204933ms\ndoAllocate: 2701.154947ms\ndoGenerator: 1721.098185ms\n</code></pre>\n<p>While C++ gives (built with <a href=\"https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B\" rel=\"noreferrer\">Microsoft Visual C++</a>, 64-bit, optimizations enabled)</p>\n<pre><code>Elements: 100000, Iterations: 144\ndoAppend: 74.0042ms\ndoReserve: 27.0015ms\ndoAllocate: 5.0003ms\n</code></pre>\n<p>C++ debug build produces:</p>\n<pre><code>Elements: 100000, Iterations: 144\ndoAppend: 2166.12ms\ndoReserve: 2082.12ms\ndoAllocate: 273.016ms\n</code></pre>\n<p>The point here is that with Python you can achieve a 7-8% performance improvement, and if you think you're writing a high-performance application (or if you're writing something that is used in a web service or something) then that isn't to be sniffed at, but you may need to rethink your choice of language.</p>\n<p>Also, the Python code here isn't really Python code. Switching to truly Pythonesque code here gives better performance:</p>\n<pre><code>import time\n\nclass Timer(object):\n    def __enter__(self):\n        self.start = time.time()\n        return self\n\n    def __exit__(self, *args):\n        end = time.time()\n        secs = end - self.start\n        msecs = secs * 1000  # millisecs\n        print('%fms' % msecs)\n\nElements   = 100000\nIterations = 144\n\nprint('Elements: %d, Iterations: %d' % (Elements, Iterations))\n\n\ndef doAppend():\n    for x in range(Iterations):\n        result = []\n        for i in range(Elements):\n            result.append(i)\n\ndef doAllocate():\n    for x in range(Iterations):\n        result = [None] * Elements\n        for i in range(Elements):\n            result[i] = i\n\ndef doGenerator():\n    for x in range(Iterations):\n        result = list(i for i in range(Elements))\n\n\ndef test(name, fn):\n    print(&quot;%s: &quot; % name, end=&quot;&quot;)\n    with Timer() as t:\n        fn()\n\n\ntest('doAppend', doAppend)\ntest('doAllocate', doAllocate)\ntest('doGenerator', doGenerator)\n</code></pre>\n<p>Which gives</p>\n<pre><code>Elements: 100000, Iterations: 144\ndoAppend: 2153.122902ms\ndoAllocate: 1346.076965ms\ndoGenerator: 1614.092112ms\n</code></pre>\n<p>(in 32-bit, doGenerator does better than doAllocate).</p>\n<p>Here the gap between doAppend and doAllocate is significantly larger.</p>\n<p>Obviously, the differences here really only apply if you are doing this more than a handful of times or if you are doing this on a heavily loaded system where those numbers are going to get scaled out by orders of magnitude, or if you are dealing with considerably larger lists.</p>\n<p>The point here: Do it the Pythonic way for the best performance.</p>\n<p>But if you are worrying about general, high-level performance, Python is the wrong language. The most fundamental problem being that Python function calls has traditionally been up to 300x slower than other languages due to Python features like decorators, etc. (<em><a href=\"https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Data_Aggregation\" rel=\"noreferrer\">PythonSpeed/PerformanceTips, Data Aggregation</a></em>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 566775,
                        "reputation": 51,
                        "user_id": 194046,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/fed498e65aec4199029994d4feab4fb1?s=256&d=identicon&r=PG",
                        "display_name": "Jason Wiener",
                        "link": "https://stackoverflow.com/users/194046/jason-wiener"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1608517407,
                    "last_edit_date": 1608517407,
                    "creation_date": 1256152178,
                    "answer_id": 1602958,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I ran <a href=\"https://stackoverflow.com/questions/311775/create-a-list-with-initial-capacity-in-python/311833#311833\">S.Lott's code</a> and produced the same 10% performance increase by preallocating. I tried <a href=\"https://stackoverflow.com/questions/311775/create-a-list-with-initial-capacity-in-python/311783#311783\">Ned Batchelder's idea using a generator</a> and was able to see the performance of the generator better than that of the doAllocate. For my project the 10% improvement matters, so thanks to everyone as this helps a bunch.</p>\n<pre><code>def doAppend(size=10000):\n    result = []\n    for i in range(size):\n        message = &quot;some unique object %d&quot; % ( i, )\n        result.append(message)\n    return result\n\ndef doAllocate(size=10000):\n    result = size*[None]\n    for i in range(size):\n        message = &quot;some unique object %d&quot; % ( i, )\n        result[i] = message\n    return result\n\ndef doGen(size=10000):\n    return list(&quot;some unique object %d&quot; % ( i, ) for i in xrange(size))\n\nsize = 1000\n@print_timing\ndef testAppend():\n    for i in xrange(size):\n        doAppend()\n\n@print_timing\ndef testAlloc():\n    for i in xrange(size):\n        doAllocate()\n\n@print_timing\ndef testGen():\n    for i in xrange(size):\n        doGen()\n\n\ntestAppend()\ntestAlloc()\ntestGen()\n</code></pre>\n<h3>Output</h3>\n<pre class=\"lang-none prettyprint-override\"><code>testAppend took 14440.000ms\ntestAlloc took 13580.000ms\ntestGen took 13430.000ms\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 352969,
                        "reputation": 1883,
                        "user_id": 690386,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/58124721e65f939f2dd13aebb93b5e6e?s=256&d=identicon&r=PG",
                        "display_name": "LRN",
                        "link": "https://stackoverflow.com/users/690386/lrn"
                    },
                    "is_accepted": false,
                    "score": 72,
                    "last_activity_date": 1608517328,
                    "last_edit_date": 1608517328,
                    "creation_date": 1301878080,
                    "answer_id": 5533598,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Short version: use</p>\n<pre><code>pre_allocated_list = [None] * size\n</code></pre>\n<p>to preallocate a list (that is, to be able to address 'size' elements of the list instead of gradually forming the list by appending). This operation is <em>very</em> fast, even on big lists. Allocating new objects that will be later assigned to list elements will take <em>much</em> longer and will be <em>the</em> bottleneck in your program, performance-wise.</p>\n<p>Long version:</p>\n<p>I think that initialization time should be taken into account.</p>\n<p>Since in Python everything is a reference, it doesn't matter whether you set each element into <em>None</em> or some string - either way it's only a reference. Though it will take longer if you want to create a new object for each element to reference.</p>\n<p>For Python 3.2:</p>\n<pre><code>import time\nimport copy\n\ndef print_timing (func):\n  def wrapper (*arg):\n    t1 = time.time()\n    res = func (*arg)\n    t2 = time.time ()\n    print (&quot;{} took {} ms&quot;.format (func.__name__, (t2 - t1) * 1000.0))\n    return res\n\n  return wrapper\n\n@print_timing\ndef prealloc_array (size, init = None, cp = True, cpmethod = copy.deepcopy, cpargs = (), use_num = False):\n  result = [None] * size\n  if init is not None:\n    if cp:\n      for i in range (size):\n          result[i] = init\n    else:\n      if use_num:\n        for i in range (size):\n            result[i] = cpmethod (i)\n      else:\n        for i in range (size):\n            result[i] = cpmethod (cpargs)\n  return result\n\n@print_timing\ndef prealloc_array_by_appending (size):\n  result = []\n  for i in range (size):\n    result.append (None)\n  return result\n\n@print_timing\ndef prealloc_array_by_extending (size):\n  result = []\n  none_list = [None]\n  for i in range (size):\n    result.extend (none_list)\n  return result\n\ndef main ():\n  n = 1000000\n  x = prealloc_array_by_appending(n)\n  y = prealloc_array_by_extending(n)\n  a = prealloc_array(n, None)\n  b = prealloc_array(n, &quot;content&quot;, True)\n  c = prealloc_array(n, &quot;content&quot;, False, &quot;some object {}&quot;.format, (&quot;blah&quot;), False)\n  d = prealloc_array(n, &quot;content&quot;, False, &quot;some object {}&quot;.format, None, True)\n  e = prealloc_array(n, &quot;content&quot;, False, copy.deepcopy, &quot;a&quot;, False)\n  f = prealloc_array(n, &quot;content&quot;, False, copy.deepcopy, (), False)\n  g = prealloc_array(n, &quot;content&quot;, False, copy.deepcopy, [], False)\n\n  print (&quot;x[5] = {}&quot;.format (x[5]))\n  print (&quot;y[5] = {}&quot;.format (y[5]))\n  print (&quot;a[5] = {}&quot;.format (a[5]))\n  print (&quot;b[5] = {}&quot;.format (b[5]))\n  print (&quot;c[5] = {}&quot;.format (c[5]))\n  print (&quot;d[5] = {}&quot;.format (d[5]))\n  print (&quot;e[5] = {}&quot;.format (e[5]))\n  print (&quot;f[5] = {}&quot;.format (f[5]))\n  print (&quot;g[5] = {}&quot;.format (g[5]))\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n<p>Evaluation:</p>\n<pre class=\"lang-none prettyprint-override\"><code>prealloc_array_by_appending took 118.00003051757812 ms\nprealloc_array_by_extending took 102.99992561340332 ms\nprealloc_array took 3.000020980834961 ms\nprealloc_array took 49.00002479553223 ms\nprealloc_array took 316.9999122619629 ms\nprealloc_array took 473.00004959106445 ms\nprealloc_array took 1677.9999732971191 ms\nprealloc_array took 2729.999780654907 ms\nprealloc_array took 3001.999855041504 ms\nx[5] = None\ny[5] = None\na[5] = None\nb[5] = content\nc[5] = some object blah\nd[5] = some object 5\ne[5] = a\nf[5] = []\ng[5] = ()\n</code></pre>\n<p>As you can see, just making a big list of references to the same <em>None</em> object takes very little time.</p>\n<p>Prepending or extending takes longer (I didn't average anything, but after running this a few times I can tell you that extending and appending take roughly the same time).</p>\n<p>Allocating new object for each element - that is what takes the most time. And <a href=\"https://stackoverflow.com/questions/311775/create-a-list-with-initial-capacity-in-python/311833#311833\">S.Lott's answer</a> does that - formats a new string every time. Which is not strictly required - if you want to preallocate some space, just make a list of None, then assign data to list elements at will. Either way it takes more time to generate data than to append/extend a list, whether you generate it while creating the list, or after that. But if you want a sparsely-populated list, then starting with a list of <em>None</em> is definitely faster.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17366,
                        "reputation": 9710,
                        "user_id": 38796,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/52d7832f1ef16be20bd7eb96e31910da?s=256&d=identicon&r=PG",
                        "display_name": "Piotr Lesnicki",
                        "link": "https://stackoverflow.com/users/38796/piotr-lesnicki"
                    },
                    "is_accepted": false,
                    "score": -4,
                    "last_activity_date": 1608516526,
                    "last_edit_date": 1608516526,
                    "creation_date": 1227388076,
                    "answer_id": 311785,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From what I understand, Python lists are already quite similar to ArrayLists. But if you want to tweak those parameters I found this post on the Internet that may be interesting (basically, just create your own <code>ScalableList</code> extension):</p>\n<p><a href=\"http://mail.python.org/pipermail/python-list/2000-May/035082.html\" rel=\"nofollow noreferrer\">http://mail.python.org/pipermail/python-list/2000-May/035082.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1042456,
                        "reputation": 3676,
                        "user_id": 1048186,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/taKn8.png?s=256",
                        "display_name": "Josiah Yoder",
                        "link": "https://stackoverflow.com/users/1048186/josiah-yoder"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1477587454,
                    "last_edit_date": 1477587454,
                    "creation_date": 1477585992,
                    "answer_id": 40289905,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For some applications, a dictionary may be what you are looking for.  For example, in the find_totient method, I found it more convenient to use a dictionary since I didn't have a zero index.</p>\n\n<pre><code>def totient(n):\n    totient = 0\n\n    if n == 1:\n        totient = 1\n    else:\n        for i in range(1, n):\n            if math.gcd(i, n) == 1:\n                totient += 1\n    return totient\n\ndef find_totients(max):\n    totients = dict()\n    for i in range(1,max+1):\n        totients[i] = totient(i)\n\n    print('Totients:')\n    for i in range(1,max+1):\n        print(i,totients[i])\n</code></pre>\n\n<p>This problem could also be solved with a preallocated list:</p>\n\n<pre><code>def find_totients(max):\n    totients = None*(max+1)\n    for i in range(1,max+1):\n        totients[i] = totient(i)\n\n    print('Totients:')\n    for i in range(1,max+1):\n        print(i,totients[i])\n</code></pre>\n\n<p>I feel that this is not as elegant and prone to bugs because I'm storing None which could throw an exception if I accidentally use them wrong, and because I need to think about edge cases that the map lets me avoid.</p>\n\n<p>It's true the dictionary won't be as efficient, but as others have commented, <strong>small</strong> differences in speed are not always worth <strong>significant</strong> maintenance hazards.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8083,
                        "reputation": 374652,
                        "user_id": 14343,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
                        "display_name": "Ned Batchelder",
                        "link": "https://stackoverflow.com/users/14343/ned-batchelder"
                    },
                    "is_accepted": false,
                    "score": 98,
                    "last_activity_date": 1227388038,
                    "creation_date": 1227388038,
                    "answer_id": 311783,
                    "question_id": 311775,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python lists have no built-in pre-allocation. If you really need to make a list, and need to avoid the overhead of appending (and you should verify that you do), you can do this:</p>\n\n<pre><code>l = [None] * 1000 # Make a list of 1000 None's\nfor i in xrange(1000):\n    # baz\n    l[i] = bar\n    # qux\n</code></pre>\n\n<p>Perhaps you could avoid the list by using a generator instead:</p>\n\n<pre><code>def my_things():\n    while foo:\n        #baz\n        yield bar\n        #qux\n\nfor thing in my_things():\n    # do something with thing\n</code></pre>\n\n<p>This way, the list isn't every stored all in memory at all, merely generated as needed.</p>\n"
                }
            ]
        },
        {
            "5997027": [
                {
                    "owner": {
                        "account_id": 207607,
                        "reputation": 17711,
                        "user_id": 457571,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2318229ef6310b03ab828bff43d2ad66?s=256&d=identicon&r=PG",
                        "display_name": "dr jimbob",
                        "link": "https://stackoverflow.com/users/457571/dr-jimbob"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1366475296,
                    "last_edit_date": 1366475296,
                    "creation_date": 1305316628,
                    "answer_id": 5997103,
                    "question_id": 5997027,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Its very well known due to the nature of <a href=\"http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"noreferrer\">floating point numbers</a>.  </p>\n\n<p>If you want to do decimal arithmetic not floating point arithmatic there are <a href=\"http://docs.python.org/library/decimal.html\" rel=\"noreferrer\">libraries</a> to do this.</p>\n\n<p>E.g.,</p>\n\n<pre><code>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; Decimal(29)/Decimal(100)\nDecimal('0.29')\n&gt;&gt;&gt; Decimal('0.29')*100\nDecimal('29')\n&gt;&gt;&gt; int(Decimal('29'))\n29\n</code></pre>\n\n<p>In general decimal is probably going overboard and still will have rounding errors in rare cases when the number does not have a finite decimal representation (for example any fraction where the denominator is not 1 or divisible by 2 or 5 - the factors of the decimal base (10)).  For example:</p>\n\n<pre><code>&gt;&gt;&gt; s = Decimal(7)\n&gt;&gt;&gt; Decimal(1)/s/s/s/s/s/s/s*s*s*s*s*s*s*s\nDecimal('0.9999999999999999999999999996')\n&gt;&gt;&gt; int(Decimal('0.9999999999999999999999999996'))\n0\n</code></pre>\n\n<p>So its best to always just round before casting floating points to ints, unless you want a floor function.</p>\n\n<pre><code>&gt;&gt;&gt; int(1.9999)\n1\n&gt;&gt;&gt; int(round(1.999))\n2\n</code></pre>\n\n<p>Another alternative is to use the Fraction class from the <a href=\"http://docs.python.org/library/fractions.html\" rel=\"noreferrer\">fractions</a> library which doesn't approximate.  (It justs keeps adding/subtracting and multiplying the integer numerators and denominators as necessary).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4060,
                        "reputation": 307511,
                        "user_id": 5987,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/2a1f9f4986b58015691eb2014e78869f?s=256&d=identicon&r=PG",
                        "display_name": "Mark Ransom",
                        "link": "https://stackoverflow.com/users/5987/mark-ransom"
                    },
                    "is_accepted": true,
                    "score": 37,
                    "last_activity_date": 1305316273,
                    "creation_date": 1305316273,
                    "answer_id": 5997058,
                    "question_id": 5997027,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Any number that can't be built from exact powers of two can't be represented exactly as a floating point number; it needs to be approximated. Sometimes the closest approximation will be less than the actual number.</p>\n\n<p>Read <a href=\"http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html\" rel=\"noreferrer\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</p>\n"
                }
            ]
        },
        {
            "24838629": [
                {
                    "owner": {
                        "account_id": 258659,
                        "reputation": 15066,
                        "user_id": 540968,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc8b47703649715c5d03bb73cb1e1563?s=256&d=identicon&r=PG",
                        "display_name": "faester",
                        "link": "https://stackoverflow.com/users/540968/faester"
                    },
                    "is_accepted": true,
                    "score": 116,
                    "last_activity_date": 1631864685,
                    "last_edit_date": 1631864685,
                    "creation_date": 1405760752,
                    "answer_id": 24838652,
                    "question_id": 24838629,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try to change the parenthesis position so that the rounding happens before the division by 2</p>\n<pre><code>def round_off_rating(number):\n    &quot;&quot;&quot;Round a number to the closest half integer.\n    &gt;&gt;&gt; round_off_rating(1.3)\n    1.5\n    &gt;&gt;&gt; round_off_rating(2.6)\n    2.5\n    &gt;&gt;&gt; round_off_rating(3.0)\n    3.0\n    &gt;&gt;&gt; round_off_rating(4.1)\n    4.0&quot;&quot;&quot;\n\n    return round(number * 2) / 2\n</code></pre>\n<p><em>Edit:</em> Added a <a href=\"https://docs.python.org/2/library/doctest.html\" rel=\"noreferrer\"><code>doctest</code></a>able docstring:</p>\n<pre><code>&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; doctest.testmod()\nTestResults(failed=0, attempted=4)\n</code></pre>\n"
                }
            ]
        },
        {
            "6062576": [
                {
                    "owner": {
                        "account_id": 5218573,
                        "reputation": 5589,
                        "user_id": 4172685,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/1cc4306b27cb41fa71e9ffa19adf458c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Conchylicultor",
                        "link": "https://stackoverflow.com/users/4172685/conchylicultor"
                    },
                    "is_accepted": false,
                    "score": 35,
                    "last_activity_date": 1676895871,
                    "last_edit_date": 1676895871,
                    "creation_date": 1648136307,
                    "answer_id": 71605371,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>With <a href=\"https://peps.python.org/pep-0678/\" rel=\"noreferrer\">PEP 678</a> (Python 3.11) adding notes to exceptions is natively supported:</p>\n<pre class=\"lang-py prettyprint-override\"><code>try:\n  raise TypeError('bad type')\nexcept Exception as e:\n  e.add_note('Add some information')\n  raise\n</code></pre>\n<p>Rendered as:</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;\nTypeError: bad type\nAdd some information\n</code></pre>\n<p>I was hopping it could replace <a href=\"https://stackoverflow.com/a/6062677/4172685\">Steve Howard solution</a>, Unfortunately, it does not give user any control on how to format the final exception (e.g. can't add a note before the exception like: <code>'Error in fn: {original_exc}'</code>)</p>\n<p>If you want more control on the traceback, you can use <a href=\"https://github.com/google/etils\" rel=\"noreferrer\">https://github.com/google/etils</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from etils import epy\n\nwith epy.maybe_reraise('Error in fn: '):\n  fn()\n</code></pre>\n<p>Or:</p>\n<pre class=\"lang-py prettyprint-override\"><code>try:\n  fn()\nexcept Exception as e:\n  epy.reraise(e, suffix='. Did you mean y ?')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16767410,
                        "reputation": 37,
                        "user_id": 12120743,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ca97efe1bc3ee33d1f91c56cbd26a0de?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "IgnacioT",
                        "link": "https://stackoverflow.com/users/12120743/ignaciot"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1660063567,
                    "creation_date": 1660063567,
                    "answer_id": 73295409,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use in my codes:</p>\n<pre><code>try:\n    a=1\n    b=0\n    c=a/b\n\nexcept:\n    raise Exception(f&quot;can't divide {a} with {b}&quot;)\n</code></pre>\n<p>output:</p>\n<pre><code>---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\n~\\AppData\\Local\\Temp/ipykernel_11708/1469673756.py in &lt;module&gt;\n      3     b=0\n----&gt; 4     c=a/b\n      5 \n\nZeroDivisionError: division by zero\n\nDuring handling of the above exception, another exception occurred:\n\nException                                 Traceback (most recent call last)\n~\\AppData\\Local\\Temp/ipykernel_11708/1469673756.py in &lt;module&gt;\n      5 \n      6 except Exception:\n----&gt; 7     raise Exception(f&quot;can't divide {a} with {b}&quot;)\n\nException: can't divide 1 with 0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1830774,
                        "reputation": 134,
                        "user_id": 1662230,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/34c3539392fe86f906907b80e02fe320?s=256&d=identicon&r=PG",
                        "display_name": "Magnus Lind Oxlund",
                        "link": "https://stackoverflow.com/users/1662230/magnus-lind-oxlund"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1649610133,
                    "last_edit_date": 1649610133,
                    "creation_date": 1649609645,
                    "answer_id": 71818728,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's what I use for personal projects (I'm sure there's ample reason not to do this in production code):</p>\n<pre><code>try:\n    #something hazardous\nexcept Exception as e:\n    insightful_message = &quot;shouldn't have done that&quot;\n    amended_args = tuple([f'{e.args[0]}\\n{insightful_message}', *e.args[1:]])\n    e.args = amended_args\n    raise\n</code></pre>\n<p>The code (1) intercepts the error; (2) creates a copy of the error's <code>.args</code> property, which is a tuple that is assumed to include an error message at index <code>0</code>, achieved using a list comprehension; (3) appends a line break and a custom message to the error message; (4) appends any additional items of <code>.args</code> to the copy using\nunpacking; (5) converts the copy to a tuple; and finally (6) replaces <code>.args</code> with the amended copy.</p>\n<p>Most of these operations are to circumvent the immutability of the <code>.args</code> tuple.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12519365,
                        "reputation": 81,
                        "user_id": 9200430,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/qIRk4.jpg?s=256",
                        "display_name": "schperplata",
                        "link": "https://stackoverflow.com/users/9200430/schperplata"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1629379736,
                    "creation_date": 1629379736,
                    "answer_id": 68848804,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is my implementation, to use it as a context manager and optionally add extra message to exception:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from typing import Optional, Type\nfrom types import TracebackType\n\nclass _addInfoOnException():\n    def __init__(self, info: str = &quot;&quot;):\n        self.info = info\n\n    def __enter__(self):\n        return\n\n    def __exit__(self,\n                 exc_type: Optional[Type[BaseException]],\n                 exc_val: BaseException,  # Optional, but not None if exc_type is not None\n                 exc_tb: TracebackType):  # Optional, but not None if exc_type is not None\n        if exc_type:\n            if self.info:\n                newMsg = f&quot;{self.info}\\n\\tLow level error: &quot;\n                if len(exc_val.args) == 0:\n                    exc_val.args = (self.info, )\n                elif len(exc_val.args) == 1:\n                    exc_val.args = (f&quot;{newMsg}{exc_val.args[0]}&quot;, )\n                elif len(exc_val.args) &gt; 0:\n                    exc_val.args = (f&quot;{newMsg}{exc_val.args[0]}&quot;, exc_val.args[1:])\n            raise\n</code></pre>\n<p>Usage:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def main():\n    try:\n        raise Exception(&quot;Example exception msg&quot;)\n    except Exception:\n        traceback.print_exc()\n        print(&quot;\\n\\n&quot;)\n\n    try:\n        with _addInfoOnException():\n            raise Exception(&quot;Example exception msg, no extra info&quot;)\n    except Exception:\n        traceback.print_exc()\n        print(&quot;\\n\\n&quot;)\n\n    try:\n        with _addInfoOnException(&quot;Some extra info!&quot;):\n            raise Exception(&quot;Example exception msg&quot;)\n    except Exception:\n        traceback.print_exc()\n        print(&quot;\\n\\n&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n<p>This would resolve in such traceback:</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;&lt;...&gt;\\VSCodeDevWorkspace\\testis.py&quot;, line 40, in main\n    raise Exception(&quot;Example exception msg&quot;)\nException: Example exception msg\n\n\n\nTraceback (most recent call last):\n  File &quot;&lt;...&gt;\\VSCodeDevWorkspace\\testis.py&quot;, line 47, in main\n    raise Exception(&quot;Example exception msg, no extra info&quot;)\n  File &quot;&lt;...&gt;\\VSCodeDevWorkspace\\testis.py&quot;, line 47, in main\n    raise Exception(&quot;Example exception msg, no extra info&quot;)\nException: Example exception msg, no extra info\n\n\n\nTraceback (most recent call last):\n  File &quot;&lt;...&gt;\\VSCodeDevWorkspace\\testis.py&quot;, line 54, in main\n    raise Exception(&quot;Example exception msg&quot;)\n  File &quot;&lt;...&gt;\\VSCodeDevWorkspace\\testis.py&quot;, line 54, in main\n    raise Exception(&quot;Example exception msg&quot;)\nException: Some extra info!\n        Low level error: Example exception msg\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1013311,
                        "reputation": 6174,
                        "user_id": 1025430,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hNcOr.png?s=256",
                        "display_name": "Chris",
                        "link": "https://stackoverflow.com/users/1025430/chris"
                    },
                    "is_accepted": false,
                    "score": 272,
                    "last_activity_date": 1597762347,
                    "last_edit_date": 1597762347,
                    "creation_date": 1504771566,
                    "answer_id": 46091127,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In case you came here searching for a solution for Python 3 <a href=\"https://docs.python.org/3/library/exceptions.html#built-in-exceptions\" rel=\"noreferrer\">the manual</a>  says:</p>\n<blockquote>\n<p>When raising a new exception (rather than using a bare <code>raise</code> to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using <code>from</code> with <code>raise</code>:</p>\n</blockquote>\n<pre><code>raise new_exc from original_exc\n</code></pre>\n<hr />\n<p>Example:</p>\n<pre><code>try:\n    return [permission() for permission in self.permission_classes]\nexcept TypeError as e:\n    raise TypeError(&quot;Make sure your view's 'permission_classes' are iterable. &quot;\n                    &quot;If you use '()' to generate a set with a single element &quot;\n                    &quot;make sure that there is a comma behind the one (element,).&quot;) from e\n</code></pre>\n<p>Which looks like this in the end:</p>\n<pre class=\"lang-none prettyprint-override\"><code>2017-09-06 16:50:14,797 [ERROR] django.request: Internal Server Error: /v1/sendEmail/\nTraceback (most recent call last):\nFile &quot;venv/lib/python3.4/site-packages/rest_framework/views.py&quot;, line 275, in get_permissions\n    return [permission() for permission in self.permission_classes]\nTypeError: 'type' object is not iterable \n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n    # Traceback removed...\nTypeError: Make sure your view's Permission_classes are iterable. If \n     you use parens () to generate a set with a single element make \n     sure that there is a (comma,) behind the one element.\n</code></pre>\n<p>Turning a totally nondescript <code>TypeError</code> into a nice message with hints towards a solution without messing up the original Exception.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 432592,
                        "reputation": 1356,
                        "user_id": 817447,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ba0fabd6649ccdec7643fb0206727e3a?s=256&d=identicon&r=PG",
                        "display_name": "Kee",
                        "link": "https://stackoverflow.com/users/817447/kee"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1576224520,
                    "last_edit_date": 1576224520,
                    "creation_date": 1347369032,
                    "answer_id": 12370499,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One handy approach that I used is to use class attribute as storage for details, as class attribute is accessible both from class object and class instance: </p>\n\n<pre><code>class CustomError(Exception):\n    def __init__(self, details: Dict):\n        self.details = details\n</code></pre>\n\n<p>Then in your code:</p>\n\n<pre><code>raise CustomError({'data': 5})\n</code></pre>\n\n<p>And when catching an error:</p>\n\n<pre><code>except CustomError as e:\n    # Do whatever you want with the exception instance\n    print(e.details)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": true,
                    "score": 159,
                    "last_activity_date": 1570637981,
                    "last_edit_date": 1570637981,
                    "creation_date": 1305827625,
                    "answer_id": 6062799,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'd do it like this so changing its type in <code>foo()</code> won't require also changing it in <code>bar()</code>.</p>\n\n<pre><code>def foo():\n    try:\n        raise IOError('Stuff')\n    except:\n        raise\n\ndef bar(arg1):\n    try:\n        foo()\n    except Exception as e:\n        raise type(e)(e.message + ' happens at %s' % arg1)\n\nbar('arg1')\n</code></pre>\n\n<hr>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"test.py\", line 13, in &lt;module&gt;\n    bar('arg1')\n  File \"test.py\", line 11, in bar\n    raise type(e)(e.message + ' happens at %s' % arg1)\nIOError: Stuff happens at arg1\n</code></pre>\n\n<p><strong>Update 1</strong></p>\n\n<p>Here's a slight modification that preserves the original traceback:</p>\n\n<pre><code>...\ndef bar(arg1):\n    try:\n        foo()\n    except Exception as e:\n        import sys\n        raise type(e), type(e)(e.message +\n                               ' happens at %s' % arg1), sys.exc_info()[2]\n\nbar('arg1')\n</code></pre>\n\n<hr>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"test.py\", line 16, in &lt;module&gt;\n    bar('arg1')\n  File \"test.py\", line 11, in bar\n    foo()\n  File \"test.py\", line 5, in foo\n    raise IOError('Stuff')\nIOError: Stuff happens at arg1\n</code></pre>\n\n<p><strong>Update 2</strong></p>\n\n<p>For Python 3.x, the code in my first update is syntactically incorrect plus the idea of having a <code>message</code> attribute on <code>BaseException</code> was <a href=\"http://www.python.org/dev/peps/pep-0352/#retracted-ideas\" rel=\"noreferrer\">retracted in a change to PEP 352</a> on 2012-05-16 (my first update was posted on 2012-03-12). So currently, in Python 3.5.2 anyway, you'd need to do something along these lines to preserve the traceback and not hardcode the type of exception in function <code>bar()</code>. Also note that there will be the line:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>During handling of the above exception, another exception occurred:\n</code></pre>\n\n<p>in the traceback messages displayed.</p>\n\n<pre><code># for Python 3.x\n...\ndef bar(arg1):\n    try:\n        foo()\n    except Exception as e:\n        import sys\n        raise type(e)(str(e) +\n                      ' happens at %s' % arg1).with_traceback(sys.exc_info()[2])\n\nbar('arg1')\n</code></pre>\n\n<p><strong>Update 3</strong></p>\n\n<p>A commenter asked if there was a way that would work in both Python 2 and 3. Although the answer might seem to be \"No\" due to the syntax differences, there <em>is</em> a way around that by using a helper function like <a href=\"http://pythonhosted.org/six/index.html#six.reraise\" rel=\"noreferrer\"><code>reraise()</code></a> in the <a href=\"https://pypi.python.org/pypi/six/\" rel=\"noreferrer\"><code>six</code></a> add-on module. So, if you'd rather not use the library for some reason, below is a simplified standalone version.</p>\n\n<p>Note too, that since the exception is reraised within the <code>reraise()</code> function, that will appear in whatever traceback is raised, but the final result is what you want.</p>\n\n<pre><code>import sys\n\nif sys.version_info.major &lt; 3:  # Python 2?\n    # Using exec avoids a SyntaxError in Python 3.\n    exec(\"\"\"def reraise(exc_type, exc_value, exc_traceback=None):\n                raise exc_type, exc_value, exc_traceback\"\"\")\nelse:\n    def reraise(exc_type, exc_value, exc_traceback=None):\n        if exc_value is None:\n            exc_value = exc_type()\n        if exc_value.__traceback__ is not exc_traceback:\n            raise exc_value.with_traceback(exc_traceback)\n        raise exc_value\n\ndef foo():\n    try:\n        raise IOError('Stuff')\n    except:\n        raise\n\ndef bar(arg1):\n    try:\n       foo()\n    except Exception as e:\n        reraise(type(e), type(e)(str(e) +\n                                 ' happens at %s' % arg1), sys.exc_info()[2])\n\nbar('arg1')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12237736,
                        "reputation": 199,
                        "user_id": 8931626,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dd9dc48f54ebe8f72760601145786fe8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "6EQUJ5",
                        "link": "https://stackoverflow.com/users/8931626/6equj5"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1570633307,
                    "last_edit_date": 1570633307,
                    "creation_date": 1570453816,
                    "answer_id": 58270258,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I don't like all the given answers so far. They are still too verbose imho. In either code and message output.</p>\n\n<p>All i want to have is the stacktrace pointing to the source exception, no exception stuff in between, so no creation of new exceptions, just re-raising the original with all the <em>relevant</em> stack frame states in it, that led there.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/6062576/adding-information-to-an-exception#answer-6062677\">Steve Howard</a> gave a nice answer which i want to extend, no, reduce ... to python 3 only.</p>\n\n<pre><code>except Exception as e:\n    e.args = (\"Some failure state\", *e.args)\n    raise\n</code></pre>\n\n<p>The only new thing is the <a href=\"https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/#Asterisks_for_unpacking_into_function_call\" rel=\"noreferrer\">parameter expansion/unpacking</a> which makes it small and easy enough for me to use. </p>\n\n<p>Try it:</p>\n\n<pre><code>foo = None\n\ntry:\n    try:\n        state = \"bar\"\n        foo.append(state)\n\n    except Exception as e:\n        e.args = (\"Appending '\"+state+\"' failed\", *e.args)\n        raise\n\n    print(foo[0]) # would raise too\n\nexcept Exception as e:\n    e.args = (\"print(foo) failed: \" + str(foo), *e.args)\n    raise\n</code></pre>\n\n<p>This will give you:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"test.py\", line 6, in &lt;module&gt;\n    foo.append(state)\nAttributeError: ('print(foo) failed: None', \"Appending 'bar' failed\", \"'NoneType' object has no attribute 'append'\")\n</code></pre>\n\n<p>A simple pretty-print could be something like</p>\n\n<pre><code>print(\"\\n\".join( \"-\"*i+\" \"+j for i,j in enumerate(e.args)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 200669,
                        "reputation": 6947,
                        "user_id": 446649,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/wdJbC.jpg?s=256",
                        "display_name": "Jessica",
                        "link": "https://stackoverflow.com/users/446649/jessica"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1541451136,
                    "last_edit_date": 1541451136,
                    "creation_date": 1305827015,
                    "answer_id": 6062677,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Assuming you don't want to or can't modify foo(), you can do this:</p>\n\n<p></p>\n\n<pre><code>try:\n    raise IOError('stuff')\nexcept Exception as e:\n    if len(e.args) &gt;= 1:\n        e.args = (e.args[0] + ' happens',) + e.args[1:]\n    raise\n</code></pre>\n\n<p>This is indeed the only solution here that solves the problem in Python 3 without an ugly and confusing \"During handling of the above exception, another exception occurred\" message.</p>\n\n<p>In case the re-raising line should be added to the stack trace, writing <code>raise e</code> instead of <code>raise</code> will do the trick.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1593422,
                        "reputation": 27973,
                        "user_id": 1476240,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9efe21dae34f1994347ecfa1f18e55bc?s=256&d=identicon&r=PG",
                        "display_name": "Pedro M Duarte",
                        "link": "https://stackoverflow.com/users/1476240/pedro-m-duarte"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1487653232,
                    "creation_date": 1487653232,
                    "answer_id": 42359068,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I will provide a snippet of code that I use often whenever I want to add extra info to an exception.  I works both in Python 2.7 and 3.6.  </p>\n\n<pre><code>import sys\nimport traceback\n\ntry:\n    a = 1\n    b = 1j\n\n    # The line below raises an exception because\n    # we cannot compare int to complex.\n    m = max(a, b)  \n\nexcept Exception as ex:\n    # I create my  informational message for debugging:\n    msg = \"a=%r, b=%r\" % (a, b)\n\n    # Gather the information from the original exception:\n    exc_type, exc_value, exc_traceback = sys.exc_info()\n\n    # Format the original exception for a nice printout:\n    traceback_string = ''.join(traceback.format_exception(\n        exc_type, exc_value, exc_traceback))\n\n    # Re-raise a new exception of the same class as the original one, \n    # using my custom message and the original traceback:\n    raise type(ex)(\"%s\\n\\nORIGINAL TRACEBACK:\\n\\n%s\\n\" % (msg, traceback_string))\n</code></pre>\n\n<p>The code above results in the following output: </p>\n\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-09b74752c60d&gt; in &lt;module&gt;()\n     14     raise type(ex)(\n     15         \"%s\\n\\nORIGINAL TRACEBACK:\\n\\n%s\\n\" %\n---&gt; 16         (msg, traceback_string))\n\nTypeError: a=1, b=1j\n\nORIGINAL TRACEBACK:\n\nTraceback (most recent call last):\n  File \"&lt;ipython-input-6-09b74752c60d&gt;\", line 7, in &lt;module&gt;\n    m = max(a, b)  # Cannot compare int to complex\nTypeError: no ordering relation is defined for complex numbers\n</code></pre>\n\n<p><br> </p>\n\n<p>I know this deviates a little from the example provided in the question, but nevertheless I hope someone finds it useful. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 49328,
                        "reputation": 38402,
                        "user_id": 146821,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://www.gravatar.com/avatar/cfb031c34e0927a9ce5d68779379e6ad?s=256&d=identicon&r=PG",
                        "display_name": "bukzor",
                        "link": "https://stackoverflow.com/users/146821/bukzor"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1386804788,
                    "creation_date": 1386804788,
                    "answer_id": 20532167,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Unlike previous answers, this works in the face of exceptions with really bad <code>__str__</code>.\nIt <em>does</em> modify the type however, in order to factor out unhelpful <code>__str__</code> implementations.</p>\n\n<p>I'd still like to find an additional improvement that doesn't modify the type.</p>\n\n<pre><code>from contextlib import contextmanager\n@contextmanager\ndef helpful_info():\n    try:\n        yield\n    except Exception as e:\n        class CloneException(Exception): pass\n        CloneException.__name__ = type(e).__name__\n        CloneException.__module___ = type(e).__module__\n        helpful_message = '%s\\n\\nhelpful info!' % e\n        import sys\n        raise CloneException, helpful_message, sys.exc_traceback\n\n\nclass BadException(Exception):\n    def __str__(self):\n        return 'wat.'\n\nwith helpful_info():\n    raise BadException('fooooo')\n</code></pre>\n\n<p>The original traceback and type (name) are preserved.</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"re_raise.py\", line 20, in &lt;module&gt;\n    raise BadException('fooooo')\n  File \"/usr/lib64/python2.6/contextlib.py\", line 34, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"re_raise.py\", line 5, in helpful_info\n    yield\n  File \"re_raise.py\", line 20, in &lt;module&gt;\n    raise BadException('fooooo')\n__main__.BadException: wat.\n\nhelpful info!\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 392705,
                        "reputation": 309,
                        "user_id": 754137,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f04c7d62d95dea364fc56a7a9eddef68?s=256&d=identicon&r=PG",
                        "display_name": "Alexander Kiselev",
                        "link": "https://stackoverflow.com/users/754137/alexander-kiselev"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1305826959,
                    "creation_date": 1305826959,
                    "answer_id": 6062657,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can define your own exception that inherits from another and create it's own constructor to set value.</p>\n\n<p>For example:</p>\n\n<pre><code>class MyError(Exception):\n   def __init__(self, value):\n     self.value = value\n     Exception.__init__(self)\n\n   def __str__(self):\n     return repr(self.value)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 85749,
                        "reputation": 44268,
                        "user_id": 238884,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/febf321631229c7408834722691c06e9?s=256&d=identicon&r=PG",
                        "display_name": "Michael Lorton",
                        "link": "https://stackoverflow.com/users/238884/michael-lorton"
                    },
                    "is_accepted": false,
                    "score": -7,
                    "last_activity_date": 1305826931,
                    "creation_date": 1305826931,
                    "answer_id": 6062653,
                    "question_id": 6062576,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Maybe</p>\n\n<pre><code>except Exception as e:\n    raise IOError(e.message + 'happens at %s'%arg1)\n</code></pre>\n"
                }
            ]
        },
        {
            "3506678": [
                {
                    "owner": {
                        "account_id": 4788,
                        "reputation": 22821,
                        "user_id": 7376,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/5b984e34330d801c7ba96f53c2a312e9?s=256&d=identicon&r=PG",
                        "display_name": "Tom",
                        "link": "https://stackoverflow.com/users/7376/tom"
                    },
                    "is_accepted": true,
                    "score": 73,
                    "last_activity_date": 1392057896,
                    "last_edit_date": 1495541402,
                    "creation_date": 1282077159,
                    "answer_id": 3506692,
                    "question_id": 3506678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>Content.objects.all().order_by('?')[:100]\n</code></pre>\n\n<p>See the <a href=\"http://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by-fields\" rel=\"noreferrer\">order_by docs</a>. Also be aware this approach does not scale well (in fact, it scales really, really badly). See <a href=\"https://stackoverflow.com/questions/1731346/how-to-get-two-random-records-with-django/6405601#6405601\">this SO answer</a> for a better way to handle random selection when you have large amounts of data.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 82841,
                        "reputation": 5458,
                        "user_id": 232649,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/27VQS.jpg?s=256",
                        "display_name": "Pratyush",
                        "link": "https://stackoverflow.com/users/232649/pratyush"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1338901967,
                    "last_edit_date": 1338901967,
                    "creation_date": 1338898731,
                    "answer_id": 10897176,
                    "question_id": 3506678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I do:</p>\n\n<pre><code>import random    \nobject_list = list(Content.objects.filter(foo=bar).values()[:100])\nrandom.shuffle(object_list)\n</code></pre>\n\n<p>Runs only single-simple MySQL query and is good on performance.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1282129506,
                    "last_edit_date": 1282129506,
                    "creation_date": 1282077770,
                    "answer_id": 3506779,
                    "question_id": 3506678,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're going to do this more than once, you need to design this into your database.</p>\n\n<p>If you're doing it once, you can afford to pay the hefty penalty.  This gets you exactly 100 with really good random properties.  However, it uses a lot of memory.</p>\n\n<pre><code>pool= list( Content.objects.all() )\nrandom.shuffle( pool )\nobject_list = pool[:100]\n</code></pre>\n\n<p>Here's another algorithm that's also kind of slow since it may search the entire table.  It doesn't use very much memory at all and it may not get exactly 100.</p>\n\n<pre><code>total_count= Content.objects.count()\nfraction = 100./total_count\nobject_list = [ c for c in Content.objects.all() if random.random() &lt; fraction ]\n</code></pre>\n\n<p>If you want to do this more than once, you need to add an attribute to Content to allow effective filtering for \"random\" values.  For example, you might do this.</p>\n\n<pre><code>class Content( models.Model ):\n    ... etc. ...\n    def subset( self ):\n        return self.id % 32768\n</code></pre>\n\n<p>This will partition your data into 32768 distinct subsets.  Each subset is 1/32768'th of your data.  To get 100 random items, you need 100*32768/total_count subsets of your data.</p>\n\n<pre><code>total_count = Content.objects.count()\nno_of_subsets= 100*32768/total_count\nobject_list = Content.objects.filter( subset__lte=no_of_subsets )\n</code></pre>\n\n<p>This is <strong>fast</strong> and it's reproducible.  The subsets are \"arbitrary\" not technically \"random\".</p>\n"
                }
            ]
        },
        {
            "60842487": [
                {
                    "owner": {
                        "account_id": 291102,
                        "reputation": 647,
                        "user_id": 593045,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/65edf04a61687fa9286fc7d10a159667?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "BitLauncher",
                        "link": "https://stackoverflow.com/users/593045/bitlauncher"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1638367499,
                    "creation_date": 1638367499,
                    "answer_id": 70185640,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same problem (and others).</p>\n<p>Finally it was caused <strong>due to multiple Python installations</strong>.</p>\n<p>I had already installed once python in C:\\Programs\\Python\\python38-32 (in system's PATH) and used it in command line.</p>\n<p>So while installing of Visual Studio Code - I assume - another instance of Python was (automatically) installed to c:\\users&lt;username&gt;\\appdata\\local\\programs\\python\\python37-32.\nAnd I had both installation locations in the PATH variable:</p>\n<ul>\n<li>c:\\users&lt;username&gt;\\appdata\\local\\programs\\python\\python37-32 in user's PATH</li>\n<li>and C:\\Programs\\Python\\python38-32 in the system's PATH variable.</li>\n</ul>\n<p>So I removed the path C:\\Programs\\Python\\python38-32 from the system's environment variable PATH. Restarted Visual Studio Code.</p>\n<p>And so I could now run &quot;pip install flask&quot; without complaining about pip should be updated from 19.x to 21.y - what was an additional strange behavior in my case.</p>\n<p>Afterwards I could run the code in the Visual Studio Code's terminal by e. g. &quot;python webapp.py&quot;.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10219341,
                        "reputation": 87,
                        "user_id": 7543963,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8bd786caad080413e38b0705c24c84ed?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Preeti Duhan",
                        "link": "https://stackoverflow.com/users/7543963/preeti-duhan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627488365,
                    "creation_date": 1627488365,
                    "answer_id": 68563816,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>PS C:\\Users\\preet\\Documents\\django-project&gt; <code>py get-pip.py</code></p>\n<p>Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings &gt; Manage App Execution Aliases.</p>\n<p>PS C:\\Users\\preet\\Documents\\django-project&gt;<code> py -m ensurepip --upgrade</code></p>\n<p>Looking in links: c:\\Users\\preet\\AppData\\Local\\Temp\\tmp9k7p19jq\nProcessing c:\\users\\preet\\appdata\\local\\temp\\tmp9k7p19jq\\setuptools-56.0.0-py3-none-any.whl\nProcessing c:\\users\\preet\\appdata\\local\\temp\\tmp9k7p19jq\\pip-21.1.3-py3-none-any.whl\nInstalling collected packages: setuptools, pip\nWARNING: The scripts pip3.9.exe and pip3.exe are installed in 'C:\\Python39\\Scripts' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\nSuccessfully installed pip-21.1.3 setuptools-56.0.0</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6159323,
                        "reputation": 1751,
                        "user_id": 4803703,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/dzPHl.jpg?s=256",
                        "display_name": "ZealousWeb",
                        "link": "https://stackoverflow.com/users/4803703/zealousweb"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1608606791,
                    "creation_date": 1608606791,
                    "answer_id": 65402781,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Type Python3 in console window.\nIt will take you to Microsoft Store for installing Python.\n<a href=\"https://i.sstatic.net/nJ656.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/nJ656.png\" alt=\"enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 20266609,
                        "reputation": 101,
                        "user_id": 14863641,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gg0Q_sYsE748uRsIHZ0EqFKX99IQyjo3F9i8pfW=k-s256",
                        "display_name": "Bipul Kumar",
                        "link": "https://stackoverflow.com/users/14863641/bipul-kumar"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1608543852,
                    "last_edit_date": 1608543852,
                    "creation_date": 1608536950,
                    "answer_id": 65389146,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think you need to install python from microsoft window store. <a href=\"https://i.sstatic.net/AyqOe.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/AyqOe.png\" alt=\"enter image description here\" /></a>And also install python from python.org</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16216504,
                        "reputation": 181,
                        "user_id": 11709206,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-1_yMnD5T-w8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rf-7YoNK7kEHsyzGRdcjU0K191miw/photo.jpg?sz=256",
                        "display_name": "Aniyarath",
                        "link": "https://stackoverflow.com/users/11709206/aniyarath"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1608215192,
                    "creation_date": 1608215192,
                    "answer_id": 65342590,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Prior to do &quot;start -&gt; then search -&gt; Manage App Execution Aliases -&gt; turn off&quot; make sure that you have added PYTHONPATH with details (C:\\Program Files\\Python37;) in system-environment-variable. Then do the &quot;turn-off&quot; as mentioned above. This will work</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19116799,
                        "reputation": 435,
                        "user_id": 13961522,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GhR3ZMz7aHKKVipsPHft-WxynFFdBQLZvpCDT-G=k-s256",
                        "display_name": "Raj Kalathiya",
                        "link": "https://stackoverflow.com/users/13961522/raj-kalathiya"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1608127896,
                    "creation_date": 1608127896,
                    "answer_id": 65324911,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Go to start -&gt; then search -&gt; Manage App Execution Aliases -&gt; turn off</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6006688,
                        "reputation": 5485,
                        "user_id": 4718406,
                        "user_type": "registered",
                        "accept_rate": 36,
                        "profile_image": "https://i.sstatic.net/0iJqV.jpg?s=256",
                        "display_name": "Erfan Eghterafi",
                        "link": "https://stackoverflow.com/users/4718406/erfan-eghterafi"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1608061650,
                    "creation_date": 1608061650,
                    "answer_id": 65312700,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>python install directory, bin, and lib-scripts must be to the top of  WindowsApps directory, like the image below</p>\n<p><a href=\"https://i.sstatic.net/1tr6Z.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/1tr6Z.png\" alt=\"enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 12492781,
                        "reputation": 187,
                        "user_id": 9093801,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-K_RfpGeP_mM/AAAAAAAAAAI/AAAAAAAABFw/JD2XlRYYWcM/photo.jpg?sz=256",
                        "display_name": "Misan",
                        "link": "https://stackoverflow.com/users/9093801/misan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1606340085,
                    "creation_date": 1606340085,
                    "answer_id": 65013018,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Sometimes this happens if you are using a virtual environment and you have not activated it on your command prompt.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 84699,
                        "reputation": 15840,
                        "user_id": 236574,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e8600d16ba667cc8d7f00ddc9f254340?s=256&d=identicon&r=PG",
                        "display_name": "Brett Cannon",
                        "link": "https://stackoverflow.com/users/236574/brett-cannon"
                    },
                    "is_accepted": true,
                    "score": 35,
                    "last_activity_date": 1585259844,
                    "creation_date": 1585259844,
                    "answer_id": 60876823,
                    "question_id": 60842487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You don't have the command <code>python</code> installed into your <code>PATH</code> on Windows which is the default if you didn't get your copy of Python from the Windows Store. If you selected your Python interpreter in VS Code (look in the status bar), then I would disable Code Runner. That way the Python extension is what provides the ability to run Python (the Play button will be green instead of white).</p>\n"
                }
            ]
        },
        {
            "7299685": [
                {
                    "owner": {
                        "account_id": 17124439,
                        "reputation": 1,
                        "user_id": 12391992,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mA9V9JAahZA4oYP5xR3arDWVa666WrRYkpxAIu2og=k-s256",
                        "display_name": "otm3232",
                        "link": "https://stackoverflow.com/users/12391992/otm3232"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1576572305,
                    "creation_date": 1576572305,
                    "answer_id": 59370468,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you can go to settings and enable Linux beta if your Chromebook is new enough. This will give you access to a terminal where you can code.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user11229202"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1553535482,
                    "creation_date": 1553535482,
                    "answer_id": 55343587,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>There are two ways to use Linux on Chromebook.</h2>\n\n<ol>\n<li>You can use developer mode<sup>1</sup>. Once in developer mode, hit <code>Ctrl + Alt + t</code> to open chrome's chrosh shell. You can then type <code>shell</code> to open a Linux terminal. \n<br><br></li>\n<li>You can use Chromebook's Linux container. Go to the settings app and search <code>Linux (Beta)</code>. Click <code>turn on</code> and follow it's instructions to set up Linux. This opens a separate container with your Linux files. If you do it this way, it helps to know it uses Debian 9.\n<br><br><br>\n<sup>1</sup><strong>How to turn on developer mode:</strong><br>\n\n<ol>\n<li>Read all instruction before trying out.<br></li>\n<li>BACK UP YOUR FILES! They will be deleted in the process.<br></li>\n<li>Turn off your Chromebook.<br></li>\n<li>Hold the <code>Esc + Refresh(F3)</code> buttons and press the power button.<br></li>\n<li>You will be shown the recovery screen. Instead of following the instructions, press <code>Ctrl + d</code>.<br></li>\n<li>Press <code>enter</code> to confirm.</li>\n<li>Your device will reboot. When it is finished, you will see a screen saying \"OS Verification is Off\". Press <code>Ctrl + d</code> to bypass and go to your Chromebook with developer mode now on.<br></li>\n<li>Whenever you turn on your Chromebook, you will see the \"OS Verification\" screen. You always just press <code>Ctrl + d</code> to bypass. But be careful. if you press space, your Chromebook will go back out of developer mode (and delete your files).\n<br><br>\nHope this helps!</li>\n</ol></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 1304091,
                        "reputation": 3070,
                        "user_id": 1253428,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/ab308b1367f5d74a9c62abba65b99bd4?s=256&d=identicon&r=PG",
                        "display_name": "Carl Younger",
                        "link": "https://stackoverflow.com/users/1253428/carl-younger"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1416699407,
                    "last_edit_date": 1416699407,
                    "creation_date": 1337564644,
                    "answer_id": 10678702,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>These days, you can easily set up <a href=\"http://ipython.org/notebook.html\" rel=\"nofollow\">IPython Notebook</a> on a VM with any of a number of cloud service providers. EC2 has been done a bunch of times and is well documented, but pretty much any service that you can run a full Linux VM on should work.</p>\n\n<p>It works like a regular webapp. Your code runs on the server, so you can't program your Chomebook, just the VM, but that's better in a lot of circumstances.</p>\n\n<p>It's one popular option, even with people who have IPython installed locally, just because Cloud, but on Chrome OS, it makes even more sense to look at trying to get something like that set up, even if you use one of the other options to code offline.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1114033,
                        "reputation": 1600,
                        "user_id": 1103848,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/aMC26.jpg?s=256",
                        "display_name": "Sandeep Chayapathi",
                        "link": "https://stackoverflow.com/users/1103848/sandeep-chayapathi"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1406807451,
                    "last_edit_date": 1406807451,
                    "creation_date": 1362618362,
                    "answer_id": 15261253,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can also use <a href=\"https://github.com/dnschneid/crouton\" rel=\"noreferrer\">crouton</a> to install a chroot jail and then you are free to apt-get install any library that's compiles to armv7.</p>\n\n<p>I have a Samsung Chromebook and I have installed the GAE python sdk , emacs and clozure common lisp for development.</p>\n\n<p>Its super easy to set this up:</p>\n\n<ul>\n<li>Enter developer mode, for <a href=\"http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-arm-chromebook#TOC-Entering-Developer-Mode\" rel=\"noreferrer\">Samsung Chromebook follow this procedure</a>.</li>\n<li><a href=\"https://doc-04-24-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/vi496tbj7p1ub14jvgn76lsac75n6cnc/1406800800000/11280124234871543983/*/0B1QUtoJwc9L3c2F6S2Y4dzBtSzA?h=16653014193614665626&amp;e=download\" rel=\"noreferrer\">Download Crouton</a></li>\n<li>Ctrl-Alt-T to open terminal , type shell to open a bash shell and run\n$  sudo sh -e ~/Downloads/crouton</li>\n<li>after crouton finishes, to enter your new chroot\n$ /usr/local/bin/enter-chroot</li>\n</ul>\n\n<p>I have blogged about my experience <a href=\"https://www.rebelmouse.com/chayapathi/chromebook_the_future-118548486.html\" rel=\"noreferrer\">here</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4435643,
                        "reputation": 21,
                        "user_id": 3611563,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/05531c176ce847cfc2abbdffba48f6f2?s=256&d=identicon&r=PG",
                        "display_name": "Marto Kolev",
                        "link": "https://stackoverflow.com/users/3611563/marto-kolev"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1399455594,
                    "creation_date": 1399455594,
                    "answer_id": 23514161,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are some new information for the new Samsung Chromebook that was introduced in March 2014 with flash memory. It will detail how to install Ubuntu onto an SSD drive to allow for dual boot without needing to modify the internal ChromeOS. To boot into Ubuntu after install you type Ctrl-U. I will post some more info to my blog <a href=\"http://chastite.bg/\" rel=\"nofollow\">here</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 411768,
                        "reputation": 2805,
                        "user_id": 784439,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/97e51cff80153665d01c1ba59bd129ed?s=256&d=identicon&r=PG",
                        "display_name": "Ido Green",
                        "link": "https://stackoverflow.com/users/784439/ido-green"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1393488505,
                    "last_edit_date": 1393488505,
                    "creation_date": 1315201269,
                    "answer_id": 7304227,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let me try and answer each of your 3 questions:</p>\n\n<ol>\n<li>In dev mode you can hit <strong><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>T</kbd></strong> and get the shell. However, it's a trim/secure shell that won't let you do what you wish...</li>\n<li>You can load any type of OS from usb and install it. I have few friends that did it with ubuntu but each and everyone of them - moved back to chromeOS... may be, in your case it will be different :)</li>\n<li>Cloud9 is a cloud IDE that give you ability to develop in Python.</li>\n</ol>\n\n<p>You can read a blog post I wrote in the past about 'developers and chromebook' - <a href=\"http://greenido.wordpress.com/2011/07/04/web-developers-and-the-new-chromebook/\" rel=\"nofollow noreferrer\">http://greenido.wordpress.com/2011/07/04/web-developers-and-the-new-chromebook/</a></p>\n\n<p>Good luck!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2291438,
                        "reputation": 85,
                        "user_id": 2014125,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c0da86c1e773ba92bd5376f01db917ed?s=256&d=identicon&r=PG",
                        "display_name": "Sloan",
                        "link": "https://stackoverflow.com/users/2014125/sloan"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1360714378,
                    "last_edit_date": 1360714378,
                    "creation_date": 1359224696,
                    "answer_id": 14540088,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a guide for the new Samsung Chromebook that was introduced in October 2012 with flash memory. It will detail how to install Ubuntu onto an SSD drive to allow for dual boot without needing to modify the internal ChromeOS. To boot into Ubuntu after install you type Ctrl-U.     </p>\n\n<p>link:\n<a href=\"http://techfoobar.blogspot.com/2013/01/how-to-install-ubuntu-on-samsungs-new.html\">http://techfoobar.blogspot.com/2013/01/how-to-install-ubuntu-on-samsungs-new.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 49508,
                        "reputation": 28384,
                        "user_id": 147407,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/65f858d8a973f4ee8d97517a21a17e7d?s=256&d=identicon&r=PG",
                        "display_name": "Andrejs Cainikovs",
                        "link": "https://stackoverflow.com/users/147407/andrejs-cainikovs"
                    },
                    "is_accepted": true,
                    "score": 17,
                    "last_activity_date": 1315146358,
                    "creation_date": 1315146358,
                    "answer_id": 7299835,
                    "question_id": 7299685,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just enable <a href=\"http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook\" rel=\"noreferrer\">Developer Mode</a>, and you will get the access to the <a href=\"http://www.chromium.org/chromium-os/poking-around-your-chrome-os-device\" rel=\"noreferrer\">shell</a>.</p>\n"
                }
            ]
        },
        {
            "9945720": [
                {
                    "owner": {
                        "account_id": 10121867,
                        "reputation": 703,
                        "user_id": 7478525,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/967fde78300588782e40329c8d562e43?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "westman379",
                        "link": "https://stackoverflow.com/users/7478525/westman379"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1722982243,
                    "last_edit_date": 1722982243,
                    "creation_date": 1722957114,
                    "answer_id": 78839825,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <a href=\"https://pypi.org/project/ReverseBox/\" rel=\"nofollow noreferrer\">ReverseBox</a> <br>\nFor example if you want to get <strong>3 bits</strong> on <strong>position 5</strong> from <strong>number 2273</strong>, you can write something like this:</p>\n<pre><code>from reversebox.io_files.bytes_helper_functions import get_bits\nresult = get_bits(2273, 3, 5)\nprint(result)\n</code></pre>\n<p>Result:</p>\n<pre><code>7\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 216233,
                        "reputation": 4822,
                        "user_id": 471343,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61e9ddee4ca13b8e8c68d36b6c0aa63f?s=256&d=identicon&r=PG",
                        "display_name": "alan",
                        "link": "https://stackoverflow.com/users/471343/alan"
                    },
                    "is_accepted": true,
                    "score": 18,
                    "last_activity_date": 1582581248,
                    "last_edit_date": 1582581248,
                    "creation_date": 1333121015,
                    "answer_id": 9945916,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can strip off the leading bit using a mask ANDed with a byte from file. That will leave you with the value of the remaining bits:</p>\n\n<pre><code>mask =  0b01111111\nbyte_from_file = 0b10101010\nvalue = mask &amp; byte_from_file\nprint bin(value)\n&gt;&gt; 0b101010\nprint value\n&gt;&gt; 42\n</code></pre>\n\n<p>I find the binary numbers easier to understand than hex when doing bit-masking.</p>\n\n<p>EDIT: Slightly more complete example for your use case:</p>\n\n<pre><code>LEADING_BIT_MASK =  0b10000000\nVALUE_MASK = 0b01111111\n\nvalues = [0b10101010, 0b01010101, 0b0000000, 0b10000000]\n\nfor v in values:\n    value = v &amp; VALUE_MASK\n    has_leading_bit = v &amp; LEADING_BIT_MASK\n    if value == 0:\n        print \"EOL\"\n    elif has_leading_bit:\n        print \"leading one\", value\n    elif not has_leading_bit:\n        print \"leading zero\", value\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 86715,
                        "reputation": 22609,
                        "user_id": 240950,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/4b022f0d3cc5b2d5253295dd446b627d?s=256&d=identicon&r=PG",
                        "display_name": "Zaur Nasibov",
                        "link": "https://stackoverflow.com/users/240950/zaur-nasibov"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1532532596,
                    "last_edit_date": 1532532596,
                    "creation_date": 1333120583,
                    "answer_id": 9945785,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The classic approach of checking whether a bit is set, is to use binary \"and\" operator, i.e. </p>\n\n<pre><code>x = 10 # 1010 in binary\nif x &amp; 0b10:  # explicitly: x &amp; 0b0010 != 0\n    print('First bit is set')\n</code></pre>\n\n<p>To check, whether n^th bit is set, use the power of two, or better bit shifting</p>\n\n<pre><code>def is_set(x, n):\n    return x &amp; 2 ** n != 0 \n\n    # a more bitwise- and performance-friendly version:\n    return x &amp; 1 &lt;&lt; n != 0\n\nis_set(10, 1) # 1 i.e. first bit - as the count starts at 0-th bit\n&gt;&gt;&gt; True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 977791,
                        "reputation": 31,
                        "user_id": 998319,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0eb8d23dad407d7215d55e768e09f614?s=256&d=identicon&r=PG",
                        "display_name": "theonova",
                        "link": "https://stackoverflow.com/users/998319/theonova"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1333121303,
                    "creation_date": 1333121303,
                    "answer_id": 9946004,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Instead of int(bin(byte)[3:], 2), you could simply use: int(bin(byte>>1),2)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 346604,
                        "reputation": 5585,
                        "user_id": 680232,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/38cce921e36dd125da3d8b75e6dcd925?s=256&d=identicon&r=PG",
                        "display_name": "K.-Michael Aye",
                        "link": "https://stackoverflow.com/users/680232/k-michael-aye"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1333121297,
                    "creation_date": 1333121297,
                    "answer_id": 9945999,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>there you go:</p>\n\n<pre><code>class ControlWord(object):\n    \"\"\"Helper class to deal with control words.\n\n    Bit setting and checking methods are implemented.\n    \"\"\"\n    def __init__(self, value = 0):\n        self.value = int(value)\n    def set_bit(self, bit):\n        self.value |= bit\n    def check_bit(self, bit):\n        return self.value &amp; bit != 0\n    def clear_bit(self, bit):    \n        self.value &amp;= ~bit\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 70072,
                        "reputation": 36344,
                        "user_id": 203568,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4sgeN.jpg?s=256",
                        "display_name": "bgporter",
                        "link": "https://stackoverflow.com/users/203568/bgporter"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1333121232,
                    "creation_date": 1333121232,
                    "answer_id": 9945976,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do it like this:</p>\n\n<pre><code>def GetVal(b):\n   # mask off the most significant bit, see if it's set\n   flag = b &amp; 0x80 == 0x80\n   # then look at the lower 7 bits in the byte.\n   count = b &amp; 0x7f\n   # return a tuple indicating the state of the high bit, and the \n   # remaining integer value without the high bit.\n   return (flag, count)\n\n&gt;&gt;&gt; testVal = 50 + 0x80\n&gt;&gt;&gt; GetVal(testVal)\n(True, 50)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18279,
                        "reputation": 59463,
                        "user_id": 41747,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fbc53a4faffef3f7a1d0a3c492d21757?s=256&d=identicon&r=PG",
                        "display_name": "D.Shawley",
                        "link": "https://stackoverflow.com/users/41747/d-shawley"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1333120895,
                    "creation_date": 1333120895,
                    "answer_id": 9945882,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If I read your description correctly:</p>\n\n<pre><code>if (byte &amp; 0x80) != 0:\n    num_bytes = byte &amp; 0x7F\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1286794,
                        "reputation": 49037,
                        "user_id": 1239701,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/95ca4e887354416993fd91e2e16c4380?s=256&d=identicon&r=PG",
                        "display_name": "Not_a_Golfer",
                        "link": "https://stackoverflow.com/users/1239701/not-a-golfer"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1333120753,
                    "creation_date": 1333120753,
                    "answer_id": 9945838,
                    "question_id": 9945720,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>not sure I got you correctly, but if I did, this should do the trick:</p>\n\n<pre><code>&gt;&gt;&gt; x = 154 #just an example\n&gt;&gt;&gt; flag = x &gt;&gt; 1\n&gt;&gt;&gt; flag\n1\n&gt;&gt;&gt; nb = x &amp; 127\n&gt;&gt;&gt; nb\n26\n</code></pre>\n"
                }
            ]
        },
        {
            "15008380": [
                {
                    "owner": {
                        "account_id": 348370,
                        "reputation": 26120,
                        "user_id": 683020,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/dlm4l.jpg?s=256",
                        "display_name": "Silas Ray",
                        "link": "https://stackoverflow.com/users/683020/silas-ray"
                    },
                    "is_accepted": true,
                    "score": 165,
                    "last_activity_date": 1361467129,
                    "creation_date": 1361467129,
                    "answer_id": 15008404,
                    "question_id": 15008380,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>is</code> checks that 2 arguments refer to the same object, <code>==</code> checks that 2 arguments have the same value.  <code>dir()</code> returns a <code>list</code> which contains the same data for both <code>foo</code> and <code>10</code>, but the actual <code>list</code> instances for the 2 things are different.</p>\n"
                }
            ]
        },
        {
            "26272385": [
                {
                    "owner": {
                        "account_id": 5436,
                        "reputation": 168208,
                        "user_id": 8747,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b1ee0402d24625f555c25ea8511aad31?s=256&d=identicon&r=PG",
                        "display_name": "Rob\u1d69",
                        "link": "https://stackoverflow.com/users/8747/rob%e1%b5%a9"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1412945826,
                    "last_edit_date": 1412945826,
                    "creation_date": 1412873403,
                    "answer_id": 26283838,
                    "question_id": 26272385,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python, like many programs, tries to minimize the number of times it calls the <code>write</code> system call. It does this by collecting the output of several <code>print</code> statements before it actually writes them to its standard output file. This process is called buffering the output. </p>\n\n<p>When Python is connected to a terminal, it doesn't buffer its output. This makes sense, because the human at the terminal wants to see the output right away.</p>\n\n<p>When Python is writing to a file (or a pipe), it does buffer its output. This also makes sense, because no one will see the output until the process is complete</p>\n\n<p>You can defeat this optimization by calling <code>sys.stdout.flush()</code> whenever you want to force Python to write its buffered output to its standard output file. </p>\n\n<p>In your case, try this:</p>\n\n<pre><code>import sys\n...\nfor item in collection:\n    print \"what up\"\n    sys.stdout.flush()\n    #do complicated stuff that takes a long time.\n</code></pre>\n"
                }
            ]
        },
        {
            "918154": [
                {
                    "owner": {
                        "account_id": 2665108,
                        "reputation": 17368,
                        "user_id": 2303761,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://i.sstatic.net/IRUzX.jpg?s=256",
                        "display_name": "YaOzI",
                        "link": "https://stackoverflow.com/users/2303761/yaozi"
                    },
                    "is_accepted": false,
                    "score": 120,
                    "last_activity_date": 1672399349,
                    "last_edit_date": 1672399349,
                    "creation_date": 1530603646,
                    "answer_id": 51149057,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's 2018 now, and Python has already evolved to the <code>__future__</code> long time ago. So how about using the amazing <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a> coming with Python 3.4 to accomplish the task instead of struggling with <code>os</code>, <code>os.path</code>, <code>glob </code>, <code>shutil</code>, etc.</p>\n<p>So we have 3 paths here (possibly duplicated):</p>\n<ul>\n<li><code>mod_path</code>: which is the path of the <em>simple helper script</em></li>\n<li><code>src_path</code>: which contains <em>a couple of template files</em> waiting to be copied.</li>\n<li><code>cwd</code>: <em>current directory</em>, the destination of those template files.</li>\n</ul>\n<p>and the problem is: <strong>we don't have</strong> the full path of <code>src_path</code>, only know <strong>its relative path</strong> to the <code>mod_path</code>.</p>\n<p>Now let's solve this with the amazing <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a>:</p>\n<pre><code># Hope you don't be imprisoned by legacy Python code :)\nfrom pathlib import Path\n\n# `cwd`: current directory is straightforward\ncwd = Path.cwd()\n\n# `mod_path`: According to the accepted answer and combine with future power\n# if we are in the `helper_script.py`\nmod_path = Path(__file__).parent\n# OR if we are `import helper_script`\nmod_path = Path(helper_script.__file__).parent\n\n# `src_path`: with the future power, it's just so straightforward\nrelative_path_1 = 'same/parent/with/helper/script/'\nrelative_path_2 = '../../or/any/level/up/'\nsrc_path_1 = (mod_path / relative_path_1).resolve()\nsrc_path_2 = (mod_path / relative_path_2).resolve()\n</code></pre>\n<p>In the future, it's just that simple.</p>\n<hr />\n<p>Moreover, we can select and check and copy/move those template files with <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a>:</p>\n<pre><code>if src_path != cwd:\n    # When we have different types of files in the `src_path`\n    for template_path in src_path.glob('*.ini'):\n        fname = template_path.name\n        target = cwd / fname\n        if not target.exists():\n            # This is the COPY action\n            with target.open(mode='wb') as fd:\n                fd.write(template_path.read_bytes())\n            # If we want MOVE action, we could use:\n            # template_path.replace(target)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1086446,
                        "reputation": 10721,
                        "user_id": 1720199,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/cODPq.jpg?s=256",
                        "display_name": "cglacet",
                        "link": "https://stackoverflow.com/users/1720199/cglacet"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1659005566,
                    "last_edit_date": 1659005566,
                    "creation_date": 1602841081,
                    "answer_id": 64386647,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From what suggest others and from <a href=\"https://docs.python.org/3/library/pathlib.html#basic-use\" rel=\"nofollow noreferrer\">pathlib</a> documentation, a simple (but not ideal) solution is the following (suppose the file we need to refer to is <code>Test/data/users.csv</code>):</p>\n<pre class=\"lang-py prettyprint-override\"><code># Current file location: Tests/src/long/module/subdir/some_script.py\nfrom pathlib import Path\n\n# back to Tests/\nPROJECT_ROOT = Path(__file__).parents[4]\n# then down to Test/data/users.csv\nCSV_USERS_PATH = PROJECT_ROOT / 'data' / 'users.csv'  \n\nwith CSV_USERS_PATH.open() as users:\n    print(users.read())\n</code></pre>\n<p>This works but looks a bit odd because if you move <code>some_script.py</code> around, the path to the root of our project may change (and we would therefore need to change the <code>parents[4]</code> part).</p>\n<p>I think I found a better solution that, based on the same idea.\nWe will use a file <code>paths.py</code> to store where the root of the project is, this file will remain at the same location compared to the root directory.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>Tests\n\u251c\u2500\u2500 data\n\u2502  \u2514\u2500\u2500 users.csv\n\u2514\u2500\u2500 src\n   \u251c\u2500\u2500 long\n   \u2502  \u2514\u2500\u2500 module\n   \u2502     \u2514\u2500\u2500 subdir\n   \u2502        \u2514\u2500\u2500 some_script.py\n   \u251c\u2500\u2500 main.py\n   \u2514\u2500\u2500 paths.py\n</code></pre>\n<p>Where <code>paths.py</code>'s only responsability is to provide <code>PROJECT_ROOT</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pathlib import Path\n\nPROJECT_ROOT = Path(__file__).parents[1]\n</code></pre>\n<p>All scripts can now use <code>paths.PROJECT_ROOT</code> to express absolute paths from the root of the project. For example in <code>src/long/module/subdir/some_script.py</code> we could have:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from paths import PROJECT_ROOT\n\nCSV_USERS_PATH = PROJECT_ROOT / 'data' / 'users.csv'\n\ndef hello():\n    with CSV_USERS_PATH.open() as f:\n        print(f.read())\n</code></pre>\n<p>And everything goes as expected:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>~/Tests/src/$ python main.py\n\n/Users/cglacet/Tests/data/users.csv\nhello, user\n\n~/Tests/$ python src/main.py\n\n/Users/cglacet/Tests/data/users.csv\nhello, user\n</code></pre>\n<p>The <code>main.py</code> script simply is:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from long.module.subdir import some_script\n\nsome_script.hello()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15217482,
                        "reputation": 47,
                        "user_id": 10980414,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-iB7sIDHnUIw/AAAAAAAAAAI/AAAAAAAAACM/39HMW3mzg0s/photo.jpg?sz=256",
                        "display_name": "DanGitR",
                        "link": "https://stackoverflow.com/users/10980414/dangitr"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1643237175,
                    "creation_date": 1643237175,
                    "answer_id": 70871205,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This a simple way to add a <strong>relative</strong> path to the system path set . For example, for frequent case when the target directory is one level above (thus, <code>'/../'</code>) the working directory:</p>\n<pre><code>import os\nimport sys\nworkingDir = os.getcwd()\ntargetDir = os.path.join(os.path.relpath(workingDir + '/../'),'target_directory')\nsys.path.insert(0,targetDir)\n</code></pre>\n<p>This solution was tested for:</p>\n<blockquote>\n<p>Python 3.9.6 | packaged by conda-forge | (default, Jul 11 2021,\n03:37:25) [MSC v.1916 64 bit (AMD64)]</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 10945678,
                        "reputation": 136,
                        "user_id": 8043893,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/618f28598b0a9fcef41ec5c0e60f6789?s=256&d=identicon&r=PG",
                        "display_name": "Sophia",
                        "link": "https://stackoverflow.com/users/8043893/sophia"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1637129849,
                    "creation_date": 1637129849,
                    "answer_id": 69999696,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Say the current archive named &quot;Helper&quot; and the upper directory named &quot;Workshop&quot;, and the template files are in \\Workshop\\Templates, then the relative path in Python is &quot;..\\Templates&quot;.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1761212,
                        "reputation": 3817,
                        "user_id": 1608276,
                        "user_type": "registered",
                        "accept_rate": 28,
                        "profile_image": "https://i.sstatic.net/XiZ2q.jpg?s=256",
                        "display_name": "luochen1990",
                        "link": "https://stackoverflow.com/users/1608276/luochen1990"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1636595829,
                    "creation_date": 1636595829,
                    "answer_id": 69922354,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is my sumup:</p>\n<p>First, define the tool function named <code>relpath</code>, which convert a relative path to current file into a relative path to cwd</p>\n<pre><code>import os\nrelpath = lambda p: os.path.normpath(os.path.join(os.path.dirname(__file__), p))\n</code></pre>\n<p>Then we use it to wrap paths which is relative to current file</p>\n<pre><code>path1 = relpath('../src/main.py')\n</code></pre>\n<p>And you can also call <code>sys.path.append()</code> to import file relative to current file position</p>\n<pre><code>sys.path.append(relpath('..')) # so that you can import from upper dir\n</code></pre>\n<p>The full example code : <a href=\"https://gist.github.com/luochen1990/9b1ffa30f5c4a721dab5991e040e3eb1\" rel=\"nofollow noreferrer\">https://gist.github.com/luochen1990/9b1ffa30f5c4a721dab5991e040e3eb1</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3166247,
                        "reputation": 71,
                        "user_id": 2676197,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61eee1844dd3a4a400979341f439c8a9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "m.hasheminejad",
                        "link": "https://stackoverflow.com/users/2676197/m-hasheminejad"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1635442384,
                    "last_edit_date": 1635442384,
                    "creation_date": 1635439091,
                    "answer_id": 69757926,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Example</h3>\n<hr />\n<p>Here's an example, tested in Python '3.9.5`:</p>\n<p>your current directory: <code>'c:\\project1\\code\\'</code> <br>\nand you want to access the following folder: <code>'c:\\project1\\dataset\\train\\'</code>. <br>\nThen you can access the folder using the following address: <code>'../dataset/train/'</code></p>\n<h3>References</h3>\n<hr />\n<p>If you want some more information about <code>path in Python</code>, read this:</p>\n<ul>\n<li><a href=\"https://www.python.org/dev/peps/pep-0355/\" rel=\"nofollow noreferrer\"><code>PEP - 355</code></a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0519/\" rel=\"nofollow noreferrer\"><code>PEP - 519</code></a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 7342610,
                        "reputation": 2256,
                        "user_id": 5591519,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jt0GgK0F.jpg?s=256",
                        "display_name": "Shivam Bharadwaj",
                        "link": "https://stackoverflow.com/users/5591519/shivam-bharadwaj"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1617951375,
                    "creation_date": 1617951375,
                    "answer_id": 67016409,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From <code>C:\\Users\\xyz\\myFolder</code> to <code>C:\\Users\\xyz\\testdata</code> :</p>\n<pre><code>import os\nworking_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))\n# C:\\Users\\xyz\\myFolder\nprint(working_dir)\nupdated_working_dir = os.path.join(os.path.realpath(working_dir + '/../'), 'testdata')\n# C:\\Users\\xyz\\testdata\nprint(updated_working_dir)\n</code></pre>\n<blockquote>\n<p>Output</p>\n</blockquote>\n<pre><code>C:\\Users\\xyz\\myFolder\nC:\\Users\\xyz\\testdata\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10847288,
                        "reputation": 1654,
                        "user_id": 7978903,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/11f71465fefcd48284abe944700ac2a5?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Qin Heyang",
                        "link": "https://stackoverflow.com/users/7978903/qin-heyang"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1612477276,
                    "creation_date": 1612477276,
                    "answer_id": 66054712,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A simple solution would be</p>\n<pre><code>import os\nos.chdir(os.path.dirname(__file__))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5259350,
                        "reputation": 134,
                        "user_id": 4201275,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/e7lvK.jpg?s=256",
                        "display_name": "jeugregg",
                        "link": "https://stackoverflow.com/users/4201275/jeugregg"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1602720498,
                    "creation_date": 1602720498,
                    "answer_id": 64363075,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think to work with all systems  use &quot;ntpath&quot; instead of &quot;os.path&quot;. Today, it works well with Windows, Linux and Mac OSX.</p>\n<pre><code>import ntpath\nimport os\ndirname = ntpath.dirname(__file__)\nfilename = os.path.join(dirname, 'relative/path/to/file/you/want')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4662401,
                        "reputation": 10446,
                        "user_id": 7128154,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://i.sstatic.net/E3sBH.png?s=256",
                        "display_name": "Markus Dutschke",
                        "link": "https://stackoverflow.com/users/7128154/markus-dutschke"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1599750564,
                    "creation_date": 1599750564,
                    "answer_id": 63832612,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>summary of the most important commands</h1>\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.join('/home/user/tmp', 'subfolder')\n'/home/user/tmp/subfolder'\n&gt;&gt;&gt; os.path.normpath('/home/user/tmp/../test/..')\n'/home/user'\n&gt;&gt;&gt; os.path.relpath('/home/user/tmp', '/home/user')\n'tmp'\n&gt;&gt;&gt; os.path.isabs('/home/user/tmp')\nTrue\n&gt;&gt;&gt; os.path.isabs('/tmp')\nTrue\n&gt;&gt;&gt; os.path.isabs('tmp')\nFalse\n&gt;&gt;&gt; os.path.isabs('./../tmp')\nFalse\n&gt;&gt;&gt; os.path.realpath('/home/user/tmp/../test/..') # follows symbolic links\n'/home/user'\n</code></pre>\n<p>A detailed description is found in the <a href=\"https://docs.python.org/3/library/os.path.html\" rel=\"noreferrer\">docs</a>.\nThese are linux paths. Windows should work analogous.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7268313,
                        "reputation": 813,
                        "user_id": 5542253,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/6d76a963029149902664cf8fc3396c68?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "kmt",
                        "link": "https://stackoverflow.com/users/5542253/kmt"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1526151545,
                    "last_edit_date": 1526151545,
                    "creation_date": 1455831694,
                    "answer_id": 35492963,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of using </p>\n\n<pre><code>import os\ndirname = os.path.dirname(__file__)\nfilename = os.path.join(dirname, 'relative/path/to/file/you/want')\n</code></pre>\n\n<p>as in the accepted answer, it would be more robust to use:</p>\n\n<pre><code>import inspect\nimport os\ndirname = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))\nfilename = os.path.join(dirname, 'relative/path/to/file/you/want')\n</code></pre>\n\n<p>because using __file__ will return the file from which the module was loaded, if it was loaded from a file, so if the file with the script is called from elsewhere, the directory returned will not be correct. </p>\n\n<p>These answers give more detail: <a href=\"https://stackoverflow.com/a/31867043/5542253\">https://stackoverflow.com/a/31867043/5542253</a> and <a href=\"https://stackoverflow.com/a/50502/5542253\">https://stackoverflow.com/a/50502/5542253</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": true,
                    "score": 554,
                    "last_activity_date": 1526151297,
                    "last_edit_date": 1526151297,
                    "creation_date": 1243460870,
                    "answer_id": 918178,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In the file that has the script, you want to do something like this:</p>\n\n<pre><code>import os\ndirname = os.path.dirname(__file__)\nfilename = os.path.join(dirname, 'relative/path/to/file/you/want')\n</code></pre>\n\n<p>This will give you the absolute path to the file you're looking for.  Note that if you're using setuptools, you should probably use its <a href=\"http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources\" rel=\"noreferrer\">package resources API</a> instead.</p>\n\n<p><strong>UPDATE</strong>:  I'm responding to a comment here so I can paste a code sample.  :-)</p>\n\n<blockquote>\n  <p>Am I correct in thinking that <code>__file__</code> is not always available (e.g. when you run the file directly rather than importing it)?</p>\n</blockquote>\n\n<p>I'm assuming you mean the <code>__main__</code> script when you mention running the file directly.  If so, that doesn't appear to be the case on my system (python 2.5.1 on OS X 10.5.7):</p>\n\n<pre><code>#foo.py\nimport os\nprint os.getcwd()\nprint __file__\n\n#in the interactive interpreter\n&gt;&gt;&gt; import foo\n/Users/jason\nfoo.py\n\n#and finally, at the shell:\n~ % python foo.py\n/Users/jason\nfoo.py\n</code></pre>\n\n<p>However, I do know that there are some quirks with <code>__file__</code> on C extensions.  For example, I can do this on my Mac:</p>\n\n<pre><code>&gt;&gt;&gt; import collections #note that collections is a C extension in Python 2.5\n&gt;&gt;&gt; collections.__file__\n'/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-\ndynload/collections.so'\n</code></pre>\n\n<p>However, this raises an exception on my Windows machine.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 333664,
                        "reputation": 4000,
                        "user_id": 659634,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c68127bd31a9fe0abcf48de4a96cb4d4?s=256&d=identicon&r=PG",
                        "display_name": "Whitecat",
                        "link": "https://stackoverflow.com/users/659634/whitecat"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1489688075,
                    "creation_date": 1489688075,
                    "answer_id": 42841867,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>What worked for me is using <code>sys.path.insert</code>. Then I specified the  directory I needed to go. For example I just needed to go up one directory.</p>\n\n<pre><code>import sys\nsys.path.insert(0, '../')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3750031,
                        "reputation": 2266,
                        "user_id": 3117727,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/7BoFl.jpg?s=256",
                        "display_name": "Ahmed",
                        "link": "https://stackoverflow.com/users/3117727/ahmed"
                    },
                    "is_accepted": false,
                    "score": 78,
                    "last_activity_date": 1462802421,
                    "last_edit_date": 1495540046,
                    "creation_date": 1461824564,
                    "answer_id": 36906785,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As mentioned in the accepted answer <br></p>\n\n<pre><code>import os\ndir = os.path.dirname(__file__)\nfilename = os.path.join(dir, '/relative/path/to/file/you/want')\n</code></pre>\n\n<p>I just want to add that</p>\n\n<blockquote>\n  <p>the latter string can't begin with the backslash , infact no string\n  should include a backslash</p>\n</blockquote>\n\n<p>It should be something like</p>\n\n<pre><code>import os\ndir = os.path.dirname(__file__)\nfilename = os.path.join(dir, 'relative','path','to','file','you','want')\n</code></pre>\n\n<p>The accepted answer can be misleading in some cases , please refer to <a href=\"https://stackoverflow.com/questions/1945920/why-doesnt-os-path-join-work-in-this-case\">this</a> link for details</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7241977,
                        "reputation": 378,
                        "user_id": 5573030,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e8587616da634a024149db5eb6becee3?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "BookOwl",
                        "link": "https://stackoverflow.com/users/5573030/bookowl"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1458849832,
                    "creation_date": 1458849832,
                    "answer_id": 36209089,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This code will return the absolute path to the main script.</p>\n\n<pre><code>import os\ndef whereAmI():\n    return os.path.dirname(os.path.realpath(__import__(\"__main__\").__file__))\n</code></pre>\n\n<p>This will work even in a module.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3415774,
                        "reputation": 719,
                        "user_id": 2864736,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/60de5708b0c4babbdae4c85b77bd1a87?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fahad Haleem",
                        "link": "https://stackoverflow.com/users/2864736/fahad-haleem"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1444144655,
                    "creation_date": 1444144655,
                    "answer_id": 32973614,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Consider my code:</p>\n\n<pre><code>import os\n\n\ndef readFile(filename):\n    filehandle = open(filename)\n    print filehandle.read()\n    filehandle.close()\n\n\n\nfileDir = os.path.dirname(os.path.realpath('__file__'))\nprint fileDir\n\n#For accessing the file in the same folder\nfilename = \"same.txt\"\nreadFile(filename)\n\n#For accessing the file in a folder contained in the current folder\nfilename = os.path.join(fileDir, 'Folder1.1/same.txt')\nreadFile(filename)\n\n#For accessing the file in the parent folder of the current folder\nfilename = os.path.join(fileDir, '../same.txt')\nreadFile(filename)\n\n#For accessing the file inside a sibling folder.\nfilename = os.path.join(fileDir, '../Folder2/same.txt')\nfilename = os.path.abspath(os.path.realpath(filename))\nprint filename\nreadFile(filename)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 381409,
                        "reputation": 4797,
                        "user_id": 736033,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/4b80ad680897b121aec135f7db536825?s=256&d=identicon&r=PG",
                        "display_name": "Max Cameron",
                        "link": "https://stackoverflow.com/users/736033/max-cameron"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1412932759,
                    "creation_date": 1412932759,
                    "answer_id": 26295955,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>An alternative which works for me: </p>\n\n<pre><code>this_dir = os.path.dirname(__file__) \nfilename = os.path.realpath(\"{0}/relative/file.path\".format(this_dir))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1914642,
                        "reputation": 1355,
                        "user_id": 1727470,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/lYHhp.png?s=256",
                        "display_name": "Samie Bee",
                        "link": "https://stackoverflow.com/users/1727470/samie-bee"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1401892881,
                    "creation_date": 1401892881,
                    "answer_id": 24040518,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm not sure if this applies to some of the older versions, but I believe Python 3.3 has native relative path support.</p>\n\n<p>For example the following code should create a text file in the same folder as the python script:</p>\n\n<pre><code>open(\"text_file_name.txt\", \"w+t\")\n</code></pre>\n\n<p>(note that there shouldn't be a forward or backslash at the beginning if it's a relative path)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3695125,
                        "reputation": 61,
                        "user_id": 3076704,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f74fa4cd900a86d00add56f280f13dfb?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Chandrajyoti Das",
                        "link": "https://stackoverflow.com/users/3076704/chandrajyoti-das"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1386390600,
                    "creation_date": 1386390600,
                    "answer_id": 20437590,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Hi first of all you should understand functions <strong>os.path.abspath(path)</strong> and <strong>os.path.relpath(path)</strong> </p>\n\n<p>In short <strong>os.path.abspath(path)</strong> makes a <strong>relative path</strong> to <strong>absolute path</strong>. And if the path provided is itself a absolute path then the function returns the same path.</p>\n\n<p>similarly <strong>os.path.relpath(path)</strong> makes a <strong>absolute path</strong> to <strong>relative path</strong>. And if the path provided is itself a relative path then the function returns the same path.</p>\n\n<p><em><strong>Below example can let you understand the above concept properly</em></strong>:</p>\n\n<p>suppose i have a file <strong>input_file_list.txt</strong> which contains list of input files to be processed by my python script.</p>\n\n<p>D:\\conc\\input1.dic</p>\n\n<p>D:\\conc\\input2.dic</p>\n\n<p>D:\\Copyioconc\\input_file_list.txt</p>\n\n<p>If you see above folder structure, <strong>input_file_list.txt</strong> is present in <strong>Copyofconc</strong> folder and the files to be processed by the python script are present in <strong>conc</strong> folder</p>\n\n<p>But the content of the file <strong>input_file_list.txt</strong> is as shown below:</p>\n\n<p>..\\conc\\input1.dic</p>\n\n<p>..\\conc\\input2.dic</p>\n\n<p>And my python script is present in <strong>D:</strong> drive.</p>\n\n<p>And the relative path provided in the <strong>input_file_list.txt</strong> file are relative to the path of <strong>input_file_list.txt</strong> file.</p>\n\n<p>So when python script shall executed the current working directory (use <strong>os.getcwd()</strong> to get the path)</p>\n\n<p>As my relative path is relative to <strong>input_file_list.txt</strong>, that is <strong>\"D:\\Copyofconc\"</strong>, i have to change the current working directory to <strong>\"D:\\Copyofconc\"</strong>.</p>\n\n<p>So i have to use <strong>os.chdir('D:\\Copyofconc')</strong>, so the current working directory shall be <strong>\"D:\\Copyofconc\"</strong>.</p>\n\n<p>Now to get the files <strong>input1.dic</strong> and <strong>input2.dic</strong>, i will read the lines \"..\\conc\\input1.dic\" then shall use the command </p>\n\n<p><strong>input1_path= os.path.abspath('..\\conc\\input1.dic')</strong> (to change relative path to absolute path. Here as current working directory is \"D:\\Copyofconc\", the file \".\\conc\\input1.dic\" shall be accessed relative to \"D:\\Copyofconc\")</p>\n\n<p>so <strong>input1_path</strong> shall be \"D:\\conc\\input1.dic\"</p>\n"
                },
                {
                    "owner": {
                        "account_id": 966394,
                        "reputation": 1694,
                        "user_id": 989762,
                        "user_type": "registered",
                        "accept_rate": 33,
                        "profile_image": "https://www.gravatar.com/avatar/6ead2d1bdd104881fdc6114963ab87e3?s=256&d=identicon&r=PG",
                        "display_name": "user989762",
                        "link": "https://stackoverflow.com/users/989762/user989762"
                    },
                    "is_accepted": false,
                    "score": 75,
                    "last_activity_date": 1332152667,
                    "creation_date": 1332152667,
                    "answer_id": 9768491,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>you need <code>os.path.realpath</code> (sample below adds the parent directory to your path)</p>\n\n<pre><code>import sys,os\nsys.path.append(os.path.realpath('..'))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6728,
                        "reputation": 19029,
                        "user_id": 11440,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/d549ac1c84a6806b3fb330ed09fb96c2?s=256&d=identicon&r=PG",
                        "display_name": "Tom Leys",
                        "link": "https://stackoverflow.com/users/11440/tom-leys"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1243460836,
                    "creation_date": 1243460836,
                    "answer_id": 918174,
                    "question_id": 918154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>See <a href=\"http://docs.python.org/library/sys.html#sys.path\" rel=\"noreferrer\">sys.path</a>\nAs initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter. </p>\n\n<p>Use this path as the root folder from which you <a href=\"http://docs.python.org/library/os.path.html#os.path.join\" rel=\"noreferrer\">apply your relative path</a></p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; import os.path\n&gt;&gt;&gt; sys.path[0]\n'C:\\\\Python25\\\\Lib\\\\idlelib'\n&gt;&gt;&gt; os.path.relpath(sys.path[0], \"path_to_libs\") # if you have python 2.6\n&gt;&gt;&gt; os.path.join(sys.path[0], \"path_to_libs\")\n'C:\\\\Python25\\\\Lib\\\\idlelib\\\\path_to_libs'\n</code></pre>\n"
                }
            ]
        },
        {
            "32211596": [
                {
                    "owner": {
                        "account_id": 6497513,
                        "reputation": 3334,
                        "user_id": 5031339,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/82ce3852cc31d052ce2568e3a777875a?s=256&d=identicon&r=PG",
                        "display_name": "NightShadeQueen",
                        "link": "https://stackoverflow.com/users/5031339/nightshadequeen"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1440529254,
                    "creation_date": 1440529254,
                    "answer_id": 32211979,
                    "question_id": 32211596,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can also just compare to another timedelta object</p>\n\n<pre><code>import datetime\nif c &gt;= datetime.timedelta(hours=3):\n   #do something\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5984060,
                        "reputation": 2807,
                        "user_id": 4702072,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://lh6.googleusercontent.com/-hub0mTOr0DQ/AAAAAAAAAAI/AAAAAAAAABI/Kmd7FYRMRwY/photo.jpg?sz=256",
                        "display_name": "YOBA",
                        "link": "https://stackoverflow.com/users/4702072/yoba"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1440528170,
                    "creation_date": 1440528170,
                    "answer_id": 32211690,
                    "question_id": 32211596,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do this</p>\n\n<pre><code>three_hours = 3600*3 # in seconds\n\nif c.total_seconds() &gt;= three_hours:\n    # do stuff\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 419044,
                        "reputation": 90651,
                        "user_id": 795990,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UxQhT.jpg?s=256",
                        "display_name": "Anand S Kumar",
                        "link": "https://stackoverflow.com/users/795990/anand-s-kumar"
                    },
                    "is_accepted": true,
                    "score": 56,
                    "last_activity_date": 1440528130,
                    "creation_date": 1440528130,
                    "answer_id": 32211671,
                    "question_id": 32211596,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>When you subtract two datetime objects in python, you get a <a href=\"https://docs.python.org/2/library/datetime.html#timedelta-objects\" rel=\"noreferrer\"><code>datetime.timedelta</code></a> object. You can then get the <code>total_seconds()</code> for that timedelta object and check if that is greater than <code>3*3600</code> , which is the number of seconds for 3 hours. Example -</p>\n\n<pre><code>&gt;&gt;&gt; a = datetime.datetime.now()\n&gt;&gt;&gt; b = datetime.datetime(2015,8,25,0,0,0,0)\n&gt;&gt;&gt; c = a - b\n&gt;&gt;&gt; c.total_seconds()\n87062.729491\n&gt;&gt;&gt; c.total_seconds() &gt; 3*3600\nTrue\n</code></pre>\n"
                }
            ]
        },
        {
            "29794959": [
                {
                    "owner": {
                        "account_id": 223237,
                        "reputation": 4471,
                        "user_id": 482305,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/9e7f77203732a16da91aca293c0e42cb?s=256&d=identicon&r=PG",
                        "display_name": "Sawant",
                        "link": "https://stackoverflow.com/users/482305/sawant"
                    },
                    "is_accepted": false,
                    "score": 62,
                    "last_activity_date": 1489534279,
                    "creation_date": 1489534279,
                    "answer_id": 42798455,
                    "question_id": 29794959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a simpler way that should work well too:</p>\n\n<p><code>df[\"D\"] = pd.Series(d)</code></p>\n\n<p><em>Note: The dict keys need to be in the DataFrame index for this.</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 9560672,
                        "reputation": 467,
                        "user_id": 7101639,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-_zndwDydRs8/AAAAAAAAAAI/AAAAAAAAAB4/Ehiz9PQ-ZSE/photo.jpg?sz=256",
                        "display_name": "Yuan Tao",
                        "link": "https://stackoverflow.com/users/7101639/yuan-tao"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1485643883,
                    "last_edit_date": 1485643883,
                    "creation_date": 1485642436,
                    "answer_id": 41915539,
                    "question_id": 29794959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I got <code>TypeError: 'dict' object is not callable</code> error for EdChum's solution when I try to use index.map()... And I haven't found a way to get index as Series.</p>\n\n<p>So I found another solution to this problem by creating a Series object from the dict object first.</p>\n\n<pre><code>new_d = pd.Series(d)\n</code></pre>\n\n<p>And then do the pd.join with the column you like. That may help.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 735810,
                        "reputation": 392988,
                        "user_id": 704848,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f9be2c2958e208c8d9b629ac43c9c42?s=256&d=identicon&r=PG",
                        "display_name": "EdChum",
                        "link": "https://stackoverflow.com/users/704848/edchum"
                    },
                    "is_accepted": true,
                    "score": 294,
                    "last_activity_date": 1429699242,
                    "creation_date": 1429699242,
                    "answer_id": 29794993,
                    "question_id": 29794959,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Call <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html#pandas.Series.map\"><code>map</code></a> and pass the dict, this will perform a lookup and return the associated value for that key:</p>\n\n<pre><code>In [248]:\n\nd = {112: 'en', 113: 'es', 114: 'es', 111: 'en'}\ndf['D'] = df['U'].map(d)\ndf\nOut[248]:\n     U   L   D\n0  111  en  en\n1  112  en  en\n2  112  es  en\n3  113  es  es\n4  113  ja  es\n5  113  zh  es\n6  114  es  es\n</code></pre>\n"
                }
            ]
        },
        {
            "10592913": [
                {
                    "owner": {
                        "account_id": 503387,
                        "reputation": 31670,
                        "user_id": 975097,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/dbbc1b2bc18739858cfa3b7ddcba7362?s=256&d=identicon&r=PG",
                        "display_name": "Anderson Green",
                        "link": "https://stackoverflow.com/users/975097/anderson-green"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1497156662,
                    "creation_date": 1497156662,
                    "answer_id": 44480481,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is another way to convert Python scripts to .exe files. You can <a href=\"https://stackoverflow.com/questions/4650243/convert-python-program-to-c-c-code\">compile Python programs into C++ programs</a>, which can be natively compiled just like any other C++ program.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1248477,
                        "reputation": 4357,
                        "user_id": 1209423,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/LGNNc.png?s=256",
                        "display_name": "PenguinCoder",
                        "link": "https://stackoverflow.com/users/1209423/penguincoder"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1452137782,
                    "last_edit_date": 1452137782,
                    "creation_date": 1337046486,
                    "answer_id": 10593209,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Understand that every 'freezing' application for Python will not really secure your code in any way. Every packaging system for a stand-alone executable Python 'program' will include a lot of the Python libraries and interpreter, which will make your program pretty large. </p>\n\n<p>That said, <a href=\"http://www.pyinstaller.org/\" rel=\"noreferrer\">PyInstaller</a> has done a nearly flawless job with everything I've thrown at it. Currently it only supports up to Python 2.7 but Pyinstaller's support for a varied set of libraries large and small is unmatched in other 'freeze' type programs for Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3771755,
                        "reputation": 2349,
                        "user_id": 3133727,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/XwrAw.jpg?s=256",
                        "display_name": "moovon",
                        "link": "https://stackoverflow.com/users/3133727/moovon"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1451204574,
                    "last_edit_date": 1495541887,
                    "creation_date": 1449936748,
                    "answer_id": 34242025,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If it is a simple py script\nrefer <a href=\"https://stackoverflow.com/a/34241563/3133727\">here</a></p>\n\n<p>Else for GUI :</p>\n\n<p>$  pip3 install cx_Freeze</p>\n\n<p>1) Create a setup.py file and put in the same directory as of the .py file you want to convert.</p>\n\n<p>2)Copy paste the following lines in the setup.py and do change the \"filename.py\" into the filename you specified.</p>\n\n<pre><code>from cx_Freeze import setup, Executable\nsetup(\n    name=\"GUI PROGRAM\",\n    version=\"0.1\",\n    description=\"MyEXE\",\n    executables=[Executable(\"filename.py\", base=\"Win32GUI\")],\n    )\n</code></pre>\n\n<p>3) Run the setup.py  \"$python setup.py build\"</p>\n\n<p>4)A new directory will be there there called \"build\". Inside it you will get your .exe file to be ready to launced directly.\n(Make sure you copy paste the images files and other external files into the build directory)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3992002,
                        "reputation": 123,
                        "user_id": 3290622,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5ee2431b9edf6fca73254500cb2bf875?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Omega Goggles",
                        "link": "https://stackoverflow.com/users/3290622/omega-goggles"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1401280910,
                    "creation_date": 1401280910,
                    "answer_id": 23911912,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I use cx_Freeze. Works with Python 2 and 3, and I have tested it to work on Windows, Mac, and Linux.</p>\n\n<p>cx_Freeze: <a href=\"http://cx-freeze.sourceforge.net/\" rel=\"noreferrer\">http://cx-freeze.sourceforge.net/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1735748,
                        "reputation": 11,
                        "user_id": 1588357,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/cdafc3dd89228f3ab32c5ea496cd29d1?s=256&d=identicon&r=PG",
                        "display_name": "Rusphondio Chang Lee",
                        "link": "https://stackoverflow.com/users/1588357/rusphondio-chang-lee"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1398072012,
                    "last_edit_date": 1398072012,
                    "creation_date": 1344534813,
                    "answer_id": 11889192,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For this you have two choices:</p>\n\n<ul>\n<li>A downgrade to python 2.6. This is generally undesirable because it is backtracking and may nullify a small portion of your scripts</li>\n<li>Your second option is to use some form of <code>exe</code> converter. I recommend <code>pyinstaller</code> as it seems to have the best results. </li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 63984,
                        "reputation": 50477,
                        "user_id": 189134,
                        "user_type": "moderator",
                        "accept_rate": 98,
                        "profile_image": "https://i.sstatic.net/jFsyb.png?s=256",
                        "display_name": "Andy",
                        "link": "https://stackoverflow.com/users/189134/andy"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1337045438,
                    "creation_date": 1337045438,
                    "answer_id": 10593095,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>py2exe works with Python 2.7 (as well as other versions). You just need the <code>MSVCR90.dll</code></p>\n\n<p><a href=\"http://www.py2exe.org/index.cgi/Tutorial\" rel=\"nofollow\">http://www.py2exe.org/index.cgi/Tutorial</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 67986,
                        "reputation": 113609,
                        "user_id": 198633,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/5b9c04999233026354268c2ee4237e04?s=256&d=identicon&r=PG",
                        "display_name": "inspectorG4dget",
                        "link": "https://stackoverflow.com/users/198633/inspectorg4dget"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1337044821,
                    "creation_date": 1337044821,
                    "answer_id": 10593033,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've used <a href=\"http://py2exe.org/\" rel=\"nofollow\">py2exe</a> in the past and have been very happy with it. I didn't particularly enjoy using <a href=\"http://cx-freeze.sourceforge.net/\" rel=\"nofollow\">cx-freeze</a> as much, though</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1170996,
                        "reputation": 4623,
                        "user_id": 1148194,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/bb21b27fe43fac2f302cdf3bfc59a6e9?s=256&d=identicon&r=PG",
                        "display_name": "Tiago Peczenyj",
                        "link": "https://stackoverflow.com/users/1148194/tiago-peczenyj"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1337044136,
                    "creation_date": 1337044136,
                    "answer_id": 10592960,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>some people talk very well about PyInstaller</p>\n\n<p><a href=\"http://www.pyinstaller.org/\">http://www.pyinstaller.org/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 122932,
                        "reputation": 52788,
                        "user_id": 317052,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/GC6F4.jpg?s=256",
                        "display_name": "Daniel Haley",
                        "link": "https://stackoverflow.com/users/317052/daniel-haley"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1337044085,
                    "creation_date": 1337044085,
                    "answer_id": 10592955,
                    "question_id": 10592913,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've used <a href=\"http://cx-freeze.sourceforge.net/\" rel=\"nofollow\">cx-freeze</a> with good results in Python 3.2</p>\n"
                }
            ]
        },
        {
            "19620498": [
                {
                    "owner": {
                        "account_id": 2789317,
                        "reputation": 25878,
                        "user_id": 2399879,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UxMS5.jpg?s=256",
                        "display_name": "Crowman",
                        "link": "https://stackoverflow.com/users/2399879/crowman"
                    },
                    "is_accepted": false,
                    "score": 34,
                    "last_activity_date": 1696005532,
                    "last_edit_date": 1696005532,
                    "creation_date": 1382892711,
                    "answer_id": 19620676,
                    "question_id": 19620498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Classes encapsulate both data, and behavior, so as general rules:</p>\n<ul>\n<li>If you have something only with data, and no methods, it should probably be a <code>namedtuple</code> or a <code>dataclass</code>, not a <code>class</code>.</li>\n<li>If a function accesses instance data, it should be a method.</li>\n<li>If a function accesses no instance data, but does access class data, it should be a <code>@classmethod</code>.</li>\n<li>If a function accesses neither instance data nor class data, it should be a standalone function, unless there's some really compelling reason to make it a <code>@staticmethod</code>.</li>\n<li>If a <code>class</code> only has one method, or one method in addition to <code>__init__()</code>, then you almost certainly can and should rewrite it as a function.</li>\n</ul>\n<p>Classes are really easy to abuse, but the temptation to shove everything into a class should really be avoided. You should use them when they make sense, and avoid using them when they don't.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1782592,
                        "reputation": 82290,
                        "user_id": 1624921,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/keNmm.jpg?s=256",
                        "display_name": "Nafiul Islam",
                        "link": "https://stackoverflow.com/users/1624921/nafiul-islam"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1505470446,
                    "last_edit_date": 1505470446,
                    "creation_date": 1382891937,
                    "answer_id": 19620530,
                    "question_id": 19620498,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The second option is the modus operandi in Python. I mean, if all you're doing is importing functions, then you can do something like this:</p>\n\n<pre><code>from utility import some_func\n</code></pre>\n\n<p>which will import your function.</p>\n\n<p>Best practice is if you're using only static functions, then just put them in the global namespace of a separate module, it will make your life a lot easier. What you're trying to do is make objects and just fill them in with static methods. Why do this, when you can just define the functions in a <code>.py</code> file?</p>\n\n<p>In fact, what you're trying to do <em>has</em> been done. You're trying to store away some good utility functions. Well, <code>python-requests</code>, is a third party library that is just adored by the majority of Pythonistas just does this. It stores away its good utility functions in a separate module. <a href=\"https://github.com/kennethreitz/requests/blob/master/requests/utils.py\" rel=\"noreferrer\">Here is the example.</a></p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1382892344,
                    "last_edit_date": 1382892344,
                    "creation_date": 1382891998,
                    "answer_id": 19620542,
                    "question_id": 19620498,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While this question is a little opinion based, I'd say the second one is better.  It reduces redundancy.  Using the first method, you will have to do:</p>\n\n<pre><code>import utility\nutility.utility.method1(...)\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from utility import utility\nutility.method1(...)\n</code></pre>\n\n<p>Using the second one however allows you to simply do:</p>\n\n<pre><code>import utility\nutility.method1(...)\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from utility import method1\nmethod1(...)\n</code></pre>\n\n<p>If you are making a class that only contains static methods, my question is \"why do you need the class?\"  It contributes nothing positive here.</p>\n"
                }
            ]
        },
        {
            "983699": [
                {
                    "owner": {
                        "account_id": 42436,
                        "reputation": 782,
                        "user_id": 123620,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9dcc54ad5d8bb46d2716518396aeb822?s=256&d=identicon&r=PG",
                        "display_name": "Pejvan",
                        "link": "https://stackoverflow.com/users/123620/pejvan"
                    },
                    "is_accepted": false,
                    "score": 56,
                    "last_activity_date": 1547114713,
                    "last_edit_date": 1547114713,
                    "creation_date": 1336368246,
                    "answer_id": 10477055,
                    "question_id": 983699,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In a talk about core containers internals in Python at PyCon 2012, Raymond Hettinger is suggesting to use <code>[None] * n</code> to pre-allocate the length you want.</p>\n\n<p><a href=\"https://web.archive.org/web/20130615024815/http://www.pycon.it/media/stuff/slides/core-python-containers-under-hood.ppt\" rel=\"noreferrer\">Slides available as PPT</a> or <a href=\"http://www.google.com/search?q=hettinger%20python%20core%20containers%20pycon%20slide%201\" rel=\"noreferrer\">via Google</a></p>\n\n<p>The whole slide deck is quite interesting.\nThe <a href=\"http://www.youtube.com/watch?v=hYUsssClE94\" rel=\"noreferrer\">presentation is available on YouTube</a>, but it doesn't add much to the slides.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 381,
                    "last_activity_date": 1244754842,
                    "creation_date": 1244754842,
                    "answer_id": 983727,
                    "question_id": 983699,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If the \"default value\" you want is immutable, @eduffy's suggestion, e.g. <code>[0]*10</code>, is good enough.</p>\n\n<p>But if you want, say, a list of ten <code>dict</code>s, do <em>not</em> use <code>[{}]*10</code> -- that would give you a list with the <strong>same</strong> initially-empty <code>dict</code> ten times, <strong>not</strong> ten distinct ones. Rather, use <code>[{} for i in range(10)]</code> or similar constructs, to construct ten separate <code>dict</code>s to make up your list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4872,
                        "reputation": 40156,
                        "user_id": 7536,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/69aa4b5b81a1d2120c98ceed09446489?s=256&d=identicon&r=PG",
                        "display_name": "eduffy",
                        "link": "https://stackoverflow.com/users/7536/eduffy"
                    },
                    "is_accepted": false,
                    "score": 192,
                    "last_activity_date": 1244754656,
                    "creation_date": 1244754656,
                    "answer_id": 983708,
                    "question_id": 983699,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>list multiplication works.</p>\n\n<pre><code>&gt;&gt;&gt; [0] * 10\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</code></pre>\n"
                }
            ]
        },
        {
            "8356501": [
                {
                    "owner": {
                        "account_id": 2025293,
                        "reputation": 825,
                        "user_id": 1810479,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/2ef7afd5bbc592d0117feef4a9675297?s=256&d=identicon&r=PG",
                        "display_name": "TommasoF",
                        "link": "https://stackoverflow.com/users/1810479/tommasof"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1669096382,
                    "last_edit_date": 1669096382,
                    "creation_date": 1403164956,
                    "answer_id": 24301608,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For a more beautiful table, use the tabulate module:</p>\n<p><a href=\"https://pypi.python.org/pypi/tabulate\" rel=\"nofollow noreferrer\">Tabulate link</a></p>\n<p>Example from the tabulate documentation:</p>\n<pre><code>&gt;&gt;&gt; from tabulate import tabulate\n\n&gt;&gt;&gt; table = [[&quot;Sun&quot;,696000,1989100000],[&quot;Earth&quot;,6371,5973.6],\n...          [&quot;Moon&quot;,1737,73.5],[&quot;Mars&quot;,3390,641.85]]\n&gt;&gt;&gt; print(tabulate(table))\n-----  ------  -------------\nSun    696000     1.9891e+09\nEarth    6371  5973.6\nMoon     1737    73.5\nMars     3390   641.85\n-----  ------  -------------\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5154178,
                        "reputation": 816,
                        "user_id": 4127836,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/HfdGO.jpg?s=256",
                        "display_name": "Priyam Singh",
                        "link": "https://stackoverflow.com/users/4127836/priyam-singh"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1488269585,
                    "creation_date": 1488269585,
                    "answer_id": 42503384,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can try <a href=\"https://pypi.python.org/pypi/beautifultable\" rel=\"noreferrer\">BeautifulTable</a>.\nHere's an example:</p>\n\n<pre><code>&gt;&gt;&gt; from beautifultable import BeautifulTable\n&gt;&gt;&gt; table = BeautifulTable()\n&gt;&gt;&gt; table.column_headers = [\"name\", \"rank\", \"gender\"]\n&gt;&gt;&gt; table.append_row([\"Jacob\", 1, \"boy\"])\n&gt;&gt;&gt; table.append_row([\"Isabella\", 1, \"girl\"])\n&gt;&gt;&gt; table.append_row([\"Ethan\", 2, \"boy\"])\n&gt;&gt;&gt; table.append_row([\"Sophia\", 2, \"girl\"])\n&gt;&gt;&gt; table.append_row([\"Michael\", 3, \"boy\"])\n&gt;&gt;&gt; print(table)\n+----------+------+--------+\n|   name   | rank | gender |\n+----------+------+--------+\n|  Jacob   |  1   |  boy   |\n+----------+------+--------+\n| Isabella |  1   |  girl  |\n+----------+------+--------+\n|  Ethan   |  2   |  boy   |\n+----------+------+--------+\n|  Sophia  |  2   |  girl  |\n+----------+------+--------+\n| Michael  |  3   |  boy   |\n+----------+------+--------+\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1266769,
                        "reputation": 1746,
                        "user_id": 2446351,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/lWxqe.png?s=256",
                        "display_name": "foundling",
                        "link": "https://stackoverflow.com/users/2446351/foundling"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1429214000,
                    "creation_date": 1429214000,
                    "answer_id": 29684712,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It seems like you want your columns left-justified, but I haven't seen any answers mention the <code>ljust</code> string method, so I'll demonstrate that in Python 2.7:</p>\n\n<pre><code>def bar(item):\n    return item.replace('foo','bar')\n\nwidth = 20\nmylist = ['foo1','foo200000','foo33','foo444']\n\nfor item in mylist:\n    print \"{}| {}\".format(item.ljust(width),bar(item).ljust(width))\n\nfoo1                | bar1\nfoo200000           | bar200000\nfoo33               | bar33\nfoo444              | bar444\n</code></pre>\n\n<p>For your reference, running <code>help('abc'.ljust)</code> gives you this:</p>\n\n<blockquote>\n  <p>S.ljust(width[, fillchar]) -> string</p>\n</blockquote>\n\n<p>It looks like the <code>ljust</code> method takes your specified width and subtracts the length of the string from that, and pads the right side of your string with that many characters. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 305529,
                        "reputation": 7102,
                        "user_id": 615740,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/RFR35.jpg?s=256",
                        "display_name": "Thomas Dignan",
                        "link": "https://stackoverflow.com/users/615740/thomas-dignan"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1353724105,
                    "creation_date": 1353724105,
                    "answer_id": 13537718,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a nice module for this in pypi, PrettyTable.</p>\n\n<p><a href=\"http://code.google.com/p/prettytable/wiki/Tutorial\">http://code.google.com/p/prettytable/wiki/Tutorial</a></p>\n\n<p><a href=\"http://pypi.python.org/pypi/PrettyTable/\">http://pypi.python.org/pypi/PrettyTable/</a></p>\n\n<pre><code>$ pip install PrettyTable\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1322831242,
                    "last_edit_date": 1322831242,
                    "creation_date": 1322830542,
                    "answer_id": 8356620,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's not really hard to roll your own formatting function:</p>\n\n<pre><code>def print_table(table):\n    col_width = [max(len(x) for x in col) for col in zip(*table)]\n    for line in table:\n        print \"| \" + \" | \".join(\"{:{}}\".format(x, col_width[i])\n                                for i, x in enumerate(line)) + \" |\"\n\ntable = [(str(x), str(f(x))) for x in mylist]\nprint_table(table)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 472165,
                        "reputation": 316,
                        "user_id": 880480,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f5c31f8d45afe12f19559041a8cb1e3?s=256&d=identicon&r=PG",
                        "display_name": "user880480",
                        "link": "https://stackoverflow.com/users/880480/user880480"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1322831184,
                    "creation_date": 1322831184,
                    "answer_id": 8356740,
                    "question_id": 8356501,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>mylist = {\"foo\":\"bar\", \"foobo\":\"foobar\"}\n\nwidth_col1 = max([len(x) for x in mylist.keys()])\nwidth_col2 = max([len(x) for x in mylist.values()])\n\ndef f(ind):\n    return mylist[ind]\n\nfor i in mylist:\n    print \"|{0:&lt;{col1}}|{1:&lt;{col2}}|\".format(i,f(i),col1=width_col1,\n                                            col2=width_col2)\n</code></pre>\n"
                }
            ]
        },
        {
            "40452759": [
                {
                    "owner": {
                        "account_id": 7565400,
                        "reputation": 210552,
                        "user_id": 5741205,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/SG6BE.png?s=256",
                        "display_name": "MaxU - stand with Ukraine",
                        "link": "https://stackoverflow.com/users/5741205/maxu-stand-with-ukraine"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1582183492,
                    "last_edit_date": 1582183492,
                    "creation_date": 1478459729,
                    "answer_id": 40453439,
                    "question_id": 40452759,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you can use <a href=\"https://stackoverflow.com/a/29546836/5741205\">this great solution (c) @derricw</a> (don't forget to upvote it ;-):</p>\n\n<pre><code># vectorized haversine function\ndef haversine(lat1, lon1, lat2, lon2, to_radians=True, earth_radius=6371):\n    \"\"\"\n    slightly modified version: of http://stackoverflow.com/a/29546836/2901002\n\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees or in radians)\n\n    All (lat, lon) coordinates must have numeric dtypes and be of equal length.\n\n    \"\"\"\n    if to_radians:\n        lat1, lon1, lat2, lon2 = np.radians([lat1, lon1, lat2, lon2])\n\n    a = np.sin((lat2-lat1)/2.0)**2 + \\\n        np.cos(lat1) * np.cos(lat2) * np.sin((lon2-lon1)/2.0)**2\n\n    return earth_radius * 2 * np.arcsin(np.sqrt(a))\n\n\ndf['dist'] = \\\n    haversine(df.LAT.shift(), df.LONG.shift(),\n                 df.loc[1:, 'LAT'], df.loc[1:, 'LONG'])\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>In [566]: df\nOut[566]:\n   Ser_Numb        LAT       LONG         dist\n0         1  74.166061  30.512811          NaN\n1         2  72.249672  33.427724   232.549785\n2         3  67.499828  37.937264   554.905446\n3         4  84.253715  69.328767  1981.896491\n4         5  72.104828  33.823462  1513.397997\n5         6  63.989462  51.918173  1164.481327\n6         7  80.209112  33.530778  1887.256899\n7         8  68.954132  35.981256  1252.531365\n8         9  83.378214  40.619652  1606.340727\n9        10  68.778571   6.607066  1793.921854\n</code></pre>\n\n<p><strong>UPDATE:</strong> this will help to understand the logic:</p>\n\n<pre><code>In [573]: pd.concat([df['LAT'].shift(), df.loc[1:, 'LAT']], axis=1, ignore_index=True)\nOut[573]:\n           0          1\n0        NaN        NaN\n1  74.166061  72.249672\n2  72.249672  67.499828\n3  67.499828  84.253715\n4  84.253715  72.104828\n5  72.104828  63.989462\n6  63.989462  80.209112\n7  80.209112  68.954132\n8  68.954132  83.378214\n9  83.378214  68.778571\n</code></pre>\n"
                }
            ]
        },
        {
            "1811095": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 12,
                    "last_activity_date": 1259369701,
                    "last_edit_date": 1259369701,
                    "creation_date": 1259369015,
                    "answer_id": 1811161,
                    "question_id": 1811095,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You could use one of these scripts to make python module dependency graphs:\n<UL>\n<LI>\n<a href=\"http://furius.ca/snakefood/\" rel=\"noreferrer\">http://furius.ca/snakefood/</a>\n</LI>\n<LI>\n<a href=\"http://www.tarind.com/depgraph.html\" rel=\"noreferrer\">http://www.tarind.com/depgraph.html</a>\n</LI>\n<LI>\n<a href=\"http://code.activestate.com/recipes/535136/\" rel=\"noreferrer\">http://code.activestate.com/recipes/535136/</a>\n</LI>\n</UL></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8083,
                        "reputation": 374652,
                        "user_id": 14343,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
                        "display_name": "Ned Batchelder",
                        "link": "https://stackoverflow.com/users/14343/ned-batchelder"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1259369648,
                    "last_edit_date": 1259369648,
                    "creation_date": 1259367572,
                    "answer_id": 1811099,
                    "question_id": 1811095,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Try using <code>python -v</code> to run your program.  It will trace the sequence of imports.</p>\n\n<p>Another option is <a href=\"http://pypi.python.org/pypi/pylint\" rel=\"noreferrer\">pylint</a>, which will alert you to all sorts of issues, including cyclic imports.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1259369133,
                    "creation_date": 1259369133,
                    "answer_id": 1811165,
                    "question_id": 1811095,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here's a simple (and slightly rudimentary;-) way to trace \"who's trying to import what\" in terms of module names:</p>\n\n<pre><code>import inspect\nimport __builtin__\nsavimp = __builtin__.__import__\n\ndef newimp(name, *x):\n  caller = inspect.currentframe().f_back\n  print name, caller.f_globals.get('__name__')\n  return savimp(name, *x)\n\n__builtin__.__import__ = newimp\n</code></pre>\n\n<p>which gives, for example (having saved this as <code>tracimp.py</code>):</p>\n\n<pre><code>$ python -c 'import tracimp; import email; import sys; import email.mime'\nemail __main__\nsys email\nemail.mime email\nsys __main__\nemail.mime __main__\n</code></pre>\n\n<p>As you see, one specific characteristic of \"wrapping\" the <code>__import__</code> built-in is that it won't be silenced by the fact that a module being imported is already in <code>sys.modules</code>: since taking care of that is one of <code>__import__</code>'s jobs, our wrapper gets called for both modules \"being loaded for the first time\" <strong>and</strong> ones that are just going to get fetched from <code>sys.modules</code> because they were already imported previously.  This should come in really handy when you're trying to diagnose circular imports (it boils down to finding loops in the directed graph whose edges are identified by the two module names -- imported and importer -- which this simple approach is printing on each output line).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835940,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1259367781,
                    "last_edit_date": 1259367781,
                    "creation_date": 1259367457,
                    "answer_id": 1811097,
                    "question_id": 1811095,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It shouldn't be possible to get a cyclic import in python because it checks if the module has already been imported before importing it again. You can only import a module once, no matter how many times you call import.</p>\n\n<p>From <a href=\"http://groups.google.com/group/comp.lang.python/browse_thread/thread/1d80a1c6db2b867c?pli=1\" rel=\"nofollow noreferrer\">http://groups.google.com/group/comp.lang.python/browse_thread/thread/1d80a1c6db2b867c?pli=1</a> :</p>\n\n<blockquote>\n  <p>Imports are pretty straightforward\n  really. Just remember the following:</p>\n  \n  <p>'import' and 'from xxx import yyy' are\n  executable statements. They execute\n  when the running program reaches that\n  line.</p>\n  \n  <p>If a module is not in sys.modules,\n  then an import creates the new module\n  entry in sys.modules and then executes\n  the code in the module. It does not\n  return control to the calling module\n  until the execution has completed.</p>\n  \n  <p>If a module does exist in sys.modules\n  then an import simply returns that\n  module whether or not it has completed\n  executing. That is the reason why\n  cyclic imports may return modules\n  which appear to be partly empty.</p>\n  \n  <p>Finally, the executing script runs in\n  a module named __main__, importing the\n  script under its own name will create\n  a new module unrelated to\n  __main__.</p>\n  \n  <p>Take that lot together and you\n  shouldn't get any surprises when\n  importing modules.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "18358938": [
                {
                    "owner": {
                        "account_id": 69533,
                        "reputation": 33870,
                        "user_id": 202229,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/6cc1d82c11563b440c57280ad587ee47?s=256&d=identicon&r=PG",
                        "display_name": "smci",
                        "link": "https://stackoverflow.com/users/202229/smci"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1613700942,
                    "last_edit_date": 1613700942,
                    "creation_date": 1479379887,
                    "answer_id": 40652941,
                    "question_id": 18358938,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you're only getting these to manually pass into <code>df.set_index()</code>, that's unnecessary. <strong>Just directly do <code>df.set_index['your_col_name', drop=False]</code></strong>, already.</p>\n<p>It's very rare in pandas that you need to get an index as a Python list (unless you're doing something pretty funky, or else passing them back to NumPy), so if you're doing this a lot, it's a code smell that you're doing something wrong.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 273124,
                        "reputation": 25642,
                        "user_id": 564538,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/4f4c10a585c476957ab989299ec4dcb9?s=256&d=identicon&r=PG",
                        "display_name": "Phillip Cloud",
                        "link": "https://stackoverflow.com/users/564538/phillip-cloud"
                    },
                    "is_accepted": true,
                    "score": 261,
                    "last_activity_date": 1377095374,
                    "creation_date": 1377095374,
                    "answer_id": 18360223,
                    "question_id": 18358938,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To get the <code>index</code> values as a <code>list</code>/<code>list</code> of <code>tuple</code>s for <code>Index</code>/<code>MultiIndex</code> do:</p>\n\n<pre><code>df.index.values.tolist()  # an ndarray method, you probably shouldn't depend on this\n</code></pre>\n\n<p>or</p>\n\n<pre><code>list(df.index.values)  # this will always work in pandas\n</code></pre>\n"
                }
            ]
        },
        {
            "8250010": [
                {
                    "owner": {
                        "account_id": 315753,
                        "reputation": 19299,
                        "user_id": 631586,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/47a4a177ca77dc75837720ca43b1d4d8?s=256&d=identicon&r=PG",
                        "display_name": "srgerg",
                        "link": "https://stackoverflow.com/users/631586/srgerg"
                    },
                    "is_accepted": true,
                    "score": 96,
                    "last_activity_date": 1504814821,
                    "last_edit_date": 1504814821,
                    "creation_date": 1322088524,
                    "answer_id": 8250143,
                    "question_id": 8250010,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Edit:</strong> Please see <a href=\"https://stackoverflow.com/a/9286586/1165522\">quornian's answer</a> to this question, which is better than mine and should be the accepted answer.</p>\n\n<p>According to the <a href=\"http://docs.python.org/library/argparse.html\" rel=\"noreferrer\">argparse documentation</a> the result of <code>parser.parse_args(...)</code> will \"only contain attributes for the main parser and the sub parser that was selected\". Unfortunately this may not be enough information to determine which sub parser was used. The documentation recommends using the <a href=\"http://docs.python.org/library/argparse.html#argparse.ArgumentParser.set_defaults\" rel=\"noreferrer\"><code>set_defaults(...)</code></a> method on the sub parser to solve this problem.</p>\n\n<p>For example, I've added calls to <code>set_defaults()</code> to your code:</p>\n\n<pre><code>import argparse\n\nparser = argparse.ArgumentParser( version='pyargparsetest 1.0' )\nsubparsers = parser.add_subparsers(help='commands')\n\n# all\nall_parser = subparsers.add_parser('all', help='process all apps')\nall_parser.set_defaults(which='all')\n\n# app\napp_parser = subparsers.add_parser('app', help='process a single app')\napp_parser.add_argument('appname', action='store', help='name of app to process')\napp_parser.set_defaults(which='app')\n</code></pre>\n\n<p>Now if you run</p>\n\n<pre><code>print parser.parse_args([\"all\"])\n</code></pre>\n\n<p>The result is</p>\n\n<pre><code>Namespace(which='all')\n</code></pre>\n\n<p>Check out the <a href=\"http://docs.python.org/library/argparse.html#argparse.ArgumentParser.add_subparsers\" rel=\"noreferrer\"><code>add_subparsers()</code></a> documentation for more information and another example.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 184418,
                        "reputation": 10113,
                        "user_id": 420452,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9b20348f76e7cd33e6332741a746b36a?s=256&d=identicon&r=PG",
                        "display_name": "quornian",
                        "link": "https://stackoverflow.com/users/420452/quornian"
                    },
                    "is_accepted": false,
                    "score": 398,
                    "last_activity_date": 1329268135,
                    "creation_date": 1329268135,
                    "answer_id": 9286586,
                    "question_id": 8250010,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A simpler solution is to add <code>dest</code> to the <code>add_subparsers</code> call. This is buried a bit further down in the <a href=\"http://docs.python.org/library/argparse.html#argparse.ArgumentParser.add_subparsers\" rel=\"noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <p>[...] If it is necessary to check the name of the subparser that was invoked, the dest keyword argument to the add_subparsers() call will work</p>\n</blockquote>\n\n<p>In your example replace:</p>\n\n<pre><code>subparsers = parser.add_subparsers(help='commands')\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>subparsers = parser.add_subparsers(help='commands', dest='command')\n</code></pre>\n\n<p>Now if you run:</p>\n\n<pre><code>print parser.parse_args([\"all\"])\n</code></pre>\n\n<p>you will get</p>\n\n<pre><code>Namespace(command='all')\n</code></pre>\n"
                }
            ]
        },
        {
            "11403932": [
                {
                    "owner": {
                        "account_id": 11254394,
                        "reputation": 100,
                        "user_id": 8254651,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c7c3bd0971841317c387c2bcda90211a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Benjamin",
                        "link": "https://stackoverflow.com/users/8254651/benjamin"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1680073664,
                    "last_edit_date": 1680073664,
                    "creation_date": 1531384900,
                    "answer_id": 51300976,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yes this topic is a bit old but i wanted to share the solution that worked for me for those who might need it anyway</p>\n<p>As Ali said, try to locate your program using the following from terminal :</p>\n<pre><code> sudo python3\n import serial\n</code></pre>\n<p><code>print(serial.__file__)</code> <strong>--&gt; Copy</strong></p>\n<p><code>CTRL+D #(to get out of python)</code></p>\n<p><code>sudo python3 </code><strong>--&gt;paste</strong><code>/__init__.py</code></p>\n<p>Running <code>__init__.py</code> will say to your program &quot;ok i'm going to use Serial from python3&quot;. My problem was that my python3 program was using Serial from python 2.7</p>\n<p>Other solution: remove other python versions</p>\n<p>Cao</p>\n<p>Sources :\n<a href=\"https://raspberrypi.stackexchange.com/questions/74742/python-serial-serial-module-not-found-error/85930#85930\">https://raspberrypi.stackexchange.com/questions/74742/python-serial-serial-module-not-found-error/85930#85930</a></p>\n<p>Tryhard</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1732722,
                        "reputation": 2279,
                        "user_id": 1585988,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/01d3701c6d2ffd86a71547518f400bd9?s=256&d=identicon&r=PG",
                        "display_name": "sql",
                        "link": "https://stackoverflow.com/users/1585988/sql"
                    },
                    "is_accepted": false,
                    "score": 227,
                    "last_activity_date": 1677404198,
                    "last_edit_date": 1677404198,
                    "creation_date": 1344460750,
                    "answer_id": 11873344,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm adding this solution for people who make the same mistake as I did.</p>\n<p>In most cases: rename your project file <code>serial.py</code> and delete <code>serial.pyc</code> if exists, then you can simply do <code>import serial</code> without the attribute error.</p>\n<p>Problem occurs when you import 'something' when your python file name is 'something.py'.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9469313,
                        "reputation": 2648,
                        "user_id": 7040601,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/985fcbe3730690230ab2b2a7d10db5b7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "FutureJJ",
                        "link": "https://stackoverflow.com/users/7040601/futurejj"
                    },
                    "is_accepted": false,
                    "score": 54,
                    "last_activity_date": 1542370534,
                    "last_edit_date": 1542370534,
                    "creation_date": 1521693330,
                    "answer_id": 49420649,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You have installed the <strong>incorrect package named '<em>serial</em>'</strong>.</p>\n\n<ul>\n<li>Run <code>pip uninstall serial</code> for python 2.x or <code>pip3 uninstall serial</code>\nfor python 3.x </li>\n<li>Then install <strong><em>pyserial</em></strong> if not already installed by\nrunning <code>pip install pyserial</code> for python 2.x or<code>pip3 install pyserial</code> for python 3.x.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1567089,
                        "reputation": 2191,
                        "user_id": 1455624,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0859b4495c406d7ed9e7cfd843cbf8cf?s=256&d=identicon&r=PG",
                        "display_name": "VGO",
                        "link": "https://stackoverflow.com/users/1455624/vgo"
                    },
                    "is_accepted": true,
                    "score": 139,
                    "last_activity_date": 1540738901,
                    "last_edit_date": 1540738901,
                    "creation_date": 1341872506,
                    "answer_id": 11404052,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You're importing the module, not the class. So, you must write:</p>\n\n<pre><code>from serial import Serial\n</code></pre>\n\n<p>You need to install <code>serial</code> module correctly: <code>pip install pyserial</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4980964,
                        "reputation": 3110,
                        "user_id": 5437768,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/2a2673a7ce448f0792c67f76adb4714f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Kevin",
                        "link": "https://stackoverflow.com/users/5437768/kevin"
                    },
                    "is_accepted": false,
                    "score": 240,
                    "last_activity_date": 1509370021,
                    "creation_date": 1509370021,
                    "answer_id": 47016463,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I accidentally installed 'serial' (<code>sudo python -m pip install serial</code>) instead of 'pySerial' (<code>sudo python -m pip install pyserial</code>), which lead to the same error.</p>\n\n<p>If the previously mentioned solutions did not work for you, double check if you installed the correct library.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1787841,
                        "reputation": 2046,
                        "user_id": 1628916,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7875879252a2abdf51876dbf837c4ad9?s=256&d=identicon&r=PG",
                        "display_name": "Chad Zawistowski",
                        "link": "https://stackoverflow.com/users/1628916/chad-zawistowski"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1476385040,
                    "creation_date": 1476385040,
                    "answer_id": 40028870,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This error can also happen if you have circular dependencies. Check your imports and make sure you do not have any cycles.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4178685,
                        "reputation": 4908,
                        "user_id": 3424423,
                        "user_type": "registered",
                        "accept_rate": 47,
                        "profile_image": "https://www.gravatar.com/avatar/032ceb443012b3f9dc1b76ba6da13035?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nearoo",
                        "link": "https://stackoverflow.com/users/3424423/nearoo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1414854992,
                    "last_edit_date": 1495541411,
                    "creation_date": 1414854992,
                    "answer_id": 26690673,
                    "question_id": 11403932,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are helpless like me, try this:</p>\n\n<p>List all Sub-Modules of \"Serial\" (or whatever package you are having trouble with) with the method described here:  <a href=\"https://stackoverflow.com/questions/1707709/list-all-the-modules-that-are-part-of-a-python-package\">List all the modules that are part of a python package</a></p>\n\n<p>In my case, the problems solved one after the other.</p>\n\n<p>...looks like a bug to me...</p>\n"
                }
            ]
        },
        {
            "16720541": [
                {
                    "owner": {
                        "account_id": 1929501,
                        "reputation": 5967,
                        "user_id": 1739226,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/9tg3k.png?s=256",
                        "display_name": "Jacek Przemieniecki",
                        "link": "https://stackoverflow.com/users/1739226/jacek-przemieniecki"
                    },
                    "is_accepted": false,
                    "score": 524,
                    "last_activity_date": 1659935609,
                    "last_edit_date": 1659935609,
                    "creation_date": 1369331749,
                    "answer_id": 16720752,
                    "question_id": 16720541,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You are looking for the <a href=\"http://docs.python.org/2/library/re.html#re.sub\" rel=\"noreferrer\">re.sub</a> function.</p>\n<pre><code>import re\ns = &quot;Example String&quot;\nreplaced = re.sub('[ES]', 'a', s)\nprint(replaced)\n</code></pre>\n<p>will print <code>axample atring</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 237172,
                        "reputation": 208015,
                        "user_id": 505154,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Clark",
                        "link": "https://stackoverflow.com/users/505154/andrew-clark"
                    },
                    "is_accepted": true,
                    "score": 741,
                    "last_activity_date": 1510877169,
                    "last_edit_date": 1510877169,
                    "creation_date": 1369331608,
                    "answer_id": 16720705,
                    "question_id": 16720541,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>str.replace()</code> <sup><a href=\"https://docs.python.org/2/library/stdtypes.html#str.replace\" rel=\"noreferrer\">v2</a>|<a href=\"https://docs.python.org/3/library/stdtypes.html#str.replace\" rel=\"noreferrer\">v3</a></sup> does not recognize regular expressions. </p>\n\n<p>To perform a substitution using a regular expression, use <code>re.sub()</code> <sup><a href=\"https://docs.python.org/2/library/re.html#re.sub\" rel=\"noreferrer\">v2</a>|<a href=\"https://docs.python.org/3/library/re.html#re.sub\" rel=\"noreferrer\">v3</a></sup>.</p>\n\n<p>For example:</p>\n\n<pre><code>import re\n\nline = re.sub(\n           r\"(?i)^.*interfaceOpDataFile.*$\", \n           \"interfaceOpDataFile %s\" % fileIn, \n           line\n       )\n</code></pre>\n\n<p>In a loop, it would be better to compile the regular expression first:</p>\n\n<pre><code>import re\n\nregex = re.compile(r\"^.*interfaceOpDataFile.*$\", re.IGNORECASE)\nfor line in some_file:\n    line = regex.sub(\"interfaceOpDataFile %s\" % fileIn, line)\n    # do something with the updated line\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2704333,
                        "reputation": 11060,
                        "user_id": 2334254,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://lh4.googleusercontent.com/-6e2XuTZAjgM/AAAAAAAAAAI/AAAAAAAAABU/JpF2-AkHsH4/photo.jpg?sz=256",
                        "display_name": "kpie",
                        "link": "https://stackoverflow.com/users/2334254/kpie"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1417893000,
                    "creation_date": 1417893000,
                    "answer_id": 27335357,
                    "question_id": 16720541,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As a summary </p>\n\n<pre><code>import sys\nimport re\n\nf = sys.argv[1]\nfind = sys.argv[2]\nreplace = sys.argv[3]\nwith open (f, \"r\") as myfile:\n     s=myfile.read()\nret = re.sub(find,replace, s)   # &lt;&lt;&lt; This is where the magic happens\nprint ret\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2167729,
                        "reputation": 3236,
                        "user_id": 1920451,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/12c081e647832be24cee5a948d41ae77?s=256&d=identicon&r=PG",
                        "display_name": "Nelz11",
                        "link": "https://stackoverflow.com/users/1920451/nelz11"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1369332617,
                    "creation_date": 1369332617,
                    "answer_id": 16720998,
                    "question_id": 16720541,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>re.sub</code> is definitely what you are looking for.  And so you know, you don't need the anchors and the wildcards.</p>\n\n<pre><code>re.sub(r\"(?i)interfaceOpDataFile\", \"interfaceOpDataFile %s\" % filein, line)\n</code></pre>\n\n<p>will do the same thing--matching the first substring that looks like \"interfaceOpDataFile\" and replacing it.</p>\n"
                }
            ]
        },
        {
            "49955489": [
                {
                    "owner": {
                        "account_id": 6339756,
                        "reputation": 2097,
                        "user_id": 4922088,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-icwNcDi9jE0/AAAAAAAAAAI/AAAAAAAAABg/dR_FNl6picg/photo.jpg?sz=256",
                        "display_name": "maroof shittu",
                        "link": "https://stackoverflow.com/users/4922088/maroof-shittu"
                    },
                    "is_accepted": true,
                    "score": 181,
                    "last_activity_date": 1527648451,
                    "creation_date": 1527648451,
                    "answer_id": 50595676,
                    "question_id": 49955489,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To answer your first question: <strong>yes it is feasible to develop an android application in pure python</strong>, in order to achieve this I suggest you use <a href=\"https://pybee.org\" rel=\"noreferrer\">BeeWare</a>, which is just a <strong>suite of python tools</strong>, that work together very well and they enable you to develop platform native applications in python.</p>\n\n<p>checkout <a href=\"https://www.youtube.com/watch?v=xezYYBL7nk0&amp;t\" rel=\"noreferrer\">this video</a> by the creator of BeeWare that perfectly explains and demonstrates it's application</p>\n\n<h2>How it works</h2>\n\n<p>Android's preferred language of implementation is Java - so if you want to write an Android application in Python, you need to have a way to run your Python code on a Java Virtual Machine. This is what <strong>VOC</strong> does. <a href=\"https://pybee.org/project/projects/bridges/voc\" rel=\"noreferrer\">VOC</a> is a transpiler - it takes Python source code, compiles it to CPython Bytecode, and then transpiles that bytecode into Java-compatible bytecode. The end result is that your Python source code files are compiled directly to a Java .class file, which can be packaged into an Android application.</p>\n\n<p>VOC also allows you to access native Java objects as if they were Python objects, implement Java interfaces with Python classes, and subclass Java classes with Python classes. Using this, you can write an Android application directly against the native Android APIs.</p>\n\n<p>Once you've written your native Android application, you can use <a href=\"https://pybee.org/project/projects/tools/briefcase\" rel=\"noreferrer\">Briefcase</a> to package your Python code as an Android application. </p>\n\n<p><strong>Briefcase</strong> is a tool for converting a Python project into a standalone native application. You can package projects for:</p>\n\n<ul>\n<li>Mac</li>\n<li>Windows</li>\n<li>Linux</li>\n<li>iPhone/iPad</li>\n<li>Android</li>\n<li>AppleTV</li>\n<li>tvOS.</li>\n</ul>\n\n<p>You can check This native Android <a href=\"https://github.com/eliasdorneles/tictactoe-voc\" rel=\"noreferrer\">Tic Tac Toe app</a> written in Python, using the BeeWare suite. on GitHub</p>\n\n<p>in addition to the BeeWare tools, you'll need to have a JDK and Android SDK installed to test run your application.</p>\n\n<p>and to answer your second question: a good environment can be anything you are comfortable with be it a text editor and a command line, or an IDE, if you're looking for a good python IDE I would suggest you try <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noreferrer\">Pycharm</a>, it has  a community edition which is free, and it has a similar environment as android studio, due to to the fact that were made by the same company.</p>\n\n<p>I hope this has been helpful</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5148470,
                        "reputation": 2953,
                        "user_id": 4123698,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9ac1e9a9dcf5957647928b9df21cd979?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "harvey",
                        "link": "https://stackoverflow.com/users/4123698/harvey"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1527645486,
                    "creation_date": 1527645486,
                    "answer_id": 50595332,
                    "question_id": 49955489,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are two primary contenders for python apps on Android</p>\n\n<h1>Chaquopy</h1>\n\n<p><a href=\"https://chaquo.com/chaquopy/\" rel=\"noreferrer\">https://chaquo.com/chaquopy/</a></p>\n\n<p>This integrates with the Android build system, it provides a Python API for all android features. To quote the site \"The complete Android API and user interface toolkit are directly at your disposal.\"</p>\n\n<h1>Beeware (Toga widget toolkit)</h1>\n\n<p><a href=\"https://pybee.org/\" rel=\"noreferrer\">https://pybee.org/</a></p>\n\n<p>This provides a multi target transpiler, supports many targets such as Android and iOS. It uses a generic widget toolkit (toga) that maps to the host interface calls. </p>\n\n<h1>Which One?</h1>\n\n<p>Both are active projects and their github accounts shows a fair amount of recent activity. </p>\n\n<p>Beeware Toga like all widget libraries is good for getting the basics out to multiple platforms. If you have basic designs, and a desire to expand to other platforms this should work out well for you.</p>\n\n<p>On the other hand, Chaquopy is a much more precise in its mapping of the python API to Android. It also allows you to mix in Java, useful if you want to use existing code from other resources. If you have strict design targets, and predominantly want to target Android this is a much better resource.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7502159,
                        "reputation": 10185,
                        "user_id": 7594961,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://i.sstatic.net/dnyEy.jpg?s=256",
                        "display_name": "Bertram Gilfoyle",
                        "link": "https://stackoverflow.com/users/7594961/bertram-gilfoyle"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1527616237,
                    "creation_date": 1527616237,
                    "answer_id": 50590166,
                    "question_id": 49955489,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Android, Python !</strong></p>\n\n<p>When I saw these two keywords together in your question, <a href=\"https://kivy.org/\" rel=\"noreferrer\">Kivy</a> is the one which came to my mind first.</p>\n\n<p><a href=\"https://i.sstatic.net/sGK6X.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/sGK6X.png\" alt=\"Kivy logo\"></a></p>\n\n<p>Before coming to native Android development in Java using Android Studio, I had tried <a href=\"https://kivy.org/\" rel=\"noreferrer\">Kivy</a>. It just awesome. Here are a few advantage I could find out.</p>\n\n<p><br/>\n<strong>Simple to use</strong></p>\n\n<p>With a python basics, you won't have trouble learning it.</p>\n\n<p><br/>\n<strong>Good community</strong></p>\n\n<p>It's well documented and has a great, active community.</p>\n\n<p><br/>\n<strong>Cross platform.</strong></p>\n\n<p>You can develop thing for Android, iOS, Windows, Linux and even Raspberry Pi with this single framework.\nOpen source.</p>\n\n<p><br/>\n<strong>It is a free software</strong></p>\n\n<p>At least few of it's (Cross platform) competitors want you to pay a fee if you want a commercial license.</p>\n\n<p><br/>\n<strong>Accelerated graphics support</strong></p>\n\n<p><a href=\"https://kivy.org/\" rel=\"noreferrer\">Kivy</a>'s graphics engine build over OpenGL ES 2 makes it suitable for softwares which require fast graphics rendering such as games.</p>\n\n<p><br/>\n<br/>\nNow coming into the next part of question, you can't use Android Studio IDE for Kivy. <a href=\"https://kivy.org/docs/gettingstarted/installation.html\" rel=\"noreferrer\">Here</a> is a detailed guide for setting up the development environment.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8087236,
                        "reputation": 1222,
                        "user_id": 6094414,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AKEuj.png?s=256",
                        "display_name": "emmagordon",
                        "link": "https://stackoverflow.com/users/6094414/emmagordon"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1527270141,
                    "creation_date": 1527270141,
                    "answer_id": 50534419,
                    "question_id": 49955489,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could try <a href=\"https://pybee.org\" rel=\"noreferrer\">BeeWare</a> - as described on their website:</p>\n\n<blockquote>\n  <p>Write your apps in Python and release them on iOS, Android, Windows, MacOS, Linux, Web, and tvOS using rich, native user interfaces. One codebase. Multiple apps.</p>\n</blockquote>\n\n<p>Gives you want you want now to write Android Apps in Python, plus has the advantage that you won't need to learn yet another framework in future if you end up also wanting to do something on one of the other listed platforms.</p>\n\n<p>Here's the <a href=\"https://pybee.org/project/using/android-app/\" rel=\"noreferrer\">Tutorial for Android Apps</a>.</p>\n"
                }
            ]
        },
        {
            "48235169": [
                {
                    "owner": {
                        "account_id": 10245828,
                        "reputation": 747,
                        "user_id": 7561641,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/3ef4a40600342e9611a8c0d577e6da85?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Hoda Fakharzadeh",
                        "link": "https://stackoverflow.com/users/7561641/hoda-fakharzadeh"
                    },
                    "is_accepted": true,
                    "score": 17,
                    "last_activity_date": 1516520786,
                    "creation_date": 1516520786,
                    "answer_id": 48364708,
                    "question_id": 48235169,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I removed numpy.py then updated my numpy and it worked!</p>\n"
                }
            ]
        },
        {
            "42246819": [
                {
                    "owner": {
                        "account_id": 6482621,
                        "reputation": 11084,
                        "user_id": 5019169,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/fvLIh.jpg?s=256",
                        "display_name": "Ahasanul Haque",
                        "link": "https://stackoverflow.com/users/5019169/ahasanul-haque"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1667908074,
                    "last_edit_date": 1667908074,
                    "creation_date": 1487155098,
                    "answer_id": 42246978,
                    "question_id": 42246819,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; \n&gt;&gt;&gt; _dir = Path.cwd()\n&gt;&gt;&gt; \n&gt;&gt;&gt; files = _dir.glob('*.txt')\n&gt;&gt;&gt; \n&gt;&gt;&gt; type(files)\n&lt;class 'generator'&gt;\n</code></pre>\n<p>Here, <code>files</code> is a <code>generator</code>, which can be read only once and then get exhausted. So, when you will try to read it second time, you won't have it.</p>\n<pre><code>&gt;&gt;&gt; for i in files:\n...     print(i)\n... \n/home/ahsanul/test/hello1.txt\n/home/ahsanul/test/hello2.txt\n/home/ahsanul/test/hello3.txt\n/home/ahsanul/test/b.txt\n&gt;&gt;&gt; # let's loop though for the 2nd time\n... \n&gt;&gt;&gt; for i in files:\n...     print(i)\n... \n&gt;&gt;&gt; \n</code></pre>\n"
                }
            ]
        },
        {
            "38978214": [
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860800,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": true,
                    "score": 119,
                    "last_activity_date": 1596575844,
                    "last_edit_date": 1596575844,
                    "creation_date": 1471359454,
                    "answer_id": 38978237,
                    "question_id": 38978214,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think you need <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html\" rel=\"noreferrer\"><code>concat</code></a>, but first set index of each <code>DataFrame</code> by common column:</p>\n<pre><code>dfs = [df.set_index('id') for df in dfList]\nprint pd.concat(dfs, axis=1)\n</code></pre>\n<p>If need join by <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html\" rel=\"noreferrer\"><code>merge</code></a>:</p>\n<pre><code>from functools import reduce\ndf = reduce(lambda df1,df2: pd.merge(df1,df2,on='id'), dfList)\n</code></pre>\n"
                }
            ]
        },
        {
            "2351793": [
                {
                    "owner": {
                        "account_id": 55645,
                        "reputation": 74913,
                        "user_id": 166686,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2428725d68892ed63f4d492549eebb76?s=256&d=identicon&r=PG",
                        "display_name": "mjv",
                        "link": "https://stackoverflow.com/users/166686/mjv"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267396039,
                    "score": 7,
                    "last_activity_date": 1673290872,
                    "last_edit_date": 1673290872,
                    "creation_date": 1267379021,
                    "answer_id": 2351912,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A few points related to the ecosystem and indirectly the community:</p>\n<ul>\n<li><p>I wished I had been reminded more about the <code>Batteries included</code>.  I think people should be told to print-out the <a href=\"https://docs.python.org/3/library/\" rel=\"nofollow noreferrer\"><strong>Table of Contents of the Standard Library</strong></a> and keep it under their pillow, for frequent reviews (that advice, I finally took, several years into it, from an online intro/beginner's video presentation!).   The [relative] stability, extensive but relevant content of the Std Lib speaks to the thoughtful governance of the community leaders and its beloved BDFL.</p>\n</li>\n<li><p>I think newcomers can also be &quot;warned&quot; (the word is maybe too strong, too unfair) about the extreme variety of <a href=\"https://web.archive.org/web/20180415050937/https://pypi.python.org/pypi\" rel=\"nofollow noreferrer\"><strong>PiPy</strong></a>.  This reflects the vibrant, smart and diverse (in terms of background, domain of application, interests...) collective of users and contributors.  This however can be overwhelming and possibly risky as all packages in there are not &quot;prime time ready&quot;  (But many are and &quot;saved my life&quot; many times over).</p>\n</li>\n<li><p>Even if you feel too new to Python, don't only <em>use</em> the libraries, do peek under the hood!  This is true of many languages, but maybe particularly of Python, there's much to be learned from perusing various source code.  The reasons this may be particular true for Python are intrinsic to the language itself (multi-paradigms, hi level of abstraction...) but also because of the <em>relative</em> uniformity of coding (and architecting) style and because of the general level of collaboration within the community.</p>\n</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 6018,
                        "reputation": 595083,
                        "user_id": 9951,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/CIFG8.png?s=256",
                        "display_name": "Bite code",
                        "link": "https://stackoverflow.com/users/9951/bite-code"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267396039,
                    "score": 18,
                    "last_activity_date": 1673290859,
                    "last_edit_date": 1673290859,
                    "creation_date": 1267377502,
                    "answer_id": 2351832,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think one of the most important thing a beginner need to know about Python ecosystem is that it's a general purpose language surrounded by specialized libs. Experienced pythonistas know them, but a newbie can't:</p>\n<ul>\n<li>Don't stop to tkinter : go <a href=\"https://www.wxpython.org/\" rel=\"nofollow noreferrer\">wx</a>, <a href=\"https://pygobject.readthedocs.io/en/latest/\" rel=\"nofollow noreferrer\">gtk</a> or <a href=\"https://riverbankcomputing.com/\" rel=\"nofollow noreferrer\">qt</a>.</li>\n<li>Don't dev web code by hands : use <a href=\"https://turbogears.org/\" rel=\"nofollow noreferrer\">TurboGears</a>, <a href=\"https://pylonshq.com/\" rel=\"nofollow noreferrer\">Pylons</a>, <a href=\"https://webpy.org/\" rel=\"nofollow noreferrer\">Web.py</a> or <a href=\"https://www.djangoproject.com/\" rel=\"nofollow noreferrer\">Django</a>.</li>\n<li>Don't parse HTML / XML with hard tools : use <a href=\"https://web.archive.org/web/20101125125653/http://codespeak.net:80/lxml/\" rel=\"nofollow noreferrer\">lxml</a>  or <a href=\"https://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow noreferrer\">beautifulsoup</a>.</li>\n<li>Don't make syscall to imagemagik : use <a href=\"https://python-pillow.org/\" rel=\"nofollow noreferrer\">PIL</a>.</li>\n<li>Don't make advanced maths manually : use <a href=\"https://numpy.org/\" rel=\"nofollow noreferrer\">NumPy</a> and <a href=\"https://scipy.org/\" rel=\"nofollow noreferrer\">SciPy</a>.</li>\n<li>Don't access simple databases by hand : use ORM like <a href=\"https://www.sqlalchemy.org/\" rel=\"nofollow noreferrer\">SQLAlchemy</a>.</li>\n<li>Don't reinvent sysadmin wheels : use <a href=\"https://www.fabfile.org/\" rel=\"nofollow noreferrer\">Fabric</a>.</li>\n<li>etc.</li>\n</ul>\n<p>The main ones should be listed in a book with guidances to choose among them.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 26014,
                        "reputation": 5293,
                        "user_id": 67393,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/b72cb6e5656c9541ed9e1a7bf8f06983?s=256&d=identicon&r=PG",
                        "display_name": "Tom Willis",
                        "link": "https://stackoverflow.com/users/67393/tom-willis"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267502272,
                    "score": 1,
                    "last_activity_date": 1267502272,
                    "creation_date": 1267502272,
                    "answer_id": 2360813,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>developing a python package that can be installed with easy_install etc... I consider it equivalent to developing a jar or dll etc.... </p>\n\n<p>on the same token, developing said package(s) with virtualenv or buildout</p>\n\n<p>If I would have known those things sooner, I would have probably used python for more than just scripting way back when I first started using it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18953,
                        "reputation": 37584,
                        "user_id": 43927,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8c41ddf8372ced51b47d3d7e215342b3?s=256&d=identicon&r=PG",
                        "display_name": "rob",
                        "link": "https://stackoverflow.com/users/43927/rob"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267396039,
                    "score": 4,
                    "last_activity_date": 1267384635,
                    "creation_date": 1267384635,
                    "answer_id": 2352283,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>From <a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"nofollow noreferrer\">PEP 20:</a>  </p>\n\n<pre><code>import this\n</code></pre>\n\n<p>(aka, the Zen of Python)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1267396039,
                    "score": 10,
                    "last_activity_date": 1267378793,
                    "creation_date": 1267378793,
                    "answer_id": 2351900,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>\"What confused you the most when you just started out with Python?\"</p>\n\n<p>Rule 2 of learning Python: <strong>Any general-purpose module or framework you think you want has already been written.  Several times.</strong></p>\n\n<p>The hard part is realizing that your idea is</p>\n\n<ol>\n<li><p>Not unique.</p></li>\n<li><p>Been already improved upon before you even starting thinking about it.</p></li>\n<li><p>Already posted somewhere.</p></li>\n</ol>\n\n<p>So, code less and search more.  Search widely and flexibly until you find things that are similar to what you want to do.</p>\n\n<ul>\n<li><p>Realize that you might have a name you think is descriptive.  But other folks may call it something different.  Join the community, adopt their naming.  You may not like the phrase \"ORM\", but that's what it's called. </p></li>\n<li><p>Realize that your idea, no matter how sound it seems, may be really poor.  When you find a framework  that seems to have \"needless extra features\", you may be missing something from your idea.  </p></li>\n<li><p>Realize that your idea, no matter how \"intuitive\" it seems, may be really poor.  When you find a framework that seems \"counter-intuitive\", the problem could be yours.  Learn theirs first, then compare and contrast after you've mastered theirs.  Until you've mastered theirs, keep searching and learning.</p></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267396039,
                    "score": 5,
                    "last_activity_date": 1267378444,
                    "creation_date": 1267378444,
                    "answer_id": 2351879,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>\"What confused you the most when you just started out with Python?\"</p>\n\n<p>Rule 1 of learning Python:  <strong>Use the Source, Luke.</strong></p>\n\n<p>There are question on SO asking for \"good\" source from which to learn Python.  The best answers amount to \"read the libraries that came with Python.\"</p>\n\n<p>One can say that the libraries that come with Python are quirky.  In places.  Which makes them all the better for learning from.</p>\n\n<ol>\n<li><p>There's a community of like-minded people who are not clones.</p></li>\n<li><p>Open source software is the highest-quality software you'll ever get to work with, but it's not created by paid developers who will rigidly enforce standards.</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 66813,
                        "reputation": 23254,
                        "user_id": 195823,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3ee8771e44a8f01cc73c697cab4ae605?s=256&d=identicon&r=PG",
                        "display_name": "Adrien Plisson",
                        "link": "https://stackoverflow.com/users/195823/adrien-plisson"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267396039,
                    "score": 4,
                    "last_activity_date": 1267377211,
                    "creation_date": 1267377211,
                    "answer_id": 2351811,
                    "question_id": 2351793,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>explaining what a PEP is, how it is written and who wrote them, where we can find them. PEPs give a lot of background informations about a specific feature of the language. they also are the tool which shows how fast evolving python is.</p>\n\n<p>(i wish i had read some PEPs earlier, but i was not really aware of them, although they are frequently linked in the manual)</p>\n"
                }
            ]
        },
        {
            "4309684": [
                {
                    "owner": {
                        "account_id": 158237,
                        "reputation": 70844,
                        "user_id": 376728,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/908d58f023f47e0a7d07fc671606341d?s=256&d=identicon&r=PG",
                        "display_name": "aaronasterling",
                        "link": "https://stackoverflow.com/users/376728/aaronasterling"
                    },
                    "is_accepted": true,
                    "score": 165,
                    "last_activity_date": 1649322035,
                    "last_edit_date": 1649322035,
                    "creation_date": 1291079565,
                    "answer_id": 4309689,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you don't pass any arguments to <a href=\"https://docs.python.org/3/library/stdtypes.html#str.split\" rel=\"noreferrer\"><code>str.split()</code></a>, it will treat runs of whitespace as a single separator:</p>\n<pre><code>&gt;&gt;&gt; ' 1234    Q-24 2010-11-29         563   abc  a6G47er15'.split()\n['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5426654,
                        "reputation": 466,
                        "user_id": 4318692,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-oldS_oW4ajg/AAAAAAAAAAI/AAAAAAAAACQ/6vcwDz3ZiWU/photo.jpg?sz=256",
                        "display_name": "Guy de Carufel",
                        "link": "https://stackoverflow.com/users/4318692/guy-de-carufel"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1649112725,
                    "last_edit_date": 1649112725,
                    "creation_date": 1563292836,
                    "answer_id": 57061328,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To split lines by multiple spaces while keeping single spaces in strings:</p>\n<pre><code>with open(&quot;textfile.txt&quot;) as f:\n    for line in f:\n        line = [i.strip() for i in line.split('  ') if i]\n        print(line)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15351825,
                        "reputation": 589,
                        "user_id": 11075348,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-wg2misHRYP4/AAAAAAAAAAI/AAAAAAAAAAc/U8GMIRZbvP0/photo.jpg?sz=256",
                        "display_name": "hitesh bedre",
                        "link": "https://stackoverflow.com/users/11075348/hitesh-bedre"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1634647840,
                    "last_edit_date": 1634647840,
                    "creation_date": 1630955092,
                    "answer_id": 69079266,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>We can also use regex's split method here too.</p>\n<pre><code>import re\n\nsample = ' 1234    Q-24 2010-11-29         563   abc  a6G47er15        '\n\nword_list = re.split(&quot;\\s+&quot;, sample.strip())\n\nprint(word_list) #['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']\n</code></pre>\n<p>I hope this might help someone</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20026,
                        "reputation": 81808,
                        "user_id": 47453,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/412dc332ab3593c636e5a5202cf98870?s=256&d=identicon&r=PG",
                        "display_name": "Bill Lynch",
                        "link": "https://stackoverflow.com/users/47453/bill-lynch"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1599064026,
                    "last_edit_date": 1599064026,
                    "creation_date": 1291079586,
                    "answer_id": 4309692,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>s = ' 1234    Q-24 2010-11-29         563   abc  a6G47er15        '\nss = s.split()\nprint(ss)  # ['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6551571,
                        "reputation": 656,
                        "user_id": 5065795,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-sKwASzA-Hg4/AAAAAAAAAAI/AAAAAAAAHeE/9VRrD-1PjQU/photo.jpg?sz=256",
                        "display_name": "Muthukumar",
                        "link": "https://stackoverflow.com/users/5065795/muthukumar"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1589217887,
                    "last_edit_date": 1589217887,
                    "creation_date": 1589217509,
                    "answer_id": 61735419,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are many solutions to this question.</p>\n\n<p>1.) Using split() is the simplest method</p>\n\n<pre><code>s = ' 1234    Q-24 2010-11-29         563   abc  a6G47er15              '\ns = s.split()\nprint(s)\n\n\nOutput &gt;&gt; ['1234','Q-24','2010-11-29','563','abc','a6G47er15']\n</code></pre>\n\n<p>2.) There is another way to solve this using findall() method, you need to \"import re\" in the starting of your python file.</p>\n\n<pre><code>import re\ndef MagicString(str):\n    return re.findall(r'\\S+', str)\ns = ' 1234    Q-24 2010-11-29         563   abc  a6G47er15'\ns = MagicString(s)\nprint(s)\nprint(MagicString('    he  ll   o'))\n\n\nOutput &gt;&gt; ['1234','Q-24','2010-11-29','563','abc','a6G47er15']\nOutput &gt;&gt; ['he','ll','o']\n</code></pre>\n\n<p>3.) If you want to remove any leading (spaces at the beginning) and trailing (spaces at the end) alone use strip().</p>\n\n<pre><code>s = '   hello          '\noutput = s.strip()\nprint(output)\n\n\nOutput &gt;&gt; hello\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1231503,
                        "reputation": 104,
                        "user_id": 1195981,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/82ed58a7e44bd32a4716d743b4015672?s=256&d=identicon&r=PG",
                        "display_name": "Danny Sanchez",
                        "link": "https://stackoverflow.com/users/1195981/danny-sanchez"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1521726177,
                    "last_edit_date": 1521726177,
                    "creation_date": 1521725703,
                    "answer_id": 49430099,
                    "question_id": 4309684,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you have single spaces amid your data (like an address in one field), here's a solution for when the delimiter has two or more spaces:</p>\n\n<pre><code>with open(\"textfile.txt\") as f:\n    content = f.readlines()\n\n    for line in content:\n        # Get all variable-length spaces down to two. Then use two spaces as the delimiter.\n        while line.replace(\"   \", \"  \") != line:\n            line = line.replace(\"   \", \"  \")\n\n        # The strip is optional here.\n        data = line.strip().split(\"  \")\n        print(data)\n</code></pre>\n"
                }
            ]
        },
        {
            "42541748": [
                {
                    "owner": {
                        "account_id": 8015275,
                        "reputation": 19354,
                        "user_id": 6045800,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10153412706975770/picture?type=large",
                        "display_name": "Tomerikoo",
                        "link": "https://stackoverflow.com/users/6045800/tomerikoo"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1642527673,
                    "last_edit_date": 1642527673,
                    "creation_date": 1642527248,
                    "answer_id": 70759962,
                    "question_id": 42541748,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Since Python 3.4, working with paths is done easily with <a href=\"https://docs.python.org/3/library/pathlib.html#module-pathlib\" rel=\"nofollow noreferrer\"><code>pathlib</code></a>. Moving/renaming a file is done with <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.rename\" rel=\"nofollow noreferrer\"><code>rename</code></a> or <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.replace\" rel=\"nofollow noreferrer\"><code>replace</code></a> (will unconditionally do the replace). So combining with the <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parent\" rel=\"nofollow noreferrer\"><code>parent</code></a> attribute and the <a href=\"https://docs.python.org/3/library/pathlib.html#operators\" rel=\"nofollow noreferrer\">concat operator</a>, you can do:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pathlib import Path\n\nsource = Path(&quot;path/to/file/oldname&quot;)\n\ntarget = source.replace(source.parent / &quot;renames&quot; / &quot;newname&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9717481,
                        "reputation": 751,
                        "user_id": 7207334,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad3f8c7e2415af69b5ca9dc518469fc5?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Danny",
                        "link": "https://stackoverflow.com/users/7207334/danny"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1642524992,
                    "last_edit_date": 1642524992,
                    "creation_date": 1488402938,
                    "answer_id": 42542180,
                    "question_id": 42541748,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yes you can do this. In Python you can use the <code>move</code> function in <a href=\"https://docs.python.org/2/library/shutil.html\" rel=\"noreferrer\">shutil</a> library to achieve this.</p>\n<p>Let's say on Linux, you have a file in <code>/home/user/Downloads</code> folder named &quot;test.txt&quot; and you want to move it to <code>/home/user/Documents</code> and also change the name to &quot;useful_name.txt&quot;. You can do both things in the same line of code:</p>\n<pre><code>import shutil\n\nshutil.move('/home/user/Downloads/test.txt', '/home/user/Documents/useful_name.txt')\n</code></pre>\n<p>In your case you can do this:</p>\n<pre><code>import shutil\n\nshutil.move('oldname', 'renamedfiles/newname')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8614459,
                        "reputation": 1129,
                        "user_id": 6451874,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/838d4361fd7440c4b23373573a299fe6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ofer Arial",
                        "link": "https://stackoverflow.com/users/6451874/ofer-arial"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1576951952,
                    "last_edit_date": 1576951952,
                    "creation_date": 1488401837,
                    "answer_id": 42541913,
                    "question_id": 42541748,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To do both of the operations, you can use the <code>os.rename(src, dest)</code> function.</p>\n\n<p>You should have the wanted directory to save the file in, and the new file name. You can do this for every file you run across in your loop.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code># In Windows\ndest_dir = \"tmp\\\\2\"\nnew_name = \"bar.txt\"\ncurrent_file_name = \"tmp\\\\1\\\\foo.txt\"\nos.rename(current_file_name, os.path.join(dest_dir, new_name))\n</code></pre>\n\n<p>The <code>rename</code> function allows you to change the name of the file and it's folder at the same time.</p>\n\n<p>To prevent any errors in renaming and moving of the file, use <a href=\"https://docs.python.org/3/library/shutil.html#shutil.move\" rel=\"nofollow noreferrer\">shutil.move</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 151071,
                        "reputation": 154170,
                        "user_id": 364696,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7eBCp.jpg?s=256",
                        "display_name": "ShadowRanger",
                        "link": "https://stackoverflow.com/users/364696/shadowranger"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1488401846,
                    "creation_date": 1488401846,
                    "answer_id": 42541917,
                    "question_id": 42541748,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>os.rename</code> (and <code>os.replace</code>) won't work if the source and target locations are on different partitions/drives/devices. If that's the case, you need to <a href=\"https://docs.python.org/3/library/shutil.html#shutil.move\" rel=\"noreferrer\">use <code>shutil.move</code></a>, which will use atomic renaming if possible, and fallback to copy-then-delete if the destination is not on the same file system. It's perfectly happy to both move and rename in the same operation; the operation is the same regardless.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4596321,
                        "reputation": 696,
                        "user_id": 3728261,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2f9216f3adbf85c8b4730bc5929806d0?s=256&d=identicon&r=PG",
                        "display_name": "Mathieu Bour",
                        "link": "https://stackoverflow.com/users/3728261/mathieu-bour"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1488401582,
                    "creation_date": 1488401582,
                    "answer_id": 42541828,
                    "question_id": 42541748,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Create a Python file in your desired directory and write something like that :</p>\n\n<pre><code>import os\n\nfor filename in os.listdir(\".\"):\n    if(filename ...):\n        newFilename = ...\n        os.rename(filename, newFilename)\n</code></pre>\n"
                }
            ]
        },
        {
            "8635063": [
                {
                    "owner": {
                        "account_id": 14592470,
                        "reputation": 31,
                        "user_id": 10539193,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2b9cc2fee7e96bc77fd94b0908bccccd?s=256&d=identicon&r=PG",
                        "display_name": "Anjana K V",
                        "link": "https://stackoverflow.com/users/10539193/anjana-k-v"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1540204604,
                    "last_edit_date": 1540204604,
                    "creation_date": 1540198228,
                    "answer_id": 52925490,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><code>librosa</code> is the package you are looking for. It contains extensive range of functions for audio analysis. <code>librosa.beat.beat_track()</code> and <code>librosa.beat.tempo()</code> functions will extract the required features for you.</p>\n\n<p>Spectral features like chroma, MFCC, Zero-crossing rate, and rhythm features such as tempogram can also be obtained using the functions available in <code>librosa</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1640612,
                        "reputation": 2009,
                        "user_id": 1513130,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ba1e6a1dff555b7ddd0b2f95e8a5c5fa?s=256&d=identicon&r=PG",
                        "display_name": "wizbcn",
                        "link": "https://stackoverflow.com/users/1513130/wizbcn"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1533954650,
                    "last_edit_date": 1533954650,
                    "creation_date": 1359416616,
                    "answer_id": 14573319,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This answer comes a year later, but anyway, for the record. I found three audio libraries with python bindings that extract features from audio. They are not that easy to install since they are really in C and you need to properly compile the python bindings and add them to the path to import, but here they are:</p>\n\n<ul>\n<li><a href=\"http://yaafe.sourceforge.net/\" rel=\"noreferrer\">Yaafe</a></li>\n<li><a href=\"http://aubio.org/\" rel=\"noreferrer\">Aubio</a></li>\n<li><a href=\"https://github.com/jamiebullock/LibXtract\" rel=\"noreferrer\">LibXtract</a></li>\n<li><a href=\"http://essentia.upf.edu/documentation/\" rel=\"noreferrer\">Essentia</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 6277369,
                        "reputation": 6389,
                        "user_id": 4879665,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/Tvytj.png?s=256",
                        "display_name": "Liam",
                        "link": "https://stackoverflow.com/users/4879665/liam"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1492601520,
                    "last_edit_date": 1492601520,
                    "creation_date": 1490119008,
                    "answer_id": 42934754,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>i've found this code by @scaperot <a href=\"https://github.com/scaperot/the-BPM-detector-python/blob/master/bpm_detection/bpm_detection.py\" rel=\"nofollow noreferrer\">here</a> that could help you:</p>\n\n<pre><code>import wave, array, math, time, argparse, sys\nimport numpy, pywt\nfrom scipy import signal\nimport pdb\nimport matplotlib.pyplot as plt\n\ndef read_wav(filename):\n\n    #open file, get metadata for audio\n    try:\n        wf = wave.open(filename,'rb')\n    except IOError, e:\n        print e\n        return\n\n    # typ = choose_type( wf.getsampwidth() ) #TODO: implement choose_type\n    nsamps = wf.getnframes();\n    assert(nsamps &gt; 0);\n\n    fs = wf.getframerate()\n    assert(fs &gt; 0)\n\n    # read entire file and make into an array\n    samps = list(array.array('i',wf.readframes(nsamps)))\n    #print 'Read', nsamps,'samples from', filename\n    try:\n        assert(nsamps == len(samps))\n    except AssertionError, e:\n        print  nsamps, \"not equal to\", len(samps)\n\n    return samps, fs\n\n# print an error when no data can be found\ndef no_audio_data():\n    print \"No audio data for sample, skipping...\"\n    return None, None\n\n# simple peak detection\ndef peak_detect(data):\n    max_val = numpy.amax(abs(data)) \n    peak_ndx = numpy.where(data==max_val)\n    if len(peak_ndx[0]) == 0: #if nothing found then the max must be negative\n        peak_ndx = numpy.where(data==-max_val)\n    return peak_ndx\n\ndef bpm_detector(data,fs):\n    cA = [] \n    cD = []\n    correl = []\n    cD_sum = []\n    levels = 4\n    max_decimation = 2**(levels-1);\n    min_ndx = 60./ 220 * (fs/max_decimation)\n    max_ndx = 60./ 40 * (fs/max_decimation)\n\n    for loop in range(0,levels):\n        cD = []\n        # 1) DWT\n        if loop == 0:\n            [cA,cD] = pywt.dwt(data,'db4');\n            cD_minlen = len(cD)/max_decimation+1;\n            cD_sum = numpy.zeros(cD_minlen);\n        else:\n            [cA,cD] = pywt.dwt(cA,'db4');\n        # 2) Filter\n        cD = signal.lfilter([0.01],[1 -0.99],cD);\n\n        # 4) Subtractargs.filename out the mean.\n\n        # 5) Decimate for reconstruction later.\n        cD = abs(cD[::(2**(levels-loop-1))]);\n        cD = cD - numpy.mean(cD);\n        # 6) Recombine the signal before ACF\n        #    essentially, each level I concatenate \n        #    the detail coefs (i.e. the HPF values)\n        #    to the beginning of the array\n        cD_sum = cD[0:cD_minlen] + cD_sum;\n\n    if [b for b in cA if b != 0.0] == []:\n        return no_audio_data()\n    # adding in the approximate data as well...    \n    cA = signal.lfilter([0.01],[1 -0.99],cA);\n    cA = abs(cA);\n    cA = cA - numpy.mean(cA);\n    cD_sum = cA[0:cD_minlen] + cD_sum;\n\n    # ACF\n    correl = numpy.correlate(cD_sum,cD_sum,'full') \n\n    midpoint = len(correl) / 2\n    correl_midpoint_tmp = correl[midpoint:]\n    peak_ndx = peak_detect(correl_midpoint_tmp[min_ndx:max_ndx]);\n    if len(peak_ndx) &gt; 1:\n        return no_audio_data()\n\n    peak_ndx_adjusted = peak_ndx[0]+min_ndx;\n    bpm = 60./ peak_ndx_adjusted * (fs/max_decimation)\n    print bpm\n    return bpm,correl\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Process .wav file to determine the Beats Per Minute.')\n    parser.add_argument('--filename', required=True,\n                   help='.wav file for processing')\n    parser.add_argument('--window', type=float, default=3,\n                   help='size of the the window (seconds) that will be scanned to determine the bpm.  Typically less than 10 seconds. [3]')\n\n    args = parser.parse_args()\n    samps,fs = read_wav(args.filename)\n\n    data = []\n    correl=[]\n    bpm = 0\n    n=0;\n    nsamps = len(samps)\n    window_samps = int(args.window*fs)         \n    samps_ndx = 0;  #first sample in window_ndx \n    max_window_ndx = nsamps / window_samps;\n    bpms = numpy.zeros(max_window_ndx)\n\n    #iterate through all windows\n    for window_ndx in xrange(0,max_window_ndx):\n\n        #get a new set of samples\n        #print n,\":\",len(bpms),\":\",max_window_ndx,\":\",fs,\":\",nsamps,\":\",samps_ndx\n        data = samps[samps_ndx:samps_ndx+window_samps]\n        if not ((len(data) % window_samps) == 0):\n            raise AssertionError( str(len(data) ) ) \n\n        bpm, correl_temp = bpm_detector(data,fs)\n        if bpm == None:\n            continue\n        bpms[window_ndx] = bpm\n        correl = correl_temp\n\n        #iterate at the end of the loop\n        samps_ndx = samps_ndx+window_samps;\n        n=n+1; #counter for debug...\n\n    bpm = numpy.median(bpms)\n    print 'Completed.  Estimated Beats Per Minute:', bpm\n\n    n = range(0,len(correl))\n    plt.plot(n,abs(correl)); \n    plt.show(False); #plot non-blocking\n    time.sleep(10);\nplt.close();\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4302752,
                        "reputation": 531,
                        "user_id": 3516064,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://graph.facebook.com/36907902/picture?type=large",
                        "display_name": "alexvicegrab",
                        "link": "https://stackoverflow.com/users/3516064/alexvicegrab"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1464372975,
                    "creation_date": 1464372975,
                    "answer_id": 37489967,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Librosa has the librosa.beat.beat_track() method, but you need to supply an estimate of the BMP as the \"start_bpm\" parameter. Not sure how accurate it is, but perhaps worth a shot.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 121808,
                        "reputation": 83306,
                        "user_id": 315168,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=256&d=identicon&r=PG",
                        "display_name": "Mikko Ohtamaa",
                        "link": "https://stackoverflow.com/users/315168/mikko-ohtamaa"
                    },
                    "is_accepted": true,
                    "score": 7,
                    "last_activity_date": 1431464861,
                    "last_edit_date": 1431464861,
                    "creation_date": 1324897962,
                    "answer_id": 8635196,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Echo Nest API is what you are looking for:</p>\n\n<p><a href=\"http://echonest.github.io/remix/\" rel=\"nofollow\">http://echonest.github.io/remix/</a></p>\n\n<p>Python bindings are rich, though installing Echo Nest can be pain as the team does not seem to be able to build solid installers.</p>\n\n<p>However it does not do local processing. Instead, it calculates audio fingerprint and uploads the song for Echo Nest servers for the information extraction using algorithms they don't expose.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2233230,
                        "reputation": 325,
                        "user_id": 1970329,
                        "user_type": "registered",
                        "accept_rate": 17,
                        "profile_image": "https://www.gravatar.com/avatar/0591a200a9fe13e1cd5a7b248884604b?s=256&d=identicon&r=PG",
                        "display_name": "gourxb",
                        "link": "https://stackoverflow.com/users/1970329/gourxb"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1399657347,
                    "creation_date": 1399657347,
                    "answer_id": 23570910,
                    "question_id": 8635063,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Well i recently came across <a href=\"http://www.vamp-plugins.org/vampy.html\" rel=\"nofollow\">Vampy</a> which is wrapper plugin that enables you to use Vamp plugins written in Python in any Vamp host. Vamp is an audio processing plugin system for plugins that extract descriptive information from audio data. Hope it helps.</p>\n"
                }
            ]
        },
        {
            "34431673": [
                {
                    "owner": {
                        "account_id": 445220,
                        "reputation": 85292,
                        "user_id": 837534,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4f3782b004830f622e19029e5f7fc146?s=256&d=identicon&r=PG",
                        "display_name": "Mike M&#252;ller",
                        "link": "https://stackoverflow.com/users/837534/mike-m%c3%bcller"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1450863467,
                    "last_edit_date": 1450863467,
                    "creation_date": 1450860364,
                    "answer_id": 34431716,
                    "question_id": 34431673,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <code>subprocess</code>:</p>\n\n<pre><code>import subprocess\nprint(subprocess.check_output(['nslookup', 'google.com']))\n</code></pre>\n\n<p>If the return code is not zero it will raise a <code>CalledProcessError</code> exception:</p>\n\n<pre><code>try:\n    print(subprocess.check_output(['nslookup', 'google.com']))\nexcept subprocess.CalledProcessError as err:\n    print(err)\n</code></pre>\n\n<p><a href=\"https://docs.python.org/3/library/os.html?highlight=os.system#os.system\" rel=\"noreferrer\">os.system</a> only returns the exit code of the command. Here <code>0</code> means success. Any other number stands for an operating-system-dependent error. The output goes to stdout of this process. <a href=\"https://docs.python.org/3/library/subprocess.html#module-subprocess\" rel=\"noreferrer\">subprocess</a> intends to replace <code>os.system</code>.</p>\n\n<p><a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\">subprocess.check_output</a> is a convenience wrapper around <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.Popen\" rel=\"noreferrer\">subprocess.Popen</a> that simplifies your use case.</p>\n"
                }
            ]
        },
        {
            "37372603": [
                {
                    "owner": {
                        "account_id": 915710,
                        "reputation": 31329,
                        "user_id": 948550,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/cnPfBRgY.jpg?s=256",
                        "display_name": "Reut Sharabani",
                        "link": "https://stackoverflow.com/users/948550/reut-sharabani"
                    },
                    "is_accepted": true,
                    "score": 343,
                    "last_activity_date": 1713651781,
                    "last_edit_date": 1713651781,
                    "creation_date": 1463909985,
                    "answer_id": 37372690,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Strings are immutable. <a href=\"https://docs.python.org/3/library/stdtypes.html#str.replace\" rel=\"noreferrer\"><code>str.replace</code></a> creates a <strong>new</strong> string. This is stated in the documentation:</p>\n<blockquote>\n<p><code>str.replace(old, new[, count])</code></p>\n<p>Return a <strong>copy</strong> of the string with all occurrences of substring <em>old</em> replaced by <em>new</em>. [...]</p>\n</blockquote>\n<p>This means you have to re-allocate the set or re-populate it (re-allocating is easier with a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#sets\" rel=\"noreferrer\">set comprehension</a>):</p>\n<pre><code>new_set = {x.replace('.good', '').replace('.bad', '') for x in set1}\n</code></pre>\n<p>P.S. if you're using <strong>Python 3.9</strong> or newer, use <a href=\"https://docs.python.org/3/library/stdtypes.html#str.removeprefix\" rel=\"noreferrer\"><code>str.removeprefix()</code></a> or <a href=\"https://docs.python.org/3/library/stdtypes.html#str.removesuffix\" rel=\"noreferrer\"><code>str.removesuffix()</code></a> instead:</p>\n<pre><code>new_set = {x.removesuffix('.good').removesuffix('.bad') for x in set1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7811525,
                        "reputation": 1729,
                        "user_id": 5907578,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://i.sstatic.net/rLawg.jpg?s=256",
                        "display_name": "DineshKumar",
                        "link": "https://stackoverflow.com/users/5907578/dineshkumar"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1618528511,
                    "last_edit_date": 1618528511,
                    "creation_date": 1597121171,
                    "answer_id": 63351650,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In <strong>Python 3.9</strong>+ you could remove the suffix using <code>str.removesuffix('mysuffix')</code>. From <a href=\"https://docs.python.org/3/library/stdtypes.html#str.removesuffix\" rel=\"noreferrer\">the docs</a>:</p>\n<blockquote>\n<p>If the string ends with the <em>suffix</em> string and that <em>suffix</em> is not empty, return <code>string[:-len(suffix)]</code>. Otherwise, return a copy of the original string</p>\n</blockquote>\n<p>So you can either create a new empty set and add each element without the suffix to it:</p>\n<pre><code>set1  = {'Apple.good', 'Orange.good', 'Pear.bad', 'Pear.good', 'Banana.bad', 'Potato.bad'}\n\nset2 = set()\nfor s in set1:\n   set2.add(s.removesuffix(&quot;.good&quot;).removesuffix(&quot;.bad&quot;))\n</code></pre>\n<p>Or create the new set using a set comprehension:</p>\n<pre><code>set2 = {s.removesuffix(&quot;.good&quot;).removesuffix(&quot;.bad&quot;) for s in set1}\n   \nprint(set2)\n</code></pre>\n<p>Output:</p>\n<pre><code>{'Orange', 'Pear', 'Apple', 'Banana', 'Potato'}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14688816,
                        "reputation": 478,
                        "user_id": 10608055,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/63266ccf1eb5aa31ff3c6b0ed3f8749c?s=256&d=identicon&r=PG",
                        "display_name": "Amin Azizzadeh",
                        "link": "https://stackoverflow.com/users/10608055/amin-azizzadeh"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1605264628,
                    "creation_date": 1605264628,
                    "answer_id": 64819594,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code># practices 2\nstr = &quot;Amin Is A Good Programmer&quot;\nnew_set = str.replace('Good', '')\nprint(new_set)\n\n \n\nprint : Amin Is A  Programmer\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6321039,
                        "reputation": 401096,
                        "user_id": 4909087,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/Zcszo.png?s=256",
                        "display_name": "cs95",
                        "link": "https://stackoverflow.com/users/4909087/cs95"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1560877870,
                    "last_edit_date": 1560877870,
                    "creation_date": 1560876341,
                    "answer_id": 56653680,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>When there are multiple substrings to remove, one simple and effective option is to use <code>re.sub</code> with a compiled pattern that involves joining all the substrings-to-remove using the regex OR (<code>|</code>) pipe.</p>\n\n<pre><code>import re\n\nto_remove = ['.good', '.bad']\nstrings = ['Apple.good','Orange.good','Pear.bad']\n\np = re.compile('|'.join(map(re.escape, to_remove))) # escape to handle metachars\n[p.sub('', s) for s in strings]\n# ['Apple', 'Orange', 'Pear']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13701262,
                        "reputation": 195,
                        "user_id": 9886334,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/50b03a6616e098d9468fb6f6137b12c2?s=256&d=identicon&r=PG",
                        "display_name": "gueeest",
                        "link": "https://stackoverflow.com/users/9886334/gueeest"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1527972959,
                    "creation_date": 1527972959,
                    "answer_id": 50661091,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All you need is a bit of black magic! </p>\n\n<pre><code>&gt;&gt;&gt; a = [\"cherry.bad\",\"pear.good\", \"apple.good\"]\n&gt;&gt;&gt; a = list(map(lambda x: x.replace('.good','').replace('.bad',''),a))\n&gt;&gt;&gt; a\n['cherry', 'pear', 'apple']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4840402,
                        "reputation": 3792,
                        "user_id": 4058737,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/429d5f28732d9a401b23b0fc56c13446?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "rsc05",
                        "link": "https://stackoverflow.com/users/4058737/rsc05"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1523897521,
                    "last_edit_date": 1592644375,
                    "creation_date": 1523897521,
                    "answer_id": 49862498,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>If list</h1>\n<p>I was doing something for a list which is a set of strings and you want to remove all lines that have a certain substring you can do this</p>\n<pre><code>import re\ndef RemoveInList(sub,LinSplitUnOr):\n    indices = [i for i, x in enumerate(LinSplitUnOr) if re.search(sub, x)]\n    A = [i for j, i in enumerate(LinSplitUnOr) if j not in indices]\n    return A\n</code></pre>\n<p>where <code>sub</code> is a patter that you do not wish to have in a list of lines <code>LinSplitUnOr</code></p>\n<p>for example</p>\n<pre><code>A=['Apple.good','Orange.good','Pear.bad','Pear.good','Banana.bad','Potato.bad']\nsub = 'good'\nA=RemoveInList(sub,A)\n</code></pre>\n<p>Then <code>A</code> will be</p>\n<p><a href=\"https://i.sstatic.net/BgZ4o.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/BgZ4o.jpg\" alt=\"enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 11443440,
                        "reputation": 480,
                        "user_id": 8766822,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/96dabb26f2dbf1455f69321164b64ff3?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user140259",
                        "link": "https://stackoverflow.com/users/8766822/user140259"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1513167076,
                    "last_edit_date": 1513167076,
                    "creation_date": 1512680275,
                    "answer_id": 47703661,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I did the test (but it is not your example) and the data does not return them orderly or complete</p>\n\n<pre><code>&gt;&gt;&gt; ind = ['p5','p1','p8','p4','p2','p8']\n&gt;&gt;&gt; newind = {x.replace('p','') for x in ind}\n&gt;&gt;&gt; newind\n{'1', '2', '8', '5', '4'}\n</code></pre>\n\n<p>I proved that this works:</p>\n\n<pre><code>&gt;&gt;&gt; ind = ['p5','p1','p8','p4','p2','p8']\n&gt;&gt;&gt; newind = [x.replace('p','') for x in ind]\n&gt;&gt;&gt; newind\n['5', '1', '8', '4', '2', '8']\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&gt;&gt;&gt; newind = []\n&gt;&gt;&gt; ind = ['p5','p1','p8','p4','p2','p8']\n&gt;&gt;&gt; for x in ind:\n...     newind.append(x.replace('p',''))\n&gt;&gt;&gt; newind\n['5', '1', '8', '4', '2', '8']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8255879,
                        "reputation": 459,
                        "user_id": 6209059,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/VUV9E.jpg?s=256",
                        "display_name": "Bablu",
                        "link": "https://stackoverflow.com/users/6209059/bablu"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1463911519,
                    "creation_date": 1463911519,
                    "answer_id": 37372929,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could do this:</p>\n\n<pre><code>import re\nimport string\nset1={'Apple.good','Orange.good','Pear.bad','Pear.good','Banana.bad','Potato.bad'}\n\nfor x in set1:\n    x.replace('.good',' ')\n    x.replace('.bad',' ')\n    x = re.sub('\\.good$', '', x)\n    x = re.sub('\\.bad$', '', x)\n    print(x)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2894695,
                        "reputation": 35963,
                        "user_id": 2482744,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://i.sstatic.net/OQPNY.png?s=256",
                        "display_name": "Alex Hall",
                        "link": "https://stackoverflow.com/users/2482744/alex-hall"
                    },
                    "is_accepted": false,
                    "score": 115,
                    "last_activity_date": 1463909638,
                    "creation_date": 1463909638,
                    "answer_id": 37372635,
                    "question_id": 37372603,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; x = 'Pear.good'\n&gt;&gt;&gt; y = x.replace('.good','')\n&gt;&gt;&gt; y\n'Pear'\n&gt;&gt;&gt; x\n'Pear.good'\n</code></pre>\n\n<p><code>.replace</code> doesn't <em>change</em> the string, it returns a copy of the string with the replacement. You can't change the string directly because strings are immutable.</p>\n\n<p>You need to take the return values from <code>x.replace</code> and put them in a new set.</p>\n"
                }
            ]
        },
        {
            "4481724": [
                {
                    "owner": {
                        "account_id": 4383157,
                        "reputation": 4238,
                        "user_id": 3574214,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://graph.facebook.com/1480041478/picture?type=large",
                        "display_name": "yask",
                        "link": "https://stackoverflow.com/users/3574214/yask"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1582031146,
                    "last_edit_date": 1582031146,
                    "creation_date": 1484665829,
                    "answer_id": 41700597,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If the list contains numbers, you can use <code>map()</code> with <code>join()</code>.</p>\n\n<p>Eg:</p>\n\n<pre><code>&gt;&gt;&gt; arr = [3, 30, 34, 5, 9]\n&gt;&gt;&gt; ''.join(map(str, arr))\n3303459\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 199019,
                        "reputation": 76981,
                        "user_id": 444036,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/My2AZ.jpg?s=256",
                        "display_name": "Paulo Scardine",
                        "link": "https://stackoverflow.com/users/444036/paulo-scardine"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1569857149,
                    "last_edit_date": 1569857149,
                    "creation_date": 1292736129,
                    "answer_id": 4481737,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This works in many popular languages like JavaScript and Ruby, why not in Python?</p>\n\n<pre><code>&gt;&gt;&gt; ['a', 'b', 'c'].join('')\nTraceback (most recent call last):\n   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'list' object has no attribute 'join'\n</code></pre>\n\n<p>Strange enough, in Python the <code>join</code> method is on the <code>str</code> class:</p>\n\n<pre><code># this is the Python way\n\"\".join(['a','b','c','d'])\n</code></pre>\n\n<p>Why <code>join</code> is not a method in the <code>list</code> object like in JavaScript or other popular script languages? It is one example of how the Python community thinks. Since join is returning a string, it should be placed in the string class, not on the list class, so the <code>str.join(list)</code> method means: join the list into a new string using <code>str</code> as a separator (in this case <code>str</code> is an empty string). </p>\n\n<p>Somehow I got to love this way of thinking after a while. I can complain about a lot of things in Python design, but not about its coherence.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8614021,
                        "reputation": 139998,
                        "user_id": 6451573,
                        "user_type": "moderator",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/Z5c6A.jpg?s=256",
                        "display_name": "Jean-Fran&#231;ois Fabre",
                        "link": "https://stackoverflow.com/users/6451573/jean-fran%c3%a7ois-fabre"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1544019609,
                    "last_edit_date": 1544019609,
                    "creation_date": 1543956764,
                    "answer_id": 53621235,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>besides <code>str.join</code> which is the most natural way, a possibility is to use <code>io.StringIO</code> and abusing <code>writelines</code> to write all elements in one go:</p>\n\n<pre><code>import io\n\na = ['a','b','c','d']\n\nout = io.StringIO()\nout.writelines(a)\nprint(out.getvalue())\n</code></pre>\n\n<p>prints:</p>\n\n<pre><code>abcd\n</code></pre>\n\n<p>When using this approach with a generator function or an iterable which isn't a <code>tuple</code> or a <code>list</code>, it saves the temporary list creation that <code>join</code> does to allocate the right size in one go (and a list of 1-character strings is very expensive memory-wise).</p>\n\n<p>If you're low in memory and you have a lazily-evaluated object as input, this approach is the best solution.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8183749,
                        "reputation": 13703,
                        "user_id": 6160119,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/JlM4b.jpg?s=256",
                        "display_name": "Tonechas",
                        "link": "https://stackoverflow.com/users/6160119/tonechas"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1483550878,
                    "creation_date": 1483550878,
                    "answer_id": 41469859,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could also use <a href=\"https://docs.python.org/3.5/library/operator.html#operator.concat\" rel=\"nofollow noreferrer\"><code>operator.concat()</code></a> like this:</p>\n\n<pre><code>&gt;&gt;&gt; from operator import concat\n&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; reduce(concat, a)\n'abcd'\n</code></pre>\n\n<p>If you're using Python 3 you need to prepend:</p>\n\n<pre><code>&gt;&gt;&gt; from functools import reduce\n</code></pre>\n\n<p>since the builtin <code>reduce()</code> has been removed from Python 3 and now lives in <a href=\"https://docs.python.org/3/library/functools.html#functools.reduce\" rel=\"nofollow noreferrer\"><code>functools.reduce()</code></a>. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 2336136,
                        "reputation": 352,
                        "user_id": 2048437,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/WukKU.jpg?s=256",
                        "display_name": "Kyle",
                        "link": "https://stackoverflow.com/users/2048437/kyle"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1483549167,
                    "last_edit_date": 1483549167,
                    "creation_date": 1361333056,
                    "answer_id": 14972105,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If your Python interpreter is old (1.5.2, for example, which is common on some older Linux distributions), you may not have <code>join()</code> available as a method on any old string object, and you will instead need to use the string module. Example:</p>\n\n<pre><code>a = ['a', 'b', 'c', 'd']\n\ntry:\n    b = ''.join(a)\n\nexcept AttributeError:\n    import string\n    b = string.join(a, '')\n</code></pre>\n\n<p>The string <code>b</code> will be <code>'abcd'</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3201855,
                        "reputation": 59,
                        "user_id": 2703762,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8d22ac322ca1ccec0dbabaa464dd9e2b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "cce",
                        "link": "https://stackoverflow.com/users/2703762/cce"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1377092663,
                    "last_edit_date": 1377092663,
                    "creation_date": 1377091069,
                    "answer_id": 18358536,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The reduce function also works</p>\n\n<pre><code>import operator\nh=['a','b','c','d']\nreduce(operator.add, h)\n'abcd'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1979774,
                        "reputation": 55,
                        "user_id": 1776673,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/0d64d7984ef0a2c2cfa0b0f92f09ed80?s=256&d=identicon&r=PG",
                        "display_name": "Bill",
                        "link": "https://stackoverflow.com/users/1776673/bill"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1351247841,
                    "last_edit_date": 1351247841,
                    "creation_date": 1351246706,
                    "answer_id": 13085030,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>h = ['a','b','c','d','e','f']\ng = ''\nfor f in h:\n    g = g + f\n\n&gt;&gt;&gt; g\n'abcdef'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 433571,
                        "reputation": 144,
                        "user_id": 818980,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a30a99e9e6b30ba1cb018f5383e366f6?s=256&d=identicon&r=PG",
                        "display_name": "bigeagle",
                        "link": "https://stackoverflow.com/users/818980/bigeagle"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1341926151,
                    "last_edit_date": 1341926151,
                    "creation_date": 1333813746,
                    "answer_id": 10055869,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This may be the fastest way:</p>\n\n<pre><code>&gt;&gt; from array import array\n&gt;&gt; a = ['a','b','c','d']\n&gt;&gt; array('B', map(ord,a)).tostring()\n'abcd'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 76599,
                        "reputation": 76470,
                        "user_id": 219162,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/4c7f016d15f498b5274e153dce3e7974?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Stutzbach",
                        "link": "https://stackoverflow.com/users/219162/daniel-stutzbach"
                    },
                    "is_accepted": true,
                    "score": 701,
                    "last_activity_date": 1292736050,
                    "creation_date": 1292736050,
                    "answer_id": 4481731,
                    "question_id": 4481724,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use the <code>join</code> method of the empty string to join all of the strings together with the empty string in between, like so:</p>\n\n<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; ''.join(a)\n'abcd'\n</code></pre>\n"
                }
            ]
        },
        {
            "41837247": [
                {
                    "owner": {
                        "account_id": 7854629,
                        "reputation": 51,
                        "user_id": 11002305,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/76e95f99596bf90cd99d752d41d9174a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Jan Meeuwissen",
                        "link": "https://stackoverflow.com/users/11002305/jan-meeuwissen"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1570408953,
                    "last_edit_date": 1570408953,
                    "creation_date": 1549041772,
                    "answer_id": 54484257,
                    "question_id": 41837247,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If it is user input, chances are the user inputted a string. So better catch the exception as well with <code>try</code>:</p>\n\n<pre><code>user_input = '88.8'\ntry:\n    user_input = int(float(user_input))\nexcept:\n    user_input = 0\nprint(user_input)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 288449,
                        "reputation": 5865,
                        "user_id": 588867,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/bd0b7d4ff3d230077c16f4ea9fc29747?s=256&d=identicon&r=PG",
                        "display_name": "biocyberman",
                        "link": "https://stackoverflow.com/users/588867/biocyberman"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1570408886,
                    "last_edit_date": 1570408886,
                    "creation_date": 1513760046,
                    "answer_id": 47902073,
                    "question_id": 41837247,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Maybe you were hoping for something like <code>my_number = my_input.to_int</code>. But it is not currently possible to do it natively.  And funny enough, if you want to extract the integer part from a float-like string, you have to convert to <code>float</code> first, and then to <code>int</code>. Or else you get <code>ValueError: invalid literal for int()</code>.</p>\n\n<p><strong>The robust way:</strong> </p>\n\n<pre><code>my_input = int(float(my_input))\n</code></pre>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>&gt;&gt;&gt; nb = \"88.8\"\n&gt;&gt;&gt; int(nb)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '88.8'\n&gt;&gt;&gt; int(float(nb))\n88\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 449119,
                        "reputation": 3754,
                        "user_id": 843726,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/95b742d1293465a9958a06a7b27273ea?s=256&d=identicon&r=PG",
                        "display_name": "Gonzalo",
                        "link": "https://stackoverflow.com/users/843726/gonzalo"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1570408740,
                    "last_edit_date": 1570408740,
                    "creation_date": 1485287193,
                    "answer_id": 41837653,
                    "question_id": 41837247,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>my_input = int(my_input)\n</code></pre>\n\n<p>There is no shorter way than using the <a href=\"https://docs.python.org/library/functions.html#int\" rel=\"noreferrer\"><code>int</code></a> function (as you mention)</p>\n"
                }
            ]
        },
        {
            "61522624": [
                {
                    "owner": {
                        "account_id": 932653,
                        "reputation": 19899,
                        "user_id": 962190,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/sxvRS.png?s=256",
                        "display_name": "Arne",
                        "link": "https://stackoverflow.com/users/962190/arne"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1588438245,
                    "last_edit_date": 1588438245,
                    "creation_date": 1588434034,
                    "answer_id": 61562009,
                    "question_id": 61522624,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The underlying problem that you have seems to be the same one that is described <a href=\"https://stackoverflow.com/questions/51575931/class-inheritance-in-python-3-7-dataclasses/53085935#53085935\">here</a>. The short version of that post is that in a function signature (including the dataclass-generated <code>__init__</code> method), obligatory arguments (like NamedEvent's <code>name</code>) can not follow after arguments with default values (which are necessary to define the behavior of Event's <code>updated_at</code>) - a child's fields will always follow after those of its parent.</p>\n\n<p>So either you have no default values in your parent class (which doesn't work in this case) or all your child's fields need default values (which is annoying, and sometimes simply not feasible).</p>\n\n<p>The post I linked above discusses some patterns that you can apply to solve your problem, but as a nicer alternative you can also use the third part party package <a href=\"https://pydantic-docs.helpmanual.io/usage/dataclasses/\" rel=\"noreferrer\"><code>pydantic</code></a> which already solved this problem for you. A sample implementation could look like this:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import pydantic\nfrom datetime import datetime\n\n\nclass Event(pydantic.BaseModel):\n    id: str\n    created_at: datetime = None\n    updated_at: datetime = None\n\n    @pydantic.validator('created_at', pre=True, always=True)\n    def default_created(cls, v):\n        return v or datetime.now()\n\n    @pydantic.validator('updated_at', pre=True, always=True)\n    def default_modified(cls, v, values):\n        return v or values['created_at']\n\n\nclass NamedEvent(Event):\n    name: str\n</code></pre>\n\n<p>The default-value specification through validators is a bit cumbersome, but overall it's a very useful package that fixes lots of the shortcomings that you run into when using dataclasses, plus some more.</p>\n\n<p>Using the class definition, an instance of <code>NamedEvent</code> can be created like this:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; NamedEvent(id='1', name='foo')\nNamedEvent(id='1', created_at=datetime.datetime(2020, 5, 2, 18, 50, 12, 902732), updated_at=datetime.datetime(2020, 5, 2, 18, 50, 12, 902732), name='foo')\n</code></pre>\n"
                }
            ]
        },
        {
            "10003143": [
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183665,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": true,
                    "score": 46,
                    "last_activity_date": 1345492010,
                    "last_edit_date": 1345492010,
                    "creation_date": 1333497886,
                    "answer_id": 10003201,
                    "question_id": 10003143,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try <code>itertools.islice()</code>.</p>\n\n<pre><code> deque_slice = collections.deque(itertools.islice(my_deque, 10, 20))\n</code></pre>\n\n<p>Indexing into a <code>deque</code> requires following a linked list from the beginning each time, so the <code>islice()</code> approach, skipping items to get to the start of the slice, will give the best possible performance (better than coding it as an index operation for each element).</p>\n\n<p>You could easily write a <code>deque</code> subclass that does this automagically for you.</p>\n\n<pre><code>class sliceable_deque(collections.deque):\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return type(self)(itertools.islice(self, index.start,\n                                               index.stop, index.step))\n        return collections.deque.__getitem__(self, index)\n</code></pre>\n\n<p>Note that you can't use negative indices or step values with <code>islice</code>. It's possible to code around this, and might be worthwhile to do so if you take the subclass approach. For negative start or stop you can just add the length of the deque; for negative step, you'll need to throw a <code>reversed()</code> in there somewhere. I'll leave that as an exercise.  :-)</p>\n\n<p>The performance of retrieving individual items from the <code>deque</code> will be slightly reduced by the <code>if</code> test for the slice. If this is an issue, you can use an EAFP pattern to ameliorate this somewhat -- at the cost of making the slice path slightly less performant due to the need to process the exception:</p>\n\n<pre><code>class sliceable_deque(collections.deque):\n    def __getitem__(self, index):\n        try:\n            return collections.deque.__getitem__(self, index)\n        except TypeError:\n            return type(self)(itertools.islice(self, index.start,\n                                               index.stop, index.step))\n</code></pre>\n\n<p>Of course there's an extra function call in there still, compared to a regular <code>deque</code>, so if you really care about performance, you really want to add a separate <code>slice()</code> method or the like.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 965649,
                        "reputation": 214653,
                        "user_id": 989121,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/1Cvf7.png?s=256",
                        "display_name": "georg",
                        "link": "https://stackoverflow.com/users/989121/georg"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1333538163,
                    "last_edit_date": 1495542345,
                    "creation_date": 1333499227,
                    "answer_id": 10003351,
                    "question_id": 10003143,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If performance is a concern, consider a direct access/comprehension method as suggested in <a href=\"https://stackoverflow.com/a/7064292/989121\">this answer</a>. It's much faster than <code>islice</code> on large collections:</p>\n\n<pre><code>import timeit\n\nsetup = \"\"\"\nimport collections, itertools\nd = collections.deque(range(10000))\n\"\"\"\n\nprint timeit.timeit('list(itertools.islice(d, 9000, 9010))', setup, number=10000)\n## 0.631947040558\nprint timeit.timeit('[d[i] for i in range(9000, 9010)]', setup, number=10000)\n## 0.0292208194733\n</code></pre>\n\n<p>As per @RaymondHettinger comment below, the comprehension method is only better when slices are short. On longer slices, <code>islice</code> convincingly wins. For example, here are timings for slicing a 10,000 items deque from the offset 6000:</p>\n\n<pre>\noffset  length      islice       compr\n 6000      10      400.496      46.611\n 6000      50      424.600     183.988\n 6000      90      432.277     237.894\n 6000     130      441.289     352.383\n 6000     170      431.299     404.596\n 6000     210      456.405     546.503\n 6000     250      448.895     575.995\n 6000     290      485.802     778.294\n 6000     330      483.704     781.703\n 6000     370      490.904     948.501\n 6000     410      500.011     875.807\n 6000     450      508.213    1045.299\n 6000     490      518.894    1010.203\n 6000     530      530.887    1192.784\n 6000     570      534.415    1151.013\n 6000     610      530.887    1504.779\n 6000     650      539.279    1486.802\n 6000     690      536.084    1650.810\n 6000     730      549.698    1454.687\n 6000     770      564.909    1576.114\n 6000     810      545.001    1588.297\n 6000     850      564.504    1711.607\n 6000     890      584.197    1760.793\n 6000     930      564.480    1963.091\n 6000     970      586.390    1955.199\n 6000    1010      590.706    2117.491\n</pre>\n\n<p>The comprehension does first few slices very fast, but the performance falls down dramatically as the length grows. <code>islice</code> is slower on smaller slices, but its average speed is much better.</p>\n\n<p>This is how I tested:</p>\n\n<pre><code>import timeit\n\nsize = 10000\nrepeats = 100\n\nsetup = \"\"\"\nimport collections, itertools\nd = collections.deque(range(%d))\n\"\"\" % size\n\nprint '%5s\\t%5s\\t%10s\\t%10s' % ('offset', 'length', 'islice', 'compr')\n\nfor offset in range(0, size - 2000, 2000):\n    for length in range(10, 2000, 40):\n        t1 = timeit.timeit('list(itertools.islice(d, %d, %d))' % (offset, offset + length), setup, number=repeats)\n        t2 = timeit.timeit('[d[i] for i in range(%d, %d)]' % (offset, offset + length), setup, number=repeats)\n        print '%5d\\t%5d\\t%10.3f\\t%10.3f' % (offset, length, t1 * 100000, t2  * 100000)\n</code></pre>\n"
                }
            ]
        },
        {
            "4547274": [
                {
                    "owner": {
                        "account_id": 16202,
                        "reputation": 47472,
                        "user_id": 35060,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=256&d=identicon&r=PG",
                        "display_name": "ismail",
                        "link": "https://stackoverflow.com/users/35060/ismail"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1710993975,
                    "last_edit_date": 1710993975,
                    "creation_date": 1293551677,
                    "answer_id": 4547289,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use the <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow noreferrer\"><code>pickle</code></a> module to save it to disk and load later on.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3887475,
                        "reputation": 10036,
                        "user_id": 3218482,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/21bb89394ccc312decb6b60b89a0fa9d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Eyal Ch",
                        "link": "https://stackoverflow.com/users/3218482/eyal-ch"
                    },
                    "is_accepted": false,
                    "score": 217,
                    "last_activity_date": 1674048867,
                    "last_edit_date": 1674048867,
                    "creation_date": 1395739242,
                    "answer_id": 22630069,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use <a href=\"https://docs.python.org/2/library/json.html\" rel=\"noreferrer\"><code>json</code></a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import json\n\n# convert to string\ninput_ = json.dumps({'id': id_ })\n    \n# load to dict\nmy_dict = json.loads(input_) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 315,
                        "reputation": 26625,
                        "user_id": 394,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/06f3d27f16cead7b8c8b65c5d84397d9?s=256&d=identicon&r=PG",
                        "display_name": "PabloG",
                        "link": "https://stackoverflow.com/users/394/pablog"
                    },
                    "is_accepted": false,
                    "score": 267,
                    "last_activity_date": 1652862708,
                    "last_edit_date": 1652862708,
                    "creation_date": 1293578788,
                    "answer_id": 4550359,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If your dictionary isn't too big maybe str + eval can do the work:</p>\n<pre><code>dict1 = {'one':1, 'two':2, 'three': {'three.1': 3.1, 'three.2': 3.2 }}\nstr1 = str(dict1)\n\ndict2 = eval(str1)\n\nprint(dict1 == dict2)\n</code></pre>\n<p>You can use <a href=\"http://docs.python.org/library/ast.html\" rel=\"noreferrer\">ast.literal_eval</a> instead of eval for additional security if the source is untrusted.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2164620,
                        "reputation": 2010,
                        "user_id": 1918127,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/P0mp4.jpg?s=256",
                        "display_name": "mathandy",
                        "link": "https://stackoverflow.com/users/1918127/mathandy"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1631773090,
                    "creation_date": 1631773090,
                    "answer_id": 69203240,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You may find the <code>json.dumps()</code> method needs help handling some object types.</p>\n<p>Credit goes to the top answer of <a href=\"https://stackoverflow.com/questions/11875770\">this post</a> for the following:</p>\n<pre><code>import json\njson.dumps(my_dictionary, indent=4, sort_keys=True, default=str)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 21392931,
                        "reputation": 11,
                        "user_id": 15756640,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gj-RJBfVwGLSdVcrIQ0Lt7OsQv8UungX74F8ORb=k-s256",
                        "display_name": "Abdul Muiz Khan",
                        "link": "https://stackoverflow.com/users/15756640/abdul-muiz-khan"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1619290872,
                    "creation_date": 1619290872,
                    "answer_id": 67246443,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I figured out the problem was not with my dict object it was the keys and values that were of RubyString type after loading it with RubyMarshl 'loads' method</p>\n<p>So i did this:</p>\n<pre><code>dic_items = dict.items()\nnew_dict = {str(key): str(value) for key, value in dic_items}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4011695,
                        "reputation": 57,
                        "user_id": 6658984,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7976e9268c0432d139ca9944815bf975?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "beta",
                        "link": "https://stackoverflow.com/users/6658984/beta"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1615187975,
                    "last_edit_date": 1615187975,
                    "creation_date": 1479808936,
                    "answer_id": 40738852,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Chinese language you should do the following adjustments:</p>\n<pre><code>import codecs\nfout = codecs.open(&quot;xxx.json&quot;, &quot;w&quot;, &quot;utf-8&quot;)\ndict_to_json = json.dumps({'text':&quot;\u4e2d\u6587&quot;},ensure_ascii=False,indent=2)\nfout.write(dict_to_json + '\\n')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 250484,
                        "reputation": 13073,
                        "user_id": 527227,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://www.gravatar.com/avatar/3b2494b3af9f2d6c16caecd665fbf7a6?s=256&d=identicon&r=PG",
                        "display_name": "Tyler Eaves",
                        "link": "https://stackoverflow.com/users/527227/tyler-eaves"
                    },
                    "is_accepted": true,
                    "score": 466,
                    "last_activity_date": 1566856846,
                    "last_edit_date": 1566856846,
                    "creation_date": 1293551992,
                    "answer_id": 4547331,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://docs.python.org/3/library/json.html\" rel=\"noreferrer\">The json module</a> is a good solution here. It has the advantages over pickle that it only produces plain text output, and is cross-platform and cross-version.</p>\n\n<pre><code>import json\njson.dumps(dict)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11946229,
                        "reputation": 14718,
                        "user_id": 8741356,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/F2WyF.jpg?s=256",
                        "display_name": "Tomasz Bartkowiak",
                        "link": "https://stackoverflow.com/users/8741356/tomasz-bartkowiak"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1563003113,
                    "creation_date": 1563003113,
                    "answer_id": 57017092,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you care about the speed use <a href=\"https://github.com/esnme/ultrajson\" rel=\"nofollow noreferrer\">ujson</a> (UltraJSON), which has the same API as json:</p>\n\n<pre><code>import ujson\nujson.dumps([{\"key\": \"value\"}, 81, True])\n# '[{\"key\":\"value\"},81,true]'\nujson.loads(\"\"\"[{\"key\": \"value\"}, 81, true]\"\"\")\n# [{u'key': u'value'}, 81, True]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2428490,
                        "reputation": 15052,
                        "user_id": 2119941,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4wUhx.jpg?s=256",
                        "display_name": "Hrvoje",
                        "link": "https://stackoverflow.com/users/2119941/hrvoje"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1562915567,
                    "creation_date": 1562915567,
                    "answer_id": 57001894,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Convert dictionary into JSON (string)</strong></p>\n\n<pre><code>import json \n\nmydict = { \"name\" : \"Don\", \n          \"surname\" : \"Mandol\", \n          \"age\" : 43} \n\nresult = json.dumps(mydict)\n\nprint(result[0:20])\n</code></pre>\n\n<p>will get you:</p>\n\n<blockquote>\n  <p>{\"name\": \"Don\", \"sur</p>\n</blockquote>\n\n<p><strong>Convert string into dictionary</strong></p>\n\n<pre><code>back_to_mydict = json.loads(result) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13369603,
                        "reputation": 2242,
                        "user_id": 9648520,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b66b8361eb8ed1d83a4ab48102701cc5?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "FightWithCode",
                        "link": "https://stackoverflow.com/users/9648520/fightwithcode"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1541949159,
                    "last_edit_date": 1541949159,
                    "creation_date": 1533569330,
                    "answer_id": 51711024,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Why not to use Python 3's inbuilt <strong>ast</strong> library's function <strong>literal_eval</strong>. It is better to use <strong>literal_eval</strong> instead of <strong>eval</strong></p>\n\n<pre><code>import ast\nstr_of_dict = \"{'key1': 'key1value', 'key2': 'key2value'}\"\nast.literal_eval(str_of_dict)\n</code></pre>\n\n<p>will give output as actual Dictionary</p>\n\n<pre><code>{'key1': 'key1value', 'key2': 'key2value'}\n</code></pre>\n\n<p>And If you are asking to convert a <strong>Dictionary to a String</strong> then, How about using <strong>str()</strong> method of Python. </p>\n\n<p>Suppose the dictionary is : </p>\n\n<pre><code>my_dict = {'key1': 'key1value', 'key2': 'key2value'}\n</code></pre>\n\n<p>And this will be done like this : </p>\n\n<pre><code>str(my_dict)\n</code></pre>\n\n<p>Will Print : </p>\n\n<pre><code>\"{'key1': 'key1value', 'key2': 'key2value'}\"\n</code></pre>\n\n<p>This is the easy as you like.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1369916106,
                    "last_edit_date": 1369916106,
                    "creation_date": 1293580104,
                    "answer_id": 4550441,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you should consider using the <a href=\"http://docs.python.org/library/shelve.html#module-shelve\" rel=\"nofollow\"><code>shelve</code></a> module which provides persistent file-backed dictionary-like objects. It's easy to use in place of a \"real\" dictionary because it almost transparently provides your program with something that can be used just like a dictionary, without the need to explicitly convert it to a string and then write to a file (or vice-versa). </p>\n\n<p>The main difference is needing to initially <code>open()</code> it before first use and then <code>close()</code> it when you're done (and possibly <code>sync()</code>ing it, depending on the <code>writeback</code> option being used). Any \"shelf\" file objects create can contain regular dictionaries as values, allowing them to be logically nested.</p>\n\n<p>Here's a trivial example:</p>\n\n<pre><code>import shelve\n\nshelf = shelve.open('mydata')  # open for reading and writing, creating if nec\nshelf.update({'one':1, 'two':2, 'three': {'three.1': 3.1, 'three.2': 3.2 }})\nshelf.close()\n\nshelf = shelve.open('mydata')\nprint shelf\nshelf.close()\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{'three': {'three.1': 3.1, 'three.2': 3.2}, 'two': 2, 'one': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1522044,
                        "reputation": 158,
                        "user_id": 1421439,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/304708d432a4826731b593d6c9b3f8e7?s=256&d=identicon&r=PG",
                        "display_name": "Gerard",
                        "link": "https://stackoverflow.com/users/1421439/gerard"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1338208804,
                    "creation_date": 1338208804,
                    "answer_id": 10784837,
                    "question_id": 4547274,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I use yaml for that if needs to be readable (neither JSON nor XML are that IMHO), or if reading is not necessary I use pickle.</p>\n\n<p>Write</p>\n\n<pre><code>from pickle import dumps, loads\nx = dict(a=1, b=2)\ny = dict(c = x, z=3)\nres = dumps(y)\nopen('/var/tmp/dump.txt', 'w').write(res)\n</code></pre>\n\n<p>Read back</p>\n\n<pre><code>from pickle import dumps, loads\nrev = loads(open('/var/tmp/dump.txt').read())\nprint rev\n</code></pre>\n"
                }
            ]
        },
        {
            "33227473": [
                {
                    "owner": {
                        "account_id": 513910,
                        "reputation": 5117,
                        "user_id": 1653571,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/269f6813c6224833e86f6dfd5a2ee14b?s=256&d=identicon&r=PG",
                        "display_name": "Dave X",
                        "link": "https://stackoverflow.com/users/1653571/dave-x"
                    },
                    "is_accepted": true,
                    "score": 171,
                    "last_activity_date": 1680827265,
                    "last_edit_date": 1680827265,
                    "creation_date": 1445314135,
                    "answer_id": 33227833,
                    "question_id": 33227473,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It is standard <code>matplotlib.pyplot</code>:</p>\n<pre><code>import matplotlib.pyplot as plt\n\nplt.ylim(10, 40)\n</code></pre>\n<p>Or simpler, as mwaskom comments below:</p>\n<pre><code>ax.set(ylim=(10, 40))\n</code></pre>\n<p><a href=\"https://i.sstatic.net/uJ7yk.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/uJ7yk.png\" alt=\"enter image description here\" /></a></p>\n"
                }
            ]
        },
        {
            "13861594": [
                {
                    "owner": {
                        "account_id": 10277076,
                        "reputation": 1460,
                        "user_id": 7583614,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/810116295795835/picture?type=large",
                        "display_name": "Don Feto",
                        "link": "https://stackoverflow.com/users/7583614/don-feto"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1639435231,
                    "creation_date": 1639435231,
                    "answer_id": 70341773,
                    "question_id": 13861594,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>int() casting can't  handle string numbers that have decimal points</strong></p>\n<p><strong>- example --&gt; int('13.5') will give you error , but int('13') will convert the\nstring to integer</strong></p>\n<p><strong>Why : This considered as explicit casting required by the user as it prevents you from losing information like 0.5 if you read dataset and don't know it's had floating-point numbers</strong></p>\n<pre><code>Work Around &gt;\n\nint(Float(&quot;13.5&quot;))\n</code></pre>\n<p>A real-world example I faced: where I wanted the numbers as int while int(I[&quot;mpg&quot;]) directly didn't work so I used float() then int()</p>\n<pre><code>sum([int(float(i[&quot;mpg&quot;])) for i in file])//len(file)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 372833,
                        "reputation": 88817,
                        "user_id": 722121,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=256&d=identicon&r=PG",
                        "display_name": "Gareth Latty",
                        "link": "https://stackoverflow.com/users/722121/gareth-latty"
                    },
                    "is_accepted": true,
                    "score": 109,
                    "last_activity_date": 1502063770,
                    "last_edit_date": 1592644375,
                    "creation_date": 1355407967,
                    "answer_id": 13861656,
                    "question_id": 13861594,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>Answer:</h1>\n<p>Your traceback is telling you that <code>int()</code> takes integers, you are trying to give a decimal, so you need to use <code>float()</code>:</p>\n<pre><code>a = float(a)\n</code></pre>\n<p>This should work as expected:</p>\n<pre><code>&gt;&gt;&gt; int(input(&quot;Type a number: &quot;))\nType a number: 0.3\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '0.3'\n&gt;&gt;&gt; float(input(&quot;Type a number: &quot;))\nType a number: 0.3\n0.3\n</code></pre>\n<p>Computers store numbers in a variety of different ways. Python has two main ones. Integers, which store whole numbers (\u2124), and floating point numbers, which store real numbers (\u211d). You need to use the right one based on what you require.</p>\n<p>(As a note, Python is pretty good at abstracting this away from you, most other language also have double precision floating point numbers, for instance, but you don't need to worry about that. Since 3.0, Python will also automatically convert integers to floats if you divide them, so it's actually very easy to work with.)</p>\n<h1>Previous guess at answer before we had the traceback:</h1>\n<p>Your problem is that whatever you are typing is can't be converted into a number. This could be caused by a lot of things, for example:</p>\n<pre><code>&gt;&gt;&gt; int(input(&quot;Type a number: &quot;))\nType a number: -1\n-1\n&gt;&gt;&gt; int(input(&quot;Type a number: &quot;))\nType a number: - 1\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '- 1'\n</code></pre>\n<p>Adding a space between the <code>-</code> and <code>1</code> will cause the string not to be parsed correctly into a number. This is, of course, just an example, and you will have to tell us what input you are giving for us to be able to say for sure what the issue is.</p>\n<h1>Advice on  code style:</h1>\n<pre><code>y = [int(a)**(-2),int(a)**(-1.75),int(a)**(-1.5),int(a)**(-1.25),\n            int(a)**(-1),int(a)**(-0.75),int(a)**(-0.5),int(a)**(-0.25),\n            int(a)**(0),int(a)**(0.25),int(a)**(0.5),int(a)**(0.75),\n            int(a)**1,int(a)**(1.25),int(a)**(1.5),int(a)**(1.75), int(a)**(2)]\n</code></pre>\n<p>This is an example of a really bad coding habit. Where you are copying something again and again something is wrong. Firstly, you use <code>int(a)</code> a ton of times, wherever you do this, you should instead assign the value to a variable, and use that instead, avoiding typing (and forcing the computer to calculate) the value again and again:</p>\n<pre><code>a = int(a)\n</code></pre>\n<p>In this example I assign the value back to <code>a</code>, overwriting the old value with the new one we want to use.</p>\n<pre><code>y = [a**i for i in x]\n</code></pre>\n<p>This code produces the same result as the monster above, without the masses of writing out the same thing again and again. It's a simple <a href=\"http://www.youtube.com/watch?v=pShL9DCSIUw\" rel=\"noreferrer\">list comprehension</a>. This also means that if you edit <code>x</code>, you don't need to do anything to <code>y</code>, it will naturally update to suit.</p>\n<p>Also note that <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP-8, the Python style guide</a>, <a href=\"http://www.python.org/dev/peps/pep-0008/#pet-peeves\" rel=\"noreferrer\">suggests strongly that you don't leave spaces between an identifier and the brackets when making a function call</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1534726,
                        "reputation": 4744,
                        "user_id": 1431079,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/WEAVX.png?s=256",
                        "display_name": "Le Droid",
                        "link": "https://stackoverflow.com/users/1431079/le-droid"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1383855635,
                    "creation_date": 1383855635,
                    "answer_id": 19845870,
                    "question_id": 13861594,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As Lattyware said, there is a difference between Python2 &amp; Python3 that leads to this error:</p>\n\n<p>With Python2, <code>int(str(5/2))</code> gives you 2.\nWith Python3, the same gives you: <em>ValueError: invalid literal for int() with base 10: '2.5'</em></p>\n\n<p>If you need to convert some string that could contain float instead of int, you should always use the following ugly formula:</p>\n\n<pre><code>int(float(myStr))\n</code></pre>\n\n<p>As <code>float('3.0')</code> and <code>float('3')</code> give you 3.0, but <code>int('3.0')</code> gives you the error.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 292061,
                        "reputation": 55844,
                        "user_id": 594589,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/0f9d5953607841d6a50b843a1107e51e?s=256&d=identicon&r=PG",
                        "display_name": "dm03514",
                        "link": "https://stackoverflow.com/users/594589/dm03514"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1355408261,
                    "last_edit_date": 1355408261,
                    "creation_date": 1355407914,
                    "answer_id": 13861639,
                    "question_id": 13861594,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It might be better to validate <code>a</code> right when it is input.</p>\n\n<pre><code>try:\n  a = int(input(\"Enter 'a' \"))\nexcept ValueError:\n  print('PLease input a valid integer')\n</code></pre>\n\n<p>This either casts <code>a</code> to an int so you can be assured that it is an integer for all later uses or it <a href=\"http://docs.python.org/3/tutorial/errors.html#handling-exceptions\" rel=\"noreferrer\">handles</a> the exception and alerts the user</p>\n"
                }
            ]
        },
        {
            "1802971": [
                {
                    "owner": {
                        "account_id": 5438306,
                        "reputation": 2062,
                        "user_id": 4327053,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/78d97b1451263aebffd892e744680ff3?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Erich",
                        "link": "https://stackoverflow.com/users/4327053/erich"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1662676748,
                    "last_edit_date": 1662676748,
                    "creation_date": 1501888713,
                    "answer_id": 45516711,
                    "question_id": 1802971,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A <code>self</code> <code>NameError</code> can also occur if you fail to define self inside a method signature. This error typically will appear as <code>TypeError</code>, as there will be a mismatch between expected and given arguments[1]. However, if you accept a variable number of arguments, <code>self</code> will be <code>arg[0]</code>, and the variable <code>self</code> will be undefined.</p>\n<p>A minimal example.</p>\n<pre><code>class Obj:\n    def foo(*args):\n        print(self.bar)\n</code></pre>\n<p>&gt;NameError: name 'self' is not defined</p>\n<p>Correction:</p>\n<pre><code>class Obj:\n    def baz(self, *args):\n        print(self.bar)\n</code></pre>\n<p>[1] <a href=\"http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html\" rel=\"nofollow noreferrer\">http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 59366,
                        "reputation": 20417,
                        "user_id": 177663,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/485b471504b5332261dcf8e67b068b04?s=256&d=identicon&r=PG",
                        "display_name": "intgr",
                        "link": "https://stackoverflow.com/users/177663/intgr"
                    },
                    "is_accepted": true,
                    "score": 206,
                    "last_activity_date": 1644849249,
                    "last_edit_date": 1644849249,
                    "creation_date": 1259232614,
                    "answer_id": 1802980,
                    "question_id": 1802971,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Default argument values are evaluated at function define-time, but <code>self</code> is an argument only available at function call time. Thus arguments in the argument list cannot refer each other.</p>\n<p>It's a common pattern to default an argument to <code>None</code> and add a test for that in code:</p>\n<pre><code>def p(self, b=None):\n    if b is None:\n        b = self.a\n    print b\n</code></pre>\n<p><strong>Update 2022:</strong> Python developers are now <a href=\"https://www.python.org/dev/peps/pep-0671/\" rel=\"noreferrer\">considering late-bound argument defaults</a> for future Python versions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 574754,
                        "reputation": 211,
                        "user_id": 219582,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/e3efac094e515c031ac64a989a8168fb?s=256&d=identicon&r=PG",
                        "display_name": "Andrew",
                        "link": "https://stackoverflow.com/users/219582/andrew"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1259256490,
                    "creation_date": 1259256490,
                    "answer_id": 1804892,
                    "question_id": 1802971,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For cases where you also wish to have the option of setting 'b' to None:</p>\n\n<pre><code>def p(self, **kwargs):\n    b = kwargs.get('b', self.a)\n    print b\n</code></pre>\n"
                }
            ]
        },
        {
            "1286875": [
                {
                    "owner": {
                        "account_id": 24331,
                        "reputation": 2484,
                        "user_id": 61815,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/62ace1119724d86de51973b74a088620?s=256&d=identicon&r=PG",
                        "display_name": "paprika",
                        "link": "https://stackoverflow.com/users/61815/paprika"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1602018925,
                    "last_edit_date": 1602018925,
                    "creation_date": 1258615675,
                    "answer_id": 1761507,
                    "question_id": 1286875,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You might want to have a look at <a href=\"https://github.com/sippy/b2bua\" rel=\"nofollow noreferrer\">Sippy</a>.  It's a B2BUA with a complete SIP stack implementation underneath (you could use just that).  It's written entirely in Python, so it's pretty hackable.  Sippy is implemented with Twisted but uses none of its SIP functionality.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37874,
                        "reputation": 306,
                        "user_id": 108407,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/f49hH.jpg?s=256",
                        "display_name": "Jermiajab",
                        "link": "https://stackoverflow.com/users/108407/jermiajab"
                    },
                    "is_accepted": true,
                    "score": 19,
                    "last_activity_date": 1322221414,
                    "last_edit_date": 1322221414,
                    "creation_date": 1250500968,
                    "answer_id": 1286973,
                    "question_id": 1286875,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are <a href=\"http://trac.pjsip.org/repos/wiki/Python_SIP_Tutorial\" rel=\"noreferrer\">Python bindings</a> for the PJSUA API.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 29723,
                        "reputation": 12321,
                        "user_id": 80530,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/4b71f74cd1f90264c6263b5fef60a0fd?s=256&d=identicon&r=PG",
                        "display_name": "LB40",
                        "link": "https://stackoverflow.com/users/80530/lb40"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1252089715,
                    "creation_date": 1252089715,
                    "answer_id": 1380887,
                    "question_id": 1286875,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://twistedmatrix.com/trac/\" rel=\"noreferrer\">Twisted</a> supports SIP. That's really cool</p>\n"
                }
            ]
        },
        {
            "2712283": [
                {
                    "owner": {
                        "account_id": 2558,
                        "reputation": 100479,
                        "user_id": 3571,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=256&d=identicon&r=PG",
                        "display_name": "codeape",
                        "link": "https://stackoverflow.com/users/3571/codeape"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1272280873,
                    "creation_date": 1272280873,
                    "answer_id": 2712972,
                    "question_id": 2712283,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For each third-party library that you use, make sure it has Python 3 support. A lot of the major Python libraries are migrated to 3 now. Check the docs and mailing lists for the libraries.</p>\n\n<p>When all the libraries you depend on are supported, I suggest you go for it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 46249,
                        "reputation": 95324,
                        "user_id": 136540,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/a4d5888f021e337d09be5b3109c11e72?s=256&d=identicon&r=PG",
                        "display_name": "Michael Aaron Safyan",
                        "link": "https://stackoverflow.com/users/136540/michael-aaron-safyan"
                    },
                    "is_accepted": true,
                    "score": 13,
                    "last_activity_date": 1272273946,
                    "creation_date": 1272273946,
                    "answer_id": 2712306,
                    "question_id": 2712283,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>My suggestion is that you stick with Python 2.6+, but simply add the <code>-3</code> flag to warn you about incompatibilities with Python 3.0. Then you can make sure your Python 2.6 can be easily upgraded to Python 3.0 via 2to3, without actually making that jump quite yet. I would suggest you hold back at the moment, because you may at some point want to use a library and find out that it is only available for 2.6 and not 3.0; if you make sure to cleanup things flagged by <code>-3</code>, then you will be easily able to make the jump, but you will also be able to take advantage of the code that is only available for 2.6+ and which is not yet ready for 3.0.</p>\n"
                }
            ]
        },
        {
            "31548132": [
                {
                    "owner": {
                        "account_id": 6529144,
                        "reputation": 2231,
                        "user_id": 5050863,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://graph.facebook.com/10205087533363171/picture?type=large",
                        "display_name": "sschilli",
                        "link": "https://stackoverflow.com/users/5050863/sschilli"
                    },
                    "is_accepted": true,
                    "score": 140,
                    "last_activity_date": 1692129384,
                    "last_edit_date": 1692129384,
                    "creation_date": 1437508380,
                    "answer_id": 31548402,
                    "question_id": 31548132,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As noted in the answer for <a href=\"https://stackoverflow.com/questions/10286224/javascript-timestamp-to-python-datetime-conversion\">this question</a>, this looks like a unit conversion issue. You have to divide your timestamp by 1000 to convert from milliseconds to seconds.</p>\n<p>In Python 2, if you want to preserve millisecond precision, instead divide by <code>1000.0</code>. In Python 3, you will preserve it anyway dividing by <code>1000</code> or <code>1000.0</code>.</p>\n"
                }
            ]
        },
        {
            "27861732": [
                {
                    "owner": {
                        "account_id": 115735,
                        "reputation": 6204,
                        "user_id": 303748,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/6e20d05c098c3186bf9ffe0e3d8845d6?s=256&d=identicon&r=PG",
                        "display_name": "vicvicvic",
                        "link": "https://stackoverflow.com/users/303748/vicvicvic"
                    },
                    "is_accepted": true,
                    "score": 47,
                    "last_activity_date": 1420812377,
                    "last_edit_date": 1420812377,
                    "creation_date": 1420811976,
                    "answer_id": 27862205,
                    "question_id": 27861732,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use the snippet below to parse your document into a list where each row is a dictionary mapping the table header value to the column value.</p>\n\n<pre><code>from docx.api import Document\n\n# Load the first table from your document. In your example file,\n# there is only one table, so I just grab the first one.\ndocument = Document('Books.docx')\ntable = document.tables[0]\n\n# Data will be a list of rows represented as dictionaries\n# containing each row's data.\ndata = []\n\nkeys = None\nfor i, row in enumerate(table.rows):\n    text = (cell.text for cell in row.cells)\n\n    # Establish the mapping based on the first row\n    # headers; these will become the keys of our dictionary\n    if i == 0:\n        keys = tuple(text)\n        continue\n\n    # Construct a dictionary for this row, mapping\n    # keys to values for this row\n    row_data = dict(zip(keys, text))\n    data.append(row_data)\n</code></pre>\n\n<p>This will give you:</p>\n\n<pre><code>data = [\n  {u'Pub.': u'Penguin Books',\n   u'Auther': u'Edward de BONO',\n   u'Sr. No.': u'1',\n   u'Name of Book': u'Six Thinking Hats'\n  },\n  ...\n]\n</code></pre>\n\n<p>If you'd just want a tuple for each row, you should instead of creating a dictionary just set <code>row_data</code> to the tuple value of <code>text</code>, so in the loop instead of constructing the <code>dict</code>, do:</p>\n\n<pre><code># Construct a tuple for this row\nrow_data = tuple(text)\ndata.append(row_data)\n</code></pre>\n\n<p>Now, <code>data</code> would hold something like this instead:</p>\n\n<pre><code>data = [\n  (u'1',\n   u'Six Thinking Hats',\n   u'Edward de BONO',\n   u'Penguin Books'\n  ),\n ...\n]\n</code></pre>\n\n<p>Then you can skip constructing <code>keys</code>, obviously (but still skip the first row!).</p>\n"
                }
            ]
        },
        {
            "15147751": [
                {
                    "owner": {
                        "account_id": 75311,
                        "reputation": 386324,
                        "user_id": 216074,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=256&d=identicon&r=PG",
                        "display_name": "poke",
                        "link": "https://stackoverflow.com/users/216074/poke"
                    },
                    "is_accepted": true,
                    "score": 52,
                    "last_activity_date": 1601025513,
                    "last_edit_date": 1601025513,
                    "creation_date": 1362094829,
                    "answer_id": 15147825,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>When number of occurrences doesn't matter, you can still use the subset functionality, by creating a set on the fly:</p>\n<pre><code>&gt;&gt;&gt; list1 = ['a', 'c', 'c']\n&gt;&gt;&gt; list2 = ['x', 'b', 'a', 'x', 'c', 'y', 'c']\n&gt;&gt;&gt; set(list1).issubset(list2)\nTrue\n</code></pre>\n<p>If you need to check if each element shows up at least as many times in the second list as in the first list, you can make use of the Counter type and define your own subset relation:</p>\n<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; def counterSubset(list1, list2):\n        c1, c2 = Counter(list1), Counter(list2)\n        for k, n in c1.items():\n            if n &gt; c2[k]:\n                return False\n        return True\n   \n&gt;&gt;&gt; counterSubset(list1, list2)\nTrue\n&gt;&gt;&gt; counterSubset(list1 + ['a'], list2)\nFalse\n&gt;&gt;&gt; counterSubset(list1 + ['z'], list2)\nFalse\n</code></pre>\n<p>If you already have counters (which might be a useful alternative to store your data anyway), you can also just write this as a single line:</p>\n<pre><code>&gt;&gt;&gt; all(n &lt;= c2[k] for k, n in c1.items())\nTrue\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 808621,
                        "reputation": 364884,
                        "user_id": 908494,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=256&d=identicon&r=PG",
                        "display_name": "abarnert",
                        "link": "https://stackoverflow.com/users/908494/abarnert"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1525459465,
                    "last_edit_date": 1525459465,
                    "creation_date": 1525458435,
                    "answer_id": 50181126,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n  <p>I can't use the subset function because I can have repeated elements in lists.</p>\n</blockquote>\n\n<p>What this means is that you want to treat your lists as <a href=\"https://en.wikipedia.org/wiki/Multiset\" rel=\"nofollow noreferrer\"><em>multisets</em></a> rather than <em>sets</em>. The usual way to handle multisets in Python is with <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"nofollow noreferrer\"><code>collections.Counter</code></a>:</p>\n\n<blockquote>\n  <p>A <code>Counter</code> is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. <strong>The <code>Counter</code> class is similar to bags or multisets in other languages.</strong></p>\n</blockquote>\n\n<p>And, while you <em>can</em> implement subset for multisets (implemented with <code>Counter</code>) by looping and comparing counts, as in <a href=\"https://stackoverflow.com/a/15147825/908494\">poke's answer</a>, this is unnecessary\u2014just as you <em>can</em> implement subset for sets (implemented with <code>set</code> or <code>frozenset</code>) by looping and testing <code>in</code>, but it's unnecessary.</p>\n\n<p>The <code>Counter</code> type already implements all the set operators extended in the obvious way for multisets.<sup>&lt;1</sup> So you can just write subset in terms of those operators, and it will work for both <code>set</code> and <code>Counter</code> out of the box.</p>\n\n<p>With (multi)set difference:<sup>2</sup></p>\n\n<pre><code>def is_subset(c1, c2):\n    return not c1 - c2\n</code></pre>\n\n<p>Or with (multi)set intersection:</p>\n\n<pre><code>def is_subset(c1, c2):\n    def c1 &amp; c2 == c1\n</code></pre>\n\n<hr>\n\n<p><sub>1. You may be wondering why, if <code>Counter</code> implements the set operators, it doesn't just implement <code>&lt;</code> and <code>&lt;=</code> for proper subset and subset. Although I can't find the email thread, I'm pretty sure this was discussed, and the answer was that \"the set operators\" are defined as the specific set of operators defined in the initial version of <code>collections.abc.Set</code> (which has since been expanded, IIRC\u2026), not all operators that <code>set</code> happens to include for convenience, in the exact same way that <code>Counter</code> doesn't have named methods like <code>intersection</code> that's friendly to other types than <code>&amp;</code> just because <code>set</code> does.</sub></p>\n\n<p><sub>2. This depends on the fact that collections in Python are expected to be falsey when empty and truthy otherwise. This is documented <a href=\"https://docs.python.org/3/reference/expressions.html#boolean-operations\" rel=\"nofollow noreferrer\">here</a> for the builtin types, and the fact that <code>bool</code> tests fall back to <code>len</code> is explained <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__bool__\" rel=\"nofollow noreferrer\">here</a>\u2014but it's ultimately just a convention, so that \"quasi-collections\" like numpy arrays can violate it if they have a good reason. It holds for \"real collections\" like <code>Counter</code>, <code>OrderedDict</code>, etc. If you're really worried about that, you can write <code>len(c1 - c2) == 0</code>, but note that this is against the spirit of <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow noreferrer\">PEP 8</a>.</sub></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1037175,
                        "reputation": 18901,
                        "user_id": 1044117,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/70c26ef03afcef7dd3f3418097b38d80?s=256&d=identicon&r=PG",
                        "display_name": "fferri",
                        "link": "https://stackoverflow.com/users/1044117/fferri"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1525456610,
                    "creation_date": 1525456610,
                    "answer_id": 50180652,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A solution using <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"nofollow noreferrer\">Counter</a> and the builtin intersection method (note that <code>-</code> is proper multiset difference, not an element-wise subtraction):</p>\n\n<pre><code>from collections import Counter\n\ndef is_subset(l1, l2):\n    c1, c2 = Counter(l1), Counter(l2)\n    return not c1 - c2\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>&gt;&gt;&gt; List1 = ['a','c','c']\n&gt;&gt;&gt; List2 = ['x','b','a','x','c','y','c']\n&gt;&gt;&gt; is_subset(List1, List2)\nTrue\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 235602,
                        "reputation": 5561,
                        "user_id": 502519,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a0b49f370028e042cbcbe083f58edabb?s=256&d=identicon&r=PG",
                        "display_name": "DevPlayer",
                        "link": "https://stackoverflow.com/users/502519/devplayer"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1435223673,
                    "last_edit_date": 1435223673,
                    "creation_date": 1435222769,
                    "answer_id": 31045715,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Be aware of the following:</p>\n\n<pre><code>&gt;&gt;&gt;listA = ['a', 'a', 'b','b','b','c']\n&gt;&gt;&gt;listB = ['b', 'a','a','b','c','d']\n&gt;&gt;&gt;all(item in listB for item in listA)\nTrue\n</code></pre>\n\n<p>If you read the \"all\" line as you would in English, This is not wrong but can be misleading, as listA has a third 'b' but listB does not. </p>\n\n<p>This also has the same issue:</p>\n\n<pre><code>def list1InList2(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n</code></pre>\n\n<p>Just a note. The following does not work:</p>\n\n<pre><code>&gt;&gt;&gt;tupA = (1,2,3,4,5,6,7,8,9)\n&gt;&gt;&gt;tupB = (1,2,3,4,5,6,6,7,8,9)\n&gt;&gt;&gt;set(tupA) &lt; set(TupB)\nFalse\n</code></pre>\n\n<p>If you convert the tuples to lists it still does not work. I don't know why strings work but ints do not.</p>\n\n<p>Works but has same issue of not keeping count of element occurances:</p>\n\n<pre><code>&gt;&gt;&gt;set(tupA).issubset(set(tupB))\nTrue\n</code></pre>\n\n<p>Using sets is not a comprehensive solution for multi-occurrance element matching.</p>\n\n<p>But here is a one-liner solution/adaption to shantanoo's answer without try/except:</p>\n\n<pre><code>all(True if sequenceA.count(item) &lt;= sequenceB.count(item) else False for item in sequenceA)\n</code></pre>\n\n<p>A builtin function wrapping a list comprehension using a ternary conditional operator. Python is awesome! Note that the \"&lt;=\" should not be \"==\".</p>\n\n<p>With this solution sequence A and B can be type tuple and list and other \"sequences\" with \"count\" methods. The elements in both sequences can be most types. I would not use this with dicts as it is now, hence the use \"sequence\" instead of \"iterable\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2430037,
                        "reputation": 117,
                        "user_id": 2121168,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2c8746afab9018d79aede5b54871b764?s=256&d=identicon&r=PG",
                        "display_name": "jeffam217",
                        "link": "https://stackoverflow.com/users/2121168/jeffam217"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1362644625,
                    "last_edit_date": 1362644625,
                    "creation_date": 1362096196,
                    "answer_id": 15148053,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This will return true is all the items in List1 are in List2</p>\n\n<pre><code>def list1InList2(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32267,
                        "reputation": 3675,
                        "user_id": 89346,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/231e87907eb1ef96e4197751d45d56f7?s=256&d=identicon&r=PG",
                        "display_name": "shantanoo",
                        "link": "https://stackoverflow.com/users/89346/shantanoo"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1362516844,
                    "creation_date": 1362516844,
                    "answer_id": 15233918,
                    "question_id": 15147751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def check_subset(list1, list2):\n    try:\n        [list2.remove(x) for x in list1]\n        return 'all elements in list1 are in list2'\n    except:\n        return 'some elements in list1 are not in list2'\n</code></pre>\n"
                }
            ]
        },
        {
            "45376232": [
                {
                    "owner": {
                        "account_id": 4853922,
                        "reputation": 5621,
                        "user_id": 3915498,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/95de3c0c2cac6e4686f20af2708b67ab?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user666",
                        "link": "https://stackoverflow.com/users/3915498/user666"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1640775147,
                    "last_edit_date": 1640775147,
                    "creation_date": 1501262690,
                    "answer_id": 45379210,
                    "question_id": 45376232,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try this :</p>\n<pre><code>fig = class_counts.plot(kind='bar',  \n        figsize=(20, 16), fontsize=26).get_figure()\n\nfig.savefig('test.pdf')\n</code></pre>\n"
                }
            ]
        },
        {
            "24150762": [
                {
                    "owner": {
                        "account_id": 113304,
                        "reputation": 317944,
                        "user_id": 298479,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/bc66db28aa7c3fa8e4ce4238b696dee9?s=256&d=identicon&r=PG",
                        "display_name": "ThiefMaster",
                        "link": "https://stackoverflow.com/users/298479/thiefmaster"
                    },
                    "is_accepted": true,
                    "score": 35,
                    "last_activity_date": 1402434288,
                    "creation_date": 1402434288,
                    "answer_id": 24150815,
                    "question_id": 24150762,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First of all, the first way is ugly: You either need a separate variable assignment to get the element or use <code>a[i]</code> all the time which could <em>theoretically</em> be an expensive operation. Imagine <code>a</code> being a database cursor: When you iterate it (<code>a.__iter__</code> being called) the object can safely assume that you are going to iterate over all its items. So all or at least multiple rows could be retrieved at once. When getting the length such an optimization would be stupid though since you surely don't want to retrieve data just because you want the number of items. Also, when retrieving a specific item you cannot assume that other items will be retrieved, too.</p>\n\n<p>Additionally, using <code>enumerate()</code> works with <strong>any iterable</strong> while <code>range(len())</code> only works with <strong>countable, indexable</strong> objects.</p>\n"
                }
            ]
        },
        {
            "66683630": [
                {
                    "owner": {
                        "account_id": 2499020,
                        "reputation": 1535,
                        "user_id": 2174678,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/2689cd14dedaafb558c11e208b00e642?s=256&d=identicon&r=PG",
                        "display_name": "crcvd",
                        "link": "https://stackoverflow.com/users/2174678/crcvd"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1616089134,
                    "last_edit_date": 1616089134,
                    "creation_date": 1616031837,
                    "answer_id": 66683635,
                    "question_id": 66683630,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>What are you trying to do?</p>\n<p><code>removesuffix</code> is a 3.9+ method in <code>str</code>. In previous versions, <code>str</code> doesn't have a <code>removesuffix</code> attribute:</p>\n<pre><code>dir(str)\n</code></pre>\n<p>If you're not using <code>3.9</code>, there's a few ways to approach this. In <code>3.4+</code>, you can use <code>pathlib</code> to manipulate the suffix if it's a path:</p>\n<pre><code>import pathlib\n\npathlib.Path(&quot;x.png&quot;).with_suffix(&quot;&quot;)\n</code></pre>\n<p>Otherwise, <a href=\"https://docs.python.org/3/library/stdtypes.html#str.removesuffix\" rel=\"noreferrer\">per the docs</a>:</p>\n<pre><code>def remove_suffix(input_string, suffix):\n    if suffix and input_string.endswith(suffix):\n        return input_string[:-len(suffix)]\n    return input_string\n</code></pre>\n"
                }
            ]
        },
        {
            "13058800": [
                {
                    "owner": {
                        "account_id": 3067229,
                        "reputation": 5599,
                        "user_id": 2598661,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/077bac49baa40c91fca05d805a30b075?s=256&d=identicon&r=PG",
                        "display_name": "nitred",
                        "link": "https://stackoverflow.com/users/2598661/nitred"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1514199298,
                    "last_edit_date": 1514199298,
                    "creation_date": 1514158146,
                    "answer_id": 47964689,
                    "question_id": 13058800,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have similar needs of making Blueprints completely modular and having no reference to the App. I came up with a possibly clean solution but I'm not sure how correct it is and what its limitations are.</p>\n\n<p>The idea is to create a separate <code>db</code> object (<code>db = SQLAlchemy()</code>) inside the blueprint and call the <code>init_app()</code> and <code>create_all()</code> methods from where the root app is created.</p>\n\n<p>Here's some sample code to show how the project is structured:\nThe app is called <code>jobs</code> and the blueprint is called <code>status</code> and it is stored inside the blueprints folder.</p>\n\n<p><code>blueprints.status.models.py</code></p>\n\n<pre><code>from flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()  # &lt;--- The db object belonging to the blueprint\n\nclass Status(db.Model):\n    __tablename__ = 'status'\n    id = db.Column(db.Integer, primary_key=True)\n    job_id = db.Column(db.Integer)\n    status = db.Column(db.String(120))\n</code></pre>\n\n<p><code>models.py</code></p>\n\n<pre><code>from flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()  # &lt;--- The db object belonging to the root app\n\nclass Job(db.Model):\n    __tablename__ = 'job'\n    id = db.Column(db.Integer, primary_key=True)\n    state = db.Column(db.String(120)\n</code></pre>\n\n<p><code>factory.py</code></p>\n\n<pre><code>from .blueprints.status.models import db as status_db  # blueprint db\nfrom .blueprints.status.routes import status_handler   # blueprint handler\nfrom .models import db as root_db                      # root db\nfrom flask import Flask\n\ndef create_app():\n    app = Flask(__name__)\n\n    # Create database resources.\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////path/to/app.db'\n    root_db.init_app(app)\n    status_db.init_app(app)     # &lt;--- Init blueprint db object.\n    with app.app_context():\n        root_db.create_all()\n        status_db.create_all()  # &lt;--- Create blueprint db.\n\n    # Register blueprint routes.\n    app.register_blueprint(status_handler, url_prefix=\"/status\")\n\n    return app\n</code></pre>\n\n<p>I tested it with <code>gunicorn</code> with <code>gevent</code> worker and it works. I asked a separate question about the robustness of the solution here:\n<a href=\"https://stackoverflow.com/questions/47963461/create-one-sqlalchemy-instance-per-blueprint-and-call-create-all-multiple-times\">Create one SQLAlchemy instance per blueprint and call create_all multiple times</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 87761,
                        "reputation": 1865,
                        "user_id": 1170857,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/46e689f74969edede9e5acd75843151c?s=256&d=identicon&r=PG",
                        "display_name": "udoprog",
                        "link": "https://stackoverflow.com/users/1170857/udoprog"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1353169326,
                    "creation_date": 1353169326,
                    "answer_id": 13432373,
                    "question_id": 13058800,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I believe the truest answer is that modular blueprints shouldn't concern themselves directly with data access, but instead rely on the application providing a compatible implementation.</p>\n\n<p>So given your example blueprint.</p>\n\n<pre><code>from flask import current_app, Blueprint, render_template\n\nflat_pages = Blueprint('flat_pages', __name__, template_folder='templates')\n\n@flat_pages.record\ndef record(state):\n    db = state.app.config.get(\"flat_pages.db\")\n\n    if db is None:\n        raise Exception(\"This blueprint expects you to provide \"\n                        \"database access through flat_pages.db\")\n\n@flat_pages.route('/&lt;page&gt;')\ndef show(page):\n    db = current_app.config[\"flat_pages.db\"]\n    page_object = db.find_page_by_name(page)\n    return render_template('pages/{}.html'.format(page), page=page_object)\n</code></pre>\n\n<p>From this, there is nothing preventing you from providing a default implementation.</p>\n\n<pre><code>def setup_default_flat_pages_db(db):\n    class Page(db.Model):\n        name = db.Column(db.String(255), primary_key=True)\n        title = db.Column(db.String(255))\n        content = db.Column(db.String(255))\n\n        def __init__(self, name, title, content):\n            self.name = name\n            self.title = title\n            self.content = content\n\n    class FlatPagesDBO(object):\n        def find_page_by_name(self, name):\n            return Page.query.filter_by(name=name).first()\n\n    return FlatPagesDBO()\n</code></pre>\n\n<p>And in your configuration.</p>\n\n<pre><code>app.config[\"flat_pages.db\"] = setup_default_flat_pages_db(db)\n</code></pre>\n\n<p>The above could be made cleaner by not relying in direct inheritance from db.Model and instead just use a vanilla declarative_base from sqlalchemy, but this should represent the gist of it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1715366,
                        "reputation": 33221,
                        "user_id": 1572562,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/iASbm.jpg?s=256",
                        "display_name": "codegeek",
                        "link": "https://stackoverflow.com/users/1572562/codegeek"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1351197474,
                    "creation_date": 1351197474,
                    "answer_id": 13076860,
                    "question_id": 13058800,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You asked \"Are Blueprints not meant to be independent of the app and be redistributable (\u00e0 la Django apps)? \"</p>\n\n<p>The answer is yes. Blueprints are not similar to Django App.</p>\n\n<p>If you want to use different app/configurations, then you need to use \"Application Dispatching\" and not blueprints. Read this \n  [1]: <a href=\"http://flask.pocoo.org/docs/patterns/appdispatch/#app-dispatch\" rel=\"nofollow\">http://flask.pocoo.org/docs/patterns/appdispatch/#app-dispatch</a> [1]</p>\n\n<p>Also, the link here [1] <a href=\"http://flask.pocoo.org/docs/blueprints/#the-concept-of-blueprints\" rel=\"nofollow\">http://flask.pocoo.org/docs/blueprints/#the-concept-of-blueprints</a> [1]</p>\n\n<p>It clearly says and I quote \"A blueprint in Flask is not a pluggable app because it is not actually an application \u2013 it\u2019s a set of operations which can be registered on an application, even multiple times. Why not have multiple application objects? You can do that (see Application Dispatching), but your applications will have separate configs and will be managed at the WSGI layer.\"</p>\n"
                }
            ]
        },
        {
            "19727088": [
                {
                    "owner": {
                        "account_id": 2235248,
                        "reputation": 59849,
                        "user_id": 1971805,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/YBbqr.jpg?s=256",
                        "display_name": "TerryA",
                        "link": "https://stackoverflow.com/users/1971805/terrya"
                    },
                    "is_accepted": true,
                    "score": 76,
                    "last_activity_date": 1383684795,
                    "last_edit_date": 1383684795,
                    "creation_date": 1383310275,
                    "answer_id": 19727115,
                    "question_id": 19727088,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, use <a href=\"http://docs.python.org/2/library/functions.html#any\" rel=\"noreferrer\"><code>any()</code></a>:</p>\n\n<pre><code>if any(s in item for item in L):\n    print 'string was found!'\n</code></pre>\n\n<p>As the docs mention, this is pretty much equivalent to your function, but <code>any()</code> can take generator expressions instead of just a string and a list, and <code>any()</code> short-circuits. Once <code>s in item</code> is True, the function breaks (you can simply do this with your function if you just change <code>retVal = True</code> to <code>return True</code>. Remember that functions break when it returns a value).</p>\n\n<hr>\n\n<p>You should avoid naming strings <code>str</code> and lists <code>list</code>. That will override the built-in types.</p>\n"
                }
            ]
        },
        {
            "5473014": [
                {
                    "owner": {
                        "account_id": 286859,
                        "reputation": 25551,
                        "user_id": 586352,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/15c40c59510b970f156bc3a31a0133e6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "kurumi",
                        "link": "https://stackoverflow.com/users/586352/kurumi"
                    },
                    "is_accepted": false,
                    "score": 36,
                    "last_activity_date": 1553333258,
                    "last_edit_date": 1553333258,
                    "creation_date": 1301404780,
                    "answer_id": 5473150,
                    "question_id": 5473014,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are several other ways, besides using the <code>in</code> operator (easiest):</p>\n\n<blockquote>\n  <p><code>index()</code></p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; try:\n...   \"xxxxABCDyyyy\".index(\"test\")\n... except ValueError:\n...   print \"not found\"\n... else:\n...   print \"found\"\n...\nnot found\n</code></pre>\n\n<blockquote>\n  <p><code>find()</code></p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; if \"xxxxABCDyyyy\".find(\"ABCD\") != -1:\n...   print \"found\"\n...\nfound\n</code></pre>\n\n<blockquote>\n  <p><code>re</code></p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; if re.search(\"ABCD\" , \"xxxxABCDyyyy\"):\n...  print \"found\"\n...\nfound\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 225,
                    "last_activity_date": 1301404237,
                    "creation_date": 1301404237,
                    "answer_id": 5473023,
                    "question_id": 5473014,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>if \"ABCD\" in \"xxxxABCDyyyy\":\n    # whatever\n</code></pre>\n"
                }
            ]
        },
        {
            "46187254": [
                {
                    "owner": {
                        "account_id": 5436,
                        "reputation": 168208,
                        "user_id": 8747,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b1ee0402d24625f555c25ea8511aad31?s=256&d=identicon&r=PG",
                        "display_name": "Rob\u1d69",
                        "link": "https://stackoverflow.com/users/8747/rob%e1%b5%a9"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1505270041,
                    "last_edit_date": 1505270041,
                    "creation_date": 1505265555,
                    "answer_id": 46187432,
                    "question_id": 46187254,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.islice\" rel=\"noreferrer\"><code>itertools.islice()</code></a>. Generating that whole list, just to access the first few items, seems wasteful to me.</p>\n\n<pre><code>for i, val in enumerate(itertools.islice(mySet, 10)):\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>If you want to <em>randomly</em> choose (in contrast to <em>arbitrarily</em> choose) your ten elements, try <a href=\"https://docs.python.org/2/library/random.html#random.sample\" rel=\"noreferrer\"><code>random.sample()</code></a>.</p>\n\n<pre><code>for i, val in enumerate(random.sample(mySet, 10)):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4074892,
                        "reputation": 61,
                        "user_id": 3346835,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/85a4ad21a3a1d1b48260df8d5702ae53?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Tiago1984",
                        "link": "https://stackoverflow.com/users/3346835/tiago1984"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1505266157,
                    "creation_date": 1505266157,
                    "answer_id": 46187493,
                    "question_id": 46187254,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are many ways to do this. Using list(set(a)) will create a list, which can take a long time depending on your set. But, since you only need to iterate for a small number of loops, I would use an iterator and a counter:</p>\n\n<pre><code>count = 0\nfor elem in iter(mySet):\n    count = count + 1\n    if count == 10:\n        break\n    print elem\n</code></pre>\n\n<p>This would avoid the overhead of creating a long list, and the overhead of having some manual code to control the loop is likely to be negligible.</p>\n"
                }
            ]
        },
        {
            "4522748": [
                {
                    "owner": {
                        "account_id": 13496426,
                        "reputation": 453,
                        "user_id": 9737135,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/690927dd1470dfd48ab44c7fd039f687?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "kCODINGeroo",
                        "link": "https://stackoverflow.com/users/9737135/kcodingeroo"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1531428554,
                    "creation_date": 1531428554,
                    "answer_id": 51314225,
                    "question_id": 4522748,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would recommend Panda3D. It supports everything in the list, and is \"high-level\" too. The manual describes how to achieve everything needed.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15648,
                        "reputation": 56504,
                        "user_id": 33258,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/dc46b1040e3807489641b8a98e0caef7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Hugh Bothwell",
                        "link": "https://stackoverflow.com/users/33258/hugh-bothwell"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1293151852,
                    "last_edit_date": 1293151852,
                    "creation_date": 1293147444,
                    "answer_id": 4523262,
                    "question_id": 4522748,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Really depends exactly what you want to accomplish. How complex is your scene? What sort of render quality are you after? Do you need real-time animation, or are rendered stills good enough?</p>\n\n<p>First-rate, full game engines (have been used for commercial games)</p>\n\n<ul>\n<li>Panda3d <a href=\"http://www.panda3d.org/\" rel=\"noreferrer\">http://www.panda3d.org/</a></li>\n<li>PyOgre <a href=\"http://www.ogre3d.org/tikiwiki/PyOgre\" rel=\"noreferrer\">http://www.ogre3d.org/tikiwiki/PyOgre</a></li>\n<li>Pyrr (Irrlicht wrapper)</li>\n</ul>\n\n<p>Less popular 3d engines, new or beta: YMMV.</p>\n\n<ul>\n<li>OpenSceneGraph <a href=\"http://www.openscenegraph.org/projects/osg\" rel=\"noreferrer\">http://www.openscenegraph.org/projects/osg</a></li>\n<li>Spyre <a href=\"http://pduel.sourceforge.net/spyre/spyre.spyre-module.html\" rel=\"noreferrer\">http://pduel.sourceforge.net/spyre/spyre.spyre-module.html</a></li>\n<li>PySoy <a href=\"http://www.pysoy.org/\" rel=\"noreferrer\">http://www.pysoy.org/</a></li>\n<li>Soya <a href=\"http://pypi.python.org/pypi/Soya/0.11.2\" rel=\"noreferrer\">http://pypi.python.org/pypi/Soya/0.11.2</a></li>\n<li>PyCrystal <a href=\"http://www.crystalspace3d.org/main/PyCrystal\" rel=\"noreferrer\">http://www.crystalspace3d.org/main/PyCrystal</a></li>\n<li>Horde3d <a href=\"http://www.horde3d.org/\" rel=\"noreferrer\">http://www.horde3d.org/</a></li>\n<li>VTK (Visualization Tool Kit) <a href=\"http://www.vtk.org/\" rel=\"noreferrer\">http://www.vtk.org/</a></li>\n</ul>\n\n<p>Low-level OpenGL interfaces - more control, more for you to do yourself</p>\n\n<ul>\n<li>PyOpenGL <a href=\"http://pyopengl.sourceforge.net/\" rel=\"noreferrer\">http://pyopengl.sourceforge.net/</a></li>\n<li>Pyglet <a href=\"http://www.pyglet.org/\" rel=\"noreferrer\">http://www.pyglet.org/</a></li>\n<li>Zoe <a href=\"http://www.alcyone.com/software/zoe/\" rel=\"noreferrer\">http://www.alcyone.com/software/zoe/</a></li>\n</ul>\n\n<p>Non-realtime interfaces</p>\n\n<ul>\n<li>cgkit <a href=\"http://cgkit.sourceforge.net/documentation.html\" rel=\"noreferrer\">http://cgkit.sourceforge.net/documentation.html</a> (Renderman, Maya)</li>\n<li>Blender <a href=\"http://www.blender3d.org/\" rel=\"noreferrer\">http://www.blender3d.org/</a></li>\n<li>POVray wrapper <a href=\"http://code.activestate.com/recipes/205451/\" rel=\"noreferrer\">http://code.activestate.com/recipes/205451/</a></li>\n</ul>\n"
                }
            ]
        },
        {
            "43983622": [
                {
                    "owner": {
                        "account_id": 7565400,
                        "reputation": 210552,
                        "user_id": 5741205,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/SG6BE.png?s=256",
                        "display_name": "MaxU - stand with Ukraine",
                        "link": "https://stackoverflow.com/users/5741205/maxu-stand-with-ukraine"
                    },
                    "is_accepted": true,
                    "score": 341,
                    "last_activity_date": 1663321295,
                    "last_edit_date": 1663321295,
                    "creation_date": 1494862932,
                    "answer_id": 43983654,
                    "question_id": 43983622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n\nIn [162]: df\nOut[162]:\n   colA  ColB  colC  colD  colE  colF  colG\n0    44    45    26    26    40    26    46\n1    47    16    38    47    48    22    37\n2    19    28    36    18    40    18    46\n3    50    14    12    33    12    44    23\n4    39    47    16    42    33    48    38\n</code></pre>\n<hr />\n<p><strong>NOTE:</strong> very often there is only one unnamed column <code>Unnamed: 0</code>, which is the first column in the CSV file. This is the result of the following steps:</p>\n<ol>\n<li>a DataFrame is saved into a CSV file using parameter <code>index=True</code>, which is the <strong>default</strong> behaviour</li>\n<li>we read this CSV file into a DataFrame using <code>pd.read_csv()</code> without explicitly specifying <code>index_col=0</code> (default: <code>index_col=None</code>)</li>\n</ol>\n<p>The easiest way to get rid of this column is to specify the parameter <code>pd.read_csv(..., index_col=0)</code>:</p>\n<pre><code>df = pd.read_csv('data.csv', index_col=0)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8349597,
                        "reputation": 203,
                        "user_id": 6272224,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d572ca1028f4e7e7208794fbe98a9008?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Susan",
                        "link": "https://stackoverflow.com/users/6272224/susan"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1557466952,
                    "last_edit_date": 1557466952,
                    "creation_date": 1538980800,
                    "answer_id": 52696683,
                    "question_id": 43983622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html\" rel=\"noreferrer\"><code>pandas.DataFrame.dropna</code></a> function removes <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html\" rel=\"noreferrer\">missing values</a> (e.g. <code>NaN</code>, <code>NaT</code>).</p>\n\n<p>For example the following code would remove any columns from your dataframe, where all of the elements of that column are missing.</p>\n\n<pre><code>df.dropna(how='all', axis='columns')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13252027,
                        "reputation": 541,
                        "user_id": 9569276,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7138750c5817f24b53b049a3088cbc74?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Adil Warsi",
                        "link": "https://stackoverflow.com/users/9569276/adil-warsi"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1555524545,
                    "last_edit_date": 1555524545,
                    "creation_date": 1522322374,
                    "answer_id": 49554761,
                    "question_id": 43983622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>First, find the columns that have 'unnamed', then drop those columns. Note: You should Add <code>inplace = True</code> to the <code>.drop</code> parameters as well.</p>\n\n<pre><code>df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12817384,
                        "reputation": 439,
                        "user_id": 9273596,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/bT7tZ.jpg?s=256",
                        "display_name": "Ezarate11",
                        "link": "https://stackoverflow.com/users/9273596/ezarate11"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1541508975,
                    "creation_date": 1541508975,
                    "answer_id": 53172354,
                    "question_id": 43983622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The approved solution doesn't work in my case, so my solution is the following one:</p>\n\n<pre><code>    ''' The column name in the example case is \"Unnamed: 7\"\n but it works with any other name (\"Unnamed: 0\" for example). '''\n\n        df.rename({\"Unnamed: 7\":\"a\"}, axis=\"columns\", inplace=True)\n\n        # Then, drop the column as usual.\n\n        df.drop([\"a\"], axis=1, inplace=True)\n</code></pre>\n\n<p>Hope it helps others.</p>\n"
                }
            ]
        },
        {
            "2671376": [
                {
                    "owner": {
                        "account_id": 7141,
                        "reputation": 27057,
                        "user_id": 12266,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://www.gravatar.com/avatar/6a2a454191fa75d4114ed05836a0b924?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Jaffe",
                        "link": "https://stackoverflow.com/users/12266/andrew-jaffe"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1550770483,
                    "last_edit_date": 1550770483,
                    "creation_date": 1271716863,
                    "answer_id": 2671402,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Technically, hashable means that the class defines <code>__hash__()</code>. According to the docs:</p>\n\n<blockquote>\n  <p><code>__hash__()</code> should return an integer. The only required property is that objects which compare equal have the same hash value; it is advised to somehow mix together (e.g. using exclusive or) the hash values for the components of the object that also play a part in comparison of objects.</p>\n</blockquote>\n\n<p>I think that for the Python builtin types, all hashable types are also immutable.</p>\n\n<p>It would be difficult but perhaps not impossible to have a mutable object that nonetheless defined <code>__hash__()</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4795262,
                        "reputation": 4234,
                        "user_id": 3873366,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/00ff6474ec5db28b3d4d7c3d57a6378a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Yihe",
                        "link": "https://stackoverflow.com/users/3873366/yihe"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1550770247,
                    "last_edit_date": 1550770247,
                    "creation_date": 1470561876,
                    "answer_id": 38812712,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n  <ul>\n  <li>Are there mutable objects that are hashable or immutable objects that are not hashable?</li>\n  </ul>\n</blockquote>\n\n<p>In Python, tuple is immutable, but it is hashable only if all its elements are hashable.</p>\n\n<pre><code>&gt;&gt;&gt; tt = (1, 2, (30, 40))\n&gt;&gt;&gt; hash(tt)\n8027212646858338501\n&gt;&gt;&gt; tl = (1, 2, [30, 40])\n&gt;&gt;&gt; hash(tl)\nTypeError: unhashable type: 'list'\n</code></pre>\n\n<p><strong>Hashable Types</strong></p>\n\n<ul>\n<li>The atomic immutable types are all hashable, such as str, bytes, numeric types</li>\n<li>A frozen set is always hashable(its elements must be hashable by definition)</li>\n<li>A tuple is hashable only if all its elements are hashable</li>\n<li>User-defined types are hashable by default because their hash value is their id()</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 4060,
                        "reputation": 307511,
                        "user_id": 5987,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/2a1f9f4986b58015691eb2014e78869f?s=256&d=identicon&r=PG",
                        "display_name": "Mark Ransom",
                        "link": "https://stackoverflow.com/users/5987/mark-ransom"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1462833628,
                    "last_edit_date": 1592644375,
                    "creation_date": 1271718125,
                    "answer_id": 2671476,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From the <a href=\"http://docs.python.org/glossary.html\" rel=\"noreferrer\">Python Glossary</a>:</p>\n<blockquote>\n<p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <code>__hash__()</code> method), and can be compared to other objects (it needs an <code>__eq__()</code> or <code>__cmp__()</code> method). Hashable objects which compare equal must have the same hash value.</p>\n<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>\n<p>All of Python\u2019s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal, and their hash value is their id().</p>\n</blockquote>\n<p>Dicts and sets must use a hash for efficient lookup in a hash table; the hash values must be immutable, because changing the hash will mess up the data structures and cause the dict or set to fail. The easiest way to make the hash value immutable is to make the whole object immutable, which is why the two are often mentioned together.</p>\n<p>While none of the built-in mutable objects are hashable, it is possible to make a mutable object with a hash value that's <em>not</em> mutable. It's common for only a portion of the object to represent its identity, while the rest of the object contains properties that are free to change. As long as the hash value and comparison functions are based on the identity but not the mutable properties, and the identity never changes, you've met the requirements.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2631644,
                        "reputation": 6383,
                        "user_id": 2622016,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/224fcc10727bc8adf8a64f548abd9b6b?s=256&d=identicon&r=PG",
                        "display_name": "user2622016",
                        "link": "https://stackoverflow.com/users/2622016/user2622016"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1397550973,
                    "last_edit_date": 1397550973,
                    "creation_date": 1389802169,
                    "answer_id": 21142409,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Immutable means that object will not change in any significant manner during its lifetime. It's a vague but common idea in programming languages.</p>\n\n<p>Hashability is slightly different, and refers to comparison. </p>\n\n<blockquote>\n  <p><strong><a href=\"http://docs.python.org/2/glossary.html#term-hashable\" rel=\"nofollow\">hashable</a></strong> An object is hashable if it has a hash value which never\n  changes during its lifetime (it needs a <code>__hash__()</code> method), and can be\n  compared to other objects (it needs an <code>__eq__()</code> or <code>__cmp__()</code> method).\n  Hashable objects which compare equal must have the same hash value.</p>\n</blockquote>\n\n<p>All user-defined classes have <a href=\"http://docs.python.org/2/reference/datamodel.html#object.__hash__\" rel=\"nofollow\"><code>__hash__</code></a> method, which by default just returns the object ID. So an object that meets the criteria for hashability is not necessarily immutable.</p>\n\n<p>Objects of any new class you declare can be used as a dictionary key, unless you prevent it by, for example, throwing from <code>__hash__</code></p>\n\n<p>We could say that all immutable objects are hashable, because if the hash changes during the object's lifetime, then it means that the object mutated. </p>\n\n<p>But not quite. Consider a tuple which has a list (mutable). Some say tuple is immutable, but at the same time it is somewhat not hashable (throws).</p>\n\n<pre><code>d = dict()\nd[ (0,0) ] = 1    #perfectly fine\nd[ (0,[0]) ] = 1  #throws\n</code></pre>\n\n<p>Hashability and immutability refer to object instancess, not type. For example, an object of type tuple can be hashable or not.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2001896,
                        "reputation": 347,
                        "user_id": 1792726,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7c6870f197d3692e409c387dcab24b89?s=256&d=identicon&r=PG",
                        "display_name": "rgammans",
                        "link": "https://stackoverflow.com/users/1792726/rgammans"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1352108136,
                    "last_edit_date": 1352108136,
                    "creation_date": 1351809399,
                    "answer_id": 13186565,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is an implicit even if there is no explicit relationship forced between immutable and hashable due the interplay between </p>\n\n<ol>\n<li>Hashable objects which compare equal must have the same hash value</li>\n<li>An object is hashable if it has a hash value which never changes during its lifetime.</li>\n</ol>\n\n<p>There is no problem here unless you redefine <code>__eq__</code> so the the objects class defines equivalence on value.</p>\n\n<p>Once you've done that you need to find a stable hash function which always returns the same value for objects which represent the same value (eg, where <code>__eq__</code>) returns True, and never changes during the lifetime of an object.</p>\n\n<p>It hard to see an application where this is possible, consider a possible class <strong>A</strong> which meets these requirements. Although there is the obvious degenerate case where <code>__hash__</code> returns a constant.</p>\n\n<p>Now:-</p>\n\n<pre><code>&gt;&gt;&gt; a = A(1)\n&gt;&gt;&gt; b = A(1)\n&gt;&gt;&gt; c = A(2)\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a == c\nFalse\n&gt;&gt;&gt; hash(a) == hash(b)\nTrue\n&gt;&gt;&gt; a.set_value(c)\n&gt;&gt;&gt; a == c\nTrue\n&gt;&gt;&gt; assert(hash(a) == hash(c)) # Because a == c =&gt; hash(a) == hash(c)\n&gt;&gt;&gt; assert(hash(a) == hash(b)) # Because hash(a) and hash(b) have compared equal \n                                 before and the result must stay static over the objects lifetime.\n</code></pre>\n\n<p>In fact this means at creation hash(b) == hash(c), despite the fact there are never compared equal. I struggle to see anyway to usefully define <code>__hash__</code>() for a mutable object which defines compare by value. </p>\n\n<p><strong>Note</strong>: <code>__lt__</code>, <code>__le__</code> , <code>__gt__</code> and <code>__ge__</code> comparsions aren't affected so you can still define an ordering of hashable objects, mutable or otherwise based on their value.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 229892,
                        "reputation": 38362,
                        "user_id": 493161,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/ef45d137e9629d3fbe9c5f84997ac5ff?s=256&d=identicon&r=PG",
                        "display_name": "jcomeau_ictx",
                        "link": "https://stackoverflow.com/users/493161/jcomeau-ictx"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1340411286,
                    "creation_date": 1340411286,
                    "answer_id": 11165741,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>just because this is the top Google hit, here's a simple way to make a mutable object hashable:</p>\n\n<pre><code>&gt;&gt;&gt; class HashableList(list):\n...  instancenumber = 0  # class variable\n...  def __init__(self, initial = []):\n...   super(HashableList, self).__init__(initial)\n...   self.hashvalue = HashableList.instancenumber\n...   HashableList.instancenumber += 1\n...  def __hash__(self):\n...   return self.hashvalue\n... \n&gt;&gt;&gt; l = [1,2,3]\n&gt;&gt;&gt; m = HashableList(l)\n&gt;&gt;&gt; n = HashableList([1,2,3])\n&gt;&gt;&gt; m == n\nTrue\n&gt;&gt;&gt; a={m:1, n:2}\n&gt;&gt;&gt; a[l] = 3\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n&gt;&gt;&gt; m.hashvalue, n.hashvalue\n(0, 1)\n</code></pre>\n\n<p>I actually found a use for something like this when creating a class to cast SQLAlchemy records into something mutable and more useful to me, while maintaining their hashability for use as dict keys.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6849,
                        "reputation": 62425,
                        "user_id": 11649,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/5e4103707f37d83ebd26d960c70948c2?s=256&d=identicon&r=PG",
                        "display_name": "Javier",
                        "link": "https://stackoverflow.com/users/11649/javier"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1271717894,
                    "creation_date": 1271717894,
                    "answer_id": 2671456,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In Python they're mostly interchangeable; since the hash is supposed to represent the content, so it's just as mutable as the object, and having an object change the hash value would make it unusable as a dict key.</p>\n\n<p>In other languages, the hash value is more related to the objects 'identity', and not (necessarily) to the value.  Thus, for a mutable object, the pointer could be used to start the hashing.  Assuming, of course, that an object doesn't move in memory (as some GC do).  This is the approach used in Lua, for example.  This makes a mutable object usable as a table key; but creates several (unpleasant) surprises for newbies.</p>\n\n<p>In the end, having an immutable sequence type (tuples) makes it nicer for 'multi-value keys'.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 103243,
                        "reputation": 3663,
                        "user_id": 276627,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/47a283ee9f848339d34f75f0ebd9593f?s=256&d=identicon&r=PG",
                        "display_name": "ktdrv",
                        "link": "https://stackoverflow.com/users/276627/ktdrv"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1271716994,
                    "creation_date": 1271716994,
                    "answer_id": 2671409,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Hashable means that an variable's value can be represented (or, rather, encoded) by a constant -- string, number, etc. Now, something that is subject to change (mutable) cannot be represented by something that is not. Therefore, any variable that is mutable cannot be hashable and, by the same token, only immutable variables can be hashable.</p>\n\n<p>Hope this helps ...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 88204,
                        "reputation": 156064,
                        "user_id": 244128,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/300502d6109af88a009074c42ff56c73?s=256&d=identicon&r=PG",
                        "display_name": "maerics",
                        "link": "https://stackoverflow.com/users/244128/maerics"
                    },
                    "is_accepted": true,
                    "score": 98,
                    "last_activity_date": 1271716781,
                    "creation_date": 1271716781,
                    "answer_id": 2671398,
                    "question_id": 2671376,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Hash_function\" rel=\"noreferrer\">Hashing</a> is the process of converting some large amount of data into a much smaller amount (typically a single integer) in a repeatable way so that it can be looked up in a table in constant-time (<code>O(1)</code>), which is important for high-performance algorithms and data structures.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Immutable_object\" rel=\"noreferrer\">Immutability</a> is the idea that an object will not change in some important way after it has been created, especially in any way that might change the hash value of that object.</p>\n\n<p>The two ideas are related because objects which are used as hash keys must typically be immutable so their hash value doesn't change.  If it was allowed to change then the location of that object in a data structure such as a hashtable would change and then the whole purpose of hashing for efficiency is defeated.</p>\n\n<p>To really grasp the idea you should try to implement your own hashtable in a language like C/C++, or read the Java implementation of the <code>HashMap</code> class.</p>\n"
                }
            ]
        },
        {
            "6103825": [
                {
                    "owner": {
                        "account_id": 794804,
                        "reputation": 25104,
                        "user_id": 2072035,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/64e664749fc4faf8c7964ce44729a9cc?s=256&d=identicon&r=PG",
                        "display_name": "saaj",
                        "link": "https://stackoverflow.com/users/2072035/saaj"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1673042285,
                    "last_edit_date": 1673042285,
                    "creation_date": 1504788413,
                    "answer_id": 46096765,
                    "question_id": 6103825,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A complete snippet would look like the following. It expands <a href=\"https://stackoverflow.com/questions/6103825/how-to-properly-use-unit-testings-assertraises-with-nonetype-objects/6103983#6103983\">mouad's answer</a> to asserting on the error's message (or generally the string representation of its arguments), which may be useful.</p>\n<pre><code>from unittest import TestCase\n\n\nclass TestNoneTypeError(TestCase):\n\n  def setUp(self):\n    self.testListNone = None\n\n  def testListSlicing(self):\n    with self.assertRaises(TypeError) as ctx:\n        self.testListNone[:1]\n    self.assertEqual(&quot;'NoneType' object is not subscriptable&quot;, str(ctx.exception))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 95256,
                        "reputation": 69841,
                        "user_id": 479633,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b20ea946315fbe062c0221c8136c8c9b?s=256&d=identicon&r=PG",
                        "display_name": "mouad",
                        "link": "https://stackoverflow.com/users/479633/mouad"
                    },
                    "is_accepted": true,
                    "score": 308,
                    "last_activity_date": 1673042186,
                    "last_edit_date": 1673042186,
                    "creation_date": 1306191643,
                    "answer_id": 6103983,
                    "question_id": 6103825,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using Python 2.7 or above, you can use the ability of <a href=\"http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises\" rel=\"noreferrer\">assertRaises</a> to be used as a context manager and do:</p>\n<pre><code>with self.assertRaises(TypeError):\n    self.testListNone[:1]\n</code></pre>\n<p>If you are using Python 2.6, another way beside the one given until now is to use <a href=\"http://pypi.python.org/pypi/unittest2/0.5.1\" rel=\"noreferrer\">unittest2</a> which is a back port of <a href=\"https://docs.python.org/3.8/library/unittest.html\" rel=\"noreferrer\">unittest</a>'s new features to Python\u00a02.6, and you can make it work using the code above.</p>\n<p>N.B: I'm a big fan of the new feature (SkipTest, test discovery, etc.) of unittest, so I intend to use unittest2 as much as I can. I advise to do the same, because there is a lot more than what unittest come with in Python\u00a02.6 or lower.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 27947,
                        "reputation": 9658,
                        "user_id": 74198,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/70cd07b211e849cb0010041c1a724d59?s=256&d=identicon&r=PG",
                        "display_name": "Bas Bossink",
                        "link": "https://stackoverflow.com/users/74198/bas-bossink"
                    },
                    "is_accepted": false,
                    "score": 182,
                    "last_activity_date": 1306191201,
                    "creation_date": 1306191201,
                    "answer_id": 6103930,
                    "question_id": 6103825,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The problem is the <code>TypeError</code> gets raised 'before' <code>assertRaises</code> gets called since the arguments to <code>assertRaises</code> need to be evaluated before the method can be called. You need to pass a <code>lambda</code> expression like:</p>\n\n<pre><code>self.assertRaises(TypeError, lambda: self.testListNone[:1])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 110,
                    "last_activity_date": 1306190786,
                    "creation_date": 1306190786,
                    "answer_id": 6103877,
                    "question_id": 6103825,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The usual way to use <code>assertRaises</code> is to call a function:</p>\n\n<pre><code>self.assertRaises(TypeError, test_function, args)\n</code></pre>\n\n<p>to test that the function call test_function(args) raises a TypeError.</p>\n\n<p>The problem with <code>self.testListNone[:1]</code> is that Python evaluates the expression immediately, before the <code>assertRaises</code> method is called. The whole reason why <code>test_function</code> and <code>args</code> is passed as separate arguments to <code>self.assertRaises</code> is to allow <code>assertRaises</code> to call <code>test_function(args)</code> from within a <code>try...except</code> block, allowing <code>assertRaises</code> to catch the exception.</p>\n\n<p>Since you've defined <code>self.testListNone = None</code>, and you need a function to call, you might use <a href=\"http://docs.python.org/library/operator.html#operator.itemgetter\">operator.itemgetter</a> like this:</p>\n\n<pre><code>import operator\nself.assertRaises(TypeError, operator.itemgetter, (self.testListNone,slice(None,1)))\n</code></pre>\n\n<p>since </p>\n\n<pre><code>operator.itemgetter(self.testListNone,slice(None,1))\n</code></pre>\n\n<p>is a long-winded way of saying <code>self.testListNone[:1]</code>, but which separates the function (<code>operator.itemgetter</code>) from the arguments.</p>\n"
                }
            ]
        },
        {
            "967443": [
                {
                    "owner": {
                        "account_id": 22304,
                        "reputation": 9996,
                        "user_id": 54873,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/41b025f76761e40ca4035fbe3146c06a?s=256&d=identicon&r=PG",
                        "display_name": "YGA",
                        "link": "https://stackoverflow.com/users/54873/yga"
                    },
                    "is_accepted": false,
                    "score": 34,
                    "last_activity_date": 1421340095,
                    "last_edit_date": 1421340095,
                    "creation_date": 1246474654,
                    "answer_id": 1070756,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Looks like </p>\n\n<pre><code>try:  # py3\n    from shlex import quote\nexcept ImportError:  # py2\n    from pipes import quote\n\nquote(\"hello stack overflow's quite cool\")\n&gt;&gt;&gt; '\"hello stack overflow\\'s quite cool\"'\n</code></pre>\n\n<p>gets me far enough.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2742496,
                        "reputation": 51834,
                        "user_id": 2363712,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/beAJU.jpg?s=256",
                        "display_name": "Sylvain Leroux",
                        "link": "https://stackoverflow.com/users/2363712/sylvain-leroux"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1407517717,
                    "creation_date": 1407517717,
                    "answer_id": 25208652,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <code>quote</code>function is available for quite some time (Python 2.7?) -- the major drawback is it moved from <code>pipe</code> module to <code>shlex</code> between 3.2 and 3.3.</p>\n\n<p>You have to be prepared to handle both cases while importing that function:</p>\n\n<pre><code>try:\n    from shlex import quote\nexcept ImportError:\n    from pipes import quote\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 543818,
                        "reputation": 24294,
                        "user_id": 1733117,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5b886d4df174af783771e8a4dbaa4bf7?s=256&d=identicon&r=PG",
                        "display_name": "dnozay",
                        "link": "https://stackoverflow.com/users/1733117/dnozay"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1407269943,
                    "score": 12,
                    "last_activity_date": 1407269943,
                    "creation_date": 1407269943,
                    "answer_id": 25147580,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>pipes.quote</code> is now <code>shlex.quote</code> in python 3.\nIt is easy enough to use that piece of code.</p>\n\n<p><a href=\"https://github.com/python/cpython/blob/master/Lib/shlex.py#L281\" rel=\"noreferrer\">https://github.com/python/cpython/blob/master/Lib/shlex.py#L281</a></p>\n\n<p>That version handles zero-length argument correctly.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 694227,
                        "reputation": 21,
                        "user_id": 570160,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/f9aa8ac20b736c9c789df1f936caf046?s=256&d=identicon&r=PG",
                        "display_name": "Alex",
                        "link": "https://stackoverflow.com/users/570160/alex"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1323884763,
                    "last_edit_date": 1323884763,
                    "creation_date": 1294679935,
                    "answer_id": 4649500,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The standard library module subprocess has the list2cmdline function which does this, albeit according to <a href=\"http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\" rel=\"nofollow\">Microsoft rules</a> so I am not sure how reliable it works in Unix-like environments for more complicated command lines.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 806806,
                        "reputation": 61,
                        "user_id": 871757,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/5b45540ae377ec54a071f313b7193a27?s=256&d=identicon&r=PG",
                        "display_name": "Dave Abrahams",
                        "link": "https://stackoverflow.com/users/871757/dave-abrahams"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1312132807,
                    "creation_date": 1312132807,
                    "answer_id": 6891000,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For shell quoting, this works:  I've rigorously tested it on Posix.  [I'm assuming that the <code>list2cmdline</code> function supplied by Python works as advertised on Windows]</p>\n\n<pre><code># shell.py\nimport os\nif os.name == 'nt':\n    from subprocess import list2cmdline\n\n    def quote(arg):\n        return list2cmdline([arg])[0]\nelse:\n    import re\n    _quote_pos = re.compile('(?=[^-0-9a-zA-Z_./\\n])')\n\n    def quote(arg):\n        r\"\"\"\n        &gt;&gt;&gt; quote('\\t')\n        '\\\\\\t'\n        &gt;&gt;&gt; quote('foo bar')\n        'foo\\\\ bar'\n        \"\"\"\n        # This is the logic emacs uses\n        if arg:\n            return _quote_pos.sub('\\\\\\\\', arg).replace('\\n',\"'\\n'\")\n        else:\n            return \"''\"\n\n    def list2cmdline(args):\n        return ' '.join([ quote(a) for a in args ])\n</code></pre>\n\n<p>The tests are <a href=\"https://github.com/boostpro/bbot/blob/43cf775186d9f895f69992e800612e1c52a08a49/test/util_shell_tests.py\" rel=\"noreferrer\">here</a>, if anyone cares.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 193337,
                        "reputation": 4574,
                        "user_id": 435004,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1de17b55eaba89e6609705c1fb15e175?s=256&d=identicon&r=PG",
                        "display_name": "DomQ",
                        "link": "https://stackoverflow.com/users/435004/domq"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1296051293,
                    "creation_date": 1296051293,
                    "answer_id": 4805499,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>To unquote, try  <code>shlex.split()</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 42162,
                        "reputation": 3137,
                        "user_id": 122762,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f141b182dcb2714a5da65e1697cbcbd4?s=256&d=identicon&r=PG",
                        "display_name": "John Wiseman",
                        "link": "https://stackoverflow.com/users/122762/john-wiseman"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1260486460,
                    "creation_date": 1260486460,
                    "answer_id": 1884740,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I'm pretty sure that pipes.quote is broken, and should not be used, because it does not handle zero-length arguments correctly:</p>\n\n<pre><code>&gt;&gt;&gt; from pipes import quote\n&gt;&gt;&gt; args = ['arg1', '', 'arg3']\n&gt;&gt;&gt; print 'mycommand %s' % (' '.join(quote(arg) for arg in args))\nmycommand arg1  arg3\n</code></pre>\n\n<p>I believe the result should be something like</p>\n\n<pre><code>mycommand arg1 '' arg3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8203,
                        "reputation": 42568,
                        "user_id": 14648,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/84965d0d894b45875d8045bc5762ba57?s=256&d=identicon&r=PG",
                        "display_name": "Jerub",
                        "link": "https://stackoverflow.com/users/14648/jerub"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1244503543,
                    "last_edit_date": 1244503543,
                    "creation_date": 1244502160,
                    "answer_id": 967459,
                    "question_id": 967443,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You should never have to shell quote. The correct way to do a command is to not do shell quoting and instead use <a href=\"http://docs.python.org/3.0/library/subprocess.html#subprocess.call\" rel=\"nofollow noreferrer\">subprocess.call</a> or <a href=\"http://docs.python.org/3.0/library/subprocess.html#subprocess.Popen\" rel=\"nofollow noreferrer\">subprocess.Popen</a>, and pass a list of unquoted arguments. This is immune to shell expansion.</p>\n\n<p>i.e.</p>\n\n<pre><code>subprocess.Popen(['echo', '\"', '$foo'], shell=False)\n</code></pre>\n\n<p>If you want to unquote shell quoted data, you can use <a href=\"http://docs.python.org/3.0/library/shlex.html?highlight=shlex#shlex.shlex\" rel=\"nofollow noreferrer\">shlex.shlex</a> like this:</p>\n\n<pre><code>list(shlex.shlex(\"hello stack 'overflow'\\''s' quite cool\"))\n</code></pre>\n"
                }
            ]
        },
        {
            "58114837": [
                {
                    "owner": {
                        "account_id": 11660439,
                        "reputation": 3934,
                        "user_id": 8538925,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8f910cecb7119b1b0ab7729cc709e5fc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Owlzy",
                        "link": "https://stackoverflow.com/users/8538925/owlzy"
                    },
                    "is_accepted": true,
                    "score": 88,
                    "last_activity_date": 1655668780,
                    "last_edit_date": 1655668780,
                    "creation_date": 1569494600,
                    "answer_id": 58115059,
                    "question_id": 58114837,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>Option 1: <code>Literal</code></h1>\n<p>You can do that with <a href=\"https://mypy.readthedocs.io/en/latest/literal_types.html\" rel=\"noreferrer\">literal types</a>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from typing import Literal\n# from typing_extensions import Literal # Python 3.7 or below\n\ndef func(method: Literal['simple_method', 'some_other_method']):\n    ...\n</code></pre>\n<h2>Python 3.8</h2>\n<p>Thanks to the <a href=\"https://www.python.org/dev/peps/pep-0586/\" rel=\"noreferrer\">PEP 586</a>, the <code>Literal</code> is <a href=\"https://docs.python.org/3.8/library/typing.html#typing.Literal\" rel=\"noreferrer\">already included</a> by default in the Python 3.8 <code>typing</code> module.</p>\n<h1>Option 2: <code>Enum</code></h1>\n<p>If you'd rather not use type hints, you could also consider <a href=\"https://docs.python.org/3/library/enum.html\" rel=\"noreferrer\">enums</a> like so:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n</code></pre>\n<p>Once you have an enum with all the possible choices, you can hint the function in order to accept only your custom enum. More info <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"noreferrer\">here</a></p>\n<p>Example:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from typing import NewType\n\nColors = NewType('Colors', Color)\n</code></pre>\n"
                }
            ]
        },
        {
            "2442014": [
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 17,
                    "last_activity_date": 1523002663,
                    "last_edit_date": 1523002663,
                    "creation_date": 1268579042,
                    "answer_id": 2442550,
                    "question_id": 2442014,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://pypi.python.org/pypi?:action=search&amp;term=tree&amp;submit=search\" rel=\"noreferrer\">pypi</a>, the Python Package Index, suggests <a href=\"http://pypi.python.org/pypi/tinytree\" rel=\"noreferrer\">tinytree</a>, <a href=\"http://pypi.python.org/pypi/treedict/0.10-beta\" rel=\"noreferrer\">treedict</a>, <a href=\"http://pypi.python.org/pypi/caxes/0.2\" rel=\"noreferrer\">caxes</a>, <a href=\"http://pypi.python.org/pypi/pyavl/1.12_1\" rel=\"noreferrer\">pyavl</a>... these are just the top few after filtering away the many accidental hits (which point to specific tree such as XML ones, AST ones, etc, etc;-).  If you clarify what you want to do with your trees it may be easier to suggest a specific package.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 50218,
                        "reputation": 4938,
                        "user_id": 149741,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/aac13cee52b99246904c16288209b2a8?s=256&d=identicon&r=PG",
                        "display_name": "Terrence Brannon",
                        "link": "https://stackoverflow.com/users/149741/terrence-brannon"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1377717668,
                    "creation_date": 1377717668,
                    "answer_id": 18496500,
                    "question_id": 2442014,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm happy with <a href=\"https://github.com/caesar0301/pyTree\">treelib</a>. It addresses my problem. Could use a bit more documentation though. But the code is clear.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2642194,
                        "reputation": 41,
                        "user_id": 2285610,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/d5cc46326e9f666b2d28d9efa7f2c564?s=256&d=identicon&r=PG",
                        "display_name": "Marc104",
                        "link": "https://stackoverflow.com/users/2285610/marc104"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1366101768,
                    "creation_date": 1366101768,
                    "answer_id": 16032464,
                    "question_id": 2442014,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Although the <a href=\"http://ete.cgenomics.org\" rel=\"nofollow\">ETE</a> library seems to be originally developed to work with Phylogenetic trees, it implements many general features to work with any type of hierarchical tree structures, including programmatic tree drawing and visualization. </p>\n\n<p>There is a comprehensive <a href=\"http://pythonhosted.org/ete2/\" rel=\"nofollow\">tutorial and a reference guide</a>, in case you want to explore it. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1375743,
                        "reputation": 10437,
                        "user_id": 1309774,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://i.sstatic.net/YF1Nw.jpg?s=256",
                        "display_name": "Inactivist",
                        "link": "https://stackoverflow.com/users/1309774/inactivist"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1363627831,
                    "creation_date": 1363627831,
                    "answer_id": 15483139,
                    "question_id": 2442014,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://pypi.python.org/pypi/python-graph/\" rel=\"nofollow\">python-graph</a> seems to be a fairly thorough and complete package, and can export DOT graphs for use with <a href=\"http://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22173,
                        "reputation": 6143,
                        "user_id": 54435,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/216682fdc4897ea6aa291da147001480?s=256&d=identicon&r=PG",
                        "display_name": "Teddy",
                        "link": "https://stackoverflow.com/users/54435/teddy"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1268570941,
                    "creation_date": 1268570941,
                    "answer_id": 2442164,
                    "question_id": 2442014,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You probably want to look at <a href=\"http://effbot.org/zone/celementtree.htm\" rel=\"nofollow noreferrer\">cElementTree</a>.</p>\n"
                }
            ]
        },
        {
            "803616": [
                {
                    "owner": {
                        "account_id": 5418168,
                        "reputation": 1809,
                        "user_id": 4312720,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/CGbRt.jpg?s=256",
                        "display_name": "Jorge Tovar",
                        "link": "https://stackoverflow.com/users/4312720/jorge-tovar"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1651093668,
                    "creation_date": 1651093668,
                    "answer_id": 72035301,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Although all the responses are very accurate and well explained.\nI want to make a clarification that you also can pass <strong>anonymous functions</strong>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>def perform(fun, *arg):\n    return fun(*arg)\n\n# Pass anonymous function\nprint(perform(lambda x: x + 1, 3)) # output: 4\nprint(perform(lambda x, y: x + y + 1, 3, 2)) # output: 6\n\n# Pass defined function\nperform(lambda: action1())\nperform(lambda: action2(p))\nperform(lambda: action3(p, r))\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 237093,
                        "reputation": 41,
                        "user_id": 505025,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/40c7f4f120c6ec6720114b661bc6fe25?s=256&d=identicon&r=PG",
                        "display_name": "cryptochaos",
                        "link": "https://stackoverflow.com/users/505025/cryptochaos"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1618496719,
                    "last_edit_date": 1618496719,
                    "creation_date": 1618495140,
                    "answer_id": 67109915,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think this is what you're looking for...</p>\n<pre><code>def action1(action):\n    print(f'doing {action} here!')\n\ndef perform(function):\n    return function()\n\nperform(lambda : action1('business action'))  \n</code></pre>\n<p><code>lambda</code> packages up func and args in closure and passes to <code>perform()</code></p>\n<p>Thanks to David Beasley.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": true,
                    "score": 372,
                    "last_activity_date": 1612478759,
                    "last_edit_date": 1612478759,
                    "creation_date": 1241029704,
                    "answer_id": 803632,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Do you mean this?</p>\n<pre><code>def perform(fun, *args):\n    fun(*args)\n\ndef action1(args):\n    # something\n\ndef action2(args):\n    # something\n\nperform(action1)\nperform(action2, p)\nperform(action3, p, r)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13719,
                        "reputation": 10557,
                        "user_id": 27731,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dcfa1c418931de41e55e63b46b1abad8?s=256&d=identicon&r=PG",
                        "display_name": "Dave",
                        "link": "https://stackoverflow.com/users/27731/dave"
                    },
                    "is_accepted": false,
                    "score": 191,
                    "last_activity_date": 1609937134,
                    "last_edit_date": 1609937134,
                    "creation_date": 1241029664,
                    "answer_id": 803626,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is what lambda is for:</p>\n<pre><code>def perform(f):\n    f()\n\nperform(lambda: action1())\nperform(lambda: action2(p))\nperform(lambda: action3(p, r))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 71838,
                        "reputation": 68348,
                        "user_id": 207661,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/CFPkp.jpg?s=256",
                        "display_name": "Shital Shah",
                        "link": "https://stackoverflow.com/users/207661/shital-shah"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1537331297,
                    "creation_date": 1537331297,
                    "answer_id": 52398051,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is called partial functions and there are at least 3 ways to do this. My favorite way is using lambda because it avoids dependency on extra package and is the least verbose. Assume you have a function <code>add(x, y)</code> and you want to pass <code>add(3, y)</code> to some other function as parameter such that the other function decides the value for <code>y</code>.</p>\n\n<p><strong>Use lambda</strong></p>\n\n<pre><code># generic function takes op and its argument\ndef runOp(op, val):\n    return op(val)\n\n# declare full function\ndef add(x, y):\n    return x+y\n\n# run example\ndef main():\n    f = lambda y: add(3, y)\n    result = runOp(f, 1) # is 4\n</code></pre>\n\n<p><strong>Create Your Own Wrapper</strong></p>\n\n<p>Here you need to create a function that returns the partial function. This is obviously lot more verbose.</p>\n\n<pre><code># generic function takes op and its argument\ndef runOp(op, val):\n    return op(val)\n\n# declare full function\ndef add(x, y):\n    return x+y\n\n# declare partial function\ndef addPartial(x):\n    def _wrapper(y):\n        return add(x, y)\n    return _wrapper\n\n# run example\ndef main():\n    f = addPartial(3)\n    result = runOp(f, 1) # is 4\n</code></pre>\n\n<p><strong>Use partial from functools</strong></p>\n\n<p>This is almost identical to <code>lambda</code> shown above. Then why do we need this? There are <a href=\"https://stackoverflow.com/questions/3252228/python-why-is-functools-partial-necessary/\">few reasons</a>. In short, <code>partial</code> might be bit faster in some cases (see its <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"noreferrer\">implementation</a>) and that you can use it for early binding vs lambda's late binding.</p>\n\n<pre><code>from functools import partial\n\n# generic function takes op and its argument\ndef runOp(op, val):\n    return op(val)\n\n# declare full function\ndef add(x, y):\n    return x+y\n\n# run example\ndef main():\n    f = partial(add, 3)\n    result = runOp(f, 1) # is 4\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1947029,
                        "reputation": 2640,
                        "user_id": 1751920,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/dNdHl.jpg?s=256",
                        "display_name": "Stefan Gruenwald",
                        "link": "https://stackoverflow.com/users/1751920/stefan-gruenwald"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1402509755,
                    "creation_date": 1402509755,
                    "answer_id": 24169584,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a way to do it with a closure:</p>\n\n<pre><code>    def generate_add_mult_func(func):\n        def function_generator(x):\n            return reduce(func,range(1,x))\n        return function_generator\n\n    def add(x,y):\n        return x+y\n\n    def mult(x,y):\n        return x*y\n\n    adding=generate_add_mult_func(add)\n    multiplying=generate_add_mult_func(mult)\n\n    print adding(10)\n    print multiplying(10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 31530,
                        "reputation": 21917,
                        "user_id": 86643,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://www.gravatar.com/avatar/2639bbcfac32701e7efc6eeffec5a489?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "denis",
                        "link": "https://stackoverflow.com/users/86643/denis"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1246115540,
                    "creation_date": 1246115540,
                    "answer_id": 1053007,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>(months later) a tiny real example where lambda is useful, partial not:<br>\nsay you want various 1-dimensional cross-sections through a 2-dimensional function,\nlike slices through a row of hills.<br>\n<code>quadf( x, f )</code> takes a 1-d <code>f</code> and calls it for various <code>x</code>.<br>\nTo call it for vertical cuts at y = -1 0 1 and horizontal cuts at x = -1 0 1,</p>\n\n<pre><code>fx1 = quadf( x, lambda x: f( x, 1 ))\nfx0 = quadf( x, lambda x: f( x, 0 ))\nfx_1 = quadf( x, lambda x: f( x, -1 ))\nfxy = parabola( y, fx_1, fx0, fx1 )\n\nf_1y = quadf( y, lambda y: f( -1, y ))\nf0y = quadf( y, lambda y: f( 0, y ))\nf1y = quadf( y, lambda y: f( 1, y ))\nfyx = parabola( x, f_1y, f0y, f1y )\n</code></pre>\n\n<p>As far as I know, <code>partial</code> can't do this --</p>\n\n<pre><code>quadf( y, partial( f, x=1 ))\nTypeError: f() got multiple values for keyword argument 'x'\n</code></pre>\n\n<p>(How to add tags numpy, partial, lambda to this ?)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 878628,
                        "reputation": 898,
                        "user_id": 65829,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/36455d5ff84898dbba1724694fd32875?s=256&d=identicon&r=PG",
                        "display_name": "null",
                        "link": "https://stackoverflow.com/users/65829/null"
                    },
                    "is_accepted": false,
                    "score": 55,
                    "last_activity_date": 1241040203,
                    "creation_date": 1241040203,
                    "answer_id": 804346,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use the partial function from functools like so.</p>\n\n<pre><code>from functools import partial\n\ndef perform(f):\n    f()\n\nperform(Action1)\nperform(partial(Action2, p))\nperform(partial(Action3, p, r))\n</code></pre>\n\n<p>Also works with keywords</p>\n\n<pre><code>perform(partial(Action4, param1=p))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 33994,
                        "reputation": 107390,
                        "user_id": 95612,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
                        "display_name": "Jochen Ritzel",
                        "link": "https://stackoverflow.com/users/95612/jochen-ritzel"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1241030174,
                    "creation_date": 1241030174,
                    "answer_id": 803668,
                    "question_id": 803616,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use functools.partial, not lambdas! And ofc Perform is a useless function, you can pass around functions directly.</p>\n\n<p><pre><code>for func in [Action1, partial(Action2, p), partial(Action3, p, r)]:\n  func()\n</pre></code></p>\n"
                }
            ]
        },
        {
            "1188640": [
                {
                    "owner": {
                        "account_id": 48396,
                        "reputation": 69924,
                        "user_id": 143804,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/42d46e3315293e801832c87d54c96eb3?s=256&d=identicon&r=PG",
                        "display_name": "ire_and_curses",
                        "link": "https://stackoverflow.com/users/143804/ire-and-curses"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1576539221,
                    "last_edit_date": 1576539221,
                    "creation_date": 1248706928,
                    "answer_id": 1188693,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There was a detailed discussion of this topic on the Python mailing list in 2001:</p>\n\n<p><a href=\"https://mail.python.org/pipermail/python-list/2001-July/071567.html\" rel=\"noreferrer\">https://mail.python.org/pipermail/python-list/2001-July/071567.html</a></p>\n\n<p>Here are some of the reasons discussed in that thread.  From Peter Hansen, here are three reasons not to have imports all at the top of the file:</p>\n\n<blockquote>\n  <p>Possible reasons to import in a function:</p>\n  \n  <ol>\n  <li><p>Readability: if the import is needed in only one\n  function and that's very unlikely ever to change,\n  it might be clearer and cleaner to put it there only.</p></li>\n  <li><p>Startup time: if you don't have the import outside\n  of the function definitions, it will not execute\n  when your module is first imported by another, but\n  only when one of the functions is called.  This\n  delays the overhead of the import (or avoids it\n  if the functions might never be called).</p></li>\n  <li><p>There is always one more reason than the ones\n  we've thought of until now.</p></li>\n  </ol>\n</blockquote>\n\n<p>Just van Rossum chimed in with a fourth:</p>\n\n<blockquote>\n  <ol start=\"4\">\n  <li>Overhead: if the module imports a lot of modules,\n  and there's a good chance only a few will actually\n  be used. This is similar to the \"Startup time\"\n  reason, but goes a little further. If a script\n  using your module only uses a small subset of the\n  functionality it can save quite some time, especially\n  if the imports that can be avoided also import a lot\n  of modules.</li>\n  </ol>\n</blockquote>\n\n<p>A fifth was offered as local imports are a way to avoid the problem of circular imports.</p>\n\n<p>Feel free to read through that thread for the full discussion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1516137414,
                    "last_edit_date": 1516137414,
                    "creation_date": 1248706745,
                    "answer_id": 1188672,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://www.python.org/dev/peps/pep-0008/#imports\" rel=\"noreferrer\">PEP 8</a> authoritatively states:</p>\n\n<blockquote>\n  <p>Imports are always put at the top of\n  the file, just after any module\n        comments and docstrings, and before module globals and constants.</p>\n</blockquote>\n\n<p>PEP 8 should be the basis of any \"in-house\" style guide, since it summarizes what the core Python team has found to be the most effective style, overall (and with individual dissent of course, as on any other language, but consensus and the BDFL agree on PEP 8).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11489,
                        "reputation": 6003,
                        "user_id": 22176,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7ffb40bf1eff5118cf60b7d150c28196?s=256&d=identicon&r=PG",
                        "display_name": "Blauohr",
                        "link": "https://stackoverflow.com/users/22176/blauohr"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1339850149,
                    "last_edit_date": 1339850149,
                    "creation_date": 1248706753,
                    "answer_id": 1188674,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If the imported module is infrequently used and the import is expensive, the in-the-middle-import is OK.</p>\n\n<p><strong>Otherwise, is it wise to follow Alex Martelli's suggestion.</strong></p>\n"
                },
                {
                    "owner": {
                        "account_id": 43171,
                        "reputation": 257480,
                        "user_id": 126042,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://i.sstatic.net/rTmRA.jpg?s=256",
                        "display_name": "Mark Rushakoff",
                        "link": "https://stackoverflow.com/users/126042/mark-rushakoff"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1248712049,
                    "creation_date": 1248712049,
                    "answer_id": 1189199,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Everyone else has already mentioned the PEPs, but also take care to <strong>not</strong> have import statements in the middle of critical code.  At least under Python 2.6, there are several more bytecode instructions required when a function has an import statement.</p>\n\n<pre><code>&gt;&gt;&gt; def f():\n    from time import time\n    print time()\n\n&gt;&gt;&gt; dis.dis(f)\n  2           0 LOAD_CONST               1 (-1)\n              3 LOAD_CONST               2 (('time',))\n              6 IMPORT_NAME              0 (time)\n              9 IMPORT_FROM              0 (time)\n             12 STORE_FAST               0 (time)\n             15 POP_TOP             \n\n  3          16 LOAD_FAST                0 (time)\n             19 CALL_FUNCTION            0\n             22 PRINT_ITEM          \n             23 PRINT_NEWLINE       \n             24 LOAD_CONST               0 (None)\n             27 RETURN_VALUE\n\n&gt;&gt;&gt; def g():\n    print time()\n\n&gt;&gt;&gt; dis.dis(g)\n  2           0 LOAD_GLOBAL              0 (time)\n              3 CALL_FUNCTION            0\n              6 PRINT_ITEM          \n              7 PRINT_NEWLINE       \n              8 LOAD_CONST               0 (None)\n             11 RETURN_VALUE  \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 44621,
                        "reputation": 19085,
                        "user_id": 131084,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b5129079df8199b730d06eec3c944f38?s=256&d=identicon&r=PG",
                        "display_name": "jcdyer",
                        "link": "https://stackoverflow.com/users/131084/jcdyer"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1248708642,
                    "creation_date": 1248708642,
                    "answer_id": 1188862,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>95% of the time, you should put all your imports at the top of the file.  One case where you might want to do a function-local import is if you have to do it in order to avoid circular imports.  Say foo.py imports bar.py, and a function in bar.py needs to import something from foo.py.  If you put all your imports at the top, you could have unexpected problems importing files that rely on information that hasn't been compiled yet.  In this case, having a function local import can allow your code to hold off on importing the other module until its code has been fully compiled, and you call the relevant function.</p>\n\n<p>However, it looks like your use-case is more about making it clear where foo() is coming from.  In this case, I would far prefer one of two things: </p>\n\n<p>First, rather than</p>\n\n<pre><code>from prerequisite import foo\n</code></pre>\n\n<p>import prerequisite directly, and later on refer to it as prerequisite.foo.  The added verbosity pays itself back in spades through increased code transparency.</p>\n\n<p>Alternatively, (or in conjunction with the above) if it's really such a long distance between your import and the place it's being used, it may be that your module is too big.  The need for an import that nothing else uses might be an indication of a place where your code could stand to be refactored into a more manageably-sized chunk.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 695,
                        "reputation": 81200,
                        "user_id": 912,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/62c795f7890d6c5b889b665f457320ee?s=256&d=identicon&r=PG",
                        "display_name": "jkp",
                        "link": "https://stackoverflow.com/users/912/jkp"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1248706986,
                    "last_edit_date": 1248706986,
                    "creation_date": 1248706660,
                    "answer_id": 1188662,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's generally considered bad practice, but sometimes it's unavoidable (say when you have to avoid a circular import).</p>\n\n<p>An example of a time when it is necessary: I use <a href=\"http://code.google.com/p/waf/\" rel=\"noreferrer\">Waf</a> to build all our code.  The system is split into tools, and each tool is implemented in it's own module.  Each tool module can implent a <code>detect()</code> method to detect if the pre-requisites are present.  An example of one of these may do the following:</p>\n\n<pre><code>def detect(self):\n    import foobar\n</code></pre>\n\n<p>If this works correctly, the tool is usable.  Then later in the same module the <code>foobar</code> module may be needed, so you would have to import it again, at function level scope.  Clearly if it was imported at module level things would blow up completely.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10717,
                        "reputation": 2984,
                        "user_id": 20367,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/1a3747609c0c9d1b427d948fb16ff45c?s=256&d=identicon&r=PG",
                        "display_name": "jab",
                        "link": "https://stackoverflow.com/users/20367/jab"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1248706808,
                    "creation_date": 1248706808,
                    "answer_id": 1188684,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Well, I think it is a good practice to group all imports together at start of file since everyone knows where to look if want to know which libs are loaded</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346708,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1248706776,
                    "creation_date": 1248706776,
                    "answer_id": 1188676,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow noreferrer\">PEP8</a>:</p>\n\n<blockquote>\n  <p>Imports are always put at the top of\n  the file, just after any module\n        comments and docstrings, and before module globals and constants.</p>\n</blockquote>\n\n<p>It is not bad practice to have scopped imports.  So that the import applies only to the function you used it in.</p>\n\n<p>I think the code would be more readable though if the imports where grouped together at the top of the block or if you want it globally at the top of the file. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 48130,
                        "reputation": 4410,
                        "user_id": 142848,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/86819b112d96c1efdb670e82f3087e89?s=256&d=identicon&r=PG",
                        "display_name": "Frozenskys",
                        "link": "https://stackoverflow.com/users/142848/frozenskys"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1248706635,
                    "creation_date": 1248706635,
                    "answer_id": 1188657,
                    "question_id": 1188640,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It is considered \"Good Form\" to group all imports together at the start of the file.</p>\n\n<blockquote>\n  <p>Modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module\u2019s global symbol table.</p>\n</blockquote>\n\n<p>From here: <a href=\"http://docs.python.org/tutorial/modules.html\" rel=\"nofollow noreferrer\">http://docs.python.org/tutorial/modules.html</a></p>\n"
                }
            ]
        },
        {
            "2081586": [
                {
                    "owner": {
                        "account_id": 12902599,
                        "reputation": 155,
                        "user_id": 9330901,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://lh4.googleusercontent.com/-yUBn6M9sP_Q/AAAAAAAAAAI/AAAAAAAAAN8/ZmaFcVP2aDg/photo.jpg?sz=256",
                        "display_name": "Chris D&#39;mello",
                        "link": "https://stackoverflow.com/users/9330901/chris-dmello"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1540173939,
                    "creation_date": 1540173939,
                    "answer_id": 52921540,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python has good options to scrape the web. The best one with a framework is <a href=\"https://doc.scrapy.org/en/latest/\" rel=\"nofollow noreferrer\">scrapy</a>. It can be a little tricky for beginners, so here is a little help. <br>\n1. Install python above 3.5 (lower ones till 2.7 will work). <br>\n2. Create a environment in conda ( I did this). <br>\n3. Install scrapy at a location and run in from there. <br>\n4. <code>Scrapy shell</code> will give you an interactive interface to test you code. <br>\n5. <code>Scrapy startproject projectname</code> will create a framework.<br>\n6. <code>Scrapy genspider spidername</code> will create a spider. You can create as many spiders as you want. While doing this make sure you are inside the project directory. <br>\n<br>\n<br></p>\n\n<p>The easier one is to use <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow noreferrer\">requests</a> and <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"nofollow noreferrer\">beautiful soup</a>. Before starting give one hour of time to go through the documentation, it will solve most of your doubts. BS4 offer wide range of parsers that you can opt for. Use <code>user-agent</code> and <code>sleep</code> to make scraping easier. BS4 returns a bs.tag so use <code>variable[0]</code>. If there is js running, you wont be able to scrape using requests and bs4 directly. You  could get the api link then parse the JSON to get the information you need or try <code>selenium</code>.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 940496,
                        "reputation": 4946,
                        "user_id": 968644,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/bbea3d304027e236a61a837ca99e59bf?s=256&d=identicon&r=PG",
                        "display_name": "Sjaak Trekhaak",
                        "link": "https://stackoverflow.com/users/968644/sjaak-trekhaak"
                    },
                    "is_accepted": false,
                    "score": 66,
                    "last_activity_date": 1524232740,
                    "last_edit_date": 1524232740,
                    "creation_date": 1324552368,
                    "answer_id": 8603040,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd really recommend Scrapy.</p>\n\n<p>Quote from a deleted answer:</p>\n\n<blockquote>\n  <ul>\n  <li>Scrapy crawling is fastest than mechanize because uses asynchronous operations (on top of Twisted).</li>\n  <li>Scrapy has better and fastest support for parsing (x)html on top of libxml2.</li>\n  <li>Scrapy is a mature framework with full unicode, handles redirections, gzipped responses, odd encodings, integrated http cache, etc.</li>\n  <li>Once you are into Scrapy, you can write a spider in less than 5 minutes that download images, creates thumbnails and export the extracted data directly to csv or json.</li>\n  </ul>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 36808,
                        "reputation": 29452,
                        "user_id": 105066,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/8bfa13364ceeaecff2253459cc3a6f8a?s=256&d=identicon&r=PG",
                        "display_name": "hoju",
                        "link": "https://stackoverflow.com/users/105066/hoju"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1524159445,
                    "last_edit_date": 1524159445,
                    "creation_date": 1324539996,
                    "answer_id": 8600787,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I collected together scripts from my web scraping work into this <a href=\"https://bitbucket.org/richardpenman/webscraping\" rel=\"nofollow noreferrer\">bit-bucket library</a>.</p>\n\n<p>Example script for your case:</p>\n\n<pre><code>from webscraping import download, xpath\nD = download.Download()\n\nhtml = D.get('http://example.com')\nfor row in xpath.search(html, '//table[@class=\"spad\"]/tbody/tr'):\n    cols = xpath.search(row, '/td')\n    print 'Sunrise: %s, Sunset: %s' % (cols[1], cols[2])\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Sunrise: 08:39, Sunset: 16:08\nSunrise: 08:39, Sunset: 16:09\nSunrise: 08:39, Sunset: 16:10\nSunrise: 08:40, Sunset: 16:10\nSunrise: 08:40, Sunset: 16:11\nSunrise: 08:40, Sunset: 16:12\nSunrise: 08:40, Sunset: 16:13\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10394386,
                        "reputation": 22430,
                        "user_id": 9189799,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/U2hEg.jpg?s=256",
                        "display_name": "SIM",
                        "link": "https://stackoverflow.com/users/9189799/sim"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1503160627,
                    "last_edit_date": 1503160627,
                    "creation_date": 1493565762,
                    "answer_id": 43707999,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If we think of getting name of items from any specific category then we can do that by specifying the class name of that category using css selector:</p>\n\n<pre><code>import requests ; from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(requests.get('https://www.flipkart.com/').text, \"lxml\")\nfor link in soup.select('div._2kSfQ4'):\n    print(link.text)\n</code></pre>\n\n<p>This is the partial search results:</p>\n\n<pre><code>Puma, USPA, Adidas &amp; moreUp to 70% OffMen's Shoes\nShirts, T-Shirts...Under \u20b9599For Men\nNike, UCB, Adidas &amp; moreUnder \u20b9999Men's Sandals, Slippers\nPhilips &amp; moreStarting \u20b999LED Bulbs &amp; Emergency Lights\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4111590,
                        "reputation": 1784,
                        "user_id": 3374242,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d8fb786a04bbbc02a3a1935003d39a97?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Atul Chavan",
                        "link": "https://stackoverflow.com/users/3374242/atul-chavan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1490108479,
                    "creation_date": 1490108479,
                    "answer_id": 42930782,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a simple web crawler, i used BeautifulSoup and we will search for all the links(anchors) who's class name is _3NFO0d. I used Flipkar.com, it is an online retailing store.</p>\n\n<pre><code>import requests\nfrom bs4 import BeautifulSoup\ndef crawl_flipkart():\n    url = 'https://www.flipkart.com/'\n    source_code = requests.get(url)\n    plain_text = source_code.text\n    soup = BeautifulSoup(plain_text, \"lxml\")\n    for link in soup.findAll('a', {'class': '_3NFO0d'}):\n        href = link.get('href')\n        print(href)\n\ncrawl_flipkart()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user235064"
                    },
                    "is_accepted": true,
                    "score": 196,
                    "last_activity_date": 1453452697,
                    "last_edit_date": 1453452697,
                    "creation_date": 1263751721,
                    "answer_id": 2082025,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use urllib2 in combination with the brilliant <a href=\"http://www.crummy.com/software/BeautifulSoup/\" rel=\"noreferrer\">BeautifulSoup</a> library:</p>\n\n<pre><code>import urllib2\nfrom BeautifulSoup import BeautifulSoup\n# or if you're using BeautifulSoup4:\n# from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(urllib2.urlopen('http://example.com').read())\n\nfor row in soup('table', {'class': 'spad'})[0].tbody('tr'):\n    tds = row('td')\n    print tds[0].string, tds[1].string\n    # will print date and sunrise\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1617069,
                        "reputation": 21093,
                        "user_id": 4094231,
                        "user_type": "registered",
                        "accept_rate": 46,
                        "profile_image": "https://i.sstatic.net/nSGYUmrP.jpg?s=256",
                        "display_name": "Umair Ayub",
                        "link": "https://stackoverflow.com/users/4094231/umair-ayub"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1423403549,
                    "creation_date": 1423403549,
                    "answer_id": 28394673,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Make your life easier by using <code>CSS Selectors</code></strong></p>\n\n<p>I know I have come late to party but I have a nice suggestion for you.</p>\n\n<p>Using <code>BeautifulSoup</code> is already been suggested I would rather prefer using <code>CSS Selectors</code> to scrape data inside HTML</p>\n\n<pre><code>import urllib2\nfrom bs4 import BeautifulSoup\n\nmain_url = \"http://www.example.com\"\n\nmain_page_html  = tryAgain(main_url)\nmain_page_soup = BeautifulSoup(main_page_html)\n\n# Scrape all TDs from TRs inside Table\nfor tr in main_page_soup.select(\"table.class_of_table\"):\n   for td in tr.select(\"td#id\"):\n       print(td.text)\n       # For acnhors inside TD\n       print(td.select(\"a\")[0].text)\n       # Value of Href attribute\n       print(td.select(\"a\")[0][\"href\"])\n\n# This is method that scrape URL and if it doesnt get scraped, waits for 20 seconds and then tries again. (I use it because my internet connection sometimes get disconnects)\ndef tryAgain(passed_url):\n    try:\n        page  = requests.get(passed_url,headers = random.choice(header), timeout = timeout_time).text\n        return page\n    except Exception:\n        while 1:\n            print(\"Trying again the URL:\")\n            print(passed_url)\n            try:\n                page  = requests.get(passed_url,headers = random.choice(header), timeout = timeout_time).text\n                print(\"-------------------------------------\")\n                print(\"---- URL was successfully scraped ---\")\n                print(\"-------------------------------------\")\n                return page\n            except Exception:\n                time.sleep(20)\n                continue \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75807,
                        "reputation": 83077,
                        "user_id": 217332,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c113a6e7b426161ae6e48face10c9593?s=256&d=identicon&r=PG",
                        "display_name": "danben",
                        "link": "https://stackoverflow.com/users/217332/danben"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1397601587,
                    "last_edit_date": 1397601587,
                    "creation_date": 1263744818,
                    "answer_id": 2081606,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <a href=\"http://docs.python.org/library/urllib2.html\" rel=\"nofollow noreferrer\">urllib2</a> to make the HTTP requests, and then you'll have web content.</p>\n\n<p>You can get it like this:</p>\n\n<pre><code>import urllib2\nresponse = urllib2.urlopen('http://example.com')\nhtml = response.read()\n</code></pre>\n\n<p><a href=\"http://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow noreferrer\">Beautiful Soup</a> is a python HTML parser that is supposed to be good for screen scraping.</p>\n\n<p>In particular, <a href=\"http://www.crummy.com/software/BeautifulSoup/documentation.html#Parsing%20a%20Document\" rel=\"nofollow noreferrer\">here</a> is their tutorial on parsing an HTML document.</p>\n\n<p>Good luck!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1732120,
                        "reputation": 2113,
                        "user_id": 1678716,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/df0ac2b73b02248fc0e08237eb8a36d5?s=256&d=identicon&r=PG",
                        "display_name": "scottmrogowski",
                        "link": "https://stackoverflow.com/users/1678716/scottmrogowski"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1397553658,
                    "last_edit_date": 1397553658,
                    "creation_date": 1369109398,
                    "answer_id": 16661996,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I would strongly suggest checking out <a href=\"https://pypi.python.org/pypi/pyquery\" rel=\"noreferrer\">pyquery</a>. It uses jquery-like (aka css-like) syntax which makes things really easy for those coming from that background.</p>\n\n<p>For your case, it would be something like:</p>\n\n<pre><code>from pyquery import *\n\nhtml = PyQuery(url='http://www.example.com/')\ntrs = html('table.spad tbody tr')\n\nfor tr in trs:\n  tds = tr.getchildren()\n  print tds[1].text, tds[2].text\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>5:16 AM 9:28 PM\n5:15 AM 9:30 PM\n5:13 AM 9:31 PM\n5:12 AM 9:33 PM\n5:11 AM 9:34 PM\n5:10 AM 9:35 PM\n5:09 AM 9:37 PM\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user1658543"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1397553633,
                    "last_edit_date": 1397553633,
                    "creation_date": 1354372817,
                    "answer_id": 13660474,
                    "question_id": 2081586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I use a combination of <a href=\"http://arshaw.com/scrapemark/\" rel=\"nofollow\">Scrapemark</a> (finding urls - py2) and <a href=\"http://code.google.com/p/httplib2/\" rel=\"nofollow\">httlib2</a> (downloading images - py2+3). The scrapemark.py has 500 lines of code, but uses regular expressions, so it may be not so fast, did not test.</p>\n\n<p>Example for scraping your website:\n</p>\n\n<pre><code>import sys\nfrom pprint import pprint\nfrom scrapemark import scrape\n\npprint(scrape(\"\"\"\n    &lt;table class=\"spad\"&gt;\n        &lt;tbody&gt;\n            {*\n                &lt;tr&gt;\n                    &lt;td&gt;{{[].day}}&lt;/td&gt;\n                    &lt;td&gt;{{[].sunrise}}&lt;/td&gt;\n                    &lt;td&gt;{{[].sunset}}&lt;/td&gt;\n                    {# ... #}\n                &lt;/tr&gt;\n            *}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\"\"\", url=sys.argv[1] ))\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>python2 sunscraper.py http://www.example.com/\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>[{'day': u'1. Dez 2012', 'sunrise': u'08:18', 'sunset': u'16:10'},\n {'day': u'2. Dez 2012', 'sunrise': u'08:19', 'sunset': u'16:10'},\n {'day': u'3. Dez 2012', 'sunrise': u'08:21', 'sunset': u'16:09'},\n {'day': u'4. Dez 2012', 'sunrise': u'08:22', 'sunset': u'16:09'},\n {'day': u'5. Dez 2012', 'sunrise': u'08:23', 'sunset': u'16:08'},\n {'day': u'6. Dez 2012', 'sunrise': u'08:25', 'sunset': u'16:08'},\n {'day': u'7. Dez 2012', 'sunrise': u'08:26', 'sunset': u'16:07'}]\n</code></pre>\n"
                }
            ]
        },
        {
            "1303347": [
                {
                    "owner": {
                        "account_id": 13045207,
                        "reputation": 1154,
                        "user_id": 9427260,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/60biO.png?s=256",
                        "display_name": "Devil",
                        "link": "https://stackoverflow.com/users/9427260/devil"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1646305474,
                    "last_edit_date": 1646305474,
                    "creation_date": 1646305163,
                    "answer_id": 71335998,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Best Way to do this in pyton3.X</strong></p>\n<p>Simply you can do this in single line</p>\n<pre><code>#Devil\ninput_list = [66, 53, 0, 94]\nout = [chr(x) for x in input_list]\nprint(out)\n\n# you will get the desire output in out list\n# ['B', '5', '\\x00', '^']\n\n#------------------------------\n#To retrieve your list use 'ord'\n\noriginal_list = [ord(x) for x in out]\nprint(original_list )\n#[66, 53, 0, 94]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 72538,
                        "reputation": 4778,
                        "user_id": 209406,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/c1dd53ae0c87fc9da42c73365fc9b216?s=256&d=identicon&r=PG",
                        "display_name": "Anton K",
                        "link": "https://stackoverflow.com/users/209406/anton-k"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1605530742,
                    "creation_date": 1605530742,
                    "answer_id": 64858280,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another option is to create a shortcut, returning a list:</p>\n<pre><code>from functools import reduce\n_compose = lambda f, g: lambda *args: f(g(*args))\nlmap = reduce(_compose, (list, map))\n\n&gt;&gt;&gt; lmap(chr, [66, 53, 0, 94])\n['B', '5', '\\x00', '^']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17717652,
                        "reputation": 27,
                        "user_id": 12863573,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mCl4tSju-r7VqK7geXM9mKW2CXKJ13RGRHdLQ7F=k-s256",
                        "display_name": "Akshay Satpaise",
                        "link": "https://stackoverflow.com/users/12863573/akshay-satpaise"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1581171474,
                    "creation_date": 1581171474,
                    "answer_id": 60127647,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can try getting a list from the map object by just iterating each item in the object and store it in a different variable.</p>\n\n<pre><code>a = map(chr, [66, 53, 0, 94])\nb = [item for item in a]\nprint(b)\n&gt;&gt;&gt;['B', '5', '\\x00', '^']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8051178,
                        "reputation": 27,
                        "user_id": 6084391,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d416ba1c6a924eb84e0ffafd9259c2e8?s=256&d=identicon&r=PG",
                        "display_name": "darshan k s",
                        "link": "https://stackoverflow.com/users/6084391/darshan-k-s"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1541957384,
                    "last_edit_date": 1541957384,
                    "creation_date": 1541955434,
                    "answer_id": 53251041,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using list comprehension in python and basic map function utility, one can do this also:</p>\n\n<p><code>chi = [x for x in map(chr,[66,53,0,94])]</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 477309,
                        "reputation": 13480,
                        "user_id": 888731,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/n0Qhe.png?s=256",
                        "display_name": "Israel Unterman",
                        "link": "https://stackoverflow.com/users/888731/israel-unterman"
                    },
                    "is_accepted": false,
                    "score": 181,
                    "last_activity_date": 1540725911,
                    "last_edit_date": 1540725911,
                    "creation_date": 1470064721,
                    "answer_id": 38702484,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>New and neat in Python 3.5:</p>\n\n<pre><code>[*map(chr, [66, 53, 0, 94])]\n</code></pre>\n\n<p>Thanks to <a href=\"https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448\" rel=\"noreferrer\">Additional Unpacking Generalizations</a></p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Always seeking for shorter ways, I discovered this one also works:</p>\n\n<pre><code>*map(chr, [66, 53, 0, 94]),\n</code></pre>\n\n<p>Unpacking works in tuples too. Note the comma at the end. This makes it a tuple of 1 element. That is, it's equivalent to <code>(*map(chr, [66, 53, 0, 94]),)</code></p>\n\n<p>It's shorter by only one char from the version with the list-brackets, but, in my opinion, better to write, because you start right ahead with the asterisk - the expansion syntax, so I feel it's softer on the mind. :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7445162,
                        "reputation": 7356,
                        "user_id": 5661594,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/fbbbec01ce0c53edbdf4001d81bb4865?s=256&d=identicon&r=PG",
                        "display_name": "Hari_pb",
                        "link": "https://stackoverflow.com/users/5661594/hari-pb"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1529080530,
                    "creation_date": 1529080530,
                    "answer_id": 50879630,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In addition to above answers in <code>Python 3</code>, we may simply create a <code>list</code> of result values from a <code>map</code> as </p>\n\n<pre><code>li = []\nfor x in map(chr,[66,53,0,94]):\n    li.append(x)\n\nprint (li)\n&gt;&gt;&gt;['B', '5', '\\x00', '^']\n</code></pre>\n\n<p>We may generalize by another example where I was struck, operations on map can also be handled in similar fashion like in <code>regex</code> problem, we can write function to obtain <code>list</code> of items to map and get result set at the same time. Ex. </p>\n\n<pre><code>b = 'Strings: 1,072, Another String: 474 '\nli = []\nfor x in map(int,map(int, re.findall('\\d+', b))):\n    li.append(x)\n\nprint (li)\n&gt;&gt;&gt;[1, 72, 474]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9472,
                        "reputation": 31651,
                        "user_id": 17523,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/22d41e5b6ff197cd7900c0514d1bd305?s=256&d=identicon&r=PG",
                        "display_name": "Boris Gorelik",
                        "link": "https://stackoverflow.com/users/17523/boris-gorelik"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1527271294,
                    "last_edit_date": 1527271294,
                    "creation_date": 1404207681,
                    "answer_id": 24507069,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>List-returning map function has the advantage of saving typing, especially during interactive sessions. You can define <code>lmap</code> function (on the analogy of python2's <code>imap</code>) that returns list:</p>\n\n<pre><code>lmap = lambda func, *iterable: list(map(func, *iterable))\n</code></pre>\n\n<p>Then calling <code>lmap</code> instead of <code>map</code> will do the job: \n<code>lmap(str, x)</code> is shorter by 5 characters (30% in this case) than <code>list(map(str, x))</code> and is certainly shorter than <code>[str(v) for v in x]</code>.  You may create similar functions for <code>filter</code> too.</p>\n\n<p>There was a comment to the original question:</p>\n\n<blockquote>\n  <p>I would suggest a rename to Getting map() to return a list in Python 3.* as it applies to all Python3 versions. Is there a way to do this? \u2013  meawoppl Jan 24 at 17:58</p>\n</blockquote>\n\n<p>It <em>is</em> possible to do that, but it is a very bad idea. Just for fun, here's how you may (<strong>but should not</strong>) do it:</p>\n\n<pre><code>__global_map = map #keep reference to the original map\nlmap = lambda func, *iterable: list(__global_map(func, *iterable)) # using \"map\" here will cause infinite recursion\nmap = lmap\nx = [1, 2, 3]\nmap(str, x) #test\nmap = __global_map #restore the original map and don't do that again\nmap(str, x) #iterator\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 151071,
                        "reputation": 154170,
                        "user_id": 364696,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7eBCp.jpg?s=256",
                        "display_name": "ShadowRanger",
                        "link": "https://stackoverflow.com/users/364696/shadowranger"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1510116766,
                    "creation_date": 1510116766,
                    "answer_id": 47171827,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting <a href=\"https://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x/47171827#comment63702627_1303354\">my old comment</a> for better visibility: For a \"better way to do this\" without <code>map</code> entirely, if your inputs are known to be ASCII ordinals, it's generally much faster to convert to <code>bytes</code> and decode, a la <code>bytes(list_of_ordinals).decode('ascii')</code>. That gets you a <code>str</code> of the values, but if you need a <code>list</code> for mutability or the like, you can just convert it (and it's still faster). For example, in <code>ipython</code> microbenchmarks converting 45 inputs:</p>\n\n<pre><code>&gt;&gt;&gt; %%timeit -r5 ordinals = list(range(45))\n... list(map(chr, ordinals))\n...\n3.91 \u00b5s \u00b1 60.2 ns per loop (mean \u00b1 std. dev. of 5 runs, 100000 loops each)\n\n&gt;&gt;&gt; %%timeit -r5 ordinals = list(range(45))\n... [*map(chr, ordinals)]\n...\n3.84 \u00b5s \u00b1 219 ns per loop (mean \u00b1 std. dev. of 5 runs, 100000 loops each)\n\n&gt;&gt;&gt; %%timeit -r5 ordinals = list(range(45))\n... [*bytes(ordinals).decode('ascii')]\n...\n1.43 \u00b5s \u00b1 49.7 ns per loop (mean \u00b1 std. dev. of 5 runs, 1000000 loops each)\n\n&gt;&gt;&gt; %%timeit -r5 ordinals = list(range(45))\n... bytes(ordinals).decode('ascii')\n...\n781 ns \u00b1 15.9 ns per loop (mean \u00b1 std. dev. of 5 runs, 1000000 loops each)\n</code></pre>\n\n<p>If you leave it as a <code>str</code>, it takes ~20% of the time of the fastest <code>map</code> solutions; even converting back to list it's still less than 40% of the fastest <code>map</code> solution. Bulk convert via <code>bytes</code> and <code>bytes.decode</code> then bulk converting back to <code>list</code> saves a lot of work, <em>but</em> as noted, only works if all your inputs are ASCII ordinals (or ordinals in some one byte per character locale specific encoding, e.g. <code>latin-1</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6107609,
                        "reputation": 668,
                        "user_id": 4764917,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/6fb41d7a9225b3c6fc94f1dd52f3a24a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ini",
                        "link": "https://stackoverflow.com/users/4764917/ini"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1510045470,
                    "creation_date": 1510045470,
                    "answer_id": 47153791,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>list(map(chr, [66, 53, 0, 94]))\n</code></pre>\n\n<blockquote>\n  <p>map(func, *iterables) --> map object\n     Make an iterator that computes the function using arguments from\n     each of the iterables.  Stops when the shortest iterable is exhausted.</p>\n  \n  <p>\"Make an iterator\"</p>\n</blockquote>\n\n<p>means it will return an iterator.</p>\n\n<blockquote>\n  <p>\"that computes the function using arguments from each of the iterables\"</p>\n</blockquote>\n\n<p>means that the next() function of the iterator will take one value of each iterables and pass each of them to one positional parameter of the function.</p>\n\n<p>So you get an iterator from the map() funtion and jsut pass it to the list() builtin function or use list comprehensions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18698,
                        "reputation": 211690,
                        "user_id": 43089,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=256&d=identicon&r=PG",
                        "display_name": "Kenan Banks",
                        "link": "https://stackoverflow.com/users/43089/kenan-banks"
                    },
                    "is_accepted": true,
                    "score": 914,
                    "last_activity_date": 1250728930,
                    "last_edit_date": 1250728930,
                    "creation_date": 1250728120,
                    "answer_id": 1303354,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Do this:</p>\n\n<pre><code>list(map(chr,[66,53,0,94]))\n</code></pre>\n\n<p>In Python 3+, many processes that iterate over iterables return iterators themselves.  In most cases, this ends up saving memory, and should make things go faster.   </p>\n\n<p>If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the <code>map</code> object like so:</p>\n\n<pre><code># Prints \"ABCD\"\nfor ch in map(chr,[65,66,67,68]):\n    print(ch)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 43171,
                        "reputation": 257480,
                        "user_id": 126042,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://i.sstatic.net/rTmRA.jpg?s=256",
                        "display_name": "Mark Rushakoff",
                        "link": "https://stackoverflow.com/users/126042/mark-rushakoff"
                    },
                    "is_accepted": false,
                    "score": 124,
                    "last_activity_date": 1250728592,
                    "last_edit_date": 1250728592,
                    "creation_date": 1250728099,
                    "answer_id": 1303353,
                    "question_id": 1303347,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Why aren't you doing this:</p>\n\n<pre><code>[chr(x) for x in [66,53,0,94]]\n</code></pre>\n\n<p>It's called a list comprehension.  You can find plenty of information on Google, but <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">here's the link to the Python (2.6) documentation on list comprehensions</a>.  You might be more interested in <a href=\"http://docs.python.org/3.1/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">the Python 3 documenation</a>, though.</p>\n"
                }
            ]
        },
        {
            "50504500": [
                {
                    "owner": {
                        "account_id": 188419,
                        "reputation": 38678,
                        "user_id": 427158,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/f706984800b6d136b9331a6ee20c676f?s=256&d=identicon&r=PG",
                        "display_name": "maxschlepzig",
                        "link": "https://stackoverflow.com/users/427158/maxschlepzig"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1657726180,
                    "last_edit_date": 1657726180,
                    "creation_date": 1657724823,
                    "answer_id": 72968542,
                    "question_id": 50504500,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You get a Deprecation Warning for</p>\n<pre><code>'\\\\nRevision: (\\d+)\\\\n'\n</code></pre>\n<p>because Python interprets <code>\\d</code> as invalid escape sequence. As is, Python doesn't substitute that sub-string, but warns about it since Version 3.6:</p>\n<blockquote>\n<p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the result. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) It is also important to note that the escape sequences only recognized in string literals fall into the category of unrecognized escapes for bytes literals.</p>\n</blockquote>\n<blockquote>\n<p><em>Changed in version 3.6</em>: Unrecognized escape sequences produce a DeprecationWarning. In a future Python version they will be a SyntaxWarning and eventually a SyntaxError.</p>\n</blockquote>\n<p>(<a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" rel=\"noreferrer\">source</a>)</p>\n<hr />\n<p>Thus, you can fix this warning by either escaping that back-slash properly or using raw strings.</p>\n<p>That means, escape more:</p>\n<pre><code>'\\\\nRevision: (\\\\d+)\\\\n'\n</code></pre>\n<p>Or, use a raw string literal (where <code>\\</code> doesn't start an escape sequence):</p>\n<pre><code>r'\\nRevision: (\\d+)\\n'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4683868,
                        "reputation": 5000,
                        "user_id": 3791827,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/JKSdx.jpg?s=256",
                        "display_name": "ACascarino",
                        "link": "https://stackoverflow.com/users/3791827/acascarino"
                    },
                    "is_accepted": true,
                    "score": 448,
                    "last_activity_date": 1575932419,
                    "last_edit_date": 1575932419,
                    "creation_date": 1527150825,
                    "answer_id": 50504635,
                    "question_id": 50504500,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3 interprets string literals as Unicode strings, and therefore your <code>\\d</code> is treated as an escaped Unicode character.</p>\n\n<p>Declare your RegEx pattern as a raw string instead by prepending <code>r</code>, as below:</p>\n\n<pre><code>r'\\nRevision: (\\d+)\\n'\n</code></pre>\n\n<p>This also means you can drop the escapes for <code>\\n</code> as well since these will just be parsed as newline characters by <code>re</code>.</p>\n"
                }
            ]
        },
        {
            "2425656": [
                {
                    "owner": {
                        "account_id": 13236534,
                        "reputation": 51,
                        "user_id": 9558518,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3a9722810e7597fe7d415a7ca8f397dc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Arvind Mannem",
                        "link": "https://stackoverflow.com/users/9558518/arvind-mannem"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1666284846,
                    "last_edit_date": 1666284846,
                    "creation_date": 1534430000,
                    "answer_id": 51879567,
                    "question_id": 2425656,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using a double underscore before a method in a class is <em>not</em> just a naming convention. By doing so, the method name is mangled with <code>classname(_classname__methodname())</code>.</p>\n<p>By inheriting a class with a method having double underscores in front of it, it becomes difficult for the child class to override the above specified method.</p>\n<p>This practice is almost equivalent to <em>final</em> in Java.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19836,
                        "reputation": 35118,
                        "user_id": 46821,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/4bfb433d859e35f8154943ddc61c73f6?s=256&d=identicon&r=PG",
                        "display_name": "Michael Kristofik",
                        "link": "https://stackoverflow.com/users/46821/michael-kristofik"
                    },
                    "is_accepted": false,
                    "score": 178,
                    "last_activity_date": 1666284616,
                    "last_edit_date": 1666284616,
                    "creation_date": 1268318528,
                    "answer_id": 2425818,
                    "question_id": 2425656,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could add a comment in there to the effect of:</p>\n<pre><code># We'll fire you if you override this method.\n</code></pre>\n<p>It's surprising how well low-tech solutions like this work in practice.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 73019,
                        "reputation": 17321,
                        "user_id": 210526,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/b990c8263bd35faf59663d598499d0b1?s=256&d=identicon&r=PG",
                        "display_name": "unholysampler",
                        "link": "https://stackoverflow.com/users/210526/unholysampler"
                    },
                    "is_accepted": true,
                    "score": 46,
                    "last_activity_date": 1666284587,
                    "last_edit_date": 1666284587,
                    "creation_date": 1268318341,
                    "answer_id": 2425785,
                    "question_id": 2425656,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The issue is you are trying to write in Python using Java philosophies. Some thing carry over, but not all of them. In Python you can do the following and it is perfectly fine, but it completely goes against how Java thinks of objects.</p>\n<pre><code>class Thing(object):\n    x = 1\nsomething = Thing()\nsomething.y = something.x\n</code></pre>\n<p>If you really want it, you can try the <a href=\"http://markmail.org/message/u2efr7edrb4666ot#query:python%20final%20method+page:1+mid:u2efr7edrb4666ot+state:results\" rel=\"nofollow noreferrer\">code posted here</a>. But as you can see, there is a lot of code there to get it to do what you want. It also should be noted that even the person that posted the code says it can be bypassed using <code>__dict__</code> or <code>object.__setattr__</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6308,
                        "reputation": 4752,
                        "user_id": 10562,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/89f032bea7ea14c8157aaa72a243bd06?s=256&d=identicon&r=PG",
                        "display_name": "Paddy3118",
                        "link": "https://stackoverflow.com/users/10562/paddy3118"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1666195444,
                    "last_edit_date": 1666195444,
                    "creation_date": 1268341414,
                    "answer_id": 2428648,
                    "question_id": 2425656,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yes, there is: Don't do it!</p>\n<p>Such protection mechanisms are seen by some to go against the ethos of Python, that, &quot;We are all consenting adults here.&quot; From whom do you want to protect such functions? And, if a comment will not suffice, why would something 'stronger'?</p>\n<p>I would document your expectations and expect other programmers to act responsibly.</p>\n"
                }
            ]
        },
        {
            "16548668": [
                {
                    "owner": {
                        "account_id": 2372800,
                        "reputation": 3524,
                        "user_id": 2077015,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/31da00925ad5f0c0a361e4d974d9f5f4?s=256&d=identicon&r=PG",
                        "display_name": "mrKelley",
                        "link": "https://stackoverflow.com/users/2077015/mrkelley"
                    },
                    "is_accepted": false,
                    "score": 106,
                    "last_activity_date": 1454460628,
                    "last_edit_date": 1454460628,
                    "creation_date": 1368550623,
                    "answer_id": 16548768,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the correct way.</p>\n\n<pre><code>&gt;&gt;&gt; x = [ ['0,0', '0,1'], ['1,0', '1,1'], ['2,0', '2,1'] ]\n&gt;&gt;&gt; for i in range(len(x)):\n        for j in range(len(x[i])):\n                print(x[i][j])\n\n\n0,0\n0,1\n1,0\n1,1\n2,0\n2,1\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1333097,
                        "reputation": 5096,
                        "user_id": 1276501,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/pBoUF.png?s=256",
                        "display_name": "Tanky Woo",
                        "link": "https://stackoverflow.com/users/1276501/tanky-woo"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1368551163,
                    "creation_date": 1368551163,
                    "answer_id": 16548922,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Ref: <a href=\"http://docs.python.org/2/library/functions.html#zip\" rel=\"nofollow\">zip built-in function</a></p>\n\n<p><code>zip()</code> in conjunction with the <code>*</code> operator can be used to <code>unzip</code> a list</p>\n\n<pre><code>unzip_lst = zip(*mylist)\nfor i in unzip_lst:\n    for j in i:\n        print j\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248069,
                        "reputation": 6234,
                        "user_id": 523217,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/TVpFT.jpg?s=256",
                        "display_name": "Oleksii Kachaiev",
                        "link": "https://stackoverflow.com/users/523217/oleksii-kachaiev"
                    },
                    "is_accepted": true,
                    "score": 38,
                    "last_activity_date": 1368550936,
                    "last_edit_date": 1368550936,
                    "creation_date": 1368550397,
                    "answer_id": 16548714,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <code>zip</code> and <code>itertools.chain</code>. Something like:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; l = chain.from_iterable(zip(*l))\n&lt;itertools.chain object at 0x104612610&gt;\n&gt;&gt;&gt; list(l)\n['0,0', '1,0', '2,0', '0,1', '1,1', '2,1']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1500608,
                        "reputation": 3110,
                        "user_id": 1405399,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9088b0b64f2782fcd2dbd4ad3eff4469?s=256&d=identicon&r=PG",
                        "display_name": "Iliyan Bobev",
                        "link": "https://stackoverflow.com/users/1405399/iliyan-bobev"
                    },
                    "is_accepted": false,
                    "score": 140,
                    "last_activity_date": 1368550692,
                    "creation_date": 1368550692,
                    "answer_id": 16548787,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>same way you did the fill in, but reverse the indexes:</p>\n\n<pre><code>&gt;&gt;&gt; for j in range(columns):\n...     for i in range(rows):\n...        print mylist[i][j],\n... \n0,0 1,0 2,0 0,1 1,1 2,1\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 258701,
                        "reputation": 113594,
                        "user_id": 541038,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/a3a82559ae1ee7ec304fdbae095f063c?s=256&d=identicon&r=PG",
                        "display_name": "Joran Beasley",
                        "link": "https://stackoverflow.com/users/541038/joran-beasley"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1368550527,
                    "creation_date": 1368550527,
                    "answer_id": 16548745,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; mylist = [[\"%s,%s\"%(i,j) for j in range(columns)] for i in range(rows)]\n&gt;&gt;&gt; mylist\n[['0,0', '0,1', '0,2'], ['1,0', '1,1', '1,2'], ['2,0', '2,1', '2,2']]\n&gt;&gt;&gt; zip(*mylist)\n[('0,0', '1,0', '2,0'), ('0,1', '1,1', '2,1'), ('0,2', '1,2', '2,2')]\n&gt;&gt;&gt; sum(zip(*mylist),())\n('0,0', '1,0', '2,0', '0,1', '1,1', '2,1', '0,2', '1,2', '2,2')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1433328,
                        "reputation": 11696,
                        "user_id": 1355221,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bfc365d660f7ef400090b891daf117fe?s=256&d=identicon&r=PG",
                        "display_name": "dansalmo",
                        "link": "https://stackoverflow.com/users/1355221/dansalmo"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1368550525,
                    "creation_date": 1368550525,
                    "answer_id": 16548743,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; [el[0] if i &lt; len(mylist) else el[1] for i,el in enumerate(mylist + mylist)]\n['0,0', '1,0', '2,0', '0,1', '1,1', '2,1']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 332800,
                        "reputation": 5633,
                        "user_id": 658298,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/61e78572f508988c4a1713fc4db495b9?s=256&d=identicon&r=PG",
                        "display_name": "Adrian Ratnapala",
                        "link": "https://stackoverflow.com/users/658298/adrian-ratnapala"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1368550362,
                    "creation_date": 1368550362,
                    "answer_id": 16548705,
                    "question_id": 16548668,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>zip</code> will transpose the list, after that you can concatenate the outputs.</p>\n\n<pre><code>In [3]: zip(*[ ['0,0', '0,1'], ['1,0', '1,1'], ['2,0', '2,1'] ])\nOut[3]: [('0,0', '1,0', '2,0'), ('0,1', '1,1', '2,1')]\n</code></pre>\n"
                }
            ]
        },
        {
            "10715965": [
                {
                    "owner": {
                        "account_id": 3813614,
                        "reputation": 10679,
                        "user_id": 3163618,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/7baa9537384cb1b60aab8e624d2fde2b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "qwr",
                        "link": "https://stackoverflow.com/users/3163618/qwr"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1717900219,
                    "last_edit_date": 1717900219,
                    "creation_date": 1577669757,
                    "answer_id": 59524806,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of a list of dictionaries as in <a href=\"https://stackoverflow.com/questions/10715965/create-a-pandas-dataframe-by-appending-one-row-at-a-time/17496530#17496530\">ShikharDua's answer</a> (row-based), we can also represent our table as a <strong>dictionary of lists</strong> (column-based), where each list stores one column, given we know our columns beforehand. This data structure is like how we would access a column as <code>df[&quot;col&quot;]</code>.  At the end we construct our DataFrame <em>once</em>.</p>\n<p>In both cases, the dictionary keys are always the column names. Row order is stored implicitly as order in a list. For <em>c</em> columns and <em>n</em> rows, this uses one dictionary of <em>c</em> lists (of length <em>n</em>), versus one list of <em>n</em> dictionaries (with <em>c</em> entries). The list-of-dictionaries method has each dictionary storing all keys redundantly and requires creating a new dictionary for every row. Here we only append to lists which is simpler and more efficient than creating new dictionaries.</p>\n<pre><code># Current data\ndata = {&quot;Animal&quot;:[&quot;cow&quot;, &quot;horse&quot;], &quot;Color&quot;:[&quot;blue&quot;, &quot;red&quot;]}\n\n# Adding a new row (be careful to ensure every column gets another value)\ndata[&quot;Animal&quot;].append(&quot;mouse&quot;)\ndata[&quot;Color&quot;].append(&quot;black&quot;)\n\n# At the end, construct our DataFrame\ndf = pd.DataFrame(data)\n#   Animal  Color\n# 0    cow   blue\n# 1  horse    red\n# 2  mouse  black\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2842085,
                        "reputation": 9999,
                        "user_id": 2441506,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://www.gravatar.com/avatar/6c40ce248e1f42380d3dbc1afc02c38b?s=256&d=identicon&r=PG",
                        "display_name": "ShikharDua",
                        "link": "https://stackoverflow.com/users/2441506/shikhardua"
                    },
                    "is_accepted": false,
                    "score": 809,
                    "last_activity_date": 1689802041,
                    "last_edit_date": 1689802041,
                    "creation_date": 1373056693,
                    "answer_id": 17496530,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In case you can get all data for the data frame upfront, there is a much faster approach than appending to a data frame:</p>\n<ol>\n<li>Create a list of dictionaries in which each dictionary corresponds to an input data row.</li>\n<li>Create a data frame from this list.</li>\n</ol>\n<p>I had a similar task for which appending to a data frame row by row took 30 min, and creating a data frame from a list of dictionaries completed within seconds.</p>\n<pre><code>rows_list = []\nfor row in input_rows:\n    dict1 = {}\n    # get input row in dictionary format\n    # key = col_name\n    dict1.update(blah..) \n\n    rows_list.append(dict1)\n\ndf = pd.DataFrame(rows_list)               \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6321039,
                        "reputation": 401096,
                        "user_id": 4909087,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/Zcszo.png?s=256",
                        "display_name": "cs95",
                        "link": "https://stackoverflow.com/users/4909087/cs95"
                    },
                    "is_accepted": false,
                    "score": 344,
                    "last_activity_date": 1682608311,
                    "last_edit_date": 1682608311,
                    "creation_date": 1593900904,
                    "answer_id": 62734983,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>from pandas &gt;= 2.0, <code>append</code> has been removed!</h1>\n<p><code>DataFrame.append</code> was deprecated in version 1.4 and removed from the pandas API entirely in version 2.0.</p>\n<p>See the docs on <a href=\"https://pandas.pydata.org/docs/whatsnew/v2.0.0.html#deprecations\" rel=\"noreferrer\">Deprecations</a> as well as <a href=\"https://i.sstatic.net/sGIV6.png\" rel=\"noreferrer\">this github issue</a> that originally proposed its deprecation.</p>\n<p>If you are running pandas version 2.0 or later, you will likely run into the following error:</p>\n<pre><code>AttributeError: 'DataFrame' object has no attribute 'append' for DataFrame\n</code></pre>\n<p>Keep reading if you would like to learn about more idiomatic alternatives to <code>append</code>.</p>\n<hr />\n<h1>NEVER grow a DataFrame!</h1>\n<p>Yes, people have already explained that you should NEVER grow a DataFrame, and that you should append your data to a list and convert it to a DataFrame once at the end. But do you understand why?</p>\n<p>Here are the most important reasons, taken from my post <a href=\"https://stackoverflow.com/a/56746204/4909087\">here</a>.</p>\n<ol>\n<li>It is always cheaper/faster to append to a list and create a DataFrame in one go.</li>\n<li>Lists take up less memory and are a much lighter data structure to work with, append, and remove.</li>\n<li><code>dtypes</code> are automatically inferred for your data. On the flip side, creating an empty frame of NaNs will automatically make them <code>object</code>, which is bad.</li>\n<li>An index is automatically created for you, instead of you having to take care to assign the correct index to the row you are appending.</li>\n</ol>\n<hr />\n<h2>This is The Right Way\u2122 to accumulate your data</h2>\n<pre><code>data = []\nfor a, b, c in some_function_that_yields_data():\n    data.append([a, b, c])\n\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n</code></pre>\n<p>Note that if <code>some_function_that_yields_data()</code> returns smaller DataFrames, you can accumulate individual DataFrames inside a list and then make a single call to <a href=\"https://pandas.pydata.org/pandas-docs/version/1.5/reference/api/pandas.concat.html#pandas.concat\" rel=\"noreferrer\"><code>pd.concat</code></a> at the end.</p>\n<h2>These options are horrible</h2>\n<ol>\n<li><p><strong><code>append</code> or <code>concat</code> inside a loop</strong></p>\n<p><code>append</code> and <code>concat</code> aren't inherently bad <strong>in isolation</strong>. The\nproblem starts when you iteratively call them inside a loop - this\nresults in quadratic memory usage.</p>\n<pre><code># Creates empty DataFrame and appends\ndf = pd.DataFrame(columns=['A', 'B', 'C'])\nfor a, b, c in some_function_that_yields_data():\n    df = df.append({'A': i, 'B': b, 'C': c}, ignore_index=True)  \n    # This is equally bad:\n    # df = pd.concat(\n    #       [df, pd.Series({'A': i, 'B': b, 'C': c})], \n    #       ignore_index=True)\n</code></pre>\n</li>\n<li><p><strong>Empty DataFrame of NaNs</strong></p>\n<p>Never create a DataFrame of NaNs as the columns are initialized with\n<code>object</code> (slow, un-vectorizable dtype).</p>\n<pre><code># Creates DataFrame of NaNs and overwrites values.\ndf = pd.DataFrame(columns=['A', 'B', 'C'], index=range(5))\nfor a, b, c in some_function_that_yields_data():\n    df.loc[len(df)] = [a, b, c]\n</code></pre>\n</li>\n</ol>\n<h2>The Proof is in the Pudding</h2>\n<p>Timing these methods is the fastest way to see just how much they differ in terms of their memory and utility.</p>\n<p><a href=\"https://i.sstatic.net/sGIV6.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/sGIV6.png\" alt=\"enter image description here\" /></a></p>\n<p><a href=\"https://gist.github.com/Coldsp33d/ea080f580ab3a3b75c2f40c201d50164\" rel=\"noreferrer\">Benchmarking code for reference.</a></p>\n<hr />\n<p>It's posts like this that remind me why I'm a part of this community. People understand the importance of teaching folks getting the right answer with the <em>right</em> code, not the right answer with <em>wrong</em> code. Now you might argue that it is not an issue to use <code>loc</code> or <code>append</code> if you're only adding a single row to your DataFrame. However, <strong>people often look to this question to add more than just <em>one</em> row</strong> - often the requirement is to iteratively add a row inside a loop using data that comes from a function (see <a href=\"https://stackoverflow.com/q/13784192/4909087\">related question</a>). In that case it is important to understand that iteratively growing a DataFrame is not a good idea.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 148470,
                        "reputation": 88,
                        "user_id": 360265,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ce5e7d6a16e2232688679e1110a2c42d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "mpa",
                        "link": "https://stackoverflow.com/users/360265/mpa"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1679664245,
                    "creation_date": 1679664245,
                    "answer_id": 75834200,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here are the 3 regularly mentioned options and their shortcomings for adding</p>\n<ul>\n<li>a <strong>single row</strong> (not multiple rows)</li>\n<li>optimized for <strong>readability</strong> (not for runtime performance, e.g. allow copy the DataFrame even though not preferred)</li>\n<li>columns can have different dtypes</li>\n<li><strong>keep the dtype</strong> of all columns</li>\n<li>the index can have any form, e.g. 'holes' in an integer series</li>\n<li>keep the dtype of the <code>df.index</code></li>\n</ul>\n<p>The code setup:</p>\n<pre><code>df = pd.DataFrame({'carId': [1, 4, 7], 'maxSpeed': [1.1, 4.4, 7.7]})\ndf = df.astype({\n    'carId': np.uint16,\n    'maxSpeed': np.float32,\n})\ndf.set_index('carId', drop=False, inplace=True)\nassert df.index.dtype == np.uint64\n\n# the row to add\nadditional_row = [9, 9.9]\nassert len(df.columns) == len(additional_row)\noriginal_dtypes = df.dtypes\noriginal_index_dtype = df.index.dtype\n</code></pre>\n<h1>1) pd.concat()</h1>\n<pre><code>df_new_row = pd.DataFrame([additional_row], columns=df.columns)\nnewDf = pd.concat([df, df_new_row])\nassert df.dtypes.equals(newDf.dtypes)  # fails: carId is np.int64 and maxSpeed is np.float64\nassert newDf.dtypes.equals(original_dtypes)  # fails: newDf.index.dype is np.float64\n</code></pre>\n<h1>2) df.loc[]</h1>\n<pre><code>df.loc[additional_row[0], :] = additional_row\nassert df.index.dtype == original_index_dtype\nassert df.dtypes.equals(original_dtypes)  # fails: carId and maxSpeed are np.float64\n</code></pre>\n<h1>3) df.append()</h1>\n<p>depreciated since pandas 1.4.0</p>\n<h1>solution</h1>\n<p>df.loc[] leaves the df.index intact, so I typically convert the types of the columns:</p>\n<pre><code>df.loc[additional_row[0], :] = additional_row\ndf = df.astype(original_dtypes)\nassert df.index.dtype == original_index_dtype\nassert df.dtypes.equals(original_dtypes)\n</code></pre>\n<p>Note that <code>df.astype()</code> creates a copy of the <code>df</code>. <code>df.astype(copy=False)</code> avoids this if you can accept the side effects of the copy parameter.</p>\n<p>If you do not want to set the index explicitly, use e.g. <code>df.loc[df.index.max() + 1, :] = additional_row</code>. Note that <code>df.index.max()</code> fails if <code>df</code> is empty.</p>\n<p>Unfortunately, <a href=\"https://stackoverflow.com/questions/19365513/how-to-add-an-extra-row-to-a-pandas-dataframe\">How to add an extra row to a pandas dataframe</a> has been marked as duplicate and points to this question. The title of this post &quot;by appending one row at a time&quot; implies that regularly adding multiple lines to a DataFrame is a good idea. I agree with many previous comments that there are probably not many uses cases for this. However, adding a single row to a DataFrame occurs more often, even though it's still an edge case.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": false,
                    "score": 358,
                    "last_activity_date": 1663080266,
                    "last_edit_date": 1663080266,
                    "creation_date": 1337760883,
                    "answer_id": 10716007,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could use <code>pandas.concat()</code>. For details and examples, see <a href=\"http://pandas.pydata.org/pandas-docs/stable/merging.html\" rel=\"noreferrer\">Merge, join, and concatenate</a>.</p>\n<p>For example:</p>\n<pre><code>def append_row(df, row):\n    return pd.concat([\n                df, \n                pd.DataFrame([row], columns=row.index)]\n           ).reset_index(drop=True)\n\ndf = pd.DataFrame(columns=('lib', 'qty1', 'qty2'))\nnew_row = pd.Series({'lib':'A', 'qty1':1, 'qty2': 2})\n\ndf = append_row(df, new_row)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8158754,
                        "reputation": 440,
                        "user_id": 6143425,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/M4hkC.jpg?s=256",
                        "display_name": "Joaquim",
                        "link": "https://stackoverflow.com/users/6143425/joaquim"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1626258536,
                    "last_edit_date": 1626258536,
                    "creation_date": 1624605956,
                    "answer_id": 68127083,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This code snippet uses a list of dictionaries to update the data frame. It adds on to <a href=\"https://stackoverflow.com/questions/10715965/create-a-pandas-dataframe-by-appending-one-row-at-a-time/17496530#17496530\">ShikharDua's</a> and <a href=\"https://stackoverflow.com/questions/10715965/create-a-pandas-dataframe-by-appending-one-row-at-a-time/47979665#47979665\">Mikhail_Sam's</a> answers.</p>\n<pre><code>import pandas as pd\ncolour = [&quot;red&quot;, &quot;big&quot;, &quot;tasty&quot;]\nfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]\ndict1={}\nfeat_list=[]\nfor x in colour:\n    for y in fruits:\n#         print(x, y)\n        dict1 = dict([('x',x),('y',y)])\n#         print(f'dict 1 {dict1}')\n        feat_list.append(dict1)\n#         print(f'feat_list {feat_list}')\nfeat_df=pd.DataFrame(feat_list)\nfeat_df.to_csv('feat1.csv')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18309430,
                        "reputation": 6556,
                        "user_id": 13332582,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/sjLpB.jpg?s=256",
                        "display_name": "Prajot Kuvalekar",
                        "link": "https://stackoverflow.com/users/13332582/prajot-kuvalekar"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1626258440,
                    "last_edit_date": 1626258440,
                    "creation_date": 1615038807,
                    "answer_id": 66506408,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you always want to add a new row at the end, use this:</p>\n<pre><code>df.loc[len(df)] = ['name5', 9, 0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11366545,
                        "reputation": 177,
                        "user_id": 8333301,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7ddeac057c14271f853852737fc1241d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Gerard",
                        "link": "https://stackoverflow.com/users/8333301/gerard"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1626257886,
                    "last_edit_date": 1626257886,
                    "creation_date": 1602442015,
                    "answer_id": 64307807,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If all data in your Dataframe has the same dtype you might use a NumPy array. You can write rows directly into the predefined array and convert it to a dataframe at the end.\nIt seems to be even faster than converting a list of dicts.</p>\n<pre><code>import pandas as pd\nimport numpy as np\nfrom string import ascii_uppercase\n\nstartTime = time.perf_counter()\nnumcols, numrows = 5, 10000\nnpdf = np.ones((numrows, numcols))\nfor row in range(numrows):\n    npdf[row, 0:] = np.random.randint(0, 100, (1, numcols))\ndf5 = pd.DataFrame(npdf, columns=list(ascii_uppercase[:numcols]))\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df5.shape)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13399412,
                        "reputation": 1228,
                        "user_id": 11006284,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-LUT7Nj2XxxU/AAAAAAAAAAI/AAAAAAAABoo/V4ZD3e65d-k/photo.jpg?sz=256",
                        "display_name": "Harshal Deore",
                        "link": "https://stackoverflow.com/users/11006284/harshal-deore"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1626257544,
                    "last_edit_date": 1626257544,
                    "creation_date": 1592060971,
                    "answer_id": 62361637,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>initial_data = {'lib': np.array([1,2,3,4]), 'qty1': [1,2,3,4], 'qty2': [1,2,3,4]}\n\ndf = pd.DataFrame(initial_data)\n\ndf\n\nlib    qty1    qty2\n0    1    1    1\n1    2    2    2\n2    3    3    3\n3    4    4    4\n\nval_1 = [10]\nval_2 = [14]\nval_3 = [20]\n\ndf.append(pd.DataFrame({'lib': val_1, 'qty1': val_2, 'qty2': val_3}))\n\nlib    qty1    qty2\n0    1    1    1\n1    2    2    2\n2    3    3    3\n3    4    4    4\n0    10    14    20\n</code></pre>\n<p>You can use a <em>for</em> loop to iterate through values or can add arrays of values.</p>\n<pre><code>val_1 = [10, 11, 12, 13]\nval_2 = [14, 15, 16, 17]\nval_3 = [20, 21, 22, 43]\n\ndf.append(pd.DataFrame({'lib': val_1, 'qty1': val_2, 'qty2': val_3}))\n\nlib    qty1    qty2\n0    1    1    1\n1    2    2    2\n2    3    3    3\n3    4    4    4\n0    10    14    20\n1    11    15    21\n2    12    16    22\n3    13    17    43\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11744636,
                        "reputation": 639,
                        "user_id": 8595790,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e3b7db8bba6691fcb55aa905b7d443c6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "hansrajswapnil",
                        "link": "https://stackoverflow.com/users/8595790/hansrajswapnil"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1626257493,
                    "last_edit_date": 1626257493,
                    "creation_date": 1588255639,
                    "answer_id": 61525295,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can concatenate two DataFrames for this. I basically came across this problem to add a new row to an existing DataFrame with a character index (not numeric).</p>\n<p>So, I input the data for a new row in a duct() and index in a list.</p>\n<pre><code>new_dict = {put input for new row here}\nnew_list = [put your index here]\n\nnew_df = pd.DataFrame(data=new_dict, index=new_list)\n\ndf = pd.concat([existing_df, new_df])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18068014,
                        "reputation": 23,
                        "user_id": 13133337,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-gMqOzb9f5O8/AAAAAAAAAAI/AAAAAAAAAAA/AKF05nAHPXmyK5rjsK07bNv8CrwwbBmUCA/photo.jpg?sz=256",
                        "display_name": "srikanth Gattu",
                        "link": "https://stackoverflow.com/users/13133337/srikanth-gattu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1626257455,
                    "last_edit_date": 1626257455,
                    "creation_date": 1587146053,
                    "answer_id": 61277729,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Before going to add a row, we have to convert the dataframe to a dictionary. There you can see the keys as columns in the dataframe and the values of the columns are again stored in the dictionary, but there the key for every column is the index number in the dataframe.</p>\n<p>That idea makes me to write the below code.</p>\n<pre><code>df2 = df.to_dict()\nvalues = [&quot;s_101&quot;, &quot;hyderabad&quot;, 10, 20, 16, 13, 15, 12, 12, 13, 25, 26, 25, 27, &quot;good&quot;, &quot;bad&quot;] # This is the total row that we are going to add\ni = 0\nfor x in df.columns:   # Here df.columns gives us the main dictionary key\n    df2[x][101] = values[i]   # Here the 101 is our index number. It is also the key of the sub dictionary\n    i += 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9942997,
                        "reputation": 1818,
                        "user_id": 7358909,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-rFa9M1STaeE/AAAAAAAAAAI/AAAAAAAABYI/k1vFFGwoHbY/photo.jpg?sz=256",
                        "display_name": "Shahir Ansari",
                        "link": "https://stackoverflow.com/users/7358909/shahir-ansari"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1626257318,
                    "last_edit_date": 1626257318,
                    "creation_date": 1585231759,
                    "answer_id": 60869171,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want to add a row at the end, append it as a list:</p>\n<pre><code>valuestoappend = [va1, val2, val3]\nres = res.append(pd.Series(valuestoappend, index = ['lib', 'qty1', 'qty2']), ignore_index = True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1741194,
                        "reputation": 4583,
                        "user_id": 3486460,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2330c22c3384aadb0ecd96ecc37f4b29?s=256&d=identicon&r=PG",
                        "display_name": "kamran kausar",
                        "link": "https://stackoverflow.com/users/3486460/kamran-kausar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1626256966,
                    "last_edit_date": 1626256966,
                    "creation_date": 1582094118,
                    "answer_id": 60294358,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>pandas.DataFrame.append</p>\n<p>DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=False) \u2192 'DataFrame'</p>\n<h3 id=\"code-t2oz\">Code</h3>\n<pre><code>df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\ndf2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\ndf.append(df2)\n</code></pre>\n<p>With ignore_index set to True:</p>\n<pre><code>df.append(df2, ignore_index=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3888382,
                        "reputation": 1314,
                        "user_id": 3219208,
                        "user_type": "registered",
                        "accept_rate": 54,
                        "profile_image": "https://i.sstatic.net/F9lzs.png?s=256",
                        "display_name": "RockStar",
                        "link": "https://stackoverflow.com/users/3219208/rockstar"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1626256825,
                    "last_edit_date": 1626256825,
                    "creation_date": 1571642768,
                    "answer_id": 58481594,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use a generator object to create a Dataframe, which will be more memory efficient over the list.</p>\n<pre><code>num = 10\n\n# Generator function to generate generator object\ndef numgen_func(num):\n    for i in range(num):\n        yield ('name_{}'.format(i), (i*i), (i*i*i))\n\n# Generator expression to generate generator object (Only once data get populated, can not be re used)\nnumgen_expression = (('name_{}'.format(i), (i*i), (i*i*i)) for i in range(num) )\n\ndf = pd.DataFrame(data=numgen_func(num), columns=('lib', 'qty1', 'qty2'))\n</code></pre>\n<p>To add raw to existing DataFrame you can use append method.</p>\n<pre><code>df = df.append([{ 'lib': &quot;name_20&quot;, 'qty1': 20, 'qty2': 400  }])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2805962,
                        "reputation": 19315,
                        "user_id": 2413201,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/rxfuw.jpg?s=256",
                        "display_name": "Armali",
                        "link": "https://stackoverflow.com/users/2413201/armali"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1626256765,
                    "last_edit_date": 1626256765,
                    "creation_date": 1566477572,
                    "answer_id": 57609566,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>We often see the construct <code>df.loc[subscript] = \u2026</code> to assign to one DataFrame row. <a href=\"https://stackoverflow.com/a/47979665/2413201\">Mikhail_Sam posted benchmarks</a> containing, among others, this construct as well as the method using <em>dict and create DataFrame in the end</em>. He found the latter to be the fastest by far.</p>\n<p>But if we replace the <code>df3.loc[i]  = \u2026</code> (with preallocated DataFrame) in his code with <code>df3.values[i] = \u2026</code>, the outcome changes significantly, in that that method performs similar to the one using dict. So we should more often take the use of <code>df.values[subscript] = \u2026</code> into consideration. However note that <code>.values</code> takes a zero-based subscript, which may be different from the DataFrame.index.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9079714,
                        "reputation": 2134,
                        "user_id": 6759926,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eeQrl.jpg?s=256",
                        "display_name": "shivampip",
                        "link": "https://stackoverflow.com/users/6759926/shivampip"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1626256714,
                    "last_edit_date": 1626256714,
                    "creation_date": 1536175854,
                    "answer_id": 52192221,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is the way to add/append a row in a Pandas <code>DataFrame</code>:</p>\n<pre><code>def add_row(df, row):\n    df.loc[-1] = row\n    df.index = df.index + 1\n    return df.sort_index()\n\nadd_row(df, [1,2,3])\n</code></pre>\n<p>It can be used to insert/append a row in an empty or populated Pandas DataFrame.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1747819,
                        "reputation": 820,
                        "user_id": 1597592,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/9E07f.jpg?s=256",
                        "display_name": "Qinsi",
                        "link": "https://stackoverflow.com/users/1597592/qinsi"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1626256651,
                    "last_edit_date": 1626256651,
                    "creation_date": 1535599183,
                    "answer_id": 52088786,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I figured out a simple and nice way:</p>\n<pre><code>&gt;&gt;&gt; df\n     A  B  C\none  1  2  3\n&gt;&gt;&gt; df.loc[&quot;two&quot;] = [4,5,6]\n&gt;&gt;&gt; df\n     A  B  C\none  1  2  3\ntwo  4  5  6\n</code></pre>\n<p>Note the caveat with performance as noted in the comments.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6396905,
                        "reputation": 11178,
                        "user_id": 4960953,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/3db40772cbbd7ea18b3b3bee7ab9b981?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mikhail_Sam",
                        "link": "https://stackoverflow.com/users/4960953/mikhail-sam"
                    },
                    "is_accepted": false,
                    "score": 458,
                    "last_activity_date": 1626256319,
                    "last_edit_date": 1626256319,
                    "creation_date": 1514296957,
                    "answer_id": 47979665,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In the case of adding a lot of rows to dataframe, I am interested <strong>in performance</strong>. So I tried the four most popular methods and checked their speed.</p>\n<h2 id=\"performance\"><strong>Performance</strong></h2>\n<ol>\n<li>Using .append (<a href=\"https://stackoverflow.com/a/10716007/4960953\">NPE's answer</a>)</li>\n<li>Using .loc (<a href=\"https://stackoverflow.com/a/24888331/4960953\">fred's answer</a>)</li>\n<li>Using .loc with preallocating (<a href=\"https://stackoverflow.com/a/24913075/4960953\">FooBar's answer</a>)</li>\n<li>Using dict and create DataFrame in the end (<a href=\"https://stackoverflow.com/a/17496530/4960953\">ShikharDua's answer</a>)</li>\n</ol>\n<p><strong>Runtime results (in seconds):</strong></p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Approach</th>\n<th>1000 rows</th>\n<th>5000 rows</th>\n<th>10 000 rows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.append</td>\n<td>0.69</td>\n<td>3.39</td>\n<td>6.78</td>\n</tr>\n<tr>\n<td>.loc without prealloc</td>\n<td>0.74</td>\n<td>3.90</td>\n<td>8.35</td>\n</tr>\n<tr>\n<td>.loc with prealloc</td>\n<td>0.24</td>\n<td>2.58</td>\n<td>8.70</td>\n</tr>\n<tr>\n<td>dict</td>\n<td>0.012</td>\n<td>0.046</td>\n<td>0.084</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>So I use addition through the dictionary for myself.</p>\n<hr />\n<p><strong>Code:</strong></p>\n<pre><code>import pandas as pd\nimport numpy as np\nimport time\n\ndel df1, df2, df3, df4\nnumOfRows = 1000\n# append\nstartTime = time.perf_counter()\ndf1 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=['A', 'B', 'C', 'D', 'E'])\nfor i in range( 1,numOfRows-4):\n    df1 = df1.append( dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E']), ignore_index=True)\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df1.shape)\n\n# .loc w/o prealloc\nstartTime = time.perf_counter()\ndf2 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=['A', 'B', 'C', 'D', 'E'])\nfor i in range( 1,numOfRows):\n    df2.loc[i]  = np.random.randint(100, size=(1,5))[0]\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df2.shape)\n\n# .loc with prealloc\ndf3 = pd.DataFrame(index=np.arange(0, numOfRows), columns=['A', 'B', 'C', 'D', 'E'] )\nstartTime = time.perf_counter()\nfor i in range( 1,numOfRows):\n    df3.loc[i]  = np.random.randint(100, size=(1,5))[0]\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df3.shape)\n\n# dict\nstartTime = time.perf_counter()\nrow_list = []\nfor i in range (0,5):\n    row_list.append(dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E']))\nfor i in range( 1,numOfRows-4):\n    dict1 = dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E'])\n    row_list.append(dict1)\n\ndf4 = pd.DataFrame(row_list, columns=['A','B','C','D','E'])\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df4.shape)\n</code></pre>\n<p>P.S.: I believe my realization isn't perfect, and maybe there is some optimization that could be done.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9081500,
                        "reputation": 1565,
                        "user_id": 6761181,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://lh6.googleusercontent.com/-UMA8swDt9ZA/AAAAAAAAAAI/AAAAAAAAABg/TN4dhWxl_2Q/photo.jpg?sz=256",
                        "display_name": "Vineet Jain",
                        "link": "https://stackoverflow.com/users/6761181/vineet-jain"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1626255048,
                    "last_edit_date": 1626255048,
                    "creation_date": 1503676024,
                    "answer_id": 45885112,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Make it simple. By taking a list as input which will be appended as a row in the data-frame:</p>\n<pre><code>import pandas as pd\nres = pd.DataFrame(columns=('lib', 'qty1', 'qty2'))\nfor i in range(5):\n    res_list = list(map(int, input().split()))\n    res = res.append(pd.Series(res_list, index=['lib', 'qty1', 'qty2']), ignore_index=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1702085,
                        "reputation": 3834,
                        "user_id": 1561874,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8defb42c513957bf47909ec57d55c44b?s=256&d=identicon&r=PG",
                        "display_name": "hkyi",
                        "link": "https://stackoverflow.com/users/1561874/hkyi"
                    },
                    "is_accepted": false,
                    "score": 48,
                    "last_activity_date": 1626255001,
                    "last_edit_date": 1626255001,
                    "creation_date": 1501995998,
                    "answer_id": 45528721,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For the sake of a Pythonic way:</p>\n<pre><code>res = pd.DataFrame(columns=('lib', 'qty1', 'qty2'))\nres = res.append([{'qty1':10.0}], ignore_index=True)\nprint(res.head())\n\n   lib  qty1  qty2\n0  NaN  10.0   NaN\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3293396,
                        "reputation": 2611,
                        "user_id": 2771169,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/bc32e812691c4ae99bb1fcfc0b8a0cdc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Jack Daniel",
                        "link": "https://stackoverflow.com/users/2771169/jack-daniel"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1626254933,
                    "last_edit_date": 1626254933,
                    "creation_date": 1468835643,
                    "answer_id": 38433682,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Create a <strong>new record (data frame)</strong> and add to <strong>old_data_frame</strong>.</p>\n<p>Pass a list of <strong>values</strong> and the corresponding <strong>column</strong> names to create a <strong>new_record</strong> (data_frame):</p>\n<pre><code>new_record = pd.DataFrame([[0, 'abcd', 0, 1, 123]], columns=['a', 'b', 'c', 'd', 'e'])\n\nold_data_frame = pd.concat([old_data_frame, new_record])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3933246,
                        "reputation": 149,
                        "user_id": 3250815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a45b6bcd03ce0ffba030a6a0e2d5fb3f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3250815",
                        "link": "https://stackoverflow.com/users/3250815/user3250815"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1626254881,
                    "last_edit_date": 1626254881,
                    "creation_date": 1468403358,
                    "answer_id": 38348167,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is not an answer to the OP question, but a toy example to illustrate <a href=\"https://stackoverflow.com/questions/10715965/create-a-pandas-dataframe-by-appending-one-row-at-a-time/17496530#17496530\">ShikharDua's answer</a> which I found very useful.</p>\n<p>While this fragment is trivial, in the actual data I had 1,000s of rows, and many columns, and I wished to be able to group by different columns and then perform the statistics below for more than one target column. So having a reliable method for building the data frame one row at a time was a great convenience. Thank you ShikharDua!</p>\n<pre><code>import pandas as pd\n\nBaseData = pd.DataFrame({ 'Customer' : ['Acme','Mega','Acme','Acme','Mega','Acme'],\n                          'Territory'  : ['West','East','South','West','East','South'],\n                          'Product'  : ['Econ','Luxe','Econ','Std','Std','Econ']})\nBaseData\n\ncolumns = ['Customer','Num Unique Products', 'List Unique Products']\n\nrows_list=[]\nfor name, group in BaseData.groupby('Customer'):\n    RecordtoAdd={} #initialise an empty dict\n    RecordtoAdd.update({'Customer' : name}) #\n    RecordtoAdd.update({'Num Unique Products' : len(pd.unique(group['Product']))})\n    RecordtoAdd.update({'List Unique Products' : pd.unique(group['Product'])})\n\n    rows_list.append(RecordtoAdd)\n\nAnalysedData = pd.DataFrame(rows_list)\n\nprint('Base Data : \\n',BaseData,'\\n\\n Analysed Data : \\n',AnalysedData)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1090812,
                        "reputation": 4661,
                        "user_id": 1085495,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e8088cd8105f6da086aea5f5c5174b27?s=256&d=identicon&r=PG",
                        "display_name": "Nasser Al-Wohaibi",
                        "link": "https://stackoverflow.com/users/1085495/nasser-al-wohaibi"
                    },
                    "is_accepted": false,
                    "score": 79,
                    "last_activity_date": 1626254694,
                    "last_edit_date": 1626254694,
                    "creation_date": 1398879064,
                    "answer_id": 23394497,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For efficient appending, see <em><a href=\"https://stackoverflow.com/questions/19365513/how-to-add-an-extra-row-to-a-pandas-dataframe/19368360#19368360\">How to add an extra row to a pandas dataframe</a></em> and <a href=\"http://pandas-docs.github.io/pandas-docs-travis/indexing.html#setting-with-enlargement\" rel=\"nofollow noreferrer\"><em>Setting With Enlargement</em></a>.</p>\n<p>Add rows through <code>loc/ix</code> on <strong>non existing</strong> key index data. For example:</p>\n<pre><code>In [1]: se = pd.Series([1,2,3])\n\nIn [2]: se\nOut[2]:\n0    1\n1    2\n2    3\ndtype: int64\n\nIn [3]: se[5] = 5.\n\nIn [4]: se\nOut[4]:\n0    1.0\n1    2.0\n2    3.0\n5    5.0\ndtype: float64\n</code></pre>\n<p>Or:</p>\n<pre><code>In [1]: dfi = pd.DataFrame(np.arange(6).reshape(3,2),\n   .....:                 columns=['A','B'])\n   .....:\n\nIn [2]: dfi\nOut[2]:\n   A  B\n0  0  1\n1  2  3\n2  4  5\n\nIn [3]: dfi.loc[:,'C'] = dfi.loc[:,'A']\n\nIn [4]: dfi\nOut[4]:\n   A  B  C\n0  0  1  0\n1  2  3  2\n2  4  5  4\nIn [5]: dfi.loc[3] = 5\n\nIn [6]: dfi\nOut[6]:\n   A  B  C\n0  0  1  0\n1  2  3  2\n2  4  5  4\n3  5  5  5\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6383588,
                        "reputation": 235,
                        "user_id": 6704785,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ab0efe49338cc8a5f5eafc395312a65c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mahdi",
                        "link": "https://stackoverflow.com/users/6704785/mahdi"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1608544640,
                    "creation_date": 1608544640,
                    "answer_id": 65390671,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have a data frame <code>df</code> and want to add a <strong>list</strong> <code>new_list</code> as a new row to <code>df</code>, you can simply do:</p>\n<pre><code>df.loc[len(df)] = new_list\n</code></pre>\n<p>If you want to add a new <strong>data frame</strong> <code>new_df</code> under data frame <code>df</code>, then you can use:</p>\n<pre><code>df.append(new_df)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1348919,
                        "reputation": 10060,
                        "user_id": 1289107,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/b8e0c4a0ea801b27e2fb1ed1d06107a0?s=256&d=identicon&r=PG",
                        "display_name": "fred",
                        "link": "https://stackoverflow.com/users/1289107/fred"
                    },
                    "is_accepted": true,
                    "score": 919,
                    "last_activity_date": 1608303626,
                    "last_edit_date": 1608303626,
                    "creation_date": 1406034625,
                    "answer_id": 24888331,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>df.loc[i]</code>, where the row with index <code>i</code> will be what you specify it to be in the dataframe.</p>\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from numpy.random import randint\n\n&gt;&gt;&gt; df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])\n&gt;&gt;&gt; for i in range(5):\n&gt;&gt;&gt;     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))\n\n&gt;&gt;&gt; df\n     lib qty1 qty2\n0  name0    3    3\n1  name1    2    4\n2  name2    2    8\n3  name3    2    1\n4  name4    9    6\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9605621,
                        "reputation": 39535,
                        "user_id": 7131757,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/8GwzL.jpg?s=256",
                        "display_name": "Giorgos Myrianthous",
                        "link": "https://stackoverflow.com/users/7131757/giorgos-myrianthous"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1588345831,
                    "last_edit_date": 1588345831,
                    "creation_date": 1588343956,
                    "answer_id": 61544604,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All you need is <code>loc[df.shape[0]]</code> or <code>loc[len(df)]</code></p>\n\n<hr>\n\n<pre><code># Assuming your df has 4 columns (str, int, str, bool)\ndf.loc[df.shape[0]] = ['col1Value', 100, 'col3Value', False] \n</code></pre>\n\n<p>or</p>\n\n<pre><code>df.loc[len(df)] = ['col1Value', 100, 'col3Value', False] \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 87853,
                        "reputation": 21882,
                        "user_id": 243392,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/a26dc48dfa10591ba7afeb3a44eb126d?s=256&d=identicon&r=PG",
                        "display_name": "Brian Burns",
                        "link": "https://stackoverflow.com/users/243392/brian-burns"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1564140891,
                    "last_edit_date": 1564140891,
                    "creation_date": 1507896983,
                    "answer_id": 46729742,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also build up a list of lists and convert it to a dataframe - </p>\n\n<pre><code>import pandas as pd\n\ncolumns = ['i','double','square']\nrows = []\n\nfor i in range(6):\n    row = [i, i*2, i*i]\n    rows.append(row)\n\ndf = pd.DataFrame(rows, columns=columns)\n</code></pre>\n\n<p>giving</p>\n\n<pre>\n    i   double  square\n0   0   0   0\n1   1   2   1\n2   2   4   4\n3   3   6   9\n4   4   8   16\n5   5   10  25\n</pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3030835,
                        "reputation": 459,
                        "user_id": 2569887,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8b3d4a57d6b23bedaff9ce4ad09783b6?s=256&d=identicon&r=PG",
                        "display_name": "tomatom",
                        "link": "https://stackoverflow.com/users/2569887/tomatom"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1561983133,
                    "last_edit_date": 1561983133,
                    "creation_date": 1507916932,
                    "answer_id": 46735444,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This will take care of adding an item to an empty DataFrame. The issue is that <code>df.index.max() == nan</code> for the first index:</p>\n\n<pre><code>df = pd.DataFrame(columns=['timeMS', 'accelX', 'accelY', 'accelZ', 'gyroX', 'gyroY', 'gyroZ'])\n\ndf.loc[0 if math.isnan(df.index.max()) else df.index.max() + 1] = [x for x in range(7)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 271602,
                        "reputation": 23034,
                        "user_id": 562222,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://i.sstatic.net/jgGXb.jpg?s=256",
                        "display_name": "qed",
                        "link": "https://stackoverflow.com/users/562222/qed"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1478888700,
                    "last_edit_date": 1478888700,
                    "creation_date": 1478888289,
                    "answer_id": 40553910,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Another way to do it (probably not very performant):</p>\n\n<pre><code># add a row\ndef add_row(df, row):\n    colnames = list(df.columns)\n    ncol = len(colnames)\n    assert ncol == len(row), \"Length of row must be the same as width of DataFrame: %s\" % row\n    return df.append(pd.DataFrame([row], columns=colnames))\n</code></pre>\n\n<p>You can also enhance the DataFrame class like this:</p>\n\n<pre><code>import pandas as pd\ndef add_row(self, row):\n    self.loc[len(self.index)] = row\npd.DataFrame.add_row = add_row\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1135172,
                        "reputation": 16966,
                        "user_id": 1120370,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/8c82898ff7f2247a7fc0c1e224b4b3de?s=256&d=identicon&r=PG",
                        "display_name": "W.P. McNeill",
                        "link": "https://stackoverflow.com/users/1120370/w-p-mcneill"
                    },
                    "is_accepted": false,
                    "score": 81,
                    "last_activity_date": 1456245787,
                    "creation_date": 1456245787,
                    "answer_id": 35583219,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can append a single row as a dictionary using the <code>ignore_index</code> option.</p>\n\n<pre><code>&gt;&gt;&gt; f = pandas.DataFrame(data = {'Animal':['cow','horse'], 'Color':['blue', 'red']})\n&gt;&gt;&gt; f\n  Animal Color\n0    cow  blue\n1  horse   red\n&gt;&gt;&gt; f.append({'Animal':'mouse', 'Color':'black'}, ignore_index=True)\n  Animal  Color\n0    cow   blue\n1  horse    red\n2  mouse  black\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5607554,
                        "reputation": 2437,
                        "user_id": 4441538,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1f2c2b9ebff062c46b7dcdae481ed6df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Lydia",
                        "link": "https://stackoverflow.com/users/4441538/lydia"
                    },
                    "is_accepted": false,
                    "score": 94,
                    "last_activity_date": 1435179991,
                    "creation_date": 1435179991,
                    "answer_id": 31037040,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>mycolumns = ['A', 'B']\ndf = pd.DataFrame(columns=mycolumns)\nrows = [[1,2],[3,4],[5,6]]\nfor row in rows:\n    df.loc[len(df)] = row\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1086824,
                        "reputation": 16458,
                        "user_id": 1082349,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/ffbba800a06c2ba0908a2a1467841c73?s=256&d=identicon&r=PG",
                        "display_name": "FooBar",
                        "link": "https://stackoverflow.com/users/1082349/foobar"
                    },
                    "is_accepted": false,
                    "score": 133,
                    "last_activity_date": 1427976228,
                    "last_edit_date": 1427976228,
                    "creation_date": 1406125305,
                    "answer_id": 24913075,
                    "question_id": 10715965,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you know the number of entries ex ante, you should preallocate the space by also providing the index (taking the data example from a different answer):</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\n# we know we're gonna have 5 rows of data\nnumberOfRows = 5\n# create dataframe\ndf = pd.DataFrame(index=np.arange(0, numberOfRows), columns=('lib', 'qty1', 'qty2') )\n\n# now fill it up row by row\nfor x in np.arange(0, numberOfRows):\n    #loc or iloc both work here since the index is natural numbers\n    df.loc[x] = [np.random.randint(-1,1) for n in range(3)]\nIn[23]: df\nOut[23]: \n   lib  qty1  qty2\n0   -1    -1    -1\n1    0     0     0\n2   -1     0    -1\n3    0    -1     0\n4   -1     0     0\n</code></pre>\n\n<p><strong>Speed comparison</strong></p>\n\n<pre><code>In[30]: %timeit tryThis() # function wrapper for this answer\nIn[31]: %timeit tryOther() # function wrapper without index (see, for example, @fred)\n1000 loops, best of 3: 1.23 ms per loop\n100 loops, best of 3: 2.31 ms per loop\n</code></pre>\n\n<p>And - as from the comments - with a size of 6000, the speed difference becomes even larger:</p>\n\n<blockquote>\n  <p>Increasing the size of the array (12) and the number of rows (500) makes\n  the speed difference more striking: 313ms vs 2.29s</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "14730046": [
                {
                    "owner": {
                        "account_id": 1749903,
                        "reputation": 3671,
                        "user_id": 1599229,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/aaee5e09f4d17bd810fabaa66bc7aa80?s=256&d=identicon&r=PG",
                        "display_name": "scharfmn",
                        "link": "https://stackoverflow.com/users/1599229/scharfmn"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1670523235,
                    "last_edit_date": 1670523235,
                    "creation_date": 1543866518,
                    "answer_id": 53600865,
                    "question_id": 14730046,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Note that this does not answer the OP's very different question</p>\n<p>In case you landed here wondering why <code>any</code>/<code>all</code> calls can <em>seem</em> not to short circuit</p>\n<p>One reason is a false expectation: using a list comprehension inside the call and expecting the building of the list to short-circuit:</p>\n<pre><code>&gt;&gt;&gt; def print_and_return_num(num):\n    print_and_return_num(num)\n    return num\n...\n\n&gt;&gt;&gt; any(print_and_return_num(num) for num in [1, 2, 3, 4])\n1\nTrue\n\n&gt;&gt;&gt; any([print_and_return_num(num) for num in [1, 2, 3, 4]])\n1\n2\n3\n4\nTrue\n</code></pre>\n<p>In the second example, the list comprehension gets evaluated first: the entire list gets built before <code>any()</code> can look at it. This is the expected behavior, but it may take a second to see it etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 342731,
                        "reputation": 360850,
                        "user_id": 674039,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/leoFi.gif?s=256",
                        "display_name": "wim",
                        "link": "https://stackoverflow.com/users/674039/wim"
                    },
                    "is_accepted": true,
                    "score": 79,
                    "last_activity_date": 1496951229,
                    "last_edit_date": 1496951229,
                    "creation_date": 1360805379,
                    "answer_id": 14866380,
                    "question_id": 14730046,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>The behaviour is guaranteed</strong>.  I've contributed a <a href=\"http://bugs.python.org/file29131/mywork.patch\" rel=\"noreferrer\">patch</a>, which was accepted and <a href=\"http://bugs.python.org/issue17255\" rel=\"noreferrer\">merged</a> recently, so if you grab the latest sources you will see that the short-circuiting behaviour is now explicitly enforced.  </p>\n\n<pre><code>git clone https://github.com/python/cpython.git\ngrep Short-circuit cpython/Lib/test/test_builtin.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309273,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1360158937,
                    "last_edit_date": 1360158937,
                    "creation_date": 1360157321,
                    "answer_id": 14730284,
                    "question_id": 14730046,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The docs say </p>\n\n<blockquote>\n  <p>\"Return True if any element of the iterable is true. If the iterable is empty, return False. <strong>EQUIVALENT TO:</strong>\" (emphasis mine) ...</p>\n</blockquote>\n\n<pre><code>def any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n</code></pre>\n\n<p>If <code>any</code> didn't short circuit, it wouldn't be <strong>EQUIVALENT</strong> to the posted code since the posted code clearly short circuits.  You could consume more of a generator than you want to for example.  In light of that, I say that <strong>the short circuiting behavior is guaranteed</strong>.  </p>\n\n<p>The exact same argument could be made for <code>all</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 71337,
                        "reputation": 26512,
                        "user_id": 206417,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/448da181fc6df1794b855848b84f0be9?s=256&d=identicon&r=PG",
                        "display_name": "Dave Kirby",
                        "link": "https://stackoverflow.com/users/206417/dave-kirby"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1360157995,
                    "creation_date": 1360157995,
                    "answer_id": 14730513,
                    "question_id": 14730046,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It HAS to short circuit, since it could be given an unbound iterable.  If it did not short circuit then this would never terminate:</p>\n\n<pre><code>any(x == 10 for x in itertools.count())\n</code></pre>\n"
                }
            ]
        },
        {
            "6800193": [
                {
                    "owner": {
                        "account_id": 8533842,
                        "reputation": 1,
                        "user_id": 8161253,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/18e3d65d86a51751e5355fd3770889f7?s=256&d=identicon&r=PG",
                        "display_name": "user8161253",
                        "link": "https://stackoverflow.com/users/8161253/user8161253"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1726927468,
                    "last_edit_date": 1726927468,
                    "creation_date": 1726907799,
                    "answer_id": 79009110,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3.5 added <a href=\"https://docs.python.org/library/math.html#math.gcd\" rel=\"nofollow noreferrer\">a <code>gcd()</code> function</a> in the standard <code>math</code> module:</p>\n<blockquote>\n<p><code>math.<strong>gcd</strong>(<em>*integers</em>)</code></p>\n<p>Return the greatest common divisor of the specified integer arguments. If any of the arguments is nonzero, then the returned value is the largest positive integer that is a divisor of all arguments. If all arguments are zero, then the returned value is <code>0</code>. <code>gcd()</code> without arguments returns <code>0</code>.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 234440,
                        "reputation": 176300,
                        "user_id": 500584,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=256&d=identicon&r=PG",
                        "display_name": "agf",
                        "link": "https://stackoverflow.com/users/500584/agf"
                    },
                    "is_accepted": true,
                    "score": 325,
                    "last_activity_date": 1725737174,
                    "last_edit_date": 1725737174,
                    "creation_date": 1311422672,
                    "answer_id": 6800214,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre class=\"lang-py prettyprint-override\"><code>from functools import reduce\n\ndef factors(n):\n    return set(reduce(\n        list.__add__,\n        ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n</code></pre>\n<p>This will return all of the factors, very quickly, of a number <code>n</code>.</p>\n<p>Why square root as the upper limit?</p>\n<p><code>sqrt(x) * sqrt(x) = x</code>. So if the two factors are the same, they're both the square root. If you make one factor bigger, you have to make the other factor smaller. This means that one of the two will always be less than or equal to <code>sqrt(x)</code>, so you only have to search up to that point to find one of the two matching factors. You can then use <code>x // fac1</code> to get <code>fac2</code>.</p>\n<p>The <code>reduce(list.__add__, ...)</code> is taking the little lists of <code>[fac1, fac2]</code> and joining them together in one long list.</p>\n<p>The <code>[i, n//i] for i in range(1, int(sqrt(n)) + 1) if n % i == 0</code> returns a pair of factors if the remainder when you divide <code>n</code> by the smaller one is zero (it doesn't need to check the larger one too; it just gets that by dividing <code>n</code> by the smaller one.)</p>\n<p>The <code>set(...)</code> on the outside is getting rid of duplicates, which only happens for perfect squares. For <code>n = 4</code>, this will return <code>2</code> twice, so <code>set</code> gets rid of one of them.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 29122545,
                        "reputation": 71,
                        "user_id": 22309662,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/88d379b15413084395b7222e62f098e2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Markus Hittmeir",
                        "link": "https://stackoverflow.com/users/22309662/markus-hittmeir"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1690724873,
                    "last_edit_date": 1690724873,
                    "creation_date": 1690724816,
                    "answer_id": 76798029,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have recently developed a new approach for integer factorization, called Smooth Subsum Search (SSS). Here is my implementation in Python: <a href=\"https://github.com/sbaresearch/smoothsubsumsearch\" rel=\"noreferrer\">https://github.com/sbaresearch/smoothsubsumsearch</a></p>\n<p>It can factor 30-digit numbers in around 0.2 seconds, 40-digit numbers in around 2 seconds, 50-digit numbers in around 30 seconds, 60-digit numbers in around 200 seconds and 70-digit numbers in around 3000 seconds. Compared to the Self-Initializing Quadratic Sieve implementation in sympy, which is the most efficient Quadratic Sieve implementation in Python that I could find, it runs around 5 to 7 times faster. SSS is described in great detail in: <a href=\"https://arxiv.org/abs/2301.10529\" rel=\"noreferrer\">https://arxiv.org/abs/2301.10529</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 219819,
                        "reputation": 2764,
                        "user_id": 476920,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/6b29d0d4a6e20e457481c8dc4f250b98?s=256&d=identicon&r=PG",
                        "display_name": "xperroni",
                        "link": "https://stackoverflow.com/users/476920/xperroni"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1680021011,
                    "last_edit_date": 1680021011,
                    "creation_date": 1675439817,
                    "answer_id": 75338153,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm a little surprised I couldn't find a simple implementation for integer prime factorization in the form <code>(p1 ** e1) * (p2  ** e2) ...</code>, so I decided to write my own.</p>\n<pre><code>from collections import defaultdict\nfrom itertools import count\n\ndef factorize(n):\n    factors = defaultdict(int)\n    for i in count(2):\n        while n % i == 0:\n            factors[i] += 1\n            n /= i\n\n        if n == 1:\n            return factors\n</code></pre>\n<p>This function returns a dictionary where the keys are the prime factors, and the values are the exponents. So for example:</p>\n<pre><code>&gt;&gt;&gt; factorize(608)\ndefaultdict(&lt;class 'int'&gt;, {2: 5, 19: 1})\n&gt;&gt;&gt; factorize(1152)\ndefaultdict(&lt;class 'int'&gt;, {2: 7, 3: 2})\n&gt;&gt;&gt; factorize(1088)\ndefaultdict(&lt;class 'int'&gt;, {2: 6, 17: 1})\n</code></pre>\n<p>This is obviously not the most efficient implementation \u2014 for one it iterates over the whole set of natural numbers, instead of going straight for the primes \u2014 but it's good enough for relatively small values, and simple enough that it can be easily understood.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7255930,
                        "reputation": 73,
                        "user_id": 5534582,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Whmvm.png?s=256",
                        "display_name": "pythonic_love",
                        "link": "https://stackoverflow.com/users/5534582/pythonic-love"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1658760641,
                    "creation_date": 1658760641,
                    "answer_id": 73111223,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Considering the number is positive integer, you may use this approach:</p>\n<pre><code>number = int(input(&quot;Enter a positive number to find factors: &quot;))\nfactor = [num for num in range(1,number+1) if number % num == 0]\nfor fac in factor: print(f&quot;{fac} is a factor of {number}&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16508445,
                        "reputation": 56,
                        "user_id": 11927887,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/bSImF.jpg?s=256",
                        "display_name": "Marcus",
                        "link": "https://stackoverflow.com/users/11927887/marcus"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1643625660,
                    "creation_date": 1643625660,
                    "answer_id": 70924583,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>While the question says Python (2.7), people may be interested in this simple solution using Numpy.</p>\n<pre><code>import numpy as np\n\nt=np.arange(2,n,1)\nt[n%t==0]\n</code></pre>\n<p>This will not return <code>1</code> nor the number itself <code>n</code>. So it will return an empty array if <code>n</code> is prime.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15668485,
                        "reputation": 39,
                        "user_id": 11305661,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-6BAFgCY67lA/AAAAAAAAAAI/AAAAAAAAEn8/3XgQKCxKUN4/photo.jpg?sz=256",
                        "display_name": "Santosh Magadum",
                        "link": "https://stackoverflow.com/users/11305661/santosh-magadum"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1639149061,
                    "creation_date": 1639149061,
                    "answer_id": 70306570,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>We can use the following lambda function,</p>\n<pre><code>factor = lambda x:[(ele,x/ele) for ele in range(1,x//2+1) if x%ele==0 ]\n</code></pre>\n<p>factor(10)</p>\n<p>output: [(1, 10.0), (2, 5.0), (5, 2.0)]</p>\n<p>This function returns all the factors of the given number in list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19984334,
                        "reputation": 21,
                        "user_id": 14646762,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4761528a698bf608d44a500f2e13b62d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Kashvi",
                        "link": "https://stackoverflow.com/users/14646762/kashvi"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1638277783,
                    "last_edit_date": 1638277783,
                    "creation_date": 1625493820,
                    "answer_id": 68257486,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you don't want to use any libraries, then I think this is the easiest way to do it:</p>\n<pre><code>def factors(n):\n    l = [] # empty list\n    # appending the factors in the list\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return l\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8401961,
                        "reputation": 31,
                        "user_id": 6306808,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10201920443769238/picture?type=large",
                        "display_name": "Zander Unabia",
                        "link": "https://stackoverflow.com/users/6306808/zander-unabia"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1625560865,
                    "creation_date": 1625560865,
                    "answer_id": 68267267,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I found a simple solution using cypari library in python.\nHere's <a href=\"https://pypi.org/project/cypari/\" rel=\"nofollow noreferrer\">a link</a>!</p>\n<pre><code>import cypari\ndef get_divisors(n):\n   divisors = cypari.pari('divisors({})'.format(n))\n   return divisors\nprint(get_divisors(24))\n</code></pre>\n<p>output</p>\n<pre><code>[1, 2, 3, 4, 6, 8, 12, 24]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4974350,
                        "reputation": 4213,
                        "user_id": 4001177,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/TEikv.jpg?s=256",
                        "display_name": "ListenSoftware Louise Ai Agent",
                        "link": "https://stackoverflow.com/users/4001177/listensoftware-louise-ai-agent"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1622837060,
                    "creation_date": 1622837060,
                    "answer_id": 67843360,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>loop until you find a duplicate in x or v of the tuple where x is the denominator and v is the resultant.</p>\n<pre><code>number=30\ntuple_list=[]\nfor i in np.arange(1,number):\n    if number%i==0:\n         other=int(number/i)\n         if any([(x,v) for (x,v) in tuple_list if (i==x) or (i==v)])==True:\n             break\n         tuple_list.append((i,other))\n    \n flattened = [item for sublist in tuple_list for item in sublist]              \n print(sorted(flattened))\n</code></pre>\n<p>output</p>\n<pre><code> [1, 2, 3, 5, 6, 10, 15, 30]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 443655,
                        "reputation": 7821,
                        "user_id": 835002,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ozD8t.png?s=256",
                        "display_name": "Steinar Lima",
                        "link": "https://stackoverflow.com/users/835002/steinar-lima"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1620964942,
                    "last_edit_date": 1620964942,
                    "creation_date": 1382659024,
                    "answer_id": 19578818,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The solution presented by @agf is great, but one can achieve ~50% faster run time for an arbitrary <strong>odd</strong> number by checking for parity. As the factors of an odd number always are odd themselves, it is not necessary to check these when dealing with odd numbers.</p>\n<p>I've just started solving <a href=\"http://en.wikipedia.org/wiki/Project_Euler\" rel=\"noreferrer\">Project Euler</a> puzzles myself. In some problems, a divisor check is called inside two nested <code>for</code> loops, and the performance of this function is thus essential.</p>\n<p>Combining this fact with agf's excellent solution, I've ended up with this function:</p>\n<pre><code>from functools import reduce\nfrom math import sqrt\ndef factors(n):\n        step = 2 if n%2 else 1\n        return set(reduce(list.__add__,\n                    ([i, n//i] for i in range(1, int(sqrt(n))+1, step) if n % i == 0)))\n</code></pre>\n<p>However, on small numbers (~ &lt; 100), the extra overhead from this alteration may cause the function to take longer.</p>\n<p>I ran some tests in order to check the speed. Below is the code used. To produce the different plots, I altered the <code>X = range(1,100,1)</code> accordingly.</p>\n<pre><code>import timeit\nfrom math import sqrt\nfrom matplotlib.pyplot import plot, legend, show\n\ndef factors_1(n):\n    step = 2 if n%2 else 1\n    return set(reduce(list.__add__,\n                ([i, n//i] for i in range(1, int(sqrt(n))+1, step) if n % i == 0)))\n\ndef factors_2(n):\n    return set(reduce(list.__add__,\n                ([i, n//i] for i in range(1, int(sqrt(n)) + 1) if n % i == 0)))\n\nX = range(1,100000,1000)\nY = []\nfor i in X:\n    f_1 = timeit.timeit('factors_1({})'.format(i), setup='from __main__ import factors_1', number=10000)\n    f_2 = timeit.timeit('factors_2({})'.format(i), setup='from __main__ import factors_2', number=10000)\n    Y.append(f_1/f_2)\nplot(X,Y, label='Running time with/without parity check')\nlegend()\nshow()\n</code></pre>\n<p><strong>X = range(1,100,1)</strong>\n<img src=\"https://i.sstatic.net/RLYZK.png\" alt=\"X = range(1,100,1)\" /></p>\n<p>No significant difference here, but with bigger numbers, the advantage is obvious:</p>\n<p><strong>X = range(1,100000,1000) (only odd numbers)</strong>\n<img src=\"https://i.sstatic.net/5NwME.png\" alt=\"X = range(1,100000,1000) (only odd numbers)\" /></p>\n<p><strong>X = range(2,100000,100) (only even numbers)</strong>\n<img src=\"https://i.sstatic.net/VSrxZ.png\" alt=\"X = range(2,100000,100) (only even numbers)\" /></p>\n<p><strong>X = range(1,100000,1001) (alternating parity)</strong>\n<img src=\"https://i.sstatic.net/5h8lJ.png\" alt=\"X = range(1,100000,1001) (alternating parity)\" /></p>\n"
                },
                {
                    "owner": {
                        "account_id": 11353364,
                        "reputation": 1800,
                        "user_id": 8323650,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DHKJ7.jpg?s=256",
                        "display_name": "GooDeeJAY",
                        "link": "https://stackoverflow.com/users/8323650/goodeejay"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1557731379,
                    "creation_date": 1557731379,
                    "answer_id": 56107309,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest way of finding factors of a number:</p>\n\n<pre><code>def factors(x):\n    return [i for i in range(1,x+1) if x%i==0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14845541,
                        "reputation": 11,
                        "user_id": 10720960,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-jv6WTdr5O6I/AAAAAAAAAAI/AAAAAAAAds0/XVye1Kyp5b0/photo.jpg?sz=256",
                        "display_name": "Tangang Atanga",
                        "link": "https://stackoverflow.com/users/10720960/tangang-atanga"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1544296139,
                    "creation_date": 1544296139,
                    "answer_id": 53685976,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code> import math\n\n    '''\n    I applied finding prime factorization to solve this. (Trial Division)\n    It's not complicated\n    '''\n\n\n    def generate_factors(n):\n        lower_bound_check = int(math.sqrt(n))  # determine lowest bound divisor range [16 = 4]\n        factors = set()  # store factors\n        for divisors in range(1, lower_bound_check + 1):  # loop [1 .. 4]\n            if n % divisors == 0:\n                factors.add(divisors)  # lower bound divisor is found 16 [ 1, 2, 4]\n                factors.add(n // divisors)  # get upper divisor from lower [ 16 / 1 = 16, 16 / 2 = 8, 16 / 4 = 4]\n        return factors  # [1, 2, 4, 8 16]\n\n\n    print(generate_factors(12)) # {1, 2, 3, 4, 6, 12} -&gt; pycharm output\n\n Pierre Vriens hopefully this makes more sense. this is an O(nlogn) solution. \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11827441,
                        "reputation": 571,
                        "user_id": 8655035,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e8a5aa46a3535ef9ce195b0ff8707972?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "plnnvkv",
                        "link": "https://stackoverflow.com/users/8655035/plnnvkv"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1544177138,
                    "last_edit_date": 1544177138,
                    "creation_date": 1544176241,
                    "answer_id": 53667032,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>your max factor is not more than your number, so, let's say</p>\n\n<pre><code>def factors(n):\n    factors = []\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            factors.append (i)\n    factors.append(n)\n\n    return factors\n</code></pre>\n\n<p>voil\u00e1!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11652102,
                        "reputation": 87,
                        "user_id": 8533076,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/02bf5d34db102765db883acf62bf99b7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Benedikt Vilji Magn&#250;sson",
                        "link": "https://stackoverflow.com/users/8533076/benedikt-vilji-magn%c3%basson"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1534848450,
                    "creation_date": 1534848450,
                    "answer_id": 51946984,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was pretty surprised when I saw this question that no one used numpy even when numpy is <strong>way faster</strong> than python loops. By implementing @agf's solution with numpy and it turned out at average <strong>8x faster</strong>.\nI belive that if you implemented some of the other solutions in numpy you could get amazing times.</p>\n\n<p>Here is my function:</p>\n\n<pre><code>import numpy as np\ndef b(n):\n    r = np.arange(1, int(n ** 0.5) + 1)\n    x = r[np.mod(n, r) == 0]\n    return set(np.concatenate((x, n / x), axis=None))   \n</code></pre>\n\n<p>Notice that the numbers of the x-axis are not the input to the functions. The input to the functions is 2 to the the number on the x-axis minus 1.\nSo where ten is the input would be 2**10-1 = 1023  </p>\n\n<p><a href=\"https://i.sstatic.net/ElB6L.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/ElB6L.png\" alt=\"Performance test results of using numpy instead of for loops.\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 13713095,
                        "reputation": 1,
                        "user_id": 9894860,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/yjDlW.jpg?s=256",
                        "display_name": "DeDude",
                        "link": "https://stackoverflow.com/users/9894860/dedude"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1533974801,
                    "creation_date": 1533974801,
                    "answer_id": 51797774,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>I reckon this is the simplest way to do that:</strong></p>\n\n<pre><code>    x = 23\n\n    i = 1\n    while i &lt;= x:\n      if x % i == 0:\n        print(\"factor: %s\"% i)\n      i += 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1433328,
                        "reputation": 11696,
                        "user_id": 1355221,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bfc365d660f7ef400090b891daf117fe?s=256&d=identicon&r=PG",
                        "display_name": "dansalmo",
                        "link": "https://stackoverflow.com/users/1355221/dansalmo"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1515448490,
                    "last_edit_date": 1515448490,
                    "creation_date": 1383878719,
                    "answer_id": 19850705,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is another alternate without reduce that performs well with large numbers. It uses <code>sum</code> to flatten the list.</p>\n\n<pre><code>def factors(n):\n    return set(sum([[i, n//i] for i in xrange(1, int(n**0.5)+1) if not n%i], []))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11880916,
                        "reputation": 411,
                        "user_id": 8694657,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a5449444a5d764a9b7b1f223565754be?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Bruno Astrolino",
                        "link": "https://stackoverflow.com/users/8694657/bruno-astrolino"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1507509208,
                    "last_edit_date": 1507509208,
                    "creation_date": 1507508526,
                    "answer_id": 46637332,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For n up to 10**16 (maybe even a bit more), here is a fast pure Python 3.6 solution,</p>\n\n<pre><code>from itertools import compress\n\ndef primes(n):\n    \"\"\" Returns  a list of primes &lt; n for n &gt; 2 \"\"\"\n    sieve = bytearray([True]) * (n//2)\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i//2]:\n            sieve[i*i//2::i] = bytearray((n-i*i-1)//(2*i)+1)\n    return [2,*compress(range(3,n,2), sieve[1:])]\n\ndef factorization(n):\n    \"\"\" Returns a list of the prime factorization of n \"\"\"\n    pf = []\n    for p in primeslist:\n      if p*p &gt; n : break\n      count = 0\n      while not n % p:\n        n //= p\n        count += 1\n      if count &gt; 0: pf.append((p, count))\n    if n &gt; 1: pf.append((n, 1))\n    return pf\n\ndef divisors(n):\n    \"\"\" Returns an unsorted list of the divisors of n \"\"\"\n    divs = [1]\n    for p, e in factorization(n):\n        divs += [x*p**k for k in range(1,e+1) for x in divs]\n    return divs\n\nn = 600851475143\nprimeslist = primes(int(n**0.5)+1) \nprint(divisors(n))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1164345,
                        "reputation": 23463,
                        "user_id": 1143274,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/bf11af111cab6e513d68e5e30762deb5?s=256&d=identicon&r=PG",
                        "display_name": "Evgeni Sergeev",
                        "link": "https://stackoverflow.com/users/1143274/evgeni-sergeev"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1495001679,
                    "last_edit_date": 1495001679,
                    "creation_date": 1495000028,
                    "answer_id": 44016550,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is an industry-strength algorithm in SymPy called <a href=\"http://docs.sympy.org/latest/modules/ntheory.html?highlight=factorint#sympy.ntheory.factor_.factorint\" rel=\"noreferrer\">factorint</a>:</p>\n\n<pre><code>&gt;&gt;&gt; from sympy import factorint\n&gt;&gt;&gt; factorint(2**70 + 3**80) \n{5: 2,\n 41: 1,\n 101: 1,\n 181: 1,\n 821: 1,\n 1597: 1,\n 5393: 1,\n 27188665321L: 1,\n 41030818561L: 1}\n</code></pre>\n\n<p>This took under a minute. It switches among a cocktail of methods. See the documentation linked above.</p>\n\n<p>Given all the prime factors, all other factors can be built easily.</p>\n\n<hr>\n\n<p>Note that even if the accepted answer was allowed to run for long enough (i.e. an eternity) to factor the above number, for some large numbers it will fail, such the following example. This is due to the sloppy <code>int(n**0.5)</code>. For example, when <code>n = 10000000000000079**2</code>, we have </p>\n\n<pre><code>&gt;&gt;&gt; int(n**0.5)\n10000000000000078L\n</code></pre>\n\n<p>Since <a href=\"http://www.javascripter.net/math/calculators/primefactorscalculator.htm\" rel=\"noreferrer\">10000000000000079 is a prime</a>, the accepted answer's algorithm will never find this factor. Note that it's not just an off-by-one; for larger numbers it will be off by more. For this reason it's better to avoid floating-point numbers in algorithms of this sort.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6386201,
                        "reputation": 46729,
                        "user_id": 4954037,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/YOM4r.jpg?s=256",
                        "display_name": "hiro protagonist",
                        "link": "https://stackoverflow.com/users/4954037/hiro-protagonist"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1494999231,
                    "last_edit_date": 1494999231,
                    "creation_date": 1494690223,
                    "answer_id": 43954988,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>a potentially more efficient algorithm than the ones presented here already (especially if there are small prime factons in <code>n</code>). the trick here is to <strong>adjust the limit</strong> up to which trial division is needed every time prime factors are found:</p>\n\n<pre><code>def factors(n):\n    '''\n    return prime factors and multiplicity of n\n    n = p0^e0 * p1^e1 * ... * pk^ek encoded as\n    res = [(p0, e0), (p1, e1), ..., (pk, ek)]\n    '''\n\n    res = []\n\n    # get rid of all the factors of 2 using bit shifts\n    mult = 0\n    while not n &amp; 1:\n        mult += 1\n        n &gt;&gt;= 1\n    if mult != 0:\n        res.append((2, mult))\n\n    limit = round(sqrt(n))\n    test_prime = 3\n    while test_prime &lt;= limit:\n        mult = 0\n        while n % test_prime == 0:\n            mult += 1\n            n //= test_prime\n        if mult != 0:\n            res.append((test_prime, mult))\n            if n == 1:              # only useful if ek &gt;= 3 (ek: multiplicity\n                break               # of the last prime) \n            limit = round(sqrt(n))  # adjust the limit\n        test_prime += 2             # will often not be prime...\n    if n != 1:\n        res.append((n, 1))\n    return res\n</code></pre>\n\n<p>this is of course still trial division and nothing more fancy. and therefore still very limited in its efficiency (especially for big numbers without small divisors).</p>\n\n<p>this is python3; the division <code>//</code> should be the only thing you need to adapt for python 2 (add <code>from __future__ import division</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3393932,
                        "reputation": 7303,
                        "user_id": 5539715,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://lh6.googleusercontent.com/-qcLTPwh675Y/AAAAAAAAAAI/AAAAAAAACKc/Xgrv1h5ejAw/photo.jpg?sz=256",
                        "display_name": "Nic Scozzaro",
                        "link": "https://stackoverflow.com/users/5539715/nic-scozzaro"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1489339174,
                    "creation_date": 1489339174,
                    "answer_id": 42750598,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think for readability and speed @oxrock's solution is the best, so here is the code rewritten for python 3+:</p>\n\n<pre><code>def num_factors(n):\n    results = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0: results.update([i,int(n/i)])\n    return results\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 583059,
                        "reputation": 2634,
                        "user_id": 252723,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/01ca5efa94588ff009f9f67c7d41ba7d?s=256&d=identicon&r=PG",
                        "display_name": "Julian",
                        "link": "https://stackoverflow.com/users/252723/julian"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1475269272,
                    "last_edit_date": 1475269272,
                    "creation_date": 1470598978,
                    "answer_id": 38817866,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's an alternative to @agf's solution which implements the same algorithm in a more pythonic style:</p>\n\n<pre><code>def factors(n):\n    return set(\n        factor for i in range(1, int(n**0.5) + 1) if n % i == 0\n        for factor in (i, n//i)\n    )\n</code></pre>\n\n<p>This solution works in both Python 2 and Python 3 with no imports and is much more readable. I haven't tested the performance of this approach, but asymptotically it should be the same, and if performance is a serious concern, neither solution is optimal.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2441006,
                        "reputation": 9,
                        "user_id": 2129550,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/5a56426aa40490d8563229bc62f8bd51?s=256&d=identicon&r=PG",
                        "display_name": "Jason Schorn",
                        "link": "https://stackoverflow.com/users/2129550/jason-schorn"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1475268960,
                    "last_edit_date": 1475268960,
                    "creation_date": 1362337988,
                    "answer_id": 15189663,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use something as simple as the following list comprehension, noting that we do not need to test 1 and the number we are trying to find:</p>\n\n<pre><code>def factors(n):\n    return [x for x in range(2, n//2+1) if n%x == 0]\n</code></pre>\n\n<p>In reference to the use of square root, say we want to find factors of 10.  The integer portion of the <code>sqrt(10) = 4</code> therefore <code>range(1, int(sqrt(10))) = [1, 2, 3, 4]</code> and testing up to 4 clearly misses 5.</p>\n\n<p>Unless I am missing something I would suggest, if you must do it this way, using <code>int(ceil(sqrt(x)))</code>.  Of course this produces a lot of unnecessary calls to functions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1703399,
                        "reputation": 694,
                        "user_id": 1562965,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b324123f24ea1e83abc3f39881ea97a9?s=256&d=identicon&r=PG",
                        "display_name": "mbowden",
                        "link": "https://stackoverflow.com/users/1562965/mbowden"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1475268867,
                    "last_edit_date": 1475268867,
                    "creation_date": 1359113468,
                    "answer_id": 14520938,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Be sure to grab the number larger than <code>sqrt(number_to_factor)</code> for unusual numbers like 99 which has 3*3*11 and <code>floor sqrt(99)+1 == 10</code>.</p>\n\n<pre><code>import math\n\ndef factor(x):\n  if x == 0 or x == 1:\n    return None\n  res = []\n  for i in range(2,int(math.floor(math.sqrt(x)+1))):\n    while x % i == 0:\n      x /= i\n      res.append(i)\n  if x != 1: # Unusual numbers\n    res.append(x)\n  return res\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4071886,
                        "reputation": 641,
                        "user_id": 3344627,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/9c7795c28e710cf085837da3cd8068db?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "oxrock",
                        "link": "https://stackoverflow.com/users/3344627/oxrock"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1459374973,
                    "last_edit_date": 1459374973,
                    "creation_date": 1416531462,
                    "answer_id": 27052454,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've tried most of these wonderful answers with timeit to compare their efficiency versus my simple function and yet I constantly see mine outperform those listed here. I figured I'd share it and see what you all think.</p>\n\n<pre><code>def factors(n):\n    results = set()\n    for i in xrange(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            results.add(i)\n            results.add(int(n/i))\n    return results\n</code></pre>\n\n<p>As it's written you'll have to import math to test, but replacing math.sqrt(n) with n**.5 should work just as well. I don't bother wasting time checking for duplicates because duplicates can't exist in a set regardless.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6866711,
                        "reputation": 11,
                        "user_id": 5278872,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f57834641adb172d66cc2a123f85a562?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "HamsterBoo",
                        "link": "https://stackoverflow.com/users/5278872/hamsterboo"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1441228400,
                    "last_edit_date": 1441228400,
                    "creation_date": 1441224986,
                    "answer_id": 32362335,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using <code>set(...)</code> makes the code slightly slower, and is only really necessary for when you check the square root. Here's my version:</p>\n\n<pre><code>def factors(num):\n    if (num == 1 or num == 0):\n        return []\n    f = [1]\n    sq = int(math.sqrt(num))\n    for i in range(2, sq):\n        if num % i == 0:\n            f.append(i)\n            f.append(num/i)\n    if sq &gt; 1 and num % sq == 0:\n        f.append(sq)\n        if sq*sq != num:\n            f.append(num/sq)\n    return f\n</code></pre>\n\n<p>The <code>if sq*sq != num:</code> condition is necessary for numbers like 12, where the square root is not an integer, but the floor of the square root is a factor.</p>\n\n<p>Note that this version doesn't return the number itself, but that is an easy fix if you want it. The output also isn't sorted.</p>\n\n<p>I timed it running 10000 times on all numbers 1-200 and 100 times on all numbers 1-5000. It outperforms all the other versions I tested, including dansalmo's, Jason Schorn's, oxrock's, agf's, steveha's, and eryksun's solutions, though oxrock's is by far the closest.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 53847,
                        "reputation": 2063,
                        "user_id": 161012,
                        "user_type": "registered",
                        "accept_rate": 29,
                        "profile_image": "https://www.gravatar.com/avatar/6375cd82807e0037be29c07aeadbf91c?s=256&d=identicon&r=PG",
                        "display_name": "Pierre Thibault",
                        "link": "https://stackoverflow.com/users/161012/pierre-thibault"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1424413338,
                    "creation_date": 1424413338,
                    "answer_id": 28622810,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is an example if you want to use the primes number to go a lot faster. These lists are easy to find on the internet. I added comments in the code.</p>\n\n<pre><code># http://primes.utm.edu/lists/small/10000.txt\n# First 10000 primes\n\n_PRIMES = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, \n        31, 37, 41, 43, 47, 53, 59, 61, 67, 71, \n        73, 79, 83, 89, 97, 101, 103, 107, 109, 113, \n        127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n        179, 181, 191, 193, 197, 199, 211, 223, 227, 229, \n        233, 239, 241, 251, 257, 263, 269, 271, 277, 281, \n        283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, \n        419, 421, 431, 433, 439, 443, 449, 457, 461, 463, \n        467, 479, 487, 491, 499, 503, 509, 521, 523, 541, \n        547, 557, 563, 569, 571, 577, 587, 593, 599, 601, \n        607, 613, 617, 619, 631, 641, 643, 647, 653, 659, \n        661, 673, 677, 683, 691, 701, 709, 719, 727, 733, \n        739, 743, 751, 757, 761, 769, 773, 787, 797, 809, \n        811, 821, 823, 827, 829, 839, 853, 857, 859, 863, \n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, \n        947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, \n# Mising a lot of primes for the purpose of the example\n)\n\n\nfrom bisect import bisect_left as _bisect_left\nfrom math import sqrt as _sqrt\n\n\ndef get_factors(n):\n    assert isinstance(n, int), \"n must be an integer.\"\n    assert n &gt; 0, \"n must be greather than zero.\"\n    limit = pow(_PRIMES[-1], 2)\n    assert n &lt;= limit, \"n is greather then the limit of {0}\".format(limit)\n    result = set((1, n))\n    root = int(_sqrt(n))\n    primes = [t for t in get_primes_smaller_than(root + 1) if not n % t]\n    result.update(primes)  # Add all the primes factors less or equal to root square\n    for t in primes:\n        result.update(get_factors(n/t))  # Add all the factors associted for the primes by using the same process\n    return sorted(result)\n\n\ndef get_primes_smaller_than(n):\n    return _PRIMES[:_bisect_left(_PRIMES, n)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2037179,
                        "reputation": 11312,
                        "user_id": 1819254,
                        "user_type": "registered",
                        "accept_rate": 66,
                        "profile_image": "https://i.sstatic.net/27Gbn.png?s=256",
                        "display_name": "Pranjal Mittal",
                        "link": "https://stackoverflow.com/users/1819254/pranjal-mittal"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1367083289,
                    "last_edit_date": 1367083289,
                    "creation_date": 1356142766,
                    "answer_id": 13999509,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Further improvement to afg &amp; eryksun's solution.\nThe following piece of code returns a sorted list of all the factors without changing run time asymptotic complexity:</p>\n\n<pre><code>    def factors(n):    \n        l1, l2 = [], []\n        for i in range(1, int(n ** 0.5) + 1):\n            q,r = n//i, n%i     # Alter: divmod() fn can be used.\n            if r == 0:\n                l1.append(i) \n                l2.append(q)    # q's obtained are decreasing.\n        if l1[-1] == l2[-1]:    # To avoid duplication of the possible factor sqrt(n)\n            l1.pop()\n        l2.reverse()\n        return l1 + l2\n</code></pre>\n\n<p>Idea: Instead of using the list.sort() function to get a sorted list which gives nlog(n) complexity; It is much faster to use list.reverse() on l2 which takes O(n) complexity. (That's how python is made.) \nAfter l2.reverse(), l2 may be appended to l1 to get the sorted list of factors.</p>\n\n<p>Notice, l1 contains <b>i</b>-s which are increasing. l2 contains <b>q</b>-s which are decreasing. Thats the reason behind using the above idea.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76525,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1340178554,
                    "last_edit_date": 1340178554,
                    "creation_date": 1312275428,
                    "answer_id": 6909532,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>agf's answer is really quite cool.  I wanted to see if I could rewrite it to avoid using <code>reduce()</code>.  This is what I came up with:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import itertools\nflatten_iter = itertools.chain.from_iterable\ndef factors(n):\n    return set(flatten_iter((i, n//i) \n                for i in range(1, int(n**0.5)+1) if n % i == 0))\n</code></pre>\n\n<p>I also tried a version that uses tricky generator functions:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def factors(n):\n    return set(x for tup in ([i, n//i] \n                for i in range(1, int(n**0.5)+1) if n % i == 0) for x in tup)\n</code></pre>\n\n<p>I timed it by computing:</p>\n\n<pre><code>start = 10000000\nend = start + 40000\nfor n in range(start, end):\n    factors(n)\n</code></pre>\n\n<p>I ran it once to let Python compile it, then ran it under the time(1) command three times and kept the best time.</p>\n\n<ul>\n<li>reduce version: 11.58 seconds</li>\n<li>itertools version: 11.49 seconds</li>\n<li>tricky version: 11.12 seconds</li>\n</ul>\n\n<p>Note that the itertools version is building a tuple and passing it to flatten_iter().  If I change the code to build a list instead, it slows down slightly:</p>\n\n<ul>\n<li>iterools (list) version: 11.62 seconds</li>\n</ul>\n\n<p>I believe that the tricky generator functions version is the fastest possible in Python.  But it's not really much faster than the reduce version, roughly 4% faster based on my measurements.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 71068,
                        "reputation": 34170,
                        "user_id": 205580,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=256&d=identicon&r=PG",
                        "display_name": "Eryk Sun",
                        "link": "https://stackoverflow.com/users/205580/eryk-sun"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1311426610,
                    "creation_date": 1311426610,
                    "answer_id": 6800586,
                    "question_id": 6800193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>An alternative approach to agf's answer:</p>\n\n<pre><code>def factors(n):    \n    result = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:\n            result |= {i, div}\n    return result\n</code></pre>\n"
                }
            ]
        },
        {
            "22414152": [
                {
                    "owner": {
                        "account_id": 8570956,
                        "reputation": 1583,
                        "user_id": 6421877,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/06b19de7bffb116c57404f1304164c2f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "baz",
                        "link": "https://stackoverflow.com/users/6421877/baz"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1596269532,
                    "creation_date": 1596269532,
                    "answer_id": 63203141,
                    "question_id": 22414152,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you don't mind <code>None</code>, you can use:</p>\n<pre><code>a = np.empty(3, dtype=object)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6776801,
                        "reputation": 26846,
                        "user_id": 5218354,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://lh4.googleusercontent.com/-NEO9rZKeffY/AAAAAAAAAAI/AAAAAAAAAKc/9IttO1jUOr4/photo.jpg=k-s256",
                        "display_name": "norok2",
                        "link": "https://stackoverflow.com/users/5218354/norok2"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1506342620,
                    "creation_date": 1506342620,
                    "answer_id": 46405309,
                    "question_id": 22414152,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just for future reference, the multiplication by <code>np.nan</code> only works because of the mathematical properties of <code>np.nan</code>.\nFor a generic value <code>N</code>, one would need to use <code>np.ones() * N</code> mimicking the accepted answer, however, speed-wise, this is not a terribly good choice.</p>\n\n<p>Best choice would be <code>np.full()</code> as already pointed out, and, if that is not available for you, <code>np.zeros() + N</code> seems to be a better choice than <code>np.ones() * N</code>, while <code>np.empty() + N</code> or <code>np.empty() * N</code> are simply not suitable. Note that <code>np.zeros() + N</code> will also work when <code>N</code> is <code>np.nan</code>.</p>\n\n<pre><code>%timeit x = np.full((1000, 1000, 10), 432.4)\n8.19 ms \u00b1 97.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n%timeit x = np.zeros((1000, 1000, 10)) + 432.4\n9.86 ms \u00b1 55.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n%timeit x = np.ones((1000, 1000, 10)) * 432.4\n17.3 ms \u00b1 104 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n%timeit x = np.array([432.4] * (1000 * 1000 * 10)).reshape((1000, 1000, 10))\n316 ms \u00b1 37.4 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 909645,
                        "reputation": 18888,
                        "user_id": 943773,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/66a7a506ddac2514578a371a66c8d781?s=256&d=identicon&r=PG",
                        "display_name": "ryanjdillon",
                        "link": "https://stackoverflow.com/users/943773/ryanjdillon"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1484329680,
                    "last_edit_date": 1495541430,
                    "creation_date": 1484329680,
                    "answer_id": 41640530,
                    "question_id": 22414152,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I find this easy to remember:</p>\n\n<pre><code>numpy.array([numpy.nan]*3)\n</code></pre>\n\n<p>Out of curiosity, I timed it, and both <a href=\"https://stackoverflow.com/a/22414429/943773\">@JoshAdel's answer</a> and <a href=\"https://stackoverflow.com/a/22414391/943773\">@shx2's answer</a> are far faster than mine with large arrays.</p>\n\n<pre><code>In [34]: %timeit -n10000 numpy.array([numpy.nan]*10000)\n10000 loops, best of 3: 273 \u00b5s per loop\n\nIn [35]: %timeit -n10000 numpy.empty(10000)* numpy.nan\n10000 loops, best of 3: 6.5 \u00b5s per loop\n\nIn [36]: %timeit -n10000 numpy.full(10000, numpy.nan)\n10000 loops, best of 3: 5.42 \u00b5s per loop\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2398419,
                        "reputation": 64170,
                        "user_id": 2096752,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://i.sstatic.net/B8PLE.jpg?s=256",
                        "display_name": "shx2",
                        "link": "https://stackoverflow.com/users/2096752/shx2"
                    },
                    "is_accepted": true,
                    "score": 31,
                    "last_activity_date": 1394829921,
                    "last_edit_date": 1394829921,
                    "creation_date": 1394826335,
                    "answer_id": 22414391,
                    "question_id": 22414152,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.fill.html\"><code>np.fill</code></a> modifies the array in-place, and returns <code>None</code>. Therefor, if you're assigning the result to a name, it gets a value of <code>None</code>.</p>\n\n<p>An alternative is to use an expression which returns <code>nan</code>, e.g.:</p>\n\n<pre><code>a = np.empty(3) * np.nan\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 167868,
                        "reputation": 68492,
                        "user_id": 392949,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=256&d=identicon&r=PG",
                        "display_name": "JoshAdel",
                        "link": "https://stackoverflow.com/users/392949/joshadel"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1394826450,
                    "creation_date": 1394826450,
                    "answer_id": 22414429,
                    "question_id": 22414152,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could also try:</p>\n\n<pre><code>In [79]: np.full(3, np.nan)\nOut[79]: array([ nan,  nan,  nan])\n</code></pre>\n\n<p>The pertinent doc:</p>\n\n<pre><code>Definition: np.full(shape, fill_value, dtype=None, order='C')\nDocstring:\nReturn a new array of given shape and type, filled with `fill_value`.\n</code></pre>\n\n<p>Although I think this might be only available in numpy 1.8+</p>\n"
                }
            ]
        },
        {
            "4719438": [
                {
                    "owner": {
                        "account_id": 44762,
                        "reputation": 341037,
                        "user_id": 131527,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG",
                        "display_name": "ghostdog74",
                        "link": "https://stackoverflow.com/users/131527/ghostdog74"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1693252363,
                    "last_edit_date": 1693252363,
                    "creation_date": 1295313478,
                    "answer_id": 4719629,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>fileinput</code> to do in-place editing</p>\n<pre class=\"lang-py prettyprint-override\"><code>import fileinput\nfor line in fileinput.FileInput(&quot;myfile&quot;, inplace=1):\n    if line .....: # select which lines you care about\n        print line\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17547182,
                        "reputation": 59,
                        "user_id": 12728202,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0b8a6373bdb89b1bb2b80a6eeae48f26?s=256&d=identicon&r=PG",
                        "display_name": "Saul Han",
                        "link": "https://stackoverflow.com/users/12728202/saul-han"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1670498640,
                    "last_edit_date": 1670498640,
                    "creation_date": 1670058746,
                    "answer_id": 74665357,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I used to have same request, eventually ended up with Jinja templating. Change your text file to below, and a variable lastname, then you can render the template by passing <code>lastname='Meg'</code>, that's the most efficient and quickest way I can think of.</p>\n<pre><code>Dan \n{{ lastname }} \nWarrior \n500 \n1 \n0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 22186410,
                        "reputation": 1,
                        "user_id": 16429251,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gi_jy2AJN0XBbRpPKflsTTJtADuM5eJYA-d8alYRg=k-s256",
                        "display_name": "Priyangshu Ram",
                        "link": "https://stackoverflow.com/users/16429251/priyangshu-ram"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627025342,
                    "creation_date": 1627025342,
                    "answer_id": 68495515,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>writing initial data, print an empty <code>str</code> for updating it to a new data\nhere we insert an empty <code>str</code> in the last line of the code, this code can be used in interative updation, in other words appending data in text<code>.txt</code> file</p>\n<pre><code>with open(&quot;data.txt&quot;, 'w') as f:\n    f.write('first line\\n'\n            'second line\\n'\n            'third line\\n'\n            'fourth line\\n'\n            ' \\n')\n</code></pre>\n<p>updating data in the last line of the text file</p>\n<pre><code>my_file=open('data.txt')\nstring_list = my_file.readlines()\nstring_list[-1] = &quot;Edit the list of strings as desired\\n&quot;\nmy_file = open(&quot;data.txt&quot;, &quot;w&quot;)\nnew_file_contents = &quot;&quot;. join(string_list)\nmy_file. write(new_file_contents)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16934446,
                        "reputation": 2755,
                        "user_id": 12247829,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/s9jYM.png?s=256",
                        "display_name": "Rohit Nishad",
                        "link": "https://stackoverflow.com/users/12247829/rohit-nishad"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1624865881,
                    "last_edit_date": 1624865881,
                    "creation_date": 1599808348,
                    "answer_id": 63842378,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is the easiest way to do this.</p>\n<pre><code>f = open(&quot;file.txt&quot;, &quot;wt&quot;)\nfor line in f:\n    f.write(line.replace('foo', 'bar'))\nf.close()\n</code></pre>\n<p>I hope it will work for you.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19156952,
                        "reputation": 1,
                        "user_id": 13993593,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gjz64eCP58IbhQ9AqnITiYU6xsVJXF9GS9aSu_C=k-s256",
                        "display_name": "Ajay Jaiswal",
                        "link": "https://stackoverflow.com/users/13993593/ajay-jaiswal"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1606585756,
                    "last_edit_date": 1606585756,
                    "creation_date": 1597129470,
                    "answer_id": 63353123,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>#read file lines and edit specific item\n\nfile=open(&quot;pythonmydemo.txt&quot;,'r')\na=file.readlines()\nprint(a[0][6:11])\n\na[0]=a[0][0:5]+' Ericsson\\n'\nprint(a[0])\n\nfile=open(&quot;pythonmydemo.txt&quot;,'w')\nfile.writelines(a)\nfile.close()\nprint(a)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15363847,
                        "reputation": 31,
                        "user_id": 11083944,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f18b5359f0441610e1206b6dc9c084df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Shivam Rai",
                        "link": "https://stackoverflow.com/users/11083944/shivam-rai"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1550582671,
                    "last_edit_date": 1550582671,
                    "creation_date": 1550580253,
                    "answer_id": 54766668,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Suppose I have a file named <code>file_name</code> as following:</p>\n\n<pre><code>this is python\nit is file handling\nthis is editing of line\n</code></pre>\n\n<p>We have to replace line 2 with \"modification is done\":</p>\n\n<pre><code>f=open(\"file_name\",\"r+\")\na=f.readlines()\nfor line in f:\n   if line.startswith(\"rai\"):\n      p=a.index(line)\n#so now we have the position of the line which to be modified\na[p]=\"modification is done\"\nf.seek(0)\nf.truncate() #ersing all data from the file\nf.close()\n#so now we have an empty file and we will write the modified content now in the file\no=open(\"file_name\",\"w\")\nfor i in a:\n   o.write(i)\no.close()\n#now the modification is done in the file\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8301798,
                        "reputation": 152,
                        "user_id": 6240194,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/XEjkb.jpg?s=256",
                        "display_name": "theYnot",
                        "link": "https://stackoverflow.com/users/6240194/theynot"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1490870499,
                    "creation_date": 1490870499,
                    "answer_id": 43115495,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have been practising working on files this evening and realised that I can build on Jochen's answer to provide greater functionality for repeated/multiple use. Unfortunately my answer does not address issue of dealing with large files but does make life easier in smaller files.</p>\n\n<pre><code>with open('filetochange.txt', 'r+') as foo:\n    data = foo.readlines()                  #reads file as list\n    pos = int(input(\"Which position in list to edit? \"))-1  #list position to edit\n    data.insert(pos, \"more foo\"+\"\\n\")           #inserts before item to edit\n    x = data[pos+1]\n    data.remove(x)                      #removes item to edit\n    foo.seek(0)                     #seeks beginning of file\n    for i in data:\n        i.strip()                   #strips \"\\n\" from list items\n        foo.write(str(i))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5376896,
                        "reputation": 778,
                        "user_id": 5014339,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/89914c9f7939db1ea66630dda3dafe3c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Aseem Yadav",
                        "link": "https://stackoverflow.com/users/5014339/aseem-yadav"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1474721593,
                    "creation_date": 1474721593,
                    "answer_id": 39676548,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do it in two ways, choose what suits your requirement:</p>\n\n<p><strong>Method I.)</strong> Replacing using line number. You can use built-in function <code>enumerate()</code> in this case:</p>\n\n<p>First, in <strong>read mode</strong> get all data in a variable</p>\n\n<pre><code>with open(\"your_file.txt\",'r') as f:\n    get_all=f.readlines()\n</code></pre>\n\n<p>Second, write to the file (where <strong>enumerate</strong> comes to action) </p>\n\n<pre><code>with open(\"your_file.txt\",'w') as f:\n    for i,line in enumerate(get_all,1):         ## STARTS THE NUMBERING FROM 1 (by default it begins with 0)    \n        if i == 2:                              ## OVERWRITES line:2\n            f.writelines(\"Mage\\n\")\n        else:\n            f.writelines(line)\n</code></pre>\n\n<p><strong>Method II.)</strong> Using the keyword you want to replace:</p>\n\n<p>Open file in <em>read mode</em> and copy the contents to a list</p>\n\n<pre><code>with open(\"some_file.txt\",\"r\") as f:\n    newline=[]\n    for word in f.readlines():        \n        newline.append(word.replace(\"Warrior\",\"Mage\"))  ## Replace the keyword while you copy.  \n</code></pre>\n\n<p>\"Warrior\" has been replaced by \"Mage\", so write the updated data to the file:</p>\n\n<pre><code>with open(\"some_file.txt\",\"w\") as f:\n    for line in newline:\n        f.writelines(line)\n</code></pre>\n\n<p>This is what the <strong>output</strong> will be in both cases:</p>\n\n<pre><code>Dan                   Dan           \nWarrior   ------&gt;     Mage       \n500                   500           \n1                     1   \n0                     0           \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 264856,
                        "reputation": 27525,
                        "user_id": 551449,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/aa73ded506f1dbec1741ff79856d4073?s=256&d=identicon&r=PG",
                        "display_name": "eyquem",
                        "link": "https://stackoverflow.com/users/551449/eyquem"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1295325996,
                    "creation_date": 1295325996,
                    "answer_id": 4720572,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If your text contains only one individual:</p>\n\n<pre><code>import re\n\n# creation\nwith open('pers.txt','wb') as g:\n    g.write('Dan \\n Warrior \\n 500 \\r\\n 1 \\r 0 ')\n\nwith open('pers.txt','rb') as h:\n    print 'exact content of pers.txt before treatment:\\n',repr(h.read())\nwith open('pers.txt','rU') as h:\n    print '\\nrU-display of pers.txt before treatment:\\n',h.read()\n\n\n# treatment\ndef roplo(file_name,what):\n    patR = re.compile('^([^\\r\\n]+[\\r\\n]+)[^\\r\\n]+')\n    with open(file_name,'rb+') as f:\n        ch = f.read()\n        f.seek(0)\n        f.write(patR.sub('\\\\1'+what,ch))\nroplo('pers.txt','Mage')\n\n\n# after treatment\nwith open('pers.txt','rb') as h:\n    print '\\nexact content of pers.txt after treatment:\\n',repr(h.read())\nwith open('pers.txt','rU') as h:\n    print '\\nrU-display of pers.txt after treatment:\\n',h.read()\n</code></pre>\n\n<p>If your text contains several individuals:</p>\n\n<p>import re</p>\n\n<pre><code># creation\nwith open('pers.txt','wb') as g:\n    g.write('Dan \\n Warrior \\n 500 \\r\\n 1 \\r 0 \\n Jim  \\n  dragonfly\\r300\\r2\\n10\\r\\nSomo\\ncosmonaut\\n490\\r\\n3\\r65')\n\nwith open('pers.txt','rb') as h:\n    print 'exact content of pers.txt before treatment:\\n',repr(h.read())\nwith open('pers.txt','rU') as h:\n    print '\\nrU-display of pers.txt before treatment:\\n',h.read()\n\n\n# treatment\ndef ripli(file_name,who,what):\n    with open(file_name,'rb+') as f:\n        ch = f.read()\n        x,y = re.search('^\\s*'+who+'\\s*[\\r\\n]+([^\\r\\n]+)',ch,re.MULTILINE).span(1)\n        f.seek(x)\n        f.write(what+ch[y:])\nripli('pers.txt','Jim','Wizard')\n\n\n# after treatment\nwith open('pers.txt','rb') as h:\n    print 'exact content of pers.txt after treatment:\\n',repr(h.read())\nwith open('pers.txt','rU') as h:\n    print '\\nrU-display of pers.txt after treatment:\\n',h.read()\n</code></pre>\n\n<p>If the \u201cjob\u201c of an individual was of a constant length in the texte, you could change only the portion of texte corresponding to the \u201cjob\u201c the desired individual:\nthat\u2019s the same idea as senderle\u2019s one.</p>\n\n<p>But according to me, better would be to put the characteristics of individuals in a dictionnary recorded in file with cPickle:</p>\n\n<pre><code>from cPickle import dump, load\n\nwith open('cards','wb') as f:\n    dump({'Dan':['Warrior',500,1,0],'Jim':['dragonfly',300,2,10],'Somo':['cosmonaut',490,3,65]},f)\n\nwith open('cards','rb') as g:\n    id_cards = load(g)\nprint 'id_cards before change==',id_cards\n\nid_cards['Jim'][0] = 'Wizard'\n\nwith open('cards','w') as h:\n    dump(id_cards,h)\n\nwith open('cards') as e:\n    id_cards = load(e)\nprint '\\nid_cards after change==',id_cards\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 215727,
                        "reputation": 6307,
                        "user_id": 470535,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ed4289282ca2bd2a6478c596c5cbd78c?s=256&d=identicon&r=PG",
                        "display_name": "Peter C",
                        "link": "https://stackoverflow.com/users/470535/peter-c"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1295312766,
                    "creation_date": 1295312766,
                    "answer_id": 4719576,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>def replace_line(file_name, line_num, text):\n    lines = open(file_name, 'r').readlines()\n    lines[line_num] = text\n    out = open(file_name, 'w')\n    out.writelines(lines)\n    out.close()\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>replace_line('stats.txt', 0, 'Mage')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 33994,
                        "reputation": 107390,
                        "user_id": 95612,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
                        "display_name": "Jochen Ritzel",
                        "link": "https://stackoverflow.com/users/95612/jochen-ritzel"
                    },
                    "is_accepted": true,
                    "score": 170,
                    "last_activity_date": 1295312573,
                    "creation_date": 1295312573,
                    "answer_id": 4719562,
                    "question_id": 4719438,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You want to do something like this:</p>\n\n<pre><code># with is like your try .. finally block in this case\nwith open('stats.txt', 'r') as file:\n    # read a list of lines into data\n    data = file.readlines()\n\nprint data\nprint \"Your name: \" + data[0]\n\n# now change the 2nd line, note that you have to add a newline\ndata[1] = 'Mage\\n'\n\n# and write everything back\nwith open('stats.txt', 'w') as file:\n    file.writelines( data )\n</code></pre>\n\n<p>The reason for this is that you can't do something like \"change line 2\" directly in a file. You can only overwrite (not delete) parts of a file - that means that the new content just covers the old content. So, if you wrote 'Mage' over line 2, the resulting line would be 'Mageior'.</p>\n"
                }
            ]
        },
        {
            "1352528": [
                {
                    "owner": {
                        "account_id": 5176,
                        "reputation": 272526,
                        "user_id": 8206,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=256&d=identicon&r=PG",
                        "display_name": "Eli Bendersky",
                        "link": "https://stackoverflow.com/users/8206/eli-bendersky"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1575277060,
                    "last_edit_date": 1575277060,
                    "creation_date": 1251646847,
                    "answer_id": 1354126,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've been using <a href=\"https://en.wikipedia.org/wiki/ActivePerl\" rel=\"nofollow noreferrer\">ActivePerl</a> for years and when I made the switch to Python, I very naturally downloaded ActivePython.</p>\n\n<p>I never had any problems with the Active* distributions - they're robust, come with a few useful libraries, like <a href=\"https://wiki.python.org/moin/PyWin32\" rel=\"nofollow noreferrer\">PyWin32</a>, that the vanilla core Python doesn't have. They also come bundled with a .CHM Python documentation compilation that's very useful.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 47,
                    "last_activity_date": 1575276801,
                    "last_edit_date": 1575276801,
                    "creation_date": 1251584410,
                    "answer_id": 1352539,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's a packaging, or \"distribution\", of Python, with some extras -- not (anywhere) quite as \"Sumo\" as <a href=\"https://en.wikipedia.org/wiki/Enthought\" rel=\"nofollow noreferrer\">Enthought's</a> <em>huge</em> distribution of \"Python plus everything\", but still in a similar vein (and it first appeared much earlier).</p>\n\n<p>I don't think you're missing anything in particular, except perhaps the fact that David Ascher (Python enthusiast and my coauthor in the Python Cookbook) used to be CTO at ActiveState (and so no doubt internally pushed Python to go with other dynamic languages ActiveState focuses on), but he's gone now (he's CEO at the Mozilla-owned firm that deals with email and similar forms of communication -- <a href=\"https://en.wikipedia.org/wiki/Mozilla_Thunderbird\" rel=\"nofollow noreferrer\">Thunderbird</a> and the like, in terms of programs).</p>\n\n<p>No doubt some firms prefer to purchase a distribution with commercially available support contracts, like ActivePython, just because that's the way some purchasing departments in several enterprises (and/or their IT departments) are used to work. Unless you care about such issues, I don't think you're missing anything by giving ActiveState's Python distribution a pass;-).</p>\n\n<p><sub>(I feel similarly about costly Enterprise distributions of Linux, vs. <a href=\"http://en.wikipedia.org/wiki/Debian\" rel=\"nofollow noreferrer\">Debian</a> or <a href=\"http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29\" rel=\"nofollow noreferrer\">Ubuntu</a> or the like -- but then I'm not in purchasing, nor in an IT department, nor do I work for a very traditional enterprise anyway;-) )</sub></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3359219,
                        "reputation": 361,
                        "user_id": 2821426,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dece1ac5b33c1464f98b7680e27336c0?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "DaveSawyer",
                        "link": "https://stackoverflow.com/users/2821426/davesawyer"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1568662697,
                    "creation_date": 1568662697,
                    "answer_id": 57963396,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>ActiveState will also be supporting Python 2.7 while the standard Python 2.7 will no longer be supported in 2020. If you have a large codebase that won't be migrated in time, you'll need to make security patches yourself or go with something like ActiveState Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 42052,
                        "reputation": 199,
                        "user_id": 122384,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/26156e2b45d0a7aa9b98b78019997f5b?s=256&d=identicon&r=PG",
                        "display_name": "Trent Mick",
                        "link": "https://stackoverflow.com/users/122384/trent-mick"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1393200216,
                    "last_edit_date": 1393200216,
                    "creation_date": 1252528247,
                    "answer_id": 1401911,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is an email to python-list I wrote on this a long while ago:</p>\n\n<p><a href=\"https://mail.python.org/pipermail/python-list/2007-July/456660.html\" rel=\"nofollow noreferrer\">https://mail.python.org/pipermail/python-list/2007-July/456660.html</a>  </p>\n\n<p>Mostly those details are still true. Also, all the other responses I've seen to this question are fair.</p>\n\n<p>Note that as of release 2.6.3.7 ActivePython includes <a href=\"http://code.activestate.com/pypm/\" rel=\"nofollow noreferrer\">PyPM</a> (similar to PPM for ActivePerl) to help with installing Python packages -- the hoped for benefit over \"easy_install\" and \"pip\" (and others) to be the installation of popular binary packages.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15562,
                        "reputation": 127217,
                        "user_id": 33006,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=256&d=identicon&r=PG",
                        "display_name": "Martin v. L&#246;wis",
                        "link": "https://stackoverflow.com/users/33006/martin-v-l%c3%b6wis"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1251584496,
                    "creation_date": 1251584496,
                    "answer_id": 1352541,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>ActiveState has a long tradition contributing Windows support to Python, Tcl, and Perl: by hiring key developers (like Mark Hammond, for some time), by fixing bugs specific to Windows, and having employees contribute fixes back, and by being sponsors of the Python Software Foundation.</p>\n\n<p>While it is true that the distribution they produce is fairly similar to mine, it's as RichieHindle says: you can get paid support from ActiveState (but not from me).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11369,
                        "reputation": 280725,
                        "user_id": 21886,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=256&d=identicon&r=PG",
                        "display_name": "RichieHindle",
                        "link": "https://stackoverflow.com/users/21886/richiehindle"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1251584233,
                    "creation_date": 1251584233,
                    "answer_id": 1352533,
                    "question_id": 1352528,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The main feature is that you can buy a paid support contract for it.</p>\n\n<p>Why does Red Hat Enterprise Linux exist when you can compile everything yourself?  8-)</p>\n\n<p>For many businesses, the combination of proven Open Source software <em>and</em> a support contract from people who build, package and test that software, is an excellent proposition.</p>\n"
                }
            ]
        },
        {
            "17359698": [
                {
                    "owner": {
                        "account_id": 3559086,
                        "reputation": 24021,
                        "user_id": 9067615,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/U7ZMS.jpg?s=256",
                        "display_name": "iacob",
                        "link": "https://stackoverflow.com/users/9067615/iacob"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1616083039,
                    "creation_date": 1616083039,
                    "answer_id": 66694621,
                    "question_id": 17359698,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python's default <code>pathlib</code> library provides the cwd like so:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import pathlib\n\npathlib.Path.cwd()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2869547,
                        "reputation": 237,
                        "user_id": 2463188,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f3312b0998d9c77916ce6d390dea9593?s=256&d=identicon&r=PG",
                        "display_name": "butsyk",
                        "link": "https://stackoverflow.com/users/2463188/butsyk"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1545139339,
                    "last_edit_date": 1545139339,
                    "creation_date": 1499504264,
                    "answer_id": 44984392,
                    "question_id": 17359698,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using pathlib you can get the folder in which the current file is located. <code>__file__</code> is the pathname of the file from which the module was loaded.\nRef: <a href=\"https://docs.python.org/3/reference/datamodel.html\" rel=\"noreferrer\">docs</a></p>\n\n<pre><code>import pathlib\n\ncurrent_dir = pathlib.Path(__file__).parent\ncurrent_file = pathlib.Path(__file__)\n</code></pre>\n\n<p>Doc ref: <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\">link</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 429652,
                        "reputation": 3234,
                        "user_id": 812662,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://www.gravatar.com/avatar/51066da2b612ea088d852be86324d8d3?s=256&d=identicon&r=PG",
                        "display_name": "Maciek",
                        "link": "https://stackoverflow.com/users/812662/maciek"
                    },
                    "is_accepted": true,
                    "score": 123,
                    "last_activity_date": 1476880981,
                    "last_edit_date": 1495540810,
                    "creation_date": 1372411848,
                    "answer_id": 17361545,
                    "question_id": 17359698,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It seems that IDLE changes its current working dir to location of the script that is executed, while when running the script using cmd doesn't do that and it leaves CWD as it is.</p>\n\n<p>To change current working dir to the one containing your script you can use:</p>\n\n<pre><code>import os\nos.chdir(os.path.dirname(__file__))\nprint(os.getcwd())\n</code></pre>\n\n<p>The <code>__file__</code> variable is available only if you execute script from file, and it contains path to the file. More on it here: <a href=\"https://stackoverflow.com/questions/7116889/python-file-attribute-absolute-or-relative\">Python __file__ attribute absolute or relative?</a></p>\n"
                }
            ]
        },
        {
            "31736671": [
                {
                    "owner": {
                        "account_id": 4599139,
                        "reputation": 32094,
                        "user_id": 3730397,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/oTiE6g1A.png?s=256",
                        "display_name": "firelynx",
                        "link": "https://stackoverflow.com/users/3730397/firelynx"
                    },
                    "is_accepted": true,
                    "score": 62,
                    "last_activity_date": 1438329051,
                    "creation_date": 1438329051,
                    "answer_id": 31740881,
                    "question_id": 31736671,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In order to bucket your series, you should use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html\" rel=\"noreferrer\">the <code>pd.cut()</code> function</a>, like this:</p>\n\n<pre><code>df['bin'] = pd.cut(df['1'], [0, 50, 100,200])\n\n         0    1        file         bin\n0  person1   24     age.csv     (0, 50]\n1  person2   17     age.csv     (0, 50]\n2  person3   98     age.csv   (50, 100]\n3  person4    6     age.csv     (0, 50]\n4  person2  166  Height.csv  (100, 200]\n5  person3  125  Height.csv  (100, 200]\n6  person5  172  Height.csv  (100, 200]\n</code></pre>\n\n<p>If you want to name the bins yourself, you can use the <code>labels=</code> argument, like this:</p>\n\n<pre><code>df['bin'] = pd.cut(df['1'], [0, 50, 100,200], labels=['0-50', '50-100', '100-200'])\n\n         0    1        file      bin\n0  person1   24     age.csv     0-50\n1  person2   17     age.csv     0-50\n2  person3   98     age.csv   50-100\n3  person4    6     age.csv     0-50\n4  person2  166  Height.csv  100-200\n5  person3  125  Height.csv  100-200\n6  person5  172  Height.csv  100-200\n</code></pre>\n"
                }
            ]
        },
        {
            "492387": [
                {
                    "owner": {
                        "account_id": 229963,
                        "reputation": 1415,
                        "user_id": 493272,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/8203e72f2d49e1f63ad33df47fe270b3?s=256&d=identicon&r=PG",
                        "display_name": "SpiRail",
                        "link": "https://stackoverflow.com/users/493272/spirail"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1705194254,
                    "last_edit_date": 1705194254,
                    "creation_date": 1665483212,
                    "answer_id": 74026452,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I actually get this in <a href=\"https://en.wikipedia.org/wiki/Pylint\" rel=\"nofollow noreferrer\">Pylint</a> from a bracket in the wrong place.</p>\n<p>I'm adding this answer, because I sent a lot of time looking for tabs.\nIn this case, it has nothing to do with tabs or spaces.</p>\n<pre class=\"lang-py prettyprint-override\"><code>    def some_instance_function(self):\n\n        json_response = self.some_other_function()\n\n        def compare_result(json_str, variable):\n            &quot;&quot;&quot;\n            Sub function for comparison\n            &quot;&quot;&quot;\n            json_value = self.json_response.get(json_str, f&quot;{json_str} not found&quot;)\n\n            if str(json_value) != str(variable):\n                logging.error(&quot;Error message: %s, %s&quot;,\n                    json_value,\n                    variable) # &lt;-- Putting the bracket here causes the error below\n                    #) &lt;-- Moving the bracket here fixes the issue\n                return False\n            return True\n\n        logging.debug(&quot;Response: %s&quot;, self.json_response)\n        #        ^----The pylint error reports here\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15807266,
                        "reputation": 309,
                        "user_id": 11405471,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10218552112222502/picture?type=large",
                        "display_name": "WangSung",
                        "link": "https://stackoverflow.com/users/11405471/wangsung"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1705194067,
                    "last_edit_date": 1705194067,
                    "creation_date": 1637811610,
                    "answer_id": 70105533,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you use <a href=\"https://en.wikipedia.org/wiki/Project_Jupyter#Industry_adoption\" rel=\"nofollow noreferrer\">Colaboratory</a>, then you can do this to avoid the error by these commands:</p>\n<ol>\n<li><kbd>Ctrl</kbd> + <kbd>A</kbd></li>\n<li><kbd>Tab</kbd></li>\n<li><kbd>Shift</kbd> + <kbd>Tab</kbd></li>\n</ol>\n<p>It's all [tab] indentation converted to [space] indentation. Then <kbd>OK</kbd>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15462527,
                        "reputation": 9324,
                        "user_id": 11154841,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/a3cGr.png?s=256",
                        "display_name": "questionto42",
                        "link": "https://stackoverflow.com/users/11154841/questionto42"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1705193893,
                    "last_edit_date": 1705193893,
                    "creation_date": 1633097977,
                    "answer_id": 69407432,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same error because of another thing, and it was not about tabs vs. spaces. I had the first <code>if</code> slightly more indented than an <code>else:</code> much further down. If it is just about a space or two; you might oversee it after a long code block. The same thing with docstrings:</p>\n<pre><code>&quot;&quot;&quot;comment comment \ncomment\n&quot;&quot;&quot;\n</code></pre>\n<p>They also need to be aligned; see the <a href=\"https://stackoverflow.com/a/55012979/11154841\">other answer</a> on the same page here.</p>\n<p>Reproducible with a few lines:</p>\n<pre><code>if a==1:\n    print('test')\n else:\n    print('test2')\n</code></pre>\n<p>Throws:</p>\n<pre class=\"lang-none prettyprint-override\"><code>  File &quot;&lt;ipython-input-127-52bbac35ad7d&gt;&quot;, line 3\n    else:\n         ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5137250,
                        "reputation": 738,
                        "user_id": 4115587,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/6Ff14.jpg?s=256",
                        "display_name": "Rahal Danthanarayana",
                        "link": "https://stackoverflow.com/users/4115587/rahal-danthanarayana"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1705193167,
                    "last_edit_date": 1705193167,
                    "creation_date": 1614767331,
                    "answer_id": 66455178,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm using <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> in the <a href=\"https://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29\" rel=\"nofollow noreferrer\">Ubuntu</a> OS. To fix this issue, go to:</p>\n<p>Menu <em>View</em> \u2192 <em>Indentation</em> \u2192 <em>Convert indentation to tabs</em>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13045207,
                        "reputation": 1154,
                        "user_id": 9427260,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/60biO.png?s=256",
                        "display_name": "Devil",
                        "link": "https://stackoverflow.com/users/9427260/devil"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1705192757,
                    "last_edit_date": 1705192757,
                    "creation_date": 1595577684,
                    "answer_id": 63069350,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Using <a href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" rel=\"nofollow noreferrer\">Visual Studio Code</a></strong></p>\n<p>If you are using Visual Studio Code, then it will convert all mixed indentation to either space or tabs using these simple steps below.</p>\n<ol>\n<li><p>press <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></p>\n</li>\n<li><p>type <em>indent using spaces</em></p>\n</li>\n<li><p>Press <kbd>Enter</kbd></p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 5500724,
                        "reputation": 1411,
                        "user_id": 4370146,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-_GpOucPvZKc/AAAAAAAAAAI/AAAAAAAAAio/A101VWnkilo/photo.jpg?sz=256",
                        "display_name": "Bartleby",
                        "link": "https://stackoverflow.com/users/4370146/bartleby"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1705192465,
                    "last_edit_date": 1705192465,
                    "creation_date": 1595577161,
                    "answer_id": 63069202,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I got this error even though I didn't have any tabs in my code, and the reason was there was a superfluous closing parenthesis somewhere in my code. I should have figured this out earlier, because it was messing up spaces before and after some equal signs...</p>\n<p>If you find anything off even after running <em>Reformat code</em> in your IDE (or manually running autopep8), make sure all your parentheses match, starting backwards from the weird spaces before/after the first equals sign.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5406026,
                        "reputation": 857,
                        "user_id": 4304526,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://i.sstatic.net/pAbrY.png?s=256",
                        "display_name": "bmc",
                        "link": "https://stackoverflow.com/users/4304526/bmc"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1705192399,
                    "last_edit_date": 1705192399,
                    "creation_date": 1593532360,
                    "answer_id": 62661399,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I am using <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> 3 with a <a href=\"https://en.wikipedia.org/wiki/Flask_%28web_framework%29\" rel=\"nofollow noreferrer\">Flask</a> project. I fixed the error using menu <em>View</em> \u2192 <em>Indentation</em> \u2192 <em>Tab Width</em>: 4 after unselected Indent Using Spaces.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16401606,
                        "reputation": 221,
                        "user_id": 11847375,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bff253b356e6d02f9218a1e2ee0f9bbf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ayush Aryan",
                        "link": "https://stackoverflow.com/users/11847375/ayush-aryan"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1705192213,
                    "last_edit_date": 1705192213,
                    "creation_date": 1586587719,
                    "answer_id": 61153073,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For example:</p>\n<pre><code>1. def convert_distance(miles):\n2.   km = miles * 1.6\n3.   return km\n</code></pre>\n<p>In this code, the same situation occurred for me. Just delete the previous indent spaces of line 2 and 3, and then <strong>either use tab or space. Never use both</strong>. Give proper indentation while writing code in Python.</p>\n<p>For <a href=\"https://en.wikipedia.org/wiki/Spyder_%28software%29\" rel=\"nofollow noreferrer\">Spyder</a>, go to menu <em>Source</em> \u2192 <em>Fix Indentation</em>. The same goes for <a href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" rel=\"nofollow noreferrer\">Visual Studio Code</a>, <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> or any other editor. Fix the indentation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5224110,
                        "reputation": 139,
                        "user_id": 8921265,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/100001258058414/picture?type=large",
                        "display_name": "Abdulbasith",
                        "link": "https://stackoverflow.com/users/8921265/abdulbasith"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1705191873,
                    "last_edit_date": 1705191873,
                    "creation_date": 1578243415,
                    "answer_id": 59602132,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For <a href=\"https://en.wikipedia.org/wiki/Spyder_%28software%29\" rel=\"nofollow noreferrer\">Spyder</a> users, go to</p>\n<p>menu <em>Source</em> \u2192 <em>Fix Indentation</em></p>\n<p>to fix the issue immediately.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5639784,
                        "reputation": 1139,
                        "user_id": 4691861,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e62f5032b153aac84f66d30a4e03d365?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "plfrick",
                        "link": "https://stackoverflow.com/users/4691861/plfrick"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1705191772,
                    "last_edit_date": 1705191772,
                    "creation_date": 1551826845,
                    "answer_id": 55012979,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For what it\u2019s worth, my <a href=\"https://en.wikipedia.org/wiki/Docstring#Python\" rel=\"nofollow noreferrer\">docstring</a> was indented too much and this also throws the same error</p>\n<pre><code>class junk:\n     &quot;&quot;&quot;docstring is indented too much&quot;&quot;&quot;\n    def fun(): return\n</code></pre>\n<p><code>IndentationError: unindent does not match any outer indentation level</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 9826651,
                        "reputation": 89,
                        "user_id": 7279705,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/a0052c24f5f09aafbcc8d7297aa0019c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Cur123",
                        "link": "https://stackoverflow.com/users/7279705/cur123"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1705191632,
                    "last_edit_date": 1705191632,
                    "creation_date": 1544849285,
                    "answer_id": 53789617,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was using <a href=\"https://en.wikipedia.org/wiki/IPython#Project_Jupyter\" rel=\"nofollow noreferrer\">Jupyter Notebook</a> and tried almost all of the solutions in previous answers (adapting to my scenario) to no use. I then went line by line, deleted all spaces for each line and replaced with tab. That solved the issue.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 104209,
                        "reputation": 5293,
                        "user_id": 278739,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/4ed23aea943120da1433017ae43f8787?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Cedric",
                        "link": "https://stackoverflow.com/users/278739/cedric"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1705191528,
                    "last_edit_date": 1705191528,
                    "creation_date": 1544450827,
                    "answer_id": 53707386,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had a function defined, but it <em>did not have any content</em> apart from its function comments...</p>\n<pre><code>def foo(bar):\n    # Some awesome temporary comment.\n    # But there is actually nothing in the function!\n    # D'Oh!\n</code></pre>\n<p>It yelled:</p>\n<pre class=\"lang-none prettyprint-override\"><code>  File &quot;foobar.py&quot;, line 69\n\n                                ^\nIndentationError: expected an indented block\n</code></pre>\n<p>(note that the line the <code>^</code> mark points to is empty)</p>\n<p>--</p>\n<p>Multiple solutions:</p>\n<p>1: Just comment out the function</p>\n<p>2: Add function comment</p>\n<pre><code>def foo(bar):\n    '' Some awesome comment. This comment could be just one space.''\n</code></pre>\n<p>3: Add a line that does not do anything</p>\n<pre><code>def foo(bar):\n    0\n</code></pre>\n<p>In any case, make sure to <em>make it obvious</em> <strong>why</strong> it is an empty function - for yourself, or for your peers that will use your code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14292191,
                        "reputation": 13299,
                        "user_id": 10323798,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/NbeL9.jpg?s=256",
                        "display_name": "NelsonGon",
                        "link": "https://stackoverflow.com/users/10323798/nelsongon"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1705190992,
                    "last_edit_date": 1705190992,
                    "creation_date": 1544190146,
                    "answer_id": 53670795,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Since I realize there isn't any answer specific to <a href=\"https://en.wikipedia.org/wiki/Spyder_%28software%29\" rel=\"nofollow noreferrer\">Spyder</a>, I'll add one:</p>\n<p>Basically, carefully look at your <code>if</code> statement and make sure all <code>if</code>s, <code>elif</code>s and <code>else</code>s have the same spacing, that is, they're at the same line at the start like so:</p>\n<pre><code>def your_choice(answer):\n    if answer&gt;5:\n        print(&quot;You're overaged&quot;)\n    elif answer&lt;=5 and answer&gt;1:\n            print(&quot;Welcome to the toddler's club!&quot;)\n    else:\n            print(&quot;No worries, mate!&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1423931,
                        "reputation": 134,
                        "user_id": 1347943,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jGviL.gif?s=256",
                        "display_name": "Aha",
                        "link": "https://stackoverflow.com/users/1347943/aha"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1705190817,
                    "last_edit_date": 1705190817,
                    "creation_date": 1438087275,
                    "answer_id": 31676628,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For <a href=\"https://en.wikipedia.org/wiki/Atom_(text_editor)\" rel=\"nofollow noreferrer\">Atom</a> users, <em>Packages</em> \u2192 <em>white space</em> \u2192 <em>remove trailing white spaces</em>. This worked for me.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4600401,
                        "reputation": 61,
                        "user_id": 3731311,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/6118ce2e02dd66d21d2391d64c5271e6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3731311",
                        "link": "https://stackoverflow.com/users/3731311/user3731311"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1705190579,
                    "last_edit_date": 1705190579,
                    "creation_date": 1403798257,
                    "answer_id": 24435179,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same issue yesterday. It was an indentation error. I was using the <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> editor.</p>\n<p>It took my hours trying to fix it, and at the end I ended up copying the code into the <a href=\"https://en.wikipedia.org/wiki/Vi\" rel=\"nofollow noreferrer\">vi</a> text editor. It just worked fine.</p>\n<p>PS: Python is too whitespace sensitive. Make sure not to mix spaces and tabs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2821755,
                        "reputation": 6547,
                        "user_id": 2425365,
                        "user_type": "registered",
                        "accept_rate": 48,
                        "profile_image": "https://www.gravatar.com/avatar/213dd55020256b7544c3889b6469cb30?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "nyumerics",
                        "link": "https://stackoverflow.com/users/2425365/nyumerics"
                    },
                    "is_accepted": false,
                    "score": 333,
                    "last_activity_date": 1705189553,
                    "last_edit_date": 1705189553,
                    "creation_date": 1399549489,
                    "answer_id": 23540812,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><em><strong>Important</strong></em>:</p>\n<p>Spaces are the <em><strong>preferred</strong></em> method - see PEP 8 <a href=\"https://www.python.org/dev/peps/pep-0008/#indentation\" rel=\"nofollow noreferrer\">Indentation</a> and <a href=\"https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces\" rel=\"nofollow noreferrer\">Tabs or Spaces?</a>. (Thanks to @Siha for this.)</p>\n<p>For <a href=\"https://en.wikipedia.org/wiki/Sublime_Text\" rel=\"nofollow noreferrer\">Sublime Text</a> users:</p>\n<p>Set Sublime Text to use tabs for indentation:\nMenu <em>View</em> \u2192 <em>Indentation</em> \u2192 <em>Convert Indentation to Tabs</em></p>\n<p>Uncheck the <em>Indent Using Spaces</em> option as well in the same sub-menu above.\nThis will immediately resolve this issue.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 476935,
                        "reputation": 239,
                        "user_id": 888114,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5a63d0d957c97c06b08de2458d93343d?s=256&d=identicon&r=PG",
                        "display_name": "Jackie Lee",
                        "link": "https://stackoverflow.com/users/888114/jackie-lee"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1705189227,
                    "last_edit_date": 1705189227,
                    "creation_date": 1395336181,
                    "answer_id": 22540604,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you use <a href=\"https://en.wikipedia.org/wiki/Notepad%2B%2B\" rel=\"nofollow noreferrer\">Notepad++</a>, do a &quot;replace&quot; with extended search mode to find \\t and replace with four spaces.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4123993,
                        "reputation": 11,
                        "user_id": 3383628,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f6d87f7c4d1fb088f0dfd9efab0ab726?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Eragon",
                        "link": "https://stackoverflow.com/users/3383628/eragon"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1705189182,
                    "last_edit_date": 1705189182,
                    "creation_date": 1394026995,
                    "answer_id": 22199531,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is because there is a mix up of both tabs and spaces.\nYou can either remove all the spaces and replace them with tabs.</p>\n<p>Or, try writing this:</p>\n<pre><code>#!/usr/bin/python -tt\n</code></pre>\n<p>at the beginning of the code. This line resolves any differences between tabs and spaces.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17575,
                        "reputation": 21071,
                        "user_id": 39461,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/AoGJE.png?s=256",
                        "display_name": "Kevin Tighe",
                        "link": "https://stackoverflow.com/users/39461/kevin-tighe"
                    },
                    "is_accepted": true,
                    "score": 866,
                    "last_activity_date": 1686415114,
                    "last_edit_date": 1686415114,
                    "creation_date": 1233247038,
                    "answer_id": 492399,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One possible cause for this error is that there might be spaces mixed with tabs for indentation. Try doing a search &amp; replace to replace all tabs with a few spaces.</p>\n<p>Try this:</p>\n<pre><code>import sys\n\ndef Factorial(n): # return factorial\n    result = 1\n    for i in range (1,n):\n        result = result * i\n    print &quot;factorial is &quot;,result\n    return result\n\nprint Factorial(10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16441244,
                        "reputation": 21,
                        "user_id": 11877453,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DZfk0.png?s=256",
                        "display_name": "Zeeshan Javed",
                        "link": "https://stackoverflow.com/users/11877453/zeeshan-javed"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1672663222,
                    "creation_date": 1672663222,
                    "answer_id": 74982540,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another way of correcting the indentation error is to copy your\ncode to PyCharm if you have configured that already and reformat the file\nit will automatically indent correctly.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3926947,
                        "reputation": 1,
                        "user_id": 3247006,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/An3gf.jpg?s=256",
                        "display_name": "Super Kai - Kazuya Ito",
                        "link": "https://stackoverflow.com/users/3247006/super-kai-kazuya-ito"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1668970112,
                    "last_edit_date": 1668970112,
                    "creation_date": 1668969243,
                    "answer_id": 74510840,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I got the similar error below:</p>\n<blockquote>\n<p>IndentationError: expected an indented block</p>\n</blockquote>\n<p>When I forgot to put <code>pass</code> to the class or function below, then other code was written after the class or function as shown below:</p>\n<pre class=\"lang-py prettyprint-override\"><code>class Person:\n    # pass\n\nx = 10\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>def test():\n    # pass\n\nx = 10\n</code></pre>\n<p>And, when other code was not written after the class or function as shown below:</p>\n<pre class=\"lang-py prettyprint-override\"><code>class Person:\n    # pass\n\n# x = 10\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>def test():\n    # pass\n\n# x = 10\n</code></pre>\n<p>I got the error below:</p>\n<blockquote>\n<p>SyntaxError: unexpected EOF while parsing</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 1691918,
                        "reputation": 593,
                        "user_id": 1554095,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/eaf61b8b599604736ace514728ad7eaa?s=256&d=identicon&r=PG",
                        "display_name": "Gatica",
                        "link": "https://stackoverflow.com/users/1554095/gatica"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1565876637,
                    "last_edit_date": 1565876637,
                    "creation_date": 1371137160,
                    "answer_id": 17091012,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you use Python's IDLE editor you can do as it suggests in one of similar error messages:</p>\n\n<p>1) select all, e.g. <kbd>Ctrl</kbd> + <kbd>A</kbd></p>\n\n<p>2) Go to Format -> Untabify Region</p>\n\n<p>3) Double check your indenting is still correct, save and rerun your program.</p>\n\n<p>I'm using Python 2.5.4</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12880242,
                        "reputation": 141,
                        "user_id": 10625767,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-yn4k3DoLEdQ/AAAAAAAAAAI/AAAAAAAAABs/bCUclh6jDUg/photo.jpg?sz=256",
                        "display_name": "Faisal Ahmed Farooq",
                        "link": "https://stackoverflow.com/users/10625767/faisal-ahmed-farooq"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1545738579,
                    "creation_date": 1545738579,
                    "answer_id": 53922111,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Firstly, just to remind you there is a logical error you better keep result=1 or else your output will be result=0 even after the loop runs.</p>\n\n<p>Secondly you can write it like this:</p>\n\n<pre><code>import sys\n\ndef Factorial(n): # Return factorial\n  result = 0\n  for i in range (1,n):\n     result = result * i\n\n  print \"factorial is \",result\n  return result\n</code></pre>\n\n<p>Leaving a line will tell the python shell that the FOR statements have ended. If you have experience using the python shell then you can understand why we have to leave a line.  </p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user4398985"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1447364564,
                    "creation_date": 1447364564,
                    "answer_id": 33681996,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just a addition. I had a similar problem with the both indentations in Notepad++.</p>\n\n<ol>\n<li>Unexcepted indentation</li>\n<li><p>Outer Indentation Level</p>\n\n<p>Go to ----> Search tab ----> tap on <strong>replace</strong> ----> hit the radio button <strong>Extended</strong> below ---> Now replace \\t with four spaces</p>\n\n<p>Go to ----> Search tab ----> tap on <strong>replace</strong> ----> hit the radio button <strong>Extended</strong> below ---> Now replace \\n with nothing</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 2885790,
                        "reputation": 683,
                        "user_id": 2475739,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/g8tFC.jpg?s=256",
                        "display_name": "cbartondock",
                        "link": "https://stackoverflow.com/users/2475739/cbartondock"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1430991800,
                    "creation_date": 1430991800,
                    "answer_id": 30097361,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are using Vim, hit escape and then type </p>\n\n<p>gg=G</p>\n\n<p>This auto indents everything and will clear up any spaces you have thrown in.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 395733,
                        "reputation": 16261,
                        "user_id": 758836,
                        "user_type": "registered",
                        "accept_rate": 51,
                        "profile_image": "https://www.gravatar.com/avatar/58f86c627aaaffa73935dd28da619e33?s=256&d=identicon&r=PG",
                        "display_name": "loretoparisi",
                        "link": "https://stackoverflow.com/users/758836/loretoparisi"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1426084043,
                    "creation_date": 1426084043,
                    "answer_id": 28989269,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>On <a href=\"https://atom.io/\" rel=\"noreferrer\">Atom</a></p>\n\n<p>go to </p>\n\n<pre><code>Packages &gt; Whitespace &gt; Convert Spaces to Tabs\n</code></pre>\n\n<p>Then check again your file indentation:</p>\n\n<pre><code>python -m tabnanny yourFile.py\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&gt;python\n&gt;&gt;&gt; help(\"yourFile.py\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4002890,
                        "reputation": 29,
                        "user_id": 3298431,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c1123bdf942b3627ade3bc581852062b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ali",
                        "link": "https://stackoverflow.com/users/3298431/ali"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1392346333,
                    "creation_date": 1392346333,
                    "answer_id": 21769961,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It could be because the function above it is not indented the same way.\ni.e.</p>\n\n<pre><code>class a:\n    def blah:\n      print(\"Hello world\")\n    def blah1:\n      print(\"Hello world\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1414497,
                        "reputation": 823,
                        "user_id": 1340405,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5ce737cc1e36f5b84ea9f5ae48e0eaa1?s=256&d=identicon&r=PG",
                        "display_name": "Matt Kahl",
                        "link": "https://stackoverflow.com/users/1340405/matt-kahl"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1343766471,
                    "creation_date": 1343766471,
                    "answer_id": 11748465,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Looks to be an indentation problem. You don't have to match curly brackets in Python but you <em>do</em> have to match indentation levels.</p>\n\n<p>The best way to prevent space/tab problems is to display invisible characters within your text  editor. This will give you a quick way to prevent and/or resolve indentation-related errors.</p>\n\n<p>Also, injecting copy-pasted code is a common source for this type of problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3041,
                        "reputation": 29390,
                        "user_id": 4304,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5MIg7.jpg?s=256",
                        "display_name": "zdan",
                        "link": "https://stackoverflow.com/users/4304/zdan"
                    },
                    "is_accepted": false,
                    "score": 51,
                    "last_activity_date": 1314302567,
                    "last_edit_date": 1314302567,
                    "creation_date": 1233247275,
                    "answer_id": 492419,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Are you sure you are not mixing tabs and spaces in your indentation white space? (That will cause that error.)</p>\n\n<p>Note, it is recommended that you don't use tabs in Python code. See the <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">style guide</a>. You should configure Notepad++ to insert spaces for tabs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5888,
                        "reputation": 13289,
                        "user_id": 9683,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/6da3d4048a89eae74e790545d08ff687?s=256&d=identicon&r=PG",
                        "display_name": "Andr&#233;",
                        "link": "https://stackoverflow.com/users/9683/andr%c3%a9"
                    },
                    "is_accepted": false,
                    "score": 156,
                    "last_activity_date": 1233784228,
                    "creation_date": 1233784228,
                    "answer_id": 513524,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>To easily check for problems with tabs/spaces you can actually do this:</p>\n\n<pre><code>python -m tabnanny yourfile.py\n</code></pre>\n\n<p>or you can just set up your editor correctly of course :-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5016,
                        "reputation": 32867,
                        "user_id": 7856,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/192d4f403439df36217eade100e56281?s=256&d=identicon&r=PG",
                        "display_name": "Dana",
                        "link": "https://stackoverflow.com/users/7856/dana"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1233247519,
                    "creation_date": 1233247519,
                    "answer_id": 492437,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Whenever I've encountered this error, it's because I've somehow mixed up tabs and spaces in my editor.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 19679,
                        "reputation": 3716,
                        "user_id": 46308,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/24f3e55d8d72c8834078e72f10a65367?s=256&d=identicon&r=PG",
                        "display_name": "Abgan",
                        "link": "https://stackoverflow.com/users/46308/abgan"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1233247084,
                    "creation_date": 1233247084,
                    "answer_id": 492402,
                    "question_id": 492387,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The line: <code>result = result * i</code> should be indented (it is the body of the for-loop).</p>\n\n<p>Or - you have mixed space and tab characters</p>\n"
                }
            ]
        },
        {
            "30147428": [
                {
                    "owner": {
                        "account_id": 1219964,
                        "reputation": 239023,
                        "user_id": 1903116,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/w6Ffg.jpg?s=256",
                        "display_name": "thefourtheye",
                        "link": "https://stackoverflow.com/users/1903116/thefourtheye"
                    },
                    "is_accepted": true,
                    "score": 34,
                    "last_activity_date": 1431231267,
                    "last_edit_date": 1431231267,
                    "creation_date": 1431228843,
                    "answer_id": 30147449,
                    "question_id": 30147428,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Quoting <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP-8's Programming Recommendations</a> section,</p>\n\n<blockquote>\n  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>\n\n<pre><code>Yes: if not seq:\n     if seq:\n\nNo: if len(seq)\n    if not len(seq)\n</code></pre>\n</blockquote>\n\n<p>Since empty sequences are Falsy in Python,</p>\n\n<pre><code>&gt;&gt;&gt; bool([])\nFalse\n&gt;&gt;&gt; bool(())\nFalse\n</code></pre>\n\n<p>you can simply use <code>if not</code> as mentioned in the PEP-8.</p>\n\n<p><strong>Note:</strong> You should never use <code>is</code> to compare if two values are equal, because <code>is</code> operator checks if two objects are one and the same, but <code>==</code> checks if two objects are equal.</p>\n\n<hr>\n\n<p>I dug in to the source code to figure out what is happening. When we do <code>a == []</code>,</p>\n\n<pre><code>&gt;&gt;&gt; dis(compile('if a == []: pass', \"string\", \"exec\"))\n  1           0 LOAD_NAME                0 (a)\n              3 BUILD_LIST               0\n              6 COMPARE_OP               2 (==)\n              9 POP_JUMP_IF_FALSE       15\n             12 JUMP_FORWARD             0 (to 15)\n        &gt;&gt;   15 LOAD_CONST               0 (None)\n             18 RETURN_VALUE\n</code></pre>\n\n<p>we are constructing a new list and it would be a very costly operation, just for comparison. On the other hand</p>\n\n<pre><code>&gt;&gt;&gt; dis(compile('if not a: pass', \"string\", \"exec\"))\n  1           0 LOAD_NAME                0 (a)\n              3 POP_JUMP_IF_TRUE         9\n              6 JUMP_FORWARD             0 (to 9)\n        &gt;&gt;    9 LOAD_CONST               0 (None)\n             12 RETURN_VALUE\n</code></pre>\n\n<p>we are trying to see if the current sequence could be Truthy. This internally checks if the length of the sequence is zero (which is just a simple lookup, as the length of the list is maintained in a variable). If the length is zero, then <code>if not actions:</code> will be Truthy. Here we don't construct a new list, but we are just checking the length implicitly, instead of explicitly doing</p>\n\n<pre><code>if len(actions) == 0:\n</code></pre>\n\n<p>So, I am guessing that Python Gurus are suggesting <code>if not seq</code> because there could be performance advantage as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1870594,
                        "reputation": 1567,
                        "user_id": 1692916,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/99337906197e33b2c5f9835584389f44?s=256&d=identicon&r=PG",
                        "display_name": "Sylwit",
                        "link": "https://stackoverflow.com/users/1692916/sylwit"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1431229023,
                    "creation_date": 1431229023,
                    "answer_id": 30147467,
                    "question_id": 30147428,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>According to PEP8 doc you should use </p>\n\n<pre><code>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.\n\nYes: if not seq:\n     if seq:\n\nNo: if len(seq)\n    if not len(seq)\n</code></pre>\n"
                }
            ]
        },
        {
            "1557351": [
                {
                    "owner": {
                        "account_id": 927943,
                        "reputation": 9137,
                        "user_id": 1141692,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/20672c48d4587ddb29aa6d98dd616015?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dgh",
                        "link": "https://stackoverflow.com/users/1141692/dgh"
                    },
                    "is_accepted": false,
                    "score": 93,
                    "last_activity_date": 1694698003,
                    "last_edit_date": 1694698003,
                    "creation_date": 1393146170,
                    "answer_id": 21966211,
                    "question_id": 1557351,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The standard library includes <a href=\"http://docs.python.org/3/library/shutil.html#shutil.rmtree\" rel=\"nofollow noreferrer\"><code>shutil.rmtree</code></a> for this. By default,</p>\n<pre><code>shutil.rmtree(path)  # errors if dir not empty\n</code></pre>\n<p>will give <code>OSError: [Errno 66] Directory not empty: &lt;your/path&gt;</code>.</p>\n<p>You can delete the directory and its contents anyway by ignoring the error:</p>\n<pre><code>shutil.rmtree(role_fs_path, ignore_errors=True)\n</code></pre>\n<p>You can perform more sophisticated error handling by also passing <code>onerrror=&lt;some function(function, path, excinfo)&gt;</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11369,
                        "reputation": 280725,
                        "user_id": 21886,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=256&d=identicon&r=PG",
                        "display_name": "RichieHindle",
                        "link": "https://stackoverflow.com/users/21886/richiehindle"
                    },
                    "is_accepted": true,
                    "score": 190,
                    "last_activity_date": 1475421085,
                    "last_edit_date": 1475421085,
                    "creation_date": 1255387678,
                    "answer_id": 1557364,
                    "question_id": 1557351,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/library/shutil.html#shutil.rmtree\" rel=\"noreferrer\"><code>shutil.rmtree</code></a>:</p>\n\n<pre><code>import shutil\n\nshutil.rmtree(path)\n</code></pre>\n\n<p>See <a href=\"http://docs.python.org/library/shutil.html#shutil.rmtree\" rel=\"noreferrer\">the documentation</a> for details of how to handle and/or ignore errors.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 25197,
                        "reputation": 15265,
                        "user_id": 64618,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/2d3e32506243224474e7292fab5fddba?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Dalke",
                        "link": "https://stackoverflow.com/users/64618/andrew-dalke"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1255387732,
                    "last_edit_date": 1592644375,
                    "creation_date": 1255387732,
                    "answer_id": 1557368,
                    "question_id": 1557351,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You want <a href=\"http://docs.python.org/library/shutil.html#shutil.rmtree\" rel=\"noreferrer\">shutil.rmtree</a></p>\n<blockquote>\n<p>shutil.rmtree(path[, ignore_errors[,\nonerror]])</p>\n<p>Delete an entire directory\ntree; path must point to a directory\n(but not a symbolic link to a\ndirectory). If ignore_errors is true,\nerrors resulting from failed removals\nwill be ignored; if false or omitted,\nsuch errors are handled by calling a\nhandler specified by onerror or, if\nthat is omitted, they raise an\nexception.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "33432426": [
                {
                    "owner": {
                        "account_id": 1718140,
                        "reputation": 7760,
                        "user_id": 1574779,
                        "user_type": "registered",
                        "accept_rate": 29,
                        "profile_image": "https://www.gravatar.com/avatar/c25fada23fa21731be5f92ea16216424?s=256&d=identicon&r=PG",
                        "display_name": "GPrathap",
                        "link": "https://stackoverflow.com/users/1574779/gprathap"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1629293221,
                    "last_edit_date": 1629293221,
                    "creation_date": 1558894922,
                    "answer_id": 56316254,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's because of the Python version. In Python 2.x it's <code>import Queue as queue</code>; on the contrary in Python 3 it's <code>import queue</code>. If you want it for both environments you may use something below as mentioned <a href=\"https://stackoverflow.com/questions/46363871/no-module-named-queue?noredirect=1&amp;lq=1\">here</a></p>\n<pre><code>try:\n   import queue\nexcept ImportError:\n   import Queue as queue\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10393126,
                        "reputation": 1020,
                        "user_id": 7663663,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/98bb12ce29c127470de36a03bc630751?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "xiaojueguan",
                        "link": "https://stackoverflow.com/users/7663663/xiaojueguan"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1607409879,
                    "creation_date": 1607409879,
                    "answer_id": 65194270,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I just copy the file name Queue.py in the <code>*/lib/python2.7/</code> to queue.py and that solved my problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15315347,
                        "reputation": 29,
                        "user_id": 11049375,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/qQg6Y.jpg?s=256",
                        "display_name": "asfawh",
                        "link": "https://stackoverflow.com/users/11049375/asfawh"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1550951942,
                    "last_edit_date": 1550951942,
                    "creation_date": 1550951641,
                    "answer_id": 54845594,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I run into the same problem and learn that queue module defines classes and exceptions, that defines the public methods (Queue Objects).</p>\n\n<p>Ex. </p>\n\n<pre><code>workQueue = queue.Queue(10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8323315,
                        "reputation": 3596,
                        "user_id": 6254131,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/b0b6cfac3d150835081bc9814cc37965?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Panfeng Li",
                        "link": "https://stackoverflow.com/users/6254131/panfeng-li"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1541526487,
                    "last_edit_date": 1541526487,
                    "creation_date": 1520458577,
                    "answer_id": 49161612,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my case it should be:</p>\n\n<p><code>from multiprocessing import JoinableQueue</code></p>\n\n<p>Since in python2, Queue has methods like <code>.task_done()</code>, but in python3 <code>multiprocessing.Queue</code> doesn't have this method, and <code>multiprocessing.JoinableQueue</code> does.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 316665,
                        "reputation": 89395,
                        "user_id": 632951,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/77f196f4d3b4b89fc179071f3aa21e1e?s=256&d=identicon&r=PG",
                        "display_name": "Pacerier",
                        "link": "https://stackoverflow.com/users/632951/pacerier"
                    },
                    "is_accepted": false,
                    "score": 175,
                    "last_activity_date": 1487272256,
                    "last_edit_date": 1495541437,
                    "creation_date": 1487272256,
                    "answer_id": 42282670,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>import queue</code> is <strong>lowercase</strong> <code>q</code> in Python 3.</p>\n\n<p>Change <code>Q</code> to <code>q</code> and it will be fine.</p>\n\n<p>(See code in  <a href=\"https://stackoverflow.com/a/29688081/632951\">https://stackoverflow.com/a/29688081/632951</a> for smart switching.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7208764,
                        "reputation": 671,
                        "user_id": 5503567,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e90bf0f29df312444a9e69cc2cdbbf18?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "peter",
                        "link": "https://stackoverflow.com/users/5503567/peter"
                    },
                    "is_accepted": false,
                    "score": 61,
                    "last_activity_date": 1446284435,
                    "last_edit_date": 1446284435,
                    "creation_date": 1446198900,
                    "answer_id": 33433119,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Queue is in the multiprocessing module so:</p>\n\n<pre><code>from multiprocessing import Queue\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6608336,
                        "reputation": 4058,
                        "user_id": 5104452,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/TGcLv.png?s=256",
                        "display_name": "Ali Abdelrahman",
                        "link": "https://stackoverflow.com/users/5104452/ali-abdelrahman"
                    },
                    "is_accepted": true,
                    "score": 37,
                    "last_activity_date": 1446198441,
                    "creation_date": 1446198441,
                    "answer_id": 33432971,
                    "question_id": 33432426,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I solve the problem my issue was I had file named queue.py in the same directory</p>\n"
                }
            ]
        },
        {
            "9184107": [
                {
                    "owner": {
                        "account_id": 8069709,
                        "reputation": 1,
                        "user_id": 6082851,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/b14f3cd864bc266a401eca07b4153602?s=256&d=identicon&r=PG",
                        "display_name": "12431234123412341234123",
                        "link": "https://stackoverflow.com/users/6082851/12431234123412341234123"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1729814560,
                    "last_edit_date": 1729814560,
                    "creation_date": 1465398811,
                    "answer_id": 37706497,
                    "question_id": 9184107,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can still use the textmode and when you print a string, you remove the last character before printing, like this:</p>\n<pre><code>f.write(&quot;FooBar&quot;[:-1])\n</code></pre>\n<p>Tested with Python 3.4.2.</p>\n<p><strong>Edit:</strong> This does not work in Python 2.7.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5050792,
                        "reputation": 1799,
                        "user_id": 6271889,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4a27c254cbfde4982af5155fb41fc5a8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Leonardo",
                        "link": "https://stackoverflow.com/users/6271889/leonardo"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1619466501,
                    "creation_date": 1619466501,
                    "answer_id": 67272933,
                    "question_id": 9184107,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is an old answer, but the <code>io.open</code> function lets you to specify the line endings:</p>\n<pre><code>import io\nwith io.open('tmpfile', 'w', newline='\\r\\n') as f:\n    f.write(u'foo\\nbar\\nbaz\\n')\n</code></pre>\n<p>From : <a href=\"https://stackoverflow.com/a/2642121/6271889\">https://stackoverflow.com/a/2642121/6271889</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 266426,
                        "reputation": 38800,
                        "user_id": 553995,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/e8d0550cee4d39f864182776f2b256c2?s=256&d=identicon&r=PG",
                        "display_name": "Praveen Gollakota",
                        "link": "https://stackoverflow.com/users/553995/praveen-gollakota"
                    },
                    "is_accepted": true,
                    "score": 108,
                    "last_activity_date": 1328650045,
                    "last_edit_date": 1328650045,
                    "creation_date": 1328649709,
                    "answer_id": 9184137,
                    "question_id": 9184107,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You need to open the file in <em>binary mode</em> i.e. <code>wb</code> instead of <code>w</code>. If you don't, the end of line characters are auto-converted to OS specific ones. </p>\n\n<p>Here is an excerpt from Python reference about <a href=\"http://docs.python.org/library/functions.html#open\" rel=\"noreferrer\"><code>open()</code></a>. </p>\n\n<blockquote>\n  <p>The default is to use text mode, which may convert '\\n' characters to a platform-specific representation on writing and back on reading. </p>\n</blockquote>\n"
                }
            ]
        },
        {
            "45777770": [
                {
                    "owner": {
                        "account_id": 11588074,
                        "reputation": 1258,
                        "user_id": 8489457,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/2lkL1.jpg?s=256",
                        "display_name": "I. Helmot",
                        "link": "https://stackoverflow.com/users/8489457/i-helmot"
                    },
                    "is_accepted": true,
                    "score": 102,
                    "last_activity_date": 1590538815,
                    "last_edit_date": 1590538815,
                    "creation_date": 1503194307,
                    "answer_id": 45777812,
                    "question_id": 45777770,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can follow this guideline: <a href=\"https://flask.palletsprojects.com/en/1.1.x/api/#url-route-registrations\" rel=\"noreferrer\">https://flask.palletsprojects.com/en/1.1.x/api/#url-route-registrations</a></p>\n\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/', defaults={'path': ''})\n@app.route('/&lt;path:path&gt;')\ndef catch_all(path):\n    return 'You want path: %s' % path\n\nif __name__ == '__main__':\n    app.run()\n</code></pre>\n"
                }
            ]
        },
        {
            "14517101": [
                {
                    "owner": {
                        "account_id": 451158,
                        "reputation": 250259,
                        "user_id": 846892,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/E9dZn.png?s=256",
                        "display_name": "Ashwini Chaudhary",
                        "link": "https://stackoverflow.com/users/846892/ashwini-chaudhary"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1495091407,
                    "last_edit_date": 1495091407,
                    "creation_date": 1359098897,
                    "answer_id": 14517300,
                    "question_id": 14517101,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>[-1:0:-1]</code> means: start from the index <code>len(string)-1</code> and move up to <code>0</code>(not included) and take a step of <code>-1</code>(reverse).</p>\n\n<p>So, the following indexes are fetched:</p>\n\n<pre><code>le-1, le-1-1, le-1-1-1  .... 1  # le is len(string)\n</code></pre>\n\n<p>example:</p>\n\n<pre><code>In [24]: strs = 'foobar'\n\nIn [25]: le = len(strs)\n\nIn [26]: strs[-1:0:-1]  # the first -1 is equivalent to len(strs)-1\n\nOut[26]: 'raboo'\n\nIn [27]: strs[le-1:0:-1]   \nOut[27]: 'raboo'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10843,
                        "reputation": 335548,
                        "user_id": 20670,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
                        "display_name": "Tim Pietzcker",
                        "link": "https://stackoverflow.com/users/20670/tim-pietzcker"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1359098808,
                    "last_edit_date": 1359098808,
                    "creation_date": 1359098351,
                    "answer_id": 14517166,
                    "question_id": 14517101,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The Python documentation (<a href=\"http://docs.python.org/2/reference/expressions.html#slicings\" rel=\"noreferrer\">here's the technical one</a>; the explanation for <a href=\"http://docs.python.org/2/library/functions.html#range\" rel=\"noreferrer\"><code>range()</code></a> is a bit easier to understand) is more correct than the simplified \"every kth element\" explanation. The slicing parameters are aptly named</p>\n\n<pre><code>slice[start:stop:step]\n</code></pre>\n\n<p>so the slice starts at the location defined by <code>start</code>, stops before the location <code>stop</code> is reached, and moves from one position to the next by <code>step</code> items.</p>\n"
                }
            ]
        },
        {
            "549741": [
                {
                    "owner": {
                        "account_id": 25621,
                        "reputation": 22106,
                        "user_id": 65977,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/e689265ee24e0874ae8a90827c4783e7?s=256&d=identicon&r=PG",
                        "display_name": "Tyler",
                        "link": "https://stackoverflow.com/users/65977/tyler"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1234643732,
                    "creation_date": 1234643732,
                    "answer_id": 549754,
                    "question_id": 549741,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Exactly.</p>\n\n<pre><code>&gt;&gt;&gt; x = [2]\n&gt;&gt;&gt; x.extend([]) # Nothing is printed because the return value is None\n&gt;&gt;&gt; x == [2]\nTrue\n&gt;&gt;&gt; x\n[2]\n</code></pre>\n\n<p>They do this on purpose so that you will remember that the extend function is actually modifying the list in-place. Same with sort(). It always returns None.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7094,
                        "reputation": 44971,
                        "user_id": 12166,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8ae44dc366eacfc7e7eede0ae0ac065c?s=256&d=identicon&r=PG",
                        "display_name": "Rafa\u0142 Dowgird",
                        "link": "https://stackoverflow.com/users/12166/rafa%c5%82-dowgird"
                    },
                    "is_accepted": true,
                    "score": 52,
                    "last_activity_date": 1234643583,
                    "creation_date": 1234643583,
                    "answer_id": 549748,
                    "question_id": 549741,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Extend is a method of list, which modifies it but doesn't return <code>self</code> (returning <code>None</code> instead). If you need the modified value as the expression value, use <code>+</code>, as in <code>[2]+[]</code>.</p>\n"
                }
            ]
        },
        {
            "1065844": [
                {
                    "owner": {
                        "account_id": 11512403,
                        "reputation": 719,
                        "user_id": 8436767,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/apCG8.jpg?s=256",
                        "display_name": "Valentyn",
                        "link": "https://stackoverflow.com/users/8436767/valentyn"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1562183999,
                    "last_edit_date": 1562183999,
                    "creation_date": 1505828967,
                    "answer_id": 46302246,
                    "question_id": 1065844,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is a working solution that creates a file and adds value to a cell:</p>\n\n<pre><code>import win32com.client\nimport xlsxwriter\nimport os\ncwd = os.getcwd()\nfile_path = cwd + \"\\\\test.xlsx\"\n\n#Create an excel file\nworkbook = xlsxwriter.Workbook(file_path)\nworksheet = workbook.add_worksheet()\nworkbook.close()\n\n#Open an excel application\nxlApp = win32com.client.Dispatch(\"Excel.Application\")\nxlApp.Visible=1\n\n\nworkBook = xlApp.Workbooks.Open(file_path)\nprint str(workBook.ActiveSheet.Cells(1,1))\nworkBook.ActiveSheet.Cells(1, 1).Value = \"hello55\"                \nworkBook.Close(SaveChanges=1) \nxlApp.Quit()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14887431,
                        "reputation": 97,
                        "user_id": 10750198,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-FH-xtYs4Ky0/AAAAAAAAAAI/AAAAAAAABYY/Ior47KIHSnA/photo.jpg?sz=256",
                        "display_name": "Andrey Zobov",
                        "link": "https://stackoverflow.com/users/10750198/andrey-zobov"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1544022986,
                    "creation_date": 1544022986,
                    "answer_id": 53635390,
                    "question_id": 1065844,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>How to receive ActiveX events in python 3</strong> </p>\n\n<pre><code># coding=utf8\n\nfrom PyQt5.QAxContainer import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import QObject\nimport sys\n\nTITLE = \"CallX Python Example: accept any calls\"\nTrueConfCallX_Class = '{27EF4BA2-4500-4839-B88A-F2F4744FE56A}'\n\nSERVER = '' # empty - connect to TrueConf Online cloud\nUSER = '&lt;trueconf id&gt;'\nPASSWORD = '&lt;password&gt;'\n\nclass CallXWindow(QWidget):\n\n    def __init__(self):\n        QAxWidget.__init__(self)\n        self.setWindowTitle(TITLE)\n        self.move(400, 30)\n# end of class CallXWindow(QWidget)\n\n\nclass ActiveXExtend(QObject):\n\n    def __init__(self, view):\n        super().__init__()\n        self.view = view\n        self.ocx = QAxWidget(TrueConfCallX_Class)\n\n        self.ocx.move(0, 0)\n        self.ocx.setFixedSize(640, 375)\n        self.ocx.setParent(self.view)\n        self.ocx.show()\n\n        # receive some ActiveX events \n        self.ocx.OnXAfterStart.connect(self._OnXAfterStart)\n        self.ocx.OnServerConnected[str].connect(self._OnServerConnected)\n        self.ocx.OnLogin[str].connect(self._OnLogin)\n        self.ocx.OnInviteReceived[str].connect(self._OnInviteReceived)\n        self.ocx.OnXError[int, str].connect(self._OnXError)\n        self.ocx.OnXLoginError[int].connect(self._OnXLoginError)\n\n    # Events\n    def _OnXAfterStart(self):\n        print(\"**OnXAfterStart\")\n        # select devices\n        self.ocx.XSetCameraByIndex(0)\n        self.ocx.XSelectMicByIndex(0)\n        self.ocx.XSelectSpeakerByIndex(0)\n        # connect to server\n        self.ocx.connectToServer(SERVER)\n\n    def _OnServerConnected(self, eventDetails):\n        print(\"**OnServerConnected\")\n        print(eventDetails)\n        # login\n        self.ocx.login(USER, PASSWORD)\n\n    def _OnLogin(self, eventDetails):\n        print(\"**OnLogin\")\n\n    def _OnInviteReceived(self, eventDetails):\n        print(\"**OnInviteReceived\")\n        print(eventDetails)\n        # accept any calls\n        self.ocx.accept()\n\n    def _OnXError(self, errorCode, errorMsg):\n        print(\"**OnXError\")\n        print('{}. Code: {}'.format(errorMsg, errorCode))\n\n    def _OnXLoginError(self, errorCode):\n        print(\"**OnXLoginError\")\n        if errorCode == 8:\n            print('Support for SDK Applications is not enabled on this server')\n        else:\n            print('Login error. Code: {}'.format(errorCode))\n# end of class ActiveXExtend(QObject)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    MainWindow = CallXWindow()\n    axwin = ActiveXExtend(MainWindow)\n    MainWindow.show()\nsys.exit(app.exec_())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 40410,
                        "reputation": 42996,
                        "user_id": 117092,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/8f21aab63da84a913ef6190dcdf9ede4?s=256&d=identicon&r=PG",
                        "display_name": "luc",
                        "link": "https://stackoverflow.com/users/117092/luc"
                    },
                    "is_accepted": true,
                    "score": 43,
                    "last_activity_date": 1523277436,
                    "last_edit_date": 1523277436,
                    "creation_date": 1246435188,
                    "answer_id": 1067842,
                    "question_id": 1065844,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First you have to install the wonderful <a href=\"https://github.com/mhammond/pywin32\" rel=\"noreferrer\">pywin32</a> module.</p>\n\n<p>It provides COM support. You need to run the <code>makepy</code> utility. It is located at <code>C:\\...\\Python26\\Lib\\site-packages\\win32com\\client</code>. On Vista, it must be ran with admin rights.</p>\n\n<p>This utility will show all available COM objects. You can find yours and it will generate a python wrapper for this object.</p>\n\n<p>The wrapper is a python module generated in the <code>C:\\...\\Python26\\Lib\\site-packages\\win32com\\gen_py</code> folder. The module contains the interface of the COM objects. The name of the file is the COM unique id. If you have many files, it is sometimes difficult to find the right one.</p>\n\n<p>After that you just have to call the right interface. It is magical :)</p>\n\n<p>A short example with excel</p>\n\n<pre><code>import win32com.client\n\nxlApp = win32com.client.Dispatch(\"Excel.Application\")\nxlApp.Visible=1\n\nworkBook = xlApp.Workbooks.Open(r\"C:\\MyTest.xls\")\nprint str(workBook.ActiveSheet.Cells(i,1))\nworkBook.ActiveSheet.Cells(1, 1).Value = \"hello\"                \nworkBook.Close(SaveChanges=0) \nxlApp.Quit()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26014,
                        "reputation": 5293,
                        "user_id": 67393,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/b72cb6e5656c9541ed9e1a7bf8f06983?s=256&d=identicon&r=PG",
                        "display_name": "Tom Willis",
                        "link": "https://stackoverflow.com/users/67393/tom-willis"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1246400513,
                    "creation_date": 1246400513,
                    "answer_id": 1066390,
                    "question_id": 1065844,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can basically do the equivalent of late binding. So whatever is exposed through IDispatch is able to be consumed. </p>\n\n<p>Here's some code I wrote this weekend to get an image from a twain device via Windows Image Acquisition 2.0 and put the data into something I can shove in a gtk based UI.</p>\n\n<pre><code>WIA_COM = \"WIA.CommonDialog\"\nWIA_DEVICE_UNSPECIFIED = 0\nWIA_INTENT_UNSPECIFIED = 0\nWIA_BIAS_MIN_SIZE = 65536\nWIA_IMG_FORMAT_PNG = \"{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}\"\n\ndef acquire_image_wia():\n    wia = win32com.client.Dispatch(WIA_COM)\n    img = wia.ShowAcquireImage(WIA_DEVICE_UNSPECIFIED,\n                           WIA_INTENT_UNSPECIFIED,\n                           WIA_BIAS_MIN_SIZE,\n                           WIA_IMG_FORMAT_PNG,\n                           False,\n                           True)\n    fname = str(time.time())\n    img.SaveFile(fname)\n    buff = gtk.gdk.pixbuf_new_from_file(fname)\n    os.remove(fname)\n\nreturn buff\n</code></pre>\n\n<p>It's not pretty but it works. I would assert it's equivalent to what you would have to write in VB.</p>\n"
                }
            ]
        },
        {
            "12059509": [
                {
                    "owner": {
                        "account_id": 311361,
                        "reputation": 66927,
                        "user_id": 624900,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/dd56da509c21eebb967777a9dbcce437?s=256&d=identicon&r=PG",
                        "display_name": "jterrace",
                        "link": "https://stackoverflow.com/users/624900/jterrace"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1712294735,
                    "last_edit_date": 1712294735,
                    "creation_date": 1345568323,
                    "answer_id": 12059635,
                    "question_id": 12059509,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"http://www.pyinstaller.org/\" rel=\"nofollow noreferrer\">pyinstaller</a> is under active development as of July 2022. You can see <a href=\"https://github.com/pyinstaller/pyinstaller/commits/develop\" rel=\"nofollow noreferrer\">the latest changes</a> on GitHub. It supports for Windows, Linux, and MacOS; 32 and 64-bit. It supports Python versions 2.6, 2.7, and 3.3+.</p>\n<hr />\n<p>Install PyInstaller with pip:</p>\n<pre><code>pip install pyinstaller\n</code></pre>\n<p>Go to your program\u2019s directory and run:</p>\n<pre><code>pyinstaller -F script.py\n</code></pre>\n<p>Find the .exe in the dist folder. Adding <code>-F</code> parameter generates a standalone .exe.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 325384,
                        "reputation": 63588,
                        "user_id": 646543,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/a6xF2.jpg?s=256",
                        "display_name": "Michael0x2a",
                        "link": "https://stackoverflow.com/users/646543/michael0x2a"
                    },
                    "is_accepted": true,
                    "score": 244,
                    "last_activity_date": 1659483616,
                    "last_edit_date": 1659483616,
                    "creation_date": 1345568365,
                    "answer_id": 12059644,
                    "question_id": 12059509,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are several different ways of doing this.</p>\n<hr />\n<p>The first -- and likely most common -- way is to use &quot;freeze&quot; style programs. These programs work by bundling together Python and your program, essentially combining them into a single executable:</p>\n<ul>\n<li><p><strong>PyInstaller:</strong></p>\n<p><a href=\"https://www.pyinstaller.org/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/pyinstaller/pyinstaller\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/PyInstaller\" rel=\"noreferrer\">PyPi</a></p>\n<p>Supports Python 3.7 - 3.10 on Windows, Mac, and Linux.</p>\n</li>\n<li><p><strong>cx_Freeze:</strong></p>\n<p><a href=\"https://cx-freeze.readthedocs.io/en/latest/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/marcelotduarte/cx_Freeze\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/cx_Freeze\" rel=\"noreferrer\">PyPi</a></p>\n<p>Supports Python 3.6 - 3.10 on Windows, Mac, and Linux.</p>\n</li>\n<li><p><strong>py2exe:</strong></p>\n<p><a href=\"https://www.py2exe.org/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/py2exe/py2exe\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/py2exe/\" rel=\"noreferrer\">PyPi</a></p>\n<p>Supports Python 3.7 - 3.10 on Windows only.</p>\n</li>\n<li><p><strong>py2app:</strong></p>\n<p><a href=\"https://py2app.readthedocs.io/en/latest/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/ronaldoussoren/py2app\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/py2app/\" rel=\"noreferrer\">PyPi</a></p>\n<p>Supports Python 3.6 - 3.10 on Macs only.</p>\n</li>\n</ul>\n<p>The main thing to keep in mind is that these types of programs will generally only produce an exe for the operating system you run it in. So for example, running Pyinstaller in Windows will produce a Windows exe, but running Pyinstaller in Linux will produce a Linux exe. If you want to produce an exe for multiple operating systems, you will have to look into using virtual machines or something like <a href=\"https://www.winehq.org/\" rel=\"noreferrer\">Wine</a>.</p>\n<hr />\n<p>Of course, that's not the only way of doing things:</p>\n<ul>\n<li><p><strong>pynsist:</strong></p>\n<p><a href=\"http://pynsist.readthedocs.org/en/latest/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/takluyver/pynsist\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/pynsist\" rel=\"noreferrer\">PyPi</a></p>\n<p>Pynsist will create a Windows installer for your program which will directly install Python on the user's computer instead of bundling it with your code and create shortcuts that link to your Python script.</p>\n<p>The pynsist tool itself requires Python 3.5+ to run, but supports bundling any version of Python with your program.</p>\n<p>Pynsist will create Windows installers only, but can be run from Windows, Mac, and Linux. See <a href=\"http://pynsist.readthedocs.org/en/latest/faq.html#building-on-other-platforms\" rel=\"noreferrer\">their FAQ</a> for more details.</p>\n</li>\n<li><p><strong>Nuitka:</strong></p>\n<p><a href=\"http://nuitka.net/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/kayhayen/Nuitka\" rel=\"noreferrer\">Repo (Github mirror)</a> || <a href=\"https://pypi.python.org/pypi/Nuitka/\" rel=\"noreferrer\">PyPi</a></p>\n<p>Nuitka will literally compile your Python code and produce an exe (as opposed to the other projects, which simply include Python) to try and speed up your code. As a side effect, you'll also get a handy exe you can distribute. Note that you need to have a <a href=\"http://nuitka.net/doc/user-manual.html#requirements\" rel=\"noreferrer\">C++ compiler</a> available on your system.</p>\n<p>Supports Python 2.6 - 2.7 and Python 3.3 - 3.10 on Windows, Mac, and Linux.</p>\n</li>\n<li><p><strong>cython:</strong></p>\n<p><a href=\"http://cython.org/\" rel=\"noreferrer\">Website</a> || <a href=\"https://github.com/cython/cython\" rel=\"noreferrer\">Repo</a> || <a href=\"https://pypi.python.org/pypi/Cython/\" rel=\"noreferrer\">PyPi</a></p>\n<p>Cython is similar to Nuitka in that it is a Python compiler. However, instead of directly compiling your code, it'll compile it to C. You can then take that C code and <a href=\"https://stackoverflow.com/q/2581784/646543\">turn your code into an exe</a>. You'll need to have a C compiler available on your system.</p>\n<p>Supports Python 2.7 and Python 3.3 - 3.11 on Windows, Mac, and Linux.</p>\n</li>\n</ul>\n<hr />\n<p>My personal preference is to use PyInstaller since it was the easiest for me to get up and running, was designed to work nicely with various popular libraries such as numpy or pygame, and has great compatibility with various OSes and Python versions.</p>\n<p>However, I've also successfully built various exes using cx_Freeze without too much difficulty, so you should also consider trying that program out.</p>\n<p>I haven't yet had a chance to to try pynist, Nuitka, or Cython extensively, but they seem like pretty interesting and innovative solutions. If you run into trouble using the first group of programs, it might be worthwhile to try one of these three. Since they work fundamentally differently then the Pyinstaller/cx_freeze-style programs, they might succeed in those odd edge cases where the first group fails.</p>\n<p>In particular, I think pynist is a good way of sidestepping the entire issue of distributing your code altogether: Macs and Linux already have native support for Python, and just installing Python on Windows might genuinely be the cleanest solution. (The downside is now that you need to worry about targeting multiple versions of Python + installing libraries).</p>\n<p>Nuitka and Cython (in my limited experience) seem to work fairly well. Again, I haven't tested them extensively myself, and so my main observation is that they seem to take much longer to produce an exe then the &quot;freeze&quot; style programs do.</p>\n<hr />\n<p>All this being said, converting your Python program into an executable isn't necessarily the only way of distributing your code. To learn more about what other options are available, see the following links:</p>\n<ul>\n<li><a href=\"https://packaging.python.org/overview/#packaging-python-applications\" rel=\"noreferrer\">https://packaging.python.org/overview/#packaging-python-applications</a></li>\n<li><a href=\"https://docs.python-guide.org/shipping/packaging/#for-linux-distributions\" rel=\"noreferrer\">https://docs.python-guide.org/shipping/packaging/#for-linux-distributions</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 2395466,
                        "reputation": 368,
                        "user_id": 2094351,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e66bb4fbe0603a9856c58f02d8a0fcdb?s=256&d=identicon&r=PG",
                        "display_name": "Ratnesh Kushwaha",
                        "link": "https://stackoverflow.com/users/2094351/ratnesh-kushwaha"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1659387815,
                    "last_edit_date": 1659387815,
                    "creation_date": 1596776291,
                    "answer_id": 63295487,
                    "question_id": 12059509,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://pypi.org/project/auto-py-to-exe/\" rel=\"nofollow noreferrer\">auto-py-to-exe</a> is a GUI for PyInstaller.</p>\n<p><a href=\"https://i.sstatic.net/kXzRwm.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/kXzRwm.png\" alt=\"Auto-py-to-exe\" /></a></p>\n"
                }
            ]
        },
        {
            "18195322": [
                {
                    "owner": {
                        "account_id": 21577497,
                        "reputation": 1,
                        "user_id": 15909360,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/70c6ef7d256a87670636c27f0694b982?s=256&d=identicon&r=PG",
                        "display_name": "Alex",
                        "link": "https://stackoverflow.com/users/15909360/alex"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1620841501,
                    "creation_date": 1620841501,
                    "answer_id": 67508630,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To convert the integer variable to a string , add str in front of each variable</p>\n<p>five = 5\ntwo = 2</p>\n<p>print(str(five) + &quot; and &quot; + str(two))</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13297576,
                        "reputation": 1,
                        "user_id": 9600024,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/689db525d0c39e4d2261c2d8d5bd2566?s=256&d=identicon&r=PG",
                        "display_name": "Steven William Bausch",
                        "link": "https://stackoverflow.com/users/9600024/steven-william-bausch"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1522898358,
                    "creation_date": 1522898358,
                    "answer_id": 49663598,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python any non-zero integer value is true; zero is false. </p>\n\n<p>The OP\u2019s values are both non-zero.</p>\n\n<p>The AND operator tests from left to right, </p>\n\n<p>with and, if all values are True, returns the last evaluated value.\n If any value is false, returns the first one.</p>\n\n<p>Since both are non-zero, both are true, so the last value is returned </p>\n"
                },
                {
                    "owner": {
                        "account_id": 9315012,
                        "reputation": 11,
                        "user_id": 6915605,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/0be1df46a74dd18884f4bd1514d970e7?s=256&d=identicon&r=PG",
                        "display_name": "bobalukalallu",
                        "link": "https://stackoverflow.com/users/6915605/bobalukalallu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1475580806,
                    "last_edit_date": 1475580806,
                    "creation_date": 1475497962,
                    "answer_id": 39831766,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try <code>0</code> and <code>9</code>.</p>\n\n<p>The result is <code>0</code> because the value of <code>0</code> is false. The operand on the left of the <code>and</code> operator is False so the whole expression is False and returns <code>0</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 322588,
                        "reputation": 77117,
                        "user_id": 642070,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0c280b71b3187d1cc113a6e302b414b9?s=256&d=identicon&r=PG",
                        "display_name": "tdelaney",
                        "link": "https://stackoverflow.com/users/642070/tdelaney"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1471871950,
                    "last_edit_date": 1471871950,
                    "creation_date": 1376336534,
                    "answer_id": 18195382,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python Boolean operators return the last value evaluated, not True/False. The <a href=\"http://docs.python.org/2/reference/expressions.html#boolean-operations\" rel=\"noreferrer\">docs</a> have a good explanation of this:</p>\n\n<blockquote>\n  <p>The expression <code>x and y</code> first evaluates <code>x</code>; if <code>x</code> is <code>false</code>, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 2041348,
                        "reputation": 859,
                        "user_id": 1822462,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/d46dbf065340bbc6997fdb5d8a9be5e2?s=256&d=identicon&r=PG",
                        "display_name": "deadboy",
                        "link": "https://stackoverflow.com/users/1822462/deadboy"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1379958361,
                    "last_edit_date": 1379958361,
                    "creation_date": 1376337291,
                    "answer_id": 18195596,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Boolean And operators will return the first value <code>5</code> if the expression evaluated is <code>false</code>, and the second value <code>2</code> if the expression evaluated is <code>true</code>. Because <code>5</code> and <code>2</code> are both real, non-false, and non-null values, the expression is evaluated to true.</p>\n\n<p>If you wanted to print both variables you could concatenate them to a String and print that.</p>\n\n<pre><code>five = 5\ntwo = 2\nprint five + \" and \" + two\n</code></pre>\n\n<p>Or to print their sum you could use</p>\n\n<pre><code>print five + two\n</code></pre>\n\n<p>This <a href=\"http://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not\" rel=\"nofollow\">document</a> explains how to use the logical Boolean operators.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1735757,
                        "reputation": 101,
                        "user_id": 2457841,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/d6c77f2afbacffb9bababfc18589f1ef?s=256&d=identicon&r=PG",
                        "display_name": "aChipmunk",
                        "link": "https://stackoverflow.com/users/2457841/achipmunk"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1376337246,
                    "creation_date": 1376337246,
                    "answer_id": 18195588,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As a bit of a side note: (i don't have enough rep for a comment) The AND operator is not needed for printing multiple variables.  You can simply separate variable names with commas such as <code>print five, two</code>  instead of <code>print five AND two</code>.  You can also use escapes to add variables to a print line such as <code>print \"the var five is equal to: %s\"  %five</code>. More on that here: <a href=\"http://docs.python.org/2/library/re.html#simulating-scanf\" rel=\"noreferrer\">http://docs.python.org/2/library/re.html#simulating-scanf</a></p>\n\n<p>Like others have said AND is a logical operator and used to string together multiple conditions, such as </p>\n\n<pre><code>if (five == 5) AND (two == 2):\n    print five, two\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1286181,
                        "reputation": 15091,
                        "user_id": 1239189,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/8nA0n.jpg?s=256",
                        "display_name": "Ali Gajani",
                        "link": "https://stackoverflow.com/users/1239189/ali-gajani"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1376337102,
                    "last_edit_date": 1376337102,
                    "creation_date": 1376336463,
                    "answer_id": 18195363,
                    "question_id": 18195322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This <code>AND</code> in Python is an equivalent of the <code>&amp;&amp;</code> in Java for instance. This doesn't mean the and in the English language. The <code>AND</code> is a logical operator. Assume five holds 5 and two holds 2. From Python documentation: The expression x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned. Basically, it evaluates the last integer in your case which is true.</p>\n\n<pre><code>if (five and two):\n...     print \"True\"\n... else:\n...     print \"False\"\n</code></pre>\n\n<p>The AND is a logical operator, to test the logic for a specific case, not an arithmetic operator. If you want to get results like 7 for five and two, you should rather use  \"+\" which means adding two integers. See below:</p>\n\n<pre><code>&gt;&gt;&gt; five = 5\n&gt;&gt;&gt; two = 2\n&gt;&gt;&gt; print five + two\n7\n</code></pre>\n"
                }
            ]
        },
        {
            "22864764": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1421773033,
                    "last_edit_date": 1421773033,
                    "creation_date": 1396619728,
                    "answer_id": 22864840,
                    "question_id": 22864764,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, although it is not the so much the variable name that causes this, not directly.</p>\n\n<p>When Python exits, all modules are deleted too. The way modules are cleaned up is by setting all globals in a module to <code>None</code> (so those references no longer refer to the original objects). Those globals are keys in a dictionary object, and as dictionaries are ordered arbitrarily, renaming one variable can change the order in which variables are cleared.</p>\n\n<p>When you renamed <code>v</code> to <code>vb</code>, you altered the order in which variables are cleared, and now <code>Person</code> is cleared last.</p>\n\n<p>One work-around is to use <code>type(self).num_of_people -= 1</code> in the <code>__del__</code> method instead:</p>\n\n<pre><code>def __del__(self):\n    type(self).num_of_people -= 1\n</code></pre>\n\n<p>because the instance will always have a reference to the class still, or test if <code>Person</code> is not set to <code>None</code>:</p>\n\n<pre><code>def __del__(self):\n    if Person is not None:\n        Person.num_of_people -= 1\n</code></pre>\n\n<p>Two notes:</p>\n\n<ul>\n<li><p>CPython 3.4 no longer sets globals to <code>None</code> (in most cases), as per <a href=\"https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442\" rel=\"nofollow\">Safe Object Finalization</a>; see <a href=\"http://www.python.org/dev/peps/pep-0442/\" rel=\"nofollow\">PEP 442</a>.</p></li>\n<li><p>CPython 3.3 automatically applies a <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__hash__\" rel=\"nofollow\">randomized hash salt</a> to the <code>str</code> keys used in a <code>globals</code> dictionary; this makes the behaviour you observed even more random, merely re-running your code several times may or may not trigger the error message.</p></li>\n</ul>\n"
                }
            ]
        },
        {
            "9872255": [
                {
                    "owner": {
                        "account_id": 234440,
                        "reputation": 176300,
                        "user_id": 500584,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=256&d=identicon&r=PG",
                        "display_name": "agf",
                        "link": "https://stackoverflow.com/users/500584/agf"
                    },
                    "is_accepted": true,
                    "score": 281,
                    "last_activity_date": 1332766177,
                    "creation_date": 1332766177,
                    "answer_id": 9872434,
                    "question_id": 9872255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In <code>dict</code>s, only the keys have to be hashable, not the values. <code>namedtuple</code>s don't have keys, so hashability isn't an issue.</p>\n\n<p>However, they have a more stringent restriction -- their key-equivalents, \"field names\", have to be strings.</p>\n\n<p>Basically, if you were going to create a bunch of instances of a class like:</p>\n\n<pre><code>class Container:\n    def __init__(self, name, date, foo, bar):\n        self.name = name\n        self.date = date\n        self.foo = foo\n        self.bar = bar\n\nmycontainer = Container(name, date, foo, bar)\n</code></pre>\n\n<p>and <strong>not change the attributes after you set them in <code>__init__</code>,</strong> you could instead use</p>\n\n<pre><code>Container = namedtuple('Container', ['name', 'date', 'foo', 'bar'])\n\nmycontainer = Container(name, date, foo, bar)\n</code></pre>\n\n<p>as a replacement.</p>\n\n<p>Of course, you could create a bunch of <code>dict</code>s where you used the same keys in each one, but assuming you will have only valid Python identifiers as keys and don't need mutability,</p>\n\n<pre><code>mynamedtuple.fieldname\n</code></pre>\n\n<p>is prettier than</p>\n\n<pre><code>mydict['fieldname']\n</code></pre>\n\n<p>and </p>\n\n<pre><code>mynamedtuple = MyNamedTuple(firstvalue, secondvalue)\n</code></pre>\n\n<p>is prettier than</p>\n\n<pre><code>mydict = {'fieldname': firstvalue, 'secondfield': secondvalue}\n</code></pre>\n\n<p>Finally, <code>namedtuple</code>s are ordered, unlike regular <code>dict</code>s, so you get the items in the order you defined the fields, unlike a <code>dict</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8847,
                        "reputation": 129418,
                        "user_id": 16102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0c4f4df702b23c8983f57d7113e809c8?s=256&d=identicon&r=PG",
                        "display_name": "Cat Plus Plus",
                        "link": "https://stackoverflow.com/users/16102/cat-plus-plus"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1332766055,
                    "creation_date": 1332766055,
                    "answer_id": 9872398,
                    "question_id": 9872255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Tuples are immutable, whether named or not. <code>namedtuple</code> only makes the access more convenient, by using names instead of indices. You can only use valid identifiers for <code>namedtuple</code>, it doesn't perform any hashing \u2014 it generates a new type instead.</p>\n"
                }
            ]
        },
        {
            "8258432": [
                {
                    "owner": {
                        "account_id": 10809,
                        "reputation": 98713,
                        "user_id": 20578,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/idUMq.jpg?s=256",
                        "display_name": "Paul D. Waite",
                        "link": "https://stackoverflow.com/users/20578/paul-d-waite"
                    },
                    "is_accepted": true,
                    "score": 305,
                    "last_activity_date": 1493226083,
                    "last_edit_date": 1493226083,
                    "creation_date": 1322144237,
                    "answer_id": 8258465,
                    "question_id": 8258432,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Assuming you\u2019ve literally got two date objects, you can subtract one from the other and query the resulting <a href=\"http://docs.python.org/library/datetime.html#timedelta-objects\" rel=\"noreferrer\"><code>timedelta</code> object</a> for the number of days:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; a = date(2011,11,24)\n&gt;&gt;&gt; b = date(2011,11,17)\n&gt;&gt;&gt; a-b\ndatetime.timedelta(7)\n&gt;&gt;&gt; (a-b).days\n7\n</code></pre>\n\n<p>And it works with datetimes too \u2014 I think it rounds down to the nearest day:</p>\n\n<pre><code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; a = datetime(2011,11,24,0,0,0)\n&gt;&gt;&gt; b = datetime(2011,11,17,23,59,59)\n&gt;&gt;&gt; a-b\ndatetime.timedelta(6, 1)\n&gt;&gt;&gt; (a-b).days\n6\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 21100,
                        "reputation": 38139,
                        "user_id": 51025,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=256&d=identicon&r=PG",
                        "display_name": "DNS",
                        "link": "https://stackoverflow.com/users/51025/dns"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1371739037,
                    "last_edit_date": 1371739037,
                    "creation_date": 1322144740,
                    "answer_id": 8258583,
                    "question_id": 8258432,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Do you mean full calendar days, or groups of 24 hours?</p>\n\n<p>For simply 24 hours, assuming you're using Python's datetime, then the <a href=\"http://docs.python.org/library/datetime.html#timedelta-objects\">timedelta</a> object already has a days property:</p>\n\n<pre><code>days = (a - b).days\n</code></pre>\n\n<p>For calendar days, you'll need to round a down to the nearest day, and b up to the nearest day, getting rid of the partial day on either side:</p>\n\n<pre><code>roundedA = a.replace(hour = 0, minute = 0, second = 0, microsecond = 0)\nroundedB = b.replace(hour = 0, minute = 0, second = 0, microsecond = 0)\ndays = (roundedA - roundedB).days\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 68982,
                        "reputation": 12791,
                        "user_id": 200983,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/1c4d9da319d9b34572717d94b20e11ba?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Matt Alcock",
                        "link": "https://stackoverflow.com/users/200983/matt-alcock"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1371737073,
                    "creation_date": 1371737073,
                    "answer_id": 17215747,
                    "question_id": 8258432,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Referencing my comments on other answers. This is how I would work out the difference in days based on 24 hours and calender days. the days attribute works well for 24 hours and the function works best for calendar checks.</p>\n\n<pre><code>from datetime import timedelta, datetime\n\ndef cal_days_diff(a,b):\n\n    A = a.replace(hour = 0, minute = 0, second = 0, microsecond = 0)\n    B = b.replace(hour = 0, minute = 0, second = 0, microsecond = 0)\n    return (A - B).days\n\nif __name__ == '__main__':\n\n    x = datetime(2013, 06, 18, 16, 00)\n    y = datetime(2013, 06, 19, 2, 00)\n\n    print (y - x).days          # 0\n    print cal_days_diff(y, x)   # 1 \n\n    z = datetime(2013, 06, 20, 2, 00)\n\n    print (z - x).days          # 1\n    print cal_days_diff(z, x)   # 2 \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 339701,
                        "reputation": 4093,
                        "user_id": 669337,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/0w9xu.jpg?s=256",
                        "display_name": "M S",
                        "link": "https://stackoverflow.com/users/669337/m-s"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1322220490,
                    "last_edit_date": 1322220490,
                    "creation_date": 1322144732,
                    "answer_id": 8258582,
                    "question_id": 8258432,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try:</p>\n\n<pre><code>(b-a).days\n</code></pre>\n\n<p>I tried with b and a of type <code>datetime.date</code>.</p>\n"
                }
            ]
        },
        {
            "38716288": [
                {
                    "owner": {
                        "account_id": 3004185,
                        "reputation": 19751,
                        "user_id": 2549021,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/vHZn6.png?s=256",
                        "display_name": "AKS",
                        "link": "https://stackoverflow.com/users/2549021/aks"
                    },
                    "is_accepted": false,
                    "score": 48,
                    "last_activity_date": 1470129479,
                    "creation_date": 1470129479,
                    "answer_id": 38716427,
                    "question_id": 38716288,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To <a href=\"https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes\" rel=\"noreferrer\">access the members of enums programatically</a>:</p>\n\n<pre><code>&gt;&gt;&gt; Example(ex_variable).name\n'one'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 319064,
                        "reputation": 36639,
                        "user_id": 636626,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/b18fc48caab5bf7c3e2a15292972f05b?s=256&d=identicon&r=PG",
                        "display_name": "Nils Werner",
                        "link": "https://stackoverflow.com/users/636626/nils-werner"
                    },
                    "is_accepted": true,
                    "score": 398,
                    "last_activity_date": 1470129373,
                    "creation_date": 1470129373,
                    "answer_id": 38716384,
                    "question_id": 38716288,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; Example(1).name\n'one'\n</code></pre>\n\n<p>also <a href=\"https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes\">see the Python docs</a>.</p>\n"
                }
            ]
        },
        {
            "40346498": [
                {
                    "owner": {
                        "account_id": 1053202,
                        "reputation": 62811,
                        "user_id": 1056563,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/bc888aa658ab0e0d2a4d305ad7f69123?s=256&d=identicon&r=PG",
                        "display_name": "WestCoastProjects",
                        "link": "https://stackoverflow.com/users/1056563/westcoastprojects"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1670645719,
                    "last_edit_date": 1670645719,
                    "creation_date": 1608374417,
                    "answer_id": 65368909,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>foreach</code> construct is unfortunately not intrinsic to collections but instead  external to them. The result is two-fold:</p>\n<ul>\n<li>it can not be chained</li>\n<li>it requires two lines in idiomatic python.</li>\n</ul>\n<p>Python does not support a true <code>foreach</code> on collections directly. An example would be</p>\n<pre><code>myList.foreach( a =&gt; print(a)).map( lambda x:  x*2) # python can't do this..\n</code></pre>\n<p>But python does not support it.  Partial fixes to this and other missing functionals features in python are provided by various third party libraries including one that I helped author:  see <a href=\"https://pypi.org/project/infixpy/\" rel=\"nofollow noreferrer\">https://pypi.org/project/infixpy/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10384785,
                        "reputation": 1,
                        "user_id": 11829425,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d59554645795256b9c9866497180a493?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Victor",
                        "link": "https://stackoverflow.com/users/11829425/victor"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1600359092,
                    "creation_date": 1600359092,
                    "answer_id": 63942094,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This worked for me:</p>\n<pre><code>def smallest_missing_positive_integer(A):\nA.sort()\nN = len(A)\n\nnow = A[0]\nfor i in range(1, N, 1):\n  next = A[i]\n  \n  #check if there is no gap between 2 numbers and if positive\n  # &quot;now + 1&quot; is the &quot;gap&quot;\n  if (next &gt; now + 1):\n    if now + 1 &gt; 0:\n      return now + 1 #return the gap\n  now = next\n    \nreturn max(1, A[N-1] + 1) #if there is no positive number returns 1, otherwise the end of A+1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7015677,
                        "reputation": 2042,
                        "user_id": 5377773,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10153011416546268/picture?type=large",
                        "display_name": "Robert Mennell",
                        "link": "https://stackoverflow.com/users/5377773/robert-mennell"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1594322877,
                    "last_edit_date": 1594322877,
                    "creation_date": 1537155576,
                    "answer_id": 52360445,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For an updated answer you can build a <code>forEach</code> function in Python easily:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def forEach(list, function):\n    for i, v in enumerate(list):\n        function(v, i, list)\n</code></pre>\n<p>You could also adapt this to <code>map</code>, <code>reduce</code>, <code>filter</code>, and any other array functions from other languages or precedence you'd want to bring over. For loops are fast enough, but the boiler plate is longer than <code>forEach</code> or the other functions. You could also extend list to have these functions with a local pointer to a class so you could call them directly on lists as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14667035,
                        "reputation": 83,
                        "user_id": 10592612,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/1iLHm.png?s=256",
                        "display_name": "Armaan S",
                        "link": "https://stackoverflow.com/users/10592612/armaan-s"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1541095800,
                    "creation_date": 1541095800,
                    "answer_id": 53106972,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For a dict we can use a for loop to iterate through the <code>index</code>, <code>key</code> and <code>value</code>:\n</p>\n\n<pre><code>dictionary = {'a': 0, 'z': 25}\nfor index, (key, value) in enumerate(dictionary.items()):\n     ## Code here ##\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6998104,
                        "reputation": 111,
                        "user_id": 5365095,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/10156101120105634/picture?type=large",
                        "display_name": "Marc Tanne",
                        "link": "https://stackoverflow.com/users/5365095/marc-tanne"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1535491629,
                    "creation_date": 1535491629,
                    "answer_id": 52066417,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>While the answers above are valid, if you are iterating over a dict {key:value} it this is the approach I like to use:</p>\n\n<pre><code>for key, value in Dictionary.items():\n    print(key, value)\n</code></pre>\n\n<p>Therefore, if I wanted to do something like stringify all keys and values in my dictionary, I would do this:</p>\n\n<pre><code>stringified_dictionary = {}\nfor key, value in Dictionary.items():\n    stringified_dictionary.update({str(key): str(value)})\nreturn stringified_dictionary\n</code></pre>\n\n<p>This avoids any mutation issues when applying this type of iteration, which can cause erratic behavior (sometimes) in my experience.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1060108,
                        "reputation": 950,
                        "user_id": 1158603,
                        "user_type": "registered",
                        "accept_rate": 47,
                        "profile_image": "https://i.sstatic.net/D9Wkv.jpg?s=256",
                        "display_name": "krishna",
                        "link": "https://stackoverflow.com/users/1158603/krishna"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1526819038,
                    "last_edit_date": 1526819038,
                    "creation_date": 1526817750,
                    "answer_id": 50434648,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Its also interesting to observe this</p>\n\n<p>To iterate over the indices of a sequence, you can combine <code>range()</code> and <code>len()</code> as follows:</p>\n\n<pre><code>a = ['Mary', 'had', 'a', 'little', 'lamb']\nfor i in range(len(a)):\n  print(i, a[i])\n</code></pre>\n\n<p>output </p>\n\n<pre><code>0 Mary\n1 had\n2 a\n3 little\n4 lamb\n</code></pre>\n\n<p><strong>Edit#1: Alternate way:</strong>  </p>\n\n<p>When looping through a sequence, the position index and corresponding value can be retrieved at the same\ntime using the <code>enumerate()</code> function.</p>\n\n<pre><code>for i, v in enumerate(['tic', 'tac', 'toe']):\n  print(i, v)\n</code></pre>\n\n<p>output</p>\n\n<pre><code>0 tic\n1 tac\n2 toe\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1627013,
                        "reputation": 20022,
                        "user_id": 1502345,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/VzGOD.png?s=256",
                        "display_name": "Jack Aidley",
                        "link": "https://stackoverflow.com/users/1502345/jack-aidley"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1477931784,
                    "creation_date": 1477931784,
                    "answer_id": 40346548,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Like this:</p>\n\n<pre><code>for pet in pets :\n  print(pet)\n</code></pre>\n\n<p>In fact, Python <em>only</em> has foreach style <code>for</code> loops.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2632134,
                        "reputation": 12185,
                        "user_id": 2277815,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/b02dba4479ba90129bd366dac7858959?s=256&d=identicon&r=PG",
                        "display_name": "Hannu",
                        "link": "https://stackoverflow.com/users/2277815/hannu"
                    },
                    "is_accepted": true,
                    "score": 490,
                    "last_activity_date": 1477931760,
                    "creation_date": 1477931760,
                    "answer_id": 40346541,
                    "question_id": 40346498,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Sure. A for loop. </p>\n\n<pre><code>for f in pets:\n    print f\n</code></pre>\n"
                }
            ]
        },
        {
            "39928710": [
                {
                    "owner": {
                        "account_id": 16895574,
                        "reputation": 41,
                        "user_id": 12218185,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-Q7Fd2Tbgxhk/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rcr3WfyyI0cxTIAXI9p30L-Gnay2A/photo.jpg?sz=256",
                        "display_name": "Samuel Kiroko N",
                        "link": "https://stackoverflow.com/users/12218185/samuel-kiroko-n"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1726404948,
                    "last_edit_date": 1726404948,
                    "creation_date": 1619875679,
                    "answer_id": 67346820,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>On a MacBook use</p>\n<p><code>brew install python-tk</code></p>\n<p>The error will be sorted out.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19571657,
                        "reputation": 357,
                        "user_id": 14322692,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a896bd89320ebfc0cc30adf04b5f4699?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Karan Gehlod",
                        "link": "https://stackoverflow.com/users/14322692/karan-gehlod"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1724490986,
                    "last_edit_date": 1724490986,
                    "creation_date": 1624030380,
                    "answer_id": 68037876,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Comes inbuilt with python\nJust import it in your file</p>\n<pre><code>import tkinter\n</code></pre>\n<p>if you not have ticked tkinter during installation.</p>\n<ul>\n<li>Run the installer again and modify the installation Select the Tk</li>\n<li>checkbox (and anything else you want) And continue through the\ninstallation.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 20365334,
                        "reputation": 573,
                        "user_id": 14938811,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GEpclhQE.png?s=256",
                        "display_name": "Hakan",
                        "link": "https://stackoverflow.com/users/14938811/hakan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1673266730,
                    "creation_date": 1673266730,
                    "answer_id": 75057184,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>T of Tkinter should be lowercase</p>\n<p>Not</p>\n<pre><code> import Tkinter as tk\n</code></pre>\n<p>Use as folow:</p>\n<pre><code>import tkinter as tk\n</code></pre>\n<p>or</p>\n<pre><code>from tkinter import * \nnot : from Tkinter import * \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 22344548,
                        "reputation": 90,
                        "user_id": 16563796,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJyc0SbRS2FYrXEizEemLH4xtpJNKnEmleS3A7Tx=k-s256",
                        "display_name": "Michael",
                        "link": "https://stackoverflow.com/users/16563796/michael"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1665321119,
                    "creation_date": 1665321119,
                    "answer_id": 74005062,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was running a Flask application in the almaLinux docker image and my fix for this was.</p>\n<pre><code>yum install python39* -y \n#Be aware this will install Everything including things you don't need. \n</code></pre>\n<p>So this could be a simply case of you need to install the right package for the version of Python you are using.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16292921,
                        "reputation": 286,
                        "user_id": 11765965,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6853d402391aec8ecd879591f0ac2c92?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Stevo",
                        "link": "https://stackoverflow.com/users/11765965/stevo"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1661309404,
                    "creation_date": 1661309404,
                    "answer_id": 73466921,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Windows</strong></p>\n<p><strong>You may not have ticked tkinter during installation.</strong></p>\n<ul>\n<li>Download the latest version of python from python.org</li>\n<li>Run the installer</li>\n<li>Click modify</li>\n<li>Select the Tk checkbox (and anything else you want)</li>\n<li>And continue through the installation.</li>\n</ul>\n<p>Done.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22091697,
                        "reputation": 1,
                        "user_id": 16349676,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GhWFLt3NOO8Y--6BAYRZbInMi9FSy5Y7TZx2I4Z=k-s256",
                        "display_name": "Young Finn",
                        "link": "https://stackoverflow.com/users/16349676/young-finn"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1625081018,
                    "creation_date": 1625081018,
                    "answer_id": 68200579,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>just go on cmd and type <code>pip intall Tk interface</code>,\ni thinks this is the full true name of tkinter module</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14502032,
                        "reputation": 1,
                        "user_id": 10474926,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/B8BPV.jpg?s=256",
                        "display_name": "Saifullah Bin Khaki",
                        "link": "https://stackoverflow.com/users/10474926/saifullah-bin-khaki"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1622618494,
                    "creation_date": 1622618494,
                    "answer_id": 67800600,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><code>import Tkinter as tk</code></p>\n<p>Notice the <code>T</code>. This was changed in python 3.x</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4752398,
                        "reputation": 2925,
                        "user_id": 5289180,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc64e57b064f2c678d6a595de44b22fa?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "mellifluous",
                        "link": "https://stackoverflow.com/users/5289180/mellifluous"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1590698764,
                    "creation_date": 1590698764,
                    "answer_id": 62074234,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was able to fix this on Amazon Linux 2 with <code>python2.7</code> by running this <code>sudo yum install python-tools -y</code> command.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15685342,
                        "reputation": 9,
                        "user_id": 11318170,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-GCIs_XFcw1A/AAAAAAAAAAI/AAAAAAAAACk/wcG6HEcJwUs/photo.jpg?sz=256",
                        "display_name": "ongja teenage",
                        "link": "https://stackoverflow.com/users/11318170/ongja-teenage"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1554484107,
                    "last_edit_date": 1554484107,
                    "creation_date": 1554482721,
                    "answer_id": 55540040,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>pip shown \nCould not find a version that satisfies the requirement <code>python--tkinter</code> (from versions: )\nNo matching distribution found for <code>python--tkinter</code>\nYou are using <code>pip version 10.0.1</code>, however <code>version 19.0.3</code> is available.\nYou should consider upgrading via the <code>python -m pip install --upgrade pip</code> command.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15577417,
                        "reputation": 9,
                        "user_id": 11238198,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-K-P_rr54t1M/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3reKt65HXShCcuVRnPOk2qsqoRETkQ/mo/photo.jpg?sz=256",
                        "display_name": "Geetha ",
                        "link": "https://stackoverflow.com/users/11238198/geetha"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1553179902,
                    "creation_date": 1553179902,
                    "answer_id": 55283230,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>the below answer in for Windows:</p>\n\n<p>after installing Tk in your windows machine by following the instructions mentioned in the following link (<a href=\"https://tkdocs.com/tutorial/install.html#installwin\" rel=\"nofollow noreferrer\">https://tkdocs.com/tutorial/install.html#installwin</a>), import tkinter as tk (for python3) or import Tkinter as tk (for python2). FYI - 'Tkinter' has been renamed as 'tkinter' in python3. It worked well for me. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 103716,
                        "reputation": 710,
                        "user_id": 277637,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://www.gravatar.com/avatar/d1eca62e08728382199a6ad1cfdbc5f1?s=256&d=identicon&r=PG",
                        "display_name": "costamatrix",
                        "link": "https://stackoverflow.com/users/277637/costamatrix"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1552567362,
                    "creation_date": 1552567362,
                    "answer_id": 55162847,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>to find your package run:</p>\n\n<blockquote>\n  <p>sudo yum search python|grep tk</p>\n</blockquote>\n\n<p>mine was:</p>\n\n<blockquote>\n  <p>yum install python3-tkinter.x86_64</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 7609919,
                        "reputation": 653,
                        "user_id": 5771148,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/I0I2j.jpg?s=256",
                        "display_name": "Khushhal",
                        "link": "https://stackoverflow.com/users/5771148/khushhal"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1539712492,
                    "creation_date": 1539712492,
                    "answer_id": 52841363,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Follow this guide to install \"tkinter\". However now with Python version 3.1 onwards, it is part of the standard python distribution.</p>\n\n<p>You can also install it using <code>sudo apt-get install python3-tk-dbg</code>, if you are in virtualenv. (Same can be done for normal installation, not just virtualenv)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14333962,
                        "reputation": 17,
                        "user_id": 10354013,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6f9fb91b0197600a2453155b92cfff12?s=256&d=identicon&r=PG",
                        "display_name": "Bobbyy Tables",
                        "link": "https://stackoverflow.com/users/10354013/bobbyy-tables"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1536764505,
                    "creation_date": 1536764505,
                    "answer_id": 52298239,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had to install python3-tk manually before it worked (via apt-get)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 220610,
                        "reputation": 866,
                        "user_id": 478098,
                        "user_type": "registered",
                        "accept_rate": 20,
                        "profile_image": "https://www.gravatar.com/avatar/7a90b0706ec5be5f8540c327b629d980?s=256&d=identicon&r=PG",
                        "display_name": "Senthil Kumar Vaithiyanathan",
                        "link": "https://stackoverflow.com/users/478098/senthil-kumar-vaithiyanathan"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1483804806,
                    "creation_date": 1483804806,
                    "answer_id": 41523352,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You should install</p>\n\n<pre><code>apt-get install python-tk\n</code></pre>\n\n<p>This should solve your issue</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5271139,
                        "reputation": 1182,
                        "user_id": 4350834,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://www.gravatar.com/avatar/fb73a99dbec666514479741df1851ed8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Prabhakar",
                        "link": "https://stackoverflow.com/users/4350834/prabhakar"
                    },
                    "is_accepted": true,
                    "score": 28,
                    "last_activity_date": 1475908821,
                    "creation_date": 1475908821,
                    "answer_id": 39929501,
                    "question_id": 39928710,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The Tkinter library comes in default with every Python installation</p>\n\n<p>Try this:</p>\n\n<pre><code>import Tkinter as tk\n</code></pre>\n"
                }
            ]
        },
        {
            "25011078": [
                {
                    "owner": {
                        "account_id": 3568659,
                        "reputation": 3391,
                        "user_id": 2979576,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ac7884a5e98749b68ad29ed6a785a5f1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "James",
                        "link": "https://stackoverflow.com/users/2979576/james"
                    },
                    "is_accepted": true,
                    "score": 178,
                    "last_activity_date": 1675471314,
                    "last_edit_date": 1675471314,
                    "creation_date": 1406623937,
                    "answer_id": 25011492,
                    "question_id": 25011078,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Exploiting the features of the Python language to produce code that is clear, concise and maintainable.</p>\n<p>Pythonic means code that doesn't just get the syntax right, but that follows the conventions of the Python community and uses the language in the way it is intended to be used.</p>\n<p>This is maybe easiest to explain by negative example, as in the linked article from the other answers. Examples of un-Pythonic code often come from users of other languages, who instead of learning a Python programming patterns such as list comprehensions or generator expressions, attempt to crowbar in patterns more commonly used in C or Java. Loops are particularly common examples of this.</p>\n<p>For example, in Java I might use</p>\n<pre><code>for (int index = 0; index &lt; items.length; index++) {\n     items[index].performAction();\n}\n</code></pre>\n<p>In Python we can try and replicate this using <em>while</em> loops, but it would be cleaner to use:</p>\n<pre><code>for item in items:\n  item.perform_action()\n</code></pre>\n<p>Or, even a generator expression</p>\n<pre><code>(item.some_attribute for item in items)\n</code></pre>\n<p>So essentially when someone says something is un-Pythonic, they are saying that the code could be rewritten in a way that is a better fit for Python's coding style.</p>\n<p>Typing <code>import this</code> at the command line gives a summary of Python principles. Less well known is that the source code for <code>import this</code> is decidedly, and by design, un-Pythonic! Take a look at it for an example of what not to do.</p>\n"
                }
            ]
        },
        {
            "9405322": [
                {
                    "owner": {
                        "account_id": 68982,
                        "reputation": 12791,
                        "user_id": 200983,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/1c4d9da319d9b34572717d94b20e11ba?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Matt Alcock",
                        "link": "https://stackoverflow.com/users/200983/matt-alcock"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1485975635,
                    "last_edit_date": 1485975635,
                    "creation_date": 1329956991,
                    "answer_id": 9405418,
                    "question_id": 9405322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use lists unless you want some very specific features that are in the C array libraries.</p>\n\n<p>python really has three primitive data structures</p>\n\n<pre><code>tuple = ('a','b','c')\nlist = ['a','b','c']\ndict = {'a':1, 'b': true, 'c': \"name\"}\n\nlist.append('d') #will add 'd' to the list\nlist[0] #will get the first item 'a'\n\nlist.insert(i, x) # Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).    \n\nlist.pop(2) # will remove items by position (index), remove the 3rd item\nlist.remove(x) # Remove the first item from the list whose value is x.\n\nlist.index(x) # Return the index in the list of the first item whose value is x. It is an error if there is no such item.\n\nlist.count(x) # Return the number of times x appears in the list.\n\nlist.sort(cmp=None, key=None, reverse=False) # Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).\n\nlist.reverse() # Reverse the elements of the list, in place.\n</code></pre>\n\n<p>More on data structures here: \n<a href=\"http://docs.python.org/tutorial/datastructures.html\" rel=\"noreferrer\">http://docs.python.org/tutorial/datastructures.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 143722,
                        "reputation": 39833,
                        "user_id": 352268,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/93fc5e3d9451b0d3fdb552423ceb52cd?s=256&d=identicon&r=PG",
                        "display_name": "Donald Miner",
                        "link": "https://stackoverflow.com/users/352268/donald-miner"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1329956544,
                    "creation_date": 1329956544,
                    "answer_id": 9405365,
                    "question_id": 9405322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Nothing really concrete here and this answer is a bit subjective...</p>\n\n<p>In general, I feel you should use a list just because it is supported in the syntax and is used more widely in the other libraries, etc.</p>\n\n<p>You should use <a href=\"http://docs.python.org/library/array.html\">arrays</a> if you know that everything in the \"list\" will be of the same type and you want to store the data more compactly.</p>\n"
                }
            ]
        },
        {
            "7086990": [
                {
                    "owner": {
                        "account_id": 4775729,
                        "reputation": 1909,
                        "user_id": 6929343,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/2SXNl.jpg?s=256",
                        "display_name": "WinEunuuchs2Unix",
                        "link": "https://stackoverflow.com/users/6929343/wineunuuchs2unix"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1576448978,
                    "last_edit_date": 1576448978,
                    "creation_date": 1576447741,
                    "answer_id": 59348490,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To complement <a href=\"https://stackoverflow.com/a/47079734/6929343\">Goujon's answer</a> consider this list of mixed integers and tuples:</p>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>for f in fills:\n    print (type(f), f)\n    if type(f)==int : print \"INTEGER!!!\"\n</code></pre>\n\n<p>Generates this output:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>(&lt;type 'int'&gt;, 0)\nINTEGER!!!\n(&lt;type 'tuple'&gt;, (62973, 39058, 25708, 102))\n(&lt;type 'int'&gt;, 1)\nINTEGER!!!\n(&lt;type 'tuple'&gt;, (16968, 12069, 3329, 102))\n(&lt;type 'int'&gt;, 2)\nINTEGER!!!\n(&lt;type 'tuple'&gt;, (24939, 62205, 30062, 102))\n(&lt;type 'tuple'&gt;, (32911, 32911, 0, 153))\n(&lt;type 'tuple'&gt;, (32911, 0, 0, 153))\n(&lt;type 'tuple'&gt;, (32911, 0, 32911, 153))\n(&lt;type 'tuple'&gt;, (65535, 0, 0, 153))\n(&lt;type 'tuple'&gt;, (0, 0, 65535, 153))\n(&lt;type 'tuple'&gt;, (0, 32911, 0, 153))\n(&lt;type 'tuple'&gt;, (0, 65535, 65535, 153))\n</code></pre>\n\n<p>So the secret isn't to test for <code>\"int\"</code> character string but, rather test for <code>int</code> keyword instead. If you are like me and migrating from the Bash scripting world, using <code>==</code> tests in the Python scripting world will probably be your first step.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10334696,
                        "reputation": 626,
                        "user_id": 7623277,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/uvVFj.png?s=256",
                        "display_name": "Goujon",
                        "link": "https://stackoverflow.com/users/7623277/goujon"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1509638637,
                    "creation_date": 1509638637,
                    "answer_id": 47079734,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Please note, should you wanted to check your var type in if statement, the construct\n<code>if type(varname) == \"tuple\":</code> won't work. But these will:</p>\n\n<pre><code>if type(varname) is tuple:\nif type(varname) is list:\nif type(varname) is dict:\nif type(varname) is int:\nif type(varname) is str:\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 442669,
                        "reputation": 2248,
                        "user_id": 833402,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9f4668db48f4c03fd03e808b98a1d1f5?s=256&d=identicon&r=PG",
                        "display_name": "J&#252;rgen Strobel",
                        "link": "https://stackoverflow.com/users/833402/j%c3%bcrgen-strobel"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1313547695,
                    "creation_date": 1313547695,
                    "answer_id": 7087309,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>repr(object) will give a textual description of object, which should show type and value. Your can print or view this in the debugger.</p>\n\n<p>For simple values repr usually returns the same string as you would write the value literally in code. For custom classes it gives the class name and object id, or something else if the class'es</p>\n\n<pre><code>__repr__\n</code></pre>\n\n<p>is overridden.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 480645,
                        "reputation": 3525,
                        "user_id": 893994,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6cf7cc253dbd1d12dc5efbe061f655c3?s=256&d=identicon&r=PG",
                        "display_name": "Nicolae Dascalu",
                        "link": "https://stackoverflow.com/users/893994/nicolae-dascalu"
                    },
                    "is_accepted": false,
                    "score": 202,
                    "last_activity_date": 1313547502,
                    "last_edit_date": 1313547502,
                    "creation_date": 1313544557,
                    "answer_id": 7087040,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>isinstance(obj, tuple)\nisinstance(obj, basestring)\nisinstance(obj, int)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 289051,
                        "reputation": 648,
                        "user_id": 589808,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/331cf44d2b44a52473c397654f2ffd32?s=256&d=identicon&r=PG",
                        "display_name": "Darren Yin",
                        "link": "https://stackoverflow.com/users/589808/darren-yin"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1313544425,
                    "creation_date": 1313544425,
                    "answer_id": 7087019,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You probably want to test (assuming Python 2.x) using <code>isinstance(obj, basestring)</code>. You have the options of using <code>isinstance</code>, <code>type</code>, and calling the attribute <code>__class__</code>, but <code>isinstance</code> is likely to be the one you want here. Take a look at <a href=\"http://www.siafoo.net/article/56\" rel=\"noreferrer\">this article</a> for a more thorough treatment of the differences between the three options.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 96260,
                        "reputation": 15112,
                        "user_id": 261718,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/f9005f9e68699af4039f6cb718f932dc?s=256&d=identicon&r=PG",
                        "display_name": "Drake Guan",
                        "link": "https://stackoverflow.com/users/261718/drake-guan"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1313544252,
                    "creation_date": 1313544252,
                    "answer_id": 7087006,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>make use of isinstance ?</p>\n\n<pre><code>if isinstance(var, int):\n\nif isinstance(var, str):\n\nif isinstance(var, tuple):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6403,
                        "reputation": 5198,
                        "user_id": 10751,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/8uZaE.jpg?s=256",
                        "display_name": "Gabriel Ross",
                        "link": "https://stackoverflow.com/users/10751/gabriel-ross"
                    },
                    "is_accepted": true,
                    "score": 43,
                    "last_activity_date": 1313544251,
                    "creation_date": 1313544251,
                    "answer_id": 7087005,
                    "question_id": 7086990,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You just use:</p>\n\n<pre><code>type(varname)\n</code></pre>\n\n<p>which will output int, str, float, etc...</p>\n"
                }
            ]
        },
        {
            "4113307": [
                {
                    "owner": {
                        "account_id": 37811,
                        "reputation": 109507,
                        "user_id": 108205,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/ef459127edc89cc575d80a73cd8c567a?s=256&d=identicon&r=PG",
                        "display_name": "jsbueno",
                        "link": "https://stackoverflow.com/users/108205/jsbueno"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1649339896,
                    "last_edit_date": 1649339896,
                    "creation_date": 1289054740,
                    "answer_id": 4113549,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of <a href=\"https://docs.python.org/3/library/random.html#random.choices\" rel=\"nofollow noreferrer\">Python 3.6, there is <code>random.choices</code></a> for that.</p>\n<p><strong>original answer from 2010</strong>:</p>\n<p>You can also make use this form, which does not create a list arbitrarily big (and can work with either integral or decimal probabilities):</p>\n<pre><code>pos = [(&quot;A&quot;, 30), (&quot;B&quot;, 40), (&quot;C&quot;, 30)]\n\n\nfrom random import uniform\ndef w_choice(seq):\n    total_prob = sum(item[1] for item in seq)\n    chosen = random.uniform(0, total_prob)\n    cumulative = 0\n    for item, probality in seq:\n        cumulative += probality\n        if cumulative &gt; chosen:\n            return item\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 54,
                    "last_activity_date": 1536289776,
                    "last_edit_date": 1536289776,
                    "creation_date": 1289054117,
                    "answer_id": 4113516,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Weights define a probability distribution function (pdf). Random numbers from any such pdf can be generated by <a href=\"http://en.wikipedia.org/wiki/Pseudorandom_number_generator#Non-uniform_generators\" rel=\"noreferrer\">applying its associated inverse cumulative distribution function</a> to uniform random numbers between 0 and 1.</p>\n\n<p>See also this <a href=\"https://stackoverflow.com/questions/977354/generating-non-uniform-random-numbers/977508#977508\">SO explanation</a>, or, as explained by <a href=\"http://en.wikipedia.org/wiki/Cumulative%5Fdistribution%5Ffunction#Inverse\" rel=\"noreferrer\">Wikipedia</a>:</p>\n\n<blockquote>\n  <p>If Y has a U[0,1] distribution then F\u207b\u00b9(Y) is distributed as F. This is\n  used in random number generation using\n  the inverse transform sampling-method.</p>\n</blockquote>\n\n<pre><code>import random\nimport bisect\nimport collections\n\ndef cdf(weights):\n    total = sum(weights)\n    result = []\n    cumsum = 0\n    for w in weights:\n        cumsum += w\n        result.append(cumsum / total)\n    return result\n\ndef choice(population, weights):\n    assert len(population) == len(weights)\n    cdf_vals = cdf(weights)\n    x = random.random()\n    idx = bisect.bisect(cdf_vals, x)\n    return population[idx]\n\nweights=[0.3, 0.4, 0.3]\npopulation = 'ABC'\ncounts = collections.defaultdict(int)\nfor i in range(10000):\n    counts[choice(population, weights)] += 1\nprint(counts)\n\n# % test.py\n# defaultdict(&lt;type 'int'&gt;, {'A': 3066, 'C': 2964, 'B': 3970})\n</code></pre>\n\n<p>The <code>choice</code> function above uses <code>bisect.bisect</code>, so selection of a weighted random variable is done in <code>O(log n)</code> where <code>n</code> is the length of <code>weights</code>. </p>\n\n<hr>\n\n<p>Note that as of version 1.7.0, NumPy has a Cythonized <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.choice.html\" rel=\"noreferrer\">np.random.choice function</a>. For example, this generates 1000 samples from the population <code>[0,1,2,3]</code> with weights <code>[0.1, 0.2, 0.3, 0.4]</code>:</p>\n\n<pre><code>import numpy as np\nnp.random.choice(4, 1000, p=[0.1, 0.2, 0.3, 0.4])\n</code></pre>\n\n<p><code>np.random.choice</code> also has a <code>replace</code> parameter for sampling with or without replacement.</p>\n\n<hr>\n\n<p>A theoretically better algorithm is the <a href=\"http://en.wikipedia.org/wiki/Alias_method\" rel=\"noreferrer\">Alias Method</a>. It builds a table which requires <code>O(n)</code> time, but after that,  samples can be drawn in <code>O(1)</code> time. So, if you need to draw many samples, in theory the Alias Method may be faster. There is a Python implementation of the Walker Alias Method <a href=\"http://code.activestate.com/recipes/576564-walkers-alias-method-for-random-objects-with-diffe/\" rel=\"noreferrer\">here</a>, and a <a href=\"https://gist.github.com/ntamas/1109133\" rel=\"noreferrer\">numpy version here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 99313,
                        "reputation": 39707,
                        "user_id": 268330,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/ae0761959dd413a286ad76ef66e5e523?s=256&d=identicon&r=PG",
                        "display_name": "Jeet",
                        "link": "https://stackoverflow.com/users/268330/jeet"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1289087644,
                    "last_edit_date": 1289087644,
                    "creation_date": 1289068113,
                    "answer_id": 4114490,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There are some good solutions offered here, but I would suggest that you look at <a href=\"http://eli.thegreenplace.net/2010/01/22/weighted-random-generation-in-python/\" rel=\"nofollow\">Eli Bendersky's thorough discussion</a> of this issue, which compares various algorithms to achieve this (with implementations in Python) before choosing one.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 47917,
                        "reputation": 1597,
                        "user_id": 142153,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hEXAh.jpg?s=256",
                        "display_name": "Jeff Bradberry",
                        "link": "https://stackoverflow.com/users/142153/jeff-bradberry"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1289062699,
                    "last_edit_date": 1289062699,
                    "creation_date": 1289054183,
                    "answer_id": 4113519,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Try this:</p>\n\n<pre><code>import random\nfrom decimal import Decimal\n\npos = {'A': Decimal(\"0.3\"), 'B': Decimal(\"0.4\"), 'C': Decimal(\"0.3\")}\nchoice = random.random()\nF_x = 0\nfor k, p in pos.iteritems():\n    F_x += p\n    if choice &lt;= F_x:\n        x = k\n        break\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 46333,
                        "reputation": 57304,
                        "user_id": 136829,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e92146e270ae11efac6405927b6439af?s=256&d=identicon&r=PG",
                        "display_name": "Glenn Maynard",
                        "link": "https://stackoverflow.com/users/136829/glenn-maynard"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1289052267,
                    "creation_date": 1289052267,
                    "answer_id": 4113400,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here's a class to expose a bunch of items with relative probabilities, without actually expanding the list:</p>\n\n<pre><code>import bisect\nclass WeightedTuple(object):\n    \"\"\"\n    &gt;&gt;&gt; p = WeightedTuple({'A': 2, 'B': 1, 'C': 3})\n    &gt;&gt;&gt; len(p)\n    6\n    &gt;&gt;&gt; p[0], p[1], p[2], p[3], p[4], p[5]\n    ('A', 'A', 'B', 'C', 'C', 'C')\n    &gt;&gt;&gt; p[-1], p[-2], p[-3], p[-4], p[-5], p[-6]\n    ('C', 'C', 'C', 'B', 'A', 'A')\n    &gt;&gt;&gt; p[6]\n    Traceback (most recent call last):\n    ...\n    IndexError\n    &gt;&gt;&gt; p[-7]\n    Traceback (most recent call last):\n    ...\n    IndexError\n    \"\"\"\n    def __init__(self, items):\n        self.indexes = []\n        self.items = []\n        next_index = 0\n        for key in sorted(items.keys()):\n            val = items[key]\n            self.indexes.append(next_index)\n            self.items.append(key)\n            next_index += val\n\n        self.len = next_index\n\n    def __getitem__(self, n):\n        if n &lt; 0:\n            n = self.len + n\n        if n &lt; 0 or n &gt;= self.len:\n            raise IndexError\n\n        idx = bisect.bisect_right(self.indexes, n)\n        return self.items[idx-1]\n\n    def __len__(self):\n        return self.len\n</code></pre>\n\n<p>Now, just say:</p>\n\n<pre><code>data = WeightedTuple({'A': 30, 'B': 40, 'C': 30})\nrandom.choice(data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1289051073,
                    "creation_date": 1289051073,
                    "answer_id": 4113328,
                    "question_id": 4113307,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Not... so much...</p>\n\n<pre><code>pos = ['A'] * 3 + ['B'] * 4 + ['C'] * 3\nprint random.choice(pos)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pos = {'A': 3, 'B': 4, 'C': 3}\nprint random.choice([x for x in pos for y in range(pos[x])])\n</code></pre>\n"
                }
            ]
        },
        {
            "4752294": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user395760"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1393624901,
                    "last_edit_date": 1393624901,
                    "creation_date": 1295556060,
                    "answer_id": 4752327,
                    "question_id": 4752294,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Many ways come to mind. <del>You could turn it in a <code>set</code> (which filters out duplicates) and check for length of one</del>Edit: As another poster noted, this only works with hashable types; I revoke the suggestion as it has worse performance <em>and</em> is less general.</p>\n\n<p>You could use a generator expression: <code>all(items[0] == item for item in items)</code>, which would short-circuit (i.e. return false as soon as the predicate fails for an item instead of going on).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 88931,
                        "reputation": 70019,
                        "user_id": 245706,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/e714b10afcc8d86b0fcfe79c02e6c61b?s=256&d=identicon&r=PG",
                        "display_name": "AndiDog",
                        "link": "https://stackoverflow.com/users/245706/andidog"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1295556518,
                    "creation_date": 1295556518,
                    "answer_id": 4752409,
                    "question_id": 4752294,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Using a <code>set</code> as pointed out by Greg Hewgill is a great solution. Here's another one that's more lazy, so if one pair of the elements are not equal, the rest will not be compared. This might be slower than the <code>set</code> solution when comparing all items, but didn't benchmark it.</p>\n\n<pre><code>l = [1, 1, 1]\nall(l[i] == l[i+1] for i in range(len(l)-1))\n</code></pre>\n\n<p>Note the special case <code>all([]) == True</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 680,
                        "reputation": 989276,
                        "user_id": 893,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
                        "display_name": "Greg Hewgill",
                        "link": "https://stackoverflow.com/users/893/greg-hewgill"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1295556071,
                    "creation_date": 1295556071,
                    "answer_id": 4752329,
                    "question_id": 4752294,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; a = [1, 1, 1, 1]\n&gt;&gt;&gt; len(set(a))\n1\n</code></pre>\n\n<p>Note that this method assumes that each element in your list can be placed into a set. Some types, such as the mutable types, cannot be placed into a set.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 218448,
                        "reputation": 5894,
                        "user_id": 474772,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/543126f859fa173bba7ad18b636ef59d?s=256&d=identicon&r=PG",
                        "display_name": "Mariy",
                        "link": "https://stackoverflow.com/users/474772/mariy"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1295556024,
                    "creation_date": 1295556024,
                    "answer_id": 4752318,
                    "question_id": 4752294,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; l = [1, 1, 1, 1]\n&gt;&gt;&gt; all(map(lambda x: x == l[0], l))\nTrue\n</code></pre>\n"
                }
            ]
        },
        {
            "48366506": [
                {
                    "owner": {
                        "account_id": 2212301,
                        "reputation": 19064,
                        "user_id": 1953800,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/4173076e5187c82e74379de9aeb00aa4?s=256&d=identicon&r=PG",
                        "display_name": "Alex",
                        "link": "https://stackoverflow.com/users/1953800/alex"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1516536533,
                    "last_edit_date": 1516536533,
                    "creation_date": 1516535984,
                    "answer_id": 48366525,
                    "question_id": 48366506,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.mean.html\" rel=\"noreferrer\"><code>.mean</code></a>. By specifying the axis you can take the average across the row or the column.</p>\n\n<pre><code>df['average'] = df.mean(axis=1)\ndf\n</code></pre>\n\n<p>returns</p>\n\n<pre><code>       salary_1  salary_2  salary_3     average\n0       230       235       210  225.000000\n1       345       375       385  368.333333\n2       222       292       260  258.000000\n</code></pre>\n\n<p>If you only want the mean of a few you can <a href=\"https://pandas.pydata.org/pandas-docs/stable/indexing.html\" rel=\"noreferrer\">select only those columns</a>. E.g.</p>\n\n<pre><code>df['average_1_3'] = df[['salary_1', 'salary_3']].mean(axis=1)\ndf\n</code></pre>\n\n<p>returns</p>\n\n<pre><code>   salary_1  salary_2  salary_3  average_1_3\n0       230       235       210        220.0\n1       345       375       385        365.0\n2       222       292       260        241.0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11615344,
                        "reputation": 997,
                        "user_id": 8508289,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3QlzW.jpg?s=256",
                        "display_name": "PraneetNigam",
                        "link": "https://stackoverflow.com/users/8508289/praneetnigam"
                    },
                    "is_accepted": true,
                    "score": 52,
                    "last_activity_date": 1516536361,
                    "creation_date": 1516536361,
                    "answer_id": 48366573,
                    "question_id": 48366506,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>an easy way to solve this problem is shown below :</p>\n\n<pre><code>col = df.loc[: , \"salary_1\":\"salary_3\"]\n</code></pre>\n\n<p>where \"salary_1\" is the start column name and \"salary_3\" is the end column name</p>\n\n<pre><code>df['salary_mean'] = col.mean(axis=1)\ndf\n</code></pre>\n\n<p><strong>This will give you a new dataframe with a new column that shows the mean of all the other columns</strong>\nThis approach is really helpful when you are having a large set of columns or also helpful when you need to perform on only some selected columns not on all.</p>\n"
                }
            ]
        },
        {
            "18686903": [
                {
                    "owner": {
                        "account_id": 372833,
                        "reputation": 88817,
                        "user_id": 722121,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=256&d=identicon&r=PG",
                        "display_name": "Gareth Latty",
                        "link": "https://stackoverflow.com/users/722121/gareth-latty"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1560101051,
                    "last_edit_date": 1560101051,
                    "creation_date": 1378663296,
                    "answer_id": 18686915,
                    "question_id": 18686903,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.x, <a href=\"http://docs.python.org/3.1/library/stdtypes.html#dict.keys\" rel=\"noreferrer\"><code>dict.keys()</code></a> does not return a list, it returns an iterable (specifically, <a href=\"http://docs.python.org/3.1/library/stdtypes.html#dictionary-view-objects\" rel=\"noreferrer\">a dictionary view</a>). It is worth noting that <code>dict</code> itself is also an iterable of the keys.</p>\n\n<p>If you want to obtain the first key, use <code>next(iter(dict))</code> instead. (Note that before Python 3.6 dictionaries were unordered, so the 'first' element was an arbitrary one. Since 3.6 it will be based on insertion order. If you need that behaviour in older versions or with cross-version compatibility, you can use <a href=\"https://docs.python.org/3.5/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>).</p>\n\n<p>This works quite simply: we take the iterable from the dictionary view with <code>iter()</code>, then use <code>next()</code> to advance it by one and get the first key.</p>\n\n<p>If you need to iterate over the keys\u2014then there is definitely no need to construct a list:</p>\n\n<pre><code>for key in dict:\n    ...\n</code></pre>\n\n<p>These are all advantageous when compared to using <code>list()</code> as it means a list isn't constructed - making it faster and more memory efficient (hence why the default behaviour of <code>keys()</code> was changed in 3.x). Even in Python 2.x you would be better off doing <code>next(iter(dict.iterkeys())</code>.</p>\n\n<p>Note all these things apply to <code>dict.values()</code> and <code>dict.items()</code> as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8399314,
                        "reputation": 548,
                        "user_id": 7955763,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-gOhUAODGnt4/AAAAAAAAAAI/AAAAAAAAHwI/IDf6zFz7EVM/photo.jpg?sz=256",
                        "display_name": "Tim Pozza",
                        "link": "https://stackoverflow.com/users/7955763/tim-pozza"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1528398596,
                    "creation_date": 1528398596,
                    "answer_id": 50748596,
                    "question_id": 18686903,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've had success turning the iterables taken from a dictionary into a list.\nSo, for dic.keys(), dic.values(), and dic.items(), in Python3.6, you can:</p>\n\n<pre><code>dic = {'a':3, 'b':2, 'c':3}\nprint(dic)\n\ndictkeys = dic.keys() # or values/items\nprint(dictkeys)\n\nkeylist = []\nkeylist.extend(iter(dictkeys)) # my big revelation\nprint('keylist', keylist)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 112,
                    "last_activity_date": 1399918510,
                    "last_edit_date": 1399918510,
                    "creation_date": 1378663447,
                    "answer_id": 18686943,
                    "question_id": 18686903,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>dict.keys()</code> is a dictionary view. Just use <code>list()</code> directly on the dictionary instead if you need a list of keys, item 0 will be the first key in the (arbitrary) dictionary order:</p>\n\n<pre><code>list(prob)[0]\n</code></pre>\n\n<p>or better still just use:</p>\n\n<pre><code>next(iter(dict))\n</code></pre>\n\n<p>Either method works in both Python 2 <em>and</em> 3 and the <code>next()</code> option is certainly more efficient for Python 2 than using <code>dict.keys()</code>. Note however that dictionaries have <em>no</em> set order and you will <em>not</em> know what key will be listed first.</p>\n\n<p>It looks as if you are trying to find the <em>maximum</em> key instead, use <code>max()</code> with <code>dict.get</code>:</p>\n\n<pre><code>def Ciudad(prob):\n    return max(prob, key=prob.get)\n</code></pre>\n\n<p>The function result is certainly going to be the same for any given <code>prob</code> dictionary, as your code doesn't differ in codepaths between the random number comparison branches of the <code>if</code> statement.</p>\n"
                }
            ]
        },
        {
            "2360249": [
                {
                    "owner": {
                        "account_id": 41301,
                        "reputation": 495326,
                        "user_id": 119963,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/tBCc0.jpg?s=256",
                        "display_name": "Cascabel",
                        "link": "https://stackoverflow.com/users/119963/cascabel"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1368633578,
                    "last_edit_date": 1368633578,
                    "creation_date": 1267493300,
                    "answer_id": 2360324,
                    "question_id": 2360249,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While Micha\u0142's post explains what smartindent does, you can do a lot better than just turning it off. You could configure it more to your liking, or better yet, let Vim pick better indentation for you. With the following in your vimrc instead of other indent settings:</p>\n\n<pre><code>filetype indent on\n</code></pre>\n\n<p>Vim will automatically use the proper indent plugin for python. This is way better than just not de-indenting a # line - pretty much everything should be properly indented.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 401282,
                        "reputation": 8568,
                        "user_id": 767752,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/8d870f414d0a3282e8eb22d4a3d8ca16?s=256&d=identicon&r=PG",
                        "display_name": "Michael H&#228;rtl",
                        "link": "https://stackoverflow.com/users/767752/michael-h%c3%a4rtl"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1366031033,
                    "creation_date": 1366031033,
                    "answer_id": 16015883,
                    "question_id": 2360249,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For some unkown reason the above behavior was caused when i had <code>cindent</code> on. Turning it off fixed it for me. None of the other fixes above helped.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 395405,
                        "reputation": 70393,
                        "user_id": 758345,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/19136cbc4a30ad881e9d95275e9eb5a0?s=256&d=identicon&r=PG",
                        "display_name": "Chronial",
                        "link": "https://stackoverflow.com/users/758345/chronial"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1364602463,
                    "creation_date": 1364602463,
                    "answer_id": 15713388,
                    "question_id": 2360249,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you install this script, you will get <strong>proper</strong> python (pep8) indenting:</p>\n\n<p><a href=\"http://www.vim.org/scripts/script.php?script_id=974\" rel=\"nofollow\">http://www.vim.org/scripts/script.php?script_id=974</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 395311,
                        "reputation": 11473,
                        "user_id": 758202,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/hZngh.jpg?s=256",
                        "display_name": "zzart",
                        "link": "https://stackoverflow.com/users/758202/zzart"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1341047740,
                    "creation_date": 1341047740,
                    "answer_id": 11272950,
                    "question_id": 2360249,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can try an option only for python files:</p>\n\n<pre><code>autocmd BufRead *.py inoremap # X&lt;c-h&gt;#&lt;space&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 82871,
                        "reputation": 84271,
                        "user_id": 232707,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bd08ebe63b175a3f2e11ae9edf796b2a?s=256&d=identicon&r=PG",
                        "display_name": "Micha\u0142 Marczyk",
                        "link": "https://stackoverflow.com/users/232707/micha%c5%82-marczyk"
                    },
                    "is_accepted": true,
                    "score": 63,
                    "last_activity_date": 1267492374,
                    "creation_date": 1267492374,
                    "answer_id": 2360284,
                    "question_id": 2360249,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Setting <code>smartindent</code> on makes Vim behave like you describe for me, whereas with <code>nosmartindent</code> (which is what I tend to use) it behaves like you'd prefer it to.</p>\n\n<p>Update: From the docs on <code>smartindent</code>:</p>\n\n<blockquote>\n  <p>When typing '#' as the first character in a new line, the indent for\n  that line is removed, the '#' is put in the first column.  The indent\n  is restored for the next line.  If you don't want this, use this\n  mapping: \":inoremap # X^H#\", where ^H is entered with CTRL-V CTRL-H.\n  When using the \">>\" command, lines starting with '#' are not shifted\n  right.</p>\n</blockquote>\n\n<p>That seems to be it.</p>\n\n<hr>\n\n<p>Update: Probably no need to bother with the following... I'll leave it here for the added informational value. ;-)</p>\n\n<p>If setting <code>nosmartindent</code> doesn't help, perhaps you could use the <code>:set</code> command -- with no parameters -- to obtain the list of all settings in effect in your Vim session, then paste it somewhere (on <a href=\"http://pastie.org/\" rel=\"noreferrer\">Pastie</a> perhaps). There's a few other options which affect automatic indentation, as far as I remember.</p>\n"
                }
            ]
        },
        {
            "22856638": [
                {
                    "owner": {
                        "account_id": 9630,
                        "reputation": 48477,
                        "user_id": 17875,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9589a0b8efc6bb869bedfa51e7d28f16?s=256&d=identicon&r=PG",
                        "display_name": "Eevee",
                        "link": "https://stackoverflow.com/users/17875/eevee"
                    },
                    "is_accepted": true,
                    "score": 93,
                    "last_activity_date": 1396598177,
                    "creation_date": 1396598177,
                    "answer_id": 22856817,
                    "question_id": 22856638,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I used to use Nose because it was the default with Pylons.  I didn't like it at all.  It had configuration tendrils in multiple places, virtually everything seemed to be done with an underdocumented plugin which made it all even more indirect and confusing, and because it did unittest tests by default, it regularly broke with Unicode tracebacks, hiding the sources of errors.</p>\n\n<p>I've been pretty happy with py.test the last couple years.  Being able to just write a test with <code>assert</code> out of the box makes me hate writing tests <em>way</em> less, and hacking whatever I need atop the core has been pretty easy.  Rather than a fixed plugin interface it just has piles of hooks, and pretty understandable source code should you need to dig further.  I even wrote an adapter for running Testify tests under py.test, and had more trouble with Testify than with py.test.</p>\n\n<p>That said, I hear nose has plugins for classless tests and assert introspection nowadays, so you'll probably do fine with either.  I still feel like I can hit the ground running with py.test, though, and I can understand what's going on when it breaks.</p>\n"
                }
            ]
        },
        {
            "4514751": [
                {
                    "owner": {
                        "account_id": 95852,
                        "reputation": 13601,
                        "user_id": 260839,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/a6557bf2e72668e75bc215c882620836?s=256&d=identicon&r=PG",
                        "display_name": "amicitas",
                        "link": "https://stackoverflow.com/users/260839/amicitas"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1398996687,
                    "last_edit_date": 1398996687,
                    "creation_date": 1331922321,
                    "answer_id": 9742618,
                    "question_id": 4514751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are using python 2.7 or later, the easiest way to do this is to use the <a href=\"http://docs.python.org/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\"><code>subprocess.check_output()</code></a> command.  Here is an example:</p>\n\n<pre><code>output = subprocess.check_output('ls')\n</code></pre>\n\n<p>To also redirect stderr you can use the following:</p>\n\n<pre><code>output = subprocess.check_output('ls', stderr=subprocess.STDOUT)\n</code></pre>\n\n<p><br /><br />\nIn the case that you want to pass parameters to the command, you can either use a list or use invoke a shell and use a single string.</p>\n\n<pre><code>output = subprocess.check_output(['ls', '-a'])\noutput = subprocess.check_output('ls -a', shell=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32380,
                        "reputation": 138039,
                        "user_id": 89806,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://www.gravatar.com/avatar/ec1badc96f503965770beaaa2fb29c16?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "moinudin",
                        "link": "https://stackoverflow.com/users/89806/moinudin"
                    },
                    "is_accepted": true,
                    "score": 169,
                    "last_activity_date": 1293065038,
                    "last_edit_date": 1495542877,
                    "creation_date": 1293061780,
                    "answer_id": 4514776,
                    "question_id": 4514751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To get the output of <code>ls</code>, use <a href=\"http://docs.python.org/library/subprocess.html#subprocess.PIPE\" rel=\"noreferrer\"><code>stdout=subprocess.PIPE</code></a>.</p>\n\n<pre><code>&gt;&gt;&gt; proc = subprocess.Popen('ls', stdout=subprocess.PIPE)\n&gt;&gt;&gt; output = proc.stdout.read()\n&gt;&gt;&gt; print output\nbar\nbaz\nfoo\n</code></pre>\n\n<p>The command <code>cdrecord --help</code> outputs to stderr, so you need to pipe that indstead. You should also break up the command into a list of tokens as I've done below, or the alternative is to pass the <code>shell=True</code> argument but this fires up a fully-blown shell which can be dangerous if you don't control the contents of the command string.</p>\n\n<pre><code>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stderr=subprocess.PIPE)\n&gt;&gt;&gt; output = proc.stderr.read()\n&gt;&gt;&gt; print output\nUsage: wodim [options] track1...trackn\nOptions:\n    -version    print version information and exit\n    dev=target  SCSI target to use as CD/DVD-Recorder\n    gracetime=# set the grace time before starting to write to #.\n...\n</code></pre>\n\n<p>If you have a command that outputs to both stdout and stderr and you want to merge them, you can do that by piping stderr to stdout and then catching stdout.</p>\n\n<pre><code>subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n</code></pre>\n\n<p>As mentioned by <a href=\"https://stackoverflow.com/questions/4514751/pipe-subprocess-standard-output-to-a-variable/4514905#4514905\">Chris Morgan</a>, you should be using <code>proc.communicate()</code> instead of <code>proc.read()</code>.</p>\n\n<pre><code>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n&gt;&gt;&gt; out, err = proc.communicate()\n&gt;&gt;&gt; print 'stdout:', out\nstdout: \n&gt;&gt;&gt; print 'stderr:', err\nstderr:Usage: wodim [options] track1...trackn\nOptions:\n    -version    print version information and exit\n    dev=target  SCSI target to use as CD/DVD-Recorder\n    gracetime=# set the grace time before starting to write to #.\n...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 232294,
                        "reputation": 90313,
                        "user_id": 497043,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=256&d=identicon&r=PG",
                        "display_name": "Chris Morgan",
                        "link": "https://stackoverflow.com/users/497043/chris-morgan"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1293063425,
                    "creation_date": 1293063425,
                    "answer_id": 4514905,
                    "question_id": 4514751,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>With <code>a = subprocess.Popen(\"cdrecord --help\",stdout = subprocess.PIPE)\n</code>, you need to either use a list or use <code>shell=True</code>;</p>\n\n<p>Either of these will work.  The former is preferable.</p>\n\n<pre><code>a = subprocess.Popen(['cdrecord', '--help'], stdout=subprocess.PIPE)\n\na = subprocess.Popen('cdrecord --help', shell=True, stdout=subprocess.PIPE)\n</code></pre>\n\n<p>Also, instead of using <code>Popen.stdout.read</code>/<code>Popen.stderr.read</code>, you should use <code>.communicate()</code> (refer to the subprocess documentation for why).</p>\n\n<pre><code>proc = subprocess.Popen(['cdrecord', '--help'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nstdout, stderr = proc.communicate()\n</code></pre>\n"
                }
            ]
        },
        {
            "11486148": [
                {
                    "owner": {
                        "account_id": 119329,
                        "reputation": 5877,
                        "user_id": 310953,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/d46aefab149c1624dd0f36c7f3001bcd?s=256&d=identicon&r=PG",
                        "display_name": "Phil Cooper",
                        "link": "https://stackoverflow.com/users/310953/phil-cooper"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1552609021,
                    "last_edit_date": 1552609021,
                    "creation_date": 1342289556,
                    "answer_id": 11486177,
                    "question_id": 11486148,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You pretty much got it with the <code>_1</code>:</p>\n\n<ul>\n<li>one leading underscore means, yes, this exists, and you can look at it, but another method or property is what you should use instead; consult the docs.</li>\n<li>two leading underscores means, danger!  Do not touch or you will seriously break the state and stability of things.  Please stay away; if you mess with it, it's all your own fault if something goes wrong. </li>\n</ul>\n\n<p><em>Note:</em> Using <code>__</code> is more than just a naming convention as it causes <a href=\"http://python.robasworld.com/private-member-name-mangling/\" rel=\"nofollow noreferrer\">name mangling</a>. This renames the variable to <code>_ClassName__var</code>. That makes the variable/method harder to use outside of the class. It's primarily done to avoid accidental overrides of methods in parent classes by inherited classes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 39409,
                        "reputation": 48704,
                        "user_id": 113632,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=256&d=identicon&r=PG",
                        "display_name": "dimo414",
                        "link": "https://stackoverflow.com/users/113632/dimo414"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1453128811,
                    "last_edit_date": 1495540471,
                    "creation_date": 1342290062,
                    "answer_id": 11486229,
                    "question_id": 11486148,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a Python coding convention, yes.  Best practice is to use <code>_</code> where you don't care about the value being set, for example when <a href=\"https://www.python.org/dev/peps/pep-3132/\" rel=\"noreferrer\">unpacking values from a tuple</a>. Sometimes, however, needing this is a sign you may be doing something else in a non-Pythonic way.</p>\n\n<p><code>_</code> as a prefix is used to indicate \"private\" methods and variables, like Phil Cooper said.  Use this to indicate that these methods are not part of any public contract other modules can or should rely on.</p>\n\n<p>Some references:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5893163/underscore-in-python\">What is the purpose of the single underscore &quot;_&quot; variable in Python?</a></li>\n<li><a href=\"https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers\" rel=\"noreferrer\">Underscores as function prefixes</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python\">What is the meaning of a single- and a double-underscore before an object name?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3443043/why-does-python-use-two-underscores-for-certain-things\">Why does python use two underscores for certain things?</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1422315,
                        "reputation": 20720,
                        "user_id": 1346705,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/c453d0219aa8992eeace9f5caeafa045?s=256&d=identicon&r=PG",
                        "display_name": "pepr",
                        "link": "https://stackoverflow.com/users/1346705/pepr"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1342291917,
                    "last_edit_date": 1342291917,
                    "creation_date": 1342291156,
                    "answer_id": 11486373,
                    "question_id": 11486148,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let's start with...</p>\n\n<pre><code>&gt;&gt;&gt; import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\n...\nReadability counts.\nSpecial cases aren't special enough to break the rules.\n</code></pre>\n\n<p>I recommend to choose the approach that is not questionable. It usually means something that is self-explainable, simple and understandable. If you insist on expressing the <em>not used</em>, what about the name <code>unused</code> or <code>dummy</code>? </p>\n\n<p>Should the <code>_</code> be more <em>invisible</em>, hidden or even the candidate for to be overlooked, if possible?</p>\n\n<p>For Perl users, the <code>_</code> means something else than <em>unused</em>. Even though you may not care about the Perl users, what would the <code>_</code> mean for you if you never met it before?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 354053,
                        "reputation": 142727,
                        "user_id": 1209279,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=256&d=identicon&r=PG",
                        "display_name": "Levon",
                        "link": "https://stackoverflow.com/users/1209279/levon"
                    },
                    "is_accepted": true,
                    "score": 39,
                    "last_activity_date": 1342290408,
                    "last_edit_date": 1342290408,
                    "creation_date": 1342289542,
                    "answer_id": 11486174,
                    "question_id": 11486148,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Not sure if this is a Eclipse thing or not, but I generally use <code>'_'</code> to denote values I don't care about (i.e., return values in tuples, or index values in <code>for</code>-loops).</p>\n\n<p>Of course you can always resort to old stand-bys like naming variables <code>dummy</code> or <code>ignore</code>.</p>\n\n<p>I'm not sure if <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a> mentions anything about this, might be worth peeking into.</p>\n"
                }
            ]
        },
        {
            "8856523": [
                {
                    "owner": {
                        "account_id": 14567808,
                        "reputation": 11740,
                        "user_id": 10521959,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DymiN.png?s=256",
                        "display_name": "Yaakov Bressler",
                        "link": "https://stackoverflow.com/users/10521959/yaakov-bressler"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1604106242,
                    "creation_date": 1604106242,
                    "answer_id": 64617467,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>For anyone checking this using python 3:</strong></p>\n<p>If you want to print the following output <code>&quot;100% correct&quot;</code>:</p>\n<p><strong>python 3.8:</strong> <code>print(&quot;100% correct&quot;)</code><br>\n<strong>python 3.7 and less:</strong> <code>print(&quot;100%% correct&quot;)</code></p>\n<hr />\n<p><strong>A neat programming workaround for compatibility across diff versions of python is shown below:</strong></p>\n<blockquote>\n<p><em><strong>Note</strong>: If you have to use this, you're probably experiencing many other errors... I'd encourage you to upgrade / downgrade python in relevant machines so that they are all compatible.</em><br><br>\n<em>DevOps is a notable exception to the above -- implementing the following code would indeed be appropriate for specific DevOps / Debugging scenarios.</em></p>\n</blockquote>\n<pre><code>import sys\n\nif version_info.major==3:\n    if version_info.minor&gt;=8:\n        my_string = &quot;100% correct&quot;\n    else:\n        my_string = &quot;100%% correct&quot;\n\n# Finally\nprint(my_string)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1884216,
                        "reputation": 6011,
                        "user_id": 1703772,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/963bc9ac37c31c3f6bff29dc60b8891b?s=256&d=identicon&r=PG",
                        "display_name": "NuclearPeon",
                        "link": "https://stackoverflow.com/users/1703772/nuclearpeon"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1555543630,
                    "creation_date": 1555543630,
                    "answer_id": 55737281,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was using python interpolation and forgot the ending <code>s</code> character:</p>\n\n<pre><code>a = dict(foo='bar')\nprint(\"What comes after foo? %(foo)\" % a) # Should be %(foo)s\n</code></pre>\n\n<p>Watch those typos.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 244926,
                        "reputation": 3152,
                        "user_id": 518085,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7e799329be559fe07128e696dabeec0f?s=256&d=identicon&r=PG",
                        "display_name": "Alan Viars",
                        "link": "https://stackoverflow.com/users/518085/alan-viars"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1338233777,
                    "creation_date": 1338233777,
                    "answer_id": 10789642,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You might have a typo.. In my case I was saying %w where I meant to say %s.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222366,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1326549866,
                    "creation_date": 1326549866,
                    "answer_id": 8862687,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Well, why do you have <code>%20</code> url-quoting escapes in a formatting string in first place? Ideally you'd do the interpolation formatting first:</p>\n\n<pre><code>formatting_template = 'Hello World%s'\ntext = '!'\nfull_string = formatting_template % text\n</code></pre>\n\n<p>Then you url quote it afterwards:</p>\n\n<pre><code>result = urllib.quote(full_string)\n</code></pre>\n\n<p>That is better because it would quote all url-quotable things in your string, including stuff that is in the <code>text</code> part.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 218741,
                        "reputation": 11915,
                        "user_id": 475229,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/0952c4a2c08421aecb397d3a81545f6e?s=256&d=identicon&r=PG",
                        "display_name": "jgritty",
                        "link": "https://stackoverflow.com/users/475229/jgritty"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1326485389,
                    "creation_date": 1326485389,
                    "answer_id": 8856631,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could escape the % in %20 like so:</p>\n\n<pre><code>print \"Hello%%20World%s\" %\"!\"\n</code></pre>\n\n<p>or you could try using the string formatting routines instead, like:</p>\n\n<pre><code>print \"Hello%20World{0}\".format(\"!\")\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/string.html#formatstrings\" rel=\"noreferrer\">http://docs.python.org/library/string.html#formatstrings</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 292061,
                        "reputation": 55844,
                        "user_id": 594589,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/0f9d5953607841d6a50b843a1107e51e?s=256&d=identicon&r=PG",
                        "display_name": "dm03514",
                        "link": "https://stackoverflow.com/users/594589/dm03514"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1326485033,
                    "last_edit_date": 1495535471,
                    "creation_date": 1326485033,
                    "answer_id": 8856556,
                    "question_id": 8856523,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could escape the % with another % so <code>%%20</code></p>\n\n<p>This is a similar relevant question <a href=\"https://stackoverflow.com/questions/2847272/python-string-formatting-when-string-contains-s-without-escaping\">Python string formatting when string contains &quot;%s&quot; without escaping</a></p>\n"
                }
            ]
        },
        {
            "38847441": [
                {
                    "owner": {
                        "account_id": 5649381,
                        "reputation": 3710,
                        "user_id": 4470542,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://lh4.googleusercontent.com/-GasOcKKzDWg/AAAAAAAAAAI/AAAAAAAAAq0/K343vkANw1E/photo.jpg?sz=256",
                        "display_name": "NBajanca",
                        "link": "https://stackoverflow.com/users/4470542/nbajanca"
                    },
                    "is_accepted": true,
                    "score": 31,
                    "last_activity_date": 1546863735,
                    "last_edit_date": 1633592092,
                    "creation_date": 1470740779,
                    "answer_id": 38849047,
                    "question_id": 38847441,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>First of all you should think on what errors you want to expose:</p>\n<ul>\n<li><p>Usually 4xx errors (Errors that are attributed to the client-side) are disclosed so the user may correct the request.</p>\n</li>\n<li><p>On the other side, 5xx errors (Errors that are attributed to the server-side) are usually only presented without information. In my opinion for those you should use tools like <a href=\"https://getsentry.com/welcome/\" rel=\"noreferrer\">Sentry</a> do monitor and resolve this errors, that may have security issues embedded in them.</p>\n</li>\n</ul>\n<p>Having this is mind in my opinion for a correct Ajax request you should return a status code and then some json to help understand what happened like a message and an explanation (when applicable).</p>\n<p>If your objective is to use ajax to submit information I suggest setting a <a href=\"https://docs.djangoproject.com/en/1.10/topics/forms/\" rel=\"noreferrer\">form</a> for what you want. This way you get past some of the validation process with ease. I will assume the case is this in the example.</p>\n<p><strong>First</strong> - Is the request correct?</p>\n<pre><code>def test_view(request):\n    message = None\n    explanation = None\n    status_code = 500\n    # First, is the request correct?\n    if request.is_ajax() and request.method == &quot;POST&quot;:\n        ....\n    else: \n        status_code = 400\n        message = &quot;The request is not valid.&quot;\n        # You should log this error because this usually means your front end has a bug.\n        # do you whant to explain anything?\n        explanation = &quot;The server could not accept your request because it was not valid. Please try again and if the error keeps happening get in contact with us.&quot;\n\n    return JsonResponse({'message':message,'explanation':explanation}, status=status_code)\n</code></pre>\n<p><strong>Second</strong> - Are there errors in the form?</p>\n<pre><code>form = TestForm(request.POST)\nif form.is_valid():\n    ...\nelse:\n    message = &quot;The form has errors&quot;\n    explanation = form.errors.as_data()\n    # Also incorrect request but this time the only flag for you should be that maybe JavaScript validation can be used.\n    status_code = 400\n</code></pre>\n<p>You may even get error field by field so you may presented in a better way in the form itself.</p>\n<p><strong>Third</strong> - Let's process the request</p>\n<pre><code>        try:\n            test_method(form.cleaned_data)\n        except `PermissionError` as e:\n            status_code= 403\n            message= &quot;Your account doesn't have permissions to go so far!&quot;\n        except `Conflict` as e:\n            status_code= 409\n            message= &quot;Other user is working in the same information, he got there first&quot;\n        ....\n        else:\n            status_code= 201\n            message= &quot;Object created with success!&quot;\n</code></pre>\n<p>Depending on the exceptions you define, different codes may be required. Go to <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" rel=\"noreferrer\">Wikipedia</a> and check the list.\nDon't forget that response also vary in code. If you add something to the database you should return a <code>201</code>. If you just got information then you were looking for a GET request.</p>\n<p><strong>Responding to the questions</strong></p>\n<ol>\n<li><p>Django exceptions will return 500 errors if not dealt with, because if you don't know that an exception is going to happen then it is an error in the server. With exception to 404 and login requirements I would do <code>try catch</code> blocks for everything. (For 404 you may raise it and if you do <code>@login_required</code>or a permission required django will respond with the appropriate code without you doing anything).</p>\n</li>\n<li><p>I don't agree completely to the approach. As you said errors should be explicit so you should know allways what is suppose to happen and how to explain it, and make it dependable on the operation performed.</p>\n</li>\n<li><p>I would say a 400 error is ok for that. It is a bad request you just need to explain why, the error code is for you and for your js code so just be consistent.</p>\n</li>\n<li><p>(example provided) - In the <code>text_view</code> you should have the <code>test_method</code> as in the third example.</p>\n</li>\n</ol>\n<p>Test method should have the following structure:</p>\n<pre><code>def test_method(validated_data):\n    try: \n        my_business_logic_is_violated():\n    catch BusinessLogicViolation:\n        raise\n    else:\n        ... #your code\n</code></pre>\n<p>The in my example:</p>\n<pre><code>   try:\n        test_method(form.cleaned_data)\n    except `BusinessLogicViolation` as e:\n        status_code= 400\n        message= &quot;You violated the business logic&quot;\n        explanation = e.explanation\n   ...\n</code></pre>\n<p>I considered the business logic violation to be a Client Error because if something is needed before that request the client should be aware of that and ask the user to do it first. (From the <a href=\"https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1\" rel=\"noreferrer\">Error Definition</a>):</p>\n<blockquote>\n<p>The 400 (Bad Request) status code indicates that the server cannot or\nwill not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request<br />\nmessage framing, or deceptive request routing).</p>\n</blockquote>\n<p>By the way, you can see the <a href=\"https://docs.python.org/3/tutorial/errors.html#tut-userexceptions\" rel=\"noreferrer\">Python Docs on User-defined Exceptions</a> so you may give appropriate error messages. The idea behind this example is that you raise a <code>BusinessLogicViolation</code>exception with a different message in <code>my_business_logic_is_violated()</code>according to the place where it was generated.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4572443,
                        "reputation": 752,
                        "user_id": 3711792,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c2bbd20713e1429cb31d30f6ee04fe5e?s=256&d=identicon&r=PG",
                        "display_name": "kreld",
                        "link": "https://stackoverflow.com/users/3711792/kreld"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1470747968,
                    "last_edit_date": 1470747968,
                    "creation_date": 1470736636,
                    "answer_id": 38847585,
                    "question_id": 38847441,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The status codes are very well defined in the HTTP standard. You can find a <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" rel=\"noreferrer\">very readable list on Wikipedia</a>. Basically the errors in the 4XX range are errors made by the client, i.e. if they request a resource that doesn't exist, etc. The errors in the 5XX range should be returned if an error is encountered server side.</p>\n\n<p>With regards to point number 3, you should pick a 4XX error for the case where a precondition has not been met, for example <code>428 Precondition Required</code>, but return a 5XX error when a server raises a syntax error.</p>\n\n<p>One of the problems with your example is that no response is returned unless the server raises a specific exception, i.e. when the code executes normally and no exception is raised, neither the message nor the status code is explicitly sent to the client. This can be taken care of via a finally block, to make that part of the code as generic as possible.</p>\n\n<p>As per your example:</p>\n\n<pre><code>def test_view (request):\n   try:\n       # Some code .... \n       status = 200\n       msg = 'Everything is ok.'\n       if my_business_logic_is_violated():\n           # Here we're handling client side errors, and hence we return\n           # status codes in the 4XX range\n           status = 428\n           msg = 'You violated bussiness logic because a precondition was not met'.\n   except SomeException as e:\n       # Here, we assume that exceptions raised are because of server\n       # errors and hence we return status codes in the 5XX range\n       status = 500\n       msg = 'Server error, yo'\n   finally:\n       # Here we return the response to the client, regardless of whether\n       # it was created in the try or the except block\n       return JsonResponse({'message': msg}, status=status)\n</code></pre>\n\n<p>However, as stated in the comments it would make more sense to do both validations the same way, i.e. via exceptions, like so:</p>\n\n<pre><code>def test_view (request):\n   try:\n       # Some code .... \n       status = 200\n       msg = 'Everything is ok.'\n       if my_business_logic_is_violated():\n           raise MyPreconditionException()\n   except MyPreconditionException as e:\n       # Here we're handling client side errors, and hence we return\n       # status codes in the 4XX range\n       status = 428\n       msg = 'Precondition not met.'\n   except MyServerException as e:\n       # Here, we assume that exceptions raised are because of server\n       # errors and hence we return status codes in the 5XX range\n       status = 500\n       msg = 'Server error, yo.'\n   finally:\n       # Here we return the response to the client, regardless of whether\n       # it was created in the try or the except block\n       return JsonResponse({'message': msg}, status=status)\n</code></pre>\n"
                }
            ]
        },
        {
            "24249298": [
                {
                    "owner": {
                        "account_id": 3744512,
                        "reputation": 19244,
                        "user_id": 3113477,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/TWIEk.jpg?s=256",
                        "display_name": "A.J. Uppal",
                        "link": "https://stackoverflow.com/users/3113477/a-j-uppal"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1553560027,
                    "last_edit_date": 1553560027,
                    "creation_date": 1402940822,
                    "answer_id": 24249343,
                    "question_id": 24249298,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use <a href=\"https://docs.python.org/2/tutorial/controlflow.html#pass-statements\" rel=\"noreferrer\"><code>pass</code></a>:</p>\n\n<pre><code>try:\n    foo()\nexcept: \n    pass\n</code></pre>\n\n<p>A <a href=\"https://docs.python.org/2/tutorial/controlflow.html#pass-statements\" rel=\"noreferrer\"><code>pass</code></a> is just a placeholder for nothing, it just passes along to prevent SyntaxErrors.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1216183,
                        "reputation": 1067,
                        "user_id": 1183738,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/89e1e356ec1c65e5e0384413a91446c6?s=256&d=identicon&r=PG",
                        "display_name": "Dmitry Savy",
                        "link": "https://stackoverflow.com/users/1183738/dmitry-savy"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1402940789,
                    "creation_date": 1402940789,
                    "answer_id": 24249336,
                    "question_id": 24249298,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>try:\n  doSomething()\nexcept: \n  pass\n</code></pre>\n\n<p>or you can use </p>\n\n<pre><code>try:\n  doSomething()\nexcept Exception: \n  pass\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 63984,
                        "reputation": 50477,
                        "user_id": 189134,
                        "user_type": "moderator",
                        "accept_rate": 98,
                        "profile_image": "https://i.sstatic.net/jFsyb.png?s=256",
                        "display_name": "Andy",
                        "link": "https://stackoverflow.com/users/189134/andy"
                    },
                    "is_accepted": true,
                    "score": 108,
                    "last_activity_date": 1402940769,
                    "creation_date": 1402940769,
                    "answer_id": 24249326,
                    "question_id": 24249298,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>try:\n    do_something()\nexcept:\n    pass\n</code></pre>\n\n<p>You will use the <a href=\"https://docs.python.org/2/tutorial/controlflow.html#pass-statements\" rel=\"noreferrer\">pass</a> statement.</p>\n\n<blockquote>\n  <p>The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. </p>\n</blockquote>\n"
                }
            ]
        },
        {
            "47539201": [
                {
                    "owner": {
                        "account_id": 11782896,
                        "reputation": 31,
                        "user_id": 8621759,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-bDJuon_LYOQ/AAAAAAAAAAI/AAAAAAAAAB8/AQeKDWSMf7w/photo.jpg?sz=256",
                        "display_name": "Elena Ravenwood",
                        "link": "https://stackoverflow.com/users/8621759/elena-ravenwood"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1673130252,
                    "last_edit_date": 1673130252,
                    "creation_date": 1639738154,
                    "answer_id": 70391993,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This happens because the path doesn't exist in environment variables.</p>\n<p>To fix this:</p>\n<ol>\n<li>Rerun the installer</li>\n<li>Choose <kbd>Modify</kbd></li>\n<li>In optional feature click &quot;Next&quot;</li>\n<li>In advanced option tick the &quot;Add Python to environment variables&quot;</li>\n<li>Install</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 21686897,
                        "reputation": 15284,
                        "user_id": 16002199,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/237973e786d238c5651b8a493e408157?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "John Lobo",
                        "link": "https://stackoverflow.com/users/16002199/john-lobo"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1673130156,
                    "last_edit_date": 1673130156,
                    "creation_date": 1625585118,
                    "answer_id": 68273306,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are trying to install the new Python version, <code>python-3.9.6</code>, then click the checkbox of <strong>Add Python 3.9 to PATH</strong></p>\n<p><a href=\"https://i.sstatic.net/lBFvz.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/lBFvz.jpg\" alt=\"Enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5490337,
                        "reputation": 10792,
                        "user_id": 4363864,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/G8BOV.jpg?s=256",
                        "display_name": "obchardon",
                        "link": "https://stackoverflow.com/users/4363864/obchardon"
                    },
                    "is_accepted": false,
                    "score": 66,
                    "last_activity_date": 1673130046,
                    "last_edit_date": 1673130046,
                    "creation_date": 1615293714,
                    "answer_id": 66547100,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same problem, due to a stupid decision from Microsoft.</p>\n<p>I had another line in my system path variable:\n<code>C:\\Users\\MyUserName\\AppData\\Local\\Microsoft\\WindowsApps</code></p>\n<p>And Windows 10 put a <code>python.exe</code> file there that only redirected me to the Python page of the Microsoft Store:</p>\n<p><a href=\"https://i.sstatic.net/9Ec3k.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/9Ec3k.png\" alt=\"Enter image description here\" /></a></p>\n<p>Since this line was above my true Python path, typing <code>python</code> in the cmd prompt opened the Microsoft Store...</p>\n<p><strong>Solution:</strong></p>\n<p>Type <code>App execution aliases</code> in the Windows 10 search bar, and then uncheck the aliases for <code>python.exe</code> and <code>python3.exe</code>. More information is <a href=\"https://superuser.com/questions/1437590/typing-python-on-windows-10-version-1903-command-prompt-opens-microsoft-stor\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11893524,
                        "reputation": 179,
                        "user_id": 8703637,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3577890dde19f11bfa21f7f1ab6d7de6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mehran",
                        "link": "https://stackoverflow.com/users/8703637/mehran"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1673129909,
                    "last_edit_date": 1673129909,
                    "creation_date": 1587914574,
                    "answer_id": 61443267,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are working with the command prompt and if you are facing the issue even after adding the Python path to system variable PATH:</p>\n<p>Remember to restart the command prompt (cmde.exe).</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user379888"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1673129753,
                    "last_edit_date": 1673129753,
                    "creation_date": 1517838526,
                    "answer_id": 48624057,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All the answers on Stack\u00a0Overflow_ about it were obsolete, so I  decided to add this. The <em>path</em> variable that needs to be added is,</p>\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Users\\Username\\AppData\\Local\\Programs\\Python\\Python36-32\n</code></pre>\n<p>Note that everyone may have a different <em>Username</em>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10636989,
                        "reputation": 695,
                        "user_id": 7833385,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bd453bda21af39a19621f89ad958f341?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Brian M. Sheldon",
                        "link": "https://stackoverflow.com/users/7833385/brian-m-sheldon"
                    },
                    "is_accepted": true,
                    "score": 39,
                    "last_activity_date": 1673129708,
                    "last_edit_date": 1673129708,
                    "creation_date": 1511898359,
                    "answer_id": 47539728,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The path to the Python executable needs to be in the <em>System</em> PATH variable.  Note this is not the <em>User</em> PATH variable.</p>\n<p>The OP had Python 3.6.3 installed in <code>C:\\Python\\Python36-32</code>, however a common default location for installation is in the users <code>AppData\\Local\\Programs\\</code> folder.  This post will assume a Python 3.10 installation in this location.  Please adjust as needed for your current Python version and path.</p>\n<p>You can confirm the path from the command prompt by checking the Python executable directly from the folder.</p>\n<pre class=\"lang-none prettyprint-override\"><code>cd %LOCALAPPDATA%\\Programs\\Python\\Python310\npython --version\n</code></pre>\n<p>This should print the Python interpreter version.  For example, <code>Python 3.10.4</code>.</p>\n<p>Add the following entries to the System PATH:</p>\n<ul>\n<li><code>%LOCALAPPDATA%\\Programs\\Python\\Python310</code> for the python executable</li>\n<li><code>%LOCALAPPDATA%\\Programs\\Python\\Python310\\Scripts</code> for tools such as <code>pip</code></li>\n</ul>\n<p>After adding the path to the System PATH variable, make sure you close and reopen any command prompts, so they use the updated PATH.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17219443,
                        "reputation": 1797,
                        "user_id": 12466554,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/YlBdF.png?s=256",
                        "display_name": "Parth Developer",
                        "link": "https://stackoverflow.com/users/12466554/parth-developer"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1673129655,
                    "last_edit_date": 1673129655,
                    "creation_date": 1577530362,
                    "answer_id": 59510230,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If it is still not working, as mentioned in the previous answers, then simply <em><strong>move up</strong></em> the path, as shown in the screenshot.</p>\n<p><img src=\"https://i.sstatic.net/hIhVg.jpg\" alt=\"Image here\" /></p>\n"
                },
                {
                    "owner": {
                        "account_id": 11253033,
                        "reputation": 19981,
                        "user_id": 8253662,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/FuMpZ.jpg?s=256",
                        "display_name": "Mahesh Jamdade",
                        "link": "https://stackoverflow.com/users/8253662/mahesh-jamdade"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1673129601,
                    "last_edit_date": 1673129601,
                    "creation_date": 1549814174,
                    "answer_id": 54618199,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You get this error, because the <strong>python.exe</strong> path has not been added to the <em>System</em> environment variable. To do that, simply:</p>\n<ol>\n<li><p>go to the path <code>C:\\Users\\%Username%\\AppData\\Local\\Programs\\Python\\Python37-32</code> which contains <strong>python.exe</strong></p>\n</li>\n<li><p>copy the path and open <em>System</em> environment variables and in the variable section look for variable called <em>Path</em>. If not, create a new variable with <em>Variable Name</em> as <strong>Path</strong> and value as the copied path</p>\n<p><a href=\"https://i.sstatic.net/MPt58.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/MPt58.png\" alt=\"Enter image description here\" /></a></p>\n</li>\n<li><p>Once you do that, close the window and simply open <em>cmd</em>. Type <code>python</code> and you should get something like this:</p>\n<p><a href=\"https://i.sstatic.net/giroL.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/giroL.png\" alt=\"Enter image description here\" /></a></p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 13177637,
                        "reputation": 11,
                        "user_id": 9518093,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a24d22a7e9f958b536cc62ced644efb9?s=256&d=identicon&r=PG",
                        "display_name": "Nicholas De La Haye",
                        "link": "https://stackoverflow.com/users/9518093/nicholas-de-la-haye"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1673129229,
                    "last_edit_date": 1673129229,
                    "creation_date": 1521477569,
                    "answer_id": 49368067,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For Python 3.6, there are actually two path entries. Also, it's best to use the %USERPROFILE% rather than hard coding it.</p>\n<p>%USERPROFILE%\\AppData\\Local\\Programs\\Python\\Python36\n%USERPROFILE%\\AppData\\Local\\Programs\\Python\\Python36\\Scripts</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1762894,
                        "reputation": 2469,
                        "user_id": 1609485,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/1KzNA.jpg?s=256",
                        "display_name": "whitwhoa",
                        "link": "https://stackoverflow.com/users/1609485/whitwhoa"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1534002200,
                    "creation_date": 1534002200,
                    "answer_id": 51801290,
                    "question_id": 47539201,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I too was struggling with this issue, and everything was configured correctly. I installed and setup my system path variables as one would. And everything was fine. Then upon reboot windows would not recognize 'python' as a command as if it were unaware of the path variable. Double checked to confirm everything was still setup correctly (it was).</p>\n\n<p>It only started to work again after I manually browsed to the directory in which python.exe existed, and ran 'python'. After that windows seemed to recognize my path variable and I could call 'python' from where ever need be. Very odd. Figured I'd share in case someone else runs into this.</p>\n"
                }
            ]
        },
        {
            "46826497": [
                {
                    "owner": {
                        "account_id": 2852240,
                        "reputation": 19548,
                        "user_id": 2449192,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/62cb5b405dc090d45eed0498dec02f52?s=256&d=identicon&r=PG",
                        "display_name": "darthbith",
                        "link": "https://stackoverflow.com/users/2449192/darthbith"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1568847354,
                    "last_edit_date": 1568847354,
                    "creation_date": 1508426920,
                    "answer_id": 46833531,
                    "question_id": 46826497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can set environment variables when an environment is activated by editing the <code>activate.d/env_vars.sh</code> script. See here: <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux\" rel=\"noreferrer\">https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux</a></p>\n\n<p>The key portions from that link are:</p>\n\n<blockquote>\n  <ol>\n  <li><p>Locate the directory for the conda environment in your Terminal\n  window, such as <code>/home/jsmith/anaconda3/envs/analytics</code>.</p></li>\n  <li><p>Enter that directory and create these subdirectories and\n  files:</p>\n\n<pre><code>cd /home/jsmith/anaconda3/envs/analytics\nmkdir -p ./etc/conda/activate.d\nmkdir -p ./etc/conda/deactivate.d\ntouch ./etc/conda/activate.d/env_vars.sh\ntouch ./etc/conda/deactivate.d/env_vars.sh\n</code></pre></li>\n  <li><p>Edit <code>./etc/conda/activate.d/env_vars.sh</code> as follows:</p>\n\n<pre><code>#!/bin/sh\n\nexport MY_KEY='secret-key-value'\nexport MY_FILE=/path/to/my/file/\n</code></pre></li>\n  <li><p>Edit <code>./etc/conda/deactivate.d/env_vars.sh</code> as follows::</p>\n\n<pre><code>#!/bin/sh\n\nunset MY_KEY\nunset MY_FILE\n</code></pre></li>\n  </ol>\n  \n  <p>When you run <code>conda activate analytics</code>, the environment\n  variables MY_KEY and MY_FILE are set to the values you wrote into\n  the file. When you run <code>conda deactivate</code>, those variables are\n  erased.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 513531,
                        "reputation": 666,
                        "user_id": 2467094,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/13659699d8bd5d1322d6361e9f11dca7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Oleksandr",
                        "link": "https://stackoverflow.com/users/2467094/oleksandr"
                    },
                    "is_accepted": false,
                    "score": 53,
                    "last_activity_date": 1520868674,
                    "creation_date": 1520868674,
                    "answer_id": 49238956,
                    "question_id": 46826497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I just wanted to add that you could declare 2 variables in the activate.d/env_vars.sh like, it makes it easier to reset the variable to the pre-activation state:</p>\n\n<pre><code>export OLD_LD_LIBRARY_PATH=${LD_LIBRARY_PATH}\nexport LD_LIBRARY_PATH=/your/path:${LD_LIBRARY_PATH}\n</code></pre>\n\n<p>and then in deactivate.d/env_vars.sh:</p>\n\n<pre><code>export LD_LIBRARY_PATH=${OLD_LD_LIBRARY_PATH}\nunset OLD_LD_LIBRARY_PATH\n</code></pre>\n"
                }
            ]
        },
        {
            "10937350": [
                {
                    "owner": {
                        "account_id": 398541,
                        "reputation": 21836,
                        "user_id": 763269,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/0c27474bcff67974d6a9fcb43cb7ba4e?s=256&d=identicon&r=PG",
                        "display_name": "Chris Johnson",
                        "link": "https://stackoverflow.com/users/763269/chris-johnson"
                    },
                    "is_accepted": true,
                    "score": 129,
                    "last_activity_date": 1697714743,
                    "last_edit_date": 1697714743,
                    "creation_date": 1339094634,
                    "answer_id": 10937927,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are Python libraries that can recognize files based on their content (usually a header / magic number) and that don't rely on the file name or extension.</p>\n<p>If you're addressing many different file types, you can use <a href=\"https://github.com/ahupp/python-magic\" rel=\"noreferrer\"><code>python-magic</code></a>.  That's just a Python binding for the well-established <code>magic</code> library.  This has a good reputation and (small endorsement) in the limited use I've made of it, it has been solid.</p>\n<p>The native <a href=\"http://docs.python.org/library/imghdr.html\" rel=\"noreferrer\">imghdr</a> library can be useful, but is deprecated since Python 3.11 and will be removed in Python 3.13.</p>\n<p>If you need dependency-free (pure Python) file type checking, see <a href=\"https://github.com/h2non/filetype.py\" rel=\"noreferrer\"><code>filetype</code></a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1503157,
                        "reputation": 3259,
                        "user_id": 1407156,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0bede33cf36947636d01e427dc2b0551?s=256&d=identicon&r=PG",
                        "display_name": "xvatar",
                        "link": "https://stackoverflow.com/users/1407156/xvatar"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1635857896,
                    "last_edit_date": 1635857896,
                    "creation_date": 1339093501,
                    "answer_id": 10937634,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import subprocess as sub\np = sub.Popen('file yourfile.txt', stdout=sub.PIPE, stderr=sub.PIPE)\noutput, errors = p.communicate()\nprint(output)\n</code></pre>\n<p>As Steven pointed out, <a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow noreferrer\"><code>subprocess</code></a> is the way. You can get the command output by the way above as this <a href=\"https://stackoverflow.com/questions/3791465/python-os-system-for-command-line-call-linux-not-returning-what-it-should\">post</a> said</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10745291,
                        "reputation": 255,
                        "user_id": 13763997,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c7eaaefbaa8483a72fb97bd6948935b5?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Izabella Melo",
                        "link": "https://stackoverflow.com/users/13763997/izabella-melo"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1630358934,
                    "creation_date": 1630358934,
                    "answer_id": 68990535,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This code list all files of a given extension in a given folder recursively</p>\n<pre><code>import magic\nimport glob\nfrom os.path import isfile\n\nROOT_DIR = 'backup'\nWANTED_EXTENSION = 'sqlite'\n\nfor filename in glob.iglob(ROOT_DIR + '/**', recursive=True):\n    if isfile(filename):\n        extension = magic.from_file(filename, mime = True)\n        if WANTED_EXTENSION in extension:\n            print(filename)\n</code></pre>\n<p><a href=\"https://gist.github.com/izmcm/6a5d6fa8d4ec65fd9851a1c06c8946ac\" rel=\"nofollow noreferrer\">https://gist.github.com/izmcm/6a5d6fa8d4ec65fd9851a1c06c8946ac</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1878038,
                        "reputation": 24771,
                        "user_id": 1698813,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/ac554c5c5002dc1b82f8ebd720be6246?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Lewis Diamond",
                        "link": "https://stackoverflow.com/users/1698813/lewis-diamond"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1579353247,
                    "last_edit_date": 1579353247,
                    "creation_date": 1412697653,
                    "answer_id": 26240316,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In the case of images, you can use the <code>imghdr</code> module.</p>\n\n<pre><code>&gt;&gt;&gt; import imghdr\n&gt;&gt;&gt; imghdr.what('8e5d7e9d873e2a9db0e31f9dfc11cf47')  # You can pass a file name or a file object as first param. See doc for optional 2nd param.\n'png'\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/imghdr.html\" rel=\"noreferrer\">Python 2 imghdr doc</a><br>\n<a href=\"https://docs.python.org/3/library/imghdr.html\" rel=\"noreferrer\">Python 3 imghdr doc</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1657479,
                        "reputation": 8167,
                        "user_id": 1582871,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/rshD7.jpg?s=256",
                        "display_name": "evergreen",
                        "link": "https://stackoverflow.com/users/1582871/evergreen"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1562409399,
                    "creation_date": 1562409399,
                    "answer_id": 56913288,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>also you can use this code (pure python by 3 byte of header file):</p>\n\n<pre><code>full_path = os.path.join(MEDIA_ROOT, pathfile)\n\ntry:\n    image_data = open(full_path, \"rb\").read()\nexcept IOError:\n    return \"Incorrect Request :( !!!\"\n\nheader_byte = image_data[0:3].encode(\"hex\").lower()\n\nif header_byte == '474946':\n    return \"image/gif\"\nelif header_byte == '89504e':\n    return \"image/png\"\nelif header_byte == 'ffd8ff':\n    return \"image/jpeg\"\nelse:\n    return \"binary file\"\n</code></pre>\n\n<blockquote>\n  <p>without any package install [and update version]</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 7451652,
                        "reputation": 579,
                        "user_id": 8168094,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-r3fuEZ8UwFE/AAAAAAAAAAI/AAAAAAAADsY/11yZUIdo888/photo.jpg?sz=256",
                        "display_name": "Lelouch",
                        "link": "https://stackoverflow.com/users/8168094/lelouch"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1549133116,
                    "creation_date": 1549133116,
                    "answer_id": 54496330,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Only works for Linux but Using the \"sh\" python module you can simply call any shell command</p>\n\n<p><a href=\"https://pypi.org/project/sh/\" rel=\"nofollow noreferrer\">https://pypi.org/project/sh/</a> </p>\n\n<p>pip install sh</p>\n\n<blockquote>\n  <p>import sh</p>\n  \n  <p>sh.file(\"/root/file\")</p>\n</blockquote>\n\n<p>Output:\n/root/file: ASCII text</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1304158,
                        "reputation": 2062,
                        "user_id": 1299446,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2139983a9baaabded6905b2970a036cb?s=256&d=identicon&r=PG",
                        "display_name": "&#193;lvaro Justen",
                        "link": "https://stackoverflow.com/users/1299446/%c3%81lvaro-justen"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1498899047,
                    "last_edit_date": 1498899047,
                    "creation_date": 1470357809,
                    "answer_id": 38779505,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can also install the official <code>file</code> binding for Python, a library called <code>file-magic</code> (it does not use ctypes, like <code>python-magic</code>).</p>\n\n<p>It's available on PyPI as <a href=\"https://pypi.python.org/pypi/file-magic\" rel=\"noreferrer\">file-magic</a> and on Debian as <a href=\"https://packages.debian.org/jessie/python-magic\" rel=\"noreferrer\">python-magic</a>. For me this library is the best to use since it's available on PyPI and on Debian (and probably other distributions), making the process of deploying your software easier.\nI've <a href=\"http://blog.justen.eng.br/2016/02/detecting-file-type-and-encoding-in-python.html\" rel=\"noreferrer\">blogged about how to use it</a>, also.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 391909,
                        "reputation": 60707,
                        "user_id": 752843,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://lh4.googleusercontent.com/-wVd00r-Qktg/AAAAAAAAAAI/AAAAAAAAAL4/nt5UY5EguKk/photo.jpg?sz=256",
                        "display_name": "Richard",
                        "link": "https://stackoverflow.com/users/752843/richard"
                    },
                    "is_accepted": false,
                    "score": 79,
                    "last_activity_date": 1403794267,
                    "creation_date": 1403794267,
                    "answer_id": 24433682,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <a href=\"https://github.com/ahupp/python-magic\">Python Magic</a> library provides the functionality you need.</p>\n\n<p>You can install the library with <code>pip install python-magic</code> and use it as follows:</p>\n\n<pre><code>&gt;&gt;&gt; import magic\n\n&gt;&gt;&gt; magic.from_file('iceland.jpg')\n'JPEG image data, JFIF standard 1.01'\n\n&gt;&gt;&gt; magic.from_file('iceland.jpg', mime=True)\n'image/jpeg'\n\n&gt;&gt;&gt; magic.from_file('greenland.png')\n'PNG image data, 600 x 1000, 8-bit colormap, non-interlaced'\n\n&gt;&gt;&gt; magic.from_file('greenland.png', mime=True)\n'image/png'\n</code></pre>\n\n<p>The Python code in this case is calling to <a href=\"http://www.unix.com/man-page/freebsd/3/libmagic/\">libmagic</a> beneath the hood, which is the same library used by the *NIX <code>file</code> command. Thus, this does the same thing as the subprocess/shell-based answers, but without that overhead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1322580,
                        "reputation": 2922,
                        "user_id": 1268052,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2ff4f28cf6b7449a5a88d15042cba1b0?s=256&d=identicon&r=PG",
                        "display_name": "berniey",
                        "link": "https://stackoverflow.com/users/1268052/berniey"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1402212708,
                    "last_edit_date": 1402212708,
                    "creation_date": 1402024442,
                    "answer_id": 24073625,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>With newer subprocess library, you can now use the following code (*nix only solution):</p>\n\n<pre><code>import subprocess\nimport shlex\n\nfilename = 'your_file'\ncmd = shlex.split('file --mime-type {0}'.format(filename))\nresult = subprocess.check_output(cmd)\nmime_type = result.split()[-1]\nprint mime_type\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 161001,
                        "reputation": 45472,
                        "user_id": 1322401,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JlaPg.jpg?s=256",
                        "display_name": "Steven Rumbalski",
                        "link": "https://stackoverflow.com/users/1322401/steven-rumbalski"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1339095475,
                    "last_edit_date": 1495535491,
                    "creation_date": 1339092765,
                    "answer_id": 10937430,
                    "question_id": 10937350,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>On unix and linux there is the <a href=\"http://www.cyberciti.biz/faq/linuxunix-determine-file-type/\" rel=\"nofollow noreferrer\"><code>file</code></a> command to guess file types.  There's even a <a href=\"http://gnuwin32.sourceforge.net/packages/file.htm\" rel=\"nofollow noreferrer\">windows port</a>.</p>\n\n<p>From the <a href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?file\" rel=\"nofollow noreferrer\">man page</a>:</p>\n\n<blockquote>\n  <p>File tests each argument in an attempt to classify it.  There are three\n  sets  of tests, performed in this order: filesystem tests, magic number\n  tests, and language tests.  The first test  that   succeeds  causes  the\n  file type to be printed.</p>\n</blockquote>\n\n<p>You would need to run the <code>file</code> command with the <code>subprocess</code> module and then parse the results to figure out an extension.</p>\n\n<p><strong>edit:</strong>  Ignore my answer.  Use Chris Johnson's <a href=\"https://stackoverflow.com/a/10937927/1322401\">answer</a> instead.</p>\n"
                }
            ]
        },
        {
            "23249931": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 7,
                    "last_activity_date": 1398270038,
                    "last_edit_date": 1398270038,
                    "creation_date": 1398269707,
                    "answer_id": 23249963,
                    "question_id": 23249931,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Generators (like all iterables) can only be iterated over <em>once</em>. By the time <code>print_gen(x)</code> is done, so is <code>x</code>. Any further attempts to get new values from <code>x</code> will result in <code>StopIteration</code> being raised.</p>\n\n<p>This works:</p>\n\n<pre><code>x = do_gen()\ny = (incr_gen(i) for i in do_gen())\nprint_gen(x)\nprint_gen(y)\n</code></pre>\n\n<p>as that creates two separate <em>independent</em> generators. In your version, the generator expression you assigned to <code>y</code> expects <code>x</code> to yield more values.</p>\n\n<p>It is easier to see that the <code>x</code> generator is shared with <code>y</code> when you use the <code>next()</code> function on them in turn:</p>\n\n<pre><code>&gt;&gt;&gt; def do_gen():\n...     for i in range(3):\n...         yield i\n... \n&gt;&gt;&gt; def incr_gen(y):\n...     return y + 1\n... \n&gt;&gt;&gt; x = do_gen()\n&gt;&gt;&gt; y = (incr_gen(i) for i in x)\n&gt;&gt;&gt; next(x)  # first value for the range\n0\n&gt;&gt;&gt; next(y)  # second value from the range, plus 1\n2\n&gt;&gt;&gt; next(x)  # third value from the range\n2\n&gt;&gt;&gt; next(y)  # no more values available, generator done\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>Note the <code>StopIteration</code> raised by <code>next(y)</code> as well here.</p>\n"
                }
            ]
        },
        {
            "18965524": [
                {
                    "owner": {
                        "account_id": 125141,
                        "reputation": 114311,
                        "user_id": 320726,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/02041b18199678d1f02e6d5040dbb907?s=256&d=identicon&r=PG",
                        "display_name": "6502",
                        "link": "https://stackoverflow.com/users/320726/6502"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1500270809,
                    "last_edit_date": 1500270809,
                    "creation_date": 1379959242,
                    "answer_id": 18965819,
                    "question_id": 18965524,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Even in base Python you can do the computation in generic form</p>\n\n<pre><code>result = sum(x**2 for x in some_vector) ** 0.5\n</code></pre>\n\n<p><code>x ** 2</code> is surely not an hack and the computation performed is the same (I checked with cpython source code). I actually find it more readable (and readability counts).</p>\n\n<p>Using instead <code>x ** 0.5</code> to take the square root doesn't do the exact same computations as <code>math.sqrt</code> as the former (probably) is computed using logarithms and the latter (probably) using the specific numeric instruction of the math processor.</p>\n\n<p>I often use <code>x ** 0.5</code> simply because I don't want to add <code>math</code> just for that. I'd expect however a specific instruction for the square root to work better (more accurately) than a multi-step operation with logarithms.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3137088,
                        "reputation": 13869,
                        "user_id": 2653390,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/ArNxx.jpg?s=256",
                        "display_name": "Shashank",
                        "link": "https://stackoverflow.com/users/2653390/shashank"
                    },
                    "is_accepted": true,
                    "score": 64,
                    "last_activity_date": 1456439041,
                    "last_edit_date": 1495540954,
                    "creation_date": 1379959374,
                    "answer_id": 18965845,
                    "question_id": 18965524,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>math.sqrt</code> is the C implementation of square root and is therefore different from using the <code>**</code> operator which implements Python's built-in <code>pow</code> function. Thus, using <code>math.sqrt</code> actually gives a different answer than using the <code>**</code> operator and there is indeed a computational reason to prefer <code>numpy</code> or <code>math</code> module implementation over the built-in. Specifically the sqrt functions are probably implemented in the most efficient way possible whereas <code>**</code> operates over a large number of bases and exponents and is probably unoptimized for the specific case of square root. On the other hand, the built-in <code>pow</code> function handles a few extra cases like \"complex numbers, unbounded integer powers, and modular exponentiation\".</p>\n\n<p><a href=\"https://stackoverflow.com/questions/842245/which-is-more-accurate-x-5-or-math-sqrtx\">See this Stack Overflow question for more information on the difference  between <code>**</code> and <code>math.sqrt</code>.</a></p>\n\n<p>In terms of which is more \"Pythonic\", I think we need to discuss the very definition of that word. From <a href=\"http://docs.python.org/2/glossary.html#term-pythonic\" rel=\"noreferrer\">the official Python glossary</a>, it states that a piece of code or idea is Pythonic if it \"closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages.\" In every single other language I can think of, there is some math module with basic square root functions. However there are languages that lack a power operator like <code>**</code> e.g. C++. So <code>**</code> is probably more Pythonic, but whether or not it's objectively better depends on the use case.</p>\n"
                }
            ]
        },
        {
            "49865751": [
                {
                    "owner": {
                        "account_id": 11094326,
                        "reputation": 740,
                        "user_id": 8145051,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/2tHOL.png?s=256",
                        "display_name": "fanbyprinciple",
                        "link": "https://stackoverflow.com/users/8145051/fanbyprinciple"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1673931888,
                    "last_edit_date": 1673931888,
                    "creation_date": 1624853336,
                    "answer_id": 68157453,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>VS Code is very intuitive in this regard. Just to illustrate the way to solve it in two clicks.</p>\n<p>First focus on the bottom right corner of your PC.</p>\n<p><a href=\"https://i.sstatic.net/xxWwU.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/xxWwU.png\" alt=\"enter image description here\" /></a></p>\n<p>Here click on spaces.</p>\n<p>Context window will open which will give us the option to convert indentations to spaces.\nClick on <code>convert indentation</code> to spaces and you are done.</p>\n<p><a href=\"https://i.sstatic.net/c5HLP.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/c5HLP.png\" alt=\"enter image description here\" /></a></p>\n<p>Also if you are using linux environment I highly recommend using autopep library.</p>\n<pre><code>apt install python3-autopep8\nautopep8 -i /path/to/module/problem.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14387721,
                        "reputation": 321,
                        "user_id": 10769338,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-e2IkJG_RblQ/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaPvn0lTz3oiBSvXu-iB0tEH9IfntA/mo/photo.jpg?sz=256",
                        "display_name": "reisy",
                        "link": "https://stackoverflow.com/users/10769338/reisy"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1608712178,
                    "creation_date": 1608712178,
                    "answer_id": 65421184,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<ol>\n<li>click : ctrl+shift+p  or right click on the mouse and select\n'Command Plate'  - this will prompt a list.\n2.select from list: 'Convert Indentation to Spaces'</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 3861784,
                        "reputation": 8800,
                        "user_id": 3199351,
                        "user_type": "registered",
                        "accept_rate": 35,
                        "profile_image": "https://graph.facebook.com/100000716536412/picture?type=large",
                        "display_name": "Abdeali Chandanwala",
                        "link": "https://stackoverflow.com/users/3199351/abdeali-chandanwala"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1587395298,
                    "creation_date": 1587395298,
                    "answer_id": 61325703,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had similar issue and none of the above solution worked for me.\nThen my colleague helped me and told me to start selection from end of the line - where the IDE was showing the error for indentation and then press down arrow to select till the start of the next line of the code, Press Enter after that to remove any hidden chars in between. You can do the same for the line above - where IDE is showing the error.</p>\n\n<p>This worked for me in vs code</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11069613,
                        "reputation": 1420,
                        "user_id": 10894737,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-YxfQcsyS2w0/AAAAAAAAAAI/AAAAAAAACbg/fmbxLJWiFDM/photo.jpg?sz=256",
                        "display_name": "Renan Lopes",
                        "link": "https://stackoverflow.com/users/10894737/renan-lopes"
                    },
                    "is_accepted": false,
                    "score": 125,
                    "last_activity_date": 1564071711,
                    "creation_date": 1564071711,
                    "answer_id": 57206412,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can fix the tab inconsistency by converting all indentation to tab or spaces.\nIf you open the <em>\"Show All Commands\"</em> tab, ( by pressing Ctrl+Shift+P or F1 ) and search for <em>\"convert indentation\"</em>, two options will by available:</p>\n\n<ul>\n<li>convert indentation to tabs</li>\n<li>convert indentation to spaces</li>\n</ul>\n\n<p>Just choose tabs if you use tabs or spaces if use spaces as your indentation method. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 11207736,
                        "reputation": 403,
                        "user_id": 8222804,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d5d067de856159ef5330d0cb31097849?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "CrnlWes",
                        "link": "https://stackoverflow.com/users/8222804/crnlwes"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1555795583,
                    "creation_date": 1555795583,
                    "answer_id": 55777884,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In the bottom right corner of VScode there is a small information bar that contains \"Spaces: 4\"</p>\n\n<p>If you click that you will get a window that allows you to change all indentation to tabs or spaces.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9560254,
                        "reputation": 3453,
                        "user_id": 7101368,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4IDk2.png?s=256",
                        "display_name": "4ndt3s",
                        "link": "https://stackoverflow.com/users/7101368/4ndt3s"
                    },
                    "is_accepted": true,
                    "score": 16,
                    "last_activity_date": 1523911227,
                    "creation_date": 1523911227,
                    "answer_id": 49865883,
                    "question_id": 49865751,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>By default vscode use four spaces instead of a tab. See your configuration options:</p>\n\n<blockquote>\n  <p>When opening a file, <code>editor.tabSize</code> and <code>editor.insertSpaces</code> will\n  be detected based on the file contents.</p>\n</blockquote>\n\n<pre><code>  \"editor.detectIndentation\": true\n</code></pre>\n\n<blockquote>\n  <p>Insert spaces when pressing Tab. This setting is overridden based on\n  the file contents when <code>editor.detectIndentation</code> is on.</p>\n</blockquote>\n\n<pre><code>  \"editor.insertSpaces\": true\n</code></pre>\n\n<blockquote>\n  <p>The number of spaces a tab is equal to. This setting is overridden\n  based on the file contents when <code>editor.detectIndentation</code> is on.</p>\n</blockquote>\n\n<pre><code>  \"editor.tabSize\": 4\n</code></pre>\n"
                }
            ]
        },
        {
            "45704226": [
                {
                    "owner": {
                        "account_id": 6643075,
                        "reputation": 1424,
                        "user_id": 5128166,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-4qqedVV02QA/AAAAAAAAAAI/AAAAAAAAZ2A/LblO4R139Y8/photo.jpg?sz=256",
                        "display_name": "Kevin Glynn",
                        "link": "https://stackoverflow.com/users/5128166/kevin-glynn"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1509668605,
                    "last_edit_date": 1509668605,
                    "creation_date": 1502855096,
                    "answer_id": 45704786,
                    "question_id": 45704226,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>In a nutshell</strong>: <em>fitting</em> is equal to <em>training</em>. Then, after it is trained, the model can be used to make predictions, usually with a <code>.predict()</code> method call.</p>\n\n<p><strong>To elaborate</strong>: Fitting your model to (i.e. using the <code>.fit()</code> method on) the training data is essentially the training part of the modeling process. It finds the coefficients for the equation specified via the algorithm being used (take for example <a href=\"https://stackoverflow.com/users/826970/umutto\">umutto's</a> linear regression example, above).</p>\n\n<p>Then, for a classifier, you can classify incoming data points (from a test set, or otherwise) using the <code>predict</code> method. Or, in the case of regression, your model will interpolate/extrapolate when <code>predict</code> is used on incoming data points.</p>\n\n<p>It also should be noted that sometimes the \"fit\" nomenclature is used for non-machine-learning methods, such as scalers and other preprocessing steps. In this case, you are merely \"applying\" the specified function to your data, as in the case with a min-max scaler, TF-IDF, or other transformation.</p>\n\n<p>Note: here are a couple of references...</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34727919/fit-method-in-python-sklearn\">fit method in python sklearn</a></li>\n<li><a href=\"http://scikit-learn.org/stable/tutorial/basic/tutorial.html\" rel=\"noreferrer\">http://scikit-learn.org/stable/tutorial/basic/tutorial.html</a></li>\n</ul>\n"
                }
            ]
        },
        {
            "2802726": [
                {
                    "owner": {
                        "account_id": 11879,
                        "reputation": 58915,
                        "user_id": 23114,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/4f6035a1837e22c66099ae91968863f1?s=256&d=identicon&r=PG",
                        "display_name": "cmsjr",
                        "link": "https://stackoverflow.com/users/23114/cmsjr"
                    },
                    "is_accepted": true,
                    "score": 2576,
                    "last_activity_date": 1690296607,
                    "last_edit_date": 1690296607,
                    "creation_date": 1273496417,
                    "answer_id": 2802748,
                    "question_id": 2802726,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>That's more specifically a <a href=\"https://docs.python.org/3.10/reference/expressions.html?highlight=ternary#conditional-expressions\" rel=\"noreferrer\">ternary operator</a> expression than an if-then, here's the python syntax</p>\n<pre><code>value_when_true if condition else value_when_false\n</code></pre>\n<p><strong>Better Example:</strong> (thanks <a href=\"https://stackoverflow.com/users/253254/joshua-burns\">Mr. Burns</a>)</p>\n<pre class=\"lang-py prettyprint-override\"><code>'Yes' if fruit == 'Apple' else 'No'\n</code></pre>\n<p><strong>Now with assignment and contrast with if syntax</strong></p>\n<pre><code>fruit = 'Apple'\nisApple = True if fruit == 'Apple' else False\n</code></pre>\n<p><strong>vs</strong></p>\n<pre><code>fruit = 'Apple'\nisApple = False\nif fruit == 'Apple' : isApple = True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1093939,
                        "reputation": 3303,
                        "user_id": 1087957,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a7a1444a68bec201e70c7904c037d212?s=256&d=identicon&r=PG",
                        "display_name": "Johannes Braunias",
                        "link": "https://stackoverflow.com/users/1087957/johannes-braunias"
                    },
                    "is_accepted": false,
                    "score": 310,
                    "last_activity_date": 1547159130,
                    "last_edit_date": 1547159130,
                    "creation_date": 1341650471,
                    "answer_id": 11373565,
                    "question_id": 2802726,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Moreover, you can still use the \"ordinary\" <code>if</code> syntax and conflate it into one line with a colon.</p>\n\n<pre><code>if i &gt; 3: print(\"We are done.\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>field_plural = None\nif field_plural is not None: print(\"insert into testtable(plural) '{0}'\".format(field_plural)) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 51025,
                        "reputation": 17988,
                        "user_id": 152349,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/c2863987c82dd78af5b99135a71df4fb?s=256&d=identicon&r=PG",
                        "display_name": "mshsayem",
                        "link": "https://stackoverflow.com/users/152349/mshsayem"
                    },
                    "is_accepted": false,
                    "score": 148,
                    "last_activity_date": 1427195818,
                    "last_edit_date": 1427195818,
                    "creation_date": 1273497726,
                    "answer_id": 2802899,
                    "question_id": 2802726,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>General ternary syntax:</p>\n\n<pre><code>value_true if &lt;test&gt; else value_false\n</code></pre>\n\n<p>Another way can be:</p>\n\n<pre><code>[value_false, value_true][&lt;test&gt;]\n</code></pre>\n\n<p>e.g:</p>\n\n<pre><code>count = [0,N+1][count==N]\n</code></pre>\n\n<p>This evaluates both branches before choosing one. To only evaluate the chosen branch:</p>\n\n<pre><code>[lambda: value_false, lambda: value_true][&lt;test&gt;]()\n</code></pre>\n\n<p>e.g.:</p>\n\n<pre><code>count = [lambda:0, lambda:N+1][count==N]()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10843,
                        "reputation": 335548,
                        "user_id": 20670,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
                        "display_name": "Tim Pietzcker",
                        "link": "https://stackoverflow.com/users/20670/tim-pietzcker"
                    },
                    "is_accepted": false,
                    "score": 171,
                    "last_activity_date": 1273523913,
                    "last_edit_date": 1273523913,
                    "creation_date": 1273496419,
                    "answer_id": 2802749,
                    "question_id": 2802726,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>count = 0 if count == N else N+1\n</code></pre>\n\n<p>- the ternary operator. Although I'd say your solution is more readable than this. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 22932,
                        "reputation": 2082,
                        "user_id": 57040,
                        "user_type": "registered",
                        "accept_rate": 29,
                        "profile_image": "https://i.sstatic.net/Ycd9V.jpg?s=256",
                        "display_name": "phoenix24",
                        "link": "https://stackoverflow.com/users/57040/phoenix24"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1273505026,
                    "creation_date": 1273505026,
                    "answer_id": 2803867,
                    "question_id": 2802726,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&lt;execute-test-successful-condition&gt; if &lt;test&gt; else &lt;execute-test-fail-condition&gt;\n</code></pre>\n\n<p>with your code-snippet it would become,</p>\n\n<pre><code>count = 0 if count == N else N + 1\n</code></pre>\n"
                }
            ]
        },
        {
            "4187185": [
                {
                    "owner": {
                        "account_id": 223901,
                        "reputation": 4979,
                        "user_id": 483402,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/7ef41e378c618853f79cba0d6c420364?s=256&d=identicon&r=PG",
                        "display_name": "Matt",
                        "link": "https://stackoverflow.com/users/483402/matt"
                    },
                    "is_accepted": false,
                    "score": 247,
                    "last_activity_date": 1619195219,
                    "last_edit_date": 1619195219,
                    "creation_date": 1289842815,
                    "answer_id": 4187220,
                    "question_id": 4187185,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3:</p>\n<pre><code>isinstance(x, (int, float, complex)) and not isinstance(x, bool)\n</code></pre>\n<p>Python 2:</p>\n<pre><code>isinstance(x, (int, long, float, complex)) and not isinstance(x, bool)\n</code></pre>\n<p>Note that this answer works incorrectly for Numpy objects.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user395760"
                    },
                    "is_accepted": true,
                    "score": 351,
                    "last_activity_date": 1568385862,
                    "last_edit_date": 1568385862,
                    "creation_date": 1289843099,
                    "answer_id": 4187266,
                    "question_id": 4187185,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Test if your variable is an instance of <a href=\"https://docs.python.org/library/numbers.html#numbers.Number\" rel=\"noreferrer\"><code>numbers.Number</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import numbers\n&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]\n[True, True, True, True]\n</code></pre>\n\n<p>This uses <a href=\"https://docs.python.org/glossary.html#term-abstract-base-class\" rel=\"noreferrer\">ABCs</a> and will work for all built-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the <code>Number</code> ABC). </p>\n\n<p>However, in many cases you shouldn't worry about checking types manually - Python is <a href=\"https://en.wikipedia.org/wiki/Duck_typing\" rel=\"noreferrer\">duck typed</a> and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense (<code>4 - \"1\"</code>), so manually checking this is rarely really needed. It's just a bonus. You can add it when finishing a module to avoid pestering others with implementation details.</p>\n\n<p>This works <a href=\"https://docs.python.org/whatsnew/2.6.html#pep-3141-a-type-hierarchy-for-numbers\" rel=\"noreferrer\">starting with Python 2.6</a>. On older versions you're pretty much limited to checking for a few hardcoded types.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 161001,
                        "reputation": 45472,
                        "user_id": 1322401,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JlaPg.jpg?s=256",
                        "display_name": "Steven Rumbalski",
                        "link": "https://stackoverflow.com/users/1322401/steven-rumbalski"
                    },
                    "is_accepted": false,
                    "score": 64,
                    "last_activity_date": 1449511436,
                    "last_edit_date": 1449511436,
                    "creation_date": 1289845218,
                    "answer_id": 4187533,
                    "question_id": 4187185,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <code>Number</code> from the <code>numbers</code> module to test <code>isinstance(n, Number)</code> (available since 2.6).</p>\n\n<pre><code>isinstance(n, numbers.Number)\n</code></pre>\n\n<p>Here it is in action with various kinds of numbers and one non-number:</p>\n\n<pre><code>&gt;&gt;&gt; from numbers import Number\n... from decimal import Decimal\n... from fractions import Fraction\n... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:\n...     print '%15s %s' % (n.__repr__(), isinstance(n, Number))\n              2 True\n            2.0 True\n Decimal('2.0') True\n         (2+0j) True\n Fraction(2, 1) True\n            '2' False\n</code></pre>\n\n<p>This is, of course, contrary to duck typing. If you are more concerned about how an object acts rather than what it is, perform your operations as if you have a number and use exceptions to tell you otherwise.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79477,
                        "reputation": 131259,
                        "user_id": 225312,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/98be1fca8529611a09e77da800faa817?s=256&d=identicon&r=PG",
                        "display_name": "user225312",
                        "link": "https://stackoverflow.com/users/225312/user225312"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1289843237,
                    "creation_date": 1289843237,
                    "answer_id": 4187283,
                    "question_id": 4187185,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Sure you can use <code>isinstance</code>, but be aware that this is not how Python works. Python is a duck typed language. You should not explicitly check your types. A <code>TypeError</code> will be raised if the incorrect type was passed. </p>\n\n<p>So just assume it is an <code>int</code>. Don't bother checking.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 157715,
                        "reputation": 48501,
                        "user_id": 375874,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/STZt9.jpg?s=256",
                        "display_name": "Falmarri",
                        "link": "https://stackoverflow.com/users/375874/falmarri"
                    },
                    "is_accepted": false,
                    "score": -13,
                    "last_activity_date": 1289842706,
                    "creation_date": 1289842706,
                    "answer_id": 4187203,
                    "question_id": 4187185,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>That's not really how python works. Just use it like you would a number, and if someone passes you something that's not a number, fail. It's the programmer's responsibility to pass in the correct types.</p>\n"
                }
            ]
        },
        {
            "35341363": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 61,
                    "last_activity_date": 1455199291,
                    "creation_date": 1455199291,
                    "answer_id": 35341407,
                    "question_id": 35341363,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You imported a <em>different</em> <code>csv</code> module, not the one in the standard library. Perhaps you named your own script <code>csv.py</code> for example.</p>\n\n<p>Find out what is imported instead by printing out the filename of the module:</p>\n\n<pre><code>import csv\nprint(csv.__file__)\n</code></pre>\n\n<p>If that's not in the standard library, rename or delete this file, and remove the <code>csv.pyc</code> file if there is one next to it.</p>\n"
                }
            ]
        },
        {
            "19326004": [
                {
                    "owner": {
                        "account_id": 13949314,
                        "reputation": 45,
                        "user_id": 10073233,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-VZd-9PnRvA4/AAAAAAAAAAI/AAAAAAAAAAk/BHWflqEFttE/photo.jpg?sz=256",
                        "display_name": "Ivan Nepomnyashchikh",
                        "link": "https://stackoverflow.com/users/10073233/ivan-nepomnyashchikh"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1658763487,
                    "last_edit_date": 1658763487,
                    "creation_date": 1532361178,
                    "answer_id": 51482838,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To be able to access a local function's variable, one might add the name of the function and a dot before the name of the local variable (and then, of course, use this construction for calling the variable both in the function's body and outside of it). This solution works in Python 3.7.4.</p>\n<p>For example:</p>\n<pre><code>def func(): # define a function\n    # here y is a local variable, which I want to access; func.y \n    # defines a method for my example function which will allow me to  \n    # access function's local variable y\n    func.y = 4 \n    x = func.y + 8\n    return x\n\nfunc() # now I'm calling the function\na = func.y # I put its local variable into my new variable\nprint(a) # and print my new variable\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 468289,
                        "reputation": 188564,
                        "user_id": 874188,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/091f411d57db5be8298e057a32e5ad72?s=256&d=identicon&r=PG",
                        "display_name": "tripleee",
                        "link": "https://stackoverflow.com/users/874188/tripleee"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1658747614,
                    "last_edit_date": 1658747614,
                    "creation_date": 1658747312,
                    "answer_id": 73108233,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want to avoid <code>global</code>, one possible approach is to define a class. Each class instance has its own attributes; there is also a class attribute space where instances can share an attribute between them.</p>\n<p>Object-oriented programming can be challenging to get into if you are new to Python, but this might actually be a good time to start playing with it.</p>\n<pre><code>class Thing:\n    shared = &quot;foo&quot;\n\n    def __init__(self):\n        &quot;&quot;&quot;\n        This gets called when you create a new Thing()\n        &quot;&quot;&quot;\n        self.bar = &quot;baz&quot;  # default value for new instances\n\n    def get_bar(self):\n        return self.bar\n\n    def set_bar(self, value):\n        self.bar = value\n</code></pre>\n<p>Now, let's create two instances.</p>\n<pre><code>first = Thing()\nsecond = Thing()\n</code></pre>\n<p>The <code>get_bar</code> and <code>set_bar</code> methods are not strictly necessary in simple examples like this one. You can also do</p>\n<pre><code>second.bar = &quot;ick&quot;\nprint(second.bar)\n# &quot;ick&quot;\nprint(first.bar)\n# &quot;baz&quot;\n</code></pre>\n<p>(though for more complex scenarios, you probably want to require users to call the setter and getter methods; there are ways to force this - see e.g. <a href=\"https://stackoverflow.com/questions/2627002/whats-the-pythonic-way-to-use-getters-and-setters\">What&#39;s the pythonic way to use getters and setters?</a>)</p>\n<p>If you change a class attribute via one instance, it will not be changed in the other instances, either.</p>\n<pre><code>second.shared = &quot;poo&quot;\nprint(first.shared)\n# &quot;foo&quot;\n</code></pre>\n<p>But if you change it in the class itself, it will be changed in all the instances which have not separately overridden the shared value.</p>\n<pre><code>Thing.shared = &quot;zoom&quot;\nprint(first.shared)\n# &quot;zoom&quot;\nprint(second.shared)\n# &quot;poo&quot;, still\n</code></pre>\n<p>To recap, you create a new <code>Thing</code> instance by calling <code>Thing()</code>; this will run the <code>__init__</code> method before returning the new instance.  Inside the class, the instance is the first argument to every (non-static, non-class) method, and conventionally called <code>self</code> (though you could get away with calling it <code>shirley</code> if you wanted to, as far as the Python interpreter is concerned).</p>\n<p>There's a lot more to classes; the main selling point is probably that you can create subclasses which inherit from their parent class but can override some behaviors (common examples often involve real-world concepts like animals or vehicles, but a class can just be anything where you want to create a type and encapsulate its behavior, and perhaps override some methods in derived types).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3404816,
                        "reputation": 490,
                        "user_id": 2856159,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/53b7650c175ac09379543e620946e7da?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "John",
                        "link": "https://stackoverflow.com/users/2856159/john"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1656544036,
                    "last_edit_date": 1656544036,
                    "creation_date": 1381521494,
                    "answer_id": 19326257,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem is you were calling <code>print(x.bye)</code> after you set <code>x</code> as a string.  When you run <code>x = hi()</code> it runs hi() and sets the value of x to 5 (the value of bye; it does NOT set the value of x as a reference to the bye variable itself).  EX: <code>bye = 5; x = bye; bye = 4; print(x)</code> prints 5, not 4.</p>\n<p>Also, you don't have to run <code>hi()</code> twice, just run <code>x = hi()</code>, not <code>hi(); x=hi()</code> (the way you had it it was running hi(), not doing anything with the resulting value of 5, and then rerunning the same hi() and saving the value of 5 to the x variable.</p>\n<p>So full code should be</p>\n<pre><code>def hi():\n    bye = 5\n    sigh = 10\n    return bye \nx = hi()\nprint(x)\n</code></pre>\n<p>If you wanted to return multiple variables, one option would be to use a list, or dictionary, depending on what you need. For example:</p>\n<pre><code>def hi():\n    return { 'bye': 5, 'sigh': 10 }\nx = hi()\nprint x['bye']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": true,
                    "score": 143,
                    "last_activity_date": 1614939838,
                    "last_edit_date": 1614939838,
                    "creation_date": 1381527759,
                    "answer_id": 19327712,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could do something along these lines (which worked in both Python v2.7.17 and v3.8.1 when I tested it/them):</p>\n<pre><code>def hi():\n    # other code...\n    hi.bye = 42  # Create function attribute.\n    sigh = 10\n\nhi()\nprint(hi.bye)  # -&gt; 42\n</code></pre>\n<p>Functions are objects in Python and can have arbitrary attributes assigned to them.</p>\n<p>If you're going to be doing this kind of thing often, you could implement something more generic by creating a function decorator that adds a <code>this</code> argument to each call to the decorated function.</p>\n<p>This additional argument will give functions a way to reference themselves without needing to explicitly embed (hardcode) their name into the rest of the definition and is similar to the instance argument that class methods automatically receive as their first argument which is usually named <code>self</code> \u2014 I picked something different to avoid confusion, but like the <code>self</code> argument, it can be named whatever you wish.</p>\n<p>Here's an example of that approach:</p>\n<pre><code>def add_this_arg(func):\n    def wrapped(*args, **kwargs):\n        return func(wrapped, *args, **kwargs)\n    return wrapped\n\n@add_this_arg\ndef hi(this, that):\n    # other code...\n    this.bye = 2 * that  # Create function attribute.\n    sigh = 10\n\nhi(21)\nprint(hi.bye)  # -&gt; 42\n</code></pre>\n<h3>Note</h3>\n<p>This doesn't work for class methods. Just use the instance argument, named <code>self</code> by convention, that's already passed to methods instead of the method's name. You can reference class-level attributes through <code>type(self)</code>. See <a href=\"https://stackoverflow.com/questions/64991519/functions-attributes-when-in-a-class\">Function's attributes when in a class</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8832059,
                        "reputation": 1298,
                        "user_id": 6598010,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/1wsuG.jpg?s=256",
                        "display_name": "Allan Mwesigwa",
                        "link": "https://stackoverflow.com/users/6598010/allan-mwesigwa"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1484039089,
                    "creation_date": 1484039089,
                    "answer_id": 41564939,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code> def hi():\n     bye = 5\n     return bye  \n\nprint hi()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8057239,
                        "reputation": 21,
                        "user_id": 6073964,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5cbcf69c8e5405d3772f9e56cdc7b6a4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Thomas Corll",
                        "link": "https://stackoverflow.com/users/6073964/thomas-corll"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1458164479,
                    "creation_date": 1458164479,
                    "answer_id": 36047505,
                    "question_id": 19326004,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could do something along this lines:</p>\n\n<pre><code>def static_example():\n   if not hasattr(static_example, \"static_var\"):\n       static_example.static_var = 0\n   static_example.static_var += 1\n   return static_example.static_var\n\nprint static_example()\nprint static_example()\nprint static_example()\n</code></pre>\n"
                }
            ]
        },
        {
            "3269686": [
                {
                    "owner": {
                        "account_id": 143563,
                        "reputation": 27172,
                        "user_id": 351984,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/f3133cf8379692c9b8c52bbcb6438aae?s=256&d=identicon&r=PG",
                        "display_name": "Paul Rubel",
                        "link": "https://stackoverflow.com/users/351984/paul-rubel"
                    },
                    "is_accepted": true,
                    "score": 88,
                    "last_activity_date": 1620959895,
                    "last_edit_date": 1620959895,
                    "creation_date": 1279328186,
                    "answer_id": 3269756,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><code>maketrans()</code>/<code>translate()</code> solutions\u2026</p>\n<h2>Python 2.x</h2>\n<pre><code>import string\nrot13 = string.maketrans( \n    &quot;ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz&quot;, \n    &quot;NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm&quot;)\nstring.translate(&quot;Hello World!&quot;, rot13)\n# 'Uryyb Jbeyq!'\n</code></pre>\n<h2>Python 3.x</h2>\n<pre><code>rot13 = str.maketrans(\n    'ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz',\n    'NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm')\n'Hello World!'.translate(rot13)\n# 'Uryyb Jbeyq!'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 107892,
                        "reputation": 4542,
                        "user_id": 286655,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0c9bf5815875df6482e3fd6c0f237bd6?s=256&d=identicon&r=PG",
                        "display_name": "Artur Gaspar",
                        "link": "https://stackoverflow.com/users/286655/artur-gaspar"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1612947080,
                    "last_edit_date": 1612947080,
                    "creation_date": 1279643408,
                    "answer_id": 3292199,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From the builtin module <a href=\"https://github.com/python/cpython/blob/master/Lib/this.py\" rel=\"noreferrer\"><code>this.py</code></a> (<code>import this</code>):</p>\n<pre><code>s = &quot;foobar&quot;\n\nd = {}\nfor c in (65, 97):\n    for i in range(26):\n        d[chr(i+c)] = chr((i+13) % 26 + c)\n\nprint(&quot;&quot;.join([d.get(c, c) for c in s]))  # sbbone\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1895,
                        "reputation": 123232,
                        "user_id": 2611,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3d9b2df0d1610c9418ba9e9013dbd418?s=256&d=identicon&r=PG",
                        "display_name": "ars",
                        "link": "https://stackoverflow.com/users/2611/ars"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1612946805,
                    "last_edit_date": 1612946805,
                    "creation_date": 1279327368,
                    "answer_id": 3269724,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://docs.python.org/3/library/stdtypes.html#str.maketrans\" rel=\"nofollow noreferrer\"><code>maketrans</code></a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.translate\" rel=\"nofollow noreferrer\"><code>translate</code></a> methods of <code>str</code> are handy for this type of thing.</p>\n<p>Here's a general solution:</p>\n<pre><code>import string\n\ndef make_rot_n(n):\n    lc = string.ascii_lowercase\n    uc = string.ascii_uppercase\n    trans = str.maketrans(lc + uc,\n                          lc[n:] + lc[:n] + uc[n:] + uc[:n])\n    return lambda s: str.translate(s, trans)\n\nrot13 = make_rot_n(13)\n\nrot13('foobar')\n# 'sbbone'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 49939,
                        "reputation": 524845,
                        "user_id": 148870,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=256&d=identicon&r=PG",
                        "display_name": "Amber",
                        "link": "https://stackoverflow.com/users/148870/amber"
                    },
                    "is_accepted": false,
                    "score": 67,
                    "last_activity_date": 1547454779,
                    "last_edit_date": 1547454779,
                    "creation_date": 1279327027,
                    "answer_id": 3269704,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This works on Python 2 (but not Python 3):</p>\n\n<pre><code>&gt;&gt;&gt; 'foobar'.encode('rot13')\n'sbbone'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 118236,
                        "reputation": 7030,
                        "user_id": 309111,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/ac46c6398b7a20fdab3e606ddb8e13d3?s=256&d=identicon&r=PG",
                        "display_name": "Nazmul Hasan",
                        "link": "https://stackoverflow.com/users/309111/nazmul-hasan"
                    },
                    "is_accepted": false,
                    "score": 175,
                    "last_activity_date": 1531065491,
                    "last_edit_date": 1531065491,
                    "creation_date": 1279340864,
                    "answer_id": 3270252,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's very simple:</p>\n\n<pre><code>&gt;&gt;&gt; import codecs\n&gt;&gt;&gt; codecs.encode('foobar', 'rot_13')\n'sbbone'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6816063,
                        "reputation": 11,
                        "user_id": 5244714,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/f2faf4642524e2d20d8a389dee70f1f3?s=256&d=identicon&r=PG",
                        "display_name": "Francis Bangura",
                        "link": "https://stackoverflow.com/users/5244714/francis-bangura"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1492291220,
                    "last_edit_date": 1492291220,
                    "creation_date": 1440009112,
                    "answer_id": 32103060,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can also use this also</p>\n\n<pre><code>def n3bu1A(n):\n    o=\"\"\n    key = {\n       'a':'n', 'b':'o', 'c':'p', 'd':'q', 'e':'r', 'f':'s', 'g':'t', 'h':'u', \n       'i':'v', 'j':'w', 'k':'x', 'l':'y', 'm':'z', 'n':'a', 'o':'b', 'p':'c', \n       'q':'d', 'r':'e', 's':'f', 't':'g', 'u':'h', 'v':'i', 'w':'j', 'x':'k',\n       'y':'l', 'z':'m', 'A':'N', 'B':'O', 'C':'P', 'D':'Q', 'E':'R', 'F':'S', \n       'G':'T', 'H':'U', 'I':'V', 'J':'W', 'K':'X', 'L':'Y', 'M':'Z', 'N':'A', \n       'O':'B', 'P':'C', 'Q':'D', 'R':'E', 'S':'F', 'T':'G', 'U':'H', 'V':'I', \n       'W':'J', 'X':'K', 'Y':'L', 'Z':'M'}\n    for x in n:\n        v = x in key.keys()\n        if v == True:\n            o += (key[x])   \n        else:\n            o += x\n    return o\n\nYes = n3bu1A(\"N zhpu fvzcyre jnl gb fnl Guvf vf zl Zragbe!!\")\nprint(Yes)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8278989,
                        "reputation": 360,
                        "user_id": 6224246,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/e10a7074e9a4d1e249d48099b0f84265?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SyntaxError",
                        "link": "https://stackoverflow.com/users/6224246/syntaxerror"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1461074331,
                    "last_edit_date": 1461074331,
                    "creation_date": 1461060719,
                    "answer_id": 36715312,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Short solution:</p>\n\n<pre><code>def rot13(text):\n    return \"\".join([x if ord(x) not in range(65, 91)+range(97, 123) else\n            chr(((ord(x)-97+13)%26)+97) if x.islower() else\n            chr(((ord(x)-65+13)%26)+65) for x in text])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 342353,
                        "reputation": 1878,
                        "user_id": 673474,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8de335ff4b6aae11f54a318741e5a239?s=256&d=identicon&r=PG",
                        "display_name": "Zv_oDD",
                        "link": "https://stackoverflow.com/users/673474/zv-odd"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1456033001,
                    "last_edit_date": 1456033001,
                    "creation_date": 1455976939,
                    "answer_id": 35524324,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I couldn't leave this question here with out a single statement using the modulo operator.</p>\n\n<pre><code>def rot13(s):\n    return ''.join([chr(x.islower() and ((ord(x) - 84) % 26) + 97\n                        or x.isupper() and ((ord(x) - 52) % 26) + 65\n                        or ord(x))\n                    for x in s])\n</code></pre>\n\n<p>This is <strong>not pythonic</strong> nor good practice, but it works!</p>\n\n<pre><code>&gt;&gt; rot13(\"Hello World!\")\nUryyb Jbeyq!\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 190409,
                        "reputation": 2598,
                        "user_id": 1336078,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8fa4b792bca20ed25290cc9a7edac8b0?s=256&d=identicon&r=PG",
                        "display_name": "wjv",
                        "link": "https://stackoverflow.com/users/1336078/wjv"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1455952774,
                    "creation_date": 1455952774,
                    "answer_id": 35520349,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A one-liner to rot13 a string <code>S</code>:</p>\n\n<pre><code>S.translate({a : a + (lambda x: 1 if x&gt;=0 else -1)(77 - a) * 13 for a in range(65, 91)})\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 263317,
                        "reputation": 9423,
                        "user_id": 548792,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/8f9d3b272a74070e9ba4acdc7b9753b1?s=256&d=identicon&r=PG",
                        "display_name": "ankostis",
                        "link": "https://stackoverflow.com/users/548792/ankostis"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1438716718,
                    "creation_date": 1438716718,
                    "answer_id": 31817704,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In python-3 the <code>str</code>-codec that @amber mentioned has moved to <code>codecs</code> standard-library:</p>\n\n<pre><code>&gt; import codecs\n&gt; codecs.encode('foo', 'rot13')\nsbb\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6016007,
                        "reputation": 41,
                        "user_id": 4982339,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bb366b2bdd14a842e337038999af8720?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jeroen",
                        "link": "https://stackoverflow.com/users/4982339/jeroen"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1434973906,
                    "creation_date": 1434973906,
                    "answer_id": 30979323,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The following function <code>rot(s, n)</code> encodes a string <code>s</code> with ROT-<code>n</code> encoding for any integer <code>n</code>, with <code>n</code> defaulting to 13. Both upper- and lowercase letters are supported. Values of <code>n</code> over 26 or negative values are handled appropriately, e.g., shifting by 27 positions is equal to shifting by one position. Decoding is done with <code>invrot(s, n)</code>.</p>\n\n<pre><code>import string\n\ndef rot(s, n=13):\n    '''Encode string s with ROT-n, i.e., by shifting all letters n positions.\n    When n is not supplied, ROT-13 encoding is assumed.\n    '''\n    upper = string.ascii_uppercase\n    lower = string.ascii_lowercase\n    upper_start = ord(upper[0])\n    lower_start = ord(lower[0])\n    out = ''\n    for letter in s:\n        if letter in upper:\n            out += chr(upper_start + (ord(letter) - upper_start + n) % 26)\n        elif letter in lower:\n            out += chr(lower_start + (ord(letter) - lower_start + n) % 26)\n        else:\n            out += letter\n    return(out)\n\ndef invrot(s, n=13):\n    '''Decode a string s encoded with ROT-n-encoding\n    When n is not supplied, ROT-13 is assumed.\n    '''\n    return(rot(s, -n))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1452192,
                        "reputation": 3795,
                        "user_id": 1843248,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://i.sstatic.net/63X0V.jpg?s=256",
                        "display_name": "Deacon",
                        "link": "https://stackoverflow.com/users/1843248/deacon"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1434734579,
                    "last_edit_date": 1434734579,
                    "creation_date": 1434728511,
                    "answer_id": 30942167,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I found this post when I started wondering about the easiest way to implement\n<code>rot13</code> into Python myself.  My goals were:</p>\n\n<ul>\n<li>Works in both Python 2.7.6 and 3.3.</li>\n<li>Handle both upper and lower case.</li>\n<li>Not use any external libraries.</li>\n</ul>\n\n<p>This meets all three of those requirements.  That being said, I'm sure it's not winning any code golf competitions.</p>\n\n<pre><code>def rot13(string):\n    CLEAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    ROT13 = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'\n    TABLE = {x: y for x, y in zip(CLEAR, ROT13)}\n\n    return ''.join(map(lambda x: TABLE.get(x, x), string))\n\n\n\nif __name__ == '__main__':\n    CLEAR = 'Hello, World!'\n    R13 = 'Uryyb, Jbeyq!'\n\n    r13 = rot13(CLEAR)\n    assert r13 == R13\n\n    clear = rot13(r13)\n    assert clear == CLEAR\n</code></pre>\n\n<p>This works by creating a lookup table and simply returning the original character for any character not found in the lookup table.</p>\n\n<h1>Update</h1>\n\n<p>I got to worrying about someone wanting to use this to encrypt an arbitrarily-large file (say, a few gigabytes of text).  I don't know why they'd want to do this, but what if they did?  So I rewrote it as a generator.  Again, this has been tested in both Python 2.7.6 and 3.3.</p>\n\n<pre><code>def rot13(clear):\n    CLEAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    ROT13 = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'\n    TABLE = {x: y for x, y in zip(CLEAR, ROT13)}\n\n    for c in clear:\n        yield TABLE.get(c, c)\n\n\n\nif __name__ == '__main__':\n    CLEAR = 'Hello, World!'\n    R13 = 'Uryyb, Jbeyq!'\n\n    r13 = ''.join(rot13(CLEAR))\n    assert r13 == R13\n\n    clear = ''.join(rot13(r13))\n    assert clear == CLEAR\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4936477,
                        "reputation": 1563,
                        "user_id": 3974427,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/499c734639bfec29dbd79eff78987ca1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yamm",
                        "link": "https://stackoverflow.com/users/3974427/yamm"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1428593090,
                    "last_edit_date": 1428593090,
                    "creation_date": 1428572611,
                    "answer_id": 29535017,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Interesting exercise ;-) i think i have the best solution because: </p>\n\n<ol>\n<li>no modules needed, uses only built-in functions --> <strong>no deprecation</strong></li>\n<li>it can be used as a one liner</li>\n<li>based on ascii, no mapping dicts/strings etc.</li>\n</ol>\n\n<p>Python 2 &amp; 3 (probably Python 1):</p>\n\n<pre><code>def rot13(s):\n    return ''.join([chr(ord(n) + (13 if 'Z' &lt; n &lt; 'n' or n &lt; 'N' else -13)) if n.isalpha() else n for n in s])\n\ndef rot13_verbose(s):\n    x = []\n    for n in s:\n        if n.isalpha():\n            # 'n' is the 14th character in the alphabet so if a character is bigger we can subtract 13 to get rot13\n            ort = 13 if 'Z' &lt; n &lt; 'n' or n &lt; 'N' else -13\n            x.append(chr(ord(n) + ort))\n        else:\n            x.append(n)\n    return ''.join(x)\n\n\n\n# crazy .min version (99 characters) disclaimer: not pep8 compatible^\n\ndef r(s):return''.join([chr(ord(n)+(13if'Z'&lt;n&lt;'n'or'N'&gt;n else-13))if n.isalpha()else n for n in s])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 451871,
                        "reputation": 984,
                        "user_id": 847988,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://www.gravatar.com/avatar/f4a0eb89a9ea64b6e48c8f97f7b0ebb9?s=256&d=identicon&r=PG",
                        "display_name": "user847988",
                        "link": "https://stackoverflow.com/users/847988/user847988"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1423856673,
                    "creation_date": 1423856673,
                    "answer_id": 28507539,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>from string import maketrans, lowercase, uppercase\n\ndef rot13(message):\n   lower = maketrans(lowercase, lowercase[13:] + lowercase[:13])\n   upper = maketrans(uppercase, uppercase[13:] + uppercase[:13])\n   return message.translate(lower).translate(upper)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2156436,
                        "reputation": 241,
                        "user_id": 1911551,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2ba7d10a56ca74cbd7b3b217a893767e?s=256&d=identicon&r=PG",
                        "display_name": "Diaz",
                        "link": "https://stackoverflow.com/users/1911551/diaz"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1388030576,
                    "creation_date": 1388030576,
                    "answer_id": 20778952,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can support uppercase letters on the original code posted by Mr. Walter by alternating the upper case and lower case letters. </p>\n\n<pre><code>chars = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n</code></pre>\n\n<p>If you notice the index of the uppercase letters are all even numbers while the index of the lower case letters are odd.  </p>\n\n<ul>\n<li>A = 0  a = 1, </li>\n<li>B = 2, b = 3, </li>\n<li>C = 4, c = 4,</li>\n<li>...</li>\n</ul>\n\n<p>This odd-even pattern allows us to safely add the amount needed without having to worry about the case.  </p>\n\n<pre><code>trans = chars[26:] + chars[:26]\n</code></pre>\n\n<p>The reason you add 26 is because the string has doubled in letters due to the upper case letters. However, the shift is still 13 spaces on the alphabet. </p>\n\n<p>The full code: </p>\n\n<pre><code>def rot13(s):\n    chars = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n    trans = chars[26:]+chars[:26]\n    rot_char = lambda c: trans[chars.find(c)] if chars.find(c) &gt; -1 else c\n    return ''.join(rot_char(c) for c in s)\n</code></pre>\n\n<p>OUTPUT (Tested with python 2.7):</p>\n\n<pre><code>print rot13(\"Hello World!\") --&gt; Uryyb Jbeyq!\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3353922,
                        "reputation": 443,
                        "user_id": 2817354,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d0e8f1e334695cde724c8ebb2ae68971?s=256&d=identicon&r=PG",
                        "display_name": "DeaD_EyE",
                        "link": "https://stackoverflow.com/users/2817354/dead-eye"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1380151616,
                    "creation_date": 1380151616,
                    "answer_id": 19016856,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def rot13(s):\n    lower_chars = ''.join(chr(c) for c in range (97,123)) #ASCII a-z\n    upper_chars = ''.join(chr(c) for c in range (65,91)) #ASCII A-Z\n    lower_encode = lower_chars[13:] + lower_chars[:13] #shift 13 bytes\n    upper_encode = upper_chars[13:] + upper_chars[:13] #shift 13 bytes\n    output = \"\" #outputstring\n    for c in s:\n        if c in lower_chars:\n                output = output + lower_encode[lower_chars.find(c)]\n        elif c in upper_chars:\n            output = output + upper_encode[upper_chars.find(c)]\n        else:\n            output = output + c\n    return output\n</code></pre>\n\n<p>Another solution with shifting. Maybe this code helps other people to understand rot13 better.\nHaven't tested it completely.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 74091,
                        "reputation": 121,
                        "user_id": 213072,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/262118693a539f1d57b4ce7ba63fb265?s=256&d=identicon&r=PG",
                        "display_name": "Barrest",
                        "link": "https://stackoverflow.com/users/213072/barrest"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1371645184,
                    "last_edit_date": 1371645184,
                    "creation_date": 1279327203,
                    "answer_id": 3269719,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try this:</p>\n\n<pre><code>import codecs\ncodecs.encode(\"text to be rot13()'ed\", \"rot_13\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 510908,
                        "reputation": 2350,
                        "user_id": 1499713,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b3e359668f2369fe1b576ce4d25014d9?s=256&d=identicon&r=PG",
                        "display_name": "Eratosthenes",
                        "link": "https://stackoverflow.com/users/1499713/eratosthenes"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1345816780,
                    "last_edit_date": 1345816780,
                    "creation_date": 1345805066,
                    "answer_id": 12107878,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This works for uppercase and lowercase. I don't know how elegant you deem it to be. </p>\n\n<pre><code>def rot13(s):\n    rot=lambda x:chr(ord(x)+13) if chr(ord(x.lower())+13).isalpha()==True else chr(ord(x)-13)\n    s=[rot(i) for i in filter(lambda x:x!=',',map(str,s))]\n    return ''.join(s)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1678970,
                        "reputation": 21,
                        "user_id": 1543747,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9787e786234ac67533df17ed33ffb22f?s=256&d=identicon&r=PG",
                        "display_name": "user1543747",
                        "link": "https://stackoverflow.com/users/1543747/user1543747"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1342948488,
                    "creation_date": 1342948488,
                    "answer_id": 11599027,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For arbitrary values, something like this works for 2.x</p>\n\n<pre><code>from string import ascii_uppercase as uc, ascii_lowercase as lc, maketrans                                                                                                            \n\nrotate = 13 # ROT13                                                                    \nrot = \"\".join([(x[:rotate][::-1] + x[rotate:][::-1])[::-1] for x in (uc,lc)])   \n\ndef rot_func(text, encode=True):                                                \n    ascii = uc + lc                                                             \n    src, trg = (ascii, rot) if encode else (rot, ascii)                         \n    trans = maketrans(src, trg)                                                 \n    return text.translate(trans)                                                \n\ntext = \"Text to ROT{}\".format(rotate)                                           \nencode = rot_func(text)                                                         \ndecode = rot_func(encode, False)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1405103,
                        "reputation": 240,
                        "user_id": 1333039,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c9be23553f5fae97efcdeb0f888190bb?s=256&d=identicon&r=PG",
                        "display_name": "bbc",
                        "link": "https://stackoverflow.com/users/1333039/bbc"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1335868489,
                    "creation_date": 1335868489,
                    "answer_id": 10396501,
                    "question_id": 3269686,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As of Python 3.1, <code>string.translate</code> and <code>string.maketrans</code> no longer exist. However, these methods can be used with <code>bytes</code> instead.</p>\n\n<p>Thus, an up-to-date solution directly inspired from Paul Rubel's one, is:</p>\n\n<pre><code>rot13 = bytes.maketrans(\n    b\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    b\"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM\")\nb'Hello world!'.translate(rot13)\n</code></pre>\n\n<p>Conversion from <code>string</code> to <code>bytes</code> and vice-versa can be done with the <a href=\"http://docs.python.org/py3k/library/stdtypes.html?highlight=str.encode#str.encode\"><code>encode</code></a> and <a href=\"http://docs.python.org/py3k/library/stdtypes.html?highlight=bytes.decode#bytes.decode\"><code>decode</code></a> built-in functions.</p>\n"
                }
            ]
        },
        {
            "4408377": [
                {
                    "owner": {
                        "account_id": 254311,
                        "reputation": 1212,
                        "user_id": 533618,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://www.gravatar.com/avatar/d51847d62d99950fbbdca5d0d330df81?s=256&d=identicon&r=PG",
                        "display_name": "Ji\u0159&#237; Polcar",
                        "link": "https://stackoverflow.com/users/533618/ji%c5%99%c3%ad-polcar"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1690297141,
                    "last_edit_date": 1690297141,
                    "creation_date": 1291980923,
                    "answer_id": 4408409,
                    "question_id": 4408377,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; cmd = [ 'echo', 'arg1', 'arg2' ]\n&gt;&gt;&gt; output = subprocess.Popen( cmd, stdout=subprocess.PIPE ).communicate()[0]\n&gt;&gt;&gt; print(output)\narg1 arg2\n</code></pre>\n<p>There is a bug in using of the subprocess.PIPE. For the huge output use this:</p>\n<pre><code>import subprocess\nimport tempfile\n\nwith tempfile.TemporaryFile() as tempf:\n    proc = subprocess.Popen(['echo', 'a', 'b'], stdout=tempf)\n    proc.wait()\n    tempf.seek(0)\n    print(tempf.read())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": false,
                    "score": 34,
                    "last_activity_date": 1602073160,
                    "last_edit_date": 1602073160,
                    "creation_date": 1291980795,
                    "answer_id": 4408389,
                    "question_id": 4408377,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The recommended way in Python 3.5 and above is to use <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.run\" rel=\"noreferrer\"><code>subprocess.run()</code></a>:</p>\n<pre><code>from subprocess import run\noutput = run(&quot;pwd&quot;, capture_output=True).stdout\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1187149,
                        "reputation": 539,
                        "user_id": 2493504,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/70d0662975499efdacde56162318e25f?s=256&d=identicon&r=PG",
                        "display_name": "Mahmoud",
                        "link": "https://stackoverflow.com/users/2493504/mahmoud"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1371474658,
                    "creation_date": 1371474658,
                    "answer_id": 17148307,
                    "question_id": 4408377,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The easiest way is to use the library commands</p>\n\n<pre><code>import commands\nprint commands.getstatusoutput('echo \"test\" | wc')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 150878,
                        "reputation": 1559,
                        "user_id": 364382,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/12d53ab4368a2a0a891450cc900bbacb?s=256&d=identicon&r=PG",
                        "display_name": "gerry",
                        "link": "https://stackoverflow.com/users/364382/gerry"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1291981452,
                    "last_edit_date": 1291981452,
                    "creation_date": 1291981027,
                    "answer_id": 4408424,
                    "question_id": 4408377,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <a href=\"http://docs.python.org/library/subprocess.html#subprocess.Popen\" rel=\"noreferrer\">Popen</a> in <code>subprocess</code> as they suggest.</p>\n\n<p>with <code>os</code>, which is not recomment, it's like below: </p>\n\n<pre><code>import os\na  = os.popen('pwd').readlines()\n</code></pre>\n"
                }
            ]
        },
        {
            "1090620": [
                {
                    "owner": {
                        "account_id": 6744,
                        "reputation": 80564,
                        "user_id": 11465,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=256&d=identicon&r=PG",
                        "display_name": "David Cournapeau",
                        "link": "https://stackoverflow.com/users/11465/david-cournapeau"
                    },
                    "is_accepted": true,
                    "score": 53,
                    "last_activity_date": 1246947081,
                    "creation_date": 1246947081,
                    "answer_id": 1090635,
                    "question_id": 1090620,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>At the python level, most of them are documented in the <a href=\"http://docs.python.org/reference/datamodel.html#specialnames\" rel=\"noreferrer\">language reference</a>. At the C level, you can find it under the <a href=\"http://docs.python.org/c-api/object.html\" rel=\"noreferrer\">object protocol</a> section (strictly speaking, you only have a subset here, though).</p>\n"
                }
            ]
        },
        {
            "25665": [
                {
                    "owner": {
                        "account_id": 668730,
                        "reputation": 11,
                        "user_id": 506335,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/6afaeb5c7fa581754b78da75c69f6873?s=256&d=identicon&r=PG",
                        "display_name": "Decora",
                        "link": "https://stackoverflow.com/users/506335/decora"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1559358884,
                    "last_edit_date": 1559358884,
                    "creation_date": 1289601245,
                    "answer_id": 4169679,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have used <code>pdftohtml</code> with the <code>-xml</code> argument, read the result with <code>subprocess.Popen()</code>, that will give you x coord, y coord, width, height, and font, of every <em>snippet</em> of text in the pdf. I think this is what 'evince' probably uses too because the same error messages spew out. </p>\n\n<p>If you need to process columnar data, it gets slightly more complicated as you have to invent an algorithm that suits your pdf file. The problem is that the programs that make PDF files don't really necessarily lay out the text in any logical format. You can try simple sorting algorithms and it works sometimes, but there can be little 'stragglers' and 'strays', pieces of text that don't get put in the order you thought they would. So you have to get creative. </p>\n\n<p>It took me about 5 hours to figure out one for the pdf's I was working on. But it works pretty good now. Good luck. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 2025,
                        "reputation": 16227,
                        "user_id": 2783,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c7780a1286f7205ed3d51739552a8a8d?s=256&d=identicon&r=PG",
                        "display_name": "David Crow",
                        "link": "https://stackoverflow.com/users/2783/david-crow"
                    },
                    "is_accepted": true,
                    "score": 161,
                    "last_activity_date": 1559358747,
                    "last_edit_date": 1559358747,
                    "creation_date": 1219641682,
                    "answer_id": 25689,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try <a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"noreferrer\">PDFMiner</a>. It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.</p>\n\n<p>The Tagged PDF format seems to be the cleanest, and stripping out the XML tags leaves just the bare text.</p>\n\n<p>A Python 3 version is available under:</p>\n\n<ul>\n<li><a href=\"https://github.com/pdfminer/pdfminer.six\" rel=\"noreferrer\">https://github.com/pdfminer/pdfminer.six</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 3967341,
                        "reputation": 871,
                        "user_id": 3272884,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/fVl56.jpg?s=256",
                        "display_name": "user3272884",
                        "link": "https://stackoverflow.com/users/3272884/user3272884"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1507020149,
                    "last_edit_date": 1507020149,
                    "creation_date": 1391552166,
                    "answer_id": 21564675,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Since none for these solutions support the latest version of PDFMiner I wrote a simple solution that will return text of a pdf using PDFMiner. This will work for those who are getting import errors with <code>process_pdf</code> </p>\n\n<pre><code>import sys\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.converter import XMLConverter, HTMLConverter, TextConverter\nfrom pdfminer.layout import LAParams\nfrom cStringIO import StringIO\n\ndef pdfparser(data):\n\n    fp = file(data, 'rb')\n    rsrcmgr = PDFResourceManager()\n    retstr = StringIO()\n    codec = 'utf-8'\n    laparams = LAParams()\n    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)\n    # Create a PDF interpreter object.\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    # Process each page contained in the document.\n\n    for page in PDFPage.get_pages(fp):\n        interpreter.process_page(page)\n        data =  retstr.getvalue()\n\n    print data\n\nif __name__ == '__main__':\n    pdfparser(sys.argv[1])  \n</code></pre>\n\n<p>See below code that works for Python 3:</p>\n\n<pre><code>import sys\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.converter import XMLConverter, HTMLConverter, TextConverter\nfrom pdfminer.layout import LAParams\nimport io\n\ndef pdfparser(data):\n\n    fp = open(data, 'rb')\n    rsrcmgr = PDFResourceManager()\n    retstr = io.StringIO()\n    codec = 'utf-8'\n    laparams = LAParams()\n    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)\n    # Create a PDF interpreter object.\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    # Process each page contained in the document.\n\n    for page in PDFPage.get_pages(fp):\n        interpreter.process_page(page)\n        data =  retstr.getvalue()\n\n    print(data)\n\nif __name__ == '__main__':\n    pdfparser(sys.argv[1])  \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 126919,
                        "reputation": 5276,
                        "user_id": 323751,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2e0188151b812fb05b361bc136ae2732?s=256&d=identicon&r=PG",
                        "display_name": "gonz",
                        "link": "https://stackoverflow.com/users/323751/gonz"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1382978787,
                    "last_edit_date": 1382978787,
                    "creation_date": 1369756887,
                    "answer_id": 16796554,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I needed to convert a specific PDF to plain text within a python module. I used <a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"noreferrer\">PDFMiner</a> 20110515, after reading through their <a href=\"https://github.com/euske/pdfminer/blob/master/tools/pdf2txt.py\" rel=\"noreferrer\">pdf2txt.py</a> tool I wrote this simple snippet:</p>\n\n<pre><code>from cStringIO import StringIO\nfrom pdfminer.pdfinterp import PDFResourceManager, process_pdf\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\n\ndef to_txt(pdf_path):\n    input_ = file(pdf_path, 'rb')\n    output = StringIO()\n\n    manager = PDFResourceManager()\n    converter = TextConverter(manager, output, laparams=LAParams())\n    process_pdf(manager, converter, input_)\n\n    return output.getvalue() \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25075,
                        "reputation": 8956,
                        "user_id": 64206,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/cebc9b2556584de902449716133f36ec?s=256&d=identicon&r=PG",
                        "display_name": "tgray",
                        "link": "https://stackoverflow.com/users/64206/tgray"
                    },
                    "is_accepted": false,
                    "score": 144,
                    "last_activity_date": 1372187345,
                    "last_edit_date": 1495535497,
                    "creation_date": 1249937256,
                    "answer_id": 1257121,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"noreferrer\">PDFMiner</a> package has changed since <a href=\"https://stackoverflow.com/users/3571/codeape\">codeape</a> posted.  </p>\n\n<p><strong>EDIT (again):</strong></p>\n\n<p>PDFMiner has been updated again in version <code>20100213</code></p>\n\n<p>You can check the version you have installed with the following:</p>\n\n<pre><code>&gt;&gt;&gt; import pdfminer\n&gt;&gt;&gt; pdfminer.__version__\n'20100213'\n</code></pre>\n\n<p>Here's the updated version (with comments on what I changed/added):</p>\n\n<pre><code>def pdf_to_csv(filename):\n    from cStringIO import StringIO  #&lt;-- added so you can copy/paste this to try it\n    from pdfminer.converter import LTTextItem, TextConverter\n    from pdfminer.pdfparser import PDFDocument, PDFParser\n    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\n\n    class CsvConverter(TextConverter):\n        def __init__(self, *args, **kwargs):\n            TextConverter.__init__(self, *args, **kwargs)\n\n        def end_page(self, i):\n            from collections import defaultdict\n            lines = defaultdict(lambda : {})\n            for child in self.cur_item.objs:\n                if isinstance(child, LTTextItem):\n                    (_,_,x,y) = child.bbox                   #&lt;-- changed\n                    line = lines[int(-y)]\n                    line[x] = child.text.encode(self.codec)  #&lt;-- changed\n\n            for y in sorted(lines.keys()):\n                line = lines[y]\n                self.outfp.write(\";\".join(line[x] for x in sorted(line.keys())))\n                self.outfp.write(\"\\n\")\n\n    # ... the following part of the code is a remix of the \n    # convert() function in the pdfminer/tools/pdf2text module\n    rsrc = PDFResourceManager()\n    outfp = StringIO()\n    device = CsvConverter(rsrc, outfp, codec=\"utf-8\")  #&lt;-- changed \n        # becuase my test documents are utf-8 (note: utf-8 is the default codec)\n\n    doc = PDFDocument()\n    fp = open(filename, 'rb')\n    parser = PDFParser(fp)       #&lt;-- changed\n    parser.set_document(doc)     #&lt;-- added\n    doc.set_parser(parser)       #&lt;-- added\n    doc.initialize('')\n\n    interpreter = PDFPageInterpreter(rsrc, device)\n\n    for i, page in enumerate(doc.get_pages()):\n        outfp.write(\"START PAGE %d\\n\" % i)\n        interpreter.process_page(page)\n        outfp.write(\"END PAGE %d\\n\" % i)\n\n    device.close()\n    fp.close()\n\n    return outfp.getvalue()\n</code></pre>\n\n<p><strong>Edit (yet again):</strong></p>\n\n<p>Here is an update for the latest version in <a href=\"http://pypi.python.org/pypi/pdfminer/\" rel=\"noreferrer\">pypi</a>, <code>20100619p1</code>.  In short I replaced <code>LTTextItem</code> with <code>LTChar</code> and passed an instance of LAParams to the CsvConverter constructor.</p>\n\n<pre><code>def pdf_to_csv(filename):\n    from cStringIO import StringIO  \n    from pdfminer.converter import LTChar, TextConverter    #&lt;-- changed\n    from pdfminer.layout import LAParams\n    from pdfminer.pdfparser import PDFDocument, PDFParser\n    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\n\n    class CsvConverter(TextConverter):\n        def __init__(self, *args, **kwargs):\n            TextConverter.__init__(self, *args, **kwargs)\n\n        def end_page(self, i):\n            from collections import defaultdict\n            lines = defaultdict(lambda : {})\n            for child in self.cur_item.objs:\n                if isinstance(child, LTChar):               #&lt;-- changed\n                    (_,_,x,y) = child.bbox                   \n                    line = lines[int(-y)]\n                    line[x] = child.text.encode(self.codec)\n\n            for y in sorted(lines.keys()):\n                line = lines[y]\n                self.outfp.write(\";\".join(line[x] for x in sorted(line.keys())))\n                self.outfp.write(\"\\n\")\n\n    # ... the following part of the code is a remix of the \n    # convert() function in the pdfminer/tools/pdf2text module\n    rsrc = PDFResourceManager()\n    outfp = StringIO()\n    device = CsvConverter(rsrc, outfp, codec=\"utf-8\", laparams=LAParams())  #&lt;-- changed\n        # becuase my test documents are utf-8 (note: utf-8 is the default codec)\n\n    doc = PDFDocument()\n    fp = open(filename, 'rb')\n    parser = PDFParser(fp)       \n    parser.set_document(doc)     \n    doc.set_parser(parser)       \n    doc.initialize('')\n\n    interpreter = PDFPageInterpreter(rsrc, device)\n\n    for i, page in enumerate(doc.get_pages()):\n        outfp.write(\"START PAGE %d\\n\" % i)\n        if page is not None:\n            interpreter.process_page(page)\n        outfp.write(\"END PAGE %d\\n\" % i)\n\n    device.close()\n    fp.close()\n\n    return outfp.getvalue()\n</code></pre>\n\n<p><strong>EDIT (one more time):</strong></p>\n\n<p>Updated for version <code>20110515</code> (thanks to Oeufcoque Penteano!):</p>\n\n<pre><code>def pdf_to_csv(filename):\n    from cStringIO import StringIO  \n    from pdfminer.converter import LTChar, TextConverter\n    from pdfminer.layout import LAParams\n    from pdfminer.pdfparser import PDFDocument, PDFParser\n    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\n\n    class CsvConverter(TextConverter):\n        def __init__(self, *args, **kwargs):\n            TextConverter.__init__(self, *args, **kwargs)\n\n        def end_page(self, i):\n            from collections import defaultdict\n            lines = defaultdict(lambda : {})\n            for child in self.cur_item._objs:                #&lt;-- changed\n                if isinstance(child, LTChar):\n                    (_,_,x,y) = child.bbox                   \n                    line = lines[int(-y)]\n                    line[x] = child._text.encode(self.codec) #&lt;-- changed\n\n            for y in sorted(lines.keys()):\n                line = lines[y]\n                self.outfp.write(\";\".join(line[x] for x in sorted(line.keys())))\n                self.outfp.write(\"\\n\")\n\n    # ... the following part of the code is a remix of the \n    # convert() function in the pdfminer/tools/pdf2text module\n    rsrc = PDFResourceManager()\n    outfp = StringIO()\n    device = CsvConverter(rsrc, outfp, codec=\"utf-8\", laparams=LAParams())\n        # becuase my test documents are utf-8 (note: utf-8 is the default codec)\n\n    doc = PDFDocument()\n    fp = open(filename, 'rb')\n    parser = PDFParser(fp)       \n    parser.set_document(doc)     \n    doc.set_parser(parser)       \n    doc.initialize('')\n\n    interpreter = PDFPageInterpreter(rsrc, device)\n\n    for i, page in enumerate(doc.get_pages()):\n        outfp.write(\"START PAGE %d\\n\" % i)\n        if page is not None:\n            interpreter.process_page(page)\n        outfp.write(\"END PAGE %d\\n\" % i)\n\n    device.close()\n    fp.close()\n\n    return outfp.getvalue()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2558,
                        "reputation": 100479,
                        "user_id": 3571,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=256&d=identicon&r=PG",
                        "display_name": "codeape",
                        "link": "https://stackoverflow.com/users/3571/codeape"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1311573907,
                    "last_edit_date": 1311573907,
                    "creation_date": 1227536418,
                    "answer_id": 314249,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can also quite easily use pdfminer as a library. You have access to the pdf's content model, and can create your own text extraction. I did this to convert pdf contents to semi-colon separated text, using the code below.</p>\n\n<p>The function simply sorts the TextItem content objects according to their y and x coordinates, and outputs items with the same y coordinate as one text line, separating the objects on the same line with ';' characters.</p>\n\n<p>Using this approach, I was able to extract text from a pdf that no other tool was able to extract content suitable for further parsing from. Other tools I tried include pdftotext, ps2ascii and the online tool pdftextonline.com.</p>\n\n<p>pdfminer is an invaluable tool for pdf-scraping.</p>\n\n<pre><code>\ndef pdf_to_csv(filename):\n    from pdflib.page import TextItem, TextConverter\n    from pdflib.pdfparser import PDFDocument, PDFParser\n    from pdflib.pdfinterp import PDFResourceManager, PDFPageInterpreter\n\n    class CsvConverter(TextConverter):\n        def __init__(self, *args, **kwargs):\n            TextConverter.__init__(self, *args, **kwargs)\n\n        def end_page(self, i):\n            from collections import defaultdict\n            lines = defaultdict(lambda : {})\n            for child in self.cur_item.objs:\n                if isinstance(child, TextItem):\n                    (_,_,x,y) = child.bbox\n                    line = lines[int(-y)]\n                    line[x] = child.text\n\n            for y in sorted(lines.keys()):\n                line = lines[y]\n                self.outfp.write(\";\".join(line[x] for x in sorted(line.keys())))\n                self.outfp.write(\"\\n\")\n\n    # ... the following part of the code is a remix of the \n    # convert() function in the pdfminer/tools/pdf2text module\n    rsrc = PDFResourceManager()\n    outfp = StringIO()\n    device = CsvConverter(rsrc, outfp, \"ascii\")\n\n    doc = PDFDocument()\n    fp = open(filename, 'rb')\n    parser = PDFParser(doc, fp)\n    doc.initialize('')\n\n    interpreter = PDFPageInterpreter(rsrc, device)\n\n    for i, page in enumerate(doc.get_pages()):\n        outfp.write(\"START PAGE %d\\n\" % i)\n        interpreter.process_page(page)\n        outfp.write(\"END PAGE %d\\n\" % i)\n\n    device.close()\n    fp.close()\n\n    return outfp.getvalue()\n\n</code></pre>\n\n<p><strong>UPDATE</strong>:</p>\n\n<p>The code above is written against an old version of the API, see my comment below.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 169293,
                        "reputation": 18355,
                        "user_id": 395287,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/OiGAR.jpg?s=256",
                        "display_name": "Tim McNamara",
                        "link": "https://stackoverflow.com/users/395287/tim-mcnamara"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1296433637,
                    "creation_date": 1296433637,
                    "answer_id": 4846622,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://pypi.python.org/pypi/slate\"><code>slate</code></a> is a project that makes it very simple to use PDFMiner from a library:</p>\n\n<pre><code>&gt;&gt;&gt; with open('example.pdf') as f:\n...    doc = slate.PDF(f)\n...\n&gt;&gt;&gt; doc\n[..., ..., ...]\n&gt;&gt;&gt; doc[1]\n'Text from page 2...'   \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 157585,
                        "reputation": 2014,
                        "user_id": 375649,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AYXsA.jpg?s=256",
                        "display_name": "Andrey Shipilov",
                        "link": "https://stackoverflow.com/users/375649/andrey-shipilov"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1296433377,
                    "creation_date": 1296433377,
                    "answer_id": 4846592,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Found that solution today. Works great for me. Even rendering PDF pages to PNG images.\n<a href=\"http://www.swftools.org/gfx_tutorial.html\" rel=\"nofollow\">http://www.swftools.org/gfx_tutorial.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 59244,
                        "reputation": 11404,
                        "user_id": 177293,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/ae4384c9130c9b1707a15584f6b75333?s=256&d=identicon&r=PG",
                        "display_name": "Skylar Saveland",
                        "link": "https://stackoverflow.com/users/177293/skylar-saveland"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1279480676,
                    "creation_date": 1279480676,
                    "answer_id": 3276880,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Repurposing the pdf2txt.py code that comes with pdfminer; you can make a function that will take a path to the pdf; optionally, an outtype (txt|html|xml|tag) and opts like the commandline pdf2txt {'-o': '/path/to/outfile.txt' ...}.  By default, you can call:</p>\n\n<pre><code>convert_pdf(path)\n</code></pre>\n\n<p>A text file will be created, a sibling on the filesystem to the original pdf.</p>\n\n<pre><code>def convert_pdf(path, outtype='txt', opts={}):\n    import sys\n    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter, process_pdf\n    from pdfminer.converter import XMLConverter, HTMLConverter, TextConverter, TagExtractor\n    from pdfminer.layout import LAParams\n    from pdfminer.pdfparser import PDFDocument, PDFParser\n    from pdfminer.pdfdevice import PDFDevice\n    from pdfminer.cmapdb import CMapDB\n\n    outfile = path[:-3] + outtype\n    outdir = '/'.join(path.split('/')[:-1])\n\n    debug = 0\n    # input option\n    password = ''\n    pagenos = set()\n    maxpages = 0\n    # output option\n    codec = 'utf-8'\n    pageno = 1\n    scale = 1\n    showpageno = True\n    laparams = LAParams()\n    for (k, v) in opts:\n        if k == '-d': debug += 1\n        elif k == '-p': pagenos.update( int(x)-1 for x in v.split(',') )\n        elif k == '-m': maxpages = int(v)\n        elif k == '-P': password = v\n        elif k == '-o': outfile = v\n        elif k == '-n': laparams = None\n        elif k == '-A': laparams.all_texts = True\n        elif k == '-D': laparams.writing_mode = v\n        elif k == '-M': laparams.char_margin = float(v)\n        elif k == '-L': laparams.line_margin = float(v)\n        elif k == '-W': laparams.word_margin = float(v)\n        elif k == '-O': outdir = v\n        elif k == '-t': outtype = v\n        elif k == '-c': codec = v\n        elif k == '-s': scale = float(v)\n    #\n    CMapDB.debug = debug\n    PDFResourceManager.debug = debug\n    PDFDocument.debug = debug\n    PDFParser.debug = debug\n    PDFPageInterpreter.debug = debug\n    PDFDevice.debug = debug\n    #\n    rsrcmgr = PDFResourceManager()\n    if not outtype:\n        outtype = 'txt'\n        if outfile:\n            if outfile.endswith('.htm') or outfile.endswith('.html'):\n                outtype = 'html'\n            elif outfile.endswith('.xml'):\n                outtype = 'xml'\n            elif outfile.endswith('.tag'):\n                outtype = 'tag'\n    if outfile:\n        outfp = file(outfile, 'w')\n    else:\n        outfp = sys.stdout\n    if outtype == 'txt':\n        device = TextConverter(rsrcmgr, outfp, codec=codec, laparams=laparams)\n    elif outtype == 'xml':\n        device = XMLConverter(rsrcmgr, outfp, codec=codec, laparams=laparams, outdir=outdir)\n    elif outtype == 'html':\n        device = HTMLConverter(rsrcmgr, outfp, codec=codec, scale=scale, laparams=laparams, outdir=outdir)\n    elif outtype == 'tag':\n        device = TagExtractor(rsrcmgr, outfp, codec=codec)\n    else:\n        return usage()\n\n    fp = file(path, 'rb')\n    process_pdf(rsrcmgr, device, fp, pagenos, maxpages=maxpages, password=password)\n    fp.close()\n    device.close()\n\n    outfp.close()\n    return\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 770,
                        "reputation": 5919,
                        "user_id": 1002,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ec044c7b29bc626c54e8afd573467983?s=256&d=identicon&r=PG",
                        "display_name": "msanders",
                        "link": "https://stackoverflow.com/users/1002/msanders"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1226509727,
                    "creation_date": 1226509727,
                    "answer_id": 284641,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Additionally there is <a href=\"http://snowtide.com/PDFTextStream\" rel=\"nofollow noreferrer\">PDFTextStream</a> which is a commercial Java library that can also be used from Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3441,
                        "reputation": 10147,
                        "user_id": 4966,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/929fba6f82f04811b09c16df239bbb21?s=256&d=identicon&r=PG",
                        "display_name": "Tony Meyer",
                        "link": "https://stackoverflow.com/users/4966/tony-meyer"
                    },
                    "is_accepted": false,
                    "score": 45,
                    "last_activity_date": 1220762829,
                    "creation_date": 1220762829,
                    "answer_id": 48154,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://pybrary.net/pyPdf/\" rel=\"noreferrer\">pyPDF</a> works fine (assuming that you're working with well-formed PDFs).  If all you want is the text (with spaces), you can just do:</p>\n\n<pre><code>import pyPdf\npdf = pyPdf.PdfFileReader(open(filename, \"rb\"))\nfor page in pdf.pages:\n    print page.extractText()\n</code></pre>\n\n<p>You can also easily get access to the metadata, image data, and so forth.</p>\n\n<p>A comment in the extractText code notes:</p>\n\n<blockquote>\n  <p>Locate all text drawing commands, in\n  the order they are provided in the\n  content stream, and extract the text. \n  This works well for some PDF files,\n  but poorly for others, depending on\n  the generator used.  This will be\n  refined in the future.  Do not rely on\n  the order of text coming out of this\n  function, as it will change if this\n  function is made more sophisticated.</p>\n</blockquote>\n\n<p>Whether or not this is a problem depends on what you're doing with the text (e.g. if the order doesn't matter, it's fine, or if the generator adds text to the stream in the order it will be displayed, it's fine).  I have pyPdf extraction code in daily use, without any problems.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2418,
                        "reputation": 7915,
                        "user_id": 3363,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/244756a563b0166ad851b37655ab9a77?s=256&d=identicon&r=PG",
                        "display_name": "Jamie",
                        "link": "https://stackoverflow.com/users/3363/jamie"
                    },
                    "is_accepted": false,
                    "score": 53,
                    "last_activity_date": 1219916813,
                    "creation_date": 1219916813,
                    "answer_id": 31923,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Pdftotext\" rel=\"noreferrer\">Pdftotext</a> An open source program (part of Xpdf) which you could call from python (not what you asked for but might be useful). I've used it with no problems. I think google use it in google desktop.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2022,
                        "reputation": 864,
                        "user_id": 2775,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/bad8e667832be107ae55637082678c64?s=256&d=identicon&r=PG",
                        "display_name": "sphereinabox",
                        "link": "https://stackoverflow.com/users/2775/sphereinabox"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1219716250,
                    "last_edit_date": 1495542885,
                    "creation_date": 1219716250,
                    "answer_id": 27252,
                    "question_id": 25665,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>PDFminer gave me perhaps one line [page 1 of 7...] on every page of a pdf file I tried with it.</p>\n\n<p>The best answer I have so far is pdftoipe, or the c++ code it's based on Xpdf.</p>\n\n<p>see <a href=\"https://stackoverflow.com/questions/25550/whats-the-best-way-to-importread-data-from-pdf-files\">my question</a> for what the output of pdftoipe looks like.</p>\n"
                }
            ]
        },
        {
            "3286089": [
                {
                    "owner": {
                        "account_id": 3598012,
                        "reputation": 1887,
                        "user_id": 3002116,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/xre6d.jpg?s=256",
                        "display_name": "trevorKirkby",
                        "link": "https://stackoverflow.com/users/3002116/trevorkirkby"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1385093004,
                    "creation_date": 1385093004,
                    "answer_id": 20136801,
                    "question_id": 3286089,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>to get a list of all the attributes, try:</p>\n\n<pre><code>dir(&lt;class instance&gt;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 142572,
                        "reputation": 37321,
                        "user_id": 350351,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=256&d=identicon&r=PG",
                        "display_name": "Daenyth",
                        "link": "https://stackoverflow.com/users/350351/daenyth"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1279593052,
                    "last_edit_date": 1279593052,
                    "creation_date": 1279585722,
                    "answer_id": 3286137,
                    "question_id": 3286089,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>OK, well... It seems like this needs a bit of work. Firstly, for your date* things, they should be perhaps stored as a dict of attributes. eg, <code>myobj.dates[1]</code>, so on.</p>\n\n<p>For the classes, it sounds like you want polymorphism. All of your MyClass* classes should have a common ancestor. The ancestor's <code>__new__</code> method should figure out which of its children to instantiate.</p>\n\n<p>One way for the parent to know what to make is to keep a dict of the children. There are ways that the parent class doesn't need to enumerate its children by searching for all of its subclasses but it's a bit more complex to implement. See <a href=\"http://code.activestate.com/recipes/576687-maintenance-free-factory-design-pattern/\" rel=\"nofollow noreferrer\">here</a> for more info on how you might take that approach. Read the comments especially, they expand on it.</p>\n\n<pre><code>class Parent(object):\n    _children = {\n      1: MyClass1,\n      2: MyClass2,\n    }\n\n    def __new__(k):\n        return object.__new__(Parent._children[k])\n\nclass MyClass1(Parent):\n    def __init__(self):\n        self.foo = 1\n\nclass MyClass2(Parent):\n    def __init__(self):\n        self.foo = 2\n\nbar = Parent(1)\nprint bar.foo # 1\nbaz = Parent(2)\nprint bar.foo # 2\n</code></pre>\n\n<p>Thirdly, you really should rethink your variable naming. Don't use numbers to enumerate your variables, instead give them meaningful names. <code>i</code> and <code>k</code> are bad to use as they are by convention reserved for loop indexes.</p>\n\n<p>A sample of your existing code would be very helpful in improving it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14139,
                        "reputation": 90728,
                        "user_id": 28835,
                        "user_type": "registered",
                        "accept_rate": 59,
                        "profile_image": "https://www.gravatar.com/avatar/34a7a029578b79cf4afa596ad4e3e72b?s=256&d=identicon&r=PG",
                        "display_name": "too much php",
                        "link": "https://stackoverflow.com/users/28835/too-much-php"
                    },
                    "is_accepted": true,
                    "score": 52,
                    "last_activity_date": 1279586296,
                    "creation_date": 1279586296,
                    "answer_id": 3286173,
                    "question_id": 3286089,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <code>getattr()</code> to access a property when you don't know its name until runtime:</p>\n\n<pre><code>obj = myobject()\ni = 7\ndate7 = getattr(obj, 'date%d' % i) # same as obj.date7\n</code></pre>\n\n<p>If you keep your numbered classes in a module called <code>foo</code>, you can use <code>getattr()</code> again to access them by number.</p>\n\n<pre><code>foo.py:\n  class Class1: pass\n  class Class2: pass\n  [ etc ]\n\n\nbar.py:\n  import foo\n  i = 3\n  someClass = getattr(foo, \"Class%d\" % i) # Same as someClass = foo.Class3\n  obj = someClass() # someClass is a pointer to foo.Class3\n  # short version:\n  obj = getattr(foo, \"Class%d\" % i)()\n</code></pre>\n\n<p>Having said all that, you <strong>really</strong> should avoid this sort of thing because you will never be able to find out where these numbered properties and classes are being used except by reading through your entire codebase. You are better off putting everything in a dictionary.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 64056,
                        "reputation": 1755,
                        "user_id": 189297,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/b98a34931025b9d4a04b33b38e7f8504?s=256&d=identicon&r=PG",
                        "display_name": "Aaron Altman",
                        "link": "https://stackoverflow.com/users/189297/aaron-altman"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1279586273,
                    "creation_date": 1279586273,
                    "answer_id": 3286172,
                    "question_id": 3286089,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I agree with Daenyth, but if you're feeling sassy you can use the <strong>dict</strong> method that comes with all classes:</p>\n\n<pre><code>&gt;&gt;&gt; class nullclass(object):\n        def nullmethod():\n            pass\n\n&gt;&gt;&gt; nullclass.__dict__.keys()\n['__dict__', '__module__', '__weakref__', 'nullmethod', '__doc__']\n\n&gt;&gt;&gt; nullclass.__dict__[\"nullmethod\"]\n&lt;function nullmethod at 0x013366A8&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 145280,
                        "reputation": 2424,
                        "user_id": 354987,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cd422ca7a602b283370d8a285db7f8a0?s=256&d=identicon&r=PG",
                        "display_name": "Aram Dulyan",
                        "link": "https://stackoverflow.com/users/354987/aram-dulyan"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1279586095,
                    "creation_date": 1279586095,
                    "answer_id": 3286164,
                    "question_id": 3286089,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For the first case, you should be able to do:</p>\n\n<pre><code>getattr(myobject, 'date%s' % i)\n</code></pre>\n\n<p>For the second case, you can do:</p>\n\n<pre><code>myobject = locals()['MyClass%s' % k]()\n</code></pre>\n\n<p>However, the fact that you need to do this in the first place can be a sign that you're approaching the problem in a very non-Pythonic way.</p>\n"
                }
            ]
        },
        {
            "14820429": [
                {
                    "owner": {
                        "account_id": 762153,
                        "reputation": 7249,
                        "user_id": 778517,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/ea36c82e1688276fa3a8f2dca097730d?s=256&d=identicon&r=PG",
                        "display_name": "S&#233;rgio",
                        "link": "https://stackoverflow.com/users/778517/s%c3%a9rgio"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1614007339,
                    "creation_date": 1614007339,
                    "answer_id": 66318494,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>py2</p>\n<pre><code>&quot;\\\\123omething special&quot;.decode('string-escape')\n</code></pre>\n<p>py3</p>\n<pre><code>&quot;\\\\123omething special&quot;.encode('utf-8').decode('unicode-escape')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 310851,
                        "reputation": 13596,
                        "user_id": 624066,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c61f50fa03287abed5b20c229cc7421d?s=256&d=identicon&r=PG",
                        "display_name": "MestreLion",
                        "link": "https://stackoverflow.com/users/624066/mestrelion"
                    },
                    "is_accepted": true,
                    "score": 28,
                    "last_activity_date": 1573612380,
                    "creation_date": 1573612380,
                    "answer_id": 58829514,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want <strong>str</strong>-to-<strong>str</strong> decoding of escape sequences, so both input and output are Unicode:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def string_escape(s, encoding='utf-8'):\n    return (s.encode('latin1')         # To bytes, required by 'unicode-escape'\n             .decode('unicode-escape') # Perform the actual octal-escaping decode\n             .encode('latin1')         # 1:1 mapping back to bytes\n             .decode(encoding))        # Decode original encoding\n</code></pre>\n\n<p>Testing:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; string_escape('\\\\123omething special')\n'Something special'\n\n&gt;&gt;&gt; string_escape(r's\\000u\\000p\\000p\\000o\\000r\\000t\\000@'\n                  r'\\000p\\000s\\000i\\000l\\000o\\000c\\000.\\000c\\000o\\000m\\000',\n                  'utf-16-le')\n'support@psiloc.com'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 317335,
                        "reputation": 28248,
                        "user_id": 633961,
                        "user_type": "registered",
                        "accept_rate": 66,
                        "profile_image": "https://i.sstatic.net/j9Krc.jpg?s=256",
                        "display_name": "guettli",
                        "link": "https://stackoverflow.com/users/633961/guettli"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1565790989,
                    "last_edit_date": 1565790989,
                    "creation_date": 1565711414,
                    "answer_id": 57481323,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>At least in my case this was equivalent:</p>\n\n<pre><code>Py2: my_input.decode('string_escape')\nPy3: bytes(my_input.decode('unicode_escape'), 'latin1')\n</code></pre>\n\n<p>convertutils.py:</p>\n\n<pre><code>def string_escape(my_bytes):\n    return bytes(my_bytes.decode('unicode_escape'), 'latin1')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1526108713,
                    "last_edit_date": 1526108713,
                    "creation_date": 1360615208,
                    "answer_id": 14820462,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You'll have to use <code>unicode_escape</code> instead:</p>\n\n<pre><code>&gt;&gt;&gt; b\"\\\\123omething special\".decode('unicode_escape')\n</code></pre>\n\n<p>If you <em>start</em> with a <code>str</code> object instead (equivalent to the python 2.7 unicode) you'll need to encode to bytes first, then decode with <code>unicode_escape</code>.</p>\n\n<p>If you need bytes as end result, you'll have to encode again to a suitable encoding (<code>.encode('latin1')</code> for example, if you need to preserve literal byte values; the first 256 Unicode code points map 1-on-1).</p>\n\n<p>Your example is actually UTF-16 data with escapes. Decode from <code>unicode_escape</code>, back to <code>latin1</code> to preserve the bytes, then from <code>utf-16-le</code> (UTF 16 little endian without BOM):</p>\n\n<pre><code>&gt;&gt;&gt; value = b's\\\\000u\\\\000p\\\\000p\\\\000o\\\\000r\\\\000t\\\\000@\\\\000p\\\\000s\\\\000i\\\\000l\\\\000o\\\\000c\\\\000.\\\\000c\\\\000o\\\\000m\\\\000'\n&gt;&gt;&gt; value.decode('unicode_escape').encode('latin1')  # convert to bytes\nb's\\x00u\\x00p\\x00p\\x00o\\x00r\\x00t\\x00@\\x00p\\x00s\\x00i\\x00l\\x00o\\x00c\\x00.\\x00c\\x00o\\x00m\\x00'\n&gt;&gt;&gt; _.decode('utf-16-le') # decode from UTF-16-LE\n'support@psiloc.com'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2174373,
                        "reputation": 12632,
                        "user_id": 1925449,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/97c543aca1ac7bbcfb5279d0300c8330?s=256&d=identicon&r=PG",
                        "display_name": "Nathaniel J. Smith",
                        "link": "https://stackoverflow.com/users/1925449/nathaniel-j-smith"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1397815027,
                    "creation_date": 1397815027,
                    "answer_id": 23151714,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The old \"string-escape\" codec maps bytestrings to bytestrings, and there's been a lot of debate about what to do with such codecs, so it isn't currently available through the standard encode/decode interfaces.</p>\n\n<p>BUT, the code is still there in the C-API (as <code>PyBytes_En/DecodeEscape</code>), and this is still exposed to Python via the undocumented <code>codecs.escape_encode</code> and <code>codecs.escape_decode</code>.</p>\n\n<pre><code>&gt;&gt;&gt; import codecs\n&gt;&gt;&gt; codecs.escape_decode(b\"ab\\\\xff\")\n(b'ab\\xff', 6)\n&gt;&gt;&gt; codecs.escape_encode(b\"ab\\xff\")\n(b'ab\\\\xff', 3)\n</code></pre>\n\n<p>These functions return the transformed <code>bytes</code> object, plus a number indicating how many bytes were processed... you can just ignore the latter.</p>\n\n<pre><code>&gt;&gt;&gt; value = b's\\\\000u\\\\000p\\\\000p\\\\000o\\\\000r\\\\000t\\\\000@\\\\000p\\\\000s\\\\000i\\\\000l\\\\000o\\\\000c\\\\000.\\\\000c\\\\000o\\\\000m\\\\000'\n&gt;&gt;&gt; codecs.escape_decode(value)[0]\nb's\\x00u\\x00p\\x00p\\x00o\\x00r\\x00t\\x00@\\x00p\\x00s\\x00i\\x00l\\x00o\\x00c\\x00.\\x00c\\x00o\\x00m\\x00'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 718174,
                        "reputation": 1429,
                        "user_id": 647151,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/7e5c476f7ed6fcbb67eee738e304f066?s=256&d=identicon&r=PG",
                        "display_name": "malthe",
                        "link": "https://stackoverflow.com/users/647151/malthe"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1363795148,
                    "creation_date": 1363795148,
                    "answer_id": 15528611,
                    "question_id": 14820429,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can't use <code>unicode_escape</code> on byte strings (or rather, you can, but it doesn't always return the same thing as <code>string_escape</code> does on Python 2) \u2013 beware!</p>\n\n<p>This function implements <code>string_escape</code> using a regular expression and custom replacement logic.</p>\n\n<pre><code>def unescape(text):\n    regex = re.compile(b'\\\\\\\\(\\\\\\\\|[0-7]{1,3}|x.[0-9a-f]?|[\\'\"abfnrt]|.|$)')\n    def replace(m):\n        b = m.group(1)\n        if len(b) == 0:\n            raise ValueError(\"Invalid character escape: '\\\\'.\")\n        i = b[0]\n        if i == 120:\n            v = int(b[1:], 16)\n        elif 48 &lt;= i &lt;= 55:\n            v = int(b, 8)\n        elif i == 34: return b'\"'\n        elif i == 39: return b\"'\"\n        elif i == 92: return b'\\\\'\n        elif i == 97: return b'\\a'\n        elif i == 98: return b'\\b'\n        elif i == 102: return b'\\f'\n        elif i == 110: return b'\\n'\n        elif i == 114: return b'\\r'\n        elif i == 116: return b'\\t'\n        else:\n            s = b.decode('ascii')\n            raise UnicodeDecodeError(\n                'stringescape', text, m.start(), m.end(), \"Invalid escape: %r\" % s\n            )\n        return bytes((v, ))\n    result = regex.sub(replace, text)\n</code></pre>\n"
                }
            ]
        },
        {
            "16655438": [
                {
                    "owner": {
                        "account_id": 160284,
                        "reputation": 87197,
                        "user_id": 380231,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=256&d=identicon&r=PG",
                        "display_name": "tacaswell",
                        "link": "https://stackoverflow.com/users/380231/tacaswell"
                    },
                    "is_accepted": true,
                    "score": 31,
                    "last_activity_date": 1369073594,
                    "last_edit_date": 1495541421,
                    "creation_date": 1369073148,
                    "answer_id": 16655547,
                    "question_id": 16655438,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You want the <a href=\"http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.imshow\" rel=\"noreferrer\"><code>extent</code></a> kwarg</p>\n\n<pre><code>ax.imshow(data, extent=[0, 1, 0, 1])\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/questions/13384653/imshow-extent-and-aspect/13390798#13390798\">Imshow: extent and aspect</a> for a more detailed example.</p>\n"
                }
            ]
        },
        {
            "14222416": [
                {
                    "owner": {
                        "account_id": 199019,
                        "reputation": 76981,
                        "user_id": 444036,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/My2AZ.jpg?s=256",
                        "display_name": "Paulo Scardine",
                        "link": "https://stackoverflow.com/users/444036/paulo-scardine"
                    },
                    "is_accepted": true,
                    "score": 54,
                    "last_activity_date": 1561219858,
                    "last_edit_date": 1561219858,
                    "creation_date": 1357674338,
                    "answer_id": 14222843,
                    "question_id": 14222416,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python lacks the tail recursion optimizations common in functional languages like lisp. In Python, recursion is limited to 999 calls (see <a href=\"http://docs.python.org/2/library/sys.html#sys.getrecursionlimit\" rel=\"noreferrer\">sys.getrecursionlimit</a>).</p>\n\n<p>If 999 depth is more than you are expecting, check if the implementation lacks a condition that stops recursion, or if this test may be wrong for some cases.</p>\n\n<p>I dare to say that in Python, pure recursive algorithm implementations are not correct/safe. A fib() implementation limited to 999 is not really correct. It is always possible to convert recursive into iterative, and doing so is trivial. </p>\n\n<p>It is not reached often because in many recursive algorithms the depth tend to be logarithmic. If it is not the case with your algorithm and you expect recursion deeper than 999 calls you have two options:</p>\n\n<p>1) You can change the recursion limit with <code>sys.setrecursionlimit(n)</code> until the maximum allowed for your platform:</p>\n\n<blockquote>\n  <p><code>sys.setrecursionlimit(limit)</code>: </p>\n  \n  <p>Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.</p>\n  \n  <p>The highest possible limit is platform-dependent. A user may need to set the limit higher when she has a program that requires deep recursion and a platform that supports a higher limit. This should be done with care, because a too-high limit can lead to a crash.</p>\n</blockquote>\n\n<p>2) You can try to convert the algorithm from recursive to iterative. If recursion depth is bigger than allowed by your platform, it is the only way to fix the problem. There are <a href=\"http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\" rel=\"noreferrer\">step by step instructions on the Internet</a> and it should be a straightforward operation for someone with some CS education. If you are having trouble with that, post a new question so we can help.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1797835,
                        "reputation": 899,
                        "user_id": 1636860,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/289685ebc9e871e7cba821de13390357?s=256&d=identicon&r=PG",
                        "display_name": "Emil Sm\u0119t",
                        "link": "https://stackoverflow.com/users/1636860/emil-sm%c4%99t"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1357675847,
                    "creation_date": 1357675847,
                    "answer_id": 14223203,
                    "question_id": 14222416,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've changed the recursion to iteration. </p>\n\n<pre><code>def MovingTheBall(listOfBalls,position,numCell):\nwhile 1:\n    stop=1\n    positionTmp = (position[0]+choice([-1,0,1]),position[1]+choice([-1,0,1]),0)\n    for i in range(0,len(listOfBalls)):\n        if positionTmp==listOfBalls[i].pos:\n            stop=0\n    if stop==1:\n        if (positionTmp[0]==0 or positionTmp[0]&gt;=numCell or positionTmp[0]&lt;=-numCell or positionTmp[1]&gt;=numCell or positionTmp[1]&lt;=-numCell):\n            stop=0\n        else:\n            return positionTmp\n</code></pre>\n\n<p>Works good :D</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2174676,
                        "reputation": 39,
                        "user_id": 1925651,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b4132e28acb9bc10eb0f780b2bad9371?s=256&d=identicon&r=PG",
                        "display_name": "mojzu",
                        "link": "https://stackoverflow.com/users/1925651/mojzu"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1357675410,
                    "creation_date": 1357675410,
                    "answer_id": 14223099,
                    "question_id": 14222416,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's the error you get when a function makes too many recursive calls to itself. It might be doing this because the base case is never met (and therefore it gets stuck in an infinite loop) or just by making an large number of calls to itself. You could replace the recursive calls with while loops.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 53092,
                        "reputation": 3287,
                        "user_id": 158702,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/746b4c8b2d196250d0713011a3687384?s=256&d=identicon&r=PG",
                        "display_name": "pvoosten",
                        "link": "https://stackoverflow.com/users/158702/pvoosten"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1357674000,
                    "creation_date": 1357674000,
                    "answer_id": 14222757,
                    "question_id": 14222416,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The error is a stack overflow. That should ring a bell on this site, right? It occurs because a call to <code>poruszanie</code> results in another call to <code>poruszanie</code>, incrementing the recursion depth by 1. The second call results in another call to the same function. That happens over and over again, each time incrementing the recursion depth.</p>\n\n<p>Now, the usable resources of a program are limited. Each function call takes a certain amount of space on top of what is called the stack.  If the maximum stack height is reached, you get a stack overflow error.</p>\n"
                }
            ]
        },
        {
            "36021332": [
                {
                    "owner": {
                        "account_id": 5914193,
                        "reputation": 14614,
                        "user_id": 4653485,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/222d7d75a35af5276a54a657eda94f06?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "J&#233;r&#244;me",
                        "link": "https://stackoverflow.com/users/4653485/j%c3%a9r%c3%b4me"
                    },
                    "is_accepted": true,
                    "score": 54,
                    "last_activity_date": 1575650013,
                    "last_edit_date": 1575650013,
                    "creation_date": 1458073261,
                    "answer_id": 36021359,
                    "question_id": 36021332,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>See <a href=\"https://docs.python.org/library/json.html\" rel=\"noreferrer\">the docs</a>:</p>\n\n<pre><code>import json\n\nprint(json.dumps(\n    {'4': 5, '6': 7},\n    sort_keys=True,\n    indent=4,\n    separators=(',', ': ')\n))\n</code></pre>\n"
                }
            ]
        },
        {
            "672857": [
                {
                    "owner": {
                        "account_id": 46149,
                        "reputation": 4359,
                        "user_id": 136264,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/049bc637de96495a5f48844ff59798db?s=256&d=identicon&r=PG",
                        "display_name": "wierob",
                        "link": "https://stackoverflow.com/users/136264/wierob"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1675218484,
                    "last_edit_date": 1675218484,
                    "creation_date": 1248441191,
                    "answer_id": 1177553,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As mentioned in the other answers this depends on the run-time system as well as the task at hand. So the standard (C)Python is not necessarily slower than Java or C#. Some of its modules are implemented in C. Thus combining speed of a <em>native</em> implementation with Python's language.</p>\n<p>We did a small experiment: We compared the execution time of a Factorial computation in different languages. The test was actually intended to evaluate the performance of arbitrary-precision integers implementations.</p>\n<pre>\ntestee. language arbitrary-precision integers run-time\n\n     1. Java     java.math.BigInteger         JRE 6.13\n     2. .NET     System.Numerics.BigInteger   MS CLR 4.0\n     3. Python   long                         Active Python 2.6.2.2\n     4. Squeak   BigInt                       Squeak 3.10.2\n     5. .NET     Mono.Math.BigInteger         MS CLR 4.0\n\nresults:\n\n                 1)         2)       3)       4)        5)\n   10.000!      343 ms    137 ms    91 ms  1.200 ms    169 ms\n   20.000!    1.480 ms    569 ms   372 ms  1.457 ms    701 ms\n   30.000!    3.424 ms  1.243 ms   836 ms  3.360 ms  1.675 ms\n   40.000!    6.340 ms  2.101 ms 1.975 ms  6.738 ms  3.042 ms\n   50.000!   10.493 ms  3.763 ms 3.658 ms 10.019 ms  5.242 ms\n   60.000!   15.586 ms  7.683 ms 5.788 ms 14.241 ms 10.000 ms\n</pre>\n<p><a href=\"https://i.sstatic.net/tiM4L.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/tiM4L.gif\" alt=\"alt text\" /></a><br />\n<sub>(source: <a href=\"http://www.mycsharp.de/wbb2/attachment.php?attachmentid=6909&amp;sid=0d5aa62b522d005d9e7089785b5d19f1\" rel=\"nofollow noreferrer\">mycsharp.de</a>)</sub></p>\n<p>The bar chart shows the results. Python is the clear winner. As far as I know Python uses the <a href=\"https://en.wikipedia.org/wiki/Karatsuba_algorithm\" rel=\"nofollow noreferrer\">Karatsuba-algorithm</a> to multiply large integers, which explains the speed.</p>\n<p>Besides, Python's &quot;arbitrary-precision integers&quot;-type is the built-in <code>long</code>. Hence you don't even need special type handling which is required for Java's BigInteger-class.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": true,
                    "score": 125,
                    "last_activity_date": 1504002089,
                    "last_edit_date": 1592644375,
                    "creation_date": 1237807508,
                    "answer_id": 673019,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Don't conflate Language and Run-Time.</p>\n<p>Python (the language) has many run-time implementations.</p>\n<ul>\n<li><p>CPython is usually interpreted, and will be slower than native-code C#.  It might be slower than Java, depending on the Java JIT compiler.</p>\n</li>\n<li><p>JYthon is interpreted in the JVM and has the same performance profile as Java.</p>\n</li>\n<li><p>IronPython relies on the same .NET libraries and IL as C#, so the performance difference will be relatively small.</p>\n</li>\n<li><p>Python can be translated to native code via PyREX, PyToC, and others.  In this case, it will generally perform as well as C++.  You can -- to an extent -- further optimize C++ and perhaps squeeze out a little bit better performance than unoptimized output from PyREX.</p>\n<p>For more information, see <a href=\"http://arcriley.blogspot.com/2009/03/so-long-pyrex.html\" rel=\"noreferrer\">http://arcriley.blogspot.com/2009/03/so-long-pyrex.html</a></p>\n</li>\n</ul>\n<p>Note that Python (the language) is not slow.  Some Python run-times (CPython, for example) will be slower than native-code C++.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14956,
                        "reputation": 31305,
                        "user_id": 31141,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/77247436faa03c2088a819938b27cb3b?s=256&d=identicon&r=PG",
                        "display_name": "Marko",
                        "link": "https://stackoverflow.com/users/31141/marko"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1443651027,
                    "last_edit_date": 1443651027,
                    "creation_date": 1237815040,
                    "answer_id": 673369,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It doesn't have anything to do with the languages themselves, it's just the fact that java <strong>implementation</strong> and <strong>runtime system</strong> (JVM) are very high quality, and that lots of resources have been invested in stability, scalability and performance improvements over the years.</p>\n\n<p>Contrast that to the fact that CPython implementation just recently implemented eg threaded dispatch in its interpreter which gave it performance boost of up to 20% for certain problems. It's not a good thing as it sounds, it is bad because that kind of basic optimization should be there from the day one.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1343324,
                        "reputation": 1412,
                        "user_id": 1284552,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/1sgmN.jpg?s=256",
                        "display_name": "Ravi Kumar",
                        "link": "https://stackoverflow.com/users/1284552/ravi-kumar"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1374505727,
                    "creation_date": 1374505727,
                    "answer_id": 17791079,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Simply - <strong>Python is slow</strong>. </p>\n\n<p>No matter what interpreter (currently available) you use, it is slower than Java and C. In various benchmarks, its slower than Ruby and PHP.\nDo not depend on other's answers, check and verify yourself.</p>\n\n<p><a href=\"http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=python3&amp;lang2=java&amp;data=u64q\">http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=python3&amp;lang2=java&amp;data=u64q</a> </p>\n\n<p>Personally I do not think, there is much serious contribution and development done on getting python faster. Since the productivity is good in python and it solves some of problem straight forward, speed/performance is not taken seriously. There are some architecture issues too preventing Python getting performance tweaks.</p>\n\n<p><strong>Disclaimer</strong> - This answer probably will hurt Python lovers. I too am Python developer, loves developing webapps in Django/Flask/Pyramid rather than Spring (Java). But I see practically in my work and experience, how Python is slower. The speed is not always my priority. But I do stand with them, who says Python Interpreter should get oiling and greasing or total engine change to at least stand in marathon. It's a mainstream programming language.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19562,
                        "reputation": 30982,
                        "user_id": 45935,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/76eb040bed8dc544b5b71aeb2d1a81ad?s=256&d=identicon&r=PG",
                        "display_name": "Jim Ferrans",
                        "link": "https://stackoverflow.com/users/45935/jim-ferrans"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1248267481,
                    "creation_date": 1248267481,
                    "answer_id": 1165085,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>This type of question can't be answered just by qualitative reasoning, you need good benchmarks to back it up.  Here's one set that compare <a href=\"http://shootout.alioth.debian.org/u32q/benchmark.php?test=all&amp;lang=python3&amp;lang2=csharp&amp;box=1\" rel=\"nofollow noreferrer\">Python 3 vs C# Mono</a> and find Python to be 3 to 300 times slower.  The Python vs. Java results are similar.  (The usual cautions about interpreting benchmarks apply.)</p>\n\n<p>These benchmarks also report the source code size, and Python was significantly more concise than Java and C#.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1240781820,
                    "last_edit_date": 1240781820,
                    "creation_date": 1237816380,
                    "answer_id": 673441,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think it's ultimately that Python doesn't go as far as it can with optimizations.  Most of the optimization techniques that are common are for static languages.  There <em>are</em> optimization techniques for dynamic languages, but the modern ones don't seem to make as much use of them as they could.  Steve Yegge has an excellent <a href=\"http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html\" rel=\"nofollow noreferrer\">blog post on the subject</a>.</p>\n\n<p><strong>EDIT</strong>:  I just wanted to point out that I'm not necessarily stating this to be critical of Python.  I prefer simplicity over unnecessary speed any day. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 876508,
                        "reputation": 1299,
                        "user_id": 95520,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ghTut.jpg?s=256",
                        "display_name": "Saleh Al-Zaid",
                        "link": "https://stackoverflow.com/users/95520/saleh-al-zaid"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1240764902,
                    "creation_date": 1240764902,
                    "answer_id": 791183,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Since it's interpreted and not compiled.. it should be slower in execution time. </p>\n\n<p>As a table mentioned in <em>Code Complete (second edition)</em> book, page 600, </p>\n\n<p>C# equals C++ in <em>execution time</em> (1:1). And Python is slower above hundred times than C++ in <em>execution time</em> (>100:1).</p>\n\n<p>And Java is slower than C++ by one time and a half (1.5:1). </p>\n\n<p>These statistics are on average. I don't know who made this study, but seems interesting.   </p>\n"
                },
                {
                    "owner": {
                        "account_id": 21100,
                        "reputation": 38139,
                        "user_id": 51025,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=256&d=identicon&r=PG",
                        "display_name": "DNS",
                        "link": "https://stackoverflow.com/users/51025/dns"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1237813446,
                    "creation_date": 1237813446,
                    "answer_id": 673289,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would argue that the ease and simplicity of writing Python code makes it possible to write more complex code; for example, code that takes advantage of multi-core processors.  Since per-core performance has been mostly stagnant for the past 5-10 years, I don't think it's clear that Python programs (whether they're running on CPython or something else) are slower in the long run.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7354,
                        "reputation": 672,
                        "user_id": 12754,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1a71c2c77df8ca4fb57b44c09f06a659?s=256&d=identicon&r=PG",
                        "display_name": "Dhananjay Nene",
                        "link": "https://stackoverflow.com/users/12754/dhananjay-nene"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1237810785,
                    "creation_date": 1237810785,
                    "answer_id": 673173,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It boils down to the fact that the compilation phase has lesser information to work with and hence the runtime needs to do more work in case of duck typed (dynamically typed) languages. </p>\n\n<p>Thus if I am making the method invocation foo.bar(), in case of Java or C++ the invocation to bar can be optimized in the compilation process by discovering the type of \"foo\" and then directly invoking the method at the memory location where the compiler knows it will be found. Since a python or any other dynamically typed language compiler does not know what type the object foo belongs to, it has to do a type check at runtime and then look up the address of the bar method and then invoke it. </p>\n\n<p>There are other difficulties a python compiler writer struggles with as well, though the one above hopefully adequately gives an indication. So even with the best compiler writers, statically typed languages are likely to perform much better at runtime.</p>\n\n<p>Where dynamically typed languages score are typically in the development time. Due to fewer lines of code to write and maintain, and no compile wait times for developers, the development often goes through much faster.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 23998,
                        "reputation": 134283,
                        "user_id": 60711,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=256&d=identicon&r=PG",
                        "display_name": "vartec",
                        "link": "https://stackoverflow.com/users/60711/vartec"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1237808846,
                    "creation_date": 1237808846,
                    "answer_id": 673090,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>What you got there is clear example of writing Java in Python:</p>\n\n<pre><code> def __init__(self,size):  \n     self.first = None  \n     last = None  \n     for i in range(size):  \n         current = Person(i)  \n         if self.first == None : self.first = current  \n         if last != None :  \n             last.next = current  \n             current.prev = last  \n         last = current  \n     self.first.prev = last  \n     last.next = self.first  \n</code></pre>\n\n<p>A bit more pythonic:</p>\n\n<pre><code> def __init__(self,size):  \n     chain = [Person(i) for i in range(size)]\n     self.first = chain[0]\n     chain = zip(chain, chain[1:].append(chain[0]))\n     for p,n in chain:\n        p.next = n\n        n.prev = p\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3282,
                        "reputation": 147047,
                        "user_id": 4725,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/B53xA.jpg?s=256",
                        "display_name": "Tom Hawtin - tackline",
                        "link": "https://stackoverflow.com/users/4725/tom-hawtin-tackline"
                    },
                    "is_accepted": false,
                    "score": 62,
                    "last_activity_date": 1237807848,
                    "creation_date": 1237807848,
                    "answer_id": 673043,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It is not really correct to ask why Python is slower than Java/C#. How fast is Java? Well, naive interpreters are around ten times slower than optimised compilers. I believe there is a Java bytcode interpreter written in JavaScript - that probably isn't very fast. So, the intended question appears to be \"Why is the CPython language system slower than the equivalent Sun, IBM and Oracle JRE and Microsoft .NET runtime?\"</p>\n\n<p>I believe the correct answer is non-technical. The fastest Java and .NET runtime are faster because they have large full time technical teams developing them in performance-competitive environment.</p>\n\n<p>Dynamic language systems are easy to implement. Any idiot can do it. I have. Static language systems are more complex to design and implement. A simple static system will tend to run much faster than the equivalent just-working dynamic equivalent. However, it is possible for highly optimised dynamic systems to run almost as fast. I understand some Smalltalk implementation were quite good. An often quoted example of a developed dynamic system is the <a href=\"http://en.wikipedia.org/wiki/Lisp_machine\" rel=\"noreferrer\">MIT Lisp Machine</a>.</p>\n\n<p>In addition if the real grunt is being done by library code, then the language system may not matter. Alternatively, the language may encourage (or give time(!)) to develop more efficient algorithms which can easily wipe out constant factor performance differences.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11659,
                        "reputation": 54273,
                        "user_id": 22595,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/kxy3v.jpg?s=256",
                        "display_name": "Micha\u0142 Niklas",
                        "link": "https://stackoverflow.com/users/22595/micha%c5%82-niklas"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1237804421,
                    "creation_date": 1237804421,
                    "answer_id": 672879,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think opposite. I can do simple program in Python faster than in Java,\nand those Python scripts work really fast.</p>\n\n<p>Of course your question without examples is hard to answer. Maybe you have found slow library, bug etc. Give us more details please.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11683,
                        "reputation": 1493646,
                        "user_id": 22656,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=256&d=identicon&r=PG",
                        "display_name": "Jon Skeet",
                        "link": "https://stackoverflow.com/users/22656/jon-skeet"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1237804251,
                    "creation_date": 1237804251,
                    "answer_id": 672871,
                    "question_id": 672857,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>As suggested in comments, you should really provide a test case to reason about. Reasons behind performance differences will change depending on the test being executed.</p>\n\n<p>However, I'd suggest that the static vs dynamic nature may well have a lot to do with it. For non-virtual calls, the JIT-compiled C#/Java is extremely cheap as it can be determined accurately at JIT-time. Even virtual calls just involve a single level of redirection. When binding becomes dynamic, there's a wider range of things to consider.</p>\n\n<p>I don't know enough details about Python to claim to understand its exact runtime behaviour, which I suspect may vary with version and implementation too. There is such a thing as \"python byte code\" which is then executed by a virtual machine - whether this virtual machine actually performs JIT-compilation or not is another matter.</p>\n"
                }
            ]
        },
        {
            "5137497": [
                {
                    "owner": {
                        "account_id": 451584,
                        "reputation": 10214,
                        "user_id": 847552,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc674fd2cf824532531bd2b193bdc920?s=256&d=identicon&r=PG",
                        "display_name": "skovorodkin",
                        "link": "https://stackoverflow.com/users/847552/skovorodkin"
                    },
                    "is_accepted": false,
                    "score": 329,
                    "last_activity_date": 1630960365,
                    "last_edit_date": 1630960365,
                    "creation_date": 1504638875,
                    "answer_id": 46061872,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://docs.python.org/3/library/pathlib.html\" rel=\"noreferrer\"><code>pathlib</code></a> module, <a href=\"https://docs.python.org/3/whatsnew/3.4.html#pathlib\" rel=\"noreferrer\">introduced in Python 3.4</a> (<em><a href=\"https://www.python.org/dev/peps/pep-0428/\" rel=\"noreferrer\">PEP 428 \u2014 The pathlib module \u2014 object-oriented filesystem paths</a></em>), makes the path-related experience much much better.</p>\n<pre class=\"lang-none prettyprint-override\"><code>pwd\n\n/home/skovorodkin/stack\n\ntree\n\n.\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 1.py\n    \u2514\u2500\u2500 2.py\n</code></pre>\n<p>In order to get the current working directory, use <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.cwd\" rel=\"noreferrer\"><code>Path.cwd()</code></a>:</p>\n<pre><code>from pathlib import Path\n\nprint(Path.cwd())  # /home/skovorodkin/stack\n</code></pre>\n<p>To get an absolute path to your script file, use the <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve\" rel=\"noreferrer\"><code>Path.resolve()</code></a> method:</p>\n<pre><code>print(Path(__file__).resolve())  # /home/skovorodkin/stack/scripts/1.py\n</code></pre>\n<p>And to get the path of a directory where your script is located, access <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parent\" rel=\"noreferrer\"><code>.parent</code></a> (it is recommended to call <code>.resolve()</code> before <code>.parent</code>):</p>\n<pre><code>print(Path(__file__).resolve().parent)  # /home/skovorodkin/stack/scripts\n</code></pre>\n<p>Remember that <code>__file__</code> is not reliable in some situations: <em><a href=\"https://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python\">How do I get the path of the current executed file in Python?</a></em>.</p>\n<hr />\n<p>Please note, that <code>Path.cwd()</code>, <code>Path.resolve()</code> and other <code>Path</code> methods return path objects (<a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PosixPath\" rel=\"noreferrer\"><code>PosixPath</code></a> in my case), not strings. In Python 3.4 and 3.5 that caused some pain, because <a href=\"https://docs.python.org/3.5/library/functions.html#open\" rel=\"noreferrer\"><code>open</code></a> built-in function could only work with string or bytes objects, and did not support <code>Path</code> objects, so you had to convert <code>Path</code> objects to strings or use the <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.open\" rel=\"noreferrer\"><code>Path.open()</code></a> method, but the latter option required you to change old code:</p>\n<h2>File <em>scripts/2.py</em></h2>\n<pre><code>from pathlib import Path\n\np = Path(__file__).resolve()\n\nwith p.open() as f: pass\nwith open(str(p)) as f: pass\nwith open(p) as f: pass\n\nprint('OK')\n</code></pre>\n<h3>Output</h3>\n<pre class=\"lang-none prettyprint-override\"><code>python3.5 scripts/2.py\n\nTraceback (most recent call last):\n  File &quot;scripts/2.py&quot;, line 11, in &lt;module&gt;\n    with open(p) as f:\nTypeError: invalid file: PosixPath('/home/skovorodkin/stack/scripts/2.py')\n</code></pre>\n<p>As you can see, <code>open(p)</code> does not work with Python 3.5.</p>\n<p><em><a href=\"https://www.python.org/dev/peps/pep-0519/\" rel=\"noreferrer\">PEP 519 \u2014 Adding a file system path protocol</a></em>, implemented in Python 3.6, adds support of <a href=\"https://docs.python.org/3/library/os.html#os.PathLike\" rel=\"noreferrer\"><code>PathLike</code></a> objects to the <a href=\"https://docs.python.org/3/library/functions.html#open\" rel=\"noreferrer\"><code>open</code></a> function, so now you can pass <code>Path</code> objects to the <code>open</code> function directly:</p>\n<pre class=\"lang-none prettyprint-override\"><code>python3.6 scripts/2.py\n\nOK\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10324724,
                        "reputation": 1366,
                        "user_id": 7616532,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/478fe2e610e2e1dd9c9cec94d9ed3f60?s=256&d=identicon&r=PG",
                        "display_name": "Kotauskas",
                        "link": "https://stackoverflow.com/users/7616532/kotauskas"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1630959530,
                    "last_edit_date": 1630959530,
                    "creation_date": 1497534337,
                    "answer_id": 44569198,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For question 1, use <code>os.getcwd() # Get working directory</code> and <code>os.chdir(r'D:\\Steam\\steamapps\\common') # Set working directory</code></p>\n<hr />\n<p>I recommend using <code>sys.argv[0]</code> for question 2 because <code>sys.argv</code> is immutable and therefore always returns the current file (module object path) and not affected by <code>os.chdir()</code>. Also you can do like this:</p>\n<pre><code>import os\nthis_py_file = os.path.realpath(__file__)\n\n# vvv Below comes your code vvv #\n</code></pre>\n<p>But that snippet and <code>sys.argv[0]</code> will not work or will work weird when compiled by PyInstaller, because magic properties are not set in <code>__main__</code> level and <code>sys.argv[0]</code> is the way your executable was called (it means that it becomes affected by the working directory).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3789824,
                        "reputation": 869,
                        "user_id": 3146720,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ee78eb5155cb04222f0a85faa4563390?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mathieu C.",
                        "link": "https://stackoverflow.com/users/3146720/mathieu-c"
                    },
                    "is_accepted": false,
                    "score": 64,
                    "last_activity_date": 1630959352,
                    "last_edit_date": 1630959352,
                    "creation_date": 1475154474,
                    "answer_id": 39771209,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://docs.python.org/3.8/library/pathlib.html\" rel=\"noreferrer\">Pathlib</a> can be used this way to get the directory containing the current script:</p>\n<pre><code>import pathlib\nfilepath = pathlib.Path(__file__).resolve().parent\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 116214,
                        "reputation": 1627,
                        "user_id": 304843,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/241b11f59c4bcfc2ce84a43f52b30001?s=256&d=identicon&r=PG",
                        "display_name": "StormShadow",
                        "link": "https://stackoverflow.com/users/304843/stormshadow"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1630959089,
                    "last_edit_date": 1630959089,
                    "creation_date": 1381314699,
                    "answer_id": 19269546,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think the most succinct way to find just the name of your current execution context would be:</p>\n<pre><code>current_folder_path, current_folder_name = os.path.split(os.getcwd())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1430514,
                        "reputation": 873,
                        "user_id": 1353027,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/770a26b081e679266ab1bef20255ef5b?s=256&d=identicon&r=PG",
                        "display_name": "vinithravit",
                        "link": "https://stackoverflow.com/users/1353027/vinithravit"
                    },
                    "is_accepted": false,
                    "score": 84,
                    "last_activity_date": 1630958958,
                    "last_edit_date": 1630958958,
                    "creation_date": 1335250816,
                    "answer_id": 10293159,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<ol>\n<li><p>To get the current directory full path</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;import os\n&gt;&gt;print os.getcwd()\n</code></pre>\n<p>Output: &quot;C :\\Users\\admin\\myfolder&quot;</p>\n</li>\n<li><p>To get the current directory folder name alone</p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;import os\n&gt;&gt;str1=os.getcwd()\n&gt;&gt;str2=str1.split('\\\\')\n&gt;&gt;n=len(str2)\n&gt;&gt;print str2[n-1]\n</code></pre>\n<p>Output: &quot;myfolder&quot;</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 93951,
                        "reputation": 58422,
                        "user_id": 256793,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/f3066138ea3d8e6b0c7a3764b5021e78?s=256&d=identicon&r=PG",
                        "display_name": "Nix",
                        "link": "https://stackoverflow.com/users/256793/nix"
                    },
                    "is_accepted": false,
                    "score": 391,
                    "last_activity_date": 1630958704,
                    "last_edit_date": 1630958704,
                    "creation_date": 1298858037,
                    "answer_id": 5137507,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html\" rel=\"noreferrer\">Current working directory</a>:  <a href=\"https://docs.python.org/2/library/os.html#os.getcwd\" rel=\"noreferrer\"><code>os.getcwd()</code></a></p>\n<p>And the <a href=\"http://docs.python.org/reference/datamodel.html\" rel=\"noreferrer\"><code>__file__</code> attribute</a> can help you find out where the file you are executing is located. This Stack\u00a0Overflow post explains everything:  <em><a href=\"https://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python\">How do I get the path of the current executed file in Python?</a></em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4611021,
                        "reputation": 867,
                        "user_id": 3739151,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cb0aee5e125b29721d9661a92ad105b6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ilia S.",
                        "link": "https://stackoverflow.com/users/3739151/ilia-s"
                    },
                    "is_accepted": false,
                    "score": 42,
                    "last_activity_date": 1590783158,
                    "last_edit_date": 1590783158,
                    "creation_date": 1442909575,
                    "answer_id": 32711758,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To get the current directory full path:<br/></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>os.path.realpath('.')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2431412,
                        "reputation": 3053,
                        "user_id": 2122215,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/xLDsu.jpg?s=256",
                        "display_name": "Jazzer",
                        "link": "https://stackoverflow.com/users/2122215/jazzer"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1487862741,
                    "last_edit_date": 1487862741,
                    "creation_date": 1424464363,
                    "answer_id": 28637689,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you're using Python 3.4, there is the brand new higher-level <code>pathlib</code> module which allows you to conveniently call <code>pathlib.Path.cwd()</code> to get a <code>Path</code> object representing your current working directory, along with many other new features.</p>\n\n<p>More info on this new API can be found <a href=\"https://docs.python.org/3.4/library/pathlib.html\" rel=\"noreferrer\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1267942,
                        "reputation": 12035,
                        "user_id": 1224827,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/hSBmJ.jpg?s=256",
                        "display_name": "Blairg23",
                        "link": "https://stackoverflow.com/users/1224827/blairg23"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1481760490,
                    "last_edit_date": 1481760490,
                    "creation_date": 1446715861,
                    "answer_id": 33540872,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Answer to #1:</strong></p>\n\n<p>If you want the current directory, do this:</p>\n\n<pre><code>import os\nos.getcwd()\n</code></pre>\n\n<p>If you want just any folder name and you have the path to that folder, do this:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>def get_folder_name(folder):\n    '''\n    Returns the folder name, given a full folder path\n    '''\n    return folder.split(os.sep)[-1]\n</code></pre>\n\n<p><strong>Answer to #2:</strong></p>\n\n<pre><code>import os\nprint os.path.abspath(__file__)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 125976,
                        "reputation": 73072,
                        "user_id": 322129,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/6f1b006173728a91d96289dd324f6271?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Russell Dias",
                        "link": "https://stackoverflow.com/users/322129/russell-dias"
                    },
                    "is_accepted": true,
                    "score": 4764,
                    "last_activity_date": 1469968442,
                    "last_edit_date": 1469968442,
                    "creation_date": 1298858058,
                    "answer_id": 5137509,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>\n\n<pre><code>import os \ndir_path = os.path.dirname(os.path.realpath(__file__))\n</code></pre>\n\n<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>\n\n<hr>\n\n<p>To get the current working directory use </p>\n\n<pre><code>import os\ncwd = os.getcwd()\n</code></pre>\n\n<hr>\n\n<p>Documentation references for the modules, constants and functions used above:</p>\n\n<ul>\n<li>The <a href=\"https://docs.python.org/library/os.html\"><code>os</code></a> and <a href=\"https://docs.python.org/library/os.path.html#module-os.path\"><code>os.path</code></a> modules.</li>\n<li>The <a href=\"https://docs.python.org/reference/datamodel.html\"><code>__file__</code></a> constant</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.realpath\"><code>os.path.realpath(path)</code></a> (returns <em>\"the canonical path of the specified filename, eliminating any symbolic links encountered in the path\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.dirname\"><code>os.path.dirname(path)</code></a> (returns <em>\"the directory name of pathname <code>path</code>\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.getcwd\"><code>os.getcwd()</code></a> (returns <em>\"a string representing the current working directory\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.chdir\"><code>os.chdir(path)</code></a> (<em>\"change the current working directory to <code>path</code>\"</em>)</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 929409,
                        "reputation": 13322,
                        "user_id": 959570,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/6357f33dac78dafa70b27208d9896ce2?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Reis",
                        "link": "https://stackoverflow.com/users/959570/daniel-reis"
                    },
                    "is_accepted": false,
                    "score": 368,
                    "last_activity_date": 1447424213,
                    "last_edit_date": 1447424213,
                    "creation_date": 1354702687,
                    "answer_id": 13720875,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may find this useful as a reference:</p>\n\n<pre><code>import os\n\nprint(\"Path at terminal when executing this file\")\nprint(os.getcwd() + \"\\n\")\n\nprint(\"This file path, relative to os.getcwd()\")\nprint(__file__ + \"\\n\")\n\nprint(\"This file full path (following symlinks)\")\nfull_path = os.path.realpath(__file__)\nprint(full_path + \"\\n\")\n\nprint(\"This file directory and name\")\npath, filename = os.path.split(full_path)\nprint(path + ' --&gt; ' + filename + \"\\n\")\n\nprint(\"This file directory only\")\nprint(os.path.dirname(full_path))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2703454,
                        "reputation": 1821,
                        "user_id": 2333617,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/WFukm.jpg?s=256",
                        "display_name": "Grochni",
                        "link": "https://stackoverflow.com/users/2333617/grochni"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1445137391,
                    "last_edit_date": 1445137391,
                    "creation_date": 1376306866,
                    "answer_id": 18185825,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you're searching for the location of the currently executed script, you can use <code>sys.argv[0]</code> to get the full path.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1913198,
                        "reputation": 473,
                        "user_id": 1726435,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/19c4efc437fbb12bf4ae4d2518ccf1c4?s=256&d=identicon&r=PG",
                        "display_name": "Kurt",
                        "link": "https://stackoverflow.com/users/1726435/kurt"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1373231418,
                    "last_edit_date": 1373231418,
                    "creation_date": 1349601044,
                    "answer_id": 12767520,
                    "question_id": 5137497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are trying to find the current directory of the file you are currently in:</p>\n\n<p>OS agnostic way:</p>\n\n<pre><code>dirname, filename = os.path.split(os.path.abspath(__file__))\n</code></pre>\n"
                }
            ]
        },
        {
            "14779486": [
                {
                    "owner": {
                        "account_id": 5389722,
                        "reputation": 441,
                        "user_id": 4292623,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a0644cfc526838d44d8c633a09c0eaa5?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Lossan",
                        "link": "https://stackoverflow.com/users/4292623/lossan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1496591646,
                    "last_edit_date": 1496591646,
                    "creation_date": 1496591477,
                    "answer_id": 44355902,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is not a new solution, just an edit to a previous one.</p>\n\n<p>In case the <em>pip</em> command is giving a 404 error you can try to download the packet from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses\" rel=\"nofollow noreferrer\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses</a>\n and then write something like </p>\n\n<pre><code>pip install C:\\..packetPath..\\curses-2.2-cp35-none-win_amd64.whl\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 891925,
                        "reputation": 23410,
                        "user_id": 929999,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/8e38b941717ff6f519095ee81fcd09a7?s=256&d=identicon&r=PG",
                        "display_name": "Torxed",
                        "link": "https://stackoverflow.com/users/929999/torxed"
                    },
                    "is_accepted": true,
                    "score": 11,
                    "last_activity_date": 1488994387,
                    "last_edit_date": 1488994387,
                    "creation_date": 1360350520,
                    "answer_id": 14779649,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Then you're out of luck i'm afraid.\nThere's no real cross-platform version or port of curses/ncurses, there is a \"dialogue\" port which works, but it's limited in capabilities.</p>\n\n<p>Your best bet is to run CygWin or MinGW32, both are, in \"loose terms\", a Linux system+terminal emulator which has much of the binaries you need. They can run native Linux/Unix binaries inside the terminal and access your \"host\" system files at any time, so it's like patching Windows with a kick-ass terminal with all your goodies from the Linux world.\nYou'll still need some basic knowledge of Linux and how the commands etc work, but you'll figure it out.</p>\n\n<p><img src=\"https://i.sstatic.net/DoCx2.jpg\" alt=\"Screenshot of MinGW and CygWin\"></p>\n\n<h2>Here's a Pyglet GUI example:</h2>\n\n<pre><code>import pyglet\nfrom pyglet.gl import *\n\nclass main (pyglet.window.Window):\n    def __init__ (self):\n        super(main, self).__init__(800, 600, fullscreen = False)\n        self.button_texture = pyglet.image.load('button.png')\n        self.button = pyglet.sprite.Sprite(self.button_texture)\n\n        ## --- If you'd like to play sounds:\n        #self.sound = pyglet.media.load('music.mp3')\n        #self.sound.play()\n\n        self.alive = 1\n\n    def on_draw(self):\n        self.render()\n\n    def on_close(self):\n        self.alive = 0\n\n    def on_mouse_press(self, x, y, button, modifiers):\n        if x &gt; self.button.x and x &lt; (self.button.x + self.button_texture.width):\n            if y &gt; self.button.y and y &lt; (self.button.y + self.button_texture.height):\n                self.alive = 0\n\n    def on_key_press(self, symbol, modifiers):\n        if symbol == 65307: # [ESC]\n            self.alive = 0\n\n    def render(self):\n        self.clear()\n        self.button.draw()\n        self.flip()\n\n    def run(self):\n        while self.alive == 1:\n            self.render()\n\n            # -----------&gt; This is key &lt;----------\n            # This is what replaces pyglet.app.run()\n            # but is required for the GUI to not freeze\n            #\n            event = self.dispatch_events()\n\n\nx = main()\nx.run()\n</code></pre>\n\n<p>Here's the output of that code:</p>\n\n<p><img src=\"https://i.sstatic.net/9jYzQ.jpg\" alt=\"enter image description here\"></p>\n"
                },
                {
                    "owner": {
                        "account_id": 73135,
                        "reputation": 10163,
                        "user_id": 210780,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/87f8ee1956942944fe845a25cb7b1678?s=256&d=identicon&r=PG",
                        "display_name": "ashes999",
                        "link": "https://stackoverflow.com/users/210780/ashes999"
                    },
                    "is_accepted": false,
                    "score": 78,
                    "last_activity_date": 1488994353,
                    "last_edit_date": 1488994353,
                    "creation_date": 1383882621,
                    "answer_id": 19851287,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm happy to report that there's now a Windows build of Curses available as an extension for Python on Windows, from <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses\" rel=\"noreferrer\">here</a>. (I didn't write it, and I don't know who maintains it.)</p>\n\n<p>You can run the installer, and <code>import curses</code> to get curses running. (Verified on 64-bit Windows 7 and Windows 8.)</p>\n\n<p>@ArtOfWarfare points out that you can install this via Pip with this commend:</p>\n\n<pre><code>pip install http://www.lfd.uci.edu/~gohlke/pythonlibs/xugyqnq9/curses-2.2-cp27-none-win32.whl\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 144732,
                        "reputation": 11532,
                        "user_id": 1524913,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/de3d107ed1ccad362b44763106a78178?s=256&d=identicon&r=PG",
                        "display_name": "jeromej",
                        "link": "https://stackoverflow.com/users/1524913/jeromej"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1470161502,
                    "creation_date": 1470161502,
                    "answer_id": 38727665,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The official doc proposes the following (<a href=\"https://docs.python.org/3.3/howto/curses.html#what-is-curses\" rel=\"nofollow\">here</a> at the bottom of the paragraph):</p>\n\n<blockquote>\n  <p>The Windows version of Python doesn\u2019t include the <a href=\"https://docs.python.org/3.3/library/curses.html#module-curses\" rel=\"nofollow\">curses</a> module.\n  A ported version called <a href=\"https://pypi.python.org/pypi/UniCurses\" rel=\"nofollow\">UniCurses</a> is available. You could also\n  try <a href=\"http://effbot.org/zone/console-index.htm\" rel=\"nofollow\">the Console module</a> written by Fredrik Lundh, which doesn\u2019t\n  use the same API as curses but provides cursor-addressable text output\n  and full support for mouse and keyboard input.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 6445376,
                        "reputation": 13579,
                        "user_id": 4994021,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/35cf8c77ca205ce9dffbb6766eff869b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Peter Brittain",
                        "link": "https://stackoverflow.com/users/4994021/peter-brittain"
                    },
                    "is_accepted": false,
                    "score": 36,
                    "last_activity_date": 1465556011,
                    "last_edit_date": 1465556011,
                    "creation_date": 1441313456,
                    "answer_id": 32385199,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The original question was whether there is an <em>alternative</em> to curses on Windows.  </p>\n\n<p>One answer is to use the <a href=\"https://msdn.microsoft.com/en-gb/library/windows/desktop/ms682073(v=vs.85).aspx\" rel=\"noreferrer\">Win32 console API</a>.  You can program this directly in Python using the excellent pywin32 package if you're already familiar with the console API.  </p>\n\n<p>However, I found this too low level for my recent project.  I was also less than keen on forcing my users to build/install PDcurses, and besides, I also find curses too low level for a modern OO language like Python too.  </p>\n\n<p>I have therefore put together a high level cross-platform API to do all the things most people want from their terminal/console. The <a href=\"https://github.com/peterbrittain/asciimatics\" rel=\"noreferrer\">asciimatics</a> package will provide most of your input and output needs.  If you're on Linux this is a more human way to program curses. If you're on Windows, the same class works as is with no external binary dependencies.  See below for an example screenshot:</p>\n\n<p><a href=\"https://i.sstatic.net/QmnFJ.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/QmnFJ.png\" alt=\"Sample output\"></a></p>\n\n<p>There are many other effects and widgets available which you can find in the <a href=\"https://github.com/peterbrittain/asciimatics/wiki\" rel=\"noreferrer\">gallery</a>, but if there's an extra feature you need, let me know and I'll see what I can do.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5410120,
                        "reputation": 471,
                        "user_id": 4307212,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/99d763e469e55ca4375dad90134d5dbf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Flo",
                        "link": "https://stackoverflow.com/users/4307212/flo"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1443101443,
                    "creation_date": 1443101443,
                    "answer_id": 32762701,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may try this one. I once did the Win64-port for this (merged in there). You however need to write your Python code a bit different. This one will redirect all curses calls to the native Python version on UNIX, but call PDCURSES.DLL on Windows (download the DLL separately). It supports unicode as far as I remember:</p>\n\n<p><a href=\"http://sourceforge.net/projects/pyunicurses/\" rel=\"nofollow\">http://sourceforge.net/projects/pyunicurses/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 485360,
                        "reputation": 21428,
                        "user_id": 901641,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/PR8Bl.png?s=256",
                        "display_name": "ArtOfWarfare",
                        "link": "https://stackoverflow.com/users/901641/artofwarfare"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1423234989,
                    "last_edit_date": 1495540000,
                    "creation_date": 1423234989,
                    "answer_id": 28368618,
                    "question_id": 14779486,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's how to install <a href=\"https://stackoverflow.com/a/19851287/901641\">what ashes999 linked to in their answer</a> via pip:</p>\n\n<pre><code>pip install http://www.lfd.uci.edu/~gohlke/pythonlibs/xugyqnq9/curses-2.2-cp27-none-win32.whl\n</code></pre>\n\n<p>This should probably be added to PyPI to make installation with pip even easier (so it could be installed by name rather than URL.)</p>\n"
                }
            ]
        },
        {
            "6800481": [
                {
                    "owner": {
                        "account_id": 6625065,
                        "reputation": 416,
                        "user_id": 5115565,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/pL9Rh.png?s=256",
                        "display_name": "MERLIN",
                        "link": "https://stackoverflow.com/users/5115565/merlin"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627568974,
                    "last_edit_date": 1627568974,
                    "creation_date": 1627568660,
                    "answer_id": 68577744,
                    "question_id": 6800481,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Don't need to use range for this problem in pypy3 or python3, so it is actually less code..</p>\n<pre><code>for i in payIntList: print ( i + 1000 )\n</code></pre>\n<p>and coincidentally matches RustyTom's comment in PhiHag's solution above. Note : Can not reference a map using array brackets [] in pypy3 or python3 or it will throw the same error.</p>\n<pre><code>payIntList[i] \n</code></pre>\n<p>Map ref caused the error.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16209,
                        "reputation": 287117,
                        "user_id": 35070,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=256&d=identicon&r=PG",
                        "display_name": "phihag",
                        "link": "https://stackoverflow.com/users/35070/phihag"
                    },
                    "is_accepted": true,
                    "score": 183,
                    "last_activity_date": 1470258394,
                    "last_edit_date": 1470258394,
                    "creation_date": 1311425760,
                    "answer_id": 6800507,
                    "question_id": 6800481,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python 3, <code>map</code> returns an iterable object of type <code>map</code>, and not a subscriptible list, which would allow you to write <code>map[i]</code>. To force a list result, write </p>\n\n<pre><code>payIntList = list(map(int,payList))\n</code></pre>\n\n<p>However, in many cases, you can write out your code way nicer by not using indices. For example, with <a href=\"http://docs.python.org/tutorial/datastructures.html#list-comprehensions\">list comprehensions</a>:</p>\n\n<pre><code>payIntList = [pi + 1000 for pi in payList]\nfor pi in payIntList:\n    print(pi)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 234440,
                        "reputation": 176300,
                        "user_id": 500584,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=256&d=identicon&r=PG",
                        "display_name": "agf",
                        "link": "https://stackoverflow.com/users/500584/agf"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1311426194,
                    "last_edit_date": 1311426194,
                    "creation_date": 1311425721,
                    "answer_id": 6800499,
                    "question_id": 6800481,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>map()</code> doesn't return a list, it returns a <code>map</code> object. </p>\n\n<p>You need to call <code>list(map)</code> if you want it to be a list again.</p>\n\n<p>Even better,</p>\n\n<pre><code>from itertools import imap\npayIntList = list(imap(int, payList))\n</code></pre>\n\n<p>Won't take up a bunch of memory creating an intermediate object, it will just pass the <code>ints</code> out as it creates them.</p>\n\n<p>Also, you can do <code>if choice.lower() == 'n':</code> so you don't have to do it twice.</p>\n\n<p>Python supports <code>+=</code>: you can do <code>payIntList[i] += 1000</code> and <code>numElements += 1</code> if you want.</p>\n\n<p>If you really want to be tricky:</p>\n\n<pre><code>from itertools import count\nfor numElements in count(1):\n    payList.append(raw_input(\"Enter the pay amount: \"))\n    if raw_input(\"Do you wish to continue(y/n)?\").lower() == 'n':\n         break\n</code></pre>\n\n<p>and / or</p>\n\n<pre><code>for payInt in payIntList:\n    payInt += 1000\n    print payInt\n</code></pre>\n\n<p>Also, four spaces is the standard indent amount in Python.</p>\n"
                }
            ]
        },
        {
            "17081442": [
                {
                    "owner": {
                        "account_id": 19983411,
                        "reputation": 11,
                        "user_id": 16545770,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-En6AwcEptKY/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckKVKuVonYtDrqEALakFzeW2BDkRQ/s96-c/photo.jpg?sz=256",
                        "display_name": "Vitaliy Shaikhutdinov",
                        "link": "https://stackoverflow.com/users/16545770/vitaliy-shaikhutdinov"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654844940,
                    "last_edit_date": 1654844940,
                    "creation_date": 1654843067,
                    "answer_id": 72570022,
                    "question_id": 17081442,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I did some tests using Python 2.7.18 and Python 3.8.10. It looks like pymodbus optimized for Python3.</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ python2 test.py \ntimeout: 0.018 [s]\numodbus:        time to read 1 x 1000 (x 16 regs): 53.261 [s] / 0.053 [s/req]\npymodbus:       time to read 1 x 1000 (x 16 regs): 65.648 [s] / 0.066 [s/req]\nmodbus-tk:      time to read 1 x 1000 (x 16 regs): 60.191 [s] / 0.060 [s/req]\n\n$ python3 test.py \ntimeout: 0.018 [s]\numodbus:        time to read 1 x 1000 (x 16 regs): 53.246 [s] / 0.053 [s/req]\npymodbus:       time to read 1 x 1000 (x 16 regs): 32.765 [s] / 0.033 [s/req]\nmodbus-tk:      time to read 1 x 1000 (x 16 regs): 60.352 [s] / 0.060 [s/req]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 979386,
                        "reputation": 22182,
                        "user_id": 999530,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/YGip7.png?s=256",
                        "display_name": "Travis Griggs",
                        "link": "https://stackoverflow.com/users/999530/travis-griggs"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1530636353,
                    "creation_date": 1530636353,
                    "answer_id": 51159486,
                    "question_id": 17081442,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I just discovered <a href=\"https://github.com/AdvancedClimateSystems/uModbus\" rel=\"noreferrer\">uModbus</a>, and for deployment in something like a Raspberry PI (or other small SBC), it's a dream. It's a simple single capable package that doesn't bring in 10+ dependencies like pymodbus does.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2475129,
                        "reputation": 2903,
                        "user_id": 2155918,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Ugq85.png?s=256",
                        "display_name": "Mr. Girgitt",
                        "link": "https://stackoverflow.com/users/2155918/mr-girgitt"
                    },
                    "is_accepted": true,
                    "score": 158,
                    "last_activity_date": 1393523639,
                    "last_edit_date": 1592644375,
                    "creation_date": 1391092217,
                    "answer_id": 21459211,
                    "question_id": 17081442,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>About the same time I faced the same problem - which library to choose for python modbus master implementation but in my case for serial communication (modbus RTU) so my observations are only valid for modbus RTU.</p>\n<p>In my examination I didn't pay too much attention to documentation but examples for serial RTU master were easiest to find for modbus-tk however still in source not on a wiki etc.</p>\n<h2>keeping long story short:</h2>\n<h3>MinimalModbus:</h3>\n<ul>\n<li>pros:\n<ul>\n<li>lightweight module</li>\n<li>performance may be acceptable for applications reading ~10 registers</li>\n</ul>\n</li>\n<li>cons:\n<ul>\n<li>unacceptably (for my application) slow when reading ~64 registers</li>\n<li>relatively high CPU load</li>\n</ul>\n</li>\n</ul>\n<h3>pymodbus:</h3>\n<p>distinctive feature: relies on serial stream (<a href=\"https://groups.google.com/forum/#!msg/pymodbus/k2ZpTw-3BOE/M9oQ1HHWOS0J\" rel=\"noreferrer\">post by the author</a>)  and serial timeout must be dynamically set otherwise performance will be low (serial timeout must be adjusted for the longest possible response)</p>\n<ul>\n<li>pros:\n<ul>\n<li>low CPU load</li>\n<li>acceptable performance</li>\n</ul>\n</li>\n<li>cons:\n<ul>\n<li>even when timeout is dynamically set performance is 2 x lower compared to modbus-tk; if timeout is left at a constant value performance is much worse (but query time is constant)</li>\n<li>sensitive to hardware (as a result of dependency on processing stream from serial buffer I think) or there may be internal problem with transactions: you can get responses mixed-up if different reads or reads/writes are performed ~20 times per second or more. Longer timeouts help but not always making pymodbus RTU implementation over a serial line not enough robust for use in production.</li>\n<li>adding support for dynamic serial port timeout setting requires additional programming: inheriting base sync client class and implementing socket timeout modification methods</li>\n<li>responses validation not as detailed as in modbus-tk. For example in case of a bus decay only exception is thrown whereas modbus-tk returns in the same situation wrong slave address or CRC error which helps identifying root cause of the problem (which may be too short timeout, wrong bus termination / lack thereof or floating ground etc.)</li>\n</ul>\n</li>\n</ul>\n<h3>modbus-tk:</h3>\n<p>distinctive feature: probes serial buffer for data, assembles and returns response quickly.</p>\n<ul>\n<li>pros\n<ul>\n<li>best performance; ~2 x times faster than pymodbus with dynamic timeout</li>\n</ul>\n</li>\n<li>cons:\n<ul>\n<li>approx. 4 x higher CPU load compared to pymodbus // <strong>can be greately improved making this point invalid; see EDIT section at the end</strong></li>\n<li>CPU load increases for larger requests  // <strong>can be greately improved making this point invalid; see EDIT section at the end</strong></li>\n<li>code not as elegant as pymodbus</li>\n</ul>\n</li>\n</ul>\n<p>For over 6 months I was using pymodbus due to best performance / CPU load ratio but unreliable responses became a serious issue at higher request rates and eventually I moved to faster embedded system and added support for modbus-tk which works best for me.</p>\n<h2>For those interested in details</h2>\n<p>My goal was to achieve minimum response time.</p>\n<h3>setup:</h3>\n<ul>\n<li>baudrate: 153600\n<ul>\n<li>in sync with 16MHz clock of the microcontroller implementing modbus slave)</li>\n<li>my rs-485 bus has only 50m</li>\n</ul>\n</li>\n<li>FTDI FT232R converter and also serial over TCP bridge (using com4com as a bridge in RFC2217 mode)</li>\n<li>in case of USB to serial converter lowest timeouts and buffer sizes configured for serial port (to lower latency)</li>\n<li>auto-tx rs-485 adapter (bus has a dominant state)</li>\n</ul>\n<h3>Use case scenario:</h3>\n<ul>\n<li>Polling 5, 8 or 10 times a second with support for asynchronous access in between</li>\n<li>Requests for reading/writing 10 to 70 registers</li>\n</ul>\n<h3>Typical long-term (weeks) performance:</h3>\n<ul>\n<li>MinimalModbus: dropped after initial tests</li>\n<li>pymodbus: ~30ms to read 64 registers; effectively up to 30 requests / sec\n<ul>\n<li>but responses unreliable (in case of synchronized access from multiple threads)</li>\n<li>there is possibly a threadsafe fork on github but it's behind the master and I haven't tried it (<a href=\"https://github.com/xvart/pymodbus/network\" rel=\"noreferrer\">https://github.com/xvart/pymodbus/network</a>)</li>\n</ul>\n</li>\n<li>modbus-tk: ~16ms to read 64 registers; effectively up to 70 - 80 requests / sec for smaller requests</li>\n</ul>\n<h3>benchmark</h3>\n<p><strong>code:</strong></p>\n<pre><code>import time\nimport traceback\nimport serial\nimport modbus_tk.defines as tkCst\nimport modbus_tk.modbus_rtu as tkRtu\n\nimport minimalmodbus as mmRtu\n\nfrom pymodbus.client.sync import ModbusSerialClient as pyRtu\n\nslavesArr = [2]\niterSp = 100\nregsSp = 10\nportNbr = 21\nportName = 'com22'\nbaudrate = 153600\n\ntimeoutSp=0.018 + regsSp*0\nprint &quot;timeout: %s [s]&quot; % timeoutSp\n\n\nmmc=mmRtu.Instrument(portName, 2)  # port name, slave address\nmmc.serial.baudrate=baudrate\nmmc.serial.timeout=timeoutSp\n\ntb = None\nerrCnt = 0\nstartTs = time.time()\nfor i in range(iterSp):\n  for slaveId in slavesArr:\n    mmc.address = slaveId\n    try:\n        mmc.read_registers(0,regsSp)\n    except:\n        tb = traceback.format_exc()\n        errCnt += 1\nstopTs = time.time()\ntimeDiff = stopTs  - startTs\n\nmmc.serial.close()\n\nprint mmc.serial\n\nprint &quot;mimalmodbus:\\ttime to read %s x %s (x %s regs): %.3f [s] / %.3f [s/req]&quot; % (len(slavesArr),iterSp, regsSp, timeDiff, timeDiff/iterSp)\nif errCnt &gt;0:\n    print &quot;   !mimalmodbus:\\terrCnt: %s; last tb: %s&quot; % (errCnt, tb)\n\n\n\npymc = pyRtu(method='rtu', port=portNbr, baudrate=baudrate, timeout=timeoutSp)\n\nerrCnt = 0\nstartTs = time.time()\nfor i in range(iterSp):\n  for slaveId in slavesArr:\n    try:\n        pymc.read_holding_registers(0,regsSp,unit=slaveId)\n    except:\n        errCnt += 1\n        tb = traceback.format_exc()\nstopTs = time.time()\ntimeDiff = stopTs  - startTs\nprint &quot;pymodbus:\\ttime to read %s x %s (x %s regs): %.3f [s] / %.3f [s/req]&quot; % (len(slavesArr),iterSp, regsSp, timeDiff, timeDiff/iterSp)\nif errCnt &gt;0:\n    print &quot;   !pymodbus:\\terrCnt: %s; last tb: %s&quot; % (errCnt, tb)\npymc.close()\n\n\ntkmc = tkRtu.RtuMaster(serial.Serial(port=portNbr, baudrate=baudrate))\ntkmc.set_timeout(timeoutSp)\n\nerrCnt = 0\nstartTs = time.time()\nfor i in range(iterSp):\n  for slaveId in slavesArr:\n    try:\n        tkmc.execute(slaveId, tkCst.READ_HOLDING_REGISTERS, 0,regsSp)\n    except:\n        errCnt += 1\n        tb = traceback.format_exc()\nstopTs = time.time()\ntimeDiff = stopTs  - startTs\nprint &quot;modbus-tk:\\ttime to read %s x %s (x %s regs): %.3f [s] / %.3f [s/req]&quot; % (len(slavesArr),iterSp, regsSp, timeDiff, timeDiff/iterSp)\nif errCnt &gt;0:\n    print &quot;   !modbus-tk:\\terrCnt: %s; last tb: %s&quot; % (errCnt, tb)\ntkmc.close()\n</code></pre>\n<p><strong>results:</strong></p>\n<pre><code>platform:\nP8700 @2.53GHz\nWinXP sp3 32bit\nPython 2.7.1\nFTDI FT232R series 1220-0\nFTDI driver 2.08.26 (watch out for possible issues with 2.08.30 version on Windows)\npymodbus version 1.2.0\nMinimalModbus version 0.4\nmodbus-tk version 0.4.2\n</code></pre>\n<p>reading 100 x 64 registers:</p>\n<p>no power saving</p>\n<pre><code>timeout: 0.05 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.05, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 9.135 [s] / 0.091 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs): 6.151 [s] / 0.062 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs): 2.280 [s] / 0.023 [s/req]\n\ntimeout: 0.03 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.03, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 7.292 [s] / 0.073 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs): 3.170 [s] / 0.032 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs): 2.342 [s] / 0.023 [s/req]\n\n\ntimeout: 0.018 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.018, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 4.481 - 7.198 [s] / 0.045 - 0.072 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs): 3.045 [s] / 0.030 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs): 2.342 [s] / 0.023 [s/req]\n</code></pre>\n<p>maximum power saving</p>\n<pre><code>timeout: 0.05 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.05, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 10.289 [s] / 0.103 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs):  6.074 [s] / 0.061 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs):  2.358 [s] / 0.024 [s/req]\n\ntimeout: 0.03 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.03, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 8.166 [s] / 0.082 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs): 4.138 [s] / 0.041 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs): 2.327 [s] / 0.023 [s/req]\n\ntimeout: 0.018 [s]\nSerial&lt;id=0xd57330, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.018, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 64 regs): 7.776 [s] / 0.078 [s/req]\npymodbus:       time to read 1 x 100 (x 64 regs): 3.169 [s] / 0.032 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 64 regs): 2.342 [s] / 0.023 [s/req]\n</code></pre>\n<p>reading 100 x 10 registers:</p>\n<p>no power saving</p>\n<pre><code>timeout: 0.05 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.05, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 6.246 [s] / 0.062 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 6.199 [s] / 0.062 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.577 [s] / 0.016 [s/req]\n\ntimeout: 0.03 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.03, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 3.088 [s] / 0.031 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 3.143 [s] / 0.031 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.533 [s] / 0.015 [s/req]\n\ntimeout: 0.018 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.018, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 3.066 [s] / 0.031 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 3.006 [s] / 0.030 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.533 [s] / 0.015 [s/req]\n</code></pre>\n<p>maximum power saving</p>\n<pre><code>timeout: 0.05 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.05, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 6.386 [s] / 0.064 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 5.934 [s] / 0.059 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.499 [s] / 0.015 [s/req]\n\ntimeout: 0.03 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.03, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 3.139 [s] / 0.031 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 3.170 [s] / 0.032 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.562 [s] / 0.016 [s/req]\n\ntimeout: 0.018 [s]\nSerial&lt;id=0xd56350, open=False&gt;(port='com22', baudrate=153600, bytesize=8, parity='N', stopbits=1, timeout=0.018, xonxoff=False, rtscts=False, dsrdtr=False)\nmimalmodbus:    time to read 1 x 100 (x 10 regs): 3.123 [s] / 0.031 [s/req]\npymodbus:       time to read 1 x 100 (x 10 regs): 3.060 [s] / 0.031 [s/req]\nmodbus-tk:      time to read 1 x 100 (x 10 regs): 1.561 [s] / 0.016 [s/req]\n</code></pre>\n<h3>real-life application:</h3>\n<p>Load example for modbus-rpc bridge (~3% is caused by RPC server part)</p>\n<ul>\n<li><p>5 x 64 registers synchronous reads per second and simultaneous</p>\n</li>\n<li><p>asynchronous access with serial port timeout set to 0.018 s</p>\n<ul>\n<li><p>modbus-tk</p>\n<ul>\n<li>10 regs: {'currentCpuUsage': 20.6, 'requestsPerSec': 73.2}   // <strong>can be improved; see EDIT section below</strong></li>\n<li>64 regs: {'currentCpuUsage': 31.2, 'requestsPerSec': 41.91}  // <strong>can be improved; see EDIT section below</strong></li>\n</ul>\n</li>\n<li><p>pymodbus:</p>\n<ul>\n<li>10 regs: {'currentCpuUsage': 5.0, 'requestsPerSec': 36.88}</li>\n<li>64 regs: {'currentCpuUsage': 5.0, 'requestsPerSec': 34.29}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>EDIT:</strong> the modbus-tk library can be easily improved to reduce the CPU usage.\nIn the original version after request is sent and T3.5 sleep passed master assembles response one byte at a time. Profiling proved most od the time is spent on serial port access. This can be improved by trying to read the expected length of data from the serial buffer. According to <a href=\"http://pyserial.sourceforge.net/pyserial_api.html?highlight=read#serial.Serial.read\" rel=\"noreferrer\">pySerial  documentation</a> it should be safe (no hang up when response is missing or too short) if timeout is set:</p>\n<pre><code>read(size=1)\nParameters: size \u2013 Number of bytes to read.\nReturns:    Bytes read from the port.\nRead size bytes from the serial port. If a timeout is set it may return less characters as   \nrequested. With no timeout it will block until the requested number of bytes is read. \n</code></pre>\n<p>after modifying the `modbus_rtu.py' in the following way:</p>\n<pre><code>def _recv(self, expected_length=-1):\n     &quot;&quot;&quot;Receive the response from the slave&quot;&quot;&quot;\n     response = &quot;&quot;\n     read_bytes = &quot;dummy&quot;\n     iterCnt = 0\n     while read_bytes:\n         if iterCnt == 0:\n             read_bytes = self._serial.read(expected_length)  # reduces CPU load for longer frames; serial port timeout is used anyway \n         else:\n             read_bytes = self._serial.read(1)\n         response += read_bytes\n         if len(response) &gt;= expected_length &gt;= 0:\n             #if the expected number of byte is received consider that the response is done\n             #improve performance by avoiding end-of-response detection by timeout\n             break\n         iterCnt += 1\n</code></pre>\n<p>After modbus-tk modification the CPU load in the real-life application dropped considerably without significant performance penalty (still better than pymodbus):</p>\n<p>Updated load example for modbus-rpc bridge (~3% is caused by RPC server part)</p>\n<ul>\n<li><p>5 x 64 registers synchronous reads per second and simultaneous</p>\n</li>\n<li><p>asynchronous access with serial port timeout set to 0.018 s</p>\n<ul>\n<li><p>modbus-tk</p>\n<ul>\n<li>10 regs: {'currentCpuUsage': 7.8, 'requestsPerSec': 66.81}</li>\n<li>64 regs: {'currentCpuUsage': 8.1, 'requestsPerSec': 37.61}</li>\n</ul>\n</li>\n<li><p>pymodbus:</p>\n<ul>\n<li>10 regs: {'currentCpuUsage': 5.0, 'requestsPerSec': 36.88}</li>\n<li>64 regs: {'currentCpuUsage': 5.0, 'requestsPerSec': 34.29}</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 2269654,
                        "reputation": 133,
                        "user_id": 1997422,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9ad8ad1c575be561c52b4d46051a6354?s=256&d=identicon&r=PG",
                        "display_name": "Windsplunts",
                        "link": "https://stackoverflow.com/users/1997422/windsplunts"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1371148814,
                    "creation_date": 1371148814,
                    "answer_id": 17094623,
                    "question_id": 17081442,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It really depends on what application you're using, and what you're trying to achieve. </p>\n\n<p>pymodbus is a very robust library. It works, and it gives you a lot of tools to work with. But it can prove to be a little intimidating when you try to use it. I found it hard to work with personally. It offers you the ability to use both RTU and TCP/IP, which is great!</p>\n\n<p>MinimalModbus is a very simple library. I ended up using this for my application because it did exactly what I needed it to do. It only does RTU communications, and it does it well as far as I know. I've never had any trouble with it.</p>\n\n<p>I've never looked into Modbus-tk, so I don't know where it stands.</p>\n\n<p>Ultimately though, it does depend on what your application is. In the end I found that python wasn't the best choice for me. </p>\n"
                }
            ]
        },
        {
            "17327202": [
                {
                    "owner": {
                        "account_id": 8677192,
                        "reputation": 839,
                        "user_id": 6494274,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/UAIH8.png?s=256",
                        "display_name": "RFV",
                        "link": "https://stackoverflow.com/users/6494274/rfv"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1579065589,
                    "last_edit_date": 1579065589,
                    "creation_date": 1475568827,
                    "answer_id": 39847354,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In python <code>\\</code> (backslash) is used as an escape character. What this means that in places where you wish to insert a special character (such as newline), you would use the backslash and another character (<code>\\n</code> for newline)</p>\n\n<p>With your example string you would notice that when you put <code>\"C:\\Users\\Josh\\Desktop\\20130216\"</code> in the repl you will get <code>\"C:\\\\Users\\\\Josh\\\\Desktop\\x8130216\"</code>. This is because <code>\\2</code> has a special meaning in a python string. If you wish to specify <code>\\</code> then you need to put two <code>\\\\</code> in your string. </p>\n\n<p><code>\"C:\\\\Users\\\\Josh\\\\Desktop\\\\28130216\"</code></p>\n\n<p>The other option is to notify python that your entire string must NOT use <code>\\</code> as an escape character by pre-pending the string with <code>r</code></p>\n\n<p><code>r\"C:\\Users\\Josh\\Desktop\\20130216\"</code></p>\n\n<p>This is a \"raw\" string, and very useful in situations where you need to use lots of backslashes such as with regular expression strings.</p>\n\n<p>In case you still wish to replace that single <code>\\</code> with <code>\\\\</code> you would then use: </p>\n\n<p><code>directory = string.replace(r\"C:\\Users\\Josh\\Desktop\\20130216\", \"\\\\\", \"\\\\\\\\\")</code></p>\n\n<p><strong>Notice</strong> that I am not using <code>r'</code> in the last two strings above. This is because, when you use the <code>r'</code> form of strings you cannot end that string with a single <code>\\</code></p>\n\n<p><a href=\"https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash\">Why can&#39;t Python&#39;s raw string literals end with a single backslash?</a></p>\n\n<p><a href=\"https://pythonconquerstheuniverse.wordpress.com/2008/06/04/gotcha-%E2%80%94-backslashes-are-escape-characters/\" rel=\"nofollow noreferrer\">https://pythonconquerstheuniverse.wordpress.com/2008/06/04/gotcha-%E2%80%94-backslashes-are-escape-characters/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 14419679,
                        "reputation": 1,
                        "user_id": 10416074,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0e672cd68049a8896250665177c7ea36?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "AHRG",
                        "link": "https://stackoverflow.com/users/10416074/ahrg"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1537924600,
                    "last_edit_date": 1537924600,
                    "creation_date": 1537923288,
                    "answer_id": 52508467,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could use </p>\n\n<pre><code>os.path.abspath(path_with_backlash)\n</code></pre>\n\n<p>it returns the path with <code>\\</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8370420,
                        "reputation": 1573,
                        "user_id": 6285713,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/29eda5cb3a36b7dff45452b68570ce02?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Rewanth Tammana",
                        "link": "https://stackoverflow.com/users/6285713/rewanth-tammana"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1475606203,
                    "last_edit_date": 1475606203,
                    "creation_date": 1475527954,
                    "answer_id": 39840231,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let me make it simple and clear. Lets use the re module in python to escape the special characters.</p>\n\n<p><b>Python script :</b></p>\n\n<pre><code>import re\ns = \"C:\\Users\\Josh\\Desktop\"\nprint s\nprint re.escape(s)\n</code></pre>\n\n<p><b>Output :</b></p>\n\n<pre><code>C:\\Users\\Josh\\Desktop\nC:\\\\Users\\\\Josh\\\\Desktop\n</code></pre>\n\n<p><b>Explanation :</b></p>\n\n<p>Now observe that <i>re.escape</i> function on escaping the special chars in the given string we able to add an other backslash before each backslash, and finally the output results in a double backslash, the desired output.</p>\n\n<p>Hope this helps you.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9255731,
                        "reputation": 859,
                        "user_id": 6874714,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4ca996fcb45842c8760d60b8c863073c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "abacles",
                        "link": "https://stackoverflow.com/users/6874714/abacles"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1475291732,
                    "creation_date": 1475291732,
                    "answer_id": 39802666,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The backslash indicates a special escape character. Therefore, <code>directory = path_to_directory.replace(\"\\\", \"\\\\\")</code> would cause Python to think that the first argument to replace didn't end until the starting quotation of the second argument since it understood the ending quotation as an escape character.</p>\n\n<pre><code>directory=path_to_directory.replace(\"\\\\\",\"\\\\\\\\\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3332273,
                        "reputation": 1147,
                        "user_id": 2800918,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/91e8b021c5119b38bbbf8de9cb549d40?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "CAB",
                        "link": "https://stackoverflow.com/users/2800918/cab"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1475249061,
                    "creation_date": 1475249061,
                    "answer_id": 39794970,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Given the source string, manipulation with <a href=\"https://docs.python.org/3/library/os.path.html\" rel=\"nofollow\">os.path</a> might make more sense, but here's a string solution;</p>\n\n<pre><code>&gt;&gt;&gt; s=r\"C:\\Users\\Josh\\Desktop\\\\20130216\"\n&gt;&gt;&gt; '\\\\\\\\'.join(filter(bool, s.split('\\\\')))\n'C:\\\\\\\\Users\\\\\\\\Josh\\\\\\\\Desktop\\\\\\\\20130216'\n</code></pre>\n\n<p>Note that <a href=\"https://docs.python.org/2/library/stdtypes.html#str.split\" rel=\"nofollow\"><code>split</code></a> treats the <code>\\\\</code> in the source string as a delimited empty string.  Using <code>filter</code> gets rid of those empty strings so <code>join</code> won't double the already doubled backslashes. Unfortunately, if you have 3 or more, they get reduced to doubled backslashes, but I don't think that hurts you in a windows path expression.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5651154,
                        "reputation": 6727,
                        "user_id": 4471715,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9002abc7b1f4e80f74ab580a881536eb?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "A. STEFANI",
                        "link": "https://stackoverflow.com/users/4471715/a-stefani"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1475017306,
                    "creation_date": 1475017306,
                    "answer_id": 39735622,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Maybe a syntax error in your case,\nyou may change the line to:</p>\n\n<pre><code>directory = str(r\"C:\\Users\\Josh\\Desktop\\20130216\").replace('\\\\','\\\\\\\\')\n</code></pre>\n\n<p>which give you the right following output:</p>\n\n<pre><code>C:\\\\Users\\\\Josh\\\\Desktop\\\\20130216\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 451158,
                        "reputation": 250259,
                        "user_id": 846892,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/E9dZn.png?s=256",
                        "display_name": "Ashwini Chaudhary",
                        "link": "https://stackoverflow.com/users/846892/ashwini-chaudhary"
                    },
                    "is_accepted": true,
                    "score": 85,
                    "last_activity_date": 1372271189,
                    "last_edit_date": 1372271189,
                    "creation_date": 1372270442,
                    "answer_id": 17327500,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No need to use <code>str.replace</code> or <code>string.replace</code> here, just convert that string to a raw string:</p>\n\n<pre><code>&gt;&gt;&gt; strs = r\"C:\\Users\\Josh\\Desktop\\20130216\"\n           ^\n           |\n       notice the 'r'\n</code></pre>\n\n<p>Below is the <code>repr</code> version of the above string, that's why you're seeing <code>\\\\</code> here.\nBut, in fact the actual string contains just <code>'\\'</code> not <code>\\\\</code>.</p>\n\n<pre><code>&gt;&gt;&gt; strs\n'C:\\\\Users\\\\Josh\\\\Desktop\\\\20130216'\n\n&gt;&gt;&gt; s = r\"f\\o\"\n&gt;&gt;&gt; s            #repr representation\n'f\\\\o'\n&gt;&gt;&gt; len(s)   #length is 3, as there's only one `'\\'`\n3\n</code></pre>\n\n<p>But when you're going to print this string you'll not get <code>'\\\\'</code> in the output.</p>\n\n<pre><code>&gt;&gt;&gt; print strs\nC:\\Users\\Josh\\Desktop\\20130216\n</code></pre>\n\n<p>If you want the string to show <code>'\\\\'</code> during <code>print</code> then use <code>str.replace</code>:</p>\n\n<pre><code>&gt;&gt;&gt; new_strs = strs.replace('\\\\','\\\\\\\\')\n&gt;&gt;&gt; print new_strs\nC:\\\\Users\\\\Josh\\\\Desktop\\\\20130216\n</code></pre>\n\n<p><code>repr</code> version will now show <code>\\\\\\\\</code>:</p>\n\n<pre><code>&gt;&gt;&gt; new_strs\n'C:\\\\\\\\Users\\\\\\\\Josh\\\\\\\\Desktop\\\\\\\\20130216'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2551509,
                        "reputation": 909,
                        "user_id": 2215176,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fc8da688a11993caa5217cc3e9bdca27?s=256&d=identicon&r=PG",
                        "display_name": "alexpinho98",
                        "link": "https://stackoverflow.com/users/2215176/alexpinho98"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1372270727,
                    "last_edit_date": 1372270727,
                    "creation_date": 1372269648,
                    "answer_id": 17327272,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use escape characters: <code>\"full\\\\path\\\\here\"</code>, <code>\"\\\\\"</code> and <code>\"\\\\\\\\\"</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 2936977,
                        "reputation": 157,
                        "user_id": 2515679,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7b7c06b0e40a441df9b18af73f25c871?s=256&d=identicon&r=PG",
                        "display_name": "rocker_raj",
                        "link": "https://stackoverflow.com/users/2515679/rocker-raj"
                    },
                    "is_accepted": false,
                    "score": -4,
                    "last_activity_date": 1372269905,
                    "last_edit_date": 1372269905,
                    "creation_date": 1372269773,
                    "answer_id": 17327312,
                    "question_id": 17327202,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use:</p>\n\n<pre><code>string.replace(r\"C:\\Users\\Josh\\Desktop\\20130216\", \"\\\\\", \"\\\\\")\n</code></pre>\n\n<p>Escape the <code>\\</code> character.</p>\n"
                }
            ]
        },
        {
            "2835559": [
                {
                    "owner": {
                        "account_id": 92997,
                        "reputation": 47052,
                        "user_id": 254617,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/b8ae9879d7a5fb62f238a019b272d66f?s=256&d=identicon&r=PG",
                        "display_name": "Justin Peel",
                        "link": "https://stackoverflow.com/users/254617/justin-peel"
                    },
                    "is_accepted": true,
                    "score": 2193,
                    "last_activity_date": 1656738116,
                    "last_edit_date": 1656738116,
                    "creation_date": 1273853415,
                    "answer_id": 2835672,
                    "question_id": 2835559,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your data is not valid <a href=\"https://www.json.org/\" rel=\"nofollow noreferrer\">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code> for the <code>&quot;masks&quot;</code> and <code>&quot;parameters&quot;</code> elements:</p>\n<ul>\n<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>\n<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>\n</ul>\n<p>Here's how your JSON file should look:</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n    &quot;maps&quot;: [\n        {\n            &quot;id&quot;: &quot;blabla&quot;,\n            &quot;iscategorical&quot;: &quot;0&quot;\n        },\n        {\n            &quot;id&quot;: &quot;blabla&quot;,\n            &quot;iscategorical&quot;: &quot;0&quot;\n        }\n    ],\n    &quot;masks&quot;: {\n        &quot;id&quot;: &quot;valore&quot;\n    },\n    &quot;om_points&quot;: &quot;value&quot;,\n    &quot;parameters&quot;: {\n        &quot;id&quot;: &quot;valore&quot;\n    }\n}\n</code></pre>\n<p>Then you can use your code:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\n</code></pre>\n<p>With data, you can now also find values like so:</p>\n<pre class=\"lang-py prettyprint-override\"><code>data[&quot;maps&quot;][0][&quot;id&quot;]\ndata[&quot;masks&quot;][&quot;id&quot;]\ndata[&quot;om_points&quot;]\n</code></pre>\n<p>Try those out and see if it starts to make sense.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5028618,
                        "reputation": 654,
                        "user_id": 4039605,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fdbedf1ff98a7295340e5ca8652f032b?s=256&d=identicon&r=PG",
                        "display_name": "Ramapati Maurya",
                        "link": "https://stackoverflow.com/users/4039605/ramapati-maurya"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1620307089,
                    "last_edit_date": 1620307089,
                    "creation_date": 1510019598,
                    "answer_id": 47148770,
                    "question_id": 2835559,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here you go with modified <code>data.json</code> file:</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n    &quot;maps&quot;: [\n        {\n            &quot;id&quot;: &quot;blabla&quot;,\n            &quot;iscategorical&quot;: &quot;0&quot;\n        },\n        {\n            &quot;id&quot;: &quot;blabla&quot;,\n            &quot;iscategorical&quot;: &quot;0&quot;\n        }\n    ],\n    &quot;masks&quot;: [{\n        &quot;id&quot;: &quot;valore&quot;\n    }],\n    &quot;om_points&quot;: &quot;value&quot;,\n    &quot;parameters&quot;: [{\n        &quot;id&quot;: &quot;valore&quot;\n    }]\n}\n</code></pre>\n<p>You can call or print data on console by using below lines:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import json\nfrom pprint import pprint\nwith open('data.json') as data_file:\n    data_item = json.load(data_file)\npprint(data_item)\n</code></pre>\n<p>Expected output for <code>print(data_item['parameters'][0]['id'])</code>:</p>\n<pre><code>{'maps': [{'id': 'blabla', 'iscategorical': '0'},\n          {'id': 'blabla', 'iscategorical': '0'}],\n 'masks': [{'id': 'valore'}],\n 'om_points': 'value',\n 'parameters': [{'id': 'valore'}]}\n</code></pre>\n<p>Expected output for <code>print(data_item['parameters'][0]['id'])</code>:</p>\n<pre><code>valore\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 538874,
                        "reputation": 14400,
                        "user_id": 906658,
                        "user_type": "registered",
                        "accept_rate": 59,
                        "profile_image": "https://www.gravatar.com/avatar/328de31775d6584cbf9ed230e27a7666?s=256&d=identicon&r=PG",
                        "display_name": "Bengt",
                        "link": "https://stackoverflow.com/users/906658/bengt"
                    },
                    "is_accepted": false,
                    "score": 322,
                    "last_activity_date": 1429309892,
                    "last_edit_date": 1495541916,
                    "creation_date": 1354219803,
                    "answer_id": 13633860,
                    "question_id": 2835559,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Your <code>data.json</code> should look like this:</p>\n\n<pre><code>{\n \"maps\":[\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"},\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"}\n        ],\n\"masks\":\n         {\"id\":\"valore\"},\n\"om_points\":\"value\",\n\"parameters\":\n         {\"id\":\"valore\"}\n}\n</code></pre>\n\n<p>Your code should be:</p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:    \n    data = json.load(data_file)\npprint(data)\n</code></pre>\n\n<p>Note that this only works in Python 2.6 and up, as it depends upon the <a href=\"http://docs.python.org/2/reference/compound_stmts.html#the-with-statement\" rel=\"noreferrer\"><code>with</code>-statement</a>. In Python 2.5 use <code>from __future__ import with_statement</code>, in Python &lt;= 2.4, see <a href=\"https://stackoverflow.com/a/2835672/906658\">Justin Peel's answer</a>, which this answer is based upon.</p>\n\n<p>You can now also access single values like this:</p>\n\n<pre><code>data[\"maps\"][0][\"id\"]  # will return 'blabla'\ndata[\"masks\"][\"id\"]    # will return 'valore'\ndata[\"om_points\"]      # will return 'value'\n</code></pre>\n"
                }
            ]
        },
        {
            "713847": [
                {
                    "owner": {
                        "account_id": 20024,
                        "reputation": 1222,
                        "user_id": 47441,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/09d27b8ea30afcc6e6e81b78b8b73964?s=256&d=identicon&r=PG",
                        "display_name": "Sun Liwen",
                        "link": "https://stackoverflow.com/users/47441/sun-liwen"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1356256204,
                    "last_edit_date": 1356256204,
                    "creation_date": 1330176413,
                    "answer_id": 9444396,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Seems all kinds of python web frameworks can implement RESTful interfaces now.</p>\n\n<p>For Django, besides tastypie and piston, django-rest-framework is a promising one worth to mention. I've already migrated one of my project on it smoothly.</p>\n\n<blockquote>\n  <p>Django REST framework is a lightweight REST framework for Django, that\n  aims to make it easy to build well-connected, self-describing RESTful\n  Web APIs.</p>\n</blockquote>\n\n<p>Quick example:</p>\n\n<pre><code>from django.conf.urls.defaults import patterns, url\nfrom djangorestframework.resources import ModelResource\nfrom djangorestframework.views import ListOrCreateModelView, InstanceModelView\nfrom myapp.models import MyModel\n\nclass MyResource(ModelResource):\n    model = MyModel\n\nurlpatterns = patterns('',\n    url(r'^$', ListOrCreateModelView.as_view(resource=MyResource)),\n    url(r'^(?P&lt;pk&gt;[^/]+)/$', InstanceModelView.as_view(resource=MyResource)),\n)\n</code></pre>\n\n<p>Take the example from official site, all above codes provide api, self explained document(like soap based webservice) and even sandbox to test a bit. Very convenience.</p>\n\n<p>Links:\n<a href=\"http://django-rest-framework.org/\" rel=\"nofollow\">http://django-rest-framework.org/</a>  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 39410,
                        "reputation": 13505,
                        "user_id": 113643,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/57a65be84c4603191e843bdfe04725ba?s=256&d=identicon&r=PG",
                        "display_name": "Martin Blech",
                        "link": "https://stackoverflow.com/users/113643/martin-blech"
                    },
                    "is_accepted": true,
                    "score": 192,
                    "last_activity_date": 1334709706,
                    "last_edit_date": 1334709706,
                    "creation_date": 1243506321,
                    "answer_id": 920181,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Something to be careful about when designing a RESTful API is the conflation of GET and POST, as if they were the same thing. It's easy to make this mistake with <a href=\"http://www.djangoproject.com/\" rel=\"noreferrer\">Django</a>'s <a href=\"https://docs.djangoproject.com/en/dev/topics/http/views/\" rel=\"noreferrer\">function-based views</a> and <a href=\"http://www.cherrypy.org/\" rel=\"noreferrer\">CherryPy</a>'s default dispatcher, although both frameworks now provide a way around this problem (<a href=\"https://docs.djangoproject.com/en/dev/topics/class-based-views/\" rel=\"noreferrer\">class-based views</a> and <a href=\"http://docs.cherrypy.org/dev/refman/_cpdispatch.html#cherrypy._cpdispatch.MethodDispatcher\" rel=\"noreferrer\">MethodDispatcher</a>, respectively).</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services\" rel=\"noreferrer\">HTTP-verbs are very important</a> in REST, and unless you're very careful about this, you'll end up falling into a <a href=\"http://www.infoq.com/articles/rest-anti-patterns\" rel=\"noreferrer\">REST anti-pattern</a>.</p>\n\n<p>Some frameworks that get it right are <a href=\"http://webpy.org/\" rel=\"noreferrer\">web.py</a>, <a href=\"http://flask.pocoo.org\" rel=\"noreferrer\">Flask</a> and <a href=\"http://bottlepy.org\" rel=\"noreferrer\">Bottle</a>. When combined with the <a href=\"https://github.com/martinblech/mimerender\" rel=\"noreferrer\">mimerender</a> library (full disclosure: I wrote it), they allow you to write nice RESTful webservices:</p>\n\n<pre><code>import web\nimport json\nfrom mimerender import mimerender\n\nrender_xml = lambda message: '&lt;message&gt;%s&lt;/message&gt;'%message\nrender_json = lambda **args: json.dumps(args)\nrender_html = lambda message: '&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;'%message\nrender_txt = lambda message: message\n\nurls = (\n    '/(.*)', 'greet'\n)\napp = web.application(urls, globals())\n\nclass greet:\n    @mimerender(\n        default = 'html',\n        html = render_html,\n        xml  = render_xml,\n        json = render_json,\n        txt  = render_txt\n    )\n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return {'message': 'Hello, ' + name + '!'}\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n\n<p>The service's logic is implemented only once, and the correct representation selection (Accept header) + dispatch to the proper render function (or template) is done in a tidy, transparent way.</p>\n\n<pre><code>$ curl localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/html\" localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/xml\" localhost:8080/x\n&lt;message&gt;Hello, x!&lt;/message&gt;\n\n$ curl -H \"Accept: application/json\" localhost:8080/x\n{'message':'Hello, x!'}\n\n$ curl -H \"Accept: text/plain\" localhost:8080/x\nHello, x!\n</code></pre>\n\n<p><strong>Update (April 2012)</strong>: added information about Django's class-based views, CherryPy's MethodDispatcher and Flask and Bottle frameworks. Neither existed back when the question was asked.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 54039,
                        "reputation": 1289,
                        "user_id": 161642,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f4296ea05c7adc20e644cc4424fceb93?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user161642",
                        "link": "https://stackoverflow.com/users/161642/user161642"
                    },
                    "is_accepted": false,
                    "score": 70,
                    "last_activity_date": 1331682647,
                    "last_edit_date": 1331682647,
                    "creation_date": 1294469388,
                    "answer_id": 4632784,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Surprised no one mentioned <a href=\"http://flask.pocoo.org/\" rel=\"noreferrer\">flask</a>.</p>\n\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2583,
                        "reputation": 6467,
                        "user_id": 3608,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/50ec8e1a938d2c6ef4362b0e983ff84f?s=256&d=identicon&r=PG",
                        "display_name": "Kristian",
                        "link": "https://stackoverflow.com/users/3608/kristian"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1328860177,
                    "creation_date": 1328860177,
                    "answer_id": 9224424,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I you are using Django then you can consider <a href=\"https://github.com/toastdriven/django-tastypie\" rel=\"nofollow\">django-tastypie</a> as an alternative to <a href=\"https://bitbucket.org/jespern/django-piston/wiki/Home\" rel=\"nofollow\">django-piston</a>. It is easier to tune to non-ORM data sources than piston, and has great <a href=\"http://tastypieapi.org/\" rel=\"nofollow\">documentation</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 196726,
                        "reputation": 25536,
                        "user_id": 440323,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c524d823f477d9bb60626dc9dcacc95e?s=256&d=identicon&r=PG",
                        "display_name": "Anthony",
                        "link": "https://stackoverflow.com/users/440323/anthony"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1328281655,
                    "last_edit_date": 1328281655,
                    "creation_date": 1301322402,
                    "answer_id": 5460433,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://www.web2py.com\" rel=\"nofollow\">web2py</a> includes support for easily building RESTful API's, described <a href=\"http://web2py.com/books/default/chapter/29/10#Restful-Web-Services\" rel=\"nofollow\">here</a> and <a href=\"http://vimeo.com/21133657\" rel=\"nofollow\">here</a> (video). In particular, look at <a href=\"http://web2py.com/books/default/chapter/29/10#parse_as_rest-%28experimental%29\" rel=\"nofollow\"><code>parse_as_rest</code></a>, which lets you define URL patterns that map request args to database queries; and <a href=\"http://web2py.com/books/default/chapter/29/10#smart_query-%28experimental%29\" rel=\"nofollow\"><code>smart_query</code></a>, which enables you to pass arbitrary natural language queries in the URL.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37762,
                        "reputation": 3065,
                        "user_id": 108062,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/d0f83bdca70731ceb5cd0e9147c5350d?s=256&d=identicon&r=PG",
                        "display_name": "Devraj",
                        "link": "https://stackoverflow.com/users/108062/devraj"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1321922785,
                    "creation_date": 1321922785,
                    "answer_id": 8220601,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>We are working on a framework for strict REST services, check out <a href=\"http://prestans.googlecode.com\" rel=\"nofollow\">http://prestans.googlecode.com</a> </p>\n\n<p>Its in early Alpha at the moment, we are testing against mod_wsgi and Google's AppEngine.</p>\n\n<p>Looking for testers and feedback. Thanks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 140564,
                        "reputation": 3572,
                        "user_id": 346980,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/42674872f1dc5a79ff5de2782d336411?s=256&d=identicon&r=PG",
                        "display_name": "Savino Sguera",
                        "link": "https://stackoverflow.com/users/346980/savino-sguera"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1312195842,
                    "creation_date": 1312195842,
                    "answer_id": 6897383,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't see any reason to use Django just to expose a REST api, there are lighter and more flexible solutions. Django carries a lot of other things to the table, that are not always needed. For sure not needed if you only want to expose some code as a REST service. </p>\n\n<p>My personal experience, fwiw, is that once you have a one-size-fits-all framework, you'll start to use its ORM, its plugins, etc. just because it's easy, and in no time you end up having a dependency that is very hard to get rid of.</p>\n\n<p>Choosing a web framework is a tough decision, and I would avoid picking a full stack solution just to expose a REST api. </p>\n\n<p>Now, if you really need/want to use Django, then Piston is a nice REST framework for django apps.</p>\n\n<p>That being said, CherryPy looks really nice too, but seems more RPC than REST.</p>\n\n<p>Looking at the samples (I never used it), probably web.py is the best and cleanest if you only need REST.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 128874,
                        "reputation": 9377,
                        "user_id": 327038,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/e17117063f64ef47f36ab4ee45bf3d4b?s=256&d=identicon&r=PG",
                        "display_name": "asthasr",
                        "link": "https://stackoverflow.com/users/327038/asthasr"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1301328839,
                    "creation_date": 1301328839,
                    "answer_id": 5461908,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In 2010, the Pylons and repoze.bfg communities \"joined forces\" to create <a href=\"http://pylonsproject.org/\" rel=\"noreferrer\">Pyramid</a>, a web framework based most heavily on repoze.bfg. It retains the philosophies of its parent frameworks, and can be used for <a href=\"http://zhuoqiang.me/a/restful-pyramid\" rel=\"noreferrer\">RESTful services</a>.  It's worth a look.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 119733,
                        "reputation": 14881,
                        "user_id": 311655,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=256&d=identicon&r=PG",
                        "display_name": "DenisKolodin",
                        "link": "https://stackoverflow.com/users/311655/deniskolodin"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1291486068,
                    "creation_date": 1291486068,
                    "answer_id": 4354998,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://bitbucket.org/jespern/django-piston/wiki/Home\" rel=\"noreferrer\">Piston</a> is very flexible framework for wirting RESTful APIs for Django applications.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 643218,
                        "reputation": 171,
                        "user_id": 426044,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/6cb21a6bf95cd16de9b5a96b176370b9?s=256&d=identicon&r=PG",
                        "display_name": "nir",
                        "link": "https://stackoverflow.com/users/426044/nir"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1286274207,
                    "creation_date": 1286274207,
                    "answer_id": 3862753,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here is a discussion in CherryPy docs on REST: <a href=\"http://docs.cherrypy.org/dev/progguide/REST.html\" rel=\"noreferrer\">http://docs.cherrypy.org/dev/progguide/REST.html</a></p>\n\n<p>In particular it mentions a built in CherryPy dispatcher called MethodDispatcher, which invokes methods based on their HTTP-verb identifiers (GET, POST, etc...).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 25620,
                        "reputation": 739,
                        "user_id": 65975,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5fd4318900fae7968c1fbccfc556ee16?s=256&d=identicon&r=PG",
                        "display_name": "Federico",
                        "link": "https://stackoverflow.com/users/65975/federico"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1258038838,
                    "creation_date": 1258038838,
                    "answer_id": 1722910,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I strongly recommend TurboGears or Bottle:</p>\n\n<p>TurboGears:</p>\n\n<ul>\n<li>less verbose than django</li>\n<li>more flexible, less HTML-oriented </li>\n<li>but: less famous</li>\n</ul>\n\n<p>Bottle:</p>\n\n<ul>\n<li>very fast</li>\n<li>very easy to learn</li>\n<li>but: minimalistic and not mature</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 13945,
                        "reputation": 3655,
                        "user_id": 28287,
                        "user_type": "registered",
                        "accept_rate": 66,
                        "profile_image": "https://www.gravatar.com/avatar/27c579be34314f9f113a81f931489eed?s=256&d=identicon&r=PG",
                        "display_name": "z8000",
                        "link": "https://stackoverflow.com/users/28287/z8000"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1249950600,
                    "last_edit_date": 1249950600,
                    "creation_date": 1249950125,
                    "answer_id": 1257920,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Take a look at</p>\n\n<ul>\n<li><a href=\"http://github.com/toastdriven/itty/tree\" rel=\"noreferrer\" title=\"Itty\">Itty</a> (<a href=\"http://www.toastdriven.com/fresh/itty-sinatra-inspired-micro-framework/\" rel=\"noreferrer\">blog post</a>)</li>\n<li><a href=\"http://github.com/defnull/bottle/tree\" rel=\"noreferrer\" title=\"Bottle\">Bottle</a></li>\n<li><a href=\"http://webpy.org/\" rel=\"noreferrer\">web.py</a></li>\n<li><a href=\"http://brianreily.com/project/juno/\" rel=\"noreferrer\">juno</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1273,
                        "reputation": 192421,
                        "user_id": 1694,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=256&d=identicon&r=PG",
                        "display_name": "Eli Courtwright",
                        "link": "https://stackoverflow.com/users/1694/eli-courtwright"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1238765944,
                    "creation_date": 1238765944,
                    "answer_id": 713950,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I really like <a href=\"http://cherrypy.org/\" rel=\"noreferrer\">CherryPy</a>.  Here's an example of a restful web service:</p>\n\n<pre><code>import cherrypy\nfrom cherrypy import expose\n\nclass Converter:\n    @expose\n    def index(self):\n        return \"Hello World!\"\n\n    @expose\n    def fahr_to_celc(self, degrees):\n        temp = (float(degrees) - 32) * 5 / 9\n        return \"%.01f\" % temp\n\n    @expose\n    def celc_to_fahr(self, degrees):\n        temp = float(degrees) * 9 / 5 + 32\n        return \"%.01f\" % temp\n\ncherrypy.quickstart(Converter())\n</code></pre>\n\n<p>This emphasizes what I really like about CherryPy; this is a completely working example that's very understandable even to someone who doesn't know the framework.  If you run this code, then you can immediately see the results in your web browser; e.g. visiting <a href=\"http://localhost:8080/celc_to_fahr?degrees=50\" rel=\"noreferrer\">http://localhost:8080/celc_to_fahr?degrees=50</a> will display <code>122.0</code> in your web browser.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1238765430,
                    "creation_date": 1238765430,
                    "answer_id": 713911,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>We're using <a href=\"http://www.djangoproject.com/\" rel=\"noreferrer\">Django</a> for RESTful web services.</p>\n\n<p>Note that -- out of the box -- Django did not have fine-grained enough authentication for our needs.  We used the <a href=\"http://code.google.com/p/django-rest-interface/\" rel=\"noreferrer\">Django-REST interface</a>, which helped a lot.  [We've since rolled our own because we'd made so many extensions that it had become a maintenance nightmare.]</p>\n\n<p>We have two kinds of URL's: \"html\" URL's which implement the human-oriented HTML pages, and \"json\" URL's which implement the web-services oriented processing.  Our view functions often look like this.</p>\n\n<pre><code>def someUsefulThing( request, object_id ):\n    # do some processing\n    return { a dictionary with results }\n\ndef htmlView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    render_to_response( 'template.html', d, ... )\n\ndef jsonView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    data = serializers.serialize( 'json', d['object'], fields=EXPOSED_FIELDS )\n    response = HttpResponse( data, status=200, content_type='application/json' )\n    response['Location']= reverse( 'some.path.to.this.view', kwargs={...} )\n    return response\n</code></pre>\n\n<p>The point being that the useful functionality is factored out of the two presentations.  The JSON presentation is usually just one object that was requested.  The HTML presentation often includes all kinds of navigation aids and other contextual clues that help people be productive.</p>\n\n<p>The <code>jsonView</code> functions are all very similar, which can be a bit annoying.  But it's Python, so make them part of a callable class or write decorators if it helps.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4350,
                        "reputation": 86084,
                        "user_id": 6491,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fd7da9bf7b009ceb7a7037906361c9eb?s=256&d=identicon&r=PG",
                        "display_name": "gimel",
                        "link": "https://stackoverflow.com/users/6491/gimel"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1238765166,
                    "creation_date": 1238765166,
                    "answer_id": 713892,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>See <a href=\"http://wiki.python.org/moin/WebFrameworks\" rel=\"noreferrer\">Python Web Frameworks</a> wiki.</p>\n\n<p>You probably do not need the <em>full stack</em> frameworks, but the remaining list is still quite long.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14045,
                        "reputation": 9206,
                        "user_id": 28567,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/9797a726a1bcac449f6f12f335b47331?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy B.",
                        "link": "https://stackoverflow.com/users/28567/jeremy-b"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1238764559,
                    "creation_date": 1238764559,
                    "answer_id": 713858,
                    "question_id": 713847,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I am not an expert on the python world but I have been using <a href=\"http://www.djangoproject.com/\" rel=\"nofollow noreferrer\">django</a> which is an excellent web framework and can be used to create a restful framework.</p>\n"
                }
            ]
        },
        {
            "18728056": [
                {
                    "owner": {
                        "account_id": 1756738,
                        "reputation": 1289,
                        "user_id": 1604590,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/TUBku.jpg?s=256",
                        "display_name": "Ben Schwabe",
                        "link": "https://stackoverflow.com/users/1604590/ben-schwabe"
                    },
                    "is_accepted": true,
                    "score": 14,
                    "last_activity_date": 1508330091,
                    "last_edit_date": 1508330091,
                    "creation_date": 1378855436,
                    "answer_id": 18730311,
                    "question_id": 18728056,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you install from python(x,y) then it should give you a desktop link, or a start menu link. If you install it from the Spyderlib website, like I did (<a href=\"https://code.google.com/p/spyderlib/\" rel=\"noreferrer\">https://code.google.com/p/spyderlib/</a>), then do what I did, assuming you're running windows:</p>\n\n<p>1) Go to the desktop</p>\n\n<p>2) right-click > New > Shortcut</p>\n\n<p>3) Have it open \"C:\\Python27\\Scripts\\spyder.bat\" (assuming you have python 2.7 installed on your OS) and hit next</p>\n\n<p>4) Type a name for your shortcut and hit finish</p>\n\n<p>This creates a link to open your spyder executable. I'm sorry if it opens a Command Prompt window in the backgroud, that is necessary for Spyder to run.</p>\n\n<p>You can also give it the spyder icon. Do the following:</p>\n\n<p>1) right-click on the shortcut > Properties</p>\n\n<p>2) Click the \"Change Icon\" button</p>\n\n<p>3) Choose an icon from the system list <em>or</em> go to C:\\Python27\\Scripts and choose an icon from that location (hit \"Browse...\" to use explorer to get there)</p>\n\n<p><strong>EDITS</strong></p>\n\n<p>If you are having trouble getting Spyder to run, try making sure you installed right. Go to <a href=\"https://pythonhosted.org/spyder/installation.html\" rel=\"noreferrer\">https://pythonhosted.org/spyder/installation.html</a> to make sure you installed right</p>\n\n<p>Also, Make sure you installed the correct version. If you have python 3.3 installed, the installer for python 2.7 will NOT work. Go to <a href=\"https://code.google.com/p/spyderlib/downloads/list\" rel=\"noreferrer\">https://code.google.com/p/spyderlib/downloads/list</a> to get a list of all the available downloads.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2757269,
                        "reputation": 197,
                        "user_id": 2374981,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/01cc9666516f956096ed8ec9a0408548?s=256&d=identicon&r=PG",
                        "display_name": "Roel",
                        "link": "https://stackoverflow.com/users/2374981/roel"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1378845216,
                    "creation_date": 1378845216,
                    "answer_id": 18728269,
                    "question_id": 18728056,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I got my link in the start menu:\n\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Python(x,y)\\Spyder\\Spyder.lnk\"\nOr you could just look for the executable and create the short cut yourself. Look in Python's installation directory. It's probably C:\\Python or something similar. Find spyder.exe, rightclick, create short cut/link, drag link to desktop, done.\nGood luck! </p>\n"
                }
            ]
        },
        {
            "35120250": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user7585780"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1571986076,
                    "last_edit_date": 1571986076,
                    "creation_date": 1565347217,
                    "answer_id": 57428363,
                    "question_id": 35120250,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The only thing missing in the original question is a call to the <code>decode</code> method on the response object (and even then, not for every python3 version). It's a shame no one pointed that out and everyone jumped on a third party library.</p>\n\n<p>Using only the standard library, for the simplest of use cases :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import json\nfrom urllib.request import urlopen\n\n\ndef get(url, object_hook=None):\n    with urlopen(url) as resource:  # 'with' is important to close the resource after use\n        return json.load(resource, object_hook=object_hook)\n</code></pre>\n\n<p>Simple use case :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>data = get('http://url') # '{ \"id\": 1, \"$key\": 13213654 }'\nprint(data['id']) # 1\nprint(data['$key']) # 13213654\n</code></pre>\n\n<p>Or if you prefer, but riskier :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from types import SimpleNamespace\n\ndata = get('http://url', lambda o: SimpleNamespace(**o)) # '{ \"id\": 1, \"$key\": 13213654 }'\nprint(data.id) # 1\nprint(data.$key) # invalid syntax\n# though you can still do\nprint(data.__dict__['$key'])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24355,
                        "reputation": 7706,
                        "user_id": 61903,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/a91741eda8fb513884bef1ba18ecdc1c?s=256&d=identicon&r=PG",
                        "display_name": "ferdy",
                        "link": "https://stackoverflow.com/users/61903/ferdy"
                    },
                    "is_accepted": true,
                    "score": 63,
                    "last_activity_date": 1555353444,
                    "last_edit_date": 1555353444,
                    "creation_date": 1454280520,
                    "answer_id": 35120519,
                    "question_id": 35120250,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Version 1: (do a <code>pip install requests</code> before running the script)</p>\n\n<pre><code>import requests\nr = requests.get(url='https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty')\nprint(r.json())\n</code></pre>\n\n<p>Version 2: (do a <code>pip install wget</code> before running the script)</p>\n\n<pre><code>import wget\n\nfs = wget.download(url='https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty')\nwith open(fs, 'r') as f:\n    content = f.read()\nprint(content)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2765431,
                        "reputation": 2135,
                        "user_id": 2381269,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/N407z.jpg?s=256",
                        "display_name": "kartik",
                        "link": "https://stackoverflow.com/users/2381269/kartik"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1546332423,
                    "last_edit_date": 1546332423,
                    "creation_date": 1524183461,
                    "answer_id": 49932058,
                    "question_id": 35120250,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>With Python 3</p>\n\n<pre><code>import requests\nimport json\n\nurl = 'http://IP-Address:8088/ws/v1/cluster/scheduler'\nr = requests.get(url)\ndata = json.loads(r.content.decode())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3029987,
                        "reputation": 871,
                        "user_id": 2569218,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7d06ad0bab5676551e37eb6c478fdf7e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "mimin0",
                        "link": "https://stackoverflow.com/users/2569218/mimin0"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1482959225,
                    "creation_date": 1482959225,
                    "answer_id": 41369702,
                    "question_id": 35120250,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>you can use standard library python3:</p>\n\n<pre><code>import urllib.request\nimport json\nurl = 'http://www.reddit.com/r/all/top/.json'\nreq = urllib.request.Request(url)\n\n##parsing response\nr = urllib.request.urlopen(req).read()\ncont = json.loads(r.decode('utf-8'))\ncounter = 0\n\n##parcing json\nfor item in cont['data']['children']:\n    counter += 1\n    print(\"Title:\", item['data']['title'], \"\\nComments:\", item['data']['num_comments'])\n    print(\"----\")\n\n##print formated\n#print (json.dumps(cont, indent=4, sort_keys=True))\nprint(\"Number of titles: \", counter)\n</code></pre>\n\n<p>output will be like this one:</p>\n\n<pre><code>...\nTitle: Maybe we shouldn't let grandma decide things anymore.  \nComments: 2018\n---- \nTitle: Carrie Fisher and Her Stunt Double Sunbathing on the Set of Return of The Jedi, 1982  \nComments: 880\n---- \nTitle: fidget spinner  \nComments: 1537\n---- \nNumber of titles:  25\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6318857,
                        "reputation": 11931,
                        "user_id": 4907767,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/To1v7.jpg?s=256",
                        "display_name": "gtlambert",
                        "link": "https://stackoverflow.com/users/4907767/gtlambert"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1454279086,
                    "creation_date": 1454279086,
                    "answer_id": 35120287,
                    "question_id": 35120250,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I would usually use the <code>requests</code> package with the <code>json</code> package. The following code should be suitable for your needs:</p>\n\n<pre><code>import requests\nimport json\n\nurl = 'https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty'\nr = requests.get(url)\nprint(json.loads(r.content))\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre><code>[11008076, \n 11006915, \n 11008202,\n ...., \n 10997668,\n 10999859,\n 11001695]\n</code></pre>\n"
                }
            ]
        },
        {
            "16172163": [
                {
                    "owner": {
                        "account_id": 57473,
                        "reputation": 41850,
                        "user_id": 172176,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/53ea9ceaca555fc33de2069b747554e5?s=256&d=identicon&r=PG",
                        "display_name": "Aya",
                        "link": "https://stackoverflow.com/users/172176/aya"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1366730234,
                    "last_edit_date": 1366730234,
                    "creation_date": 1366728090,
                    "answer_id": 16172278,
                    "question_id": 16172163,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There's little difference in your example, but suppose you created a subclass of <code>Foo</code> and called the <code>create_new</code> method on the subclass...</p>\n\n<pre><code>class Bar(Foo):\n    pass\n\nobj = Bar.create_new()\n</code></pre>\n\n<p>...then this base class would cause a new <code>Bar</code> object to be created...</p>\n\n<pre><code>class Foo:\n    @classmethod\n    def create_new(cls):\n        return cls()\n</code></pre>\n\n<p>...whereas this base class would cause a new <code>Foo</code> object to be created...</p>\n\n<pre><code>class Foo:\n    @staticmethod\n    def create_new():\n        return Foo()\n</code></pre>\n\n<p>...so the choice would depend which behavior you want.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 63306,
                        "reputation": 3121,
                        "user_id": 187464,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/94095d8efdb91e2434edf1e17ca07778?s=256&d=identicon&r=PG",
                        "display_name": "dckrooney",
                        "link": "https://stackoverflow.com/users/187464/dckrooney"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1366728266,
                    "creation_date": 1366728266,
                    "answer_id": 16172353,
                    "question_id": 16172163,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>From the <a href=\"http://docs.python.org/2/library/functions.html#classmethod\" rel=\"nofollow\">docs</a>, a class method receives its class as an implicit argument, while static methods are unaware of the class in which they reside. </p>\n\n<p>This can be useful in situations where you have an inherited static method that you want to override with different behaviour in the subclass. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 75311,
                        "reputation": 386324,
                        "user_id": 216074,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=256&d=identicon&r=PG",
                        "display_name": "poke",
                        "link": "https://stackoverflow.com/users/216074/poke"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1366728233,
                    "creation_date": 1366728233,
                    "answer_id": 16172338,
                    "question_id": 16172163,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, those two classes would do the same.</p>\n\n<p>However, now imagine a subtype of that class:</p>\n\n<pre><code>class Bar (Foo):\n    pass\n</code></pre>\n\n<p>Now calling <code>Bar.create_new</code> does something different. For the static method, you get a <code>Foo</code>. For the class method, you get a <code>Bar</code>.</p>\n\n<p>So the important difference is that a class method gets the type passed as a parameter.</p>\n"
                }
            ]
        },
        {
            "115844": [
                {
                    "owner": {
                        "account_id": 25114,
                        "reputation": 116670,
                        "user_id": 64313,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/r5Apm.gif?s=256",
                        "display_name": "cmcginty",
                        "link": "https://stackoverflow.com/users/64313/cmcginty"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1511823301,
                    "last_edit_date": 1511823301,
                    "creation_date": 1243897408,
                    "answer_id": 937236,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Some libraries I have found that haven't yet been mentioned:</p>\n\n<ul>\n<li><a href=\"http://circuitsframework.com/\" rel=\"nofollow noreferrer\">Circuits</a> - a Lightweight, Event driven Framework with a strong Component Architecture.</li>\n<li><a href=\"http://code.activestate.com/recipes/410686/\" rel=\"nofollow noreferrer\">C# Event Recipe</a> </li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 82769,
                        "reputation": 20536,
                        "user_id": 232485,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bc3cbbdadcf7485288e502d084820c32?s=256&d=identicon&r=PG",
                        "display_name": "Jabba",
                        "link": "https://stackoverflow.com/users/232485/jabba"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1370349937,
                    "creation_date": 1370349937,
                    "answer_id": 16918220,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a newer one: <a href=\"https://github.com/shaunduncan/smokesignal\" rel=\"nofollow\">https://github.com/shaunduncan/smokesignal</a>. \"<em>smokesignal is a simple python library for sending and receiving signals. It draws some inspiration from the django signal framework but is meant as a general purpose variant.</em>\" Example:</p>\n\n<pre><code>from time import sleep\nimport smokesignal\n\n@smokesignal.on('debug')\ndef verbose(val):\n    print \"#\", val\n\n\ndef main():\n    for i in range(100):\n        if i and i%10==0:\n            smokesignal.emit('debug', i)\n        sleep(.1)\n\nmain()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 96686,
                        "reputation": 48916,
                        "user_id": 262667,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/dd09cc9b40b956f93a00f5b464469d11?s=256&d=identicon&r=PG",
                        "display_name": "Olivier Verdier",
                        "link": "https://stackoverflow.com/users/262667/olivier-verdier"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1308168654,
                    "last_edit_date": 1308168654,
                    "creation_date": 1270329205,
                    "answer_id": 2572693,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The best dispatch package for python seems to be the <a href=\"http://github.com/django/django/tree/master/django/dispatch/\" rel=\"nofollow noreferrer\">dispatch module</a> inside django (called <a href=\"http://docs.djangoproject.com/en/dev/topics/signals/\" rel=\"nofollow noreferrer\">signals</a> in the documentation). It is independent of the rest of django, and is short, documented, tested and very well written.</p>\n\n<p><strong>Edit:</strong> I forked this project into an <a href=\"https://github.com/olivierverdier/dispatch\" rel=\"nofollow noreferrer\">independent signal project</a> for Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24331,
                        "reputation": 2484,
                        "user_id": 61815,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/62ace1119724d86de51973b74a088620?s=256&d=identicon&r=PG",
                        "display_name": "paprika",
                        "link": "https://stackoverflow.com/users/61815/paprika"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1234877297,
                    "creation_date": 1234877297,
                    "answer_id": 556782,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The fact alone that PyPubSub seems to be a somewhat chaotically managed project (the Wiki on SF is dead, the website (another Wiki) which is linked on SF is currently broken) would be enough reason for me not to use it.\nPyDispatcher has an intact website, but the only documentation they seem to provide is the one for the API generated from the docstrings.  No traffic on the mailing list either... a bad sign!</p>\n\n<p>As Mike also mentioned, it's perfectly possible to choose a solution that is independent of Python.  Now don't get me wrong, I <em>love</em> Python, but still, in this field it can make sense use a framework that is decoupled from the programming language.</p>\n\n<p>I'm not experienced with messaging, but I'm planning to have a look into a few solutions.  So far these two (free, open source) projects seem to be the most promising for me (coincidentally, both are Apache projects):</p>\n\n<ul>\n<li><a href=\"http://activemq.apache.org/\" rel=\"nofollow noreferrer\">ActiveMQ</a></li>\n<li><a href=\"http://qpid.apache.org/\" rel=\"nofollow noreferrer\">Qpid</a></li>\n</ul>\n\n<p>Both seem to be reasonably matured projects, at least a far as documentation and community.  I can't comment on the software's quality though, as I said, I didn't use any of the software.</p>\n\n<p>Qpid ships with client libraries for Python, but you could also use <a href=\"http://barryp.org/software/py-amqplib/\" rel=\"nofollow noreferrer\">py-amqplib</a>.  For ActiveMQ there's <a href=\"http://code.google.com/p/pyactivemq/\" rel=\"nofollow noreferrer\">pyactivemq</a>, which you can use to connect either via STOMP (Streaming Text Orientated Messaging Protocol) or via Openwire.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8054,
                        "reputation": 1407,
                        "user_id": 14262,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a39df87c7995cf81392c317aeb394d9f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "edomaur",
                        "link": "https://stackoverflow.com/users/14262/edomaur"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1222264587,
                    "last_edit_date": 1222264587,
                    "creation_date": 1222116723,
                    "answer_id": 117563,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There is also the libraries by PJ Eby, RuleDispatch and the PEAK project, specially Trellis. I don't know what their status actually but the mailing list is quite active.</p>\n\n<p><a href=\"http://pypi.python.org/pypi/Trellis/0.7a2\" rel=\"nofollow noreferrer\">Last version of Trellis on PyPi</a></p>\n\n<p><a href=\"http://peak.telecommunity.com/DevCenter/Trellis\" rel=\"nofollow noreferrer\">Trellis doc</a></p>\n\n<p>I have also used the components from the <a href=\"http://edit.kamaelia.org/Home\" rel=\"nofollow noreferrer\">Kamaelia project</a> of the BBC. Axon is an interesting approach, but more component than publisher-consumer inspired. Well, its website is somewhat not up-to-date at all... There was a project or 2 in the Google SoC 2008 and work is being done.</p>\n\n<p>Don't know if it help :)</p>\n\n<p>Edit : I just found <a href=\"http://home.gna.org/py-notify/tutorial.html\" rel=\"nofollow noreferrer\">Py-notify</a> which is an \"unorthodox\" implementation of the Observer pattern. It has most of the functionalities that I need for my own tools.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10225,
                        "reputation": 3783,
                        "user_id": 19215,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/9a01dc20e4453b943b0bf6dee42e288f?s=256&d=identicon&r=PG",
                        "display_name": "Mike",
                        "link": "https://stackoverflow.com/users/19215/mike"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1222111171,
                    "creation_date": 1222111171,
                    "answer_id": 116902,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I recently looked carefully at <a href=\"http://barryp.org/software/py-amqplib/\" rel=\"nofollow noreferrer\">py-amqplib</a> to act as an AMQP client to a RabbitMQ broker.  The latter tool is written in Erlang.</p>\n\n<p>If you're looking to decouple your app. then why couple it to the language itself?  Consider using message queues which are language neutral and then you've really got room to grow!</p>\n\n<p>That being said, AMQP takes effort to understand and may be more than you are willing to take on if your app. is working just fine as is.  YMMV.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5946,
                        "reputation": 3487,
                        "user_id": 9812,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/579dcc3ee380e62ad731d3d3a03be266?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "zuber",
                        "link": "https://stackoverflow.com/users/9812/zuber"
                    },
                    "is_accepted": true,
                    "score": 16,
                    "last_activity_date": 1222109083,
                    "creation_date": 1222109083,
                    "answer_id": 116703,
                    "question_id": 115844,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://pydispatcher.sourceforge.net/\" rel=\"noreferrer\">PyDispatcher</a> is used heavily in <a href=\"http://pydispatcher.sourceforge.net/\" rel=\"noreferrer\">Django</a> and it's working perfectly for me (and for whole Django community, I guess). </p>\n\n<p>As I remember, there are some performance issues:</p>\n\n<ul>\n<li>Arguments checking made by PyDispatcher is slow.</li>\n<li>Unused connections have unnecessary overhead.</li>\n</ul>\n\n<p>AFAIK it's very unlikely you will run into this issues in a small-to-medium sized application. So these issues may not concern you. If you think you need every pound of performance (premature optimization is the root of all evil!), you can look at modifications done to PyDispatcher in Django.</p>\n\n<p>Hope this helps.</p>\n"
                }
            ]
        },
        {
            "13960326": [
                {
                    "owner": {
                        "account_id": 992379,
                        "reputation": 37209,
                        "user_id": 1009277,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2197c80cce67acdcf683d6ac232bfec8?s=256&d=identicon&r=PG",
                        "display_name": "RocketDonkey",
                        "link": "https://stackoverflow.com/users/1009277/rocketdonkey"
                    },
                    "is_accepted": true,
                    "score": 167,
                    "last_activity_date": 1653985375,
                    "last_edit_date": 1653985375,
                    "creation_date": 1355948381,
                    "answer_id": 13960516,
                    "question_id": 13960326,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Assuming you are on the page you want to parse, Selenium stores the source HTML in the driver's <code>page_source</code> attribute. You would then load the <code>page_source</code> into <code>BeautifulSoup</code> as follows:</p>\n<pre><code>from bs4 import BeautifulSoup\n\nfrom selenium import webdriver\n\ndriver = webdriver.Firefox()\n\ndriver.get('http://news.ycombinator.com')\n\nhtml = driver.page_source\n\nsoup = BeautifulSoup(html)\n\nfor tag in soup.find_all('title'):\n    print(tag.text)\n    \nHacker News\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1236018,
                        "reputation": 80146,
                        "user_id": 1199589,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/d3c6a7f974f5d687a394415a2122c6b6?s=256&d=identicon&r=PG",
                        "display_name": "root",
                        "link": "https://stackoverflow.com/users/1199589/root"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1355949376,
                    "last_edit_date": 1355949376,
                    "creation_date": 1355948308,
                    "answer_id": 13960502,
                    "question_id": 13960326,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As your question isn't particularly concrete, here's a simple example. To do something more useful read the BS <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"noreferrer\">docs</a>. You will also find plenty of examples of selenium (and BS )usage here in SO.</p>\n\n<pre><code>from selenium import webdriver\nfrom bs4 import BeautifulSoup\n\nbrowser=webdriver.Firefox()\nbrowser.get('http://webpage.com')\n\nsoup=BeautifulSoup(browser.page_source)\n\n#do something useful\n#prints all the links with corresponding text\n\nfor link in soup.find_all('a'):\n    print link.get('href',None),link.get_text()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1644513,
                        "reputation": 34951,
                        "user_id": 1516286,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/36f74e0d3318a630af9ce0e356182040?s=256&d=identicon&r=PG",
                        "display_name": "Vor",
                        "link": "https://stackoverflow.com/users/1516286/vor"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1355948044,
                    "creation_date": 1355948044,
                    "answer_id": 13960444,
                    "question_id": 13960326,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Are you sure you want to use Selenium? For this reasons I used <a href=\"http://www.riverbankcomputing.com/software/pyqt/download\" rel=\"nofollow\">PyQt4</a>, it's very powerful, and you can do what ever you want.</p>\n\n<p>I can give you a sample code, that I just wrote, just change url and you good to go:</p>\n\n<pre><code>#! /usr/bin/env python2.7\n\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtWebKit import *\nfrom bs4 import BeautifulSoup\nimport sys, signal\n\nclass Browser(QWebView):\n    def __init__(self):\n        QWebView.__init__(self)\n        self.loadProgress.connect(self._progress)\n        self.loadFinished.connect(self._loadFinished)\n        self.frame = self.page().currentFrame()\n\n    def _progress(self, progress):\n        print str(progress) + \"%\"\n\n    def _loadFinished(self):\n        print \"Load Finished\"\n        html = unicode(self.frame.toHtml()).encode('utf-8')\n        soup = BeautifulSoup(html)\n        print soup.prettify()\n        self.close()\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    br = Browser()\n    url = QUrl('http://web site that can contain javascript.com')\n    br.load(url)\n    br.show()\n    if signal.signal(signal.SIGINT, signal.SIG_DFL):\n        sys.exit(app.exec_())\n    app.exec_()\n</code></pre>\n"
                }
            ]
        },
        {
            "29353096": [
                {
                    "owner": {
                        "account_id": 12702003,
                        "reputation": 1525,
                        "user_id": 9228437,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/O1G48.png?s=256",
                        "display_name": "Ryan",
                        "link": "https://stackoverflow.com/users/9228437/ryan"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1656031589,
                    "last_edit_date": 1656031589,
                    "creation_date": 1655860773,
                    "answer_id": 72708687,
                    "question_id": 29353096,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want the sequence to be <strong>sorted</strong> based on the values of another column, first sort the dataframe and then add the new sequence column.</p>\n<p>For instance, if we want the sequence for patients visits sorted based on their visit date, the following code can be used.</p>\n<pre><code>df['sequence'] = df.sort_values(by=['patient', 'date']).groupby('patient']).cumcount() + 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6899373,
                        "reputation": 115,
                        "user_id": 5299471,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f48135cba9268d8deeba24536f8306aa?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ali.E",
                        "link": "https://stackoverflow.com/users/5299471/ali-e"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1592415994,
                    "creation_date": 1592415994,
                    "answer_id": 62435255,
                    "question_id": 29353096,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This will start orderings starting at 1 instead of 0.</p>\n\n<pre><code>df['sequence']=df.groupby('patient').cumcount()+1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 515061,
                        "reputation": 374369,
                        "user_id": 1240268,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/RN9Mw.jpg?s=256",
                        "display_name": "Andy Hayden",
                        "link": "https://stackoverflow.com/users/1240268/andy-hayden"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1427950531,
                    "creation_date": 1427950531,
                    "answer_id": 29405217,
                    "question_id": 29353096,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Firstly you want to convert the date column to be a pandas datetime (rather than strings):</p>\n\n<pre><code>In [11]: pd.to_datetime(df['date'], format='%d%b%Y')\nOut[11]:\n0   2009-06-20\n1   2009-06-24\n2   2009-07-15\n3   2008-02-09\n4   2008-02-21\n5   2010-03-14\n6   2010-05-02\n7   2010-05-12\nName: date, dtype: datetime64[ns]\n</code></pre>\n\n<p><em>Note: see <a href=\"https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" rel=\"nofollow\">docs</a> for possible format options.</em></p>\n\n<pre><code>In [12]: df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')\n\nIn [13]: df\nOut[13]:\n   patient       date  sequence\n0      145 2009-06-20         1\n1      145 2009-06-24         2\n2      145 2009-07-15         3\n3      582 2008-02-09         1\n4      582 2008-02-21         2\n5      987 2010-03-14         1\n6      987 2010-05-02         2\n7      987 2010-05-12         3\n</code></pre>\n\n<p>If this isn't in date order (for each patient), I would sort it first:</p>\n\n<pre><code>In [14]: df = df.sort('date')\n</code></pre>\n\n<p>Now you can groupby and cumcount:</p>\n\n<pre><code>In [15]: g = df.groupby('patient')\n\nIn [16]: g.cumcount() + 1\nOut[16]:\n2    1\n3    2\n0    1\n1    2\n4    1\n5    2\n6    3\ndtype: int64\n</code></pre>\n\n<p>Which is what you want (althout it's out of order):</p>\n\n<pre><code>In [17]: df['sequence'] = g.cumcount() + 1\n\nIn [18]: df\nOut[18]:\n       patient       date  sequence\n2      582 2008-02-09         1\n3      582 2008-02-21         2\n0      145 2009-06-24         1\n1      145 2009-07-15         2\n4      987 2010-03-14         1\n5      987 2010-05-02         2\n6      987 2010-05-12         3\n</code></pre>\n\n<p>To rearrange (though you may not need to) use <code>sort_index</code> (or we could reindex if we saved the initial DataFrame's index):*</p>\n\n<pre><code>In [19]: df.sort_index()\nOut[19]:\n   patient       date  sequence\n0      145 2009-06-24         1\n1      145 2009-07-15         2\n2      582 2008-02-09         1\n3      582 2008-02-21         2\n4      987 2010-03-14         1\n5      987 2010-05-02         2\n6      987 2010-05-12         3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6024820,
                        "reputation": 1177,
                        "user_id": 4730859,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f8b6def189d11509e9a87f62f800e16b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "DKA",
                        "link": "https://stackoverflow.com/users/4730859/dka"
                    },
                    "is_accepted": false,
                    "score": 71,
                    "last_activity_date": 1427740702,
                    "creation_date": 1427740702,
                    "answer_id": 29353694,
                    "question_id": 29353096,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I stumbled upon the answer which was embarrassingly simple. The groupby statement has a 'cumcount()' option which will enumerate group items.</p>\n\n<pre><code>df['sequence']=df.groupby('patient').cumcount()\n</code></pre>\n\n<p>The caveat is that the records have to be in the order you want them enumerated. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1130743,
                        "reputation": 5854,
                        "user_id": 1116874,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/225745f709ee9d202b396a9de7efeda4?s=256&d=identicon&r=PG",
                        "display_name": "Jonathan",
                        "link": "https://stackoverflow.com/users/1116874/jonathan"
                    },
                    "is_accepted": true,
                    "score": 1,
                    "last_activity_date": 1427739950,
                    "creation_date": 1427739950,
                    "answer_id": 29353487,
                    "question_id": 29353096,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The question is how do I sort on multiple columns of data.</p>\n\n<p>One simple trick is to use the <code>key</code> parameter to the <a href=\"https://docs.python.org/2/library/functions.html#sorted\" rel=\"nofollow\">sorted</a> function.</p>\n\n<p>You'll be sorting by a string built from the columns of the array. </p>\n\n<pre><code>rows = ...# your source data\n\ndef date_to_sortable_string(date):\n  # use datetime package to convert string to sortable date.\n  pass\n\n# Assume x[0] === patient_id and x[1] === encounter date\n\n# Sort by patient_id and date\nrows_sorted = sorted(rows, key=lambda x: \"%0.5d-%s\" % (x[0], date_to_sortable_string(x[1])))\n\nfor row in rows_sorted:\n  print row\n</code></pre>\n"
                }
            ]
        },
        {
            "59376777": [
                {
                    "owner": {
                        "account_id": 1841815,
                        "reputation": 20783,
                        "user_id": 1671066,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/bd4c9461f2d17a884fba66eeed20e320?s=256&d=identicon&r=PG",
                        "display_name": "Micha Wiedenmann",
                        "link": "https://stackoverflow.com/users/1671066/micha-wiedenmann"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1576828378,
                    "last_edit_date": 1576828378,
                    "creation_date": 1576665323,
                    "answer_id": 59390140,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Most of the already posted answers use loops. Have you considered a <a href=\"https://repl.it/repls/NearPalegreenMegabyte\" rel=\"nofollow noreferrer\">recursive solution</a> instead:</p>\n\n<pre><code>def merge(ranges):\n  \"\"\"Given a sorted list of range tuples `(a, b)` merge overlapping ranges.\"\"\"\n\n  if not(ranges):\n     return [];\n\n  if len(ranges) == 1:\n    return ranges;\n\n  a, b = ranges[0];\n  c, d = ranges[1];\n\n  # eg.: [(1, 10), (20, 30), rest]\n  if b &lt; c:\n    return [(a,b)] + merge(ranges[1:]);\n\n  # examples: [(1, 5), (2, 3), rest],\n  #           [(1, 5), (2, 10), rest]\n  return merge([(a, max(b, d))] + ranges[2:]);\n</code></pre>\n\n<h1>Example</h1>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; merge([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)])\n[(1, 70), (75, 92)]\n&gt;&gt;&gt; merge([(1,10), (2,3), (2,3), (8,12)])\n[(1, 12)]\n&gt;&gt;&gt; merge (sorted([(2,5),(1,3)], key = lambda x: x[0]))\n[(1, 5)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10026806,
                        "reputation": 15483,
                        "user_id": 7414759,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f513744bcf85408f23ab2ca8a634611f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "stovfl",
                        "link": "https://stackoverflow.com/users/7414759/stovfl"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1576675234,
                    "last_edit_date": 1576675234,
                    "creation_date": 1576598661,
                    "answer_id": 59377973,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Question: Finding longest overlapping range in ranges</p>\n\n<pre><code>ranges1 = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\nranges2 = [(1, 50), (40,45), (49, 70)]\n\n\ndef get_overlapping(ranges):\n    result = []\n    start = 0\n    end = ranges[0][1]\n\n    for i, node in enumerate(ranges[1:], 1):\n        if end &gt; node[0]:\n            if end &lt; node[1]:\n                end = node[1]\n            continue\n\n        result.append((start, i - 1))\n        end = node[1]\n        start = i\n\n    else:\n        result.append((start, i))\n    return result\n</code></pre>\n\n<p>Usage:  </p>\n\n<pre><code>for _range in [ranges1, ranges2]:\n    result = get_overlapping(_range)\n    for o in result:\n        start, end = _range[o[0]], _range[o[1]]\n        print(start[0], end[1])\n    print()\n</code></pre>\n\n<p>Output:  </p>\n\n<pre><code>1 70\n75 92\n\n1 70\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12632559,
                        "reputation": 13808,
                        "user_id": 9183344,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/U7r5r.png?s=256",
                        "display_name": "r.ook",
                        "link": "https://stackoverflow.com/users/9183344/r-ook"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1576615186,
                    "creation_date": 1576615186,
                    "answer_id": 59381764,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's a simple iterative function:</p>\n\n<pre><code>def merge_range(rng):\n    starts, ends = [], []   \n    for i, (x, y) in enumerate(rng):\n        if i &gt; 0:\n            if x&lt;= ends[-1]:\n                ends[-1] = y\n                continue\n        starts.append(x)\n        ends.append(y)\n    return list(zip(starts, ends))\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>merge_range([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)])\n# [(1, 70), (75, 92)]\n\nmerge_range([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92), (99, 102), (105, 111), (150, 155), (152, 160), (154, 180)])\n# [(1, 70), (75, 92), (99, 102), (105, 111), (150, 180)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9324858,
                        "reputation": 1360,
                        "user_id": 6922497,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9b75f8ae9485a981d9c4a7d57e77f864?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ParkerD",
                        "link": "https://stackoverflow.com/users/6922497/parkerd"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1576603686,
                    "last_edit_date": 1576603686,
                    "creation_date": 1576601653,
                    "answer_id": 59378771,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Could be done using <code>functools.reduce</code>:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from functools import reduce\n\nranges = [(1, 50), (45, 47), (49, 70), (75, 85), (84, 88), (87, 92)]\n\nreducer = (\n    lambda acc, el: acc[:-1:] + [(min(*acc[-1], *el), max(*acc[-1], *el))]\n    if acc[-1][1] &gt; el[0]\n    else acc + [el]\n)\nprint(reduce(reducer, ranges[1::], [ranges[0]]))\n</code></pre>\n\n<p>Gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[(1, 70), (75, 92)]\n</code></pre>\n\n<p>Hard to put into words, but it uses <code>reduce</code> to go through the ranges. If the last tuple in the range and the next provided overlap (<code>if acc[-1][1] &gt; el[0]</code>), it creates a new range from the <code>(min, max)</code> of both and then replaces this new combined range to what was behind it (<code>acc[:-1:] + [(min, max)]</code>), otherwise simply adding the new range to the end (<code>acc + [el]</code>).</p>\n\n<p>Edit: After reviewing other answers, updated to take min/max of the two ranges compared instead of just first and last</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9110318,
                        "reputation": 60764,
                        "user_id": 6779307,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/p7O3q.jpg?s=256",
                        "display_name": "Patrick Haugh",
                        "link": "https://stackoverflow.com/users/6779307/patrick-haugh"
                    },
                    "is_accepted": true,
                    "score": 13,
                    "last_activity_date": 1576602812,
                    "last_edit_date": 1576602812,
                    "creation_date": 1576600047,
                    "answer_id": 59378344,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think you can sort your input by the start of the ranges, then iterate through them.  At each item, it is either added to the current range (if the start is less than the end of the current range) or we yield out current range and begin accumulating a new range:</p>\n\n<pre><code>def overlaps(ranges):\n    ranges = sorted(ranges)  # If our inputs are garunteed sorted, we can skip this\n    it = iter(ranges)\n    try:\n        curr_start, curr_stop = next(it)\n        # overlaps = False  # If we want to exclude output ranges not produced by overlapping input ranges\n    except StopIteration:\n        return\n    for start, stop in it:\n        if curr_start &lt;= start &lt;= curr_stop:  # Assumes intervals are closed\n            curr_stop = max(curr_stop, stop)\n            # overlaps = True\n        else:\n            # if overlaps:\n            yield curr_start, curr_stop\n            curr_start, curr_stop = start, stop\n            # overlaps = False\n    # if overlaps:\n    yield curr_start, curr_stop\n\nprint(list(overlaps([(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)])))\n# [(1, 70), (75, 92)]\n\nprint(list(overlaps([(20, 30), (5, 10), (1, 7), (12, 21)])))\n# [(1, 10), (12, 30)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4778217,
                        "reputation": 2254,
                        "user_id": 4614641,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/e36b363bc9ac5120e0fa35303502208f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "PlasmaBinturong",
                        "link": "https://stackoverflow.com/users/4614641/plasmabinturong"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1576600367,
                    "creation_date": 1576600367,
                    "answer_id": 59378428,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I suggest you iterate your ranges only once, but keep in memory the current range being expanded, like so:</p>\n\n<pre><code>def overlaps(r1, r2):\n    assert r1[0] &lt;= r2[0], \"Assume ranges sorted by first coordinate\"\n    return (r2[0] &lt;= r1[1] &lt;= r2[1]) or (r1[0] &lt;= r2[0] &lt;= r1[1])\n\nranges = [(1, 50), (45, 47), (49, 70), (75, 85), (84, 88), (87, 92)]\n\n\ndef fuse_ranges(ranges):\n    output_ranges = []\n    curr_r = list(ranges[0])\n    curr_overlap = False  # Is the current range already overlapping?\n\n    # Assuming it is sorted by starting coordinate.\n    for r in ranges[1:]:\n        if overlaps(curr_r, r):\n            curr_overlap = True\n            curr_r[1] = max(curr_r[1], r[1])  # Extend the end of the current range.\n        else:\n            if curr_overlap:\n                output_ranges.append(curr_r)\n                curr_overlap = False\n            curr_r = list(r)\n    if curr_overlap:\n        output_ranges.append(curr_r)\n\n    return output_ranges\n\n\nif __name__ == '__main__':\n    print(fuse_ranges(sorted(ranges, key=lambda r: r[0])))\n</code></pre>\n\n<p>Which outputs:</p>\n\n<pre><code>[[1, 70], [75, 92]]\n</code></pre>\n\n<p>Not sure my solution can be much less verbose than yours though...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12816060,
                        "reputation": 919,
                        "user_id": 9272658,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4f2f1d285c6fab66a7fd362f3cc51a9f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dbouz",
                        "link": "https://stackoverflow.com/users/9272658/dbouz"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1576598386,
                    "last_edit_date": 1576598386,
                    "creation_date": 1576595474,
                    "answer_id": 59377092,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the <code>Counter</code> container from the <code>collections</code> package and then perform set operations on the combinations of <code>Counter</code> objects you get using <code>itertools</code>.</p>\n\n<p>Something along the lines of: </p>\n\n<pre><code>ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\nimport collections, itertools\nimport numpy as np\n\nout = []\nfor range in ranges:\n    data = np.arange(range[0], range[1]+1)\n    out.append(collections.Counter(data))\n\nfor x,y in list(itertools.combinations(out, 2)): # combinations of two\n    if x &amp; y: # if they overlap\n        print(x | y) # get their union\n</code></pre>\n\n<p>will get you something close to what you want: </p>\n\n<pre><code>Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1})\nCounter({75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1})\nCounter({84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1, 91: 1, 92: 1})\n</code></pre>\n\n<p>If you keep doing this for multiple layers you'll get the supersets you want. You can find more <a href=\"http://stackoverflow.com/questions/5094083/find-the-overlap-between-2-python-lists\">here</a> on how to use <code>Counter</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1252209,
                        "reputation": 11808,
                        "user_id": 1212401,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/ed478436fcb05fd3ae15da650d2a8cd6?s=256&d=identicon&r=PG",
                        "display_name": "Chris Doyle",
                        "link": "https://stackoverflow.com/users/1212401/chris-doyle"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1576598274,
                    "last_edit_date": 1576598274,
                    "creation_date": 1576596271,
                    "answer_id": 59377310,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you can use zip to group all the start values and end values of each range pair. If the start value is lower than the previous end value then there is an overlap so remove that start and end value. we are using an int to track which index in each low and high list we are looking the low index is always one higher than the high index.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>\n#split the numbers in to the low and high part of each range\n#and set the index position for each of them\nranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\nlow, high = [list(nums) for nums in zip(*ranges)] \nl, h = 1, 0\n\n#Iterate over the ranges and remove when there is an overlap if no over lap move the pointers\nwhile l &lt; len(low) and h &lt; len(high):\n    if low[l] &lt; high[h]:\n        del low[l]\n        del high[h]\n    else:\n        l +=1\n        h +=1\n\n#zip the low and high back into ranges\nnew_ranges = list(zip(low, high))\nprint(new_ranges)\n</code></pre>\n\n<p><strong>OUTPUT</strong></p>\n\n<pre><code>[(1, 70), (75, 92)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13970176,
                        "reputation": 14456,
                        "user_id": 12366110,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2f3973f67bacd20d5304f913dcfa5e3b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "CDJB",
                        "link": "https://stackoverflow.com/users/12366110/cdjb"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1576595840,
                    "creation_date": 1576595840,
                    "answer_id": 59377181,
                    "question_id": 59376777,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using a set to eliminate duplicates, and a sorted list to iterate through, the following should work.</p>\n\n<h2>Code:</h2>\n\n<pre><code>ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\n\nall_nums = sorted(list(set(x for r in ranges for x in range(r[0], r[1]))))\n\ni = all_nums[0]\nprint(i, end=' ')\nwhile i &lt; all_nums[-1]:\n    if i not in all_nums:\n        print(i)\n        i = all_nums[all_nums.index(i-1) + 1]\n        print(i, end = ' ')\n    i += 1\nprint(i+1)\n</code></pre>\n\n<h2>Output:</h2>\n\n<pre><code>ranges = [(1, 50), (49, 70), (75, 85), (84, 88), (87, 92)]\n\n1 70\n75 92\n\n\nranges = [(1, 50), (55, 70), (75, 82), (84, 88), (87, 92)]\n\n1 50\n55 70\n75 82\n84 92\n</code></pre>\n"
                }
            ]
        },
        {
            "14992521": [
                {
                    "owner": {
                        "account_id": 2029842,
                        "reputation": 18420,
                        "user_id": 1813858,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dc08b1153d18790260766ac393180588?s=256&d=identicon&r=PG",
                        "display_name": "iTech",
                        "link": "https://stackoverflow.com/users/1813858/itech"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1361418209,
                    "last_edit_date": 1361418209,
                    "creation_date": 1361407119,
                    "answer_id": 14992651,
                    "question_id": 14992521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It seems correct since you are using a <code>uniform</code> random variable with independent draws the probability for each number will be <code>1/n</code>  (n=100).</p>\n\n<p>You can easily verify your algorithm by running it say 1000 time and see the frequency for each letter.</p>\n\n<p>Another algorithm you might consider is to generate an array with your letters given the frequency you want for each letter and only generate a single random number which is the index in the array</p>\n\n<p>It will be less efficient in memory but should perform better</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>To respond to @Joel Cornett comment, an example will be very similar to @jurgenreza but more memory efficient </p>\n\n<pre><code>import random\ndata_list = ['A'] + ['B'] + ['C'] * 18\nrandom.choice(data_list )\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 398682,
                        "reputation": 32409,
                        "user_id": 763505,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/SJO15.png?s=256",
                        "display_name": "Hyperboreus",
                        "link": "https://stackoverflow.com/users/763505/hyperboreus"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1361414131,
                    "creation_date": 1361414131,
                    "answer_id": 14993631,
                    "question_id": 14992521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you want to use weighted random and not percentile random, you can make your own Randomizer class:</p>\n\n<pre><code>import random\n\nclass WeightedRandomizer:\n    def __init__ (self, weights):\n        self.__max = .0\n        self.__weights = []\n        for value, weight in weights.items ():\n            self.__max += weight\n            self.__weights.append ( (self.__max, value) )\n\n    def random (self):\n        r = random.random () * self.__max\n        for ceil, value in self.__weights:\n            if ceil &gt; r: return value\n\nw = {'A': 1.0, 'B': 1.0, 'C': 18.0}\n#or w = {'A': 5, 'B': 5, 'C': 90}\n#or w = {'A': 1.0/18, 'B': 1.0/18, 'C': 1.0}\n#or or or\n\nwr = WeightedRandomizer (w)\n\nresults = {'A': 0, 'B': 0, 'C': 0}\nfor i in range (10000):\n    results [wr.random () ] += 1\n\nprint ('After 10000 rounds the distribution is:')\nprint (results)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2257216,
                        "reputation": 6036,
                        "user_id": 1988148,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/3b50035a019d5634b8cf033c981d1cc2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jurgenreza",
                        "link": "https://stackoverflow.com/users/1988148/jurgenreza"
                    },
                    "is_accepted": true,
                    "score": 64,
                    "last_activity_date": 1361407700,
                    "last_edit_date": 1361407700,
                    "creation_date": 1361407357,
                    "answer_id": 14992686,
                    "question_id": 14992521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Your algorithm is correct, how about something more elegant:</p>\n\n<pre><code>import random\nmy_list = ['A'] * 5 + ['B'] * 5 + ['C'] * 90\nrandom.choice(my_list)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 60903,
                        "reputation": 46812,
                        "user_id": 181772,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/1fa52405ebda49d8a7ec669b56bbf77e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "andrew cooke",
                        "link": "https://stackoverflow.com/users/181772/andrew-cooke"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1361407091,
                    "creation_date": 1361407091,
                    "answer_id": 14992648,
                    "question_id": 14992521,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>that's fine.  more generally, you can define something like:</p>\n\n<pre><code>from collections import Counter\nfrom random import randint\n\ndef weighted_random(pairs):\n    total = sum(pair[0] for pair in pairs)\n    r = randint(1, total)\n    for (weight, value) in pairs:\n        r -= weight\n        if r &lt;= 0: return value\n\nresults = Counter(weighted_random([(1,'a'),(1,'b'),(18,'c')])\n                  for _ in range(20000))\nprint(results)\n</code></pre>\n\n<p>which gives</p>\n\n<pre><code>Counter({'c': 17954, 'b': 1039, 'a': 1007})\n</code></pre>\n\n<p>which is as close to 18:1:1 as you can expect.</p>\n"
                }
            ]
        },
        {
            "3941517": [
                {
                    "owner": {
                        "account_id": 4815,
                        "reputation": 384585,
                        "user_id": 7432,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/eYejG.png?s=256",
                        "display_name": "Bryan Oakley",
                        "link": "https://stackoverflow.com/users/7432/bryan-oakley"
                    },
                    "is_accepted": true,
                    "score": 286,
                    "last_activity_date": 1523021619,
                    "last_edit_date": 1523021619,
                    "creation_date": 1287139849,
                    "answer_id": 3941529,
                    "question_id": 3941517,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use the <code>*</code> operator before an iterable to expand it within the function call. For example:</p>\n\n<pre><code>timeseries_list = [timeseries1 timeseries2 ...]\nr = scikits.timeseries.lib.reportlib.Report(*timeseries_list)\n</code></pre>\n\n<p>(notice the <code>*</code> before <code>timeseries_list</code>)</p>\n\n<p>From the <a href=\"https://docs.python.org/2/reference/expressions.html#calls\" rel=\"noreferrer\">python documentation</a>:</p>\n\n<blockquote>\n  <p>If the syntax *expression appears in the function call, expression\n  must evaluate to an iterable. Elements from this iterable are treated\n  as if they were additional positional arguments; if there are\n  positional arguments x1, ..., xN, and expression evaluates to a\n  sequence y1, ..., yM, this is equivalent to a call with M+N positional\n  arguments x1, ..., xN, y1, ..., yM.</p>\n</blockquote>\n\n<p>This is also covered in the python tutorial, in a section titled <a href=\"https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"noreferrer\">Unpacking argument lists</a>, where it also shows how to do a similar thing with dictionaries for keyword arguments with the <code>**</code> operator. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 212375,
                        "reputation": 5332,
                        "user_id": 465159,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://i.sstatic.net/4p1sN.jpg?s=256",
                        "display_name": "Ant",
                        "link": "https://stackoverflow.com/users/465159/ant"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1454859891,
                    "last_edit_date": 1454859891,
                    "creation_date": 1287142056,
                    "answer_id": 3941775,
                    "question_id": 3941517,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>yes, using *arg passing args to a function will make python unpack the values in arg and pass it to the function.</p>\n\n<p>so:</p>\n\n<pre><code>&gt;&gt;&gt; def printer(*args):\n print args\n\n\n&gt;&gt;&gt; printer(2,3,4)\n(2, 3, 4)\n&gt;&gt;&gt; printer(*range(2, 5))\n(2, 3, 4)\n&gt;&gt;&gt; printer(range(2, 5))\n([2, 3, 4],)\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 65549,
                        "reputation": 23944,
                        "user_id": 192812,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2052394c0f78e9710c54ab413d593510?s=256&d=identicon&r=PG",
                        "display_name": "intuited",
                        "link": "https://stackoverflow.com/users/192812/intuited"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1287139938,
                    "creation_date": 1287139938,
                    "answer_id": 3941541,
                    "question_id": 3941517,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><code>*args</code> just means that the function takes a number of arguments, generally of the same type.</p>\n\n<p>Check out <a href=\"http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"nofollow\">this section</a> in the Python tutorial for more info.</p>\n"
                }
            ]
        },
        {
            "1171": [
                {
                    "owner": {
                        "account_id": 1594620,
                        "reputation": 418,
                        "user_id": 2639344,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/B0FC0.jpg?s=256",
                        "display_name": "Pranav Waila",
                        "link": "https://stackoverflow.com/users/2639344/pranav-waila"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1453108083,
                    "creation_date": 1453108083,
                    "answer_id": 34850877,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No doubt NetworkX is the best data structure till now for graph. It comes with utilities like Helper Functions, Data Structures and Algorithms, Random Sequence Generators, Decorators, Cuthill-Mckee Ordering, Context Managers</p>\n\n<p>NetworkX is great because it wowrs for graphs, digraphs, and multigraphs. It can write graph with multiple ways: Adjacency List, Multiline Adjacency List,\nEdge List, GEXF, GML. It works with Pickle, GraphML, JSON, SparseGraph6 etc. </p>\n\n<p>It has implimentation of various radimade algorithms including:\nApproximation, Bipartite, Boundary, Centrality, Clique, Clustering,    Coloring, Components, Connectivity, Cycles,  Directed Acyclic Graphs,\nDistance Measures,  Dominating Sets, Eulerian, Isomorphism,  Link Analysis,  Link Prediction, Matching, Minimum Spanning Tree, Rich Club, Shortest Paths, Traversal, Tree.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 478,
                        "reputation": 5053,
                        "user_id": 620,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/576266069e5cf1ebf0e9c6fddfcfcf41?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ryan Cox",
                        "link": "https://stackoverflow.com/users/620/ryan-cox"
                    },
                    "is_accepted": true,
                    "score": 56,
                    "last_activity_date": 1359730579,
                    "last_edit_date": 1359730579,
                    "creation_date": 1219772586,
                    "answer_id": 28705,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I would strongly advocate you look at <a href=\"http://networkx.github.com/\" rel=\"noreferrer\">NetworkX</a>. It's a battle-tested war horse and the first tool most 'research' types reach for when they need to do analysis of network based data. I have manipulated graphs with 100s of thousands of edges without problem on a notebook. Its feature rich and very easy to use. You will find yourself focusing more on the problem at hand rather than the details in the underlying implementation.</p>\n\n<p><strong>Example of <a href=\"http://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model\" rel=\"noreferrer\">Erd\u0151s-R\u00e9nyi</a> random graph generation and analysis</strong></p>\n\n<pre><code>\n\"\"\"\nCreate an G{n,m} random graph with n nodes and m edges\nand report some properties.\n\nThis graph is sometimes called the Erd##[m~Qs-R\u00e9nyi graph\nbut is different from G{n,p} or binomial_graph which is also\nsometimes called the Erd##[m~Qs-R\u00e9nyi graph.\n\"\"\"\n__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg \n#    Dan Schult \n#    Pieter Swart \n#    Distributed under the terms of the GNU Lesser General Public License\n#    http://www.gnu.org/copyleft/lesser.html\n\nfrom networkx import *\nimport sys\n\nn=10 # 10 nodes\nm=20 # 20 edges\n\nG=gnm_random_graph(n,m)\n\n# some properties\nprint \"node degree clustering\"\nfor v in nodes(G):\n    print v,degree(G,v),clustering(G,v)\n\n# print the adjacency list to terminal \nwrite_adjlist(G,sys.stdout)\n</code></pre>\n\n<p>Visualizations are also straightforward:</p>\n\n<p><img src=\"https://i.sstatic.net/5biM9.jpg\" alt=\"enter image description here\"></p>\n\n<p>More visualization: <a href=\"http://jonschull.blogspot.com/2008/08/graph-visualization.html\" rel=\"noreferrer\">http://jonschull.blogspot.com/2008/08/graph-visualization.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 60601,
                        "reputation": 5251,
                        "user_id": 180962,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fa21ab3e7b0fdcc3058400a35aef75b?s=256&d=identicon&r=PG",
                        "display_name": "Tiago Peixoto",
                        "link": "https://stackoverflow.com/users/180962/tiago-peixoto"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1334048351,
                    "last_edit_date": 1334048351,
                    "creation_date": 1290867033,
                    "answer_id": 4292022,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Even though this question is now quite old, I think it is worthwhile to mention my own python module for graph manipulation called <a href=\"http://graph-tool.skewed.de\" rel=\"noreferrer\">graph-tool</a>. It is very efficient, since the data structures and algorithms are implemented in C++, with template metaprograming, using the Boost Graph Library. Therefore its performance (both in memory usage and runtime) is comparable to a pure C++ library, and can be orders of magnitude better than typical python code, without sacrificing ease of use. I use it myself constantly to work with very large graphs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2149,
                        "reputation": 5320,
                        "user_id": 2963,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/4f11472f89c6145387f2d7a2dd7262e7?s=256&d=identicon&r=PG",
                        "display_name": "Kai",
                        "link": "https://stackoverflow.com/users/2963/kai"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1219831281,
                    "creation_date": 1219831281,
                    "answer_id": 29836,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>As already mentioned, NetworkX is very good, with another option being <a href=\"http://cneurocvs.rmki.kfki.hu/igraph/\" rel=\"noreferrer\">igraph</a>. Both modules will have most (if not all) the analysis tools you're likely to need, and both libraries are routinely used with large networks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 83,
                        "reputation": 45241,
                        "user_id": 101,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/cfd2734f1de31db479ec2a8a4ecbd649?s=256&d=identicon&r=PG",
                        "display_name": "Peter Burns",
                        "link": "https://stackoverflow.com/users/101/peter-burns"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1218001053,
                    "creation_date": 1218001053,
                    "answer_id": 3107,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>As I understand it, random access is in constant time for both Python's dicts and lists, the difference is that you can only do random access of integer indexes with lists.  I'm assuming that you need to lookup a node by its label, so you want a dict of dicts.</p>\n\n<p>However, on the performance front, loading it into memory may not be a problem, but if you use too much you'll end up swapping to disk, which will kill the performance of even Python's highly efficient dicts.  Try to keep memory usage down as much as possible.  Also, RAM is amazingly cheap right now; if you do this kind of thing a lot, there's no reason not to have at least 4GB.</p>\n\n<p>If you'd like advice on keeping memory usage down, give some more information about the kind of information you're tracking for each node.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 151,
                        "reputation": 35559,
                        "user_id": 188,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=256&d=identicon&r=PG",
                        "display_name": "Matthew Schinckel",
                        "link": "https://stackoverflow.com/users/188/matthew-schinckel"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1217853675,
                    "creation_date": 1217853675,
                    "answer_id": 1191,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Making a class-based structure would probably have more overhead than the dict-based structure, since in python classes actually use dicts when they are implemented.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 213,
                        "reputation": 390586,
                        "user_id": 267,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/1b11262da6d1cd26b1b0bc99a2620cee?s=256&d=identicon&r=PG",
                        "display_name": "Lasse V. Karlsen",
                        "link": "https://stackoverflow.com/users/267/lasse-v-karlsen"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1217851795,
                    "creation_date": 1217851795,
                    "answer_id": 1174,
                    "question_id": 1171,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A dictionary may also contain overhead, depending on the actual implementation. A hashtable usually contain some prime number of available nodes to begin with, even though you might only use a couple of the nodes.</p>\n\n<p>Judging by your example, \"Property\", would you be better of with a class approach for the final level and real properties? Or is the names of the properties changing a lot from node to node?</p>\n\n<p>I'd say that what \"efficient\" means depends on a lot of things, like:</p>\n\n<ul>\n<li>speed of updates (insert, update, delete)</li>\n<li>speed of random access retrieval</li>\n<li>speed of sequential retrieval</li>\n<li>memory used</li>\n</ul>\n\n<p>I think that you'll find that a data structure that is speedy will generally consume more memory than one that is slow. This isn't always the case, but most data structures seems to follow this.</p>\n\n<p>A dictionary might be easy to use, and give you relatively uniformly fast access, it will most likely use more memory than, as you suggest, lists. Lists, however, generally tend to contain more overhead when you insert data into it, unless they preallocate X nodes, in which they will again use more memory.</p>\n\n<p>My suggestion, in general, would be to just use the method that seems the most natural to you, and then do a \"stress test\" of the system, adding a substantial amount of data to it and see if it becomes a problem.</p>\n\n<p>You might also consider adding a layer of abstraction to your system, so that you don't have to change the programming interface if you later on need to change the internal data structure.</p>\n"
                }
            ]
        },
        {
            "3204245": [
                {
                    "owner": {
                        "account_id": 79153,
                        "reputation": 522170,
                        "user_id": 224671,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=256&d=identicon&r=PG",
                        "display_name": "kennytm",
                        "link": "https://stackoverflow.com/users/224671/kennytm"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1475575940,
                    "last_edit_date": 1495542358,
                    "creation_date": 1278604556,
                    "answer_id": 3205524,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just use <code>sum</code> if you don't have a lot of tuples.</p>\n\n<pre><code>&gt;&gt;&gt; tupleOfTuples = ((1, 2), (3, 4), (5,))\n&gt;&gt;&gt; sum(tupleOfTuples, ())\n(1, 2, 3, 4, 5)\n&gt;&gt;&gt; list(sum(tupleOfTuples, ())) # if you really need a list\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>If you do have a lot of tuples, use <a href=\"https://stackoverflow.com/a/3204267/224671\">list comprehension</a> or <a href=\"https://stackoverflow.com/a/3204409/224671\"><code>chain.from_iterable</code></a> to prevent the quadratic behavior of <code>sum</code>.</p>\n\n<hr>\n\n<h2>Micro-benchmarks:</h2>\n\n<ul>\n<li><p>Python 2.6</p>\n\n<ul>\n<li><p>Long tuple of short tuples</p>\n\n<pre><code>$ python2.6 -m timeit -s 'tot = ((1, 2), )*500' '[element for tupl in tot for element in tupl]'\n10000 loops, best of 3: 134 usec per loop\n$ python2.6 -m timeit -s 'tot = ((1, 2), )*500' 'list(sum(tot, ()))'\n1000 loops, best of 3: 1.1 msec per loop\n$ python2.6 -m timeit -s 'tot = ((1, 2), )*500; from itertools import chain; ci = chain.from_iterable' 'list(ci(tot))'\n10000 loops, best of 3: 60.1 usec per loop\n$ python2.6 -m timeit -s 'tot = ((1, 2), )*500; from itertools import chain' 'list(chain(*tot))'\n10000 loops, best of 3: 64.8 usec per loop\n</code></pre></li>\n<li><p>Short tuple of long tuples</p>\n\n<pre><code>$ python2.6 -m timeit -s 'tot = ((1, )*500, (2, )*500)' '[element for tupl in tot for element in tupl]'\n10000 loops, best of 3: 65.6 usec per loop\n$ python2.6 -m timeit -s 'tot = ((1, )*500, (2, )*500)' 'list(sum(tot, ()))'\n100000 loops, best of 3: 16.9 usec per loop\n$ python2.6 -m timeit -s 'tot = ((1, )*500, (2, )*500); from itertools import chain; ci = chain.from_iterable' 'list(ci(tot))'\n10000 loops, best of 3: 25.8 usec per loop\n$ python2.6 -m timeit -s 'tot = ((1, )*500, (2, )*500); from itertools import chain' 'list(chain(*tot))'\n10000 loops, best of 3: 26.5 usec per loop\n</code></pre></li>\n</ul></li>\n<li><p>Python 3.1</p>\n\n<ul>\n<li><p>Long tuple of short tuples</p>\n\n<pre><code>$ python3.1 -m timeit -s 'tot = ((1, 2), )*500' '[element for tupl in tot for element in tupl]'\n10000 loops, best of 3: 121 usec per loop\n$ python3.1 -m timeit -s 'tot = ((1, 2), )*500' 'list(sum(tot, ()))'\n1000 loops, best of 3: 1.09 msec per loop\n$ python3.1 -m timeit -s 'tot = ((1, 2), )*500; from itertools import chain; ci = chain.from_iterable' 'list(ci(tot))'\n10000 loops, best of 3: 59.5 usec per loop\n$ python3.1 -m timeit -s 'tot = ((1, 2), )*500; from itertools import chain' 'list(chain(*tot))'\n10000 loops, best of 3: 63.2 usec per loop\n</code></pre></li>\n<li><p>Short tuple of long tuples</p>\n\n<pre><code>$ python3.1 -m timeit -s 'tot = ((1, )*500, (2, )*500)' '[element for tupl in tot for element in tupl]'\n10000 loops, best of 3: 66.1 usec per loop\n$ python3.1 -m timeit -s 'tot = ((1, )*500, (2, )*500)' 'list(sum(tot, ()))'\n100000 loops, best of 3: 16.3 usec per loop\n$ python3.1 -m timeit -s 'tot = ((1, )*500, (2, )*500); from itertools import chain; ci = chain.from_iterable' 'list(ci(tot))'\n10000 loops, best of 3: 25.4 usec per loop\n$ python3.1 -m timeit -s 'tot = ((1, )*500, (2, )*500); from itertools import chain' 'list(chain(*tot))'\n10000 loops, best of 3: 25.6 usec per loop\n</code></pre></li>\n</ul></li>\n</ul>\n\n<p>Observation:</p>\n\n<ul>\n<li><code>sum</code> is faster if the outer tuple is short.</li>\n<li><code>list(chain.from_iterable(x))</code> is faster if the outer tuple is long.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 37811,
                        "reputation": 109507,
                        "user_id": 108205,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/ef459127edc89cc575d80a73cd8c567a?s=256&d=identicon&r=PG",
                        "display_name": "jsbueno",
                        "link": "https://stackoverflow.com/users/108205/jsbueno"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1278604347,
                    "creation_date": 1278604347,
                    "answer_id": 3205486,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For multilevel, and readable code:</p>\n\n<pre><code>def flatten(bla):\n    output = []\n    for item in bla:\n        output += flatten(item) if hasattr (item, \"__iter__\") or hasattr (item, \"__len__\") else [item]\n    return output\n</code></pre>\n\n<p>I could not get this to fit in one line (and remain readable, even by far) </p>\n"
                },
                {
                    "owner": {
                        "account_id": 7405,
                        "reputation": 318727,
                        "user_id": 12855,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=256&d=identicon&r=PG",
                        "display_name": "SilentGhost",
                        "link": "https://stackoverflow.com/users/12855/silentghost"
                    },
                    "is_accepted": true,
                    "score": 77,
                    "last_activity_date": 1278599390,
                    "last_edit_date": 1278599390,
                    "creation_date": 1278597294,
                    "answer_id": 3204267,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>it's typically referred to as flattening a nested structure.</p>\n\n<pre><code>&gt;&gt;&gt; tupleOfTuples = ((1, 2), (3, 4), (5,))\n&gt;&gt;&gt; [element for tupl in tupleOfTuples for element in tupl]\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>Just to demonstrate efficiency:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; it = lambda: list(chain(*tupleOfTuples))\n&gt;&gt;&gt; timeit.timeit(it)\n2.1475738355700913\n&gt;&gt;&gt; lc = lambda: [element for tupl in tupleOfTuples for element in tupl]\n&gt;&gt;&gt; timeit.timeit(lc)\n1.5745135182887857\n</code></pre>\n\n<p><strong>ETA</strong>: Please don't use <code>tuple</code> as a variable name, it shadows built-in.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7426,
                        "reputation": 15669,
                        "user_id": 12895,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/43106f624df23cfc6286b6aa9e1a0d26?s=256&d=identicon&r=PG",
                        "display_name": "Craig Trader",
                        "link": "https://stackoverflow.com/users/12895/craig-trader"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1278598517,
                    "creation_date": 1278598517,
                    "answer_id": 3204496,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Most of these answers will only work for a single level of flattening.  For a more comprehensive solution, try this (from <a href=\"http://rightfootin.blogspot.com/2006/09/more-on-python-flatten.html\" rel=\"noreferrer\">http://rightfootin.blogspot.com/2006/09/more-on-python-flatten.html</a>):</p>\n\n<pre><code>def flatten(l, ltypes=(list, tuple)):\n    ltype = type(l)\n    l = list(l)\n    i = 0\n    while i &lt; len(l):\n        while isinstance(l[i], ltypes):\n            if not l[i]:\n                l.pop(i)\n                i -= 1\n                break\n            else:\n                l[i:i + 1] = l[i]\n        i += 1\n    return ltype(l)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 141090,
                        "reputation": 18543,
                        "user_id": 347857,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://i.sstatic.net/BGA1x.jpg?s=256",
                        "display_name": "Mad Scientist",
                        "link": "https://stackoverflow.com/users/347857/mad-scientist"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1278598048,
                    "creation_date": 1278598048,
                    "answer_id": 3204409,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Another solution using <a href=\"http://docs.python.org/library/itertools.html#itertools.chain\" rel=\"nofollow noreferrer\">itertools.chain</a></p>\n\n<pre><code>&gt;&gt;&gt; tupleOfTuples = ((1, 2), (3, 4), (5,))\n&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; [x for x in chain.from_iterable(tupleOfTuples)]\n[1, 2, 3, 4, 5]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 33994,
                        "reputation": 107390,
                        "user_id": 95612,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
                        "display_name": "Jochen Ritzel",
                        "link": "https://stackoverflow.com/users/95612/jochen-ritzel"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1278598036,
                    "creation_date": 1278598036,
                    "answer_id": 3204404,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You're chaining the tuples together:</p>\n\n<pre><code>from itertools import chain\nprint list(chain(*listOfTuples))\n</code></pre>\n\n<p>Should be pretty readable if you're familiar with <code>itertools</code>, and without the explicit <code>list</code> you even have your result in generator form.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 143722,
                        "reputation": 39833,
                        "user_id": 352268,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/93fc5e3d9451b0d3fdb552423ceb52cd?s=256&d=identicon&r=PG",
                        "display_name": "Donald Miner",
                        "link": "https://stackoverflow.com/users/352268/donald-miner"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1278597518,
                    "creation_date": 1278597518,
                    "answer_id": 3204306,
                    "question_id": 3204245,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I like using 'reduce' in this situation (this is what reduce made for!)</p>\n\n<pre><code>lot = ((1, 2), (3, 4), (5,))\nprint list(reduce(lambda t1, t2: t1 + t2, lot))\n\n &gt; [1,2,3,4,5]\n</code></pre>\n"
                }
            ]
        },
        {
            "12190874": [
                {
                    "owner": {
                        "account_id": 1629567,
                        "reputation": 3289,
                        "user_id": 1504411,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/9e8054a62d1b1702b86125f25d9bbe62?s=256&d=identicon&r=PG",
                        "display_name": "newmathwhodis",
                        "link": "https://stackoverflow.com/users/1504411/newmathwhodis"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1461685959,
                    "last_edit_date": 1461685959,
                    "creation_date": 1447800808,
                    "answer_id": 33768634,
                    "question_id": 12190874,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>New in version 0.16.1:</p>\n\n<pre><code>sample_dataframe = your_dataframe.sample(n=how_many_rows_you_want)\n</code></pre>\n\n<p>doc here: <a href=\"http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.sample.html\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.sample.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4658292,
                        "reputation": 514,
                        "user_id": 3773209,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/IILBv.jpg?s=256",
                        "display_name": "hurrial",
                        "link": "https://stackoverflow.com/users/3773209/hurrial"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1434942826,
                    "creation_date": 1434942826,
                    "answer_id": 30971633,
                    "question_id": 12190874,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Pandas 0.16.1 have a <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sample.html\">sample</a> method for that.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1684506,
                        "reputation": 68816,
                        "user_id": 1548051,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/468f540caebe33dee286d9e09603e462?s=256&d=identicon&r=PG",
                        "display_name": "Wouter Overmeire",
                        "link": "https://stackoverflow.com/users/1548051/wouter-overmeire"
                    },
                    "is_accepted": true,
                    "score": 81,
                    "last_activity_date": 1434694636,
                    "last_edit_date": 1434694636,
                    "creation_date": 1346312178,
                    "answer_id": 12192021,
                    "question_id": 12190874,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>What version of pandas are you using? For me your code works fine (i`m on git master).</p>\n\n<p>Another approach could be:</p>\n\n<pre><code>In [117]: import pandas\n\nIn [118]: import random\n\nIn [119]: df = pandas.DataFrame(np.random.randn(100, 4), columns=list('ABCD'))\n\nIn [120]: rows = random.sample(df.index, 10)\n\nIn [121]: df_10 = df.ix[rows]\n\nIn [122]: df_90 = df.drop(rows)\n</code></pre>\n\n<p>Newer version (from 0.16.1 on) supports this directly: \n<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sample.html\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sample.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4532460,
                        "reputation": 1012,
                        "user_id": 3682523,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/309044d87ce58744e00ab7934717261a?s=256&d=identicon&r=PG",
                        "display_name": "Nikolay",
                        "link": "https://stackoverflow.com/users/3682523/nikolay"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1434438197,
                    "last_edit_date": 1434438197,
                    "creation_date": 1434428651,
                    "answer_id": 30858753,
                    "question_id": 12190874,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you're using pandas.read_csv you can directly sample when loading the data, by using the skiprows parameter. Here is a short article I've written on this - <a href=\"https://nikolaygrozev.wordpress.com/2015/06/16/fast-and-simple-sampling-in-pandas-when-loading-data-from-files/\">https://nikolaygrozev.wordpress.com/2015/06/16/fast-and-simple-sampling-in-pandas-when-loading-data-from-files/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 2913984,
                        "reputation": 881,
                        "user_id": 2497610,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8771cdcc05dbca8f4f99b97ea07feb87?s=256&d=identicon&r=PG",
                        "display_name": "dragoljub",
                        "link": "https://stackoverflow.com/users/2497610/dragoljub"
                    },
                    "is_accepted": false,
                    "score": 79,
                    "last_activity_date": 1371566499,
                    "creation_date": 1371566499,
                    "answer_id": 17171819,
                    "question_id": 12190874,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have found that <code>np.random.choice()</code> new in NumPy 1.7.0 works quite well for this.</p>\n\n<p>For example you can pass the index values from a DataFrame and and the integer 10 to select 10 random uniformly sampled rows.</p>\n\n<pre><code>rows = np.random.choice(df.index.values, 10)\nsampled_df = df.ix[rows]\n</code></pre>\n"
                }
            ]
        },
        {
            "4703390": [
                {
                    "owner": {
                        "account_id": 32277,
                        "reputation": 187494,
                        "user_id": 89391,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=256&d=identicon&r=PG",
                        "display_name": "miku",
                        "link": "https://stackoverflow.com/users/89391/miku"
                    },
                    "is_accepted": true,
                    "score": 325,
                    "last_activity_date": 1670414697,
                    "last_edit_date": 1670414697,
                    "creation_date": 1295144173,
                    "answer_id": 4703409,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If your float is always expressed in decimal notation something like</p>\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(&quot;\\d+\\.\\d+&quot;, &quot;Current Level: 13.4db.&quot;)\n['13.4']\n</code></pre>\n<p>may suffice.</p>\n<p>A more robust version would be:</p>\n<pre><code>&gt;&gt;&gt; re.findall(r&quot;[-+]?(?:\\d*\\.*\\d+)&quot;, &quot;Current Level: -13.2db or 14.2 or 3&quot;)\n['-13.2', '14.2', '3']\n</code></pre>\n<p>If you want to validate user input, you could alternatively also check for a float by stepping to it directly:</p>\n<pre><code>user_input = &quot;Current Level: 1e100 db&quot;\nfor token in user_input.split():\n    try:\n        # if this succeeds, you have your (first) float\n        print(float(token), &quot;is a float&quot;)\n    except ValueError:\n        print(token, &quot;is something else&quot;)\n\n# =&gt; Would print ...\n#\n# Current is something else\n# Level: is something else\n# 1e+100 is a float\n# db is something else\n        \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1064514,
                        "reputation": 121,
                        "user_id": 1065422,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/a44482491e7dc25c67d87b7493f8b9d0?s=256&d=identicon&r=PG",
                        "display_name": "Martin",
                        "link": "https://stackoverflow.com/users/1065422/martin"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1568663110,
                    "last_edit_date": 1568663110,
                    "creation_date": 1322216652,
                    "answer_id": 8267633,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>re.findall(r\"[-+]?\\d*\\.?\\d+|\\d+\", \"Current Level: -13.2 db or 14.2 or 3\")\n</code></pre>\n\n<p>as described above, works really well!\nOne suggestion though:</p>\n\n<pre><code>re.findall(r\"[-+]?\\d*\\.?\\d+|[-+]?\\d+\", \"Current Level: -13.2 db or 14.2 or 3 or -3\")\n</code></pre>\n\n<p>will also return negative int values (like -3 in the end of this string)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3175375,
                        "reputation": 2021,
                        "user_id": 2683399,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/5d628ebceaae2cdd4703979cc4138467?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "IceArdor",
                        "link": "https://stackoverflow.com/users/2683399/iceardor"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1503082986,
                    "last_edit_date": 1503082986,
                    "creation_date": 1376500071,
                    "answer_id": 18237992,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://docs.python.org/3/library/re.html#simulating-scanf\" rel=\"noreferrer\">Python docs</a> has an answer that covers +/-, and exponent notation</p>\n\n<pre><code>scanf() Token      Regular Expression\n%e, %E, %f, %g     [-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?\n%i                 [-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)\n</code></pre>\n\n<p>This regular expression does not support international formats where a comma is used as the separator character between the whole and fractional part (3,14159).\nIn that case, replace all <code>\\.</code> with <code>[.,]</code> in the above float regex.</p>\n\n<pre><code>                        Regular Expression\nInternational float     [-+]?(\\d+([.,]\\d*)?|[.,]\\d+)([eE][-+]?\\d+)?\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 30816,
                        "reputation": 82853,
                        "user_id": 84270,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/da2c0de47c3681c58f25b1eb821f7221?s=256&d=identicon&r=PG",
                        "display_name": "John Machin",
                        "link": "https://stackoverflow.com/users/84270/john-machin"
                    },
                    "is_accepted": false,
                    "score": 90,
                    "last_activity_date": 1498153232,
                    "last_edit_date": 1498153232,
                    "creation_date": 1295145966,
                    "answer_id": 4703508,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may like to try something like this which covers all the bases, including not relying on whitespace after the number:</p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; numeric_const_pattern = r\"\"\"\n...     [-+]? # optional sign\n...     (?:\n...         (?: \\d* \\. \\d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc\n...         |\n...         (?: \\d+ \\.? ) # 1. 12. 123. etc 1 12 123 etc\n...     )\n...     # followed by optional exponent part if desired\n...     (?: [Ee] [+-]? \\d+ ) ?\n...     \"\"\"\n&gt;&gt;&gt; rx = re.compile(numeric_const_pattern, re.VERBOSE)\n&gt;&gt;&gt; rx.findall(\".1 .12 9.1 98.1 1. 12. 1 12\")\n['.1', '.12', '9.1', '98.1', '1.', '12.', '1', '12']\n&gt;&gt;&gt; rx.findall(\"-1 +1 2e9 +2E+09 -2e-9\")\n['-1', '+1', '2e9', '+2E+09', '-2e-9']\n&gt;&gt;&gt; rx.findall(\"current level: -2.03e+99db\")\n['-2.03e+99']\n&gt;&gt;&gt;\n</code></pre>\n\n<p>For easy copy-pasting:</p>\n\n<pre><code>numeric_const_pattern = '[-+]? (?: (?: \\d* \\. \\d+ ) | (?: \\d+ \\.? ) )(?: [Ee] [+-]? \\d+ ) ?'\nrx = re.compile(numeric_const_pattern, re.VERBOSE)\nrx.findall(\"Some example: Jr. it. was .23 between 2.3 and 42.31 seconds\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4438039,
                        "reputation": 121,
                        "user_id": 3613331,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/11ecb612d14e2ec6431b3fd9ffd544d6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3613331",
                        "link": "https://stackoverflow.com/users/3613331/user3613331"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1400686627,
                    "last_edit_date": 1400686627,
                    "creation_date": 1400685240,
                    "answer_id": 23787305,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use the following regex to get integer and floating values from a string:</p>\n\n<pre><code>re.findall(r'[\\d\\.\\d]+', 'hello -34 42 +34.478m 88 cricket -44.3')\n\n['34', '42', '34.478', '88', '44.3']\n</code></pre>\n\n<p>Thanks\nRex</p>\n"
                },
                {
                    "owner": {
                        "account_id": 264856,
                        "reputation": 27525,
                        "user_id": 551449,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/aa73ded506f1dbec1741ff79856d4073?s=256&d=identicon&r=PG",
                        "display_name": "eyquem",
                        "link": "https://stackoverflow.com/users/551449/eyquem"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1322219338,
                    "last_edit_date": 1495541400,
                    "creation_date": 1322219338,
                    "answer_id": 8268205,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think that you'll find interesting stuff in the following answer of mine that I did for a previous similar question:</p>\n\n<p><a href=\"https://stackoverflow.com/q/5929469/551449\">https://stackoverflow.com/q/5929469/551449</a></p>\n\n<p>In this answer, I proposed a  pattern that allows a regex to catch any kind of number and since I have nothing else to add to it, I think it is fairly complete</p>\n"
                },
                {
                    "owner": {
                        "account_id": 169293,
                        "reputation": 18355,
                        "user_id": 395287,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/OiGAR.jpg?s=256",
                        "display_name": "Tim McNamara",
                        "link": "https://stackoverflow.com/users/395287/tim-mcnamara"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1295145640,
                    "creation_date": 1295145640,
                    "answer_id": 4703489,
                    "question_id": 4703390,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Another approach that may be more readable is simple type conversion. I've added a replacement function to cover instances where people may enter European decimals:</p>\n\n<pre><code>&gt;&gt;&gt; for possibility in \"Current Level: -13.2 db or 14,2 or 3\".split():\n...     try:\n...         str(float(possibility.replace(',', '.')))\n...     except ValueError:\n...         pass\n'-13.2'\n'14.2'\n'3.0'\n</code></pre>\n\n<p>This has disadvantages too however. If someone types in \"1,000\", this will be converted to 1. Also, it assumes that people will be inputting with whitespace between words. This is not the case with other languages, such as Chinese.</p>\n"
                }
            ]
        },
        {
            "8225954": [
                {
                    "owner": {
                        "account_id": 11352996,
                        "reputation": 85,
                        "user_id": 8323360,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0ac1a68d7b9246f446e04ace8741bc03?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Autumn McClellan",
                        "link": "https://stackoverflow.com/users/8323360/autumn-mcclellan"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1719172814,
                    "creation_date": 1719172814,
                    "answer_id": 78659698,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I recommend <a href=\"https://nestedtext.org\" rel=\"nofollow noreferrer\">NestedText</a> combined with <a href=\"https://pypi.org/project/voluptuous/\" rel=\"nofollow noreferrer\">Voluptuous</a>.</p>\n<p>NestedText is the configuration file format. It looks similar to YAML, but is simpler and has none of the ambiguities that plague YAML.  NestedText is preferred over INI when your configuration involves hierarchy.</p>\n<p>Voluptuous is the schema package.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2558,
                        "reputation": 100479,
                        "user_id": 3571,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=256&d=identicon&r=PG",
                        "display_name": "codeape",
                        "link": "https://stackoverflow.com/users/3571/codeape"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1614845492,
                    "last_edit_date": 1614845492,
                    "creation_date": 1321961497,
                    "answer_id": 8226090,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Consider using plain Python files as configuration files.</p>\n<p>An example (<code>config.py</code>):</p>\n<pre><code># use normal python comments\n\nvalue1 = 32\nvalue2 = &quot;A string value&quot;\n\nvalue3 = [&quot;lists&quot;, &quot;are&quot;, &quot;handy&quot;]\nvalue4 = {&quot;and&quot;: &quot;so&quot;, &quot;are&quot;: &quot;dictionaries&quot;}\n</code></pre>\n<p>In your program, load the config file using <code>exec</code> (<a href=\"https://docs.python.org/3/library/functions.html#exec\" rel=\"nofollow noreferrer\">docs</a>):</p>\n<pre><code>from pathlib import Path\n\nif __name__ == &quot;__main__&quot;:\n    config = {}\n    exec(Path(&quot;config.py&quot;).read_text(encoding=&quot;utf8&quot;), {}, config)\n    \n    print(config[&quot;value1&quot;])\n    print(config[&quot;value4&quot;])\n</code></pre>\n<p>I like this approach, for the following reasons:</p>\n<ul>\n<li>In the simple case, the format is as easy to author as an INI-style config file. It also shares an important characteristic with INI files: it is very suitable for version control (this is less true for XML and maybe also for JSON)</li>\n<li>I like the flexibility that comes with having the config file in an actual programming language.</li>\n</ul>\n<p>The approach is widely used, a few examples:</p>\n<ul>\n<li>A Django site's settings lives inside <a href=\"https://docs.djangoproject.com/en/1.3/topics/settings/\" rel=\"nofollow noreferrer\">settings.py</a>. Django does not use <code>execfile</code>, it uses <code>import</code> to read/execute <code>settings.py</code> AFAIK, but the end result is the same: the code inside the settings file is executed.</li>\n<li>The bash shell reads and executes <code>~/.bashrc</code> on startup.</li>\n<li>The Python interpreter imports <code>site.py</code> on startup.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 30893,
                        "reputation": 7235,
                        "user_id": 84513,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/d5d20b5b0bdec2dd205ad8ecbad2e298?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Shekhar",
                        "link": "https://stackoverflow.com/users/84513/shekhar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1514382015,
                    "creation_date": 1514382015,
                    "answer_id": 47993223,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I ran into same problem more than once. I love the idea of python file(s) as settings files, it's just simple, elegant and all fellow python devs like it. Same time not really convinced with execfile idea. </p>\n\n<p>So I went ahead and created <a href=\"https://github.com/shon/converge\" rel=\"nofollow noreferrer\">Converge</a>.</p>\n\n<p>It supports some advanced options but at it's heart it simple python module as settings file.</p>\n\n<p>It's as simple as </p>\n\n<ul>\n<li>creating <code>default_settings.py</code>, <code>prod_settings.py</code></li>\n<li><code>pip install converge</code></li>\n<li><code>import settings</code></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 2684415,
                        "reputation": 3271,
                        "user_id": 2319089,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fe194a7aedc8796acb238b47d4cb3828?s=256&d=identicon&r=PG",
                        "display_name": "Guido U. Draheim",
                        "link": "https://stackoverflow.com/users/2319089/guido-u-draheim"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1419405783,
                    "creation_date": 1419405783,
                    "answer_id": 27633112,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For completeness, you can also use a shell-style configuration format with the help of the \"shlex\" module. If you have a fixed set of configuration parameters then you can combine it with the \"optparse\" module. </p>\n\n<pre><code>from optparse import OptionParser\n_o = OptionParser(\"%prog [options] configfiles...\")\n_o.add_option(\"--hostname\", metavar=\"HOSTNAME\", default=\"10.0.0.1\")\n_o.add_option(\"--username\", metavar=\"USERNAME\", default=\"admin\")\n_o.add_option(\"--password\", metavar=\"PASSWORD\", default=\"admin\")\n\nimport shlex\ndef parse(filename, defaults):\n    opt, args = _o.parse_args(shlex.split(open(filename).read()), defaults)\n    return opt\n\nif __name__ == \"__main__\":\n    import sys\n    values, args = _o.parse_args()\n    for arg in args:\n       values = parse(arg, values)\n    values, args = _o.parse_args(values = values)\n    for name in _o.defaults:\n        print name, \"=\", getattr(values, name)\n</code></pre>\n\n<p>The example shows how you can chain ini files for having a default set of values and user-defined redefinitions. So assume you have two files containing</p>\n\n<p>file1.ini:</p>\n\n<pre><code>--hostname 10.2.3.4\n--password admin-sc\n</code></pre>\n\n<p>file2.ini:</p>\n\n<pre><code>--username \"foo bar\"\n--password \"special key\"\n</code></pre>\n\n<p>Then you can run <code>./configtest.py file1.ini file2.ini --password other</code> and the resulting values will have hostname as 10.2.3.4 and username as \"foo bar\" and password as \"other\". This variation for configuration settings comes in handy if you do already have an optparse-definition for your program parameters -> just reuse it and you can chain the values from the command line with the values from a config file and possibly some global config settings. </p>\n\n<p>As an incentive, your configuration parameters are always documented and mistyped configuration parameters will come up early as an error, just as you can use the optparse-instance to precheck your default settings file (schema check). As a downside, there are no comments allowed in the ini and configuration elements are not easily substructured.Still your parser is essentially a one-liner.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 435167,
                        "reputation": 4716,
                        "user_id": 821610,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc969b0ad080c2bf131d1474141a1942?s=256&d=identicon&r=PG",
                        "display_name": "gregswift",
                        "link": "https://stackoverflow.com/users/821610/gregswift"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1356922135,
                    "creation_date": 1356922135,
                    "answer_id": 14096897,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Check out <a href=\"http://www.voidspace.org.uk/python/configobj.html\" rel=\"noreferrer\">ConfigObj</a>, its the slickest method I've found so far, and definitely more flexible than ConfigParser.  Personally I'm not a fan of YAML based because its 'flexibility' makes it difficult to use with tools like <a href=\"http://augeas.net/\" rel=\"noreferrer\">Augeas</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 201004,
                        "reputation": 7239,
                        "user_id": 447191,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/75993be9b3f0a771eedb68e59d89be45?s=256&d=identicon&r=PG",
                        "display_name": "Matt",
                        "link": "https://stackoverflow.com/users/447191/matt"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1321964704,
                    "last_edit_date": 1321964704,
                    "creation_date": 1321962601,
                    "answer_id": 8226291,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.python.org/library/stdtypes.html#dict\" rel=\"noreferrer\">Dictionaries</a> are pretty popular as well. Basically a hash table.</p>\n\n<p><code>{\"one\": 1, \"two\": 2}</code> is an example, kind of looks like json.</p>\n\n<p>Then you can call it up like <code>mydict[\"one\"]</code>, which would return 1.</p>\n\n<p>Then you can use <a href=\"http://docs.python.org/library/shelve.html?highlight=shelve#module-shelve\" rel=\"noreferrer\">shelve</a> to save the dictionary to a file: </p>\n\n<pre><code>mydict = shelve.open(filename)\n# then you can call it from there, like\nmydict[\"one\"]\n</code></pre>\n\n<p>So, it's somewhat easier then an ini file. You can add stuff just like a list or change options pretty easily and then once you close it, it will write it back out.</p>\n\n<p>Heres a simple example of what i mean:</p>\n\n<pre><code>import shelve\n\ndef main():\n    mydict = shelve.open(\"testfile\")\n    mydict[\"newKey\"] = value(\"some comment\", 5)\n    print(mydict[\"newKey\"].value)\n    print(mydict[\"newKey\"].comment)\n    mydict.close()\n\n\nclass value():\n    def __init__(self, comment, value):\n        self.comment = comment\n        self.value = value\n\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 49321,
                        "reputation": 43001,
                        "user_id": 146792,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/d321b6a6a9c8aeb609111c4ceb516e42?s=256&d=identicon&r=PG",
                        "display_name": "mac",
                        "link": "https://stackoverflow.com/users/146792/mac"
                    },
                    "is_accepted": false,
                    "score": 36,
                    "last_activity_date": 1321961724,
                    "creation_date": 1321961724,
                    "answer_id": 8226136,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>INI is till totally OK and as other said, the format of your config file really depends from how you are going to use it.</p>\n\n<p>Personally I am a fan of <a href=\"http://yaml.org/\">YAML</a>: concise, readable, flexible.</p>\n\n<p>Google seems to share my enthusiasm, as they use it too in the Google App Engine. The python parser is <a href=\"http://pyyaml.org/\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 115620,
                        "reputation": 45792,
                        "user_id": 303513,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/4d3d236035d2d5e84d3b753855dd040c?s=256&d=identicon&r=PG",
                        "display_name": "Silver Light",
                        "link": "https://stackoverflow.com/users/303513/silver-light"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1321961175,
                    "creation_date": 1321961175,
                    "answer_id": 8226024,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>It depends on how the config file will be used.</strong></p>\n\n<p>One of the advantages of INI files is that they are really easy to read and understand. It's much easier to make a mistake in JSON or XML file if you edit config by hand. PHP still uses INI files.</p>\n\n<p>However, if you your config is not meant to be edited by hand, go with any format you like, because INI is not the easiest one to parse.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 388191,
                        "reputation": 34959,
                        "user_id": 746961,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/4ac67b333bfad69fec3396dfc40c66c0?s=256&d=identicon&r=PG",
                        "display_name": "Constantinius",
                        "link": "https://stackoverflow.com/users/746961/constantinius"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1321961089,
                    "creation_date": 1321961089,
                    "answer_id": 8225999,
                    "question_id": 8225954,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This entirely depends on your requirements. If (as you say) all you need is key/value pairs, ini files (or other \"plain\" config files) will perfectly suit you. No, they are not outdated, as they are still in use.</p>\n\n<p>XML/JSON is perfect if you have hierarchical structures and also want to use more sophisticated  methods (e.g: XML file validation, namespaces, etc.).</p>\n"
                }
            ]
        },
        {
            "12788899": [
                {
                    "owner": {
                        "account_id": 107107,
                        "reputation": 27481,
                        "user_id": 284947,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/01326d0a524154e0407e4270904e314c?s=256&d=identicon&r=PG",
                        "display_name": "defuz",
                        "link": "https://stackoverflow.com/users/284947/defuz"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1349728591,
                    "creation_date": 1349728591,
                    "answer_id": 12789093,
                    "question_id": 12788899,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about this case:</p>\n\n<pre><code>{True: 'String ok', False: 'String nok'}[value == 'ok']\n</code></pre>\n\n<p>*Do not take seriously :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 39,
                    "last_activity_date": 1349727815,
                    "creation_date": 1349727815,
                    "answer_id": 12788920,
                    "question_id": 12788899,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Easy peasy:</p>\n\n<pre><code>'String ok' if value == 'ok' else 'String nok'\n</code></pre>\n\n<p>It's a <a href=\"http://docs.python.org/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\">conditional expression</a>.</p>\n"
                }
            ]
        },
        {
            "1377446": [
                {
                    "owner": {
                        "account_id": 5518460,
                        "reputation": 1999,
                        "user_id": 4382305,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/6zP3c.jpg?s=256",
                        "display_name": "Darwin",
                        "link": "https://stackoverflow.com/users/4382305/darwin"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1706634028,
                    "last_edit_date": 1706634028,
                    "creation_date": 1629407358,
                    "answer_id": 68854565,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<ul>\n<li>This is for Django &gt;=3</li>\n<li>This code converts HTML template to pdf file for any page. For example: post/1/new1, post/2/new2</li>\n<li>pdf file name is last part in url. For example for post/2/new2, file name is new2</li>\n</ul>\n<p>First install xhtml2pdf</p>\n<pre><code>pip install xhtml2pdf\n</code></pre>\n<p>urls.py</p>\n<pre><code>from .views import generatePdf as GeneratePdf\nfrom django.urls import re_path\nurlpatterns = [\n#...\nre_path(r'^pdf/(?P&lt;cid&gt;[0-9]+)/(?P&lt;value&gt;[a-zA-Z0-9 :._-]+)/$', GeneratePdf, name='pdf'),\n#...\n]\n</code></pre>\n<p>views.py</p>\n<pre><code>from django.template.loader import get_template\nfrom .utils import render_to_pdf\n# pdf\ndef generatePdf(request,cid,value):\n    print(cid,value)\n    pdf = render_to_pdf('myappname/pdf/your.html',cid)\n    return HttpResponse(pdf, content_type='application/pdf')\n</code></pre>\n<p>utils.py</p>\n<pre><code>from io import BytesIO #A stream implementation using an in-memory bytes buffer\n                       # It inherits BufferIOBase\n\nfrom django.http import HttpResponse\nfrom django.template.loader import get_template\n\n#pisa is a html2pdf converter using the ReportLab Toolkit,\n#the HTML5lib and pyPdf.\n\nfrom xhtml2pdf import pisa  \n#define render_to_pdf() function\nfrom .models import myappname\nfrom django.shortcuts import get_object_or_404\n\n\ndef render_to_pdf(template_src,cid, context_dict={}):\n    template = get_template(template_src)\n    node = get_object_or_404(myappname, id =cid)\n    context = {'node':node}\n    context_dict=context\n    html  = template.render(context_dict)\n    result = BytesIO()\n\n    #This part will create the pdf.\n    pdf = pisa.pisaDocument(BytesIO(html.encode(&quot;ISO-8859-1&quot;)), result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type='application/pdf')\n    return None\n</code></pre>\n<p>Structure:</p>\n<pre><code>myappname/\n      |___views.py\n      |___urls.py\n      |___utils.py\n      |___templates/myappname/your.html\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35776,
                        "reputation": 2709,
                        "user_id": 101588,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ef4996a49630c1fec1688a42adad0d6d?s=256&d=identicon&r=PG",
                        "display_name": "Guillem Gelabert",
                        "link": "https://stackoverflow.com/users/101588/guillem-gelabert"
                    },
                    "is_accepted": true,
                    "score": 225,
                    "last_activity_date": 1671702962,
                    "last_edit_date": 1671702962,
                    "creation_date": 1252048370,
                    "answer_id": 1377652,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try the solution from <a href=\"https://www.reportlab.com/reportlabplus/installation/\" rel=\"noreferrer\">Reportlab</a>.</p>\n<p>Download it and install it as usual with python setup.py install</p>\n<p>You will also need to install the following modules: xhtml2pdf, html5lib, pypdf with easy_install.</p>\n<p>Here is an usage example:</p>\n<p><strong>First define this function:</strong></p>\n<pre><code>import cStringIO as StringIO\nfrom xhtml2pdf import pisa\nfrom django.template.loader import get_template\nfrom django.template import Context\nfrom django.http import HttpResponse\nfrom cgi import escape\n\n\ndef render_to_pdf(template_src, context_dict):\n    template = get_template(template_src)\n    context = Context(context_dict)\n    html  = template.render(context)\n    result = StringIO.StringIO()\n\n    pdf = pisa.pisaDocument(StringIO.StringIO(html.encode(&quot;ISO-8859-1&quot;)), result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type='application/pdf')\n    return HttpResponse('We had some errors&lt;pre&gt;%s&lt;/pre&gt;' % escape(html))\n</code></pre>\n<p><strong>Then you can use it like this:</strong></p>\n<pre><code>def myview(request):\n    #Retrieve data or whatever you need\n    return render_to_pdf(\n            'mytemplate.html',\n            {\n                'pagesize':'A4',\n                'mylist': results,\n            }\n        )\n</code></pre>\n<p><strong>The template:</strong></p>\n<pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Title&lt;/title&gt;\n        &lt;style type=&quot;text/css&quot;&gt;\n            @page {\n                size: {{ pagesize }};\n                margin: 1cm;\n                @frame footer {\n                    -pdf-frame-content: footerContent;\n                    bottom: 0cm;\n                    margin-left: 9cm;\n                    margin-right: 9cm;\n                    height: 1cm;\n                }\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            {% for item in mylist %}\n                RENDER MY CONTENT\n            {% endfor %}\n        &lt;/div&gt;\n        &lt;div id=&quot;footerContent&quot;&gt;\n            {%block page_foot%}\n                Page &lt;pdf:pagenumber&gt;\n            {%endblock%}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13200910,
                        "reputation": 1555,
                        "user_id": 9534184,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=256",
                        "display_name": "nassim",
                        "link": "https://stackoverflow.com/users/9534184/nassim"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1657920597,
                    "creation_date": 1657920597,
                    "answer_id": 72999769,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I tried the best answer in this thread and it didn't work for python3.8, hence I had to do some changes as follows ( for anyone working on python3.8 ) :</p>\n<pre><code>import io \nfrom xhtml2pdf import pisa\nfrom django.http import HttpResponse\nfrom html import escape\n\nfrom django.template.loader import render_to_string\n\ndef render_to_pdf(template_src, context_dict):\n    html = render_to_string(template_src, context_dict)\n    result = io.BytesIO()\n\n\n\n    pdf = pisa.pisaDocument(io.BytesIO (html.encode(&quot;utf-8&quot;)), result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type='application/pdf')\n    return HttpResponse('We had some errors&lt;pre&gt;%s&lt;/pre&gt;' % escape(html))\n</code></pre>\n<p>I had to change <code>cgi</code> to <code>html</code> since <code>cgi.escape</code> is depricated, and I replaced <code>StringIO</code> with <code>io.ByteIO()</code> as for the rendering I used <code>render_to_string</code> instead of converting the <code>dict</code> to <code>context</code> which was throwing an error.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8277491,
                        "reputation": 378,
                        "user_id": 6223167,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://graph.facebook.com/1721395208137173/picture?type=large",
                        "display_name": "Manoj Datt",
                        "link": "https://stackoverflow.com/users/6223167/manoj-datt"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1563364870,
                    "creation_date": 1563364870,
                    "answer_id": 57075347,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have context data along with css and js in your html template.\nThan you have good option to use <a href=\"https://github.com/pdfkit/pdfkit\" rel=\"nofollow noreferrer\">pdfjs</a>. </p>\n\n<p>In your code you can use like this.</p>\n\n<pre><code>from django.template.loader import get_template\nimport pdfkit\nfrom django.conf import settings\n\ncontext={....}\ntemplate = get_template('reports/products.html')\nhtml_string = template.render(context)\npdfkit.from_string(html_string, os.path.join(settings.BASE_DIR, \"media\", 'products_report-%s.pdf'%(id)))\n</code></pre>\n\n<p>In your HTML you can link extranal or internal css and js, it will generate best quality of pdf.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11203735,
                        "reputation": 1023,
                        "user_id": 8219976,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/HKtAo.jpg?s=256",
                        "display_name": "Deft-pawN",
                        "link": "https://stackoverflow.com/users/8219976/deft-pawn"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1529235059,
                    "creation_date": 1529235059,
                    "answer_id": 50896201,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I get the code to generate the PDF from html template :</p>\n\n<pre><code>    import os\n\n    from weasyprint import HTML\n\n    from django.template import Template, Context\n    from django.http import HttpResponse \n\n\n    def generate_pdf(self, report_id):\n\n            # Render HTML into memory and get the template firstly\n            template_file_loc = os.path.join(os.path.dirname(__file__), os.pardir, 'templates', 'the_template_pdf_generator.html')\n            template_contents = read_all_as_str(template_file_loc)\n            render_template = Template(template_contents)\n\n            #rendering_map is the dict for params in the template \n            render_definition = Context(rendering_map)\n            render_output = render_template.render(render_definition)\n\n            # Using Rendered HTML to generate PDF\n            response = HttpResponse(content_type='application/pdf')\n            response['Content-Disposition'] = 'attachment; filename=%s-%s-%s.pdf' % \\\n                                              ('topic-test','topic-test', '2018-05-04')\n            # Generate PDF\n            pdf_doc = HTML(string=render_output).render()\n            pdf_doc.pages[0].height = pdf_doc.pages[0]._page_box.children[0].children[\n                0].height  # Make PDF file as single page file \n            pdf_doc.write_pdf(response)\n            return response\n\n    def read_all_as_str(self, file_loc, read_method='r'):\n        if file_exists(file_loc):\n            handler = open(file_loc, read_method)\n            contents = handler.read()\n            handler.close()\n            return contents\n        else:\n            return 'file not exist'  \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1360311,
                        "reputation": 17055,
                        "user_id": 1297812,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Iceaj.jpg?s=256",
                        "display_name": "laffuste",
                        "link": "https://stackoverflow.com/users/1297812/laffuste"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1490801436,
                    "last_edit_date": 1495540507,
                    "creation_date": 1410494110,
                    "answer_id": 25800473,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://github.com/nigma/django-easy-pdf\" rel=\"noreferrer\">https://github.com/nigma/django-easy-pdf</a></p>\n\n<p>Template:</p>\n\n<pre><code>{% extends \"easy_pdf/base.html\" %}\n\n{% block content %}\n    &lt;div id=\"content\"&gt;\n        &lt;h1&gt;Hi there!&lt;/h1&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre>\n\n<p>View:</p>\n\n<pre><code>from easy_pdf.views import PDFTemplateView\n\nclass HelloPDFView(PDFTemplateView):\n    template_name = \"hello.html\"\n</code></pre>\n\n<p>If you want to use django-easy-pdf on Python 3 check the solution suggested <a href=\"https://stackoverflow.com/a/43097663/544059\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4079264,
                        "reputation": 1482,
                        "user_id": 3350104,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/27e212a944bb04c226eaf5eaee08a890?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jithin",
                        "link": "https://stackoverflow.com/users/3350104/jithin"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1468666903,
                    "last_edit_date": 1468666903,
                    "creation_date": 1418291127,
                    "answer_id": 27419707,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try <a href=\"http://wkhtmltopdf.org/\" rel=\"noreferrer\">wkhtmltopdf</a>  with either one of the following wrappers</p>\n\n<p><a href=\"https://github.com/incuna/django-wkhtmltopdf\" rel=\"noreferrer\">django-wkhtmltopdf</a> or <a href=\"https://github.com/JazzCore/python-pdfkit/\" rel=\"noreferrer\">python-pdfkit</a> </p>\n\n<p>This worked great for me,supports javascript and css or anything for that matter which a webkit browser supports.</p>\n\n<p>For more detailed tutorial please see this <a href=\"https://codehustle.wordpress.com/2016/07/16/html-to-pdf-in-django-using-wkhtmltopdf/\" rel=\"noreferrer\">blog post</a>  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 2490422,
                        "reputation": 513,
                        "user_id": 2167997,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/SqXVY.jpg?s=256",
                        "display_name": "tthayer",
                        "link": "https://stackoverflow.com/users/2167997/tthayer"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1428101321,
                    "creation_date": 1428101321,
                    "answer_id": 29440704,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After trying to get this to work for too many hours, I finally found this:\n<a href=\"https://github.com/vierno/django-xhtml2pdf\" rel=\"nofollow\">https://github.com/vierno/django-xhtml2pdf</a></p>\n\n<p>It's a fork of <a href=\"https://github.com/chrisglass/django-xhtml2pdf\" rel=\"nofollow\">https://github.com/chrisglass/django-xhtml2pdf</a> that provides a mixin for a generic class-based view. I used it like this:</p>\n\n<pre><code>    # views.py\n    from django_xhtml2pdf.views import PdfMixin\n    class GroupPDFGenerate(PdfMixin, DetailView):\n        model = PeerGroupSignIn\n        template_name = 'groups/pdf.html'\n\n    # templates/groups/pdf.html\n    &lt;html&gt;\n    &lt;style&gt;\n    @page { your xhtml2pdf pisa PDF parameters }\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"header_content\"&gt; (this is defined in the style section)\n            &lt;h1&gt;{{ peergroupsignin.this_group_title }}&lt;/h1&gt;\n            ...\n</code></pre>\n\n<p>Use the model name you defined in your view in all lowercase when populating the template fields. Because its a GCBV, you can just call it as '.as_view' in your urls.py:</p>\n\n<pre><code>    # urls.py (using url namespaces defined in the main urls.py file)\n    url(\n        regex=r\"^(?P&lt;pk&gt;\\d+)/generate_pdf/$\",\n        view=views.GroupPDFGenerate.as_view(),\n        name=\"generate_pdf\",\n       ),\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3236803,
                        "reputation": 963,
                        "user_id": 2812506,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a0778a4ce6f6edbe8c7121821890c76e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "andhdo",
                        "link": "https://stackoverflow.com/users/2812506/andhdo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1380050127,
                    "creation_date": 1380050127,
                    "answer_id": 18990121,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use iReport editor to define the layout, and publish the report in jasper reports server. After publish you can invoke the rest api to get the results.</p>\n\n<p>Here is the test of the functionality:</p>\n\n<pre><code>from django.test import TestCase\nfrom x_reports_jasper.models import JasperServerClient\n\n\"\"\"\n    to try integraction with jasper server through rest\n\"\"\"\nclass TestJasperServerClient(TestCase):\n\n    # define required objects for tests\n    def setUp(self):\n\n        # load the connection to remote server\n        try:\n\n            self.j_url = \"http://127.0.0.1:8080/jasperserver\"\n            self.j_user = \"jasperadmin\"\n            self.j_pass = \"jasperadmin\"\n\n            self.client = JasperServerClient.create_client(self.j_url,self.j_user,self.j_pass)\n\n        except Exception, e:\n            # if errors could not execute test given prerrequisites\n            raise\n\n    # test exception when server data is invalid\n    def test_login_to_invalid_address_should_raise(self):\n        self.assertRaises(Exception,JasperServerClient.create_client, \"http://127.0.0.1:9090/jasperserver\",self.j_user,self.j_pass)\n\n    # test execute existent report in server\n    def test_get_report(self):\n\n        r_resource_path = \"/reports/&lt;PathToPublishedReport&gt;\"\n        r_format = \"pdf\"\n        r_params = {'PARAM_TO_REPORT':\"1\",}\n\n        #resource_meta = client.load_resource_metadata( rep_resource_path )\n\n        [uuid,out_mime,out_data] = self.client.generate_report(r_resource_path,r_format,r_params)\n        self.assertIsNotNone(uuid)\n</code></pre>\n\n<p>And here is an example of the invocation implementation:</p>\n\n<pre><code>from django.db import models\nimport requests\nimport sys\nfrom xml.etree import ElementTree\nimport logging \n\n# module logger definition\nlogger = logging.getLogger(__name__)\n\n# Create your models here.\nclass JasperServerClient(models.Manager):\n\n    def __handle_exception(self, exception_root, exception_id, exec_info ):\n        type, value, traceback = exec_info\n        raise JasperServerClientError(exception_root, exception_id), None, traceback\n\n    # 01: REPORT-METADATA \n    #   get resource description to generate the report\n    def __handle_report_metadata(self, rep_resourcepath):\n\n        l_path_base_resource = \"/rest/resource\"\n        l_path = self.j_url + l_path_base_resource\n        logger.info( \"metadata (begin) [path=%s%s]\"  %( l_path ,rep_resourcepath) )\n\n        resource_response = None\n        try:\n            resource_response = requests.get( \"%s%s\" %( l_path ,rep_resourcepath) , cookies = self.login_response.cookies)\n\n        except Exception, e:\n            self.__handle_exception(e, \"REPORT_METADATA:CALL_ERROR\", sys.exc_info())\n\n        resource_response_dom = None\n        try:\n            # parse to dom and set parameters\n            logger.debug( \" - response [data=%s]\"  %( resource_response.text) )\n            resource_response_dom = ElementTree.fromstring(resource_response.text)\n\n            datum = \"\" \n            for node in resource_response_dom.getiterator():\n                datum = \"%s&lt;br /&gt;%s - %s\" % (datum, node.tag, node.text)\n            logger.debug( \" - response [xml=%s]\"  %( datum ) )\n\n            #\n            self.resource_response_payload= resource_response.text\n            logger.info( \"metadata (end) \")\n        except Exception, e:\n            logger.error( \"metadata (error) [%s]\" % (e))\n            self.__handle_exception(e, \"REPORT_METADATA:PARSE_ERROR\", sys.exc_info())\n\n\n    # 02: REPORT-PARAMS \n    def __add_report_params(self, metadata_text, params ):\n        if(type(params) != dict):\n            raise TypeError(\"Invalid parameters to report\")\n        else:\n            logger.info( \"add-params (begin) []\" )\n            #copy parameters\n            l_params = {}\n            for k,v in params.items():\n                l_params[k]=v\n            # get the payload metadata\n            metadata_dom = ElementTree.fromstring(metadata_text)\n            # add attributes to payload metadata\n            root = metadata_dom #('report'):\n\n            for k,v in l_params.items():\n                param_dom_element = ElementTree.Element('parameter')\n                param_dom_element.attrib[\"name\"] = k\n                param_dom_element.text = v\n                root.append(param_dom_element)\n\n            #\n            metadata_modified_text =ElementTree.tostring(metadata_dom, encoding='utf8', method='xml')\n            logger.info( \"add-params (end) [payload-xml=%s]\" %( metadata_modified_text )  )\n            return metadata_modified_text\n\n\n\n    # 03: REPORT-REQUEST-CALL \n    #   call to generate the report\n    def __handle_report_request(self, rep_resourcepath, rep_format, rep_params):\n\n        # add parameters\n        self.resource_response_payload = self.__add_report_params(self.resource_response_payload,rep_params)\n\n        # send report request\n\n        l_path_base_genreport = \"/rest/report\"\n        l_path = self.j_url + l_path_base_genreport\n        logger.info( \"report-request (begin) [path=%s%s]\"  %( l_path ,rep_resourcepath) )\n\n        genreport_response = None\n        try:\n            genreport_response = requests.put( \"%s%s?RUN_OUTPUT_FORMAT=%s\" %(l_path,rep_resourcepath,rep_format),data=self.resource_response_payload, cookies = self.login_response.cookies )\n            logger.info( \" - send-operation-result [value=%s]\"  %( genreport_response.text) )\n        except Exception,e:\n            self.__handle_exception(e, \"REPORT_REQUEST:CALL_ERROR\", sys.exc_info())\n\n\n        # parse the uuid of the requested report\n        genreport_response_dom = None\n\n        try:\n            genreport_response_dom = ElementTree.fromstring(genreport_response.text)\n\n            for node in genreport_response_dom.findall(\"uuid\"):\n                datum = \"%s\" % (node.text)\n\n            genreport_uuid = datum      \n\n            for node in genreport_response_dom.findall(\"file/[@type]\"):\n                datum = \"%s\" % (node.text)\n            genreport_mime = datum\n\n            logger.info( \"report-request (end) [uuid=%s,mime=%s]\"  %( genreport_uuid, genreport_mime) )\n\n            return [genreport_uuid,genreport_mime]\n        except Exception,e:\n            self.__handle_exception(e, \"REPORT_REQUEST:PARSE_ERROR\", sys.exc_info())\n\n    # 04: REPORT-RETRIEVE RESULTS \n    def __handle_report_reply(self, genreport_uuid ):\n\n\n        l_path_base_getresult = \"/rest/report\"\n        l_path = self.j_url + l_path_base_getresult \n        logger.info( \"report-reply (begin) [uuid=%s,path=%s]\"  %( genreport_uuid,l_path) )\n\n        getresult_response = requests.get( \"%s%s/%s?file=report\" %(self.j_url,l_path_base_getresult,genreport_uuid),data=self.resource_response_payload, cookies = self.login_response.cookies )\n        l_result_header_mime =getresult_response.headers['Content-Type']\n\n        logger.info( \"report-reply (end) [uuid=%s,mime=%s]\"  %( genreport_uuid, l_result_header_mime) )\n        return [l_result_header_mime, getresult_response.content]\n\n    # public methods ---------------------------------------    \n\n    # tries the authentication with jasperserver throug rest\n    def login(self, j_url, j_user,j_pass):\n        self.j_url= j_url\n\n        l_path_base_auth = \"/rest/login\"\n        l_path = self.j_url + l_path_base_auth\n\n        logger.info( \"login (begin) [path=%s]\"  %( l_path) )\n\n        try:\n            self.login_response = requests.post(l_path , params = {\n                    'j_username':j_user,\n                    'j_password':j_pass\n                })                  \n\n            if( requests.codes.ok != self.login_response.status_code ):\n                self.login_response.raise_for_status()\n\n            logger.info( \"login (end)\" )\n            return True\n            # see http://blog.ianbicking.org/2007/09/12/re-raising-exceptions/\n\n        except Exception, e:\n            logger.error(\"login (error) [e=%s]\" % e )\n            self.__handle_exception(e, \"LOGIN:CALL_ERROR\",sys.exc_info())\n            #raise\n\n    def generate_report(self, rep_resourcepath,rep_format,rep_params):\n        self.__handle_report_metadata(rep_resourcepath)\n        [uuid,mime] = self.__handle_report_request(rep_resourcepath, rep_format,rep_params)\n        # TODO: how to handle async?\n        [out_mime,out_data] = self.__handle_report_reply(uuid)\n        return [uuid,out_mime,out_data]\n\n    @staticmethod\n    def create_client(j_url, j_user, j_pass):\n        client = JasperServerClient()\n        login_res = client.login( j_url, j_user, j_pass )\n        return client\n\n\nclass JasperServerClientError(Exception):\n\n    def __init__(self,exception_root,reason_id,reason_message=None):\n        super(JasperServerClientError, self).__init__(str(reason_message))\n        self.code = reason_id \n        self.description = str(exception_root) + \" \" + str(reason_message)\n    def __str__(self):\n        return self.code + \" \" + self.description\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 270400,
                        "reputation": 395,
                        "user_id": 560327,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0acd1a0b25ef24945141a94cf0cecf6e?s=256&d=identicon&r=PG",
                        "display_name": "Christian Jensen",
                        "link": "https://stackoverflow.com/users/560327/christian-jensen"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1355951498,
                    "creation_date": 1355951498,
                    "answer_id": 13961258,
                    "question_id": 1377446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I just whipped this up for CBV. Not used in production but generates a PDF for me. Probably needs work for the error reporting side of things but does the trick so far.</p>\n\n<pre><code>import StringIO\nfrom cgi import escape\nfrom xhtml2pdf import pisa\nfrom django.http import HttpResponse\nfrom django.template.response import TemplateResponse\nfrom django.views.generic import TemplateView\n\nclass PDFTemplateResponse(TemplateResponse):\n\n    def generate_pdf(self, retval):\n\n        html = self.content\n\n        result = StringIO.StringIO()\n        rendering = pisa.pisaDocument(StringIO.StringIO(html.encode(\"ISO-8859-1\")), result)\n\n        if rendering.err:\n            return HttpResponse('We had some errors&lt;pre&gt;%s&lt;/pre&gt;' % escape(html))\n        else:\n            self.content = result.getvalue()\n\n    def __init__(self, *args, **kwargs):\n        super(PDFTemplateResponse, self).__init__(*args, mimetype='application/pdf', **kwargs)\n        self.add_post_render_callback(self.generate_pdf)\n\n\nclass PDFTemplateView(TemplateView):\n    response_class = PDFTemplateResponse\n</code></pre>\n\n<p>Used like:</p>\n\n<pre><code>class MyPdfView(PDFTemplateView):\n    template_name = 'things/pdf.html'\n</code></pre>\n"
                }
            ]
        },
        {
            "49947814": [
                {
                    "owner": {
                        "account_id": 5837421,
                        "reputation": 111,
                        "user_id": 4599996,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0e979984e07d48c598d2e511edb83fda?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "xhinker",
                        "link": "https://stackoverflow.com/users/4599996/xhinker"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1627322768,
                    "creation_date": 1627322768,
                    "answer_id": 68534597,
                    "question_id": 49947814,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is another solution: add a comma at the end of &quot;threadnum&quot;</p>\n<pre><code>t=threading.Thread(target=ParallelRegression,args=(threadnum,))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222366,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": true,
                    "score": 46,
                    "last_activity_date": 1524249569,
                    "creation_date": 1524249569,
                    "answer_id": 49947858,
                    "question_id": 49947814,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>threading.Thread</code> class needs an iterable of arguments as the <code>args</code> parameter. You're passing <code>args=(threadnum)</code> which is a single <code>int</code> object, you need to pass some iterable object that would allow multiple args, even when you only want to pass one arg.</p>\n\n<p><code>args=[threadnum]</code> would work, because that makes a <code>list</code> which is iterable.</p>\n"
                }
            ]
        },
        {
            "2401447": [
                {
                    "owner": {
                        "account_id": 7459010,
                        "reputation": 1,
                        "user_id": 5671236,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/d67de8682c6b1368dcd420549e04c247?s=256&d=identicon&r=PG",
                        "display_name": "Riptide00",
                        "link": "https://stackoverflow.com/users/5671236/riptide00"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1449895266,
                    "last_edit_date": 1449895266,
                    "creation_date": 1449894978,
                    "answer_id": 34236307,
                    "question_id": 2401447,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do it in a dirty way:</p>\n\n<pre><code>try: function() except: function()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 37416,
                        "reputation": 75947,
                        "user_id": 106979,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/aOb1r.jpg?s=256",
                        "display_name": "fortran",
                        "link": "https://stackoverflow.com/users/106979/fortran"
                    },
                    "is_accepted": true,
                    "score": 36,
                    "last_activity_date": 1268229227,
                    "last_edit_date": 1268229227,
                    "creation_date": 1268054442,
                    "answer_id": 2401520,
                    "question_id": 2401447,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Recursion is not the most idiomatic way to do things in Python, as it doesn't have <a href=\"http://en.wikipedia.org/wiki/Tail_recursion\" rel=\"noreferrer\">tail recursion</a> optimization thus making impractical the use of recursion as a substitute for iteration (even if in your example the function is not tail-recursive, that wouldn't help anyway). Basically, that means that you shouldn't use it for things that have a complexity greater than linear if you expect your inputs to be large, (still it's OK for doing things that have a logarithmic recursion depth, like divide and conquer algorithms as QuickSort).</p>\n\n<p>If you want to try that approach, use a language better suited to do functional programming, as Lisp, Scheme, Haskell, OCaml, etc.; or give a try to Stackless Python, that has broader limits in stack usage and also has tail recursion optimisation :-)</p>\n\n<p>By the way, a tail-recursive equivalent of your function could be:</p>\n\n<pre><code>def primeList(n, i=2, acc=None):\n    return i &gt; n and (acc or []) or primeList(n, i+1, (acc or []) + (isPrime(i) and [i] or []))\n</code></pre>\n\n<p>Another \"by the way\", you shouldn't construct a list if you're using it just to add up the values... The Pythonic way to solve Project Euler's 10th problem is:</p>\n\n<pre><code>print sum(n for n in xrange(2, 2000001) if all(n % i for i in xrange(2, int(n**0.5)+1)))\n</code></pre>\n\n<p>(OK, maybe splitting it in various lines would be even more Pythonic, but I love one liners ^_^)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9187,
                        "reputation": 9433,
                        "user_id": 16873,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/13cce7a41e9aeb6abab7d18011b1399c?s=256&d=identicon&r=PG",
                        "display_name": "Thiago Chaves",
                        "link": "https://stackoverflow.com/users/16873/thiago-chaves"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1268056706,
                    "creation_date": 1268056706,
                    "answer_id": 2401755,
                    "question_id": 2401447,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Like already said, in languages that can't deal with deep stacks it's better to take an iterative approach. In your case, in particular, it's best to change the algorithm used. I suggest using the <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\" rel=\"nofollow noreferrer\">Sieve of Eratosthenes</a> to find the list of prime numbers. It will be quite faster than your current program.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 59702,
                        "reputation": 29923,
                        "user_id": 178560,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/c58c99cf1679d6f0a3a26c5ab3ed4d4a?s=256&d=identicon&r=PG",
                        "display_name": "Johannes Charra",
                        "link": "https://stackoverflow.com/users/178560/johannes-charra"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1268055170,
                    "creation_date": 1268055170,
                    "answer_id": 2401583,
                    "question_id": 2401447,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You're iterating over n numbers and recursing at each step. Therefore Python's recursion limit defines your maximum input number. That's obviously undesirable. Especially because the Euler problems typically deal with pretty large numbers.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 76761,
                        "reputation": 2133,
                        "user_id": 219525,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/2687054ae7ae6281217e52bcd79b784d?s=256&d=identicon&r=PG",
                        "display_name": "Adrian",
                        "link": "https://stackoverflow.com/users/219525/adrian"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1268054386,
                    "creation_date": 1268054386,
                    "answer_id": 2401515,
                    "question_id": 2401447,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Well I'm no python expert but I presume you've hit the <a href=\"http://en.wikipedia.org/wiki/Call_stack\" rel=\"nofollow noreferrer\">stack</a> limit. That's the problem with recursion, it's great when you don't have to recurse very many times but no good when the number of recursions gets even moderately big.</p>\n\n<p>The ideal alternative is to rewrite your algorithm to use iteration instead.</p>\n\n<p><strong>Edit:</strong> Actually having looked closer your specific error you can get past it by changing <a href=\"http://docs.python.org/library/sys.html#sys.getrecursionlimit\" rel=\"nofollow noreferrer\">sys.getrecursionlimit</a>. That'll only take you so far though. Eventually you'll get a stackoverflow exception which brings me back to my original point.</p>\n"
                }
            ]
        },
        {
            "255147": [
                {
                    "owner": {
                        "account_id": 680,
                        "reputation": 989276,
                        "user_id": 893,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
                        "display_name": "Greg Hewgill",
                        "link": "https://stackoverflow.com/users/893/greg-hewgill"
                    },
                    "is_accepted": true,
                    "score": 203,
                    "last_activity_date": 1577915973,
                    "last_edit_date": 1577915973,
                    "creation_date": 1225492549,
                    "answer_id": 255154,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import sys\n\nsys.stdout.write('h')\nsys.stdout.flush()\n\nsys.stdout.write('m')\nsys.stdout.flush()\n</code></pre>\n\n<p>You need to call <a href=\"https://docs.python.org/library/io.html#io.IOBase.flush\" rel=\"noreferrer\"><code>sys.stdout.flush()</code></a> because otherwise it will hold the text in a buffer and you won't see it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10029,
                        "reputation": 47005,
                        "user_id": 18770,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/bf7da0bc3f01f63e4f19c421b331e786?s=256&d=identicon&r=PG",
                        "display_name": "Federico A. Ramponi",
                        "link": "https://stackoverflow.com/users/18770/federico-a-ramponi"
                    },
                    "is_accepted": false,
                    "score": 305,
                    "last_activity_date": 1577915644,
                    "last_edit_date": 1577915644,
                    "creation_date": 1225493054,
                    "answer_id": 255172,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In <a href=\"https://docs.python.org/whatsnew/3.0.html#print-is-a-function\" rel=\"noreferrer\">Python 3</a>, use</p>\n\n<pre><code>print('h', end='')\n</code></pre>\n\n<p>to suppress the endline terminator, and</p>\n\n<pre><code>print('a', 'b', 'c', sep='')\n</code></pre>\n\n<p>to suppress the whitespace separator between items. See <a href=\"https://docs.python.org/library/functions.html#print\" rel=\"noreferrer\">the documentation for <code>print</code></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8405937,
                        "reputation": 2491,
                        "user_id": 6309432,
                        "user_type": "registered",
                        "accept_rate": 11,
                        "profile_image": "https://lh6.googleusercontent.com/-JADixWIPPTk/AAAAAAAAAAI/AAAAAAAAAP0/KpbT-cBIr10/photo.jpg?sz=256",
                        "display_name": "ahmed khattab",
                        "link": "https://stackoverflow.com/users/6309432/ahmed-khattab"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1487445688,
                    "creation_date": 1487445688,
                    "answer_id": 42319647,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>print('''first line \\\nsecond line''')\n</code></pre>\n\n<p>it will produce </p>\n\n<blockquote>\n  <p>first line second line</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 5060114,
                        "reputation": 131,
                        "user_id": 4290713,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/100001229300171/picture?type=large",
                        "display_name": "Mrinal",
                        "link": "https://stackoverflow.com/users/4290713/mrinal"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1429341707,
                    "creation_date": 1429341707,
                    "answer_id": 29714273,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>import sys\na=raw_input()\nfor i in range(0,len(a)):\n       sys.stdout.write(a[i])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 49098,
                        "reputation": 27053,
                        "user_id": 146041,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/tFOb6.jpg?s=256",
                        "display_name": "Aaron McDaid",
                        "link": "https://stackoverflow.com/users/146041/aaron-mcdaid"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1417700512,
                    "creation_date": 1417700512,
                    "answer_id": 27295541,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>sys.stdout.write</code> is (in Python 2) the only robust solution. Python 2 printing is insane. Consider this code:</p>\n\n<pre><code>print \"a\",\nprint \"b\",\n</code></pre>\n\n<p>This will print <code>a b</code>, leading you to suspect that it is printing a trailing space. But this is not correct. Try this instead:</p>\n\n<pre><code>print \"a\",\nsys.stdout.write(\"0\")\nprint \"b\",\n</code></pre>\n\n<p>This will print <code>a0b</code>. How do you explain that? <strong><em>Where have the spaces gone?</em></strong></p>\n\n<p>I still can't quite make out what's really going on here. Could somebody look over my best guess:</p>\n\n<p><em>My attempt at deducing the rules when you have a trailing <code>,</code> on your <code>print</code></em>:</p>\n\n<p>First, let's assume that <code>print    ,</code> (in Python 2) doesn't print any whitespace (spaces <em>nor</em> newlines).</p>\n\n<p>Python 2 does, however, pay attention to how you are printing - are you using <code>print</code>, or <code>sys.stdout.write</code>, or something else? If you make two <em>consecutive</em> calls to <code>print</code>, then Python will insist on putting in a space in between the two.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1046766,
                        "reputation": 3704,
                        "user_id": 1051589,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/c920688aceaa9775c1452c32420574f9?s=256&d=identicon&r=PG",
                        "display_name": "joker",
                        "link": "https://stackoverflow.com/users/1051589/joker"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1413215216,
                    "creation_date": 1413215216,
                    "answer_id": 26343928,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I am not adding a new answer. I am just putting the best marked answer in a better format.\nI can see that the best answer by rating is using <code>sys.stdout.write(someString)</code>. You can try this out:</p>\n\n<pre><code>    import sys\n    Print = sys.stdout.write\n    Print(\"Hello\")\n    Print(\"World\")\n</code></pre>\n\n<p>will yield:</p>\n\n<pre><code>HelloWorld\n</code></pre>\n\n<p>That is all.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2261858,
                        "reputation": 1971,
                        "user_id": 1991735,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://i.sstatic.net/PMusN.jpg?s=256",
                        "display_name": "Michael Murphy",
                        "link": "https://stackoverflow.com/users/1991735/michael-murphy"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1405026819,
                    "creation_date": 1405026819,
                    "answer_id": 24686404,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>print(\"{0}{1}{2}\".format(a, b, c))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1016338,
                        "reputation": 3438,
                        "user_id": 1027842,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/ac72b5084e4c92045121ff2484f813e0?s=256&d=identicon&r=PG",
                        "display_name": "Benjamin",
                        "link": "https://stackoverflow.com/users/1027842/benjamin"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1398263227,
                    "creation_date": 1398263227,
                    "answer_id": 23247362,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In python 2.6:</p>\n\n<pre><code>&gt;&gt;&gt; print 'h','m','h'\nh m h\n&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; print('h',end='')\nh&gt;&gt;&gt; print('h',end='');print('m',end='');print('h',end='')\nhmh&gt;&gt;&gt;\n&gt;&gt;&gt; print('h','m','h',sep='');\nhmh\n&gt;&gt;&gt;\n</code></pre>\n\n<p>So using print_function from __future__ you can set explicitly the <strong>sep</strong> and <strong>end</strong> parameteres of print function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3914234,
                        "reputation": 19,
                        "user_id": 3238586,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d04fef77c8b4a525238e0e956ac6b305?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "techdude101",
                        "link": "https://stackoverflow.com/users/3238586/techdude101"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1390773999,
                    "creation_date": 1390773999,
                    "answer_id": 21369899,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use print like the printf function in C.</p>\n\n<p>e.g.</p>\n\n<p>print \"%s%s\" % (x, y)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3751076,
                        "reputation": 147,
                        "user_id": 3118564,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/bed6187ab62e7d5b92dc90d9d72c4e4c?s=256&d=identicon&r=PG",
                        "display_name": "Abd",
                        "link": "https://stackoverflow.com/users/3118564/abd"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1387445560,
                    "creation_date": 1387445560,
                    "answer_id": 20677875,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This may look stupid, but seems to be the simplest:</p>\n\n<pre><code>    print 'h',\n    print '\\bm'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "pablo"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1312323599,
                    "last_edit_date": 1312323599,
                    "creation_date": 1231068462,
                    "answer_id": 410850,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Or use a <code>+</code>, i.e.:</p>\n\n<pre><code>&gt;&gt;&gt; print 'me'+'no'+'likee'+'spacees'+'pls'\nmenolikeespaceespls\n</code></pre>\n\n<p>Just make sure all are concatenate-able objects.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30816,
                        "reputation": 82853,
                        "user_id": 84270,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/da2c0de47c3681c58f25b1eb821f7221?s=256&d=identicon&r=PG",
                        "display_name": "John Machin",
                        "link": "https://stackoverflow.com/users/84270/john-machin"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1245817563,
                    "creation_date": 1245817563,
                    "answer_id": 1036396,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Regain control of your console! Simply:</p>\n\n<pre><code>from __past__ import printf\n</code></pre>\n\n<p>where <code>__past__.py</code> contains:</p>\n\n<pre><code>import sys\ndef printf(fmt, *varargs):\n    sys.stdout.write(fmt % varargs)\n</code></pre>\n\n<p>then:</p>\n\n<pre><code>&gt;&gt;&gt; printf(\"Hello, world!\\n\")\nHello, world!\n&gt;&gt;&gt; printf(\"%d %d %d\\n\", 0, 1, 42)\n0 1 42\n&gt;&gt;&gt; printf('a'); printf('b'); printf('c'); printf('\\n')\nabc\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Bonus extra: If you don't like <code>print &gt;&gt; f, ...</code>, you can extending this caper to fprintf(f, ...).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5792,
                        "reputation": 119021,
                        "user_id": 9493,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=256&d=identicon&r=PG",
                        "display_name": "Brian",
                        "link": "https://stackoverflow.com/users/9493/brian"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1225500231,
                    "creation_date": 1225500231,
                    "answer_id": 255336,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For completeness, one other way is to clear the softspace value after performing the write.</p>\n\n<pre><code>import sys\nprint \"hello\",\nsys.stdout.softspace=0\nprint \"world\",\nprint \"!\"\n</code></pre>\n\n<p>prints <code>helloworld !</code></p>\n\n<p>Using stdout.write() is probably more convenient for most cases though.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4551,
                        "reputation": 95781,
                        "user_id": 6899,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=256&d=identicon&r=PG",
                        "display_name": "tzot",
                        "link": "https://stackoverflow.com/users/6899/tzot"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1225498888,
                    "creation_date": 1225498888,
                    "answer_id": 255306,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>Python 2.5.2 (r252:60911, Sep 27 2008, 07:03:14)\n[GCC 4.3.1] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print \"hello\",; print \"there\"\nhello there\n&gt;&gt;&gt; print \"hello\",; sys.stdout.softspace=False; print \"there\"\nhellothere\n</code></pre>\n\n<p>But really, you should use <code>sys.stdout.write</code> directly.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 355,
                        "reputation": 4975,
                        "user_id": 444,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/221fc9f3d2521143c1c462f8bbe86d09?s=256&d=identicon&r=PG",
                        "display_name": "Dan",
                        "link": "https://stackoverflow.com/users/444/dan"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1225493632,
                    "creation_date": 1225493632,
                    "answer_id": 255199,
                    "question_id": 255147,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Greg is right-- you can use sys.stdout.write</p>\n\n<p>Perhaps, though, you should consider refactoring your algorithm to accumulate a list of &lt;whatevers&gt; and then</p>\n\n<pre><code>lst = ['h', 'm']\nprint  \"\".join(lst)\n</code></pre>\n"
                }
            ]
        },
        {
            "39838900": [
                {
                    "owner": {
                        "account_id": 682692,
                        "reputation": 49773,
                        "user_id": 535275,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/Ft2Mw.jpg?s=256",
                        "display_name": "Scott Hunter",
                        "link": "https://stackoverflow.com/users/535275/scott-hunter"
                    },
                    "is_accepted": true,
                    "score": 114,
                    "last_activity_date": 1475522468,
                    "creation_date": 1475522468,
                    "answer_id": 39838913,
                    "question_id": 39838900,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is: negative indices:</p>\n\n<pre><code>lst[-2]\n</code></pre>\n"
                }
            ]
        },
        {
            "2557110": [
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 258,
                    "last_activity_date": 1553587596,
                    "last_edit_date": 1553587596,
                    "creation_date": 1270078082,
                    "answer_id": 2557196,
                    "question_id": 2557110,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Think about somebody doing <code>help(yourmodule)</code> at the interactive interpreter's prompt \u2014 what do they <strong>want</strong> to know?  (Other methods of extracting and displaying the information are roughly equivalent to <code>help</code> in terms of amount of information).  So if you have in <code>x.py</code>:</p>\n\n<pre><code>\"\"\"This module does blah blah.\"\"\"\n\nclass Blah(object):\n  \"\"\"This class does blah blah.\"\"\"\n</code></pre>\n\n<p>then:</p>\n\n<pre><code>&gt;&gt;&gt; import x; help(x)\n</code></pre>\n\n<p>shows:</p>\n\n<pre><code>Help on module x:\n\nNAME\n    x - This module does blah blah.\n\nFILE\n    /tmp/x.py\n\nCLASSES\n    __builtin__.object\n        Blah\n\n    class Blah(__builtin__.object)\n     |  This class does blah blah.\n     |  \n     |  Data and other attributes defined here:\n     |  \n     |  __dict__ = &lt;dictproxy object&gt;\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__ = &lt;attribute '__weakref__' of 'Blah' objects&gt;\n     |      list of weak references to the object (if defined)\n</code></pre>\n\n<p>As you see, the detailed information on the classes (and functions too, though I'm not showing one here) is already included from those components' docstrings; the module's own docstring should describe them very summarily (if at all) and rather concentrate on a concise summary of what the module as a whole can do for you, ideally with some doctested examples (just like functions and classes ideally should have doctested examples in their docstrings).</p>\n\n<p>I don't see how metadata such as author name and copyright / license helps the module's user \u2014 it can rather go in comments, since it could help somebody considering whether or not to reuse or modify the module.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 451432,
                        "reputation": 21137,
                        "user_id": 847331,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/811e96762eac3a693825446a9896712c?s=256&d=identicon&r=PG",
                        "display_name": "Remi",
                        "link": "https://stackoverflow.com/users/847331/remi"
                    },
                    "is_accepted": false,
                    "score": 66,
                    "last_activity_date": 1391267290,
                    "last_edit_date": 1391267290,
                    "creation_date": 1315675814,
                    "answer_id": 7373383,
                    "question_id": 2557110,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To quote the <a href=\"http://www.python.org/dev/peps/pep-0257/#multi-line-docstrings\" rel=\"noreferrer\">specifications</a>:</p>\n\n<blockquote>\n  <p>The docstring of a <b>script</b>\n  (a stand-alone program) should be usable as its \"usage\" message, printed when the script is invoked with incorrect or missing arguments (or perhaps with a \"-h\" option, for \"help\"). Such a docstring should document the script's function and command line syntax, environment variables, and files. Usage messages can be fairly elaborate (several screens full) and should be sufficient for a new user to use the command properly, as well as a complete quick reference to all options and arguments for the sophisticated user.</p>\n  \n  <p>The docstring for a <b>module</b>\n  should generally list the classes, exceptions and functions (and any other objects) that are exported by the module, with a one-line summary of each. (These summaries generally give less detail than the summary line in the object's docstring.) The docstring for a package (i.e., the docstring of the package's <code>__init__.py</code> module) should also list the modules and subpackages exported by the package.</p>\n  \n  <p>The docstring for a <b>class</b>\n  should summarize its behavior and list the public methods and instance variables. If the class is intended to be subclassed, and has an additional interface for subclasses, this interface should be listed separately (in the docstring). The class constructor should be documented in the docstring for its <code>__init__</code> method. Individual methods should be documented by their own docstring.</p>\n</blockquote>\n\n<p>The docstring of a <b>function</b> or <b>method</b>\nis a phrase ending in a period. It prescribes the function or method's effect as a command (\"Do this\", \"Return that\"), not as a description; e.g. don't write \"Returns the pathname ...\". A multiline-docstring for a function or method should summarize its behavior and document its arguments, return value(s), side effects, exceptions raised, and restrictions on when it can be called (all if applicable). Optional arguments should be indicated. It should be documented whether keyword arguments are part of the interface.</p>\n"
                }
            ]
        },
        {
            "33978": [
                {
                    "owner": {
                        "account_id": 2642,
                        "reputation": 4192,
                        "user_id": 3702,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b85432ae24e81cf19c252185c7d16c43?s=256&d=identicon&r=PG",
                        "display_name": "fserb",
                        "link": "https://stackoverflow.com/users/3702/fserb"
                    },
                    "is_accepted": true,
                    "score": 166,
                    "last_activity_date": 1724412674,
                    "last_edit_date": 1724412674,
                    "creation_date": 1220066743,
                    "answer_id": 35645,
                    "question_id": 33978,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>There's no easy way to find out the memory size of a python object</strong>. One of the problems you may find is that Python objects - like lists and dicts - may have references to other python objects (in this case, what would your size be? The size containing the size of each object or not?). There are some pointers overhead and internal structures related to object types and garbage collection. Finally, some python objects have non-obvious behaviors. For instance, lists reserve space for more objects than they have, most of the time; dicts are even more complicated since they can operate in different ways (they have a different implementation for small number of keys and sometimes they over allocate entries).</p>\n<p>There is a <a href=\"https://web.archive.org/web/20240412070601/https://code.activestate.com/recipes/544288/\" rel=\"nofollow noreferrer\">big chunk of code</a> (and an <a href=\"https://web.archive.org/web/20240804164028/https://code.activestate.com/recipes/546530/\" rel=\"nofollow noreferrer\">updated big chunk of code</a>) out there to try to best approximate the size of a python object in memory.</p>\n<p>You may also want to check some <a href=\"http://mail.python.org/pipermail/python-list/2002-March/135223.html\" rel=\"nofollow noreferrer\">old description about PyObject</a> (the internal C struct that represents virtually all python objects).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1921118,
                        "reputation": 3174,
                        "user_id": 1732607,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/5842343fa9db2450e380fcf3e1a92587?s=256&d=identicon&r=PG",
                        "display_name": "Uzer",
                        "link": "https://stackoverflow.com/users/1732607/uzer"
                    },
                    "is_accepted": false,
                    "score": 217,
                    "last_activity_date": 1724412122,
                    "last_edit_date": 1724412122,
                    "creation_date": 1383934271,
                    "answer_id": 19865746,
                    "question_id": 33978,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try this:</p>\n<pre><code>sys.getsizeof(object)\n</code></pre>\n<p><a href=\"https://docs.python.org/3/library/sys.html#sys.getsizeof\" rel=\"nofollow noreferrer\">getsizeof()</a> Return the size of an object in bytes. It calls the object\u2019s <code>__sizeof__</code> method and adds an additional garbage collector overhead <strong>if</strong> the object is managed by the garbage collector.</p>\n<p><a href=\"https://web.archive.org/web/20230924080253/https://code.activestate.com/recipes/577504/\" rel=\"nofollow noreferrer\">A recursive recipe</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4682842,
                        "reputation": 103,
                        "user_id": 3791116,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/028db4b6d77ee9d13611e23f2227d2c3?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3791116",
                        "link": "https://stackoverflow.com/users/3791116/user3791116"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1404146644,
                    "creation_date": 1404146644,
                    "answer_id": 24495011,
                    "question_id": 33978,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For big objects you may use a somewhat crude but effective method:\ncheck how much memory your Python process occupies in the system, then delete the object and compare.</p>\n\n<p>This method has many drawbacks but it will give you a very fast estimate for very big objects.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3645743,
                        "reputation": 7033,
                        "user_id": 3038791,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://i.sstatic.net/XiPAa.png?s=256",
                        "display_name": "rafaelvalle",
                        "link": "https://stackoverflow.com/users/3038791/rafaelvalle"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1388761253,
                    "last_edit_date": 1388761253,
                    "creation_date": 1388760855,
                    "answer_id": 20906366,
                    "question_id": 33978,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This must be used with care because an override on the objects __sizeof__ might be misleading.</p>\n\n<p>Using the bregman.suite, some tests with sys.getsizeof output a copy of an array object (data) in an object instance as being bigger than the object itself (mfcc).</p>\n\n<pre><code>&gt;&gt;&gt; mfcc = MelFrequencyCepstrum(filepath, params)\n&gt;&gt;&gt; data = mfcc.X[:]\n&gt;&gt;&gt; sys.getsizeof(mfcc)\n64\n&gt;&gt;&gt; sys.getsizeof(mfcc.X)\n&gt;&gt;&gt;80\n&gt;&gt;&gt; sys.getsizeof(data)\n80\n&gt;&gt;&gt; mfcc\n&lt;bregman.features.MelFrequencyCepstrum object at 0x104ad3e90&gt;\n</code></pre>\n"
                }
            ]
        },
        {
            "22144189": [
                {
                    "owner": {
                        "account_id": 8361032,
                        "reputation": 860,
                        "user_id": 6279354,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/NV4AO.jpg?s=256",
                        "display_name": "Achala Dissanayake",
                        "link": "https://stackoverflow.com/users/6279354/achala-dissanayake"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1635388403,
                    "last_edit_date": 1635388403,
                    "creation_date": 1563263326,
                    "answer_id": 57052449,
                    "question_id": 22144189,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To add to @Depado 's answer you may need to add your LAN IP address to <code>ALLOWED_HOSTS</code> in the  <code>settings.py</code> along with  <code>localhost</code>. it would look like,</p>\n<pre><code>ALLOWED_HOSTS = [&quot;localhost&quot;, &quot;192.168.8.160&quot;]\n</code></pre>\n<p>(if <code>localhost</code> isn't working use <code>127.0.0.1</code> as suggested by @Sabito \u9306\u514e)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14170791,
                        "reputation": 329,
                        "user_id": 10256649,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-rBN5IAur624/AAAAAAAAAAI/AAAAAAAABW8/PMiorsJCnBM/photo.jpg?sz=256",
                        "display_name": "Joshua S",
                        "link": "https://stackoverflow.com/users/10256649/joshua-s"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1632068798,
                    "creation_date": 1632068798,
                    "answer_id": 69245078,
                    "question_id": 22144189,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Everywhere I looked, I kept seeing the answer to use the terminal command:</p>\n<p><code>python manage.py runserver 0.0.0.0:8000</code></p>\n<p>That works, but not if you want to run a remote debugger across the LAN (in my case VSCode), which launches the server automatically without a chance to modify the host ip address. However, I found a permanent solution:</p>\n<p>Open: <code>./env/lib/python3.8/site-packages/django/core/management/commands/runserver.py</code></p>\n<p>Search for: <code>self.addr = ''</code></p>\n<p>Replace <code>''</code> with <code>'0'</code> and save. <em>(<code>'0'</code> is shorthand for <code>'0.0.0.0'</code>)</em></p>\n<p>Now if you run: <code>python manage.py runserver</code> it is open to the local network, outputting: <code>Starting development server at http://0:8000/</code></p>\n<p>Importantly, the debugger now launches the server at <code>http://0:8000/</code></p>\n<p>If you haven't already, remember to add your client to allowed hosts in settings.py: <code>ALLOWED_HOSTS = [&quot;*&quot;]</code></p>\n<blockquote>\n<p>Blockquote</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 986264,
                        "reputation": 2553,
                        "user_id": 1008603,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/nwzyf.jpg?s=256",
                        "display_name": "Venkatesh Bachu",
                        "link": "https://stackoverflow.com/users/1008603/venkatesh-bachu"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1619787101,
                    "last_edit_date": 1619787101,
                    "creation_date": 1393860175,
                    "answer_id": 22150565,
                    "question_id": 22144189,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <a href=\"https://ngrok.com/\" rel=\"nofollow noreferrer\">https://ngrok.com/</a> this will expose your local web server to the internet/public.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1418138,
                        "reputation": 4929,
                        "user_id": 1343321,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/20d625be6a7f95fd700dd975e4167848?s=256&d=identicon&r=PG",
                        "display_name": "Depado",
                        "link": "https://stackoverflow.com/users/1343321/depado"
                    },
                    "is_accepted": true,
                    "score": 147,
                    "last_activity_date": 1521149525,
                    "last_edit_date": 1521149525,
                    "creation_date": 1393842607,
                    "answer_id": 22144305,
                    "question_id": 22144189,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/django-admin/#runserver\" rel=\"noreferrer\">Running the Django Development Server</a><br>\nThis is what you're looking for. To help you further, here is what you should do:   </p>\n\n<pre><code>python manage.py runserver 0.0.0.0:8000\n</code></pre>\n\n<p>By the way, this may be a duplicate of <a href=\"https://stackoverflow.com/questions/2260727/accessing-local-django-webserver-from-outside-world\">this</a> question.</p>\n\n<p>Here is what the documentation says:   </p>\n\n<blockquote>\n  <p>Note that the default IP address, 127.0.0.1, is not accessible from\n  other machines on your network. To make your development server\n  viewable to other machines on the network, use its own IP address\n  (e.g. 192.168.2.1) or 0.0.0.0.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "17466561": [
                {
                    "owner": {
                        "account_id": 28620817,
                        "reputation": 1,
                        "user_id": 22124274,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0fb3fe5683fe5455bf04f788ab8d427c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Johnny Hoxton",
                        "link": "https://stackoverflow.com/users/22124274/johnny-hoxton"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1687607398,
                    "creation_date": 1687607398,
                    "answer_id": 76545916,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>On developments where I have design authority, I set up the GUI part of the work into two sets of code:</p>\n<p>Set 1. The core code that draws the window containing the widgets and their bindings. I may have generated these using wxFormBuilder or Glade so I don't want any hand-coded amendments to the files. More likely, I've painfully hand-crafted the windows from scratch, and definitely don't want any inadvertent tinkering!</p>\n<p>Set 2. The code in which I write the functionality driving the window.</p>\n<p>By separating the core of the GUI definition from the work of building functionality, it means I don't 'accidentally' break the core window structure when I'm working on the functionality, and the code is far more managable and maintainable.</p>\n<p>We all know that size and complexity of program files becomes a real problem very quickly. So, with the above separation of form and function (as it were), I simply import the core window code file  and subclass it in the functional code file.</p>\n<p>For example, 'frmWindow_core_code.py' keeps the core window functionality:</p>\n<p>class frmWindow(tk.TK):</p>\n<pre><code>    button1 = ttk.Button....\n    entry1  = ttk.Entry....\n    etc\n    etc\n    \n</code></pre>\n<p>The file that drives the GUI functionality, e.g 'MyWindowProgram.py', imports and sub-classes the core file e.g.:</p>\n<p>import frmWindow_cored_code as Dialogue</p>\n<p>class ThisWindow(Dialogue.frmWindow):\netc\netc\netc</p>\n<p>Just a suggestion I hope may be useful.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22574030,
                        "reputation": 83,
                        "user_id": 16759801,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJwrgCOs-fvHWznqRgDaYLLiZPqJgH4CmucR7JDZ=k-s256",
                        "display_name": "Gab \u041f\u041a",
                        "link": "https://stackoverflow.com/users/16759801/gab-%d0%9f%d0%9a"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1642721288,
                    "creation_date": 1642721288,
                    "answer_id": 70794648,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>My preferred way of doing it is like Bryan Oakley's answer.\nHere's an example, made by Sentdex on Youtube, go check his &quot;GUIs with Tkinter&quot; playlist.</p>\n<p>I think it's really relevant to put it here because it's a great example for the OP, and so it also answers this answer that was upped by 35 people and wasn't answered;</p>\n<blockquote>\n<p>@Bryan Oakley do you know any good sample codes on internet that i can\nstudy their structure? \u2013  Chris Aung  Jul 5 '13 at 8:35</p>\n</blockquote>\n<pre><code>import tkinter as tk\n\nLARGE_FONT= (&quot;Verdana&quot;, 12)\n\nclass SeaofBTCapp(tk.Tk):\n    &quot;&quot;&quot;\n    tkinter example app with OOP\n    &quot;&quot;&quot;\n\n    def __init__(self, *args, **kwargs):\n        \n        tk.Tk.__init__(self, *args, **kwargs)\n        container = tk.Frame(self)\n\n        container.pack(side=&quot;top&quot;, fill=&quot;both&quot;, expand = True)\n\n        container.grid_rowconfigure(0, weight=1)\n        container.grid_columnconfigure(0, weight=1)\n\n        self.frames = {}\n\n        for frame_class in (StartPage,PageOne, PageTwo):\n\n            frame = frame_class(container, self)\n\n            self.frames[frame_class] = frame\n\n            frame.grid(row=0, column=0, sticky=&quot;nsew&quot;)\n    \n\n        self.show_frame(StartPage)\n\n    def show_frame(self, cont):\n        &quot;&quot;&quot;\n        Put specific frame on top\n        &quot;&quot;&quot;\n\n        frame = self.frames[cont]\n        frame.tkraise()\n\n        \nclass StartPage(tk.Frame):\n    &quot;&quot;&quot;\n    Starting frame for app\n    &quot;&quot;&quot;\n\n    def __init__(self, parent, controller):\n        tk.Frame.__init__(self,parent,bg='grey')\n        label = tk.Label(self, text=&quot;Start Page&quot;, font=LARGE_FONT)\n        label.pack(pady=10,padx=10)\n\n        button_page1 = tk.Button(self, text = 'Visit Page 1', command= lambda: controller.show_frame(PageOne))\n        button_page1.pack()\n\n        button_page2 = tk.Button(self, text = 'Visit Page 2', command= lambda: controller.show_frame(PageTwo))\n        button_page2.pack()\n\nclass PageOne(tk.Frame):\n    &quot;&quot;&quot;\n    First page of program\n    &quot;&quot;&quot;\n\n    def __init__(self,parent,controller):\n        tk.Frame.__init__(self,parent,bg='light blue')\n        label = tk.Label(self, text=&quot;Page one&quot;, font=LARGE_FONT)\n        label.pack(pady=10,padx=10)\n\n        button_home = tk.Button(self, text = 'Back to Home', command= lambda: controller.show_frame(StartPage))\n        button_home.pack()\n\n        button_home = tk.Button(self, text = 'Go to page2', command= lambda: controller.show_frame(PageTwo))\n        button_home.pack()\n\nclass PageTwo(tk.Frame):\n    &quot;&quot;&quot;\n    First page of program\n    &quot;&quot;&quot;\n\n    def __init__(self,parent,controller):\n        tk.Frame.__init__(self,parent,bg='light green')\n        label = tk.Label(self, text=&quot;Page two&quot;, font=LARGE_FONT)\n        label.pack(pady=10,padx=10)\n\n        button_home = tk.Button(self, text = 'Back to Home', command= lambda: controller.show_frame(StartPage))\n        button_home.pack()\n\n        button_home = tk.Button(self, text = 'Go to page1', command= lambda: controller.show_frame(PageOne))\n        button_home.pack()\n\n\n\n\napp = SeaofBTCapp()\napp.mainloop()\n</code></pre>\n<p>Find the code here also : [https://pythonprogramming.net/change-show-new-frame-tkinter/]</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user13284106"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1586607806,
                    "last_edit_date": 1586607806,
                    "creation_date": 1586578744,
                    "answer_id": 61152091,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Organizing your application using class make it easy to you and others who work with you to debug problems and improve the app easily. </p>\n\n<p>You can easily organize your application like this:</p>\n\n<pre><code>class hello(Tk):\n    def __init__(self):\n        super(hello, self).__init__()\n        self.btn = Button(text = \"Click me\", command=close)\n        self.btn.pack()\n    def close():\n        self.destroy()\n\napp = hello()\napp.mainloop()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2651069,
                        "reputation": 8015,
                        "user_id": 2292723,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/2e4fb12a7e38b31036bf22904e86cc6a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Serial",
                        "link": "https://stackoverflow.com/users/2292723/serial"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1556398679,
                    "last_edit_date": 1556398679,
                    "creation_date": 1372930726,
                    "answer_id": 17466924,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This isn't a bad structure; it will work just fine. However, you do have to have functions in a function to do commands when someone clicks on a button or something</p>\n\n<p>So what you could do is write classes for these then have methods in the class that handle commands for the button clicks and such.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>import tkinter as tk\n\nclass Window1:\n    def __init__(self, master):\n        pass\n        # Create labels, entries,buttons\n    def button_click(self):\n        pass\n        # If button is clicked, run this method and open window 2\n\n\nclass Window2:\n    def __init__(self, master):\n        #create buttons,entries,etc\n\n    def button_method(self):\n        #run this when button click to close window\n        self.master.destroy()\n\ndef main(): #run mianloop \n    root = tk.Tk()\n    app = Window1(root)\n    root.mainloop()\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Usually tk programs with multiple windows are multiple big classes and in the <code>__init__</code> all the entries, labels etc are created and then each method is to handle button click events</p>\n\n<p>There isn't really a right way to do it, whatever works for you and gets the job done as long as its readable and you can easily explain it because if you cant easily explain your program, there probably is a better way to do it.</p>\n\n<p>Take a look at <a href=\"http://thinkingtkinter.sourceforge.net/\" rel=\"noreferrer\">Thinking in Tkinter</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4815,
                        "reputation": 384585,
                        "user_id": 7432,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/eYejG.png?s=256",
                        "display_name": "Bryan Oakley",
                        "link": "https://stackoverflow.com/users/7432/bryan-oakley"
                    },
                    "is_accepted": true,
                    "score": 428,
                    "last_activity_date": 1483019403,
                    "last_edit_date": 1483019403,
                    "creation_date": 1372942370,
                    "answer_id": 17470842,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I advocate an object oriented approach. This is the template that I start out with:</p>\n\n<pre><code># Use Tkinter for python 2, tkinter for python 3\nimport tkinter as tk\n\nclass MainApplication(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n        self.parent = parent\n\n        &lt;create the rest of your GUI here&gt;\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    MainApplication(root).pack(side=\"top\", fill=\"both\", expand=True)\n    root.mainloop()\n</code></pre>\n\n<p>The important things to notice are:</p>\n\n<ul>\n<li><p><strong>I don't use a wildcard import.</strong> I import the package as \"tk\", which requires that I prefix all commands with <code>tk.</code>. This prevents global namespace pollution, plus it makes the code completely obvious when you are using Tkinter classes, ttk classes, or some of your own. </p></li>\n<li><p><strong>The main application is a class</strong>. This gives you a private namespace for all of your callbacks and private functions, and just generally makes it easier to organize your code. In a procedural style you have to code top-down, defining functions before using them, etc. With this method you don't since you don't actually create the main window until the very last step. I prefer inheriting from <code>tk.Frame</code> just because I typically start by creating a frame, but it is by no means necessary. </p></li>\n</ul>\n\n<p>If your app has additional toplevel windows, I recommend making each of those a separate class, inheriting from <code>tk.Toplevel</code>. This gives you all of the same advantages mentioned above -- the windows are atomic, they have their own namespace, and the code is well organized. Plus, it makes it easy to put each into its own module once the code starts to get large. </p>\n\n<p>Finally, you might want to consider using classes for every major portion of your interface. For example, if you're creating an app with a toolbar, a navigation pane, a statusbar, and a main area, you could make each one of those classes. This makes your main code quite small and easy to understand:</p>\n\n<pre><code>class Navbar(tk.Frame): ...\nclass Toolbar(tk.Frame): ...\nclass Statusbar(tk.Frame): ...\nclass Main(tk.Frame): ...\n\nclass MainApplication(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n        self.statusbar = Statusbar(self, ...)\n        self.toolbar = Toolbar(self, ...)\n        self.navbar = Navbar(self, ...)\n        self.main = Main(self, ...)\n\n        self.statusbar.pack(side=\"bottom\", fill=\"x\")\n        self.toolbar.pack(side=\"top\", fill=\"x\")\n        self.navbar.pack(side=\"left\", fill=\"y\")\n        self.main.pack(side=\"right\", fill=\"both\", expand=True)\n</code></pre>\n\n<p>Since all of those instances share a common parent, the parent effectively becomes the \"controller\" part of a model-view-controller architecture. So, for example, the main window could place something on the statusbar by calling <code>self.parent.statusbar.set(\"Hello, world\")</code>. This allows you to define a simple interface between the components, helping to keep coupling to a minimun. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 5604793,
                        "reputation": 6063,
                        "user_id": 4439794,
                        "user_type": "registered",
                        "accept_rate": 39,
                        "profile_image": "https://www.gravatar.com/avatar/921fc1291c26a87a4def4e811f88e912?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Van Tr",
                        "link": "https://stackoverflow.com/users/4439794/van-tr"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1468720356,
                    "creation_date": 1468720356,
                    "answer_id": 38417226,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>OOP should be the approach and <code>frame</code> should be a <em>class variable</em> instead of <em>instance variable</em>.</p>\n\n<pre><code>from Tkinter import *\nclass App:\n  def __init__(self, master):\n    frame = Frame(master)\n    frame.pack()\n    self.button = Button(frame, \n                         text=\"QUIT\", fg=\"red\",\n                         command=frame.quit)\n    self.button.pack(side=LEFT)\n    self.slogan = Button(frame,\n                         text=\"Hello\",\n                         command=self.write_slogan)\n    self.slogan.pack(side=LEFT)\n  def write_slogan(self):\n    print \"Tkinter is easy to use!\"\n\nroot = Tk()\napp = App(root)\nroot.mainloop()\n</code></pre>\n\n<p><a href=\"https://i.sstatic.net/xv0tg.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/xv0tg.png\" alt=\"enter image description here\"></a></p>\n\n<p>Reference: <a href=\"http://www.python-course.eu/tkinter_buttons.php\" rel=\"nofollow noreferrer\">http://www.python-course.eu/tkinter_buttons.php</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 61445,
                        "reputation": 14690,
                        "user_id": 183132,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/db57bc42e6fbc602fc94df4a783200a0?s=256&d=identicon&r=PG",
                        "display_name": "gcb",
                        "link": "https://stackoverflow.com/users/183132/gcb"
                    },
                    "is_accepted": false,
                    "score": -12,
                    "last_activity_date": 1441653223,
                    "creation_date": 1441653223,
                    "answer_id": 32444812,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I personally do not use the objected oriented approach, mostly because it a) only get in the way; b) you will <em>never</em> reuse that as a module.</p>\n\n<p>but something that is not discussed here, is that you <em>must</em> use threading or multiprocessing. Always. otherwise your application will be awful.</p>\n\n<p>just do a simple test: start a window, and then fetch some URL or anything else. changes are your UI will not be updated while the network request is happening. Meaning, your application window will be broken. depend on the OS you are on, but most times, it will not redraw, anything you drag over the window will be plastered on it, until the process is back to the TK mainloop.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user626998"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1372931165,
                    "last_edit_date": 1372931165,
                    "creation_date": 1372930594,
                    "answer_id": 17466878,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Probably the best way to learn how to structure your program is by reading other people's code, especially if it's a large program to which many people have contributed. After looking at the code of many projects, you should get an idea of what the consensus style should be. </p>\n\n<p>Python, as a language, is special in that there are some strong guidelines as to how you should format your code. The first is the so-called \"Zen of Python\":</p>\n\n<blockquote>\n  <ul>\n  <li>Beautiful is better than ugly.</li>\n  <li>Explicit is better than implicit.</li>\n  <li>Simple is better than complex.</li>\n  <li>Complex is better than complicated.</li>\n  <li>Flat is better than nested.</li>\n  <li>Sparse is better than dense.</li>\n  <li>Readability counts.</li>\n  <li>Special cases aren't special enough to break the rules.</li>\n  <li>Although practicality beats purity.</li>\n  <li>Errors should never pass silently.</li>\n  <li>Unless explicitly silenced.</li>\n  <li>In the face of ambiguity, refuse the temptation to guess.</li>\n  <li>There should be one-- and preferably only one --obvious way to do it.</li>\n  <li>Although that way may not be obvious at first unless you're Dutch.</li>\n  <li>Now is better than never.</li>\n  <li>Although never is often better than <em>right</em> now.</li>\n  <li>If the implementation is hard to explain, it's a bad idea.</li>\n  <li>If the implementation is easy to explain, it may be a good idea.</li>\n  <li>Namespaces are one honking great idea -- let's do more of those!</li>\n  </ul>\n</blockquote>\n\n<p>On a more practical level, there is <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP8</a>, the style guide for Python.</p>\n\n<p>With those in mind, I would say that your code style doesn't really fit, particularly the nested functions. Find a way to flatten those out, either by using classes or moving them into separate modules. This will make the structure of your program much easier to understand.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 403854,
                        "reputation": 473017,
                        "user_id": 771848,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/2DTBv.jpg?s=256",
                        "display_name": "alecxe",
                        "link": "https://stackoverflow.com/users/771848/alecxe"
                    },
                    "is_accepted": false,
                    "score": 57,
                    "last_activity_date": 1372930836,
                    "last_edit_date": 1495541429,
                    "creation_date": 1372930836,
                    "answer_id": 17466968,
                    "question_id": 17466561,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Putting each of your top-level windows into it's own separate class gives you code re-use and better code organization. Any buttons and relevant methods that are present in the window should be defined inside this class. Here's an example (taken from <a href=\"https://stackoverflow.com/questions/16115378/tkinter-example-code-for-multiple-windows-why-wont-buttons-load-correctly\">here</a>):</p>\n\n<pre><code>import tkinter as tk\n\nclass Demo1:\n    def __init__(self, master):\n        self.master = master\n        self.frame = tk.Frame(self.master)\n        self.button1 = tk.Button(self.frame, text = 'New Window', width = 25, command = self.new_window)\n        self.button1.pack()\n        self.frame.pack()\n    def new_window(self):\n        self.newWindow = tk.Toplevel(self.master)\n        self.app = Demo2(self.newWindow)\n\nclass Demo2:\n    def __init__(self, master):\n        self.master = master\n        self.frame = tk.Frame(self.master)\n        self.quitButton = tk.Button(self.frame, text = 'Quit', width = 25, command = self.close_windows)\n        self.quitButton.pack()\n        self.frame.pack()\n    def close_windows(self):\n        self.master.destroy()\n\ndef main(): \n    root = tk.Tk()\n    app = Demo1(root)\n    root.mainloop()\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Also see:</p>\n\n<ul>\n<li><a href=\"http://docs.python.org/2/library/tkinter.html#a-simple-hello-world-program\" rel=\"noreferrer\">simple hello world from tkinter docs</a></li>\n<li><a href=\"https://stackoverflow.com/questions/16115378/tkinter-example-code-for-multiple-windows-why-wont-buttons-load-correctly\">Tkinter example code for multiple windows, why won&#39;t buttons load correctly?</a></li>\n<li><a href=\"http://www.blog.pythonlibrary.org/2012/07/26/tkinter-how-to-show-hide-a-window/\" rel=\"noreferrer\">Tkinter: How to Show / Hide a Window</a></li>\n</ul>\n\n<p>Hope that helps.</p>\n"
                }
            ]
        },
        {
            "19588290": [
                {
                    "owner": {
                        "account_id": 1782592,
                        "reputation": 82290,
                        "user_id": 1624921,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/keNmm.jpg?s=256",
                        "display_name": "Nafiul Islam",
                        "link": "https://stackoverflow.com/users/1624921/nafiul-islam"
                    },
                    "is_accepted": true,
                    "score": 70,
                    "last_activity_date": 1382700880,
                    "last_edit_date": 1382700880,
                    "creation_date": 1382699764,
                    "answer_id": 19588323,
                    "question_id": 19588290,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You need a <a href=\"http://docs.python.org/2/library/stdtypes.html#dict\"><code>dict</code></a>:</p>\n\n<pre><code>my_dict = {'cheese': 'cake'}\n</code></pre>\n\n<p>Example code (from the docs):</p>\n\n<pre><code>&gt;&gt;&gt; a = dict(one=1, two=2, three=3)\n&gt;&gt;&gt; b = {'one': 1, 'two': 2, 'three': 3}\n&gt;&gt;&gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n&gt;&gt;&gt; d = dict([('two', 2), ('one', 1), ('three', 3)])\n&gt;&gt;&gt; e = dict({'three': 3, 'one': 1, 'two': 2})\n&gt;&gt;&gt; a == b == c == d == e\nTrue\n</code></pre>\n\n<p>You can read more about dictionaries <a href=\"http://docs.python.org/2/tutorial/datastructures.html#dictionaries\">here</a>.</p>\n"
                }
            ]
        },
        {
            "19752134": [
                {
                    "owner": {
                        "account_id": 2510499,
                        "reputation": 4537,
                        "user_id": 2183102,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/750da49ea5892511d8211bbe9e3c8c7f?s=256&d=identicon&r=PG",
                        "display_name": "Alexander Zhukov",
                        "link": "https://stackoverflow.com/users/2183102/alexander-zhukov"
                    },
                    "is_accepted": true,
                    "score": 22,
                    "last_activity_date": 1600761801,
                    "last_edit_date": 1600761801,
                    "creation_date": 1383478420,
                    "answer_id": 19752474,
                    "question_id": 19752134,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also take a look at <a href=\"https://pypi.python.org/pypi/llist/\" rel=\"noreferrer\"><code>llist</code></a> python package, which provides some useful features that <code>deque</code> does not. There are not only doubly linked lists, but also single linked lists data structure in that package. IMHO, one of the biggest advantages of this package is the ability to store a reference to the llist elements.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2841781,
                        "reputation": 12456,
                        "user_id": 2441252,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/KwYqP.jpg?s=256",
                        "display_name": "Leigh",
                        "link": "https://stackoverflow.com/users/2441252/leigh"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1383476516,
                    "last_edit_date": 1495535411,
                    "creation_date": 1383476516,
                    "answer_id": 19752201,
                    "question_id": 19752134,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It appears that <a href=\"http://docs.python.org/2/library/collections.html#collections.deque\" rel=\"nofollow noreferrer\">collections.deque</a> is a doubly-linked-list library in Python. According to the documentation, it should have approximately O(1) cost when appending or popping from the head or the tail, as well as O(n) for regular inserts (which matches what we'd expect from a linked list).</p>\n\n<p>API: <a href=\"http://docs.python.org/2/library/collections.html#collections.deque\" rel=\"nofollow noreferrer\">http://docs.python.org/2/library/collections.html#collections.deque</a></p>\n\n<p>Source: <a href=\"https://stackoverflow.com/a/282238/2441252\">https://stackoverflow.com/a/282238/2441252</a></p>\n"
                }
            ]
        },
        {
            "361675": [
                {
                    "owner": {
                        "account_id": 1985545,
                        "reputation": 326,
                        "user_id": 1780891,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a59bb70d2e6bee52c15a54aaafc808b8?s=256&d=identicon&r=PG",
                        "display_name": "Harsh",
                        "link": "https://stackoverflow.com/users/1780891/harsh"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1476423649,
                    "last_edit_date": 1476423649,
                    "creation_date": 1366274479,
                    "answer_id": 16078267,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>Doctest</code> can some times lead to wrong result. Especially when output contains escape sequences. For example</p>\n\n<pre><code>def convert():\n    \"\"\"\n    &gt;&gt;&gt; convert()\n    '\\xe0\\xa4\\x95'\n    \"\"\"\n    a = '\\xe0\\xa4\\x95'\n    return a\nimport doctest\ndoctest.testmod()\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>**********************************************************************\nFile \"hindi.py\", line 3, in __main__.convert\nFailed example:\n    convert()\nExpected:\n    '\u0915'\nGot:\n    '\\xe0\\xa4\\x95'\n**********************************************************************\n1 items had failures:\n   1 of   1 in __main__.convert\n***Test Failed*** 1 failures. \n</code></pre>\n\n<p>Also doesn't check the type of the output. It just compares the output strings. For example it have made some type rational which prints just like integer if it is a whole number. Then suppose you have function which return rational. So, a doctest won't differentiate if the output is rational whole number or a integer number.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5792,
                        "reputation": 119021,
                        "user_id": 9493,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=256&d=identicon&r=PG",
                        "display_name": "Brian",
                        "link": "https://stackoverflow.com/users/9493/brian"
                    },
                    "is_accepted": true,
                    "score": 195,
                    "last_activity_date": 1464892963,
                    "last_edit_date": 1464892963,
                    "creation_date": 1229077415,
                    "answer_id": 362394,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Both are valuable.  I use both doctest and <a href=\"https://pypi.python.org/pypi/nose/\" rel=\"noreferrer\">nose</a> taking the place of unittest. I use doctest for cases where the test is giving an example of usage that is actually useful as documentation.  Generally I don't make these tests comprehensive, aiming solely for informative.  I'm effectively using doctest in reverse:  not to test my code is correct based on my doctest, but to check that my documentation is correct based on the code.</p>\n\n<p>The reason is that I find comprehensive doctests will clutter your documentation far too much, so you will either end up with either unusable docstrings, or incomplete testing.</p>\n\n<p>For actually testing the <em>code</em>, the goal is to thoroughly test every case, rather than illustrate what is does by example, which is a different goal which I think is better met by other frameworks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 174191,
                        "reputation": 5858,
                        "user_id": 403401,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/3aa1eca977b2eb18c2fd1d1adc765a2b?s=256&d=identicon&r=PG",
                        "display_name": "rahmu",
                        "link": "https://stackoverflow.com/users/403401/rahmu"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1354706282,
                    "creation_date": 1354706282,
                    "answer_id": 13722080,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't use doctest as a replacement for unittest. Although they overlap a bit, the two modules don't have the same function:</p>\n\n<ul>\n<li><p>I use <code>unittest</code> as a unit testing framework, meaning it helps me determine quickly the impact of any modification on the rest of the code.</p></li>\n<li><p>I use <code>doctest</code> as a guarantee that comments (namely docstrings) are still relevant to current version of the code. </p></li>\n</ul>\n\n<p>The widely documented benefits of test driven development I get from <code>unittest</code>. <code>doctest</code> solves the far more subtle danger of having outdated comments misleading the maintenance of the code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 33833,
                        "reputation": 8930,
                        "user_id": 95048,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/b4e2590d3e9900d359fdfcc96cbb040b?s=256&d=identicon&r=PG",
                        "display_name": "dalloliogm",
                        "link": "https://stackoverflow.com/users/95048/dalloliogm"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1338634388,
                    "creation_date": 1338634388,
                    "answer_id": 10861736,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I work as a bioinformatician, and most of the code I write is \"one time, one task\" scripts, code that will be run only once or twice and that execute a single specific task.</p>\n\n<p>In this situation, writing big unittests may be overkill, and doctests are an useful compromise. They are quicker to write, and since they are usually incorporated in the code, they allow to always keep an eye on how the code should behave, without having to have another file open. That's useful when writing small script.</p>\n\n<p>Also, doctests are useful when you have to pass your script to a researcher that is not expert in programming. Some people find it very difficult to understand how unittests are structured; on the other hand, doctests are simple examples of usage, so people can just copy and paste them to see how to use them.</p>\n\n<p>So, to resume my answer: doctests are useful when you have to write small scripts, and when you have to pass them or show them to researchers that are not computer scientists.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1237580551,
                    "creation_date": 1237580551,
                    "answer_id": 667829,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Another advantage of doctesting is that you get to make sure your code does what your documentation says it does.  After a while, software changes can make your documentation and code do different things.  :-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4928,
                        "reputation": 13810,
                        "user_id": 7650,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/052338b3d753f00bb7724f2d2ca060a4?s=256&d=identicon&r=PG",
                        "display_name": "Miki Tebeka",
                        "link": "https://stackoverflow.com/users/7650/miki-tebeka"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1229055659,
                    "creation_date": 1229055659,
                    "answer_id": 361886,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I prefer the discovery based systems (\"nose\" and \"py.test\", using the former currently).</p>\n\n<p>doctest is nice when the test is also good as a documentation, otherwise they tend to clutter the code too much.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5197,
                        "reputation": 14193,
                        "user_id": 8247,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/b5f5649d70fcd1bbb663e3543b4608f7?s=256&d=identicon&r=PG",
                        "display_name": "davidavr",
                        "link": "https://stackoverflow.com/users/8247/davidavr"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1229052302,
                    "creation_date": 1229052302,
                    "answer_id": 361788,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Using both is a valid and rather simple option. The <code>doctest</code> module provides the <code>DoctTestSuite</code> and <code>DocFileSuite</code> methods which create a unittest-compatible testsuite from a module or file, respectively.</p>\n\n<p>So I use both and typically use doctest for simple tests with functions that require little or no setup (simple types for arguments). I actually think a few doctest tests <em>help</em> document the function, rather than detract from it.</p>\n\n<p>But for more complicated cases, and for a more comprehensive set of test cases, I use unittest which provides more control and flexibility.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7883,
                        "reputation": 1956,
                        "user_id": 13868,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/8fa4f0a8d4a7f9f590620210bea2cddb?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Tony Arkles",
                        "link": "https://stackoverflow.com/users/13868/tony-arkles"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1229048386,
                    "creation_date": 1229048386,
                    "answer_id": 361703,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I use unittest exclusively; I think doctest clutters up the main module too much.  This probably has to do with writing thorough tests.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15526,
                        "reputation": 109062,
                        "user_id": 32880,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/7728fc825d24a338b763bfa32b2aea9f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "JimB",
                        "link": "https://stackoverflow.com/users/32880/jimb"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1229047974,
                    "creation_date": 1229047974,
                    "answer_id": 361698,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I almost never use doctests. I want my code to be self documenting, and the docstrings provide the documentation to the user. IMO adding hundreds of lines of tests to a module makes the docstrings far less readable. I also find unit tests easier to modify when needed. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 680,
                        "reputation": 989276,
                        "user_id": 893,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
                        "display_name": "Greg Hewgill",
                        "link": "https://stackoverflow.com/users/893/greg-hewgill"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1229046925,
                    "creation_date": 1229046925,
                    "answer_id": 361683,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're just getting started with the idea of unit testing, I would start with <code>doctest</code> because it is so simple to use. It also naturally provides some level of documentation. And for more comprehensive testing with <code>doctest</code>, you can place tests in an external file so it doesn't clutter up your documentation.</p>\n\n<p>I would suggest <code>unittest</code> if you're coming from a background of having used JUnit or something similar, where you want to be able to write unit tests in generally the same way as you have been elsewhere.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1229046818,
                    "creation_date": 1229046818,
                    "answer_id": 361680,
                    "question_id": 361675,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I use unittest almost exclusively.</p>\n\n<p>Once in a while, I'll put some stuff in a docstring that's usable by doctest.</p>\n\n<p>95% of the test cases are unittest.</p>\n\n<p>Why?  I like keeping docstrings somewhat shorter and more to the point.  Sometimes test cases help clarify a docstring.  Most of the time, the application's test cases are too long for a docstring.</p>\n"
                }
            ]
        },
        {
            "29779155": [
                {
                    "owner": {
                        "account_id": 5624305,
                        "reputation": 2505,
                        "user_id": 4453200,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/0RK5d.jpg?s=256",
                        "display_name": "Tenzin",
                        "link": "https://stackoverflow.com/users/4453200/tenzin"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1458907939,
                    "last_edit_date": 1458907939,
                    "creation_date": 1429638505,
                    "answer_id": 29779603,
                    "question_id": 29779155,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Maybe these examples will help you get an idea: </p>\n\n<pre><code>from dateutil.relativedelta import relativedelta\nimport datetime\n\ndate1 = datetime.datetime.strptime(\"2015-01-30\", \"%Y-%m-%d\").strftime(\"%d-%m-%Y\")\nprint(date1)\n\ntoday = datetime.date.today()\nprint(today)\naddMonths = relativedelta(months=3)\nfuture = today + addMonths\nprint(future) \n</code></pre>\n\n<p>If you import datetime it will give you more options in managing date and time variables. <br> In my example above I have some example code that will show you how it works. </p>\n\n<p>It is also very usefull if you would for example would like to add a x number of days, months or years to a certain date. <br></p>\n\n<p>Edit: \nTo answer you question below this post I would suggest you to look at \"calendar\"</p>\n\n<p>For example: </p>\n\n<pre><code>import calendar \njanuary2012 = calendar.monthrange(2002,1)\nprint(january2012)\nfebruary2008 = calendar.monthrange(2008,2)\nprint(february2008)\n</code></pre>\n\n<p>This return you the first workday of the month, and the number of days of the month. <br> \nWith that you can calculate what was the last workday of the month. <br> \nHere is more information about it: <a href=\"https://docs.python.org/2/library/calendar.html\" rel=\"noreferrer\">Link</a> <br>\nAlso have a loook here, looks what you might could use: <a href=\"https://pypi.python.org/pypi/business_calendar/0.1.0\" rel=\"noreferrer\">Link</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1429652651,
                    "creation_date": 1429652651,
                    "answer_id": 29783682,
                    "question_id": 29779155,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<h3>converting string 'yyyy-mm-dd' into <code>datetime</code>/<code>date</code> python</h3>\n\n<pre><code>from datetime import date\n\ndate_string = '2015-01-30'\nnow = date(*map(int, date_string.split('-')))\n# or now = datetime.strptime(date_string, '%Y-%m-%d').date()\n</code></pre>\n\n<h3>the last business day of the next month</h3>\n\n<pre><code>from datetime import timedelta\n\nDAY = timedelta(1)\nlast_bday = (now.replace(day=1) + 2*31*DAY).replace(day=1) - DAY\nwhile last_bday.weekday() &gt; 4: # Sat, Sun\n    last_bday -= DAY\nprint(last_bday)\n# -&gt; 2015-02-27\n</code></pre>\n\n<p>It doesn't take into account holidays.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 137378,
                        "reputation": 5977,
                        "user_id": 341510,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/9162e8bca37c48433207c1fccfb3bba1?s=256&d=identicon&r=PG",
                        "display_name": "chucksmash",
                        "link": "https://stackoverflow.com/users/341510/chucksmash"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1429644396,
                    "last_edit_date": 1429644396,
                    "creation_date": 1429638571,
                    "answer_id": 29779626,
                    "question_id": 29779155,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To convert a string of that format into a Python date object:</p>\n\n<pre><code>In [1]: import datetime\n\nIn [2]: t = \"2015-01-30\"\n\nIn [3]: d = datetime.date(*(int(s) for s in t.split('-')))\n\nIn [4]: d\nOut[4]: datetime.date(2015, 1, 30)\n</code></pre>\n\n<p>To move forward to the last day of next month:</p>\n\n<pre><code>In [4]: d\nOut[4]: datetime.date(2015, 1, 30)\n\nIn [5]: new_month = (d.month + 1) if d.month != 12 else 1\n\nIn [6]: new_year = d.year if d.month != 12 else d.year + 1\n\nIn [7]: import calendar\n\nIn [8]: new_day = calendar.monthrange(new_year, new_month)[1]\n\nIn [9]: d = d.replace(year=new_year,month=new_month,day=new_day)\n\nIn [10]: d\nOut[10]: datetime.date(2015, 2, 28)\n</code></pre>\n\n<p>And this <code>datetime.date</code> object can be easily converted to a 'YYYY-MM-DD' string:</p>\n\n<pre><code>In [11]: str(d)\nOut[11]: '2015-02-28'\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>To get the last business day (i.e. Monday-Friday) of the month:</p>\n\n<pre><code>In [8]: new_day = calendar.monthrange(new_year, new_month)[1]\n\nIn [9]: d = d.replace(year=new_year,month=new_month,day=new_day)\n\nIn [10]: day_of_the_week = d.isoweekday()\n\nIn [11]: if day_of_the_week &gt; 5:\n   ....:     adj_new_day = new_day - (day_of_the_week - 5)\n   ....:     d = d.replace(day=adj_new_day)\n   ....:\n\nIn [11]: d\nOut[11]: datetime.date(2015, 2, 27)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3744512,
                        "reputation": 19244,
                        "user_id": 3113477,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/TWIEk.jpg?s=256",
                        "display_name": "A.J. Uppal",
                        "link": "https://stackoverflow.com/users/3113477/a-j-uppal"
                    },
                    "is_accepted": true,
                    "score": 10,
                    "last_activity_date": 1429637630,
                    "creation_date": 1429637630,
                    "answer_id": 29779314,
                    "question_id": 29779155,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use a one-liner, that takes the <code>datetime</code>, adds a month (using a defined function), and converts back to a string:</p>\n\n<pre><code>x = add_months(datetime.datetime(*[int(item) for item in x.split('-')]), 1).strftime(\"%Y-%m-%d\")\n</code></pre>\n\n<hr>\n\n<pre><code>&gt;&gt;&gt; import datetime, calendar\n&gt;&gt;&gt; x = \"2015-01-30\"\n&gt;&gt;&gt; x = add_months(datetime.datetime(*[int(item) for item in x.split('-')]), 1).strftime(\"%Y-%m-%d\")\n&gt;&gt;&gt; x\n'2015-02-28'\n&gt;&gt;&gt; \n</code></pre>\n\n<p><code>add_months</code>:</p>\n\n<pre><code>def add_months(sourcedate,months):\n    month = sourcedate.month - 1 + months\n    year = sourcedate.year + month / 12\n    month = month % 12 + 1\n    day = min(sourcedate.day,calendar.monthrange(year,month)[1])\n    return datetime.date(year,month,day)\n</code></pre>\n"
                }
            ]
        },
        {
            "4981977": [
                {
                    "owner": {
                        "account_id": 1191471,
                        "reputation": 2774,
                        "user_id": 1164146,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://i.sstatic.net/ozQZR.jpg?s=256",
                        "display_name": "Asher",
                        "link": "https://stackoverflow.com/users/1164146/asher"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1576217885,
                    "creation_date": 1576217885,
                    "answer_id": 59317141,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Here is an example simple http request (that I tested and works)...</strong> </p>\n\n<pre><code>address = \"http://stackoverflow.com\"    \nurllib.request.urlopen(address).read().decode('utf-8')\n</code></pre>\n\n<p>Make sure to read the documentation.</p>\n\n<blockquote>\n  <p><a href=\"https://docs.python.org/3/library/urllib.request.html\" rel=\"noreferrer\">https://docs.python.org/3/library/urllib.request.html</a></p>\n</blockquote>\n\n<p>If you want to do something more detailed GET/POST REQUEST.</p>\n\n<pre><code>import urllib.request\n# HTTP REQUEST of some address\ndef REQUEST(address):\n    req = urllib.request.Request(address)\n    req.add_header('User-Agent', 'NAME (Linux/MacOS; FROM, USA)')\n    response = urllib.request.urlopen(req)\n    html = response.read().decode('utf-8')  # make sure its all text not binary\n    print(\"REQUEST (ONLINE): \" + address)\n    return html\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3865991,
                        "reputation": 1235,
                        "user_id": 3202538,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/607b3cba44c63be9468c18196542b0d3?s=256&d=identicon&r=PG",
                        "display_name": "xged",
                        "link": "https://stackoverflow.com/users/3202538/xged"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1464083088,
                    "last_edit_date": 1464083088,
                    "creation_date": 1461835108,
                    "answer_id": 36910311,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>With <a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow noreferrer\">requests</a>:</p>\n\n<pre><code>import requests\n\nresponse = requests.get(URL).text\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7313661,
                        "reputation": 135,
                        "user_id": 5572026,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/j4q77.jpg?s=256",
                        "display_name": "pytohs",
                        "link": "https://stackoverflow.com/users/5572026/pytohs"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1447764643,
                    "last_edit_date": 1447764643,
                    "creation_date": 1447764101,
                    "answer_id": 33757231,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I had the same issues for the last two days. I finally have a solution. \nI'm using the <code>info()</code> method of the object returned by <code>urlopen()</code>:</p>\n\n<pre><code>req=urllib.request.urlopen(URL)\ncharset=req.info().get_content_charset()\ncontent=req.read().decode(charset)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1485946,
                        "reputation": 6607,
                        "user_id": 1395198,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4df776645d74b915a944d83fcee6e581?s=256&d=identicon&r=PG",
                        "display_name": "Ivan Klass",
                        "link": "https://stackoverflow.com/users/1395198/ivan-klass"
                    },
                    "is_accepted": false,
                    "score": 120,
                    "last_activity_date": 1380794053,
                    "creation_date": 1380794053,
                    "answer_id": 19156107,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As for me, the solution is as following (python3):</p>\n\n<pre><code>resource = urllib.request.urlopen(an_url)\ncontent =  resource.read().decode(resource.headers.get_content_charset())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 434079,
                        "reputation": 2313,
                        "user_id": 819804,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/84c26022cdd29168dc7370b86dbea26a?s=256&d=identicon&r=PG",
                        "display_name": "wynemo",
                        "link": "https://stackoverflow.com/users/819804/wynemo"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1322759281,
                    "last_edit_date": 1322759281,
                    "creation_date": 1322758104,
                    "answer_id": 8345076,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>urllib.urlopen(url).headers.getheader('Content-Type')\n</code></pre>\n\n<p>Will output something like this:</p>\n\n<p><code>text/html; charset=utf-8</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10069,
                        "reputation": 56553,
                        "user_id": 18852,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/21bdb30e0a3bf7517c2a0795c65a20cd?s=256&d=identicon&r=PG",
                        "display_name": "Senthil Kumaran",
                        "link": "https://stackoverflow.com/users/18852/senthil-kumaran"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1297562969,
                    "creation_date": 1297562969,
                    "answer_id": 4981999,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You just need to decode the response, using the <code>Content-Type</code> header typically the last value. There is an example given in <a href=\"http://docs.python.org/dev/tutorial/stdlib.html#internet-access\" rel=\"noreferrer\">the tutorial</a> too.</p>\n\n<pre><code>output = response.decode('utf-8')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 295946,
                        "reputation": 4030,
                        "user_id": 600618,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a8109ea094e08057232b977aa951f979?s=256&d=identicon&r=PG",
                        "display_name": "Jesse Cohen",
                        "link": "https://stackoverflow.com/users/600618/jesse-cohen"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1297562940,
                    "creation_date": 1297562940,
                    "answer_id": 4981998,
                    "question_id": 4981977,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>after you make a request <code>req = urllib.request.urlopen(...)</code> you have to read the request by calling <code>html_string = req.read()</code> that will give you the string response that you can then parse the way you want.</p>\n"
                }
            ]
        },
        {
            "16450788": [
                {
                    "owner": {
                        "account_id": 1339492,
                        "reputation": 59196,
                        "user_id": 1281485,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/G4LdD.jpg?s=256",
                        "display_name": "Alfe",
                        "link": "https://stackoverflow.com/users/1281485/alfe"
                    },
                    "is_accepted": true,
                    "score": 25,
                    "last_activity_date": 1662295089,
                    "last_edit_date": 1662295089,
                    "creation_date": 1368051158,
                    "answer_id": 16451103,
                    "question_id": 16450788,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All sub processes are run in parallel.  (To avoid this one has to wait explicitly for their completion.)  They even can write into the log file at the same time, thus garbling the output.  To avoid this you should let each process write into a different logfile and collect all outputs when all processes are finished.</p>\n<pre><code>q = Queue.Queue()\nresult = {}  # used to store the results\nfor fileName in fileNames:\n  q.put(fileName)\n\ndef worker():\n  while True:\n    fileName = q.get()\n    if fileName is None:  # Sentinel?\n      return\n    subprocess_stuff_using(fileName)\n    wait_for_finishing_subprocess()\n    checksum = collect_md5_result_for(fileName)\n    result[fileName] = checksum  # store it\n\nthreads = [ threading.Thread(target=worker) for _i in range(20) ]\nfor thread in threads:\n  thread.start()\n  q.put(None)  # one Sentinel marker for each thread\n</code></pre>\n<p>After this the results should be stored in <code>result</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413148,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1368687261,
                    "last_edit_date": 1495542852,
                    "creation_date": 1368236337,
                    "answer_id": 16492930,
                    "question_id": 16450788,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>A simple way to collect output from parallel md5sum subprocesses is to use a thread pool and write to the file from the main process:</p>\n\n<pre><code>from multiprocessing.dummy import Pool # use threads\nfrom subprocess import check_output\n\ndef md5sum(filename):\n    try:\n        return check_output([\"md5sum\", filename]), None\n    except Exception as e:\n        return None, e\n\nif __name__ == \"__main__\":\n    p = Pool(number_of_processes) # specify number of concurrent processes\n    with open(\"md5sums.txt\", \"wb\") as logfile:\n        for output, error in p.imap(md5sum, filenames): # provide filenames\n            if error is None:\n               logfile.write(output)\n</code></pre>\n\n<ul>\n<li>the output from <code>md5sum</code> is small so you can store it in memory</li>\n<li><code>imap</code> preserves order</li>\n<li><code>number_of_processes</code> may be different from number of files or CPU cores (larger values doesn't mean faster: it depends on relative performance of IO (disks) and CPU)</li>\n</ul>\n\n<p>You can try to pass several files at once to the md5sum subprocesses. </p>\n\n<p>You don't need external subprocess in this case; <a href=\"https://stackoverflow.com/a/4964420/4279\">you can calculate md5 in Python</a>:</p>\n\n<pre><code>import hashlib\nfrom functools import partial\n\ndef md5sum(filename, chunksize=2**15, bufsize=-1):\n    m = hashlib.md5()\n    with open(filename, 'rb', bufsize) as f:\n        for chunk in iter(partial(f.read, chunksize), b''):\n            m.update(chunk)\n    return m.hexdigest()\n</code></pre>\n\n<p>To use multiple processes instead of threads (to allow the pure Python <code>md5sum()</code> to run in parallel utilizing multiple CPUs) just drop <code>.dummy</code> from the import in the above code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 435290,
                        "reputation": 971,
                        "user_id": 821804,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad9cb21b63033f425e85441f0f6578ba?s=256&d=identicon&r=PG",
                        "display_name": "dkz",
                        "link": "https://stackoverflow.com/users/821804/dkz"
                    },
                    "is_accepted": false,
                    "score": 32,
                    "last_activity_date": 1368052793,
                    "creation_date": 1368052793,
                    "answer_id": 16451412,
                    "question_id": 16450788,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<ol>\n<li>Yes, these md5sum processes will be started in parallel.</li>\n<li>Yes, the order of md5sums writes will be unpredictable. And generally it is considered a bad practice to share a single resource like file from many processes this way.</li>\n</ol>\n\n<p>Also your way of making <code>p.wait()</code> after the <code>for</code> loop will wait just for the last of md5sum processes to finish and the rest of them might still be running.</p>\n\n<p>But you can modify this code slightly to still have benefits of parallel processing and predictability of synchronized output if you collect the md5sum output into temporary files and collect it back into one file once all processes are done.</p>\n\n<pre><code>import subprocess\nimport os\n\nprocesses = []\nfor file in files_output:\n    f = os.tmpfile()\n    p = subprocess.Popen(['md5sum',file],stdout=f)\n    processes.append((p, f))\n\nfor p, f in processes:\n    p.wait()\n    f.seek(0)\n    logfile.write(f.read())\n    f.close()\n</code></pre>\n"
                }
            ]
        },
        {
            "21030116": [
                {
                    "owner": {
                        "account_id": 14480563,
                        "reputation": 79,
                        "user_id": 10459905,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-319nj9_AstU/AAAAAAAAAAI/AAAAAAAAA_E/5ywavuz8ytQ/photo.jpg?sz=256",
                        "display_name": "Himanshu Gupta",
                        "link": "https://stackoverflow.com/users/10459905/himanshu-gupta"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1621596128,
                    "creation_date": 1621596128,
                    "answer_id": 67635865,
                    "question_id": 21030116,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Just</strong> <strong>change</strong> <code>lst.len()</code>  <strong>to</strong> <code>len(list)</code></p>\n<blockquote>\n<p>Also can refer <a href=\"https://www.programiz.com/python-programming/methods/built-in/len\" rel=\"nofollow noreferrer\">Progamiz Python - len</a> for more information</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 6896093,
                        "reputation": 553,
                        "user_id": 5297992,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DdLO1.jpg?s=256",
                        "display_name": "Harvester Haidar",
                        "link": "https://stackoverflow.com/users/5297992/harvester-haidar"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1553026765,
                    "creation_date": 1553026765,
                    "answer_id": 55249352,
                    "question_id": 21030116,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>or by changing  </p>\n\n<pre><code>averageGrade= total / lst.len()   \n</code></pre>\n\n<p>to: </p>\n\n<pre><code>averageGrade= total / lst.__len__()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 950850,
                        "reputation": 63627,
                        "user_id": 977038,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=256&d=identicon&r=PG",
                        "display_name": "Abhijit",
                        "link": "https://stackoverflow.com/users/977038/abhijit"
                    },
                    "is_accepted": true,
                    "score": 73,
                    "last_activity_date": 1529276873,
                    "last_edit_date": 1529276873,
                    "creation_date": 1389298183,
                    "answer_id": 21030132,
                    "question_id": 21030116,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Change the line</p>\n\n<pre><code>averageGrade= total / lst.len()\n</code></pre>\n\n<p>to</p>\n\n<pre><code>averageGrade= total / len(lst)\n</code></pre>\n\n<p>Refer the python docs for the built-in <a href=\"http://docs.python.org/2/library/functions.html#len\" rel=\"noreferrer\">len</a>. The built-in len calculates the number of items in a sequence. As list is a sequence, the built-in can work on it.</p>\n\n<p>The reason it fails with the error <code>'list' object has no attribute 'len'</code>, because, <code>list</code> data type does not have any method named <code>len</code>. Refer the python docs for <a href=\"http://docs.python.org/2/tutorial/datastructures.html\" rel=\"noreferrer\">list</a></p>\n\n<p>Another important aspect is you are doing an integer division. In Python 2.7 (which I assume from your comments), unlike Python 3, returns an integer if both operands are integer.</p>\n\n<p>Change the line</p>\n\n<pre><code>total = 0.0\n</code></pre>\n\n<p>to convert one of your operand of the divisor to float.</p>\n"
                }
            ]
        },
        {
            "779495": [
                {
                    "owner": {
                        "account_id": 556766,
                        "reputation": 133513,
                        "user_id": 918959,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/GvgaU.jpg?s=256",
                        "display_name": "Antti Haapala -- \u0421\u043b\u0430\u0432\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0456",
                        "link": "https://stackoverflow.com/users/918959/antti-haapala-%d0%a1%d0%bb%d0%b0%d0%b2%d0%b0-%d0%a3%d0%ba%d1%80%d0%b0%d1%97%d0%bd%d1%96"
                    },
                    "is_accepted": false,
                    "score": 36,
                    "last_activity_date": 1574173320,
                    "creation_date": 1574173320,
                    "answer_id": 58936204,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is often not point in making an answer that details code that does <em>not</em> work as is, but I believe this to be an exception. Python 3.7 added <a href=\"https://docs.python.org/3/library/importlib.html#module-importlib.resources\" rel=\"noreferrer\"><code>importlib.resources</code></a> that is supposed to replace <code>pkg_resources</code>. It would work for accessing files within packages that do not have <em>slashes</em> in their names, i.e. </p>\n\n<pre><code>foo/\n    __init__.py\n    module1.py\n    module2.py\n    data/   \n       data.txt\n    data2.txt\n</code></pre>\n\n<p>i.e. you could access <code>data2.txt</code> inside package <code>foo</code> with for example</p>\n\n<pre><code>importlib.resources.open_binary('foo', 'data2.txt')\n</code></pre>\n\n<p>but it would fail with an exception for</p>\n\n<pre><code>&gt;&gt;&gt; importlib.resources.open_binary('foo', 'data/data.txt')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python3.7/importlib/resources.py\", line 87, in open_binary\n    resource = _normalize_path(resource)\n  File \"/usr/lib/python3.7/importlib/resources.py\", line 61, in _normalize_path\n    raise ValueError('{!r} must be only a file name'.format(path))\nValueError: 'data/data2.txt' must be only a file name\n</code></pre>\n\n<p>This cannot be fixed except by placing <code>__init__.py</code> in <code>data</code> and then using it as a package:</p>\n\n<pre><code>importlib.resources.open_binary('foo.data', 'data.txt')\n</code></pre>\n\n<p>The reason for this behaviour is <a href=\"https://www.youtube.com/watch?v=ZsGFU2qh73E&amp;feature=youtu.be&amp;t=515\" rel=\"noreferrer\">\"it is by design\"</a>; but <a href=\"https://gitlab.com/python-devs/importlib_resources/issues/58#note_239062875\" rel=\"noreferrer\">the design might change</a>...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11369,
                        "reputation": 280725,
                        "user_id": 21886,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=256&d=identicon&r=PG",
                        "display_name": "RichieHindle",
                        "link": "https://stackoverflow.com/users/21886/richiehindle"
                    },
                    "is_accepted": true,
                    "score": 23,
                    "last_activity_date": 1552867372,
                    "last_edit_date": 1552867372,
                    "creation_date": 1240439824,
                    "answer_id": 779552,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>__file__</code> to get the path to the package, like this:</p>\n\n<pre><code>import os\nthis_dir, this_filename = os.path.split(__file__)\nDATA_PATH = os.path.join(this_dir, \"data\", \"data.txt\")\nprint open(DATA_PATH).read()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17001,
                        "reputation": 3754,
                        "user_id": 37610,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a217818ffe487f8410d43bf398876b38?s=256&d=identicon&r=PG",
                        "display_name": "elliot42",
                        "link": "https://stackoverflow.com/users/37610/elliot42"
                    },
                    "is_accepted": false,
                    "score": 196,
                    "last_activity_date": 1477678587,
                    "last_edit_date": 1477678587,
                    "creation_date": 1302306159,
                    "answer_id": 5601839,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The standard way to do this is with setuptools packages and pkg_resources.</p>\n\n<p>You can lay out your package according to the following hierarchy, and configure the package setup file to point it your data resources, as per this link:</p>\n\n<p><a href=\"http://docs.python.org/distutils/setupscript.html#installing-package-data\" rel=\"noreferrer\">http://docs.python.org/distutils/setupscript.html#installing-package-data</a></p>\n\n<p>You can then re-find and use those files using pkg_resources, as per this link: </p>\n\n<p><a href=\"http://peak.telecommunity.com/DevCenter/PkgResources#basic-resource-access\" rel=\"noreferrer\">http://peak.telecommunity.com/DevCenter/PkgResources#basic-resource-access</a></p>\n\n<pre><code>import pkg_resources\n\nDATA_PATH = pkg_resources.resource_filename('&lt;package name&gt;', 'data/')\nDB_FILE = pkg_resources.resource_filename('&lt;package name&gt;', 'data/sqlite.db')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1142974,
                        "reputation": 3329,
                        "user_id": 1126386,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4187daeba1d28d7356e16961eb53c9c0?s=256&d=identicon&r=PG",
                        "display_name": "Sascha Gottfried",
                        "link": "https://stackoverflow.com/users/1126386/sascha-gottfried"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1466611203,
                    "last_edit_date": 1466611203,
                    "creation_date": 1412857983,
                    "answer_id": 26278544,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To provide a solution working today. Definitely use this API to not reinvent all those wheels.</p>\n\n<p>A true filesystem filename is needed. Zipped eggs will be extracted to a cache directory:</p>\n\n<pre><code>from pkg_resources import resource_filename, Requirement\n\npath_to_vik_logo = resource_filename(Requirement.parse(\"enb.portals\"), \"enb/portals/reports/VIK_logo.png\")\n</code></pre>\n\n<p>Return a readable file-like object for the specified resource; it may be an actual file, a StringIO, or some similar object. The stream is in \u201cbinary mode\u201d, in the sense that whatever bytes are in the resource will be read as-is.</p>\n\n<pre><code>from pkg_resources import resource_stream, Requirement\n\nvik_logo_as_stream = resource_stream(Requirement.parse(\"enb.portals\"), \"enb/portals/reports/VIK_logo.png\")\n</code></pre>\n\n<p>Package Discovery and Resource Access using pkg_resources</p>\n\n<ul>\n<li><a href=\"https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resource-extraction\" rel=\"noreferrer\">https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resource-extraction</a></li>\n<li><a href=\"https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access\" rel=\"noreferrer\">https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1874064,
                        "reputation": 17960,
                        "user_id": 1695680,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/407d4b68afe5b3a71e84a1a3d5811cff?s=256&d=identicon&r=PG",
                        "display_name": "ThorSummoner",
                        "link": "https://stackoverflow.com/users/1695680/thorsummoner"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1449741573,
                    "creation_date": 1449741573,
                    "answer_id": 34198757,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You need a name for your whole module, you're given directory tree doesn't list that detail, for me this worked:</p>\n\n<pre><code>import pkg_resources\nprint(    \n    pkg_resources.resource_filename(__name__, 'data/data.txt')\n)\n</code></pre>\n\n<p>Notibly setuptools does not appear to resolve files based on a name match with packed data files, soo you're gunna have to include the <code>data/</code> prefix pretty much no matter what. You can use <code>os.path.join('data', 'data.txt)</code> if you need alternate directory separators, Generally I find no compatibility problems with hard-coded unix style directory separators though.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30843,
                        "reputation": 10350,
                        "user_id": 84359,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/9783454fc4876ec75cb7ab27ca166707?s=256&d=identicon&r=PG",
                        "display_name": "Jacob Lyles",
                        "link": "https://stackoverflow.com/users/84359/jacob-lyles"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1240439752,
                    "creation_date": 1240439752,
                    "answer_id": 779548,
                    "question_id": 779495,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think I hunted down an answer. </p>\n\n<p>I make a module data_path.py, which I import into my other modules containing:</p>\n\n<pre><code>data_path = os.path.join(os.path.dirname(__file__),'data')\n</code></pre>\n\n<p>And then I open all my files with </p>\n\n<pre><code>open(os.path.join(data_path,'filename'), &lt;param&gt;)\n</code></pre>\n"
                }
            ]
        },
        {
            "517355": [
                {
                    "owner": {
                        "account_id": 28053,
                        "reputation": 419,
                        "user_id": 2168174,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/43bd7e3b165ae6e5efdd8a79c1c889ac?s=256&d=identicon&r=PG",
                        "display_name": "Peter",
                        "link": "https://stackoverflow.com/users/2168174/peter"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1236660875,
                    "score": 32,
                    "last_activity_date": 1709105417,
                    "last_edit_date": 1709105417,
                    "creation_date": 1236660875,
                    "answer_id": 628974,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can do it three ways:</p>\n<hr />\n<p>Use Python's automatic pretty printing:</p>\n<pre><code>print([1, 2, 3])   # Prints [1, 2, 3]\n</code></pre>\n<p>Showing the same thing with a variable:</p>\n<pre><code>numberList = [1, 2]\nnumberList.append(3)\nprint(numberList)   # Prints [1, 2, 3]\n</code></pre>\n<hr />\n<p>Use 'classic' string substitutions (ala C's printf). Note the different meanings here of % as the string-format specifier, and the % to apply the list (actually a tuple) to the formatting string. (And note the % is used as the modulo(remainder) operator for arithmetic expressions.)</p>\n<pre><code>print(&quot;[%i, %i, %i]&quot; % (1, 2, 3))\n</code></pre>\n<p>Note if we use our pre-defined variable, we'll need to turn it into a tuple to do this:</p>\n<pre><code>print(&quot;[%i, %i, %i]&quot; % tuple(numberList))\n</code></pre>\n<hr />\n<p>Use Python 3 string formatting. This is still available in earlier versions (from 2.6), but is the 'new' way of doing it in Py 3. Note you can either use positional (ordinal) arguments, or named arguments (for the heck of it I've put them in reverse order.</p>\n<pre><code>print(&quot;[{0}, {1}, {2}]&quot;.format(1, 2, 3))\n</code></pre>\n<p>Note the names 'one' ,'two' and 'three' can be whatever makes sense.)</p>\n<pre><code>print(&quot;[{one}, {two}, {three}]&quot;.format(three=3, two=2, one=1))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26078,
                        "reputation": 474061,
                        "user_id": 67579,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/nwrWYFPN.png?s=256",
                        "display_name": "willeM_ Van Onsem",
                        "link": "https://stackoverflow.com/users/67579/willem-van-onsem"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1691411606,
                    "last_edit_date": 1691411606,
                    "creation_date": 1599009447,
                    "answer_id": 63697378,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Since <a href=\"/questions/tagged/python-3.6\" class=\"post-tag\" title=\"show questions tagged &#39;python-3.6&#39;\" aria-label=\"show questions tagged &#39;python-3.6&#39;\" rel=\"tag\" aria-labelledby=\"tag-python-3.6-tooltip-container\">python-3.6</a>, Python supports <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow noreferrer\"><em>literal string interpolation</em>\u00a0<sup>[pep-498]</sup></a>. You thus can format with an <code>f</code> prefix to the string. For example:</p>\n<pre><code>x = 1\ny = 2\nz = 3\n<b>f'</b>[{x}, {y}, {z}]<b>'</b></code></pre>\n<p>This then produces:</p>\n<pre><code>&gt;&gt;&gt; f'[{x}, {y}, {z}]'\n'[1, 2, 3]'\n</code></pre>\n<p>In C# (the language of the <code>String.Format(\u2026)</code>) in the question, since <a href=\"/questions/tagged/c%23-6.0\" class=\"post-tag\" title=\"show questions tagged &#39;c#-6.0&#39;\" aria-label=\"show questions tagged &#39;c#-6.0&#39;\" rel=\"tag\" aria-labelledby=\"tag-c#-6.0-tooltip-container\">c#-6.0</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated\" rel=\"nofollow noreferrer\"><em>string interpolation</em>\u00a0<sup>[microsoft-doc]</sup></a> is supported as well, for example:</p>\n<pre><code>int x = 1;\nint y = 2;\nint z = 3;\nstring result = <b>$&quot;</b>[{x}, {y}, {z}]<b>&quot;</b>;</code></pre>\n<p>For example:</p>\n<pre><code>csharp&gt; int x = 1;\ncsharp&gt; int y = 2;\ncsharp&gt; int z = 3;\ncsharp&gt; $&quot;[{x}, {y}, {z}]&quot;;\n&quot;[1, 2, 3]&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3926947,
                        "reputation": 1,
                        "user_id": 3247006,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/An3gf.jpg?s=256",
                        "display_name": "Super Kai - Kazuya Ito",
                        "link": "https://stackoverflow.com/users/3247006/super-kai-kazuya-ito"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1675920230,
                    "last_edit_date": 1675920230,
                    "creation_date": 1656350078,
                    "answer_id": 72775989,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are 3 ways.</p>\n<p><strong>&quot;%&quot; operator</strong> which is the original way:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x, y, z = 1, 2, 3\n\nprint(&quot;[%i, %i, %i]&quot; % (x, y, z)) # [1, 2, 3]\n</code></pre>\n<p><strong>&quot;str.format()&quot;</strong> since <strong>Python 2.6</strong>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x, y, z = 1, 2, 3\n\nprint(&quot;[{0}, {1}, {2}]&quot;.format(x, y, z)) # [1, 2, 3]\n</code></pre>\n<p><strong>&quot;f-strings&quot;</strong> since <strong>Python 3.6</strong>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x, y, z = 1, 2, 3\n\nprint(f'[{x}, {y}, {z}]') # [1, 2, 3]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25479092,
                        "reputation": 125,
                        "user_id": 19275776,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/FE28k.jpg?s=256",
                        "display_name": "Praseodymium-141",
                        "link": "https://stackoverflow.com/users/19275776/praseodymium-141"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1654881663,
                    "last_edit_date": 1654881663,
                    "creation_date": 1654877896,
                    "answer_id": 72577264,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There are several places where you can get answers, for example <a href=\"https://docs.python.org/3.4/library/string.html#string.Formatter\" rel=\"nofollow noreferrer\">here</a> and <a href=\"https://www.programiz.com/python-programming/methods/string/format\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>There are lots of ways of formatting a string in python, like:</p>\n<ol>\n<li>Using the <code>format()</code> function, for example:</li>\n</ol>\n<pre><code>x = 'hello'\ny = 'person'\nxy = '{} {}'.format(x, y)\n</code></pre>\n<ol start=\"2\">\n<li>Using f-strings, for example:</li>\n</ol>\n<pre><code>x = 'hello'\ny = 'person'\nxy = f'{x} {y}'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16133210,
                        "reputation": 31,
                        "user_id": 11646278,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-Ld0_9IyYeCM/AAAAAAAAAAI/AAAAAAAAADk/J_wE6HfuuC4/photo.jpg?sz=256",
                        "display_name": "Tanu",
                        "link": "https://stackoverflow.com/users/11646278/tanu"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1598542933,
                    "creation_date": 1598542933,
                    "answer_id": 63619600,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Before answering this question please go through couple of articles given below:</strong></p>\n<p>Python Official Docs <a href=\"https://docs.python.org/3.4/library/string.html#string.Formatter\" rel=\"nofollow noreferrer\">here</a></p>\n<p><strong>Useful article</strong>:</p>\n<ul>\n<li>Python String format() - <a href=\"https://www.programiz.com/python-programming/methods/string/format\" rel=\"nofollow noreferrer\">here</a></li>\n</ul>\n<p>Now let's answer this question</p>\n<p><strong>Question</strong>: I want to do something like:</p>\n<p><code>String.Format(&quot;[{0}, {1}, {2}]&quot;, 1, 2, 3)</code> which returns:</p>\n<p><code>[1, 2, 3]</code></p>\n<p>How do I do this in Python?</p>\n<p><strong>Answer</strong>:</p>\n<p>Well this is certainly a one-line code answer which is</p>\n<p><code>print(&quot;[{0},{1},{2}]&quot;.format(1, 2, 3))</code></p>\n<p>When you execute this one-line code a list containing three values as <code>[1, 2, 3]</code> will be printed. I hope this was pretty simple and self-explanatory.</p>\n<p><strong>Thanks</strong></p>\n<p>Tanu</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17192521,
                        "reputation": 21,
                        "user_id": 12446051,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/0c246cd098dafc6c5a07ce4d62269fc0?s=256&d=identicon&r=PG",
                        "display_name": "Pit",
                        "link": "https://stackoverflow.com/users/12446051/pit"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1574860415,
                    "creation_date": 1574860415,
                    "answer_id": 59071060,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Very short answer.</p>\n\n<p>example:\nprint(\"{:05.2f}\".format(2.5163))\nreturns 02.51</p>\n\n<ul>\n<li>{} Set here Variable </li>\n<li>: Start Styling </li>\n<li>0 leading with zeroes, \" \" leading with whitespaces </li>\n<li>5 <strong>LENGTH OF FULL STRING</strong> (Point counts, 00.00 is len 5 not 4)</li>\n<li>.2 two digit after point, with rounding. </li>\n<li>f for floats</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 31614,
                        "reputation": 3972,
                        "user_id": 86949,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/7e26f4f6a649fa977ba95c60f15fef2a?s=256&d=identicon&r=PG",
                        "display_name": "toofarsideways",
                        "link": "https://stackoverflow.com/users/86949/toofarsideways"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1517671921,
                    "creation_date": 1517671921,
                    "answer_id": 48599001,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>PEP 498 which landed in <code>python 3.6</code> added literal string interpolation, which is basically a shortened form of <code>format</code>.</p>\n\n<p>You can now do:\n</p>\n\n<pre><code>f\"[{1}, {2}, {3}]\"\n</code></pre>\n\n<p>Common other uses I find useful are:</p>\n\n<pre><code>pi = 3.141592653589793\ntoday = datetime(year=2018, month=2, day=3)\n\nnum_2 = 2     # Drop assigned values in\nnum_3 = \"3\"   # Call repr(), or it's shortened form !r\npadding = 5   # Control prefix padding\nprecision = 3 #   and precision for printing\n\n\nf\"\"\"[{1},\n     {num_2},\n     {num_3!r},\n     {pi:{padding}.{precision}},\n     {today:%B %d, %Y}]\"\"\"\n</code></pre>\n\n<p>Which will produce:</p>\n\n<pre><code>\"[1,\\n     2,\\n     '3',\\n      3.14,\\n     February 03, 2018]\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3769312,
                        "reputation": 2791,
                        "user_id": 3131945,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5f6e15fc2962ebaadf97880c965157bb?s=256&d=identicon&r=PG",
                        "display_name": "RaminNietzsche",
                        "link": "https://stackoverflow.com/users/3131945/raminnietzsche"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1491997774,
                    "creation_date": 1491997774,
                    "answer_id": 43368724,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You have lot of solutions :)</p>\n\n<p><strong>simple way (C-style)</strong>:</p>\n\n<pre><code>print(\"[%i, %i, %i]\" %(1, 2, 3))\n</code></pre>\n\n<p><strong>Use <a href=\"https://docs.python.org/2/library/string.html#format-string-syntax\" rel=\"nofollow noreferrer\">str.format()</a></strong></p>\n\n<pre><code>print(\"[{0}, {1}, {2}]\", 1, 2, 3)\n</code></pre>\n\n<p><strong>Use <a href=\"https://docs.python.org/3/library/string.html#string.Template.template\" rel=\"nofollow noreferrer\">str.Template()</a></strong></p>\n\n<pre><code>s = Template('[$a, $b, $c]')\nprint(s.substitute(a = 1, b = 2, c = 3))\n</code></pre>\n\n<p>You can read <a href=\"https://www.python.org/dev/peps/pep-3101/\" rel=\"nofollow noreferrer\">PEP 3101 -- Advanced String Formatting</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 391865,
                        "reputation": 2238,
                        "user_id": 752774,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2c46e316f0a73e5050277381245708d6?s=256&d=identicon&r=PG",
                        "display_name": "radeklos",
                        "link": "https://stackoverflow.com/users/752774/radeklos"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1424967500,
                    "creation_date": 1424967500,
                    "answer_id": 28747429,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think that this combination is missing :P</p>\n\n<pre><code>\"[{0}, {1}, {2}]\".format(*[1, 2, 3])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12184,
                        "reputation": 14493,
                        "user_id": 23855,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/7e01724270741126f0d814d028078dff?s=256&d=identicon&r=PG",
                        "display_name": "chills42",
                        "link": "https://stackoverflow.com/users/23855/chills42"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1389982415,
                    "last_edit_date": 1389982415,
                    "creation_date": 1233860347,
                    "answer_id": 517372,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You're looking for string formatting, which in python is based on the sprintf function in C.</p>\n\n<pre><code>print \"[%s, %s, %s]\" % (1, 2, 3)\n</code></pre>\n\n<p>For a complete reference look here:\n    <a href=\"http://docs.python.org/library/stdtypes.html#string-formatting\" rel=\"noreferrer\">http://docs.python.org/library/stdtypes.html#string-formatting</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 2201096,
                        "reputation": 11,
                        "user_id": 2867102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1ed47f7e29f8a56ed7b63e2c9049c859?s=256&d=identicon&r=PG",
                        "display_name": "Yupa",
                        "link": "https://stackoverflow.com/users/2867102/yupa"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1381410212,
                    "creation_date": 1381410212,
                    "answer_id": 19296530,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you don't know how many items are in list, this aproach is the most universal</p>\n\n<pre><code>&gt;&gt;&gt; '[{0}]'.format(', '.join([str(i) for i in [1,2,3]]))\n\n'[1, 2, 3]'\n</code></pre>\n\n<p>It is mouch simplier for list of strings</p>\n\n<pre><code>&gt;&gt;&gt; '[{0}]'.format(', '.join(['a','b','c']))\n'[a, b, c]'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 72838,
                        "reputation": 12885,
                        "user_id": 210090,
                        "user_type": "registered",
                        "accept_rate": 20,
                        "profile_image": "https://www.gravatar.com/avatar/781fbad324e44f683e3a6b32a166a9bf?s=256&d=identicon&r=PG",
                        "display_name": "Riccardo Galli",
                        "link": "https://stackoverflow.com/users/210090/riccardo-galli"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1341878715,
                    "creation_date": 1341878715,
                    "answer_id": 11404948,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To print elements sequentially use {} without specifying the index</p>\n\n<pre><code>print('[{},{},{}]'.format(1,2,3))\n</code></pre>\n\n<p>(works since python 2.7 and python 3.1)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 21100,
                        "reputation": 38139,
                        "user_id": 51025,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=256&d=identicon&r=PG",
                        "display_name": "DNS",
                        "link": "https://stackoverflow.com/users/51025/dns"
                    },
                    "is_accepted": true,
                    "score": 76,
                    "last_activity_date": 1233861389,
                    "creation_date": 1233861389,
                    "answer_id": 517471,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The previous answers have used % formatting, which is being phased out in Python 3.0+.  Assuming you're using Python 2.6+, a more future-proof formatting system is described here:</p>\n\n<p><a href=\"http://docs.python.org/library/string.html#formatstrings\" rel=\"noreferrer\">http://docs.python.org/library/string.html#formatstrings</a></p>\n\n<p>Although there are more advanced features as well, the simplest form ends up looking very close to what you wrote:</p>\n\n<pre><code>&gt;&gt;&gt; \"[{0}, {1}, {2}]\".format(1, 2, 3)\n[1, 2, 3]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 22007,
                        "reputation": 4098,
                        "user_id": 53936,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1fcd83574b3162ddb7ce7c62797e11a5?s=256&d=identicon&r=PG",
                        "display_name": "JosefAssad",
                        "link": "https://stackoverflow.com/users/53936/josefassad"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1233860175,
                    "creation_date": 1233860175,
                    "answer_id": 517363,
                    "question_id": 517355,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You haven't formulated yourself very commendably, but I'll venture a guess this is what you're looking for:</p>\n\n<pre><code>foo = \"Hello\"\nbar = \"world\"\nbaz = 2\nprint \"%s, %s number %d\" % (foo, bar, baz)\n</code></pre>\n"
                }
            ]
        },
        {
            "9184497": [
                {
                    "owner": {
                        "account_id": 1030693,
                        "reputation": 678,
                        "user_id": 1039039,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/f5b626c0ff4eb9f45e8a1b5b6527fa18?s=256&d=identicon&r=PG",
                        "display_name": "tom stratton",
                        "link": "https://stackoverflow.com/users/1039039/tom-stratton"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1328685479,
                    "last_edit_date": 1328685479,
                    "creation_date": 1328654899,
                    "answer_id": 9185220,
                    "question_id": 9184497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I assume from your example that you want to use zip() but, just in case what you really want to do is iterate over ALL possible combinations of xscat and yscat then you have more work to do...</p>\n\n<p>So, if you want (xscat[0],yscat[0]), (xscat[0], yscat[1]), (xscat[0], yscat[2]), etc... you can first do a nested comprehension:</p>\n\n<blockquote>\n  <p>((x,y) for x in xscat for y in yscat) </p>\n</blockquote>\n\n<p>will generate ALL the pairs and</p>\n\n<blockquote>\n  <p>[peaks(x,y) for x in xscat for y in yscat] </p>\n</blockquote>\n\n<p>should yield the solution if you want all permutations.</p>\n\n<p>Also, take care with zip/map - you will get different results from those if the lists (xscat and yscat) are not of the same lenght - make sure to pick the one that yields that solution you need.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15970,
                        "reputation": 13450,
                        "user_id": 34329,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b6846c76073e26cfdb1e0dc4ab8fd5db?s=256&d=identicon&r=PG",
                        "display_name": "grieve",
                        "link": "https://stackoverflow.com/users/34329/grieve"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1328651433,
                    "creation_date": 1328651433,
                    "answer_id": 9184528,
                    "question_id": 9184497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try zip: <a href=\"http://docs.python.org/library/functions.html#zip\" rel=\"nofollow\">http://docs.python.org/library/functions.html#zip</a></p>\n\n<pre><code>[peaks(x) for x in zip(zscat, yscat)]\n</code></pre>\n\n<p><strong>Edit</strong></p>\n\n<p>This assumes the peaks can accept a tuple.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 480822,
                        "reputation": 49045,
                        "user_id": 894284,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/5b15ac856b808e329185b1f653805d09?s=256&d=identicon&r=PG",
                        "display_name": "Matt Fenwick",
                        "link": "https://stackoverflow.com/users/894284/matt-fenwick"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1328651354,
                    "creation_date": 1328651354,
                    "answer_id": 9184518,
                    "question_id": 9184497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You need to use <code>zip</code>:</p>\n\n<pre><code>[peaks([x,y]) for (x,y) in zip(xscat, yscat)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8083,
                        "reputation": 374652,
                        "user_id": 14343,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
                        "display_name": "Ned Batchelder",
                        "link": "https://stackoverflow.com/users/14343/ned-batchelder"
                    },
                    "is_accepted": true,
                    "score": 43,
                    "last_activity_date": 1328651343,
                    "creation_date": 1328651343,
                    "answer_id": 9184514,
                    "question_id": 9184497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>zip</code> is what you want:</p>\n\n<pre><code>[peaks([x,y]) for x,y in zip(xscat,yscat)]\n</code></pre>\n"
                }
            ]
        },
        {
            "25158898": [
                {
                    "owner": {
                        "account_id": 1257651,
                        "reputation": 13156,
                        "user_id": 1216776,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/J0KLS.gif?s=256",
                        "display_name": "stark",
                        "link": "https://stackoverflow.com/users/1216776/stark"
                    },
                    "is_accepted": true,
                    "score": 31,
                    "last_activity_date": 1662423437,
                    "last_edit_date": 1662423437,
                    "creation_date": 1407324129,
                    "answer_id": 25159060,
                    "question_id": 25158898,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python allows you to add and delete attributes at any time.  There are two problems with not doing it at <code>__init__</code></p>\n<ol>\n<li>Your definitions aren't all in one place</li>\n<li>If you use it in a function, you may not have defined it yet</li>\n</ol>\n<p>Note that you can fix the above problem of setting an attribute later by defining it in <code>__init__</code> as:</p>\n<pre><code>self.dontknowyet = None      # Everyone is happy\n</code></pre>\n"
                }
            ]
        },
        {
            "30024948": [
                {
                    "owner": {
                        "account_id": 181901,
                        "reputation": 25963,
                        "user_id": 416224,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/41e5658bdf6cb4f6eba76705b970a468?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Kijewski",
                        "link": "https://stackoverflow.com/users/416224/kijewski"
                    },
                    "is_accepted": false,
                    "score": 58,
                    "last_activity_date": 1681935080,
                    "last_edit_date": 1681935080,
                    "creation_date": 1430794934,
                    "answer_id": 30043552,
                    "question_id": 30024948,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <a href=\"https://flask.palletsprojects.com/en/2.2.x/api/?highlight=send_file#flask.send_file\" rel=\"nofollow noreferrer\"><code>flask.send_file()</code></a> to send a static file:</p>\n<pre><code>from flask import send_file\n\n@app.route('/getPlotCSV') # this is a job for GET, not POST\ndef plot_csv():\n    return send_file(\n        'outputs/Adjacency.csv',\n        mimetype='text/csv',\n        download_name='Adjacency.csv',\n        as_attachment=True\n    )\n</code></pre>\n<p><sub>Prior to Flask 2.0, <code>download_name</code> was called <code>attachment_filename</code>.</sub></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5436,
                        "reputation": 168208,
                        "user_id": 8747,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b1ee0402d24625f555c25ea8511aad31?s=256&d=identicon&r=PG",
                        "display_name": "Rob\u1d69",
                        "link": "https://stackoverflow.com/users/8747/rob%e1%b5%a9"
                    },
                    "is_accepted": true,
                    "score": 101,
                    "last_activity_date": 1430794357,
                    "creation_date": 1430794357,
                    "answer_id": 30043470,
                    "question_id": 30024948,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is one way to download a CSV file with no Javascript:</p>\n\n<pre><code>#!/usr/bin/python\n\nfrom flask import Flask, Response\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return '''\n        &lt;html&gt;&lt;body&gt;\n        Hello. &lt;a href=\"/getPlotCSV\"&gt;Click me.&lt;/a&gt;\n        &lt;/body&gt;&lt;/html&gt;\n        '''\n\n@app.route(\"/getPlotCSV\")\ndef getPlotCSV():\n    # with open(\"outputs/Adjacency.csv\") as fp:\n    #     csv = fp.read()\n    csv = '1,2,3\\n4,5,6\\n'\n    return Response(\n        csv,\n        mimetype=\"text/csv\",\n        headers={\"Content-disposition\":\n                 \"attachment; filename=myplot.csv\"})\n\n\napp.run(debug=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 475091,
                        "reputation": 1936,
                        "user_id": 885210,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b7616e49892ba31eec338d27ba4765e2?s=256&d=identicon&r=PG",
                        "display_name": "wanderlust",
                        "link": "https://stackoverflow.com/users/885210/wanderlust"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1430728346,
                    "last_edit_date": 1430728346,
                    "creation_date": 1430726285,
                    "answer_id": 30025277,
                    "question_id": 30024948,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Firstly you need to import from flask <code>make_response</code>, that will generate your response and create variable, something like <code>response</code>.\nSecondly, make <code>response.content_type = \"text/csv\"</code>\nThirdly - return your response.</p>\n"
                }
            ]
        },
        {
            "5375220": [
                {
                    "owner": {
                        "account_id": 58865,
                        "reputation": 2565,
                        "user_id": 176210,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/6938b3bad0d4c21049a6c6528d7f1edc?s=256&d=identicon&r=PG",
                        "display_name": "3k-",
                        "link": "https://stackoverflow.com/users/176210/3k"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1584917935,
                    "last_edit_date": 1584917935,
                    "creation_date": 1474553368,
                    "answer_id": 39641399,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is a problem with Zaar Hai's solution, namely that it leaves the socket open. The reason I was looking for a solution to stop Tornado is I'm running unit tests against my app server and I needed a way to start/stop the server between tests to have a clear state (empty session, etc.). By leaving the socket open, the second test always ran into an <code>Address already in use</code> error. So I came up with the following:</p>\n\n<pre><code>import logging as log\nfrom time import sleep\nfrom threading import Thread\n\nimport tornado\nfrom tornado.httpserver import HTTPServer\n\n\nserver = None\nthread = None\n\n\ndef start_app():\n    def start():\n        global server\n        server = HTTPServer(create_app())\n        server.listen(TEST_PORT, TEST_HOST)\n        tornado.ioloop.IOLoop.instance().start()\n    global thread\n    thread = Thread(target=start)\n    thread.start()\n    # wait for the server to fully initialize\n    sleep(0.5)\n\n\ndef stop_app():\n    server.stop()\n    # silence StreamClosedError Tornado is throwing after it is stopped\n    log.getLogger().setLevel(log.FATAL)\n    ioloop = tornado.ioloop.IOLoop.instance()\n    ioloop.add_callback(ioloop.stop)\n    thread.join()\n</code></pre>\n\n<p>So the main idea here is to keep a reference to the <code>HTTPServer</code> instance and call its <code>stop()</code> method. And <code>create_app()</code> just returns an <code>Application</code> instance configured with handlers. Now you can use these methods in your unit tests like this:</p>\n\n<pre><code>class FoobarTest(unittest.TestCase):\n\n    def setUp(self):\n        start_app()\n\n    def tearDown(self):\n        stop_app()\n\n    def test_foobar(self):\n        # here the server is up and running, so you can make requests to it\n        pass\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2773816,
                        "reputation": 526,
                        "user_id": 2387835,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e7d2dc44ae63b35d43b25dc7dbd8ef08?s=256&d=identicon&r=PG",
                        "display_name": "n1nj4",
                        "link": "https://stackoverflow.com/users/2387835/n1nj4"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1488390826,
                    "creation_date": 1488390826,
                    "answer_id": 42538686,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>We want to use a <code>multiprocessing.Process</code> with a <code>tornado.ioloop.IOLoop</code> to work around the cPython GIL for performance and independency. To get access to the IOLoop we need to use <code>Queue</code> to pass the shutdown signal through.</p>\n\n<p>Here is a minimalistic example:</p>\n\n<pre><code>class Server(BokehServer)\n\n    def start(self, signal=None):\n        logger.info('Starting server on http://localhost:%d'\n                    % (self.port))\n\n        if signal is not None:\n            def shutdown():\n                if not signal.empty():\n                    self.stop()\n            tornado.ioloop.PeriodicCallback(shutdown, 1000).start()\n\n        BokehServer.start(self)\n        self.ioloop.start()\n\n    def stop(self, *args, **kwargs):  # args important for signals\n        logger.info('Stopping server...')\n        BokehServer.stop(self)\n        self.ioloop.stop()\n</code></pre>\n\n<p>The Process</p>\n\n<pre><code>import multiprocessing as mp\nimport signal\n\nfrom server import Server  # noqa\n\nclass ServerProcess(mp.Process):\n    def __init__(self, *args, **kwargs):\n        self.server = Server(*args, **kwargs)\n        self.shutdown_signal = _mp.Queue(1)\n        mp.Process.__init__(self)\n\n        signal.signal(signal.SIGTERM, self.server.stop)\n        signal.signal(signal.SIGINT, self.server.stop)\n\n    def run(self):\n        self.server.start(signal=self.shutdown_signal)\n\n    def stop(self):\n        self.shutdown_signal.put(True)\n\nif __name__ == '__main__':\n    p = ServerProcess()\n    p.start()\n</code></pre>\n\n<p>Cheers!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 384952,
                        "reputation": 2213,
                        "user_id": 741802,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/9f9b4a3c4fb5f023593e0c70d3e45412?s=256&d=identicon&r=PG",
                        "display_name": "Alexandre Nucera",
                        "link": "https://stackoverflow.com/users/741802/alexandre-nucera"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1459427003,
                    "creation_date": 1459427003,
                    "answer_id": 36333403,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In case you do no want to bother with threads, you could catch a keyboard interrupt signal :</p>\n\n<pre><code>try:\n    tornado.ioloop.IOLoop.instance().start()\n# signal : CTRL + BREAK on windows or CTRL + C on linux\nexcept KeyboardInterrupt:\n    tornado.ioloop.IOLoop.instance().stop()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 148539,
                        "reputation": 9789,
                        "user_id": 360390,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://i.sstatic.net/1Y5or.png?s=256",
                        "display_name": "Zaar Hai",
                        "link": "https://stackoverflow.com/users/360390/zaar-hai"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1450969469,
                    "last_edit_date": 1450969469,
                    "creation_date": 1372262826,
                    "answer_id": 17325148,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the solution how to stop Torando from another thread. Schildmeijer provided a good hint, but it took me a while to actually figure the final example that works. </p>\n\n<p>Please see below:</p>\n\n<pre><code>import threading\nimport tornado.ioloop\nimport tornado.web\nimport time\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world!\\n\")\n\ndef start_tornado(*args, **kwargs):\n    application = tornado.web.Application([\n        (r\"/\", MainHandler),\n    ])\n    application.listen(8888)\n    print \"Starting Torando\"\n    tornado.ioloop.IOLoop.instance().start()\n    print \"Tornado finished\"\n\ndef stop_tornado():\n    ioloop = tornado.ioloop.IOLoop.instance()\n    ioloop.add_callback(ioloop.stop)\n    print \"Asked Tornado to exit\"\n\ndef main():\n\n    t = threading.Thread(target=start_tornado)  \n    t.start()\n\n    time.sleep(5)\n\n    stop_tornado()\n    t.join()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1232552,
                        "reputation": 541,
                        "user_id": 1196816,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/604da87aaa71895a55fee2b01edfa5a5?s=256&d=identicon&r=PG",
                        "display_name": "Mukul M.",
                        "link": "https://stackoverflow.com/users/1196816/mukul-m"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1391753897,
                    "last_edit_date": 1391753897,
                    "creation_date": 1391615088,
                    "answer_id": 21581763,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you need this behavior for unit testing, take a look at <a href=\"http://www.tornadoweb.org/en/stable/testing.html#tornado.testing.AsyncTestCase\" rel=\"nofollow\">tornado.testing.AsyncTestCase</a>.</p>\n\n<blockquote>\n  <p>By default, a new IOLoop is constructed for each test and is available as self.io_loop. This IOLoop should be used in the construction of HTTP clients/servers, etc. If the code being tested requires a global IOLoop, subclasses should override get_new_ioloop to return it.</p>\n</blockquote>\n\n<p>If you need to start and stop an IOLoop for some other purpose and can't call ioloop.stop() from a callback for some reason, a multi-threaded implementation is possible. To avoid race conditions, however, you need to synchronize access to the ioloop, which is actually impossible. Something like the following will result in deadlock:</p>\n\n<p>Thread 1:</p>\n\n<pre><code>with lock:\n    ioloop.start()\n</code></pre>\n\n<p>Thread 2:</p>\n\n<pre><code>with lock:\n    ioloop.stop()\n</code></pre>\n\n<p>because thread 1 will never release the lock (start() is blocking) and thread 2 will wait till the lock is released to stop the ioloop.</p>\n\n<p>The only way to do it is for thread 2 to call ioloop.add_callback(ioloop.stop), which will call stop() on thread 1 in the event loop's next iteration. Rest assured, ioloop.add_callback() is <a href=\"http://www.tornadoweb.org/en/stable/ioloop.html#callbacks-and-timeouts\" rel=\"nofollow\">thread-safe</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1671756,
                        "reputation": 2117,
                        "user_id": 1538095,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/22d28ad41036bb932e7c9a0b187ac546?s=256&d=identicon&r=PG",
                        "display_name": "julienfr112",
                        "link": "https://stackoverflow.com/users/1538095/julienfr112"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1373493896,
                    "creation_date": 1373493896,
                    "answer_id": 17581749,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just add this before the start():</p>\n\n<blockquote>\n  <p>IOLoop.instance().add_timeout(10,IOLoop.instance().stop)</p>\n</blockquote>\n\n<p>It will register the stop function as a callback in the loop and lauch it 10 second after the start</p>\n"
                },
                {
                    "owner": {
                        "account_id": 447617,
                        "reputation": 6352,
                        "user_id": 841337,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2a1ea0126994ecec85f5a71a5d04577e?s=256&d=identicon&r=PG",
                        "display_name": "Nisan.H",
                        "link": "https://stackoverflow.com/users/841337/nisan-h"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1344028959,
                    "last_edit_date": 1344028959,
                    "creation_date": 1344022370,
                    "answer_id": 11802153,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Tornado's IOloop.instance() has trouble stopping from an external signal when run under multiprocessing.Process.</p>\n\n<p>The only solution I came up with that works <em>consistently</em>, is by using Process.terminate():</p>\n\n<pre><code>import tornado.ioloop, tornado.web\nimport time\nimport multiprocessing\n\nclass Handler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\napplication = tornado.web.Application([ (r\"/\", Handler) ])\n\nclass TornadoStop(Exception):\n    pass\ndef stop():\n    raise TornadoStop\nclass worker(multiprocessing.Process):\n    def __init__(self):\n        multiprocessing.Process.__init__(self)\n        application.listen(8888)\n        self.ioloop = tornado.ioloop.IOLoop.instance()\n\n    def run(self):\n        self.ioloop.start()\n\n    def stop(self, timeout = 0):\n        self.ioloop.stop()\n        time.sleep(timeout)\n        self.terminate()\n\n\n\nif __name__ == \"__main__\":\n\n    w = worker()\n    print 'starting server'\n    w.start()\n    t = 2\n    print 'waiting {} seconds before stopping'.format(t)\n    for i in range(t):\n        time.sleep(1)\n        print i\n    print 'stopping'\n    w.stop(1)\n    print 'stopped'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1155944,
                        "reputation": 350,
                        "user_id": 1136562,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/b2ee8141e82ad02dfd7a832868f1e523?s=256&d=identicon&r=PG",
                        "display_name": "Robert Anderon",
                        "link": "https://stackoverflow.com/users/1136562/robert-anderon"
                    },
                    "is_accepted": true,
                    "score": 31,
                    "last_activity_date": 1325981524,
                    "creation_date": 1325981524,
                    "answer_id": 8774273,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I just ran into this and found this issue myself, and using info from this thread came up with the following.  I simply took my working stand alone Tornado code (copied from all the examples) and moved the actual starting code into a function.  I then called the function as a threading thread.  My case different as the threading call was done from my existing code where I just imported the startTornado and stopTornado routines. </p>\n\n<p>The suggestion above seemed to work great, so I figured I would supply the missing example code.  I tested this code under Linux on a FC16 system (and fixed my initial type-o).</p>\n\n<pre><code>import tornado.ioloop, tornado.web\n\nclass Handler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\napplication = tornado.web.Application([ (r\"/\", Handler) ])\n\ndef startTornado():\n    application.listen(8888)\n    tornado.ioloop.IOLoop.instance().start()\n\ndef stopTornado():\n    tornado.ioloop.IOLoop.instance().stop()\n\nif __name__ == \"__main__\":\n    import time, threading\n    threading.Thread(target=startTornado).start()\n    print \"Your web server will self destruct in 2 minutes\"\n    time.sleep(120)\n    stopTornado()\n</code></pre>\n\n<p>Hope this helps the next person.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 49953,
                        "reputation": 20916,
                        "user_id": 148909,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/27ed4bac83aae5c5a3a573a131d23e71?s=256&d=identicon&r=PG",
                        "display_name": "Schildmeijer",
                        "link": "https://stackoverflow.com/users/148909/schildmeijer"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1300725093,
                    "creation_date": 1300725093,
                    "answer_id": 5380605,
                    "question_id": 5375220,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>To stop the entire ioloop you simply invoke the ioloop.stop method when you have finished the unit test. (Remember that the only (documented) thread safe method is ioloop.add_callback, ie. if the unit tests is executed by another thread, you could wrap the stop invocation in a callback)</p>\n\n<p>If its enough to stop the http web server you invoke the <a href=\"https://github.com/facebook/tornado/blob/master/tornado/httpserver.py\" rel=\"nofollow\">httpserver</a>.stop() method</p>\n"
                }
            ]
        },
        {
            "29558007": [
                {
                    "owner": {
                        "account_id": 19330454,
                        "reputation": 486,
                        "user_id": 14132185,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/511ecd15e3b9023f675f12761ba6016e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Tanish Sarmah",
                        "link": "https://stackoverflow.com/users/14132185/tanish-sarmah"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1625140714,
                    "last_edit_date": 1625140714,
                    "creation_date": 1599496613,
                    "answer_id": 63781328,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use list comprehensions for this problem as it will solve it in only two lines.</p>\n<pre><code>n = int(input(&quot;Enter the range of the list:\\n&quot;))\nl1 = [i for i in range(n)] #Creates list of numbers in the range 0 to n\n\n\nprint(l1)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 20828525,
                        "reputation": 51,
                        "user_id": 15302326,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b7c39a7bc4a85d282ac8b924e8f5c5df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user15302326",
                        "link": "https://stackoverflow.com/users/15302326/user15302326"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1614508526,
                    "last_edit_date": 1614508526,
                    "creation_date": 1614467753,
                    "answer_id": 66404355,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is a way to generate n consecutive numbers in equal intervals between them starting from 0 to 100 using numpy:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\n\nmyList = np.linspace(0, 100, n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18669417,
                        "reputation": 3001,
                        "user_id": 13608599,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2d51db76365215a1a881d0320e08441a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jsmart",
                        "link": "https://stackoverflow.com/users/13608599/jsmart"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1596379457,
                    "creation_date": 1596379457,
                    "answer_id": 63217332,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>itertools.count()</code> to generate unbounded sequences.  (itertools is in the Python standard library).  Docs here:<br />\n<a href=\"https://docs.python.org/3/library/itertools.html#itertools.count\" rel=\"nofollow noreferrer\">https://docs.python.org/3/library/itertools.html#itertools.count</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8867940,
                        "reputation": 33,
                        "user_id": 6622513,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1160844007305407/picture?type=large",
                        "display_name": "Diyar T Alzuhairi",
                        "link": "https://stackoverflow.com/users/6622513/diyar-t-alzuhairi"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1522844554,
                    "creation_date": 1522844554,
                    "answer_id": 49650930,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Note :-</strong> Certainly in python-3x you need to use <strong>Range function</strong> It works to generate numbers on demand, standard method to use <strong>Range function</strong> to make a list of consecutive numbers is </p>\n\n<pre><code>x=list(range(10))\n#\"list\"_will_make_all_numbers_generated_by_range_in_a_list\n#number_in_range_(10)_is_an_option_you_can_change_as_you_want\nprint (x)\n#Output_is_ [0,1,2,3,4,5,6,7,8,9]\n</code></pre>\n\n<p>Also if you want to make <strong>an function</strong> to generate a list of consecutive numbers by using <strong>Range function</strong> watch this code ! </p>\n\n<pre><code>def  consecutive_numbers(n) :\n    list=[i for i in range(n)]\n    return (list)\nprint(consecutive_numbers(10))\n</code></pre>\n\n<p>Good Luck! </p>\n"
                },
                {
                    "owner": {
                        "account_id": 3655489,
                        "reputation": 173,
                        "user_id": 3046630,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2d6a333fee974281e39a0684d6778bf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ds_chem",
                        "link": "https://stackoverflow.com/users/3046630/ds-chem"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1508087123,
                    "last_edit_date": 1508087123,
                    "creation_date": 1428659082,
                    "answer_id": 29558209,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using Python's built in range function:</p>\n\n<p><strong>Python 2</strong></p>\n\n<pre><code>input = 8\noutput = range(input + 1)\n\nprint output\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p><strong>Python 3</strong></p>\n\n<pre><code>input = 8\noutput = list(range(input + 1))\n\nprint(output)\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7983539,
                        "reputation": 616,
                        "user_id": 6023918,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/028cb88dbff520246af5f10cc2cec450?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "StonedTensor",
                        "link": "https://stackoverflow.com/users/6023918/stonedtensor"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1478631735,
                    "creation_date": 1478631735,
                    "answer_id": 40494542,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Depending on how you want the result, you can also print each number in a for loop:</p>\n\n<pre><code>def numbers():\n    for i in range(int(input('How far do you wanna go? '))+1):\n        print(i)\n</code></pre>\n\n<p>So if the user input was 7 for example:</p>\n\n<pre><code>How far do you wanna go? 7\n0\n1\n2\n3\n4\n5\n6\n7\n</code></pre>\n\n<p>You can also delete the '+1' in the for loop and place it on the print statement, which will change it to starting at 1 instead of 0. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1219964,
                        "reputation": 239023,
                        "user_id": 1903116,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/w6Ffg.jpg?s=256",
                        "display_name": "thefourtheye",
                        "link": "https://stackoverflow.com/users/1903116/thefourtheye"
                    },
                    "is_accepted": true,
                    "score": 160,
                    "last_activity_date": 1428677900,
                    "last_edit_date": 1495535499,
                    "creation_date": 1428658721,
                    "answer_id": 29558077,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python 3, you can use the builtin <a href=\"https://docs.python.org/3/library/functions.html#func-range\" rel=\"noreferrer\"><code>range</code></a> function like this</p>\n\n<pre><code>&gt;&gt;&gt; list(range(9))\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p><strong>Note 1:</strong> Python 3.x's <code>range</code> function, returns a <code>range</code> object. If you want a list you need to explicitly convert that to a list, with the <a href=\"https://docs.python.org/3/library/functions.html#func-list\" rel=\"noreferrer\"><code>list</code></a> function like I have shown in the answer.</p>\n\n<p><strong>Note 2:</strong> We pass number 9 to <code>range</code> function because, <code>range</code> function will generate numbers till the given number but not including the number. So, we give the actual number + 1.</p>\n\n<p><strong>Note 3:</strong> There is a small difference in functionality of <code>range</code> in Python 2 and 3. You can read more about that in <a href=\"https://stackoverflow.com/a/23221045/1903116\">this answer</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2610987,
                        "reputation": 465,
                        "user_id": 2261095,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/zH3Ih.jpg?s=256",
                        "display_name": "jester112358",
                        "link": "https://stackoverflow.com/users/2261095/jester112358"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1428660540,
                    "creation_date": 1428660540,
                    "answer_id": 29558739,
                    "question_id": 29558007,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just to give you another example, although range(value) is by far the best way to do this, this might help you later on something else.</p>\n\n<pre><code>list = []\ncalc = 0\n\nwhile int(calc) &lt; 9:\n    list.append(calc)\n    calc = int(calc) + 1\n\nprint list\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n"
                }
            ]
        },
        {
            "4859129": [
                {
                    "owner": {
                        "account_id": 290034,
                        "reputation": 636,
                        "user_id": 591336,
                        "user_type": "registered",
                        "accept_rate": 12,
                        "profile_image": "https://www.gravatar.com/avatar/540c1342ec4e9b506bf230420162624b?s=256&d=identicon&r=PG",
                        "display_name": "vicmortelmans",
                        "link": "https://stackoverflow.com/users/591336/vicmortelmans"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1617797393,
                    "creation_date": 1617797393,
                    "answer_id": 66985779,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One particular use of <code>__new__</code> is to make the class a singleton:</p>\n<pre><code>class SingletonClass(object):\n  def __new__(cls):\n    if not hasattr(cls, 'instance'):\n      cls.instance = super(SingletonClass, cls).__new__(cls)\n    return cls.instance \n</code></pre>\n<p>(source: <a href=\"https://www.geeksforgeeks.org/singleton-pattern-in-python-a-complete-guide/\" rel=\"nofollow noreferrer\" title=\"Singleton Pattern in Python - A Complete Guide - GeeksforGeeks\">Singleton Pattern in Python - A Complete Guide - GeeksforGeeks</a>)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 96435,
                        "reputation": 991,
                        "user_id": 262108,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a1eadcae1ca35fb840f5a6fdb9668f4b?s=256&d=identicon&r=PG",
                        "display_name": "lonetwin",
                        "link": "https://stackoverflow.com/users/262108/lonetwin"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1530304612,
                    "last_edit_date": 1530304612,
                    "creation_date": 1492001294,
                    "answer_id": 43370010,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Just want to add a word about the <em>intent</em> (as opposed to the behavior) of defining <code>__new__</code> versus <code>__init__</code>.</p>\n\n<p>I came across this question (among others) when I was trying to understand the best way to define a class factory. I realized that one of the ways in which <code>__new__</code> is conceptually different from <code>__init__</code> is the fact that the benefit of <code>__new__</code> is exactly what was stated in the question:</p>\n\n<blockquote>\n  <p>So the only benefit of the __new__ method is that the instance variable will start out as an empty string, as opposed to NULL. But why is this ever useful, since if we cared about making sure our instance variables are initialized to some default value, we could have just done that in the __init__ method?</p>\n</blockquote>\n\n<p>Considering the stated scenario, we care about the initial values of the instance variables when the <em>instance</em> is in reality a class itself. So, if we are dynamically creating a class object at runtime and we need to define/control something special about the subsequent instances of this class being created, we would define these conditions/properties in a <code>__new__</code> method of a metaclass.</p>\n\n<p>I was confused about this until I actually thought about the application of the concept rather than just the meaning of it. Here's an example that would hopefully make the difference clear:</p>\n\n<pre><code>a = Shape(sides=3, base=2, height=12)\nb = Shape(sides=4, length=2)\nprint(a.area())\nprint(b.area())\n\n# I want `a` and `b` to be an instances of either of 'Square' or 'Triangle'\n# depending on number of sides and also the `.area()` method to do the right\n# thing. How do I do that without creating a Shape class with all the\n# methods having a bunch of `if`s ? Here is one possibility\n\nclass Shape:\n    def __new__(cls, sides, *args, **kwargs):\n        if sides == 3:\n            return Triangle(*args, **kwargs)\n        else:\n            return Square(*args, **kwargs)\n\nclass Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def area(self):\n        return (self.base * self.height) / 2\n\nclass Square:\n    def __init__(self, length):\n        self.length = length\n\n    def area(self):\n        return self.length*self.length\n</code></pre>\n\n<p>Note this is just an demonstartive example. There are multiple ways to get a solution without resorting to a class factory approach like above and even if we do choose to implelent the solution in this manner, there are a little caveats left out for sake of brevity (for instance, declaring the metaclass explicitly)</p>\n\n<p>If you are creating a regular class (a.k.a a non-metaclass), then <code>__new__</code> doesn't really make sense unless it is special case like the mutable versus immutable scenario in <a href=\"https://stackoverflow.com/a/4859181/262108\">ncoghlan's answer</a> answer (which is essentially a more specific example of the concept of defining the initial values/properties of the class/type being created via <code>__new__</code> to be then initialized via <code>__init__</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1359032294,
                    "last_edit_date": 1359032294,
                    "creation_date": 1296537164,
                    "answer_id": 4859158,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>__new__()</code> can return objects of types other than the class it's bound to. <code>__init__()</code> only initializes an existing instance of the class.</p>\n\n<pre><code>&gt;&gt;&gt; class C(object):\n...   def __new__(cls):\n...     return 5\n...\n&gt;&gt;&gt; c = C()\n&gt;&gt;&gt; print type(c)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; print c\n5\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 294068,
                        "reputation": 41376,
                        "user_id": 597742,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/f3ba3ecffd20251d73749afbfa636786?s=256&d=identicon&r=PG",
                        "display_name": "ncoghlan",
                        "link": "https://stackoverflow.com/users/597742/ncoghlan"
                    },
                    "is_accepted": true,
                    "score": 159,
                    "last_activity_date": 1359022359,
                    "last_edit_date": 1359022359,
                    "creation_date": 1296537387,
                    "answer_id": 4859181,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The difference mainly arises with mutable vs immutable types.</p>\n\n<p><code>__new__</code> accepts a <em>type</em> as the first argument, and (usually) returns a new instance of that type. Thus it is suitable for use with both mutable and immutable types.</p>\n\n<p><code>__init__</code> accepts an <em>instance</em> as the first argument and modifies the attributes of that instance. This is inappropriate for an immutable type, as it would allow them to be modified after creation by calling <code>obj.__init__(*args)</code>.</p>\n\n<p>Compare the behaviour of <code>tuple</code> and <code>list</code>:</p>\n\n<pre><code>&gt;&gt;&gt; x = (1, 2)\n&gt;&gt;&gt; x\n(1, 2)\n&gt;&gt;&gt; x.__init__([3, 4])\n&gt;&gt;&gt; x # tuple.__init__ does nothing\n(1, 2)\n&gt;&gt;&gt; y = [1, 2]\n&gt;&gt;&gt; y\n[1, 2]\n&gt;&gt;&gt; y.__init__([3, 4])\n&gt;&gt;&gt; y # list.__init__ reinitialises the object\n[3, 4]\n</code></pre>\n\n<p>As to why they're separate (aside from simple historical reasons): <code>__new__</code> methods require a bunch of boilerplate to get right (the initial object creation, and then remembering to return the object at the end). <code>__init__</code> methods, by contrast, are dead simple, since you just set whatever attributes you need to set.</p>\n\n<p>Aside from <code>__init__</code> methods being easier to write, and the mutable vs immutable distinction noted above, the separation can also be exploited to make calling the parent class <code>__init__</code> in subclasses optional by setting up any absolutely required instance invariants in <code>__new__</code>. This is generally a dubious practice though - it's usually clearer to just call the parent class <code>__init__</code> methods as necessary.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 81420,
                        "reputation": 72657,
                        "user_id": 229602,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/50063ac5c0d377349bb613953cf61be4?s=256&d=identicon&r=PG",
                        "display_name": "Noufal Ibrahim",
                        "link": "https://stackoverflow.com/users/229602/noufal-ibrahim"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1298902548,
                    "creation_date": 1298902548,
                    "answer_id": 5143108,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Not a complete answer but perhaps something that illustrates the difference. </p>\n\n<p><code>__new__</code> will always get called when an object has to be created. There are some situations where <code>__init__</code> will not get called. One example is when you unpickle objects from a pickle file, they will get allocated (<code>__new__</code>) but not initialised (<code>__init__</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 281021,
                        "reputation": 150571,
                        "user_id": 577088,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5UZyo.jpg?s=256",
                        "display_name": "senderle",
                        "link": "https://stackoverflow.com/users/577088/senderle"
                    },
                    "is_accepted": false,
                    "score": 45,
                    "last_activity_date": 1296565465,
                    "last_edit_date": 1296565465,
                    "creation_date": 1296540022,
                    "answer_id": 4859451,
                    "question_id": 4859129,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There are probably other uses for <code>__new__</code> but there's one really obvious one: You can't subclass an immutable type without using <code>__new__</code>. So for example, say you wanted to create a subclass of tuple that can contain only integral values between 0 and <code>size</code>.</p>\n\n<pre><code>class ModularTuple(tuple):\n    def __new__(cls, tup, size=100):\n        tup = (int(x) % size for x in tup)\n        return super(ModularTuple, cls).__new__(cls, tup)\n</code></pre>\n\n<p>You simply can't do this with <code>__init__</code> -- if you tried to modify <code>self</code> in <code>__init__</code>, the interpreter would complain that you're trying to modify an immutable object.</p>\n"
                }
            ]
        },
        {
            "5555449": [
                {
                    "owner": {
                        "account_id": 2232270,
                        "reputation": 4364,
                        "user_id": 2351110,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d1332323527afc1746bd0379096029b5?s=256&d=identicon&r=PG",
                        "display_name": "mattmess1221",
                        "link": "https://stackoverflow.com/users/2351110/mattmess1221"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1626363191,
                    "last_edit_date": 1626363191,
                    "creation_date": 1552418683,
                    "answer_id": 55129278,
                    "question_id": 5555449,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want to treat <code>None</code> as a valid argument, you could use a <code>**kwarg</code> parameter.</p>\n<pre><code>def function(arg1, arg2, **kwargs):\n    kwargs.setdefault('arg3', default)\n    arg3 = kwargs['arg3']\n    \n    # Continue with function\n\nfunction(&quot;amazing&quot;, &quot;fantastic&quot;) # uses default\nfunction(&quot;foo&quot;, &quot;bar&quot;, arg3=None) # Not default, but None\nfunction(&quot;hello&quot;, &quot;world&quot;, arg3=&quot;!!!&quot;)\n</code></pre>\n<p>I have also seen <code>...</code> or some other singleton be used like this.</p>\n<pre><code>def function(arg1, arg2=...):\n    if arg2 is ...:\n        arg2 = default\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 89051,
                        "reputation": 3013,
                        "user_id": 245915,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cca4132dc8568480af19f032a5b9b2bc?s=256&d=identicon&r=PG",
                        "display_name": "nofinator",
                        "link": "https://stackoverflow.com/users/245915/nofinator"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1302062419,
                    "last_edit_date": 1495540922,
                    "creation_date": 1302062419,
                    "answer_id": 5561292,
                    "question_id": 5555449,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>larsmans <a href=\"https://stackoverflow.com/questions/5555449/using-self-xxxx-as-default-parameter-python/5555470#5555470\">answered</a> your first question</p>\n\n<p>For your second question, can you simply look before you leap to avoid recursion?</p>\n\n<pre><code>def makeList(self, aNode=None):\n    if aNode is None:\n        aNode = self.root\n    treeaslist = [aNode.data]\n    if aNode.lChild:\n        treeaslist.extend(self.makeList(aNode.lChild))\n    if aNode.rChild:\n        treeaslist.extend(self.makeList(aNode.rChild))\n    return treeaslist\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55665,
                        "reputation": 362889,
                        "user_id": 166749,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/f5a1ea24626d10a87d73d47998dc8816?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fred Foo",
                        "link": "https://stackoverflow.com/users/166749/fred-foo"
                    },
                    "is_accepted": false,
                    "score": 64,
                    "last_activity_date": 1302023096,
                    "last_edit_date": 1302023096,
                    "creation_date": 1302022346,
                    "answer_id": 5555470,
                    "question_id": 5555449,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It doesn't work because default arguments are evaluated at function definition time, not at call time:</p>\n\n<pre><code>def f(lst = []):\n    lst.append(1)\n    return lst\n\nprint(f()) # prints [1]\nprint(f()) # prints [1, 1]\n</code></pre>\n\n<p>The common strategy is to use a <code>None</code> default parameter. If <code>None</code> is a valid value, use a singleton sentinel:</p>\n\n<pre><code>NOTHING = object()\n\ndef f(arg = NOTHING):\n    if arg is NOTHING:\n        # no argument\n    # etc.\n</code></pre>\n"
                }
            ]
        },
        {
            "42132731": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 57,
                    "last_activity_date": 1486633612,
                    "last_edit_date": 1486633612,
                    "creation_date": 1486632408,
                    "answer_id": 42132767,
                    "question_id": 42132731,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the <a href=\"https://docs.python.org/3/library/itertools.html#itertools.tee\" rel=\"noreferrer\"><code>itertools.tee()</code> function</a> to produce copies; these use a buffer to share results between different iterators:</p>\n\n<pre><code>from itertools import tee\n\nmy_list = [5, 4, 3,2]\nfirst_it = iter(my_list)\nfirst_it, second_it = tee(first_it)\nprint next(first_it)   # prints 5\nprint next(second_it)  # prints 5\nprint next(first_it)   # prints 4\n</code></pre>\n\n<p>Note that you should no longer use the original iterator; use only the tees.</p>\n\n<p>Note that the buffer also means that these can incur a significant memory cost if you advance one of the copies far ahead of the others! From the documentation:</p>\n\n<blockquote>\n  <p>This itertool may require significant auxiliary storage (depending on how much temporary data needs to be stored). In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use <code>list()</code> instead of <code>tee()</code>.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "12182777": [
                {
                    "owner": {
                        "account_id": 183182,
                        "reputation": 76869,
                        "user_id": 418413,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/e459bf8123c85dc2c708ee8210c0320b?s=256&d=identicon&r=PG",
                        "display_name": "kojiro",
                        "link": "https://stackoverflow.com/users/418413/kojiro"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1346266569,
                    "last_edit_date": 1346266569,
                    "creation_date": 1346259115,
                    "answer_id": 12182842,
                    "question_id": 12182777,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you mean</p>\n\n<pre><code>a_list = [s.strip() for s in a_list]\n</code></pre>\n\n<p>Using a generator expression may be a better approach, like this:</p>\n\n<pre><code>stripped_list = (s.strip() for s in a_list)\n</code></pre>\n\n<p>offers the benefit of lazy evaluation, so the <code>strip</code> only runs when the given element, stripped, is needed.</p>\n\n<p>If you need references to the list to remain intact outside the current scope, you might want to use list slice syntax.:</p>\n\n<pre><code>a_list[:] = [s.strip() for s in a_list]\n</code></pre>\n\n<p>For commenters interested in the speed of various approaches, it looks as if in CPython the generator-to-slice approach is the least efficient:</p>\n\n<pre><code>&gt;&gt;&gt; from timeit import timeit as t\n&gt;&gt;&gt; t(\"\"\"a[:]=(s.strip() for s in a)\"\"\", \"\"\"a=[\" %d \" % s for s in range(10)]\"\"\")\n4.35184121131897\n&gt;&gt;&gt; t(\"\"\"a[:]=[s.strip() for s in a]\"\"\", \"\"\"a=[\" %d \" % s for s in range(10)]\"\"\")\n2.9129951000213623\n&gt;&gt;&gt; t(\"\"\"a=[s.strip() for s in a]\"\"\", \"\"\"a=[\" %d \" % s for s in range(10)]\"\"\")\n2.47947096824646\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1787733,
                        "reputation": 99520,
                        "user_id": 1628832,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e3092a32e83fa192569836594deae270?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "karthikr",
                        "link": "https://stackoverflow.com/users/1628832/karthikr"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1346262065,
                    "last_edit_date": 1346262065,
                    "creation_date": 1346259161,
                    "answer_id": 12182862,
                    "question_id": 12182777,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could use list comprehensions</p>\n\n<pre><code>stripped_list = [j.strip() for j in initial_list]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 171717,
                        "reputation": 72123,
                        "user_id": 399317,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/28235d26ee007743c9d2150759d29139?s=256&d=identicon&r=PG",
                        "display_name": "Kos",
                        "link": "https://stackoverflow.com/users/399317/kos"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1346261125,
                    "creation_date": 1346261125,
                    "answer_id": 12183359,
                    "question_id": 12182777,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Some intriguing discussions on performance happened here, so let me provide a benchmark:</p>\n\n<p><a href=\"http://ideone.com/ldId8\">http://ideone.com/ldId8</a></p>\n\n<pre><code>noslice_map              : 0.0814900398254\nslice_map                : 0.084676027298\nnoslice_comprehension    : 0.0927240848541\nslice_comprehension      : 0.124806165695\niter_manual              : 0.133514881134\niter_enumerate           : 0.142778873444\niter_range               : 0.160353899002\n</code></pre>\n\n<p>So:</p>\n\n<ol>\n<li><code>map(str.strip, my_list)</code> is the fastest way, it's just a little bit faster than comperhensions.\n<ul>\n<li>Use <code>map</code> or <code>itertools.imap</code> if there's a single function that you want to apply (like str.split)</li>\n<li>Use comprehensions if there's a more complicated expression</li>\n</ul></li>\n<li>Manual iteration is the slowest way; a reasonable explanation is that it requires the interpreter to do more work and the efficient C runtime does less</li>\n<li>Go ahead and assign the result like <code>my_list[:] = map...</code>, the slice notation introduces only a small overhead and is likely to spare you some bugs if there are multiple references to that list.\n<ul>\n<li>Know the difference between mutating a list and re-creating it.</li>\n</ul></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 4872,
                        "reputation": 40156,
                        "user_id": 7536,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/69aa4b5b81a1d2120c98ceed09446489?s=256&d=identicon&r=PG",
                        "display_name": "eduffy",
                        "link": "https://stackoverflow.com/users/7536/eduffy"
                    },
                    "is_accepted": true,
                    "score": 45,
                    "last_activity_date": 1346259057,
                    "creation_date": 1346259057,
                    "answer_id": 12182818,
                    "question_id": 12182777,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You probably shouldn't be using <code>list</code> as a variable name since it's a type.  Regardless:</p>\n\n<pre><code>list = map(str.strip, list) \n</code></pre>\n\n<p>This will apply the function <code>str.strip</code> to every element in <code>list</code>, return a new list, and store the result back in <code>list</code>.</p>\n"
                }
            ]
        },
        {
            "58622": [
                {
                    "owner": {
                        "account_id": 555,
                        "reputation": 58484,
                        "user_id": 720,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/3c57f2a468f2fc945f1e5c47d1afee66?s=256&d=identicon&r=PG",
                        "display_name": "Peter Hoffmann",
                        "link": "https://stackoverflow.com/users/720/peter-hoffmann"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1576620379,
                    "last_edit_date": 1576620379,
                    "creation_date": 1221227339,
                    "answer_id": 59018,
                    "question_id": 58622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>An other very good documentation tool is <a href=\"http://www.sphinx-doc.org/en/master/index.html\" rel=\"nofollow noreferrer\">sphinx</a>. It will be used for the upcoming python 2.6 <a href=\"http://docs.python.org/dev/\" rel=\"nofollow noreferrer\">documentation</a> and is used by <a href=\"http://docs.djangoproject.com/en/dev/\" rel=\"nofollow noreferrer\">django</a> and a lot of other python projects.</p>\n\n<p>From the sphinx website:</p>\n\n<ul>\n<li><strong>Output formats</strong>: HTML (including Windows HTML Help) and LaTeX, for printable PDF versions</li>\n<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information</li>\n<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>\n<li><strong>Automatic indices</strong>: general index as well as a module index</li>\n<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>\n<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules, and more</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 914,
                        "reputation": 241106,
                        "user_id": 1199,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=256&d=identicon&r=PG",
                        "display_name": "Blair Conrad",
                        "link": "https://stackoverflow.com/users/1199/blair-conrad"
                    },
                    "is_accepted": true,
                    "score": 77,
                    "last_activity_date": 1544617026,
                    "last_edit_date": 1544617026,
                    "creation_date": 1221217863,
                    "answer_id": 58701,
                    "question_id": 58622,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is <a href=\"http://www.doxygen.nl/manual/docblocks.html#pythonblocks\" rel=\"noreferrer\">documented on the doxygen website</a>, but to summarize here:</p>\n\n<p>You can use doxygen to document your Python code. You can either use the Python documentation string syntax:</p>\n\n<pre><code>\"\"\"@package docstring\nDocumentation for this module.\n\nMore details.\n\"\"\"\n\ndef func():\n    \"\"\"Documentation for a function.\n\n    More details.\n    \"\"\"\n    pass\n</code></pre>\n\n<p>In which case the comments will be extracted by doxygen, but you won't be able to use any of the <a href=\"http://www.doxygen.nl/manual/commands.html#cmd_intro\" rel=\"noreferrer\">special doxygen commands</a>.</p>\n\n<p><strong>Or</strong> you can (similar to C-style languages under doxygen) double up the comment marker (<code>#</code>) on the first line before the member:</p>\n\n<pre><code>## @package pyexample\n#  Documentation for this module.\n#\n#  More details.\n\n## Documentation for a function.\n#\n#  More details.\ndef func():\n    pass\n</code></pre>\n\n<p>In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting <code>OPTMIZE_OUTPUT_JAVA</code> to <code>YES</code>.</p>\n\n<p>Honestly, I'm a little surprised at the difference - it seems like once doxygen can detect the comments in ## blocks or \"\"\" blocks, most of the work would be done and you'd be able to use the special commands in either case. Maybe they expect people using \"\"\" to adhere to more Pythonic documentation practices and that would interfere with the special doxygen commands?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 196183,
                        "reputation": 5872,
                        "user_id": 439494,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/7aa99d0eed60260a2937e56cf9560138?s=256&d=identicon&r=PG",
                        "display_name": "Havok",
                        "link": "https://stackoverflow.com/users/439494/havok"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1455352984,
                    "last_edit_date": 1455352984,
                    "creation_date": 1455351377,
                    "answer_id": 35377654,
                    "question_id": 58622,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In the end, you only have two options:</p>\n\n<p>You generate your content using Doxygen, or you generate your content using Sphinx*.</p>\n\n<ol>\n<li><p><strong>Doxygen</strong>: It is not the tool of choice for most Python projects. But if you have to deal with other related projects written in C or C++ it could make sense. For this you can improve the integration between Doxygen and Python using <a href=\"https://github.com/Feneric/doxypypy\" rel=\"noreferrer\">doxypypy</a>.</p></li>\n<li><p><strong>Sphinx</strong>: The defacto tool for documenting a Python project. You have three options here: manual, semi-automatic (stub generation) and fully automatic (Doxygen like). </p>\n\n<ol>\n<li>For manual API documentation you have Sphinx <a href=\"http://www.sphinx-doc.org/en/stable/ext/autodoc.html\" rel=\"noreferrer\">autodoc</a>. This is great to write a user guide with embedded API generated elements.</li>\n<li>For semi-automatic you have Sphinx <a href=\"http://www.sphinx-doc.org/en/stable/ext/autosummary.html\" rel=\"noreferrer\">autosummary</a>. You can either setup your build system to call sphinx-autogen or setup your Sphinx with the <code>autosummary_generate</code> config. You will require to setup a page with the autosummaries, and then manually edit the pages. You have options, but my experience with this approach is that it requires way too much configuration, and at the end even after creating new templates, I found bugs and the impossibility to determine exactly what was exposed as public API and what not. My opinion is this tool is good for stub generation that will require manual editing, and nothing more. Is like a shortcut to end up in manual.</li>\n<li>Fully automatic. This have been criticized many times and for long we didn't have a good fully automatic Python API generator integrated with Sphinx until <a href=\"http://autoapi.readthedocs.org/\" rel=\"noreferrer\">AutoAPI</a> came, which is a new kid in the block. This is by far the best for automatic API generation in Python (note: shameless self-promotion).</li>\n</ol></li>\n</ol>\n\n<p>There are other options to note:</p>\n\n<ul>\n<li><a href=\"https://breathe.readthedocs.org/\" rel=\"noreferrer\">Breathe</a>: this started as a very good idea, and makes sense when you work with several related project in other languages that use Doxygen. The idea is to use Doxygen XML output and feed it to Sphinx to generate your API. So, you can keep all the goodness of Doxygen and unify the documentation system in Sphinx. Awesome in theory. Now, in practice, the last time I checked the project wasn't ready for production.</li>\n<li><a href=\"https://github.com/twisted/pydoctor\" rel=\"noreferrer\">pydoctor</a>*: Very particular. Generates its own output. It has some basic integration with Sphinx, and some nice features.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Kevin Mack"
                    },
                    "is_accepted": false,
                    "score": 95,
                    "last_activity_date": 1435451300,
                    "last_edit_date": 1435451300,
                    "creation_date": 1233351002,
                    "answer_id": 497322,
                    "question_id": 58622,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <a href=\"https://pypi.python.org/pypi/doxypy/\" rel=\"noreferrer\">doxypy</a> input filter allows you to use pretty much all of Doxygen's formatting tags in a standard Python docstring format.  I use it to document a large mixed C++ and Python game application framework, and it's working well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4090,
                        "reputation": 5092,
                        "user_id": 6043,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7b19b7049d7a3b14bd0c5623ad08f124?s=256&d=identicon&r=PG",
                        "display_name": "Allen",
                        "link": "https://stackoverflow.com/users/6043/allen"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1428168897,
                    "last_edit_date": 1428168897,
                    "creation_date": 1221253488,
                    "answer_id": 59955,
                    "question_id": 58622,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Sphinx is mainly a tool for formatting docs written independently from the source code, as I understand it.</p>\n\n<p>For generating API docs from Python docstrings, the leading tools are <a href=\"https://github.com/BurntSushi/pdoc\" rel=\"noreferrer\">pdoc</a> and <a href=\"https://launchpad.net/pydoctor\" rel=\"noreferrer\">pydoctor</a>. Here's pydoctor's generated API docs for <a href=\"http://twistedmatrix.com/documents/current/api\" rel=\"noreferrer\">Twisted</a> and <a href=\"http://starship.python.net/crew/mwh/bzrlibapi/\" rel=\"noreferrer\">Bazaar</a>.</p>\n\n<p>Of course, if you just want to have a look at the docstrings while you're working on stuff, there's the \"<a href=\"https://docs.python.org/2/library/pydoc.html\" rel=\"noreferrer\">pydoc</a>\" command line tool and as well as the <code>help()</code> function available in the interactive interpreter.</p>\n"
                }
            ]
        },
        {
            "14886143": [
                {
                    "owner": {
                        "account_id": 21821955,
                        "reputation": 31,
                        "user_id": 16118047,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJz0_veDuB61rI5CiSpwg88SUKezccXNIVPsRzZ8=k-s256",
                        "display_name": "FEMista",
                        "link": "https://stackoverflow.com/users/16118047/femista"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1651700943,
                    "last_edit_date": 1651700943,
                    "creation_date": 1651675119,
                    "answer_id": 72114877,
                    "question_id": 14886143,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The reason for</p>\n<pre class=\"lang-none prettyprint-override\"><code>ValueError: Attempted relative import beyond toplevel package\n</code></pre>\n<p>is that <code>A</code> is the same directory level as <code>Driver.py</code>. Hence, <code>..A</code> in <code>from ..A import Account</code> is beyond top-level package.</p>\n<p>You can solve this by create a new folder named <code>AandB</code> together with <code>__init__py</code> in this new folder, and then move <code>A</code> and <code>B</code> folders into <code>AandB</code> folder. The directory structure is as following\uff1a</p>\n<p><a href=\"https://i.sstatic.net/75NOa.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/75NOa.png\" alt=\"The directory structure\" /></a></p>\n<p>Correspondingly, the content in <code>Driver.py</code> should be modified as <code>from AandB.B import Test</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6502751,
                        "reputation": 377,
                        "user_id": 8084693,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1442368462489935/picture?type=large",
                        "display_name": "Shekhar",
                        "link": "https://stackoverflow.com/users/8084693/shekhar"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1622132846,
                    "creation_date": 1622132846,
                    "answer_id": 67726286,
                    "question_id": 14886143,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my case adding <code>__init__.py</code> was not enough. You also have to append the path of the parent directory if you get module not found error.</p>\n<pre><code>root :\n |\n |__SiblingA:\n |    \\__A.py\n |     \n |__SiblingB:\n |      \\_ __init__.py\n |      \\__B.py\n |\n</code></pre>\n<p>To import B.py from A.py, you have to do the following</p>\n<pre><code>import sys\n  \n# append the path of the parent directory\nsys.path.append(&quot;..&quot;)\n\nfrom SiblingB import B\nprint(&quot;B is successfully imported!&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 27199,
                        "reputation": 154054,
                        "user_id": 71522,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/f0e286ba0482e57904e89e753a4b36e6?s=256&d=identicon&r=PG",
                        "display_name": "David Wolever",
                        "link": "https://stackoverflow.com/users/71522/david-wolever"
                    },
                    "is_accepted": true,
                    "score": 40,
                    "last_activity_date": 1360885984,
                    "creation_date": 1360885984,
                    "answer_id": 14886199,
                    "question_id": 14886143,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is happening because <code>A</code> and <code>B</code> are independent, unrelated, packages as far as Python is concerned.</p>\n\n<p>Create a <code>__init__.py</code> in the same directory as <code>Driver.py</code> and everything should work as expected.</p>\n"
                }
            ]
        },
        {
            "4293889": [
                {
                    "owner": {
                        "account_id": 1105738,
                        "reputation": 321,
                        "user_id": 1097161,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://i.sstatic.net/VCqMx.png?s=256",
                        "display_name": "Vladislav Reshetnyak",
                        "link": "https://stackoverflow.com/users/1097161/vladislav-reshetnyak"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1458771140,
                    "last_edit_date": 1458771140,
                    "creation_date": 1366638774,
                    "answer_id": 16148901,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://easygui.sourceforge.net/tutorial.html\" rel=\"nofollow\">EasyGUI</a> for very easy GUI Development</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2329670,
                        "reputation": 662,
                        "user_id": 2043397,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/1d6f629cdbb5f900ff482d453f6cc9ab?s=256&d=identicon&r=PG",
                        "display_name": "TMoover",
                        "link": "https://stackoverflow.com/users/2043397/tmoover"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1409445162,
                    "creation_date": 1409445162,
                    "answer_id": 25587956,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I would recommend wxpython.\nIt's very easy to use and the documentation is pretty good.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1264390,
                        "reputation": 2011,
                        "user_id": 1222026,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/af0d6dcd4238e5450fed240993cef347?s=256&d=identicon&r=PG",
                        "display_name": "piertoni",
                        "link": "https://stackoverflow.com/users/1222026/piertoni"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1374341812,
                    "creation_date": 1374341812,
                    "answer_id": 17764863,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try with Kivy! <a href=\"http://kivy.org\" rel=\"noreferrer\">kivy.org</a>\nIt's quite easy, multi platform and a really good documentation</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2304984"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1366639285,
                    "creation_date": 1366639285,
                    "answer_id": 16149099,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I prefer <a href=\"http://www.riverbankcomputing.com/software/pyqt/intro\" rel=\"nofollow\">PyQT</a> although it is pretty big. It has all the features that normal QT has, and that's why it's very usable. I think you can use <a href=\"https://qt-project.org/doc/qt-5.0/qtquick/qtquick-index.html\" rel=\"nofollow\">QML</a> with it too.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 218448,
                        "reputation": 5894,
                        "user_id": 474772,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/543126f859fa173bba7ad18b636ef59d?s=256&d=identicon&r=PG",
                        "display_name": "Mariy",
                        "link": "https://stackoverflow.com/users/474772/mariy"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1290891953,
                    "creation_date": 1290891953,
                    "answer_id": 4293917,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Tkinter is simple but is too ugly. PyQT can do everything you want but is too big. Perhaps IronPython will be good for you. Take a look at this: <a href=\"http://wiki.python.org/moin/GuiProgramming\" rel=\"noreferrer\">Python guis</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 79477,
                        "reputation": 131259,
                        "user_id": 225312,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/98be1fca8529611a09e77da800faa817?s=256&d=identicon&r=PG",
                        "display_name": "user225312",
                        "link": "https://stackoverflow.com/users/225312/user225312"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1290891736,
                    "creation_date": 1290891736,
                    "answer_id": 4293903,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Take your pick <a href=\"http://wiki.python.org/moin/GuiProgramming\">here</a>.</p>\n\n<p><a href=\"http://wiki.python.org/moin/TkInter\">Tkinter</a> is in the Python stdlib. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1290891594,
                    "creation_date": 1290891594,
                    "answer_id": 4293897,
                    "question_id": 4293889,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://glade.gnome.org/\" rel=\"noreferrer\">Glade</a> or <a href=\"http://wxglade.sourceforge.net/\" rel=\"noreferrer\">wxGlade</a>.</p>\n"
                }
            ]
        },
        {
            "26494211": [
                {
                    "owner": {
                        "account_id": 22493126,
                        "reputation": 313,
                        "user_id": 16690585,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a041425683ce2aa9c3bb5ef47a7064f1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "julie",
                        "link": "https://stackoverflow.com/users/16690585/julie"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1729870747,
                    "last_edit_date": 1729870747,
                    "creation_date": 1663352454,
                    "answer_id": 73748885,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For anyone trying to use pdfminer, you should switch to pdfminer.six which is the currently maintained version.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10129017,
                        "reputation": 7007,
                        "user_id": 7483211,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-cKWRGsZijfQ/AAAAAAAAAAI/AAAAAAAAEKw/CCxhG0ejwDM/photo.jpg?sz=256",
                        "display_name": "Cornelius Roemer",
                        "link": "https://stackoverflow.com/users/7483211/cornelius-roemer"
                    },
                    "is_accepted": false,
                    "score": 35,
                    "last_activity_date": 1659958612,
                    "last_edit_date": 1659958612,
                    "creation_date": 1589742443,
                    "answer_id": 61857301,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This works in May 2020 using PDFminer six in Python3.</p>\n<h4>Installing the package</h4>\n<pre class=\"lang-bash prettyprint-override\"><code>$ pip install pdfminer.six\n</code></pre>\n<h4>Importing the package</h4>\n<pre class=\"lang-py prettyprint-override\"><code>from pdfminer.high_level import extract_text\n</code></pre>\n<h4>Using a PDF saved on disk</h4>\n<pre class=\"lang-py prettyprint-override\"><code>text = extract_text('report.pdf')\n</code></pre>\n<p>Or alternatively:</p>\n<pre class=\"lang-py prettyprint-override\"><code>with open('report.pdf','rb') as f:\n    text = extract_text(f)\n</code></pre>\n<h4>Using PDF already in memory</h4>\n<p>If the PDF is already in memory, for example if retrieved from the web with the requests library, it can be converted to a stream using the <code>io</code> library:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import io\n\nresponse = requests.get(url)\ntext = extract_text(io.BytesIO(response.content))\n</code></pre>\n<h4>Performance and Reliability compared with PyPDF2</h4>\n<p>PDFminer.six works more reliably than PyPDF2 (which fails with certain types of PDFs), in particular PDF version 1.7</p>\n<p>However, text extraction with PDFminer.six is significantly slower than PyPDF2 by a factor of 6.</p>\n<p>I timed text extraction with <code>timeit</code> on a 15&quot; MBP (2018), timing only the extraction function (no file opening etc.) with a 10 page PDF and got the following results:</p>\n<pre><code>PDFminer.six: 2.88 sec\nPyPDF2:       0.45 sec\n</code></pre>\n<p>pdfminer.six also has a huge footprint, requiring pycryptodome which needs GCC and other things installed pushing a minimal install docker image on Alpine Linux from 80 MB to 350 MB. PyPDF2 has no noticeable storage impact.</p>\n<p><strong>Update (2022-08-04)</strong>: According to Martin Thoma, PyPDF2 has improved a lot in the past 2 years, so do give it a try as well. Here's his <a href=\"https://github.com/py-pdf/benchmarks\" rel=\"nofollow noreferrer\">benchmark</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5050140,
                        "reputation": 3447,
                        "user_id": 4054971,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-WDAiFCCeB6Y/AAAAAAAAAAI/AAAAAAAABvA/Sw3cl_9ViO8/photo.jpg?sz=256",
                        "display_name": "Pieter",
                        "link": "https://stackoverflow.com/users/4054971/pieter"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1637509852,
                    "last_edit_date": 1637509852,
                    "creation_date": 1589733950,
                    "answer_id": 61855361,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Full disclosure, I am one of the maintainers of <a href=\"https://github.com/pdfminer/pdfminer.six\" rel=\"noreferrer\">pdfminer.six</a>. It is a community-maintained version of pdfminer for python 3.</p>\n<p>Nowadays, it has multiple api's to extract text from a PDF, depending on your needs. Behind the scenes, all of these api's use the same logic for parsing and analyzing the layout.</p>\n<p>(All the examples assume your PDF file is called <em>example.pdf</em>)</p>\n<p><strong>Commandline</strong></p>\n<p>If you want to extract text just once you can use the commandline tool pdf2txt.py:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ pdf2txt.py example.pdf\n</code></pre>\n<p><strong>High-level api</strong></p>\n<p>If you want to extract text (properties) with Python, you can use the high-level api. This approach is the go-to solution if you want to programmatically extract information from a PDF.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pdfminer.high_level import extract_text\n\n# Extract text from a pdf.\ntext = extract_text('example.pdf')\n\n# Extract iterable of LTPage objects.\npages = extract_pages('example.pdf')\n</code></pre>\n<p><strong>Composable api</strong></p>\n<p>There is also a composable api that gives a lot of flexibility in handling the resulting objects. For example, it allows you to create your own layout algorithm. This method is suggested in the other answers, but I would only recommend this when you need to customize some component.</p>\n<pre><code>from io import StringIO\n\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.pdfdocument import PDFDocument\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.pdfparser import PDFParser\n\noutput_string = StringIO()\nwith open('example.pdf', 'rb') as in_file:\n    parser = PDFParser(in_file)\n    doc = PDFDocument(parser)\n    rsrcmgr = PDFResourceManager()\n    device = TextConverter(rsrcmgr, output_string, laparams=LAParams())\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    for page in PDFPage.create_pages(doc):\n        interpreter.process_page(page)\n\nprint(output_string.getvalue())\n</code></pre>\n<p>Similar question and answer <a href=\"https://stackoverflow.com/a/70056092/4054971\">here</a>. I'll try to keep them in sync.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2782694,
                        "reputation": 3947,
                        "user_id": 2394901,
                        "user_type": "registered",
                        "accept_rate": 36,
                        "profile_image": "https://i.sstatic.net/tGFK1.png?s=256",
                        "display_name": "juan Isaza",
                        "link": "https://stackoverflow.com/users/2394901/juan-isaza"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1583597324,
                    "last_edit_date": 1583597324,
                    "creation_date": 1497119673,
                    "answer_id": 44476759,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>terrific answer from DuckPuncher, for Python3 make sure you install pdfminer2 and do:</p>\n\n<pre><code>import io\n\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.pdfpage import PDFPage\n\n\ndef convert_pdf_to_txt(path):\n    rsrcmgr = PDFResourceManager()\n    retstr = io.StringIO()\n    codec = 'utf-8'\n    laparams = LAParams()\n    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)\n    fp = open(path, 'rb')\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    password = \"\"\n    maxpages = 0\n    caching = True\n    pagenos = set()\n\n    for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages,\n                                  password=password,\n                                  caching=caching,\n                                  check_extractable=True):\n        interpreter.process_page(page)\n\n\n\n    fp.close()\n    device.close()\n    text = retstr.getvalue()\n    retstr.close()\n    return text\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10053703,
                        "reputation": 119,
                        "user_id": 7432657,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a27f393cc90647c92852ba7dd6b276bc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Brault Gilbert",
                        "link": "https://stackoverflow.com/users/7432657/brault-gilbert"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1576838612,
                    "creation_date": 1576838612,
                    "answer_id": 59423919,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>this code is tested with pdfminer for python 3 (pdfminer-20191125)</p>\n\n<pre><code>from pdfminer.layout import LAParams\nfrom pdfminer.converter import PDFPageAggregator\nfrom pdfminer.pdfinterp import PDFResourceManager\nfrom pdfminer.pdfinterp import PDFPageInterpreter\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.layout import LTTextBoxHorizontal\n\ndef parsedocument(document):\n    # convert all horizontal text into a lines list (one entry per line)\n    # document is a file stream\n    lines = []\n    rsrcmgr = PDFResourceManager()\n    laparams = LAParams()\n    device = PDFPageAggregator(rsrcmgr, laparams=laparams)\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    for page in PDFPage.get_pages(document):\n            interpreter.process_page(page)\n            layout = device.get_result()\n            for element in layout:\n                if isinstance(element, LTTextBoxHorizontal):\n                    lines.extend(element.get_text().splitlines())\n    return lines\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3504082,
                        "reputation": 5187,
                        "user_id": 2930045,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://i.sstatic.net/9hhx9.jpg?s=256",
                        "display_name": "RattleyCooper",
                        "link": "https://stackoverflow.com/users/2930045/rattleycooper"
                    },
                    "is_accepted": true,
                    "score": 217,
                    "last_activity_date": 1570162206,
                    "last_edit_date": 1570162206,
                    "creation_date": 1413920867,
                    "answer_id": 26495057,
                    "question_id": 26494211,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is a working example of extracting text from a PDF file using the current version of PDFMiner(September 2016) </p>\n\n<pre><code>from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.pdfpage import PDFPage\nfrom io import StringIO\n\ndef convert_pdf_to_txt(path):\n    rsrcmgr = PDFResourceManager()\n    retstr = StringIO()\n    codec = 'utf-8'\n    laparams = LAParams()\n    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)\n    fp = open(path, 'rb')\n    interpreter = PDFPageInterpreter(rsrcmgr, device)\n    password = \"\"\n    maxpages = 0\n    caching = True\n    pagenos=set()\n\n    for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password,caching=caching, check_extractable=True):\n        interpreter.process_page(page)\n\n    text = retstr.getvalue()\n\n    fp.close()\n    device.close()\n    retstr.close()\n    return text\n</code></pre>\n\n<p>PDFMiner's structure changed recently, so this should work for extracting text from the PDF files.</p>\n\n<p><strong>Edit</strong> : Still working as of the June 7th of 2018. Verified in Python Version 3.x</p>\n\n<p>Edit: The solution works with Python 3.7 at October 3, 2019. I used the Python library <code>pdfminer.six</code>, released on November 2018.</p>\n"
                }
            ]
        },
        {
            "1901828": [
                {
                    "owner": {
                        "account_id": 58896,
                        "reputation": 1110,
                        "user_id": 176298,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/rJLG1.jpg?s=256",
                        "display_name": "A. R. Diederich",
                        "link": "https://stackoverflow.com/users/176298/a-r-diederich"
                    },
                    "is_accepted": true,
                    "score": 76,
                    "last_activity_date": 1595112506,
                    "last_edit_date": 1595112506,
                    "creation_date": 1261165164,
                    "answer_id": 1930276,
                    "question_id": 1901828,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It depends what license you can use.  Some popular libraries are GPL which can cause serious issues if you need to use it for work, especially if you need to keep proprietary extensions.  The LGPL libraries are a little less popular, I think, but you have more flexibility with what you can use them for.</p>\n<p>I'd once looked at using twisted directly for some simple XMPP scripting but the documentation was literally non-existant.  Like, I opened a published twisted reference manual and it didn't include xmpp or jabbber <em>at all</em>.  Maybe they've fixed that now.</p>\n<p>MIT libraries.</p>\n<ul>\n<li><a href=\"https://dev.louiz.org/projects/slixmpp\" rel=\"noreferrer\" title=\"slixmpp\">slixmpp</a> is a friendly fork of sleekxmpp. It has removed all threads and is for python 3.7+.</li>\n<li><a href=\"https://github.com/fritzy/SleekXMPP/wiki\" rel=\"noreferrer\">sleekxmpp</a> was pretty popular and was used for\nexamples in Peter Saint-Andre's XMPP\nbook from O'Reilly.  It has been depricated in favor of slixmpp.</li>\n</ul>\n<p>GPL libraries.</p>\n<ul>\n<li><a href=\"http://xmpppy.sourceforge.net/\" rel=\"noreferrer\">xmpppy</a> was used by gajim from 2005-2014, and began as a forked jabberpy. Also lives at <a href=\"https://github.com/normanr/xmpppy\" rel=\"noreferrer\">xmpppy</a>.</li>\n<li><a href=\"https://python-nbxmpp.gajim.org/\" rel=\"noreferrer\">nbxmpp</a> forked xmpppy, and is used by gajim. It requires python 3.7+ and is actively maintained.</li>\n</ul>\n<p>LPGL libraries.</p>\n<ul>\n<li><a href=\"https://github.com/horazont/aioxmpp\" rel=\"noreferrer\" title=\"aioxmpp\">aioxmpp</a> is an asyncio-based python 3.4+ library.</li>\n<li><a href=\"https://github.com/Jajcus/pyxmpp\" rel=\"noreferrer\">pyxmpp</a> is abandoned in favor of pyxmpp2. It uses libxml2 internally for xml parsing.</li>\n<li><a href=\"https://github.com/Jajcus/pyxmpp2\" rel=\"noreferrer\">pyxmpp2</a> is the next version of pyxmpp, runs on python 2.7 and 3.3, and removes the libxml2 requirement. Like many, it requires <a href=\"http://www.dnspython.org/\" rel=\"noreferrer\">dnspython</a>.</li>\n<li><a href=\"http://jabberpy.sourceforge.net/\" rel=\"noreferrer\">jabberpy</a> is the original and is thoroughly unmaintained.</li>\n</ul>\n<p>Other libraries.</p>\n<ul>\n<li><a href=\"http://wokkel.ik.nu/\" rel=\"noreferrer\">Wokkel</a>, mentioned in another post.  That's a new one for me, based on twisted.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 17723,
                        "reputation": 90832,
                        "user_id": 39975,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/995543cb35c3b92a2eb43275116815a7?s=256&d=identicon&r=PG",
                        "display_name": "Dustin",
                        "link": "https://stackoverflow.com/users/39975/dustin"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1260819801,
                    "creation_date": 1260819801,
                    "answer_id": 1903015,
                    "question_id": 1901828,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>All of my best XMPP work has been using <a href=\"http://wokkel.ik.nu/\" rel=\"noreferrer\">wokkel</a>.</p>\n\n<p>Couple examples:</p>\n\n<ul>\n<li><a href=\"http://dustin.github.com/twitterspy/\" rel=\"noreferrer\">twitterspy</a></li>\n<li><a href=\"http://dustin.github.com/whatsup/\" rel=\"noreferrer\">whatsup</a></li>\n</ul>\n"
                }
            ]
        },
        {
            "3400965": [
                {
                    "owner": {
                        "account_id": 32277,
                        "reputation": 187494,
                        "user_id": 89391,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=256&d=identicon&r=PG",
                        "display_name": "miku",
                        "link": "https://stackoverflow.com/users/89391/miku"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1605467103,
                    "last_edit_date": 1605467103,
                    "creation_date": 1280871843,
                    "answer_id": 3400990,
                    "question_id": 3400965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>&gt;&gt;&gt; &quot;{:.1f}&quot;.format(45.34531)\n'45.3'\n</code></pre>\n<p>Or use the builtin round:</p>\n<pre><code>&gt;&gt;&gt; round(45.34531, 1)\n45.299999999999997\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 153684,
                        "reputation": 6989,
                        "user_id": 369113,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/fa9afaa27a88e6240ea25dba3a7b43ae?s=256&d=identicon&r=PG",
                        "display_name": "relet",
                        "link": "https://stackoverflow.com/users/369113/relet"
                    },
                    "is_accepted": true,
                    "score": 250,
                    "last_activity_date": 1542797835,
                    "last_edit_date": 1542797835,
                    "creation_date": 1280871725,
                    "answer_id": 3400970,
                    "question_id": 3400965,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Are you trying to represent it with only one digit:</p>\n\n<pre><code>print(\"{:.1f}\".format(number)) # Python3\nprint \"%.1f\" % number          # Python2\n</code></pre>\n\n<p>or actually round off the other decimal places?</p>\n\n<pre><code>round(number,1)\n</code></pre>\n\n<p>or even round strictly down?</p>\n\n<pre><code>math.floor(number*10)/10\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 74365,
                        "reputation": 6617,
                        "user_id": 213725,
                        "user_type": "registered",
                        "accept_rate": 54,
                        "profile_image": "https://www.gravatar.com/avatar/826d0bc7f6b4b43f3fceec0844c5b1e8?s=256&d=identicon&r=PG",
                        "display_name": "DixonD",
                        "link": "https://stackoverflow.com/users/213725/dixond"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1280871823,
                    "creation_date": 1280871823,
                    "answer_id": 3400987,
                    "question_id": 3400965,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>round(number, 1)\n</code></pre>\n"
                }
            ]
        },
        {
            "14419206": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user1632861"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1521658113,
                    "last_edit_date": 1521658113,
                    "creation_date": 1358632197,
                    "answer_id": 14419242,
                    "question_id": 14419206,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's called slicing, and it returns everything of <code>message</code> but the last element.</p>\n\n<p>Best way to understand this is with example:</p>\n\n<pre><code>In [1]: [1, 2, 3, 4][:-1]\nOut[1]: [1, 2, 3]\nIn [2]: \"Hello\"[:-1]\nOut[2]: \"Hell\"\n</code></pre>\n\n<p>You can always replace <code>-1</code> with any number:</p>\n\n<pre><code>In [4]: \"Hello World\"[:2] # Indexes starting from 0\nOut[4]: \"He\"\n</code></pre>\n\n<p>The last index is not included. </p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user1786283"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1358632921,
                    "last_edit_date": 1495541913,
                    "creation_date": 1358632084,
                    "answer_id": 14419218,
                    "question_id": 14419206,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It is list indexing, it returns all elements <code>[:]</code> except the last one <code>-1</code>. Similar question <a href=\"https://stackoverflow.com/questions/509211/the-python-slice-notation\">here</a> </p>\n\n<p>For example, </p>\n\n<pre><code>&gt;&gt;&gt; a = [1,2,3,4,5,6]\n&gt;&gt;&gt; a[:-1]\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>It works like this </p>\n\n<p><code>a[start:end]</code></p>\n\n<pre><code>&gt;&gt;&gt; a[1:2]\n[2]\n</code></pre>\n\n<p><code>a[start:]</code></p>\n\n<pre><code>&gt;&gt;&gt; a[1:]\n[2, 3, 4, 5, 6]\n</code></pre>\n\n<p><code>a[:end]</code><br>\nYour case  </p>\n\n<pre><code>&gt;&gt;&gt; a = [1,2,3,4,5,6]\n&gt;&gt;&gt; a[:-1]\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p><code>a[:]</code></p>\n\n<pre><code>&gt;&gt;&gt; a[:]\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75311,
                        "reputation": 386324,
                        "user_id": 216074,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=256&d=identicon&r=PG",
                        "display_name": "poke",
                        "link": "https://stackoverflow.com/users/216074/poke"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1358632693,
                    "creation_date": 1358632693,
                    "answer_id": 14419303,
                    "question_id": 14419206,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To answer your case directly:</p>\n\n<pre><code>if message.startswith('&lt;stream:stream'): message = message[:-1] + ' /&gt;'\n</code></pre>\n\n<p>This basically checks, if <code>message</code> starts with <code>&lt;stream:stream</code>, and if that is the case it will drop the last character and add a <code>' /&gt;'</code> instead.</p>\n\n<p>So, as your message is an XML string, it will make the element an empty element, closing itself.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1380677,
                        "reputation": 5112,
                        "user_id": 1313757,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/gwyaS.jpg?s=256",
                        "display_name": "jackcogdill",
                        "link": "https://stackoverflow.com/users/1313757/jackcogdill"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1358632424,
                    "last_edit_date": 1358632424,
                    "creation_date": 1358632077,
                    "answer_id": 14419217,
                    "question_id": 14419206,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's called <code>slicing</code></p>\n\n<p>\"Return a slice object representing the set of indices specified by range(start, stop, step).\"<br>\n-from this link: <a href=\"http://docs.python.org/2/library/functions.html#slice\" rel=\"nofollow\">http://docs.python.org/2/library/functions.html#slice</a></p>\n\n<p>You'll notice it's similar to the range arguments, and the <code>:</code> part returns the entire iterable, so the <code>-1</code> is everything except the last index.</p>\n\n<p>Here is some basic functionality of slicing:</p>\n\n<pre><code>&gt;&gt;&gt; s = 'Hello, World'\n&gt;&gt;&gt; s[:-1]\n'Hello, Worl'\n&gt;&gt;&gt; s[:]\n'Hello, World'\n&gt;&gt;&gt; s[1:]\n'ello, World'\n&gt;&gt;&gt; s[5]\n','\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Follows these arguments:</p>\n\n<pre><code>a[start:stop:step]\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>a[start:stop, i] \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 499043,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1358632087,
                    "creation_date": 1358632087,
                    "answer_id": 14419219,
                    "question_id": 14419206,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It returns <code>message</code> without the last element. If <code>message</code> is a string, <code>message[:-1]</code> drops the last character.</p>\n\n<p>See <a href=\"http://docs.python.org/2/tutorial/introduction.html\" rel=\"nofollow\">the tutorial</a>.</p>\n"
                }
            ]
        },
        {
            "20309255": [
                {
                    "owner": {
                        "account_id": 203326,
                        "reputation": 31693,
                        "user_id": 450917,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/fb89317c68393b59c5c66e0045112aac?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Gringo Suave",
                        "link": "https://stackoverflow.com/users/450917/gringo-suave"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1647815644,
                    "last_edit_date": 1647815644,
                    "creation_date": 1647811133,
                    "answer_id": 71550729,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I generally recommend the f-string/format version, but sometimes you have a tuple, need, or want to use printf-style instead.  I did this time and decided to use this:</p>\n<pre><code>&gt;&gt;&gt; res = (1280, 720)\n&gt;&gt;&gt; '%04sx%04s' % res\n'1280x 720'\n</code></pre>\n<p>Thought it was a touch more readable than the format version:</p>\n<pre><code>&gt;&gt;&gt; f'{res[0]:&gt;4}x{res[1]:&gt;4}'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8285589,
                        "reputation": 798,
                        "user_id": 6228784,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-PX4B5BM6QGY/AAAAAAAAAAI/AAAAAAAAALM/ukKh0UfxTiI/photo.jpg?sz=256",
                        "display_name": "Matin Ashtiani",
                        "link": "https://stackoverflow.com/users/6228784/matin-ashtiani"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1626069138,
                    "last_edit_date": 1626069138,
                    "creation_date": 1613786886,
                    "answer_id": 66287306,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <code>rjust</code> and <code>ljust</code> functions to add specific characters before or after a string to reach a specific length.\nThe first parameter those methods is the total character number after transforming the string.</p>\n<h2>Right justified (add to the left)</h2>\n<pre><code>numStr = '69' \nnumStr = numStr.rjust(5, '*')\n</code></pre>\n<p>The result is <code>***69</code></p>\n<h3>Left justified (add to the right)</h3>\n<p>And for the left:</p>\n<pre><code>numStr = '69' \nnumStr = numStr.ljust(3, '#')\n</code></pre>\n<p>The result will be <code>69#</code></p>\n<h3>Fill with Leading Zeros</h3>\n<p>Also to add zeros you can simply use:</p>\n<pre><code>numstr.zfill(8)\n</code></pre>\n<p>Which gives you <code>00000069</code> as the result.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11919344,
                        "reputation": 1275,
                        "user_id": 8722421,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/97a3ea2c1d03fd8dacd8f7457b8339f4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Amiga500",
                        "link": "https://stackoverflow.com/users/8722421/amiga500"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1614706599,
                    "last_edit_date": 1614706599,
                    "creation_date": 1609945562,
                    "answer_id": 65598264,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I know this is a bit of an old question, but I've ended up making my own little class for it.</p>\n<p>Might be useful to someone so I'll stick it up. I used a class variable, which is inherently persistent, to ensure sufficient whitespace was added to clear any old lines. See below:</p>\n<p>2021-03-02 update: Improved a bit - when working through a large codebase, you know whether the line you are writing is one you care about or not, but you don't know what was previously written to the console and whether you want to retain it.</p>\n<p>This update takes care of that, a class variable you update when writing to the console keeps track of whether the line you are currently writing is one you want to keep, or allow overwriting later on.</p>\n<pre><code>class consolePrinter():\n'''\nClass to write to the console\n\nObjective is to make it easy to write to console, with user able to \noverwrite previous line (or not)\n'''\n# -------------------------------------------------------------------------    \n#Class variables\nstringLen = 0    \noverwriteLine = False\n# -------------------------------------------------------------------------    \n    \n# -------------------------------------------------------------------------\ndef writeline(stringIn, overwriteThisLine=False):\n    import sys\n    #Get length of stringIn and update stringLen if needed\n    if len(stringIn) &gt; consolePrinter.stringLen:\n        consolePrinter.stringLen = len(stringIn)+1\n    \n    ctrlString = &quot;{:&lt;&quot;+str(consolePrinter.stringLen)+&quot;}&quot;\n\n    prevOverwriteLine = consolePrinter.overwriteLine\n    if prevOverwriteLine:\n        #Previous line entry can be overwritten, so do so\n        sys.stdout.write(&quot;\\r&quot; + ctrlString.format(stringIn))\n    else:\n        #Previous line entry cannot be overwritten, take a new line\n        sys.stdout.write(&quot;\\n&quot; + stringIn)\n    sys.stdout.flush()\n    \n    #Update the class variable for prevOverwriteLine\n    consolePrinter.overwriteLine = overwriteThisLine\n\n    return\n</code></pre>\n<p>Which then is called via:</p>\n<pre><code>consolePrinter.writeline(&quot;text here&quot;, True) \n</code></pre>\n<p>If you want this line to be overwriteable</p>\n<pre><code>consolePrinter.writeline(&quot;text here&quot;,False)\n</code></pre>\n<p>if you don't.</p>\n<p>Note, for it to work right, all messages pushed to the console would need to be through consolePrinter.writeline.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12199264,
                        "reputation": 956,
                        "user_id": 8903959,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/035ed9587505ec1b444df22279eac024?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Justin Furuness",
                        "link": "https://stackoverflow.com/users/8903959/justin-furuness"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1593312842,
                    "creation_date": 1593312842,
                    "answer_id": 62617715,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have python version 3.6 or higher you can use f strings</p>\n<pre><code>&gt;&gt;&gt; string = &quot;John&quot;\n&gt;&gt;&gt; f&quot;{string:&lt;15}&quot;\n'John           '\n</code></pre>\n<p>Or if you'd like it to the left</p>\n<pre><code>&gt;&gt;&gt; f&quot;{string:&gt;15}&quot;\n'          John'\n</code></pre>\n<p>Centered</p>\n<pre><code>&gt;&gt;&gt; f&quot;{string:^15}&quot;\n'     John      '\n</code></pre>\n<p>For more variations, feel free to check out the docs: <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\" rel=\"noreferrer\">https://docs.python.org/3/library/string.html#format-string-syntax</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 2193694,
                        "reputation": 257,
                        "user_id": 1940002,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/f61f3df5d44a6e9f836dbd5c2daa75e2?s=256&d=identicon&r=PG",
                        "display_name": "dragon40226",
                        "link": "https://stackoverflow.com/users/1940002/dragon40226"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1531789128,
                    "creation_date": 1531789128,
                    "answer_id": 51371822,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Just whipped this up for my problem, it just adds a space until the length of string is more than the min_length you give it.</p>\n\n<pre><code>def format_string(str, min_length):\n    while len(str) &lt; min_length:\n        str += \" \"\n    return str\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2629998"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1395684557,
                    "last_edit_date": 1395684557,
                    "creation_date": 1385878331,
                    "answer_id": 20309297,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>name = \"John\" // your variable\nresult = (name+\"               \")[:15] # this adds 15 spaces to the \"name\"\n                                       # but cuts it at 15 characters\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1782592,
                        "reputation": 82290,
                        "user_id": 1624921,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/keNmm.jpg?s=256",
                        "display_name": "Nafiul Islam",
                        "link": "https://stackoverflow.com/users/1624921/nafiul-islam"
                    },
                    "is_accepted": true,
                    "score": 174,
                    "last_activity_date": 1385878852,
                    "creation_date": 1385878852,
                    "answer_id": 20309356,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is super simple with <code>format</code>:</p>\n\n<pre><code>&gt;&gt;&gt; a = \"John\"\n&gt;&gt;&gt; \"{:&lt;15}\".format(a)\n'John           '\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 105313,
                        "reputation": 37097,
                        "user_id": 281108,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/b160d50a7ecfe6018348629cb8677538?s=256&d=identicon&r=PG",
                        "display_name": "Ismail Badawi",
                        "link": "https://stackoverflow.com/users/281108/ismail-badawi"
                    },
                    "is_accepted": false,
                    "score": 129,
                    "last_activity_date": 1385878410,
                    "creation_date": 1385878410,
                    "answer_id": 20309306,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use the <a href=\"http://docs.python.org/2/library/stdtypes.html#str.ljust\"><code>ljust</code> method on strings</a>.</p>\n\n<pre><code>&gt;&gt;&gt; name = 'John'\n&gt;&gt;&gt; name.ljust(15)\n'John           '\n</code></pre>\n\n<p>Note that if the name is longer than 15 characters, <code>ljust</code> won't truncate it. If you want to end up with exactly 15 characters, you can slice the resulting string:</p>\n\n<pre><code>&gt;&gt;&gt; name.ljust(15)[:15]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3305522,
                        "reputation": 437,
                        "user_id": 2780466,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/88f83cc3e41a8b786f2357382d6f3205?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Matt",
                        "link": "https://stackoverflow.com/users/2780466/matt"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1385878299,
                    "creation_date": 1385878299,
                    "answer_id": 20309293,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First check to see if the string's length needs to be shortened, then add spaces until it is as long as the field length. </p>\n\n<pre><code>fieldLength = 15\nstring1 = string1[0:15] # If it needs to be shortened, shorten it\nwhile len(string1) &lt; fieldLength:\n    rand += \" \"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2334136,
                        "reputation": 11092,
                        "user_id": 2046858,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/b8SUS.jpg?s=256",
                        "display_name": "Aswin Murugesh",
                        "link": "https://stackoverflow.com/users/2046858/aswin-murugesh"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1385878125,
                    "creation_date": 1385878125,
                    "answer_id": 20309271,
                    "question_id": 20309255,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>string = \"\"\nname = raw_input() #The value at the field\nlength = input() #the length of the field\nstring += name\nstring += \" \"*(length-len(name)) # Add extra spaces\n</code></pre>\n\n<p>This will add the number of spaces needed, provided the field has length >= the length of the name provided</p>\n"
                }
            ]
        },
        {
            "36193540": [
                {
                    "owner": {
                        "account_id": 176857,
                        "reputation": 368116,
                        "user_id": 2225682,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=256&d=identicon&r=PG",
                        "display_name": "falsetru",
                        "link": "https://stackoverflow.com/users/2225682/falsetru"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1488476119,
                    "last_edit_date": 1488476119,
                    "creation_date": 1458797452,
                    "answer_id": 36193829,
                    "question_id": 36193540,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://www.python.org/dev/peps/pep-0484/#the-problem-of-forward-declarations\" rel=\"noreferrer\">PEP 0484 - Type Hints - The problem of forward declarations</a> addresses the issue:</p>\n\n<blockquote>\n  <p>The problem with type hints is that annotations (per <a href=\"https://www.python.org/dev/peps/pep-3107/\" rel=\"noreferrer\">PEP 3107</a> , and\n  similar to default values) are evaluated at the time a function is\n  defined, and thus any names used in an annotation must be already\n  defined when the function is being defined. A common scenario is a\n  class definition whose methods need to reference the class itself in\n  their annotations. (More general, it can also occur with mutually\n  recursive classes.) This is natural for container types, for example:</p>\n  \n  <p>...</p>\n  \n  <p>As written this will not work, because of the peculiarity in Python\n  that class names become defined once the entire body of the class has\n  been executed. <strong>Our solution, which isn't particularly elegant, but\n  gets the job done, is to allow using string literals in annotations.</strong>\n  Most of the time you won't have to use this though -- most uses of\n  type hints are expected to reference builtin types or types defined in\n  other modules.</p>\n</blockquote>\n\n<pre><code>from typing import TypeVar, Optional, Generic\n\nT = TypeVar('T')\nclass Node(Generic[T]):\n    left = None\n    right = None\n    value = None\n\n    def __init__(\n        self,\n        value: Optional[T],\n        left: Optional['Node[T]']=None,\n        right: Optional['Node[T]']=None,\n    ) -&gt; None:\n        self.value = value\n        self.left = left\n        self.right = right\n</code></pre>\n\n<hr>\n\n<pre><code>&gt;&gt;&gt; import typing\n&gt;&gt;&gt; typing.get_type_hints(Node.__init__)\n{'return': None,\n 'value': typing.Union[~T, NoneType],\n 'left': typing.Union[__main__.Node[~T], NoneType],\n 'right': typing.Union[__main__.Node[~T], NoneType]}\n</code></pre>\n"
                }
            ]
        },
        {
            "31548680": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 39,
                    "last_activity_date": 1437511027,
                    "last_edit_date": 1437511027,
                    "creation_date": 1437510272,
                    "answer_id": 31548934,
                    "question_id": 31548680,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The difference is in the implementation of the <code>int</code> type. Python 3.x uses the arbitrary-sized integer type (<code>long</code> in 2.x) exclusively, while in Python 2.x for values up to <code>sys.maxint</code> a simpler <code>int</code> type is used that uses a simple C <code>long</code> under the hood.</p>\n\n<p>Once you limit your loops to <em><code>long</code></em> integers, Python 3.x is faster:</p>\n\n<pre><code>&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; MAX_NUM = 3*10**3\n&gt;&gt;&gt; def bar():\n...     i = MAX_NUM + sys.maxsize\n...     while i &gt; sys.maxsize:\n...         i -= 1\n... \n</code></pre>\n\n<p>Python 2:</p>\n\n<pre><code>&gt;&gt;&gt; timeit(bar, number=10000)\n5.704327821731567\n</code></pre>\n\n<p>Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; timeit(bar, number=10000)\n3.7299320790334605\n</code></pre>\n\n<p>I used <code>sys.maxsize</code> as <code>sys.maxint</code> was dropped from Python 3, but the integer value is basically the same.</p>\n\n<p>The speed difference in Python 2 is thus limited to the first (2 ** 63) - 1 integers on 64-bit, (2 ** 31) - 1 integers on 32 bit systems.</p>\n\n<p>Since you cannot use the <code>long</code> type with <code>xrange()</code> on Python 2, I did not include a comparison for that function.</p>\n"
                }
            ]
        },
        {
            "574730": [
                {
                    "owner": {
                        "account_id": 19724,
                        "reputation": 41574,
                        "user_id": 46460,
                        "user_type": "registered",
                        "accept_rate": 46,
                        "profile_image": "https://www.gravatar.com/avatar/ded01cdab114abe4ec13511e4c25b9bb?s=256&d=identicon&r=PG",
                        "display_name": "Andy Hume",
                        "link": "https://stackoverflow.com/users/46460/andy-hume"
                    },
                    "is_accepted": true,
                    "score": 862,
                    "last_activity_date": 1602646618,
                    "last_edit_date": 1602646618,
                    "creation_date": 1235300635,
                    "answer_id": 574734,
                    "question_id": 574730,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>except Exception:\n    pass\n</code></pre>\n<p><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#pass-statements\" rel=\"noreferrer\">Python docs for the pass statement</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4551,
                        "reputation": 95781,
                        "user_id": 6899,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=256&d=identicon&r=PG",
                        "display_name": "tzot",
                        "link": "https://stackoverflow.com/users/6899/tzot"
                    },
                    "is_accepted": false,
                    "score": 349,
                    "last_activity_date": 1540458082,
                    "last_edit_date": 1540458082,
                    "creation_date": 1235334195,
                    "answer_id": 575711,
                    "question_id": 574730,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Generic answer</h3>\n\n<p>The standard \"nop\" in Python is the <code>pass</code> statement:</p>\n\n<pre><code>try:\n    do_something()\nexcept Exception:\n    pass\n</code></pre>\n\n<p>Using <code>except Exception</code> instead of a bare <code>except</code> avoid catching exceptions like <code>SystemExit</code>, <code>KeyboardInterrupt</code> etc.</p>\n\n<h3>Python 2</h3>\n\n<p>Because of the last thrown exception being remembered in Python 2, some of the objects involved in the exception-throwing statement are being kept live indefinitely (actually, until the next exception). In case this is important for you and (typically) you don't need to remember the last thrown exception, you might want to do the following instead of <code>pass</code>:</p>\n\n<pre><code>try:\n    do_something()\nexcept Exception:\n    sys.exc_clear()\n</code></pre>\n\n<p>This clears the last thrown exception.</p>\n\n<h3>Python 3</h3>\n\n<p>In Python 3, the variable that holds the exception instance gets <em>deleted</em> on exiting the <code>except</code> block. Even if the variable held a value previously, after entering and exiting the <code>except</code> block it becomes <strong>undefined</strong> again.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 436593,
                        "reputation": 10826,
                        "user_id": 823869,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=256&d=identicon&r=PG",
                        "display_name": "Jack O&#39;Connor",
                        "link": "https://stackoverflow.com/users/823869/jack-oconnor"
                    },
                    "is_accepted": false,
                    "score": 313,
                    "last_activity_date": 1455894653,
                    "last_edit_date": 1455894653,
                    "creation_date": 1363941716,
                    "answer_id": 15566001,
                    "question_id": 574730,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There's a new way to do this coming in Python 3.4:</p>\n\n<pre><code>from contextlib import suppress\n\nwith suppress(Exception):\n  # your code\n</code></pre>\n\n<p>Here's the commit that added it: <a href=\"http://hg.python.org/cpython/rev/406b47c64480\" rel=\"noreferrer\">http://hg.python.org/cpython/rev/406b47c64480</a></p>\n\n<p>And here's the author, Raymond Hettinger, talking about this and all sorts of other Python hotness (relevant bit at 43:30): <a href=\"http://www.youtube.com/watch?v=OSGv2VnC0go\" rel=\"noreferrer\">http://www.youtube.com/watch?v=OSGv2VnC0go</a></p>\n\n<p>If you wanted to emulate the bare <code>except</code> keyword and also ignore things like <code>KeyboardInterrupt</code>\u2014though you usually don't\u2014you could use <code>with suppress(BaseException)</code>.</p>\n\n<p>Edit: Looks like <code>ignored</code> was renamed to <code>suppress</code> before the 3.4 release.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20496,
                        "reputation": 66758,
                        "user_id": 49018,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/86da73201add35cf85cafcd5355737ad?s=256&d=identicon&r=PG",
                        "display_name": "ryeguy",
                        "link": "https://stackoverflow.com/users/49018/ryeguy"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1235300673,
                    "creation_date": 1235300673,
                    "answer_id": 574737,
                    "question_id": 574730,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Try this:</p>\n\n<pre><code>try:\n    blah()\nexcept:\n    pass\n</code></pre>\n"
                }
            ]
        },
        {
            "1213706": [
                {
                    "owner": {
                        "account_id": 11955026,
                        "reputation": 27,
                        "user_id": 8747638,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2e23609e387484fba8d3587ac0fe0027?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nerminz",
                        "link": "https://stackoverflow.com/users/8747638/nerminz"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1517002750,
                    "creation_date": 1517002750,
                    "answer_id": 48469936,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Simple solution after searching for hours is to check first if that folder actually exist!</p>\n\n<pre><code>GIT_DIR=\"C:/Users/....\"\nif os.path.exists(GIT_DIR):\n    shutil.rmtree(GIT_DIR)\n</code></pre>\n\n<p>This did the trick for me.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 43574,
                        "reputation": 23446,
                        "user_id": 127465,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/0ca64f67167d37e7041e561104034bb2?s=256&d=identicon&r=PG",
                        "display_name": "ThomasH",
                        "link": "https://stackoverflow.com/users/127465/thomash"
                    },
                    "is_accepted": true,
                    "score": 89,
                    "last_activity_date": 1363001311,
                    "last_edit_date": 1363001311,
                    "creation_date": 1249074918,
                    "answer_id": 1214935,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>We've had issues removing files and directories on Windows, even if we had just copied them, if they were set to 'readonly'. <code>shutil.rmtree()</code> offers you sort of exception handlers to handle this situation. You call it and provide an exception handler like this:</p>\n\n<pre><code>import errno, os, stat, shutil\n\ndef handleRemoveReadonly(func, path, exc):\n  excvalue = exc[1]\n  if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:\n      os.chmod(path, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) # 0777\n      func(path)\n  else:\n      raise\n\nshutil.rmtree(filename, ignore_errors=False, onerror=handleRemoveReadonly)\n</code></pre>\n\n<p>You might want to try that.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 93840,
                        "reputation": 699,
                        "user_id": 256549,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c5b9eb87c5a7260aba29c2258810946c?s=256&d=identicon&r=PG",
                        "display_name": "fylb",
                        "link": "https://stackoverflow.com/users/256549/fylb"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1331891964,
                    "creation_date": 1331891964,
                    "answer_id": 9735134,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>@ThomasH : another brick to the wall.</p>\n\n<p>On unix systems, you have to ensure that parent directory is writeable too.\nHere is another version :</p>\n\n<pre><code>def remove_readonly(func, path, exc):\n    excvalue = exc[1]\n    if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:\n\n        # ensure parent directory is writeable too\n        pardir = os.path.abspath(os.path.join(path, os.path.pardir))\n        if not os.access(pardir, os.W_OK):\n            os.chmod(pardir, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO)\n\n        os.chmod(path, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) # 0777\n        func(path)\n    else:\n        raise\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16950,
                        "reputation": 2595,
                        "user_id": 37450,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/3f6b2fe556b63bcb36d48ee05cb02609?s=256&d=identicon&r=PG",
                        "display_name": "msvcyc",
                        "link": "https://stackoverflow.com/users/37450/msvcyc"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1249061753,
                    "last_edit_date": 1249061753,
                    "creation_date": 1249059972,
                    "answer_id": 1213724,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How are you running the script? From an interactive console session? If so, just open up a DOS command window (using cmd) and type 'whoami'. That is who you are running the scripts interactively.</p>\n\n<p>Ok I saw your edits just now...why don't you print the path and check the properties to see if the user account running the scripts has the required privileges?</p>\n\n<p>If whoami does not work on your version of Windows, you may use the environment variables like SET USERNAME and SET DOMAINNAME from your command window.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12462,
                        "reputation": 164982,
                        "user_id": 24545,
                        "user_type": "registered",
                        "accept_rate": 99,
                        "profile_image": "https://i.sstatic.net/TIPwN.jpg?s=256",
                        "display_name": "Yuval Adam",
                        "link": "https://stackoverflow.com/users/24545/yuval-adam"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1249060831,
                    "creation_date": 1249060831,
                    "answer_id": 1213797,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The scripts have no special user, they just run under the currently logged-in user which executed the script.</p>\n\n<p>Have you tried checking that:</p>\n\n<ul>\n<li>you are trying to delete a valid path? and that</li>\n<li>the path has no locked files?</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 4429,
                        "reputation": 1246,
                        "user_id": 6648,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/MxGE2.jpg?s=256",
                        "display_name": "pzr",
                        "link": "https://stackoverflow.com/users/6648/pzr"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1249060155,
                    "creation_date": 1249060155,
                    "answer_id": 1213743,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If the script is being run as a scheduled task (which seems likely for a cleanup script), it will probably run as SYSTEM. It's (unwise, but) possible to set permissions on directories so that SYSTEM has no access.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2323,
                        "reputation": 12489,
                        "user_id": 3226,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/57dd7c5810a0de01561f72ae5d749bbb?s=256&d=identicon&r=PG",
                        "display_name": "Max Schmeling",
                        "link": "https://stackoverflow.com/users/3226/max-schmeling"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1249059832,
                    "creation_date": 1249059832,
                    "answer_id": 1213713,
                    "question_id": 1213706,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I've never used Python, but I would assume it runs as whatever user executes the script.</p>\n"
                }
            ]
        },
        {
            "41452819": [
                {
                    "owner": {
                        "account_id": 2788680,
                        "reputation": 3259,
                        "user_id": 2399397,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LL1BT.jpg?s=256",
                        "display_name": "Rafael Aguilar",
                        "link": "https://stackoverflow.com/users/2399397/rafael-aguilar"
                    },
                    "is_accepted": true,
                    "score": 111,
                    "last_activity_date": 1658747451,
                    "last_edit_date": 1658747451,
                    "creation_date": 1483479630,
                    "answer_id": 41452826,
                    "question_id": 41452819,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>list.append</code> function does not return any value(but <code>None</code>), it just adds the value to the list you are using to call that method.</p>\n<p>In the first loop round you will assign <code>None</code> (because the no-return of <code>append</code>) to <code>a</code>, then in the second round it will try to call <code>a.append</code>, as <code>a is None</code> it will raise the Exception you are seeing</p>\n<p>You just need to change it to:</p>\n<pre><code>a = []\nfor i in range(5):\n    # change a = a.append(i) to    \n    a.append(i)\nprint(a)\n# [0, 1, 2, 3, 4]\n</code></pre>\n<p><code>list.append</code> is what is called a <em>mutating or destructive</em> method, i.e. it will destroy or mutate the previous object into a new one(or a new state).</p>\n<p>If you would like to create a new list based in one list without destroying or mutating it you can do something like this:</p>\n<pre><code>a=['a', 'b', 'c']\nresult = a + ['d']\n\nprint result\n# ['a', 'b', 'c', 'd']\n\nprint a\n# ['a', 'b', 'c']\n</code></pre>\n<p>As a corollary only, you can mimic the <code>append</code> method by doing the following:</p>\n<pre><code>a = ['a', 'b', 'c']\na = a + ['d']\n\nprint a\n# ['a', 'b', 'c', 'd']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7874785,
                        "reputation": 6419,
                        "user_id": 5952681,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/cd1d7051c326321b5ebb368d725dfe02?s=256&d=identicon&r=PG",
                        "display_name": "linusg",
                        "link": "https://stackoverflow.com/users/5952681/linusg"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1537521002,
                    "last_edit_date": 1537521002,
                    "creation_date": 1483479643,
                    "answer_id": 41452829,
                    "question_id": 41452819,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You don't need the assignment, <code>list.append(x)</code> will always append <code>x</code> to <code>a</code> and therefore there's no need te redefine <code>a</code>.</p>\n\n<pre><code>a = []\nfor i in range(5):    \n    a.append(i)\nprint(a)\n</code></pre>\n\n<p>is all you need. This works because <code>list</code>s are mutable.</p>\n\n<p>Also see the <a href=\"https://docs.python.org/3.7/tutorial/datastructures.html\" rel=\"noreferrer\">docs on data structures</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3448357,
                        "reputation": 4637,
                        "user_id": 2888580,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1c0dd533cb7b1f32949fc1cef3bd0145?s=256&d=identicon&r=PG",
                        "display_name": "Muntaser Ahmed",
                        "link": "https://stackoverflow.com/users/2888580/muntaser-ahmed"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1483479670,
                    "creation_date": 1483479670,
                    "answer_id": 41452834,
                    "question_id": 41452819,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No need to re-assign.</p>\n\n<pre><code>a=[]\nfor i in range(5):    \n    a.append(i)\na\n</code></pre>\n"
                }
            ]
        },
        {
            "28738836": [
                {
                    "owner": {
                        "account_id": 5585613,
                        "reputation": 6245,
                        "user_id": 4426072,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/0d0cf6c1689863d81d59405a6f46fc42?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "DannyMoshe",
                        "link": "https://stackoverflow.com/users/4426072/dannymoshe"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1710277995,
                    "last_edit_date": 1710277995,
                    "creation_date": 1536608738,
                    "answer_id": 52264488,
                    "question_id": 28738836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To put it simply you make your subplots call for an even number (in this case 6 plots):</p>\n<pre><code>f, ax = plt.subplots(3, 2, figsize=(12, 15))\n</code></pre>\n<p>Then you delete the one you don't need:</p>\n<pre><code>f.delaxes(ax[2,1]) # The indexing is zero-based here\n</code></pre>\n<p>This question and response are looking at this in an automated fashion but I thought it worthwhile to post the basic use case here.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16290450,
                        "reputation": 1371,
                        "user_id": 11764049,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/j7lts.jpg?s=256",
                        "display_name": "Aelius",
                        "link": "https://stackoverflow.com/users/11764049/aelius"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1636388598,
                    "creation_date": 1636388598,
                    "answer_id": 69886723,
                    "question_id": 28738836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of doing calculations in order to detect what subplot needs to be deleted, you can check in what subplot there is nothing printed. You can look at <a href=\"https://stackoverflow.com/a/52387825/11764049\">this answer</a> for various methods to check if something is plotted on an axis. Using the function <a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.has_data.html#matplotlib.axes.Axes.has_data\" rel=\"nofollow noreferrer\"><code>ax.has_Data()</code></a> you can simplify your function like this:</p>\n<pre><code>def main():\n    n = 5\n    max_width = 2 ##images per row\n    height, width = n//max_width +1, max_width\n    fig, axs = plt.subplots(height, width, sharex=True)\n\n    for i in range(n):\n        nx = 100\n        x = np.arange(nx)\n        y = np.random.rand(nx)\n        ax = axs.flat[i]\n        ax.plot(x, y, '-', label='plot '+str(i+1))\n        ax.legend(loc=&quot;upper right&quot;)\n\n    ## access each axes object via axs.flat\n    for ax in axs.flat:\n        ## check if something was plotted \n        if not bool(ax.has_data()):\n            fig.delaxes(ax) ## delete if nothing is plotted in the axes obj\n\n    fig.show()\n</code></pre>\n<p><a href=\"https://i.sstatic.net/bn30c.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/bn30c.png\" alt=\"enter image description here\" /></a></p>\n<p>You can also specify how many images you want using the <code>n</code> parameter and how many images per row you desire with <code>max_width</code> parameter.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1711186,
                        "reputation": 2383,
                        "user_id": 1569221,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/b4c8h.jpg?s=256",
                        "display_name": "canary_in_the_data_mine",
                        "link": "https://stackoverflow.com/users/1569221/canary-in-the-data-mine"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1545411717,
                    "last_edit_date": 1545411717,
                    "creation_date": 1545166657,
                    "answer_id": 53840947,
                    "question_id": 28738836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I generate an arbitrary number of subplots all the time (sometimes the data leads to 3 subplots, sometimes 13, etc). I wrote a little utility function to stop having to think about it.</p>\n\n<p>The two functions I define are the follows. You can change the stylistic choices to match your preferences. </p>\n\n<pre><code>import math\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n\ndef choose_subplot_dimensions(k):\n    if k &lt; 4:\n        return k, 1\n    elif k &lt; 11:\n        return math.ceil(k/2), 2\n    else:\n        # I've chosen to have a maximum of 3 columns\n        return math.ceil(k/3), 3\n\n\ndef generate_subplots(k, row_wise=False):\n    nrow, ncol = choose_subplot_dimensions(k)\n    # Choose your share X and share Y parameters as you wish:\n    figure, axes = plt.subplots(nrow, ncol,\n                                sharex=True,\n                                sharey=False)\n\n    # Check if it's an array. If there's only one plot, it's just an Axes obj\n    if not isinstance(axes, np.ndarray):\n        return figure, [axes]\n    else:\n        # Choose the traversal you'd like: 'F' is col-wise, 'C' is row-wise\n        axes = axes.flatten(order=('C' if row_wise else 'F'))\n\n        # Delete any unused axes from the figure, so that they don't show\n        # blank x- and y-axis lines\n        for idx, ax in enumerate(axes[k:]):\n            figure.delaxes(ax)\n\n            # Turn ticks on for the last ax in each column, wherever it lands\n            idx_to_turn_on_ticks = idx + k - ncol if row_wise else idx + k - 1\n            for tk in axes[idx_to_turn_on_ticks].get_xticklabels():\n                tk.set_visible(True)\n\n        axes = axes[:k]\n        return figure, axes\n</code></pre>\n\n<p>And here's example usage with 13 subplots: </p>\n\n<pre><code>x_variable = list(range(-5, 6))\nparameters = list(range(0, 13))\n\nfigure, axes = generate_subplots(len(parameters), row_wise=True)\nfor parameter, ax in zip(parameters, axes):\n    ax.plot(x_variable, [x**parameter for x in x_variable])\n    ax.set_title(label=\"y=x^{}\".format(parameter))\n\nplt.tight_layout()\nplt.show()\n</code></pre>\n\n<p>Which produces the following: </p>\n\n<p><a href=\"https://i.sstatic.net/h2dfm.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/h2dfm.png\" alt=\"enter image description here\"></a></p>\n\n<p>Or, switching to column-wise traversal order (<code>generate_subplots(..., row_wise=False)</code>) generates:</p>\n\n<p><a href=\"https://i.sstatic.net/5y6Bj.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/5y6Bj.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10354179,
                        "reputation": 2141,
                        "user_id": 7636734,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LJMYy.jpg?s=256",
                        "display_name": "Jagannath Banerjee",
                        "link": "https://stackoverflow.com/users/7636734/jagannath-banerjee"
                    },
                    "is_accepted": false,
                    "score": -4,
                    "last_activity_date": 1543555989,
                    "creation_date": 1543555989,
                    "answer_id": 53551770,
                    "question_id": 28738836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For Python 3, you can delete as below :</p>\n\n<pre><code># I have 5 plots that i want to show in 2 rows. So I do 3 columns. That way i have 6 plots.\nf, axes = plt.subplots(2, 3, figsize=(20, 10))\n\nsns.countplot(sales_data['Gender'], order = sales_data['Gender'].value_counts().index, palette = \"Set1\", ax = axes[0,0])\nsns.countplot(sales_data['Age'], order = sales_data['Age'].value_counts().index, palette = \"Set1\", ax = axes[0,1])\nsns.countplot(sales_data['Occupation'], order = sales_data['Occupation'].value_counts().index, palette = \"Set1\", ax = axes[0,2])\nsns.countplot(sales_data['City_Category'], order = sales_data['City_Category'].value_counts().index, palette = \"Set1\", ax = axes[1,0])\nsns.countplot(sales_data['Marital_Status'], order = sales_data['Marital_Status'].value_counts().index, palette = \"Set1\", ax = axes[1, 1])\n\n# This line will delete the last empty plot\nf.delaxes(ax= axes[1,2]) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5082165,
                        "reputation": 10302,
                        "user_id": 4077912,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/307b9928c9c12c02028e28a0c7c23819?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Primer",
                        "link": "https://stackoverflow.com/users/4077912/primer"
                    },
                    "is_accepted": true,
                    "score": 18,
                    "last_activity_date": 1424949307,
                    "last_edit_date": 1424949307,
                    "creation_date": 1424948868,
                    "answer_id": 28740811,
                    "question_id": 28738836,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you replace last <code>if</code> in your <code>main</code> function with this:</p>\n\n<pre><code>if n % 2 != 0:\n    for l in axs[i/2-1,1].get_xaxis().get_majorticklabels():\n        l.set_visible(True)\n    f.delaxes(axs[i/2, 1])\n\nf.show()\n</code></pre>\n\n<p>It should do the trick:</p>\n\n<p><img src=\"https://i.sstatic.net/61cJ5.png\" alt=\"Plot\"></p>\n"
                }
            ]
        },
        {
            "8013076": [
                {
                    "owner": {
                        "account_id": 444540,
                        "reputation": 52678,
                        "user_id": 836407,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/U5R3Y.png?s=256",
                        "display_name": "chown",
                        "link": "https://stackoverflow.com/users/836407/chown"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1523422370,
                    "last_edit_date": 1523422370,
                    "creation_date": 1320426352,
                    "answer_id": 8013128,
                    "question_id": 8013076,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could just call them directly with <code>Parent.__init__(self)</code>:</p>\n\n<pre><code>class Parent1(object):\n\u00a0 \u00a0 def __init__(self):\n\u00a0 \u00a0 \u00a0 \u00a0 self.var1 = 1\n\nclass Parent2(object):\n\u00a0 \u00a0 def __init__(self):\n\u00a0 \u00a0 \u00a0 \u00a0 self.var2 = 2\n\nclass Child(Parent1, Parent2):\n\u00a0 \u00a0 def __init__(self):\n        Parent1.__init__(self)\n        Parent2.__init__(self)\n        print(self.var1, self.var2)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1320426592,
                    "last_edit_date": 1320426592,
                    "creation_date": 1320426282,
                    "answer_id": 8013115,
                    "question_id": 8013076,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The idea of <code>super()</code> is that you don't have to bother calling both superclasses' <code>__init__()</code> methods separately -- <code>super()</code> will take care of it, provided you use it correctly -- see <a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super/\" rel=\"noreferrer\">Raymond Hettinger's \"Python\u2019s super() considered super!\"</a> for an explanation.</p>\n\n<p>That said, I often find the disadvantages of <code>super()</code> for constructor calls outweighing the advantages.  For example, all your constructors need to provide an additional <code>**kwargs</code> argument, all classes must collaborate, non-collaborating external classes need a wrapper, you have to take care that each constructor parameter name is unique across <strong>all</strong> your classes, etc.</p>\n\n<p>So more often than not, I think it is easier to explicitly name the base class methods you want to call for constructor calls:</p>\n\n<pre><code>class Child(Parent1, Parent2):\n    def __init__(self):\n        Parent1.__init__(self)\n        Parent2.__init__(self)\n</code></pre>\n\n<p>I do use <code>super()</code> for functions that have a guaranteed prototype, like <code>__getattr__()</code>, though.  There are not disadvantages in these cases.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8847,
                        "reputation": 129418,
                        "user_id": 16102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0c4f4df702b23c8983f57d7113e809c8?s=256&d=identicon&r=PG",
                        "display_name": "Cat Plus Plus",
                        "link": "https://stackoverflow.com/users/16102/cat-plus-plus"
                    },
                    "is_accepted": true,
                    "score": 28,
                    "last_activity_date": 1320426383,
                    "creation_date": 1320426383,
                    "answer_id": 8013133,
                    "question_id": 8013076,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Invocation via <code>super</code> doesn't call all the parents, it calls the next function in the MRO chain. For this to work properly, you need to use <code>super</code> in all of the <code>__init__</code>s:</p>\n\n<pre><code>class Parent1(object):\n    def __init__(self):\n        super(Parent1, self).__init__()\n        self.var1 = 1\n\nclass Parent2(object):\n    def __init__(self):\n        super(Parent2, self).__init__()\n        self.var2 = 2\n\nclass Child(Parent1, Parent2):\n    def __init__(self):\n        super(Child, self).__init__()\n</code></pre>\n\n<p>In Python 3, you can use <code>super()</code> instead of <code>super(type, instance)</code>.</p>\n"
                }
            ]
        },
        {
            "2360598": [
                {
                    "owner": {
                        "account_id": 139102,
                        "reputation": 1148,
                        "user_id": 344471,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a6c745e4af0e8dffae9fe68b218d0d33?s=256&d=identicon&r=PG",
                        "display_name": "Derrick Petzold",
                        "link": "https://stackoverflow.com/users/344471/derrick-petzold"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1558926220,
                    "last_edit_date": 1558926220,
                    "creation_date": 1285484953,
                    "answer_id": 3796917,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Apparently I don't have a high enough reputation to do anything but post this. unutbu's answer does not unescape quotations. The only thing that I found that did was this function:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import re\nfrom htmlentitydefs import name2codepoint as n2cp\n\ndef decodeHtmlentities(string):\n    def substitute_entity(match):        \n        ent = match.group(2)\n        if match.group(1) == \"#\":\n            return unichr(int(ent))\n        else:\n            cp = n2cp.get(ent)\n            if cp:\n                return unichr(cp)\n            else:\n                return match.group()\n    entity_re = re.compile(\"&amp;(#?)(\\d{1,5}|\\w{1,8});\")\n    return entity_re.subn(substitute_entity, string)[0]\n</code></pre>\n\n<p>Which I got from this <a href=\"https://stackoverflow.com/questions/275174/how-do-i-perform-html-decoding-encoding-using-python-django\">page</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 51271,
                        "reputation": 4133,
                        "user_id": 153149,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/eeda8f9ee5108e398d183f8713be71a1?s=256&d=identicon&r=PG",
                        "display_name": "TheJacobTaylor",
                        "link": "https://stackoverflow.com/users/153149/thejacobtaylor"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1546802222,
                    "last_edit_date": 1546802222,
                    "creation_date": 1267498939,
                    "answer_id": 2360644,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I am not sure if this is a built in library or not but it looks like what you need and supports 3.1.</p>\n\n<p>From: <a href=\"http://docs.python.org/3.1/library/xml.sax.utils.html?highlight=html%20unescape\" rel=\"nofollow noreferrer\">http://docs.python.org/3.1/library/xml.sax.utils.html?highlight=html%20unescape</a></p>\n\n<p>xml.sax.saxutils.unescape(data, entities={})\nUnescape '&amp;', '&lt;', and '&gt;' in a string of data.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 251,
                    "last_activity_date": 1412711070,
                    "last_edit_date": 1412711070,
                    "creation_date": 1267498832,
                    "answer_id": 2360639,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could use the function <a href=\"https://docs.python.org/3/library/html.html#html.unescape\" rel=\"noreferrer\">html.unescape</a>:</p>\n\n<p>In <strong>Python3.4+</strong> (thanks to J.F. Sebastian for the update):</p>\n\n<pre><code>import html\nhtml.unescape('Suzy &amp;amp; John')\n# 'Suzy &amp; John'\n\nhtml.unescape('&amp;quot;')\n# '\"'\n</code></pre>\n\n<p>In <strong>Python3.3</strong> or older:</p>\n\n<pre><code>import html.parser    \nhtml.parser.HTMLParser().unescape('Suzy &amp;amp; John')\n</code></pre>\n\n<p>In <strong>Python2</strong>:</p>\n\n<pre><code>import HTMLParser\nHTMLParser.HTMLParser().unescape('Suzy &amp;amp; John')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1976567,
                        "reputation": 2793,
                        "user_id": 1774237,
                        "user_type": "registered",
                        "accept_rate": 11,
                        "profile_image": "https://www.gravatar.com/avatar/33534fb8e5ba71866edbaec506f3c247?s=256&d=identicon&r=PG",
                        "display_name": "Simanas",
                        "link": "https://stackoverflow.com/users/1774237/simanas"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1357297441,
                    "last_edit_date": 1357297441,
                    "creation_date": 1351169559,
                    "answer_id": 13069048,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In my case I have a html string escaped in as3 escape function. After a hour of googling haven't found anything useful so I wrote this recusrive function to serve for my needs. Here it is,</p>\n\n<pre><code>def unescape(string):\n    index = string.find(\"%\")\n    if index == -1:\n        return string\n    else:\n        #if it is escaped unicode character do different decoding\n        if string[index+1:index+2] == 'u':\n            replace_with = (\"\\\\\"+string[index+1:index+6]).decode('unicode_escape')\n            string = string.replace(string[index:index+6],replace_with)\n        else:\n            replace_with = string[index+1:index+3].decode('hex')\n            string = string.replace(string[index:index+3],replace_with)\n        return unescape(string)\n</code></pre>\n\n<p><strong>Edit-1</strong> Added functionality to handle unicode characters.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 680,
                        "reputation": 989276,
                        "user_id": 893,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
                        "display_name": "Greg Hewgill",
                        "link": "https://stackoverflow.com/users/893/greg-hewgill"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1267499030,
                    "creation_date": 1267499030,
                    "answer_id": 2360648,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <a href=\"http://docs.python.org/3.1/library/xml.sax.utils.html#xml.sax.saxutils.unescape\" rel=\"noreferrer\"><code>xml.sax.saxutils.unescape</code></a> for this purpose. This module is included in the Python standard library, and is portable between Python 2.x and Python 3.x.</p>\n\n<pre><code>&gt;&gt;&gt; import xml.sax.saxutils as saxutils\n&gt;&gt;&gt; saxutils.unescape(\"Suzy &amp;amp; John\")\n'Suzy &amp; John'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 74258,
                        "reputation": 123471,
                        "user_id": 213464,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/v7jDH.png?s=256",
                        "display_name": "YOU",
                        "link": "https://stackoverflow.com/users/213464/you"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1267498901,
                    "creation_date": 1267498901,
                    "answer_id": 2360642,
                    "question_id": 2360598,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python 3.x has <a href=\"http://docs.python.org/3.1/library/html.entities.html\" rel=\"nofollow noreferrer\">html.entities</a> too</p>\n"
                }
            ]
        },
        {
            "5186839": [
                {
                    "owner": {
                        "account_id": 37565,
                        "reputation": 79902,
                        "user_id": 107409,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/lGv9q.png?s=256",
                        "display_name": "Contango",
                        "link": "https://stackoverflow.com/users/107409/contango"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1652178525,
                    "creation_date": 1652178525,
                    "answer_id": 72184688,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This works on Windows with Python 3.x:</p>\n<pre><code>import os\nstr(filepath).replace(os.path.sep, '/')\n</code></pre>\n<p>Where: <code>os.path.sep</code> is <code>\\</code> on Windows and <code>/</code> on Linux.</p>\n<h2>Case study</h2>\n<p>Used this to prevent errors when generating a Markdown file then rendering it to <code>pdf</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15583984,
                        "reputation": 119,
                        "user_id": 11243028,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3378fcbaabb9998f595dea70d0096009?s=256&d=identicon&r=PG",
                        "display_name": "Raj Ratn",
                        "link": "https://stackoverflow.com/users/11243028/raj-ratn"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1623916495,
                    "creation_date": 1623916495,
                    "answer_id": 68015160,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3 it will be:</p>\n<pre><code>bytes(s, 'utf-8').decode(&quot;unicode_escape&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19451260,
                        "reputation": 5,
                        "user_id": 14227622,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-nCyHkPt3xxo/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucmPLeUaMwRSb0iDPqJQpz_qHOL_8g/photo.jpg?sz=256",
                        "display_name": "Gaurav Agarwal",
                        "link": "https://stackoverflow.com/users/14227622/gaurav-agarwal"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1599337836,
                    "creation_date": 1599337836,
                    "answer_id": 63758233,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>path = &quot;C:\\\\Users\\\\Programming\\\\Downloads&quot;\n# Replace \\\\ with a \\ along with any random key multiple times\npath.replace('\\\\', '\\pppyyyttthhhooonnn')\n# Now replace pppyyyttthhhooonnn with a blank string\npath.replace(&quot;pppyyyttthhhooonnn&quot;, &quot;&quot;)\n\nprint(path)\n</code></pre>\n<p>#Output...\nC:\\Users\\Programming\\Downloads</p>\n"
                },
                {
                    "owner": {
                        "account_id": 33994,
                        "reputation": 107390,
                        "user_id": 95612,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
                        "display_name": "Jochen Ritzel",
                        "link": "https://stackoverflow.com/users/95612/jochen-ritzel"
                    },
                    "is_accepted": true,
                    "score": 57,
                    "last_activity_date": 1530102893,
                    "last_edit_date": 1530102893,
                    "creation_date": 1299189414,
                    "answer_id": 5187097,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There's no need to use replace for this. </p>\n\n<p>What you have is a encoded string (using the <code>string_escape</code> encoding) and you want to decode it:</p>\n\n<pre><code>&gt;&gt;&gt; s = r\"Escaped\\nNewline\"\n&gt;&gt;&gt; print s\nEscaped\\nNewline\n&gt;&gt;&gt; s.decode('string_escape')\n'Escaped\\nNewline'\n&gt;&gt;&gt; print s.decode('string_escape')\nEscaped\nNewline\n&gt;&gt;&gt; \"a\\\\nb\".decode('string_escape')\n'a\\nb'\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; import codecs\n&gt;&gt;&gt; codecs.decode('\\\\n\\\\x21', 'unicode_escape')\n'\\n!'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 115310,
                        "reputation": 11547,
                        "user_id": 302831,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ac1a6ab79fe1ca9371e1ba7c18df68b3?s=256&d=identicon&r=PG",
                        "display_name": "Santa",
                        "link": "https://stackoverflow.com/users/302831/santa"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1299188860,
                    "creation_date": 1299188860,
                    "answer_id": 5186999,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Your original string, <code>a = 'a\\\\nb'</code> does not actually have two <code>'\\'</code> characters, the first one is an escape for the latter. If you do, <code>print a</code>, you'll see that you actually have only one <code>'\\'</code> character.</p>\n\n<pre><code>&gt;&gt;&gt; a = 'a\\\\nb'\n&gt;&gt;&gt; print a\na\\nb\n</code></pre>\n\n<p>If, however, what you mean is to interpret the <code>'\\n'</code> as a newline character, without escaping the slash, then:</p>\n\n<pre><code>&gt;&gt;&gt; b = a.replace('\\\\n', '\\n')\n&gt;&gt;&gt; b\n'a\\nb'\n&gt;&gt;&gt; print b\na\nb\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 167009,
                        "reputation": 50873,
                        "user_id": 391531,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/04bbaf6d73be76d81b13f2e150017691?s=256&d=identicon&r=PG",
                        "display_name": "nmichaels",
                        "link": "https://stackoverflow.com/users/391531/nmichaels"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1299188640,
                    "creation_date": 1299188640,
                    "answer_id": 5186952,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>r'a\\\\nb'.replace('\\\\\\\\', '\\\\')\n</code></pre>\n\n<p>or</p>\n\n<pre><code>'a\\nb'.replace('\\n', '\\\\n')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 261051,
                        "reputation": 736,
                        "user_id": 544989,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7d79f50c455bae1fe543a8147edd4a8a?s=256&d=identicon&r=PG",
                        "display_name": "Brian Goldman",
                        "link": "https://stackoverflow.com/users/544989/brian-goldman"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1299188637,
                    "creation_date": 1299188637,
                    "answer_id": 5186951,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In Python string literals, backslash is an escape character. This is also true when the interactive prompt shows you the value of a string. It will give you the literal code representation of the string. Use the <code>print</code> statement to see what the string actually looks like.</p>\n\n<p>This example shows the difference:</p>\n\n<pre><code>&gt;&gt;&gt; '\\\\'\n'\\\\'\n&gt;&gt;&gt; print '\\\\'\n\\\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 306004,
                        "reputation": 22711,
                        "user_id": 616486,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1af1128c13745fc4d59ff7cf9683a4df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "sleeplessnerd",
                        "link": "https://stackoverflow.com/users/616486/sleeplessnerd"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1299188615,
                    "last_edit_date": 1299188615,
                    "creation_date": 1299188290,
                    "answer_id": 5186884,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You are missing, that \\ is the escape character.</p>\n\n<p>Look here: <a href=\"http://docs.python.org/reference/lexical_analysis.html\">http://docs.python.org/reference/lexical_analysis.html</a>\nat 2.4.1 \"Escape Sequence\"</p>\n\n<p>Most importantly \\n is a newline character.\nAnd \\\\ is an escaped escape character :D</p>\n\n<pre><code>&gt;&gt;&gt; a = 'a\\\\\\\\nb'\n&gt;&gt;&gt; a\n'a\\\\\\\\nb'\n&gt;&gt;&gt; print a\na\\\\nb\n&gt;&gt;&gt; a.replace('\\\\\\\\', '\\\\')\n'a\\\\nb'\n&gt;&gt;&gt; print a.replace('\\\\\\\\', '\\\\')\na\\nb\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 258915,
                        "reputation": 3116,
                        "user_id": 541412,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/26cff5f7f7247acec422f8199d138a29?s=256&d=identicon&r=PG",
                        "display_name": "Abbafei",
                        "link": "https://stackoverflow.com/users/541412/abbafei"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1299188343,
                    "creation_date": 1299188343,
                    "answer_id": 5186897,
                    "question_id": 5186839,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's because, even in \"raw\" strings (=strings with an <code>r</code> before the starting quote(s)), an unescaped escape character cannot be the last character in the string. This should work instead:</p>\n\n<pre><code>'\\\\ '[0]\n</code></pre>\n"
                }
            ]
        },
        {
            "65348890": [
                {
                    "owner": {
                        "account_id": 11633797,
                        "reputation": 5016,
                        "user_id": 8520923,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Gi3uY.jpg?s=256",
                        "display_name": "janadari ekanayaka",
                        "link": "https://stackoverflow.com/users/8520923/janadari-ekanayaka"
                    },
                    "is_accepted": false,
                    "score": 405,
                    "last_activity_date": 1695144539,
                    "last_edit_date": 1695144539,
                    "creation_date": 1614520688,
                    "answer_id": 66409838,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<ol>\n<li><p>Check your Python version and be sure it is installed on your machine</p>\n</li>\n<li><p>Check the <em>path</em> environment variable</p>\n</li>\n<li><p>Go to -&gt; &quot;start&quot;  and type &quot;Manage App Execution Aliases&quot;. Go to it and turn off &quot;Python&quot;</p>\n</li>\n</ol>\n<p><a href=\"https://i.sstatic.net/7C78e.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/7C78e.png\" alt=\"screenshot\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 8362258,
                        "reputation": 1899,
                        "user_id": 6280135,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/F0nBb.jpg?s=256",
                        "display_name": "Maninder",
                        "link": "https://stackoverflow.com/users/6280135/maninder"
                    },
                    "is_accepted": false,
                    "score": 126,
                    "last_activity_date": 1686481238,
                    "last_edit_date": 1686481238,
                    "creation_date": 1609265561,
                    "answer_id": 65496777,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was having the same issue and I fixed it by using the below method.</p>\n<ol>\n<li>Copy two paths of Python</li>\n</ol>\n<pre><code>%AppData%\\Programs\\Python\\Python311\n%AppData%\\Programs\\Python\\Python311\\Scripts\n</code></pre>\n<p>These are the paths where your Python interpreter is installed. Now add this path into your environmental\nvariable. Put this path into <em>System</em> variable, not in <em>user</em> variable. I was using <em>user</em> variable, so I was facing the issue.</p>\n<p><a href=\"https://i.sstatic.net/Mladf.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/Mladf.png\" alt=\"Screenshot for Environment Variables window\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 22663769,
                        "reputation": 1203,
                        "user_id": 16836455,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ZTFP1.png?s=256",
                        "display_name": "Md Wahiduzzaman Emon",
                        "link": "https://stackoverflow.com/users/16836455/md-wahiduzzaman-emon"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1683815772,
                    "last_edit_date": 1683815772,
                    "creation_date": 1675320777,
                    "answer_id": 75319599,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To check in Windows</p>\n<pre class=\"lang-none prettyprint-override\"><code>py --version\n</code></pre>\n<p>Or restart your PC first, and then use this command again.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6876042,
                        "reputation": 1243,
                        "user_id": 5284448,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/46df766bc56fb01fdc1e52f127a0340a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Brijesh Ray",
                        "link": "https://stackoverflow.com/users/5284448/brijesh-ray"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1683815591,
                    "last_edit_date": 1683815591,
                    "creation_date": 1677000683,
                    "answer_id": 75523968,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was also facing this issue after installing Python, while running the command <code>python --version</code> in the command prompt. Thee error was:</p>\n<blockquote>\n<p>Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings &gt; Manage App Execution Aliases.</p>\n</blockquote>\n<p>So, I too added the path in environment variables as shown, and it worked:</p>\n<p><a href=\"https://i.sstatic.net/h1CtC.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/h1CtC.png\" alt=\"Enter image description here\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16818817,
                        "reputation": 498,
                        "user_id": 12159823,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/aFNvp.jpg?s=256",
                        "display_name": "frankiie",
                        "link": "https://stackoverflow.com/users/12159823/frankiie"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1683815473,
                    "last_edit_date": 1683815473,
                    "creation_date": 1679740282,
                    "answer_id": 75841072,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I see some resolutions people provided here are a bit complicated.</p>\n<p>Here is the simpler way to install pip on Windows or whatever OS. Here is an example for Windows.</p>\n<ol>\n<li><p>go to <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"nofollow noreferrer\">https://bootstrap.pypa.io/get-pip.py</a>, right-click (or <kbd>Ctrl</kbd> + <kbd>S</kbd>), and choose the <kbd>Save as</kbd> option, and save it in the location you want to execute to file.</p>\n</li>\n<li><p>assume you saved it in the <em>c/Users/Documents/get-pip.py</em> file, and then just redirect to that file path.</p>\n</li>\n<li><p>in the <code>c/Users/Documents/</code>, run <code>python get-pip.py</code></p>\n</li>\n<li><p>verify the installed pip using <code>pip --version</code></p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 12289051,
                        "reputation": 79,
                        "user_id": 8968135,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-EUjX1oucwjw/AAAAAAAAAAI/AAAAAAAAEAk/ds9VRb_u3YU/photo.jpg?sz=256",
                        "display_name": "Iyad",
                        "link": "https://stackoverflow.com/users/8968135/iyad"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1679863682,
                    "creation_date": 1679863682,
                    "answer_id": 75850482,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There could be an alias of Python, such as: &quot;py&quot;, or &quot;python3&quot;. For me, it was solved just by typing &quot;py&quot;.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8955906,
                        "reputation": 1618,
                        "user_id": 9346400,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/plmzy.png?s=256",
                        "display_name": "Forhad",
                        "link": "https://stackoverflow.com/users/9346400/forhad"
                    },
                    "is_accepted": false,
                    "score": 105,
                    "last_activity_date": 1674483624,
                    "last_edit_date": 1674483624,
                    "creation_date": 1625166954,
                    "answer_id": 68215805,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have a solution for you. Make sure you check the path mark during installation. Then you need to go to <strong>Manage App Execution Aliases</strong>.</p>\n<p>Simply go to your search bar and search for <strong>Manage App Execution Aliases</strong>. You will find the attached screen and you need to turn off App Installers as you see on the screen. Also, see the path,,, follow <a href=\"https://stackoverflow.com/a/65496777/9346400\">Maninder's answer</a>.</p>\n<p><a href=\"https://i.sstatic.net/rKrC9.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/rKrC9.png\" alt=\"enter image description here\" /></a></p>\n<p>Then you are good to go! :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20940467,
                        "reputation": 118,
                        "user_id": 15384644,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eEJ4y.png?s=256",
                        "display_name": "Michael Njuguna",
                        "link": "https://stackoverflow.com/users/15384644/michael-njuguna"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1664592396,
                    "last_edit_date": 1664592396,
                    "creation_date": 1662181904,
                    "answer_id": 73589797,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you already have the Python executable on your machine and you are getting this error in <a href=\"https://en.wikipedia.org/wiki/Windows_10\" rel=\"nofollow noreferrer\">Windows\u00a010</a>, search for the Python executable and copy its path then copy the path in system variables. It worked for me.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1339344,
                        "reputation": 95,
                        "user_id": 1281362,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UKBZc.jpg?s=256",
                        "display_name": "Okwo moses",
                        "link": "https://stackoverflow.com/users/1281362/okwo-moses"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1661695885,
                    "last_edit_date": 1661695885,
                    "creation_date": 1630034262,
                    "answer_id": 68947629,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To sincerely resolve this issue, do the following:</p>\n<ol>\n<li><p>Uninstall the Python instance and reinstall it. Note: Make sure you check\n&quot;Add variable PATH&quot;.</p>\n</li>\n<li><p>On the command line, type:</p>\n<pre><code> python -m pip install --upgrade pip setuptools virtualenv\n</code></pre>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 18265406,
                        "reputation": 167,
                        "user_id": 13297262,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GhmHhPq4P95AcTM1K901t6Di-ak_YT_xJVf3VQtHQ=k-s256",
                        "display_name": "Tanmoy Chowdhury",
                        "link": "https://stackoverflow.com/users/13297262/tanmoy-chowdhury"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1661695785,
                    "last_edit_date": 1661695785,
                    "creation_date": 1623228419,
                    "answer_id": 67900657,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If none of the previous answers are working, you can check if you have the Python executable in your program files.</p>\n<p>Go to <code>C:\\Program Files</code> and check if you have the Python application. If not, go to the python download website <a href=\"https://www.python.org/downloads/\" rel=\"nofollow noreferrer\">here</a> and download the .exe file.</p>\n<p>While installing you must select &quot;Custom install&quot; and select the location as <code>C:/Program Files</code>.</p>\n<p>Install it and it should work now from anywhere. This worked for me!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 369969,
                        "reputation": 22342,
                        "user_id": 717630,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c891f554b48ea8c4bb1b11873450c945?s=256&d=identicon&r=PG",
                        "display_name": "grepit",
                        "link": "https://stackoverflow.com/users/717630/grepit"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1660693653,
                    "last_edit_date": 1660693653,
                    "creation_date": 1653073331,
                    "answer_id": 72323723,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All the previous answers are correct, but in my case, I was getting this, because I was not passing the version...</p>\n<p>The fix is passing the version:</p>\n<pre class=\"lang-none prettyprint-override\"><code>py.exe -3 your_program\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19814111,
                        "reputation": 222,
                        "user_id": 14512234,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b012872150a0a0b1defff5b130b85952?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "KomarCorporation",
                        "link": "https://stackoverflow.com/users/14512234/komarcorporation"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1660693375,
                    "last_edit_date": 1660693375,
                    "creation_date": 1654338023,
                    "answer_id": 72498944,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I solved this problem for Visual Studio Code with just writing <strong>&quot;python&quot;</strong> in the console:</p>\n<pre class=\"lang-none prettyprint-override\"><code>python\n</code></pre>\n<p>After that, Microsoft Store opens automatically with the Python app:</p>\n<p><a href=\"https://i.sstatic.net/TZsm3.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/TZsm3.png\" alt=\"Enter image description here\" /></a></p>\n<p>And I just click <kbd>Get</kbd>.</p>\n<p>And it all work!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 952964,
                        "reputation": 570,
                        "user_id": 978765,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ZIcjO.jpg?s=256",
                        "display_name": "Ranch Camal",
                        "link": "https://stackoverflow.com/users/978765/ranch-camal"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1660693230,
                    "last_edit_date": 1660693230,
                    "creation_date": 1654692736,
                    "answer_id": 72546042,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try adding the following to your &quot;Path&quot; environment variable:</p>\n<pre><code>C:\\Users\\Default\\AppData\\Local\\Programs\\Python\\Python37\nC:\\Users\\Default\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\n</code></pre>\n<p>Replace <strong>Python37</strong> with your own version.</p>\n<p><a href=\"https://i.sstatic.net/a1Yuq.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/a1Yuq.png\" alt=\"Editing Path in the Environment Variables\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10654831,
                        "reputation": 1713,
                        "user_id": 8684202,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AVqED.jpg?s=256",
                        "display_name": "N Jedidiah",
                        "link": "https://stackoverflow.com/users/8684202/n-jedidiah"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1660693165,
                    "last_edit_date": 1660693165,
                    "creation_date": 1658489116,
                    "answer_id": 73079592,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>None of the answers here worked for me. I did this and the error went away.</p>\n<p>For Windows 11 which I was using, I reran the <code>python-3.10.5-amd64.exe</code> file from my downloads directory and then chose to <code>modify</code> the installation.</p>\n<p>Then I followed these easy steps.</p>\n<ol>\n<li><p>Make sure the PIP component is checked before proceeding to install.</p>\n</li>\n<li><p>Then <em>check</em> 'Add Python to environment variables' if it's not checked already.</p>\n</li>\n<li><p>Proceed to Install.</p>\n<p>At this point, your error will be solved</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 22838610,
                        "reputation": 69,
                        "user_id": 16986006,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gi5r4vILoFYqMQb5ifbDh3JQ14Cow-zwMlwqlKlxA=k-s256",
                        "display_name": "Amit kumar",
                        "link": "https://stackoverflow.com/users/16986006/amit-kumar"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1638987990,
                    "creation_date": 1638987990,
                    "answer_id": 70279981,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The same thing happened to me even after trying all the above-mentioned steps.\nI just restart my system and it was working fine. Do it and if still doesn't fix the issue then make sure you have checked &quot;add python ( any version ) to PATH&quot; before installing Python.</p>\n<p><a href=\"https://i.sstatic.net/XPb0E.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/XPb0E.png\" alt=\"Check the option that has to be selected before installing\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 21941758,
                        "reputation": 43,
                        "user_id": 16222213,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJwvTzAGRUeb-8VIh0NTGt8nNMqXY6xrpPRoesb6=k-s256",
                        "display_name": "Alessandro Cinque",
                        "link": "https://stackoverflow.com/users/16222213/alessandro-cinque"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1631386285,
                    "last_edit_date": 1631386285,
                    "creation_date": 1630059701,
                    "answer_id": 68951792,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem is more subtle than it seems.</p>\n<p>For example, if you are using <a href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" rel=\"nofollow noreferrer\">Visual Studio Code</a> on the bottom left, you should see <code>Python X.X.X xx-bit</code> (the X is the version).</p>\n<p>If you click in there you will see where the IDE is getting the <code>python.exe</code> from.</p>\n<p>Locate that folder into your file explorer and then just follow the answer that is saying to change the environments variables.</p>\n<p>So copy the path where <code>python.exe</code> is and add it to the <code>Path</code> variable and do the same where the <code>Script</code> folder is (it is in the same directory where the <code>python.exe</code> is).</p>\n<p>Then of course make sure your IDE is using the right Python.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5886483,
                        "reputation": 89,
                        "user_id": 4830151,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-YTTWshXFDHE/AAAAAAAAAAI/AAAAAAAAAAA/r22Mo00Ron0/photo.jpg?sz=256",
                        "display_name": "Bernard Finucane",
                        "link": "https://stackoverflow.com/users/4830151/bernard-finucane"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1631386226,
                    "last_edit_date": 1631386226,
                    "creation_date": 1617714530,
                    "answer_id": 66969282,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Check the Aliases for App Execution in Windows. Search for Alias App in your Windows toolbar to find the UI for this. Try turning off anything Python related.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20853643,
                        "reputation": 1,
                        "user_id": 15317554,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-RlyxhBTsRXA/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucnLZvxByUhEO4Q5q70cMxNCTJcc3g/s96-c/photo.jpg?sz=256",
                        "display_name": "Dheyaa Kadhim",
                        "link": "https://stackoverflow.com/users/15317554/dheyaa-kadhim"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1631299670,
                    "last_edit_date": 1631299670,
                    "creation_date": 1614720271,
                    "answer_id": 66447378,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>That happened to me. So, to fix it, you have to follow the following steps:</p>\n<ol>\n<li>Uninstall the Python version you already installed.</li>\n<li>Go ahead and open the installation file to reinstall it again.</li>\n<li><em>Before</em> hitting <em>Install Now</em>, make sure to tick the box in front of <em>Add Python to path</em>.</li>\n<li>Go ahead and complete the installation procedure as usual.\n<a href=\"https://i.sstatic.net/ZM4zv.png\" rel=\"nofollow noreferrer\">Steps for installing Python</a></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 16060540,
                        "reputation": 113,
                        "user_id": 11591521,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-0s2B2trPxlc/AAAAAAAAAAI/AAAAAAAAAaM/BMZF-BJg2K8/photo.jpg?sz=256",
                        "display_name": "Ray",
                        "link": "https://stackoverflow.com/users/11591521/ray"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1631299565,
                    "last_edit_date": 1631299565,
                    "creation_date": 1629716833,
                    "answer_id": 68891552,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I got this issue when I used <a href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" rel=\"nofollow noreferrer\">Visual Studio Code</a> as the IDE, and <a href=\"https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)\" rel=\"nofollow noreferrer\">Anaconda</a> as my Python compiler. And you don't need to close the &quot;app alias&quot; in settings, but copy your python.exe to python3.exe in your Anaconda folder.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16194052,
                        "reputation": 943,
                        "user_id": 11692124,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-uORkmm7Dauw/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfwpW5f46c-bht80cbqvQWd6qKIig/mo/photo.jpg?sz=256",
                        "display_name": "Farhang Amaji",
                        "link": "https://stackoverflow.com/users/11692124/farhang-amaji"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1631299208,
                    "last_edit_date": 1631299208,
                    "creation_date": 1625029882,
                    "answer_id": 68188768,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have installed Python successfully with <code>add python path</code>, ticked on, and have added</p>\n<pre><code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\Programs\\Python\\Python39\nC:\\Users\\&lt;user&gt;\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\n</code></pre>\n<p>to the path into System variables and have turned off the &quot;aliases&quot; and they all didn't work, you can simply use <code>python</code> instead of <code>python3</code> in your cmd command.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18845850,
                        "reputation": 201,
                        "user_id": 13746172,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ce7e737e5c5aed7bd384d62a55fa2aef?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ruby",
                        "link": "https://stackoverflow.com/users/13746172/ruby"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1631298492,
                    "last_edit_date": 1631298492,
                    "creation_date": 1612991624,
                    "answer_id": 66145123,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I faced the same error while using <a href=\"https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)\" rel=\"nofollow noreferrer\">Anaconda</a> and trying to link the Python executable path in the command prompt.</p>\n<p>It got rectified by going to <em>Settings</em> \u2192 <em>App execution aliases</em> \u2192 and turning &quot;off&quot; Python. Then again I had to set the path for Python in Anaconda and was successful in executing &quot;python --version&quot; command.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17373559,
                        "reputation": 576,
                        "user_id": 12587114,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f604832ebc6babbd1cb3a40a566b9fca?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "DeeDeeAich",
                        "link": "https://stackoverflow.com/users/12587114/deedeeaich"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1631298287,
                    "last_edit_date": 1631298287,
                    "creation_date": 1608243839,
                    "answer_id": 65349178,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You need to download Python from <a href=\"https://python.org\" rel=\"noreferrer\">https://python.org</a>. When in the installation, be sure to check the option that adds Python to PATH.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20325827,
                        "reputation": 659,
                        "user_id": 14909297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5c5796dcb296801166a06d0a962df320?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Strato P.",
                        "link": "https://stackoverflow.com/users/14909297/strato-p"
                    },
                    "is_accepted": false,
                    "score": 65,
                    "last_activity_date": 1631253777,
                    "last_edit_date": 1631253777,
                    "creation_date": 1609270654,
                    "answer_id": 65497744,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same issue. In Windows CMD, only: <code>py --version</code>, works.</p>\n<p>I tried adding the path on <em>System</em> variables, and it didn't work. If you are using PyCharm as I do, try to run all commands from the IDE's terminal. It usually is on the side bar where the Run and the Console is. If it is not, go to: menu <em>View</em> \u2192 <em>Tool Windows</em> \u2192 <em>Terminal</em>. It worked just fine for me.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 946951,
                        "reputation": 291,
                        "user_id": 12837422,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/01fdbf322ede0cbc1232b72657745d12?s=256&d=identicon&r=PG",
                        "display_name": "Anthony Curtis Adler",
                        "link": "https://stackoverflow.com/users/12837422/anthony-curtis-adler"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1631253461,
                    "last_edit_date": 1631253461,
                    "creation_date": 1608335290,
                    "answer_id": 65365333,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I haven't gotten this error before and have been using Python a long time, and then suddenly it showed up. I think that it is a result of a Windows update designed to steer you to their store.</p>\n<p>In any case: to remedy the problem, go to <em>Settings</em> \u2192 <em>app execution aliases</em> \u2192 and turn &quot;off&quot; Python. (What they tell you to do, in other words). This should resolve the problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20243868,
                        "reputation": 31,
                        "user_id": 14846964,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9315e3479fcb38f86d8c7c7a91f7874e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Sean",
                        "link": "https://stackoverflow.com/users/14846964/sean"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1608243758,
                    "creation_date": 1608243758,
                    "answer_id": 65349160,
                    "question_id": 65348890,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you're on Windows, you may want to use the Python installer, in Windows Marketplace.</p>\n"
                }
            ]
        },
        {
            "181530": [
                {
                    "owner": {
                        "account_id": 11653158,
                        "reputation": 167,
                        "user_id": 8533804,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-LD-yvHQDNEc/AAAAAAAAAAI/AAAAAAAAUnY/8yWZmvWCVcw/photo.jpg?sz=256",
                        "display_name": "Nader Belal",
                        "link": "https://stackoverflow.com/users/8533804/nader-belal"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1572024493,
                    "creation_date": 1572024493,
                    "answer_id": 58563138,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Pardon my noobness, but it happens that I'm not as knowledgeable of #Python as anyone of you here, but it happens that I have found something similar when scripting my own objects in a 3D BIM modeling, so I will adapt my algorithm to that of python.</p>\n\n<p>The problem that I find here, is double sided:</p>\n\n<ol>\n<li>Values my seem foreign for someone who may try to decipher the script.</li>\n<li>Code maintenance will come at a high cost, if those values are changed (most probable), or if new conditions must be added (broken schema)</li>\n</ol>\n\n<p>Do to bypass all these problems, your script must go like this</p>\n\n<pre><code>param_Val01 = Value 01   #give a meaningful name for param_Val(i) preferable an integer\nparam_Val02 = Value 02\nparam_Val03 = Value 03\nparam_Val04 = Value 04   # and ... etc\n\nconditions = 0           # this is a value placeholder\n\n########\nAdd script that if true will make:\n\nconditions = conditions + param_Val01   #value of placeholder is updated\n########\n\n### repeat as needed\n\n\nif conditions = param_Val01 + param_Val02 + param_Val03 + param_Val04:\n    do something\n</code></pre>\n\n<p>Pros of this method:</p>\n\n<ol>\n<li><p>Script is readable.</p></li>\n<li><p>Script can be easy maintained.</p></li>\n<li>conditions is a 1 comparison operation to a sum of values that represents the desired conditions.</li>\n<li>No need for multilevel conditions</li>\n</ol>\n\n<p>Hope it help you all</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4530,
                        "reputation": 17108,
                        "user_id": 6848,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/21aa98013e949850d41a1a0dd1c68c3a?s=256&d=identicon&r=PG",
                        "display_name": "Deestan",
                        "link": "https://stackoverflow.com/users/6848/deestan"
                    },
                    "is_accepted": false,
                    "score": 86,
                    "last_activity_date": 1541521005,
                    "last_edit_date": 1541521005,
                    "creation_date": 1223455198,
                    "answer_id": 181848,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I prefer this style when I have a terribly large if-condition:</p>\n\n<pre><code>if (\n    expr1\n    and (expr2 or expr3)\n    and hasattr(thingy1, '__eq__')\n    or status==\"HappyTimes\"\n):\n    do_stuff()\nelse:\n    do_other_stuff()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 909645,
                        "reputation": 18888,
                        "user_id": 943773,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/66a7a506ddac2514578a371a66c8d781?s=256&d=identicon&r=PG",
                        "display_name": "ryanjdillon",
                        "link": "https://stackoverflow.com/users/943773/ryanjdillon"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1500642787,
                    "last_edit_date": 1500642787,
                    "creation_date": 1500642207,
                    "answer_id": 45238436,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think @zkanda's solution would be good with a minor twist. If you had your conditions and values in their own respective lists, you could use a list comprehension to do the comparison, which would make things a bit more general for adding condition/value pairs.</p>\n\n<pre><code>conditions = [1, 2, 3, 4]\nvalues = [1, 2, 3, 4]\nif all([c==v for c, v in zip(conditions, values)]):\n    # do something\n</code></pre>\n\n<p>If I did want to hard-code a statement like this, I would write it like this for legibility:</p>\n\n<pre><code>if (condition1==value1) and (condition2==value2) and \\\n   (condition3==value3) and (condition4==value4):\n</code></pre>\n\n<p>And just to throw another solution out there with an <a href=\"https://docs.python.org/3.5/library/operator.html#inplace-operators\" rel=\"nofollow noreferrer\"><code>iand</code> operator</a>:</p>\n\n<pre><code>proceed = True\nfor c, v in zip(conditions, values):\n    proceed &amp;= c==v\n\nif proceed:\n    # do something\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1611204,
                        "reputation": 670,
                        "user_id": 1490061,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/L2K1g.jpg?s=256",
                        "display_name": "Stof",
                        "link": "https://stackoverflow.com/users/1490061/stof"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1497680175,
                    "creation_date": 1497680175,
                    "answer_id": 44601456,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>All respondents that also provide multi-conditionals for the if statement is just as ugly as the problem presented. You don't solve this problem by doing the same thing.. </p>\n\n<p>Even the PEP 0008 answer is repulsive.</p>\n\n<p>Here is a far more readable approach</p>\n\n<pre><code>condition = random.randint(0, 100) # to demonstrate\nanti_conditions = [42, 67, 12]\nif condition not in anti_conditions:\n    pass\n</code></pre>\n\n<p>Want me to eat my words? Convince me you need multi-conditionals and I'll literally print this and eat it for your amusement.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 244006,
                        "reputation": 1720,
                        "user_id": 516545,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7b8ea5a0aad3e067e30030796611ff67?s=256&d=identicon&r=PG",
                        "display_name": "SMGreenfield",
                        "link": "https://stackoverflow.com/users/516545/smgreenfield"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1480439535,
                    "creation_date": 1480439535,
                    "answer_id": 40871775,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I know this thread is old, but I have some Python 2.7 code and PyCharm (4.5) still complains about this case:</p>\n\n<pre><code>if foo is not None:\n    if (cond1 == 'val1' and cond2 == 'val2' and\n        cond3 == 'val3' and cond4 == 'val4'):\n            # some comment about do_something\n            do_something\n</code></pre>\n\n<p>Even with the PEP8 warning \"visually indented line with same indent as next logical line\", the actual code is completely OK?  It's not \"over-indenting?\"</p>\n\n<p>...there are times I wish Python would've bit the bullet and just gone with curly braces.  I wonder how many bugs have been accidentally introduced over the years due to accidental mis-indentation...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5426165,
                        "reputation": 452,
                        "user_id": 4318342,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/645e36861cbfe3aea1bfdbcd2fcf1338?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SarcasticSully",
                        "link": "https://stackoverflow.com/users/4318342/sarcasticsully"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1470339045,
                    "creation_date": 1470339045,
                    "answer_id": 38775892,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could split it into two lines</p>\n\n<pre><code>total = cond1 == 'val' and cond2 == 'val2' and cond3 == 'val3' and cond4 == val4\nif total:\n    do_something()\n</code></pre>\n\n<p>Or even add on one condition at a time. That way, at least it separates the clutter from the <code>if</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 44584,
                        "reputation": 20105,
                        "user_id": 130961,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/afc87524b285fb0d0b937726207d7b7f?s=256&d=identicon&r=PG",
                        "display_name": "krawyoti",
                        "link": "https://stackoverflow.com/users/130961/krawyoti"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1470314575,
                    "last_edit_date": 1470314575,
                    "creation_date": 1295002232,
                    "answer_id": 4690241,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's my very personal take: long conditions are (in my view) a code smell that suggests refactoring into a boolean-returning function/method. For example:</p>\n\n<pre><code>def is_action__required(...):\n    return (cond1 == 'val1' and cond2 == 'val2'\n            and cond3 == 'val3' and cond4 == 'val4')\n</code></pre>\n\n<p>Now, if I found a way to make multi-line conditions look good, I would probably find myself content with having them and skip the refactoring.</p>\n\n<p>On the other hand, having them perturb my aesthetic sense acts as an incentive for refactoring.</p>\n\n<p>My conclusion, therefore, is that multiple line conditions should look ugly and this is an incentive to avoid them.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 809,
                        "reputation": 181430,
                        "user_id": 1057,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=256&d=identicon&r=PG",
                        "display_name": "Harley Holcombe",
                        "link": "https://stackoverflow.com/users/1057/harley-holcombe"
                    },
                    "is_accepted": true,
                    "score": 1003,
                    "last_activity_date": 1464355948,
                    "last_edit_date": 1464355948,
                    "creation_date": 1223447665,
                    "answer_id": 181557,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You don't need to use 4 spaces on your second conditional line.  Maybe use:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>Also, don't forget the whitespace is more flexible than you might think:</p>\n\n<pre><code>if (   \n       cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'\n   ):\n    do_something\nif    (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>Both of those are fairly ugly though.</p>\n\n<p>Maybe lose the brackets (the <a href=\"https://www.python.org/dev/peps/pep-0008/#multiline-if-statements\" rel=\"noreferrer\">Style Guide</a> discourages this though)?</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\\n   cond3 == 'val3' and cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>This at least gives you some differentiation.</p>\n\n<p>Or even:</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\\n                       cond3 == 'val3' and \\\n                       cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>I think I prefer:</p>\n\n<pre><code>if cond1 == 'val1' and \\\n   cond2 == 'val2' and \\\n   cond3 == 'val3' and \\\n   cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>Here's the <a href=\"https://www.python.org/dev/peps/pep-0008/#multiline-if-statements\" rel=\"noreferrer\">Style Guide</a>, which (since 2010) recommends using brackets.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 284362,
                        "reputation": 3967,
                        "user_id": 582421,
                        "user_type": "registered",
                        "accept_rate": 21,
                        "profile_image": "https://i.sstatic.net/eAE9wnxv.png?s=256",
                        "display_name": "Tam",
                        "link": "https://stackoverflow.com/users/582421/tam"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1449404875,
                    "creation_date": 1449404875,
                    "answer_id": 34117413,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>if our if &amp; an else condition has to execute multiple statement inside of it than we can write like below.\nEvery when we have if else example with one statement inside of it .</p>\n\n<p>Thanks it work for me.</p>\n\n<pre><code>#!/usr/bin/python\nimport sys\nnumberOfArgument =len(sys.argv)\nweblogic_username =''\nweblogic_password = ''\nweblogic_admin_server_host =''\nweblogic_admin_server_port =''\n\n\nif numberOfArgument == 5:\n        weblogic_username = sys.argv[1]\n        weblogic_password = sys.argv[2]\n        weblogic_admin_server_host =sys.argv[3]\n        weblogic_admin_server_port=sys.argv[4]\nelif numberOfArgument &lt;5:\n        print \" weblogic UserName, weblogic Password and weblogic host details are Mandatory like, defalutUser, passwordForDefaultUser, t3s://server.domainname:7001 .\"\n        weblogic_username = raw_input(\"Enter Weblogic user Name\")\n        weblogic_password = raw_input('Enter Weblogic user Password')\n        weblogic_admin_server_host = raw_input('Enter Weblogic admin host ')\n        weblogic_admin_server_port = raw_input('Enter Weblogic admin port')\n#enfelif\n#endIf\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1874064,
                        "reputation": 17960,
                        "user_id": 1695680,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/407d4b68afe5b3a71e84a1a3d5811cff?s=256&d=identicon&r=PG",
                        "display_name": "ThorSummoner",
                        "link": "https://stackoverflow.com/users/1695680/thorsummoner"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1436106787,
                    "last_edit_date": 1495540045,
                    "creation_date": 1416815069,
                    "answer_id": 27100017,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Plain and simple, also passes pep8 checks:</p>\n\n<pre><code>if (\n    cond1 and\n    cond2\n):\n    print(\"Hello World!\")\n</code></pre>\n\n<hr>\n\n<p>In recent times I have been preferring the <code>all</code> and <code>any</code> functions, since I rarely mix And and Or comparisons this works well, and has the additional advantage of Failing Early with generators comprehension:</p>\n\n<pre><code>if all([\n    cond1,\n    cond2,\n]):\n    print(\"Hello World!\")\n</code></pre>\n\n<p>Just remember to pass in a single iterable! Passing in N-arguments is not correct.</p>\n\n<p>Note: <code>any</code> is like many <code>or</code> comparisons, <code>all</code> is like many <code>and</code> comparisons.</p>\n\n<hr>\n\n<p>This combines nicely with generator comprehensions, for example:</p>\n\n<pre><code># Check if every string in a list contains a substring:\nmy_list = [\n    'a substring is like a string', \n    'another substring'\n]\n\nif all('substring' in item for item in my_list):\n   print(\"Hello World!\")\n\n# or\n\nif all(\n    'substring' in item\n    for item in my_list\n):\n    print(\"Hello World!\")\n</code></pre>\n\n<p>More on: <a href=\"https://stackoverflow.com/q/364802/1695680\">generator comprehension</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1891677,
                        "reputation": 153413,
                        "user_id": 1709587,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/cP8pZ.jpg?s=256",
                        "display_name": "Mark Amery",
                        "link": "https://stackoverflow.com/users/1709587/mark-amery"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1436105727,
                    "creation_date": 1436105727,
                    "answer_id": 31231248,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It seems worth quoting <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 0008</a> (Python's official style guide), since it comments upon this issue at modest length:</p>\n\n<blockquote>\n  <p>When the conditional part of an <code>if</code> -statement is long enough to require that it be written across multiple lines, it's worth noting that the combination of a two character keyword (i.e. <code>if</code> ), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional. This can produce a visual conflict with the indented suite of code nested inside the <code>if</code> -statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the <code>if</code> -statement. Acceptable options in this situation include, but are not limited to:</p>\n\n<pre><code># No extra indentation.\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something()\n\n# Add a comment, which will provide some distinction in editors\n# supporting syntax highlighting.\nif (this_is_one_thing and\n    that_is_another_thing):\n    # Since both conditions are true, we can frobnicate.\n    do_something()\n\n# Add some extra indentation on the conditional continuation line.\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something()\n</code></pre>\n</blockquote>\n\n<p>Note the \"not limited to\" in the quote above; besides the approaches suggested in the style guide, some of the ones suggested in other answers to this question are acceptable too.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 107892,
                        "reputation": 4542,
                        "user_id": 286655,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0c9bf5815875df6482e3fd6c0f237bd6?s=256&d=identicon&r=PG",
                        "display_name": "Artur Gaspar",
                        "link": "https://stackoverflow.com/users/286655/artur-gaspar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1425514352,
                    "creation_date": 1425514352,
                    "answer_id": 28867664,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I usually use: </p>\n\n<pre class=\"lang-py prettyprint-override\"><code>if ((cond1 == 'val1' and cond2 == 'val2' and\n     cond3 == 'val3' and cond4 == 'val4')):\n    do_something()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2307041,
                        "reputation": 1103,
                        "user_id": 2026122,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f16bd58f1e1fa26ff7f8ffef8740da0?s=256&d=identicon&r=PG",
                        "display_name": "El Ninja Trepador",
                        "link": "https://stackoverflow.com/users/2026122/el-ninja-trepador"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1417634358,
                    "creation_date": 1417634358,
                    "answer_id": 27279883,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been struggling to find a decent way to do this as well, so I just came up with an idea (not a silver bullet, since this is mainly a matter of taste).</p>\n\n<pre><code>if bool(condition1 and\n        condition2 and\n        ...\n        conditionN):\n    foo()\n    bar()\n</code></pre>\n\n<p>I find a few merits in this solution compared to others I've seen, namely, you get exactly an extra 4 spaces of indentation (bool), allowing all conditions to line up vertically, and the body of the if statement can be indented in a clear(ish) way. This also keeps the benefits of short-circuit evaluation of boolean operators, but of course adds the overhead of a function call that basically does nothing. You could argue (validly) that any function returning its argument could be used here instead of bool, but like I said, it's just an idea and it's ultimately a matter of taste.</p>\n\n<p>Funny enough, as I was writing this and thinking about the \"problem\", I came up with <em>yet another</em> idea, which removes the overhead of a function call. Why not indicate that we're about to enter a complex condition by using extra pairs of parentheses? Say, 2 more, to give a nice 2 space indent of the sub-conditions relative to the body of the if statement. Example:</p>\n\n<pre><code>if (((foo and\n      bar and\n      frob and\n      ninja_bear))):\n    do_stuff()\n</code></pre>\n\n<p>I kind of like this because when you look at it, a bell immediatelly rings in your head saying <em>\"hey, there's a complex thing going on here!\"</em>. Yes, I know that parentheses don't help readability, but these conditions should appear rarely enough, and when they do show up, you are going to have to stop and read them carefuly anyway (because they're <strong>complex</strong>).</p>\n\n<p>Anyway, just two more proposals that I haven't seen here. Hope this helps someone :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3824384,
                        "reputation": 724,
                        "user_id": 3171548,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/HJYQP.jpg?s=256",
                        "display_name": "zkanda",
                        "link": "https://stackoverflow.com/users/3171548/zkanda"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1416368073,
                    "creation_date": 1416368073,
                    "answer_id": 27008512,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's what I do, remember that \"all\" and \"any\" accepts an iterable, so I just put a long condition in a list and let \"all\" do the work.</p>\n\n<pre><code>condition = [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4']\n\nif all(condition):\n   do_something\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1607883,
                        "reputation": 411,
                        "user_id": 1487551,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://www.gravatar.com/avatar/d02a0dd01c0be4df3f958a95706bfa22?s=256&d=identicon&r=PG",
                        "display_name": "user1487551",
                        "link": "https://stackoverflow.com/users/1487551/user1487551"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1413497283,
                    "creation_date": 1413497283,
                    "answer_id": 26414728,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's another approach:</p>\n\n<pre><code>cond_list = ['cond1 == \"val1\"','cond2==\"val2\"','cond3==\"val3\"','cond4==\"val4\"']\nif all([eval(i) for i in cond_list]):\n do something\n</code></pre>\n\n<p>This also makes it easy to add another condition easily without changing the if statement by simply appending another condition to the list:</p>\n\n<pre><code>cond_list.append('cond5==\"val5\"')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3352427,
                        "reputation": 2138,
                        "user_id": 2816199,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3OIIe.png?s=256",
                        "display_name": "tomekwi",
                        "link": "https://stackoverflow.com/users/2816199/tomekwi"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1406915624,
                    "creation_date": 1406915624,
                    "answer_id": 25085957,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>What I usually do is:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and\n    cond3 == 'val3' and cond4 == 'val4'\n   ):\n    do_something\n</code></pre>\n\n<p>this way the closing brace and colon visually mark the end of our condition.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1517280,
                        "reputation": 1781,
                        "user_id": 1418001,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/226a7f83060c621068041b7ef7cda4ff?s=256&d=identicon&r=PG",
                        "display_name": "rgenito",
                        "link": "https://stackoverflow.com/users/1418001/rgenito"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1362637452,
                    "creation_date": 1362637452,
                    "answer_id": 15264532,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Personally, I like to add meaning to long if-statements. I would have to search through code to find an appropriate example, but here's the first example that comes to mind: let's say I happen to run into some quirky logic where I want to display a certain page depending on many variables.</p>\n\n<p>English: \"If the logged-in user is NOT an administrator teacher, but is just a regular teacher, and is not a student themselves...\"</p>\n\n<pre><code>if not user.isAdmin() and user.isTeacher() and not user.isStudent():\n    doSomething()\n</code></pre>\n\n<p>Sure this might look fine, but reading those if statements is a lot of work. How about we assign the logic to label that makes sense. The \"label\" is actually the variable name:</p>\n\n<pre><code>displayTeacherPanel = not user.isAdmin() and user.isTeacher() and not user.isStudent()\nif displayTeacherPanel:\n    showTeacherPanel()\n</code></pre>\n\n<p>This may seem silly, but you might have yet another condition where you ONLY want to display another item if, and only if, you're displaying the teacher panel OR if the user has access to that other specific panel by default:</p>\n\n<pre><code>if displayTeacherPanel or user.canSeeSpecialPanel():\n    showSpecialPanel()\n</code></pre>\n\n<p>Try writing the above condition without using variables to store and label your logic, and not only do you end up with a very messy, hard-to-read logical statement, but you also just repeated yourself. While there are reasonable exceptions, remember: Don't Repeat Yourself (DRY).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 739313,
                        "reputation": 11753,
                        "user_id": 705086,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/fbeee3d76a35f9de8847f36ee51c28a2?s=256&d=identicon&r=PG",
                        "display_name": "Dima Tisnek",
                        "link": "https://stackoverflow.com/users/705086/dima-tisnek"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1331637199,
                    "creation_date": 1331637199,
                    "answer_id": 9682878,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>  if cond1 == 'val1' and \\\n     cond2 == 'val2' and \\\n     cond3 == 'val3' and \\\n     cond4 == 'val4':\n      do_something\n</code></pre>\n\n<p>or if this is clearer:</p>\n\n<pre><code>  if cond1 == 'val1'\\\n     and cond2 == 'val2'\\\n     and cond3 == 'val3'\\\n     and cond4 == 'val4':\n      do_something\n</code></pre>\n\n<p>There is no reason indent should be a multiple of 4 in this case, e.g. see \"Aligned with opening delimiter\":</p>\n\n<p><a href=\"http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Indentation#Indentation\" rel=\"nofollow\">http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Indentation#Indentation</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 163978,
                        "reputation": 8207,
                        "user_id": 386465,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/0218747403e1ede184bae3b9c94ebe58?s=256&d=identicon&r=PG",
                        "display_name": "xorsyst",
                        "link": "https://stackoverflow.com/users/386465/xorsyst"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1316680287,
                    "creation_date": 1316680287,
                    "answer_id": 7511872,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I find that when I have long conditions, I often have a short code body.  In that case, I just double-indent the body, thus:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and\n    cond3 == 'val3' and cond4 == 'val4'):\n        do_something\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 261453,
                        "reputation": 9204,
                        "user_id": 545637,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/51dcf0a6e20c2734423118e7eee9e45d?s=256&d=identicon&r=PG",
                        "display_name": "Apalala",
                        "link": "https://stackoverflow.com/users/545637/apalala"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1295470419,
                    "creation_date": 1295470419,
                    "answer_id": 4740630,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Adding to what @krawyoti said... Long conditions smell because they are difficult to read and difficult to understand. Using a function or a variable makes the code clearer. In Python, I prefer to use vertical space, enclose parenthesis, and place the logical operators at the beginning of each line so the expressions don't look like \"floating\".</p>\n\n<pre><code>conditions_met = (\n    cond1 == 'val1' \n    and cond2 == 'val2' \n    and cond3 == 'val3' \n    and cond4 == 'val4'\n    )\nif conditions_met:\n    do_something\n</code></pre>\n\n<p>If the conditions need to be evaluated more than once, as in a <code>while</code> loop, then using a local function is best.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 38389,
                        "reputation": 11307,
                        "user_id": 110151,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5faa8f7f53d3ac658c4dfa4bd04a2ee3?s=256&d=identicon&r=PG",
                        "display_name": "Marius Gedminas",
                        "link": "https://stackoverflow.com/users/110151/marius-gedminas"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1295016650,
                    "creation_date": 1295016650,
                    "answer_id": 4692294,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I'm surprised not to see my preferred solution,</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2'\n    and cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>Since <code>and</code> is a keyword, it gets highlighted by my editor, and looks sufficiently different from the do_something below it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 241028,
                        "reputation": 14192,
                        "user_id": 511601,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/33937c8ce1d23c78d384dec6680e07fd?s=256&d=identicon&r=PG",
                        "display_name": "Fred Nurk",
                        "link": "https://stackoverflow.com/users/511601/fred-nurk"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1294994027,
                    "creation_date": 1294994027,
                    "answer_id": 4689224,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>(I've lightly modified the identifiers as fixed-width names aren't representative of real code \u2013 at least not real code that I encounter \u2013 and will belie an example's readability.)</p>\n\n<pre><code>if (cond1 == \"val1\" and cond22 == \"val2\"\nand cond333 == \"val3\" and cond4444 == \"val4\"):\n    do_something\n</code></pre>\n\n<p>This works well for \"and\" and \"or\" (it's important that they're first on the second line), but much less so for other long conditions.  Fortunately, the former seem to be the more common case while the latter are often easily rewritten with a temporary variable.  (It's usually not hard, but it can be difficult or much less obvious/readable to preserve the short-circuiting of \"and\"/\"or\" when rewriting.)</p>\n\n<p>Since I found this question from <a href=\"http://eli.thegreenplace.net/2011/01/14/how-python-affected-my-cc-brace-style/\" rel=\"nofollow\">your blog post about C++</a>, I'll include that my C++ style is identical:</p>\n\n<pre><code>if (cond1 == \"val1\" and cond22 == \"val2\"\nand cond333 == \"val3\" and cond4444 == \"val4\") {\n    do_something\n}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75124,
                        "reputation": 30452,
                        "user_id": 215571,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/e3e5162c66ad1d06860a340ea358aa08?s=256&d=identicon&r=PG",
                        "display_name": "psihodelia",
                        "link": "https://stackoverflow.com/users/215571/psihodelia"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1276075423,
                    "creation_date": 1276075423,
                    "answer_id": 3004525,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Pack your conditions into a list, then do smth. like:</p>\n\n<pre><code>if False not in Conditions:\n    do_something\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10029,
                        "reputation": 47005,
                        "user_id": 18770,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/bf7da0bc3f01f63e4f19c421b331e786?s=256&d=identicon&r=PG",
                        "display_name": "Federico A. Ramponi",
                        "link": "https://stackoverflow.com/users/18770/federico-a-ramponi"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1223520340,
                    "creation_date": 1223520340,
                    "answer_id": 185748,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>What if we only insert an additional blank line between the condition and the body and do the rest in the canonical way?</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and\n    cond3 == 'val3' and cond4 == 'val4'):\n\n    do_something\n</code></pre>\n\n<p>p.s. I always use tabs, not spaces; I cannot fine-tune...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1223486760,
                    "creation_date": 1223486760,
                    "answer_id": 183889,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Just a few other random ideas for completeness's sake.  If they work for you, use them.  Otherwise, you're probably better off trying something else.</p>\n\n<p>You could also do this with a dictionary:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'cond1' : 'val1', 'cond2' : 'val2'}\n&gt;&gt;&gt; y = {'cond1' : 'val1', 'cond2' : 'val2'}\n&gt;&gt;&gt; x == y\nTrue\n</code></pre>\n\n<p>This option is more complicated, but you may also find it useful:</p>\n\n<pre><code>class Klass(object):\n    def __init__(self, some_vars):\n        #initialize conditions here\n    def __nonzero__(self):\n        return (self.cond1 == 'val1' and self.cond2 == 'val2' and\n                self.cond3 == 'val3' and self.cond4 == 'val4')\n\nfoo = Klass()\nif foo:\n    print \"foo is true!\"\nelse:\n    print \"foo is false!\"\n</code></pre>\n\n<p>Dunno if that works for you, but it's another option to consider.  Here's one more way:</p>\n\n<pre><code>class Klass(object):\n    def __init__(self):\n        #initialize conditions here\n    def __eq__(self):\n        return (self.cond1 == 'val1' and self.cond2 == 'val2' and\n               self.cond3 == 'val3' and self.cond4 == 'val4')\n\nx = Klass(some_values)\ny = Klass(some_other_values)\nif x == y:\n    print 'x == y'\nelse:\n    print 'x!=y'\n</code></pre>\n\n<p>The last two I haven't tested, but the concepts should be enough to get you going if that's what you want to go with.</p>\n\n<p>(And for the record, if this is just a one time thing, you're probably just better off using the method you presented at first.  If you're doing the comparison in lots of places, these methods may enhance readability enough to make you not feel so bad about the fact that they are kind of hacky.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7954,
                        "reputation": 12886,
                        "user_id": 14028,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/66c0b0464838d75ad39c0baeaa01bf4c?s=256&d=identicon&r=PG",
                        "display_name": "Kevin Little",
                        "link": "https://stackoverflow.com/users/14028/kevin-little"
                    },
                    "is_accepted": false,
                    "score": 68,
                    "last_activity_date": 1223477702,
                    "creation_date": 1223477702,
                    "answer_id": 183206,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><em>Someone</em> has to champion use of vertical whitespace here! :)</p>\n\n<pre><code>if (     cond1 == val1\n     and cond2 == val2\n     and cond3 == val3\n   ):\n    do_stuff()\n</code></pre>\n\n<p>This makes each condition clearly visible. It also allows cleaner expression of more complex conditions:</p>\n\n<pre><code>if (    cond1 == val1\n     or \n        (     cond2_1 == val2_1\n          and cond2_2 &gt;= val2_2\n          and cond2_3 != bad2_3\n        )\n   ):\n    do_more_stuff()\n</code></pre>\n\n<p>Yes, we're trading off a bit of vertical real estate for clarity. Well worth it IMO.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12277,
                        "reputation": 3035,
                        "user_id": 24082,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3c039f66ba69206b5314c6f7cdd759c2?s=256&d=identicon&r=PG",
                        "display_name": "Anders Waldenborg",
                        "link": "https://stackoverflow.com/users/24082/anders-waldenborg"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1223462317,
                    "creation_date": 1223462317,
                    "answer_id": 182067,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>\"all\" and \"any\" are nice for the many conditions of same type case. BUT they always evaluates all conditions. As shown in this example:</p>\n\n<pre><code>def c1():\n    print \" Executed c1\"\n    return False\ndef c2():\n    print \" Executed c2\"\n    return False\n\n\nprint \"simple and (aborts early!)\"\nif c1() and c2():\n    pass\n\nprint\n\nprint \"all (executes all :( )\"\nif all((c1(),c2())):\n    pass\n\nprint\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 151,
                    "last_activity_date": 1223461608,
                    "creation_date": 1223461608,
                    "answer_id": 182050,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I've resorted to the following in the degenerate case where it's simply AND's or OR's.</p>\n\n<pre><code>if all( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):\n\nif any( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):\n</code></pre>\n\n<p>It shaves a few characters and makes it clear that there's no subtlety to the condition.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10015,
                        "reputation": 57674,
                        "user_id": 18745,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/8ba0489ea90652c08d1406f2afe2e0e2?s=256&d=identicon&r=PG",
                        "display_name": "Dzinx",
                        "link": "https://stackoverflow.com/users/18745/dzinx"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1223450349,
                    "creation_date": 1223450349,
                    "answer_id": 181641,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I suggest moving the <code>and</code> keyword to the second line and indenting all lines containing conditions with two spaces instead of four:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2'\n  and cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>This is exactly how I solve this problem in my code. Having a keyword as the first word in the line makes the condition a lot more readable, and reducing the number of spaces further distinguishes condition from action.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10029,
                        "reputation": 47005,
                        "user_id": 18770,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/bf7da0bc3f01f63e4f19c421b331e786?s=256&d=identicon&r=PG",
                        "display_name": "Federico A. Ramponi",
                        "link": "https://stackoverflow.com/users/18770/federico-a-ramponi"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1223447940,
                    "last_edit_date": 1223447940,
                    "creation_date": 1223447514,
                    "answer_id": 181553,
                    "question_id": 181530,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>This doesn't improve so much but...</p>\n\n<pre><code>allCondsAreOK = (cond1 == 'val1' and cond2 == 'val2' and\n                 cond3 == 'val3' and cond4 == 'val4')\n\nif allCondsAreOK:\n   do_something\n</code></pre>\n"
                }
            ]
        },
        {
            "7742752": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 96,
                    "last_activity_date": 1318437185,
                    "last_edit_date": 1318437185,
                    "creation_date": 1318434404,
                    "answer_id": 7742808,
                    "question_id": 7742752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>In [62]: y={100:1, 90:4, 99:3, 92:1, 101:1}\nIn [63]: sorted(y.items(), key=lambda x: (x[1],x[0]), reverse=True)\nOut[63]: [(90, 4), (99, 3), (101, 1), (100, 1), (92, 1)]\n</code></pre>\n\n<p>The <code>key=lambda x: (x[1],x[0])</code> tells <code>sorted</code> that for each item <code>x</code> in <code>y.items()</code>, use <code>(x[1],x[0])</code> as the proxy value to be sorted. Since <code>x</code> is of the form <code>(key,value)</code>, <code>(x[1],x[0])</code> yields <code>(value,key)</code>. This causes <code>sorted</code> to sort by <code>value</code> first, then by <code>key</code> for tie-breakers.</p>\n\n<p><code>reverse=True</code> tells <code>sorted</code> to present the result in descending, rather than ascending order.</p>\n\n<p>See this <a href=\"http://wiki.python.org/moin/HowTo/Sorting\" rel=\"noreferrer\">wiki page</a> for a great tutorial on sorting in Python.</p>\n\n<p>PS. I tried using <code>key=reversed</code> instead, but <code>reversed(x)</code> returns an iterator, which does not compare as needed here.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 211445,
                        "reputation": 17566,
                        "user_id": 463621,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/xZY2t.png?s=256",
                        "display_name": "Don",
                        "link": "https://stackoverflow.com/users/463621/don"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1318435263,
                    "creation_date": 1318435263,
                    "answer_id": 7743006,
                    "question_id": 7742752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Maybe this is more explicit:</p>\n\n<pre><code>&gt;&gt;&gt; y = {100:1, 90:4, 99:3, 92:1, 101:1}\n&gt;&gt;&gt; reverse_comparison = lambda (a1, a2), (b1, b2):cmp((b2, b1), (a2, a1))\n&gt;&gt;&gt; sorted(y.items(), cmp=reverse_comparison)\n[(90, 4), (99, 3), (101, 1), (100, 1), (92, 1)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 363408,
                        "reputation": 1031,
                        "user_id": 707138,
                        "user_type": "registered",
                        "accept_rate": 20,
                        "profile_image": "https://www.gravatar.com/avatar/dc68ec1db907917f4d69161b420d649e?s=256&d=identicon&r=PG",
                        "display_name": "Melug",
                        "link": "https://stackoverflow.com/users/707138/melug"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1318434657,
                    "creation_date": 1318434657,
                    "answer_id": 7742859,
                    "question_id": 7742752,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try this:</p>\n\n<pre><code>&gt;&gt;&gt; d={100:1, 90:4, 99:3, 92:1, 101:1}\n&gt;&gt;&gt; sorted(d.items(), lambda a,b:b[1]-a[1] or a[0]-b[0])\n</code></pre>\n"
                }
            ]
        },
        {
            "3957717": [
                {
                    "owner": {
                        "account_id": 4657691,
                        "reputation": 311,
                        "user_id": 3994395,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/CdWqP.png?s=256",
                        "display_name": "furkantokac",
                        "link": "https://stackoverflow.com/users/3994395/furkantokac"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1649196746,
                    "last_edit_date": 1649196746,
                    "creation_date": 1409479410,
                    "answer_id": 25590895,
                    "question_id": 3957717,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I know the easiest, exact and the best solution. I had the same problem like you but now, I can run my Python/Tkinter(GUI) program with its icon.</p>\n<p>As we create .bat files on Windows, we can also create equivalent the .bat files easily in Linux too. Thanks to this file, that, we can start our programs without terminal even if it needs to get command on terminal to start (like Python programs) with double click to its icon (really .png icon :) ) or we can write commands to facilitate our works.\nSo, how is this going to happen ?</p>\n<p>For example, if we want to run our .py program, we just need to write this command to terminal :</p>\n<p><code>python3 locationOfPyFile</code></p>\n<p>So if we create a file that can automatically run this command, problem would be solved. In addition to that, you can have your own icon and even you don't have to open terminal !</p>\n<p>Check this article : <a href=\"https://furkantokac.com/linux-run-commands-from-its-icon/\" rel=\"nofollow noreferrer\">Run Commands From It's Icon (Easiest Way)</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 52947,
                        "reputation": 6023,
                        "user_id": 158304,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/e7a09db53f1482fe1ec510c29ad400f0?s=256&d=identicon&r=PG",
                        "display_name": "ghickman",
                        "link": "https://stackoverflow.com/users/158304/ghickman"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1287403481,
                    "creation_date": 1287403481,
                    "answer_id": 3958915,
                    "question_id": 3957717,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>As various others have already pointed out you can add the shebang to the top of your file</p>\n\n<p><code>#!/usr/bin/python</code> or <code>#!/usr/bin/env python</code></p>\n\n<p>and add execution permissions <code>chmod +x program.py</code></p>\n\n<p>allowing you to run your module with <code>./program.py</code></p>\n\n<p>Another option is to install it the pythonic way with setuptools. Create yourself a setup.py and put this in it:</p>\n\n<pre><code>from setuptools import setup\n\nsetup(\n    name = 'Program',\n    version = '0.1',\n    description = 'An example of an installable program',\n    author = 'ghickman',\n    url = '',\n    license = 'MIT',\n    packages = ['program'],\n    entry_points = {'console_scripts': ['prog = program.program',],},\n)\n</code></pre>\n\n<p>This assumes you've got a package called program and within that, a file called program.py with a method called main(). To install this way run setup.py like this</p>\n\n<p><code>python setup.py install</code></p>\n\n<p>This will install it to your platforms site-packages directory and create a console script called prog. You can then run <code>prog</code> from your terminal.</p>\n\n<p>A good resource for more information on setup.py is this site: <a href=\"http://mxm-mad-science.blogspot.com/2008/02/python-eggs-simple-introduction.html\">http://mxm-mad-science.blogspot.com/2008/02/python-eggs-simple-introduction.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 153684,
                        "reputation": 6989,
                        "user_id": 369113,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/fa9afaa27a88e6240ea25dba3a7b43ae?s=256&d=identicon&r=PG",
                        "display_name": "relet",
                        "link": "https://stackoverflow.com/users/369113/relet"
                    },
                    "is_accepted": true,
                    "score": 35,
                    "last_activity_date": 1287392939,
                    "creation_date": 1287392939,
                    "answer_id": 3957745,
                    "question_id": 3957717,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There is no need to. You can mark the file as executable using </p>\n\n<pre><code>chmod +x filename\n</code></pre>\n\n<p>Make sure it has a shebang line in the first line:</p>\n\n<pre><code>#!/usr/bin/env python\n</code></pre>\n\n<p>And your linux should be able to understand that this file must be interpreted with python. It can then be 'executed' as</p>\n\n<pre><code>./myprogram.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 51377,
                        "reputation": 6484,
                        "user_id": 153503,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f6da2c7a4c235373d90ec5f7b037c9af?s=256&d=identicon&r=PG",
                        "display_name": "leonm",
                        "link": "https://stackoverflow.com/users/153503/leonm"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1287392872,
                    "creation_date": 1287392872,
                    "answer_id": 3957736,
                    "question_id": 3957717,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>At the top op your python program add:</p>\n\n<pre><code>#!/usr/bin/python\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 44762,
                        "reputation": 341037,
                        "user_id": 131527,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG",
                        "display_name": "ghostdog74",
                        "link": "https://stackoverflow.com/users/131527/ghostdog74"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1287392868,
                    "creation_date": 1287392868,
                    "answer_id": 3957735,
                    "question_id": 3957717,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can try using a module like <a href=\"http://cx-freeze.sourceforge.net\" rel=\"nofollow\">cxfreeze</a></p>\n"
                }
            ]
        },
        {
            "48448473": [
                {
                    "owner": {
                        "account_id": 4667723,
                        "reputation": 4218,
                        "user_id": 3780372,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4103437e167592cdd8294cbac89c53ab?s=256&d=identicon&r=PG",
                        "display_name": "E. Ducateme",
                        "link": "https://stackoverflow.com/users/3780372/e-ducateme"
                    },
                    "is_accepted": true,
                    "score": 82,
                    "last_activity_date": 1540501479,
                    "last_edit_date": 1540501479,
                    "creation_date": 1516915291,
                    "answer_id": 48452100,
                    "question_id": 48448473,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This solution is also an approach that uses less code, avoids serialization to RDD and is likely easier to understand:</p>\n\n<pre><code>from pyspark.sql.types import IntegerType\n\n# notice the variable name (more below)\nmylist = [1, 2, 3, 4]\n\n# notice the parens after the type name\nspark.createDataFrame(mylist, IntegerType()).show()\n</code></pre>\n\n<p>NOTE: About naming your variable <code>list</code>: the term <code>list</code> is a Python builtin function and as such, it is strongly recommended that we avoid using builtin names as the name/label for our variables because we end up overwriting things like the <code>list()</code> function. When prototyping something fast and dirty, a number of folks use something like: <code>mylist</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4451740,
                        "reputation": 1895,
                        "user_id": 3623402,
                        "user_type": "registered",
                        "accept_rate": 12,
                        "profile_image": "https://www.gravatar.com/avatar/f808490a094d9e68c61a9e580a4a4ffc?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user15051990",
                        "link": "https://stackoverflow.com/users/3623402/user15051990"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1517980869,
                    "last_edit_date": 1517980869,
                    "creation_date": 1516901150,
                    "answer_id": 48448673,
                    "question_id": 48448473,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Please see the below code:</p>\n\n<pre><code>    from pyspark.sql import Row\n    li=[1,2,3,4]\n    rdd1 = sc.parallelize(li)\n    row_rdd = rdd1.map(lambda x: Row(x))\n    df=sqlContext.createDataFrame(row_rdd,['numbers']).show()\n</code></pre>\n\n<p><strong>df</strong></p>\n\n<pre><code>+-------+\n|numbers|\n+-------+\n|      1|\n|      2|\n|      3|\n|      4|\n+-------+\n</code></pre>\n"
                }
            ]
        },
        {
            "1647586": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user166390"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1578792974,
                    "last_edit_date": 1578792974,
                    "creation_date": 1256868115,
                    "answer_id": 1647616,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>This answer is outdated; <a href=\"https://stackoverflow.com/a/12022621/20146\">the answer below</a> works with modern Python</h1>\n\n<p><strong>Everything you wanted to know about <a href=\"http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html\" rel=\"noreferrer\">Python Attributes and Methods</a>.</strong></p>\n\n<p>Yes, this is an indirect answer, but it demonstrates a number of techniques and explains some of the more intricate details and \"magic\".</p>\n\n<p>For a \"more direct\" answer, consider <a href=\"https://docs.python.org/2.7/library/new.html#module-new\" rel=\"noreferrer\">python's new module</a>. In particular, look at the instancemethod function which allows \"binding\" a method to an instance -- in this case, that would allow you to use \"self\" in the method.</p>\n\n<pre><code>import new\nclass Z(object):\n  pass\nz = Z() \ndef method(self):\n  return self\nz.q = new.instancemethod(method, z, None)\nz is z.q()  # true\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198119,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1548869886,
                    "last_edit_date": 1548869886,
                    "creation_date": 1256867372,
                    "answer_id": 1647596,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you're binding to the instance, you shouldn't include the self argument:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...     pass\n... \n&gt;&gt;&gt; def donothing():\n...     pass\n... \n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; f.x = donothing\n&gt;&gt;&gt; f.x()\n&gt;&gt;&gt; \n</code></pre>\n\n<p>You do need the self argument if you're binding to a class though:</p>\n\n<pre><code>&gt;&gt;&gt; def class_donothing(self):\n...     pass\n... \n&gt;&gt;&gt; foo.y = class_donothing\n&gt;&gt;&gt; f.y()\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1489353,
                        "reputation": 836,
                        "user_id": 1609228,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/775a2178416fd8766b8cc8900cd31db5?s=256&d=identicon&r=PG",
                        "display_name": "Josh M",
                        "link": "https://stackoverflow.com/users/1609228/josh-m"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1345328134,
                    "creation_date": 1345328134,
                    "answer_id": 12022621,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Since Python 2.6, you should use the <code>types</code> module's <code>MethodType</code> class:</p>\n\n<pre><code>from types import MethodType\n\nclass A(object):\n    def m(self):\n        print 'aaa'\n\na = A()\n\ndef new_m(self):\n    print 'bbb'\n\na.m = MethodType(new_m, a)\n</code></pre>\n\n<p>As another answer pointed out, however, this will not work for 'magic' methods of new-style classes, such as <code>__str__()</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879597,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1256916409,
                    "last_edit_date": 1256916409,
                    "creation_date": 1256872015,
                    "answer_id": 1647794,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you ever need to do it for a <em>special</em> method (which, for a new-style class -- which is what you should always be using and the only kind in Python 3 -- is looked up on the class, not the instance), you can just make a per-instance class, e.g....:</p>\n\n<pre><code>self.foo = Foo()\nmeths = {'__str__': lambda self: 'peekaboo!'}\nself.foo.__class__ = type('yFoo', (Foo,), meths)\n</code></pre>\n\n<p><strong>Edit</strong>: I've been asked to clarify the advantages of this approach wrt new.instancemethod...:</p>\n\n<pre><code>&gt;&gt;&gt; class X(object): \n...   def __str__(self): return 'baah'\n... \n&gt;&gt;&gt; x=X()\n&gt;&gt;&gt; y=X()\n&gt;&gt;&gt; print x, y\nbaah baah\n&gt;&gt;&gt; x.__str__ = new.instancemethod(lambda self: 'boo!', x)\n&gt;&gt;&gt; print x, y\nbaah baah\n</code></pre>\n\n<p>As you can see, the new.instancemethod is totally useless in this case.  OTOH...:</p>\n\n<pre><code>&gt;&gt;&gt; x.__class__=type('X',(X,),{'__str__':lambda self:'boo!'})\n&gt;&gt;&gt; print x, y\nboo! baah\n</code></pre>\n\n<p>...assigning a new class works great for this case and every other.  BTW, as I hope is clear, once you've done this to a given instance you can then later add more method and other class attributes to its <code>x.__class__</code> and intrinsically affect only that one instance!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1256898399,
                    "creation_date": 1256898399,
                    "answer_id": 1649014,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Do Not Do This.</p>\n\n<p>Changing one instance's methods is just wrong.</p>\n\n<p>Here are the rules of OO Design.</p>\n\n<ol>\n<li><p>Avoid Magic.</p></li>\n<li><p>If you can't use inheritance, use delegation.</p></li>\n</ol>\n\n<p>That means that every time you think you need something magic, you should have been writing a \"wrapper\" or Facade around the object to add the features you want.</p>\n\n<p>Just write a wrapper.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24699,
                        "reputation": 1529,
                        "user_id": 62993,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/fdb62688f9e7db2f5ec0ba080975d106?s=256&d=identicon&r=PG",
                        "display_name": "hanksims",
                        "link": "https://stackoverflow.com/users/62993/hanksims"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1256867918,
                    "creation_date": 1256867918,
                    "answer_id": 1647610,
                    "question_id": 1647586,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Your example is kind of twisted and complex, and I don't quite see what it has to do with your question. Feel free to clarify if you like.</p>\n\n<p>However, it's pretty easy to do what you're looking to do, assuming I'm reading your question right.</p>\n\n<pre><code>class Foo(object):\n    def bar(self):\n        print('bar')\n\ndef baz():\n    print('baz')\n</code></pre>\n\n<p>In an interpreter ...</p>\n\n<pre><code>&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; f.bar()\nbar\n&gt;&gt;&gt; f.bar = baz\n&gt;&gt;&gt; f.bar()\nbaz\n&gt;&gt;&gt; g = Foo()\n&gt;&gt;&gt; g.bar()\nbar\n&gt;&gt;&gt; f.bar()\nbaz\n</code></pre>\n"
                }
            ]
        },
        {
            "46785507": [
                {
                    "owner": {
                        "account_id": 3765835,
                        "reputation": 13651,
                        "user_id": 3129414,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/0k8zH.png?s=256",
                        "display_name": "arshovon",
                        "link": "https://stackoverflow.com/users/3129414/arshovon"
                    },
                    "is_accepted": true,
                    "score": 79,
                    "last_activity_date": 1561385605,
                    "last_edit_date": 1561385605,
                    "creation_date": 1508256313,
                    "answer_id": 46794505,
                    "question_id": 46785507,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have created <code>people_photo</code> in <code>static</code> folder and placed an image named <code>shovon.jpg</code>. From the <code>application.py</code> I passed the image as variable to template and showed it using <code>img</code> tag in the template.</p>\n\n<p>In <code>application.py</code>:</p>\n\n<pre><code>from flask import Flask, render_template\nimport os\n\nPEOPLE_FOLDER = os.path.join('static', 'people_photo')\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = PEOPLE_FOLDER\n\n@app.route('/')\n@app.route('/index')\ndef show_index():\n    full_filename = os.path.join(app.config['UPLOAD_FOLDER'], 'shovon.jpg')\n    return render_template(\"index.html\", user_image = full_filename)\n</code></pre>\n\n<p>In <code>index.html</code>:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"{{ user_image }}\" alt=\"User Image\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Output:</p>\n\n<p><a href=\"https://i.sstatic.net/ewSVa.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/ewSVa.png\" alt=\"enter image description here\"></a></p>\n"
                }
            ]
        },
        {
            "3531746": [
                {
                    "owner": {
                        "account_id": 1988924,
                        "reputation": 10199,
                        "user_id": 1783439,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://i.sstatic.net/svenn.jpg?s=256",
                        "display_name": "nu everest",
                        "link": "https://stackoverflow.com/users/1783439/nu-everest"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1440925113,
                    "last_edit_date": 1440925113,
                    "creation_date": 1351526971,
                    "answer_id": 13125387,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>WebPurify is a Profanity Filter Library for Python</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3059418,
                        "reputation": 261,
                        "user_id": 2592414,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1f4dcac025ba0c003f29a4ce85094c0d?s=256&d=identicon&r=PG",
                        "display_name": "user2592414",
                        "link": "https://stackoverflow.com/users/2592414/user2592414"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1374080869,
                    "creation_date": 1374080869,
                    "answer_id": 17706025,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>arrBad = [\n'2g1c',\n'2 girls 1 cup',\n'acrotomophilia',\n'anal',\n'anilingus',\n'anus',\n'arsehole',\n'ass',\n'asshole',\n'assmunch',\n'auto erotic',\n'autoerotic',\n'babeland',\n'baby batter',\n'ball gag',\n'ball gravy',\n'ball kicking',\n'ball licking',\n'ball sack',\n'ball sucking',\n'bangbros',\n'bareback',\n'barely legal',\n'barenaked',\n'bastardo',\n'bastinado',\n'bbw',\n'bdsm',\n'beaver cleaver',\n'beaver lips',\n'bestiality',\n'bi curious',\n'big black',\n'big breasts',\n'big knockers',\n'big tits',\n'bimbos',\n'birdlock',\n'bitch',\n'black cock',\n'blonde action',\n'blonde on blonde action',\n'blow j',\n'blow your l',\n'blue waffle',\n'blumpkin',\n'bollocks',\n'bondage',\n'boner',\n'boob',\n'boobs',\n'booty call',\n'brown showers',\n'brunette action',\n'bukkake',\n'bulldyke',\n'bullet vibe',\n'bung hole',\n'bunghole',\n'busty',\n'butt',\n'buttcheeks',\n'butthole',\n'camel toe',\n'camgirl',\n'camslut',\n'camwhore',\n'carpet muncher',\n'carpetmuncher',\n'chocolate rosebuds',\n'circlejerk',\n'cleveland steamer',\n'clit',\n'clitoris',\n'clover clamps',\n'clusterfuck',\n'cock',\n'cocks',\n'coprolagnia',\n'coprophilia',\n'cornhole',\n'cum',\n'cumming',\n'cunnilingus',\n'cunt',\n'darkie',\n'date rape',\n'daterape',\n'deep throat',\n'deepthroat',\n'dick',\n'dildo',\n'dirty pillows',\n'dirty sanchez',\n'dog style',\n'doggie style',\n'doggiestyle',\n'doggy style',\n'doggystyle',\n'dolcett',\n'domination',\n'dominatrix',\n'dommes',\n'donkey punch',\n'double dong',\n'double penetration',\n'dp action',\n'eat my ass',\n'ecchi',\n'ejaculation',\n'erotic',\n'erotism',\n'escort',\n'ethical slut',\n'eunuch',\n'faggot',\n'fecal',\n'felch',\n'fellatio',\n'feltch',\n'female squirting',\n'femdom',\n'figging',\n'fingering',\n'fisting',\n'foot fetish',\n'footjob',\n'frotting',\n'fuck',\n'fucking',\n'fuck buttons',\n'fudge packer',\n'fudgepacker',\n'futanari',\n'g-spot',\n'gang bang',\n'gay sex',\n'genitals',\n'giant cock',\n'girl on',\n'girl on top',\n'girls gone wild',\n'goatcx',\n'goatse',\n'gokkun',\n'golden shower',\n'goo girl',\n'goodpoop',\n'goregasm',\n'grope',\n'group sex',\n'guro',\n'hand job',\n'handjob',\n'hard core',\n'hardcore',\n'hentai',\n'homoerotic',\n'honkey',\n'hooker',\n'hot chick',\n'how to kill',\n'how to murder',\n'huge fat',\n'humping',\n'incest',\n'intercourse',\n'jack off',\n'jail bait',\n'jailbait',\n'jerk off',\n'jigaboo',\n'jiggaboo',\n'jiggerboo',\n'jizz',\n'juggs',\n'kike',\n'kinbaku',\n'kinkster',\n'kinky',\n'knobbing',\n'leather restraint',\n'leather straight jacket',\n'lemon party',\n'lolita',\n'lovemaking',\n'make me come',\n'male squirting',\n'masturbate',\n'menage a trois',\n'milf',\n'missionary position',\n'motherfucker',\n'mound of venus',\n'mr hands',\n'muff diver',\n'muffdiving',\n'nambla',\n'nawashi',\n'negro',\n'neonazi',\n'nig nog',\n'nigga',\n'nigger',\n'nimphomania',\n'nipple',\n'nipples',\n'nsfw images',\n'nude',\n'nudity',\n'nympho',\n'nymphomania',\n'octopussy',\n'omorashi',\n'one cup two girls',\n'one guy one jar',\n'orgasm',\n'orgy',\n'paedophile',\n'panties',\n'panty',\n'pedobear',\n'pedophile',\n'pegging',\n'penis',\n'phone sex',\n'piece of shit',\n'piss pig',\n'pissing',\n'pisspig',\n'playboy',\n'pleasure chest',\n'pole smoker',\n'ponyplay',\n'poof',\n'poop chute',\n'poopchute',\n'porn',\n'porno',\n'pornography',\n'prince albert piercing',\n'pthc',\n'pubes',\n'pussy',\n'queaf',\n'raghead',\n'raging boner',\n'rape',\n'raping',\n'rapist',\n'rectum',\n'reverse cowgirl',\n'rimjob',\n'rimming',\n'rosy palm',\n'rosy palm and her 5 sisters',\n'rusty trombone',\n's&amp;m',\n'sadism',\n'scat',\n'schlong',\n'scissoring',\n'semen',\n'sex',\n'sexo',\n'sexy',\n'shaved beaver',\n'shaved pussy',\n'shemale',\n'shibari',\n'shit',\n'shota',\n'shrimping',\n'slanteye',\n'slut',\n'smut',\n'snatch',\n'snowballing',\n'sodomize',\n'sodomy',\n'spic',\n'spooge',\n'spread legs',\n'strap on',\n'strapon',\n'strappado',\n'strip club',\n'style doggy',\n'suck',\n'sucks',\n'suicide girls',\n'sultry women',\n'swastika',\n'swinger',\n'tainted love',\n'taste my',\n'tea bagging',\n'threesome',\n'throating',\n'tied up',\n'tight white',\n'tit',\n'tits',\n'titties',\n'titty',\n'tongue in a',\n'topless',\n'tosser',\n'towelhead',\n'tranny',\n'tribadism',\n'tub girl',\n'tubgirl',\n'tushy',\n'twat',\n'twink',\n'twinkie',\n'two girls one cup',\n'undressing',\n'upskirt',\n'urethra play',\n'urophilia',\n'vagina',\n'venus mound',\n'vibrator',\n'violet blue',\n'violet wand',\n'vorarephilia',\n'voyeur',\n'vulva',\n'wank',\n'wet dream',\n'wetback',\n'white power',\n'women rapping',\n'wrapping men',\n'wrinkled starfish',\n'xx',\n'xxx',\n'yaoi',\n'yellow showers',\n'yiffy',\n'zoophilia']\n\ndef profanityFilter(text):\nbrokenStr1 = text.split()\nbadWordMask = '!@#$%!@#$%^~!@%^~@#$%!@#$%^~!'\nnew = ''\nfor word in brokenStr1:\n    if word in arrBad:\n        print word + ' &lt;--Bad word!'\n        text = text.replace(word,badWordMask[:len(word)])\n        #print new\n\nreturn text\n\nprint profanityFilter(\"this thing sucks sucks sucks fucking stuff\")\n</code></pre>\n\n<p>You can add or remove from the bad words list,arrBad, as you please.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 207111,
                        "reputation": 729,
                        "user_id": 456795,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/9a87e3dd889adc746a9fa2740fc57a92?s=256&d=identicon&r=PG",
                        "display_name": "Anand",
                        "link": "https://stackoverflow.com/users/456795/anand"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1286419210,
                    "creation_date": 1286419210,
                    "answer_id": 3878301,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You could probably combine <a href=\"http://spambayes.sourceforge.net/\" rel=\"nofollow\">http://spambayes.sourceforge.net/</a> and <a href=\"http://www.cs.cmu.edu/~biglou/resources/bad-words.txt\" rel=\"nofollow\">http://www.cs.cmu.edu/~biglou/resources/bad-words.txt</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 46333,
                        "reputation": 57304,
                        "user_id": 136829,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e92146e270ae11efac6405927b6439af?s=256&d=identicon&r=PG",
                        "display_name": "Glenn Maynard",
                        "link": "https://stackoverflow.com/users/136829/glenn-maynard"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1286418854,
                    "creation_date": 1286418854,
                    "answer_id": 3878279,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's possible for users to work around this, of course, but it should do a fairly thorough job of removing profanity:</p>\n\n<pre><code>import re\ndef remove_profanity(s):\n    def repl(word):\n        m = re.match(r\"(\\w+)(.*)\", word)\n        if not m:\n            return word\n        word = \"Bork\" if m.group(1)[0].isupper() else \"bork\"\n        word += m.group(2)\n        return word\n    return \" \".join([repl(w) for w in s.split(\" \")])\n\nprint remove_profanity(\"You just come along with me and have a good time. The Galaxy's a fun place. You'll need to have this fish in your ear.\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 150536,
                        "reputation": 12931,
                        "user_id": 363811,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8e0de1411af8f943d70b9c42c61a51a6?s=256&d=identicon&r=PG",
                        "display_name": "leoluk",
                        "link": "https://stackoverflow.com/users/363811/leoluk"
                    },
                    "is_accepted": true,
                    "score": 45,
                    "last_activity_date": 1282325202,
                    "creation_date": 1282325202,
                    "answer_id": 3533322,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I didn't found any Python profanity library, so I made one myself.</p>\n\n<h2>Parameters</h2>\n\n<hr>\n\n<h3><code>filterlist</code></h3>\n\n<p>A list of regular expressions that match a forbidden word. Please do not use <code>\\b</code>, it will be inserted depending on <code>inside_words</code>.</p>\n\n<p>Example:\n <code>['bad', 'un\\w+']</code></p>\n\n<h3><code>ignore_case</code></h3>\n\n<p>Default: <code>True</code></p>\n\n<p>Self-explanatory.</p>\n\n<h3><code>replacements</code></h3>\n\n<p>Default: <code>\"$@%-?!\"</code></p>\n\n<p>A string with characters from which the replacements strings will be randomly generated.</p>\n\n<p>Examples: <code>\"%&amp;$?!\"</code> or <code>\"-\"</code> etc.</p>\n\n<h3><code>complete</code></h3>\n\n<p>Default: <code>True</code></p>\n\n<p>Controls if the entire string will be replaced or if the first and last chars will be kept.</p>\n\n<h3><code>inside_words</code></h3>\n\n<p>Default: <code>False</code></p>\n\n<p>Controls if words are searched inside other words too. Disabling this </p>\n\n<h2>Module source</h2>\n\n<hr>\n\n<p>(examples at the end)</p>\n\n<pre><code>\"\"\"\nModule that provides a class that filters profanities\n\n\"\"\"\n\n__author__ = \"leoluk\"\n__version__ = '0.0.1'\n\nimport random\nimport re\n\nclass ProfanitiesFilter(object):\n    def __init__(self, filterlist, ignore_case=True, replacements=\"$@%-?!\", \n                 complete=True, inside_words=False):\n        \"\"\"\n        Inits the profanity filter.\n\n        filterlist -- a list of regular expressions that\n        matches words that are forbidden\n        ignore_case -- ignore capitalization\n        replacements -- string with characters to replace the forbidden word\n        complete -- completely remove the word or keep the first and last char?\n        inside_words -- search inside other words?\n\n        \"\"\"\n\n        self.badwords = filterlist\n        self.ignore_case = ignore_case\n        self.replacements = replacements\n        self.complete = complete\n        self.inside_words = inside_words\n\n    def _make_clean_word(self, length):\n        \"\"\"\n        Generates a random replacement string of a given length\n        using the chars in self.replacements.\n\n        \"\"\"\n        return ''.join([random.choice(self.replacements) for i in\n                  range(length)])\n\n    def __replacer(self, match):\n        value = match.group()\n        if self.complete:\n            return self._make_clean_word(len(value))\n        else:\n            return value[0]+self._make_clean_word(len(value)-2)+value[-1]\n\n    def clean(self, text):\n        \"\"\"Cleans a string from profanity.\"\"\"\n\n        regexp_insidewords = {\n            True: r'(%s)',\n            False: r'\\b(%s)\\b',\n            }\n\n        regexp = (regexp_insidewords[self.inside_words] % \n                  '|'.join(self.badwords))\n\n        r = re.compile(regexp, re.IGNORECASE if self.ignore_case else 0)\n\n        return r.sub(self.__replacer, text)\n\n\nif __name__ == '__main__':\n\n    f = ProfanitiesFilter(['bad', 'un\\w+'], replacements=\"-\")    \n    example = \"I am doing bad ungood badlike things.\"\n\n    print f.clean(example)\n    # Returns \"I am doing --- ------ badlike things.\"\n\n    f.inside_words = True    \n    print f.clean(example)\n    # Returns \"I am doing --- ------ ---like things.\"\n\n    f.complete = False    \n    print f.clean(example)\n    # Returns \"I am doing b-d u----d b-dlike things.\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15903,
                        "reputation": 328082,
                        "user_id": 34088,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/8a4d6f03a8879432d8563aefbf48e787?s=256&d=identicon&r=PG",
                        "display_name": "Aaron Digulla",
                        "link": "https://stackoverflow.com/users/34088/aaron-digulla"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1282315180,
                    "creation_date": 1282315180,
                    "answer_id": 3531913,
                    "question_id": 3531746,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Profanity? What the f***'s that? ;-)</p>\n\n<p>It will still take a couple of years before a computer will really be able to recognize swearing and cursing and it is my sincere hope that people will have understood by then that profanity is human and not \"dangerous.\"</p>\n\n<p>Instead of a dumb filter, have a smart human moderator who can balance the tone of discussion as appropriate. A moderator who can detect abuse like:</p>\n\n<p>\"If you were my husband, I'd poison your tea.\" - \"If you were my wife, I'd drink it.\"</p>\n\n<p>(that was from Winston Churchill, btw.)</p>\n"
                }
            ]
        },
        {
            "54109167": [
                {
                    "owner": {
                        "account_id": 11361106,
                        "reputation": 7565,
                        "user_id": 8329213,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/Db9cx.jpg?s=256",
                        "display_name": "cph_sto",
                        "link": "https://stackoverflow.com/users/8329213/cph-sto"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1547043333,
                    "last_edit_date": 1547043333,
                    "creation_date": 1547035035,
                    "answer_id": 54109610,
                    "question_id": 54109167,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The code will work irrespective of whether <code>d1</code> or <code>d2</code> have the same set of keys. I have added a key <code>'e'</code> in <code>d1</code> and <code>'d'</code> in <code>d2</code>.</p>\n\n<pre><code>d1 = {'a': [2, 4, 5, 6, 8, 10], 'b': [1, 2, 5, 6, 9, 12], 'c': [0, 4, 5, 8, 10, 21], 'e':[0,0,0]}\nd2 = {'a': [12, 15], 'b': [14, 16], 'c': [23, 35], 'd': [13, 3]}\n\nd2_keys_not_in_d1 = d2.keys() - d1.keys()\nd1_keys_not_in_d2 = d1.keys() - d2.keys()\ncommon_keys = d2.keys() &amp; d1.keys()\n\nfor i in common_keys:\n    d[i]=d1[i]+d2[i]\nfor i in d1_keys_not_in_d2:\n    d[i]=d1[i]\nfor i in d2_keys_not_in_d1:\n    d[i]=d2[i]\nd\n{'a': [2, 4, 5, 6, 8, 10, 12, 15],\n 'b': [1, 2, 5, 6, 9, 12, 14, 16],\n 'c': [0, 4, 5, 8, 10, 21, 23, 35],\n 'd': [13, 3],\n 'e': [0, 0, 0]}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1702590,
                        "reputation": 7058,
                        "user_id": 1562285,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0be3cbb95b7e672fc8135509aa37b589?s=256&d=identicon&r=PG",
                        "display_name": "Maarten Fabr&#233;",
                        "link": "https://stackoverflow.com/users/1562285/maarten-fabr%c3%a9"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1547040581,
                    "creation_date": 1547040581,
                    "answer_id": 54111299,
                    "question_id": 54109167,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>if not all the keys from <code>d2</code> are in <code>d1</code>, then the simplest thing is using set union and <code>dict.get</code>:</p>\n\n<pre><code>combined_keys = d1.keys() | d2.keys()\nd_comb = {key: d1.get(key, []) + d2.get(key, []) for key in combined_keys}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4974930,
                        "reputation": 61800,
                        "user_id": 4001592,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LvJCz.png?s=256",
                        "display_name": "Dani Mesejo",
                        "link": "https://stackoverflow.com/users/4001592/dani-mesejo"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1547033905,
                    "creation_date": 1547033905,
                    "answer_id": 54109272,
                    "question_id": 54109167,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could use <a href=\"https://www.python.org/dev/peps/pep-3132/\" rel=\"noreferrer\">extended iterable unpacking</a>:</p>\n\n<pre><code>d1 = {\n 'a': [2,4,5,6,8,10],\n 'b': [1,2,5,6,9,12],\n 'c': [0,4,5,8,10,21]\n }\nd2 = {\n 'a': [12,15],\n 'b': [14,16],\n 'c': [23,35]\n  }\n\nd_comb = {key:[*d1[key], *d2[key]] for key in d1}\n\nprint(d_comb)\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre><code>{'c': [0, 4, 5, 8, 10, 21, 23, 35], 'b': [1, 2, 5, 6, 9, 12, 14, 16], 'a': [2, 4, 5, 6, 8, 10, 12, 15]}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12672477,
                        "reputation": 164273,
                        "user_id": 9209546,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/qk9vC.jpg?s=256",
                        "display_name": "jpp",
                        "link": "https://stackoverflow.com/users/9209546/jpp"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1547033774,
                    "creation_date": 1547033774,
                    "answer_id": 54109230,
                    "question_id": 54109167,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noreferrer\"><code>itertools.chain</code></a> to efficiently construct a single list from input lists:</p>\n\n<pre><code>from itertools import chain\nd_comb = {key: list(chain(d1[key], d2[key])) for key in d1}\n</code></pre>\n\n<p>For the more general case covering an arbitrary number of dictionaries and keys which are not equal across dictionaries, see <a href=\"https://stackoverflow.com/a/54108746/9209546\">Merging dictionary value lists in python</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13441658,
                        "reputation": 88104,
                        "user_id": 9698684,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Hj2XY.jpg?s=256",
                        "display_name": "yatu",
                        "link": "https://stackoverflow.com/users/9698684/yatu"
                    },
                    "is_accepted": true,
                    "score": 34,
                    "last_activity_date": 1547033724,
                    "creation_date": 1547033724,
                    "answer_id": 54109210,
                    "question_id": 54109167,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You almost had it, instead use <code>+</code> to append both lists:</p>\n\n<pre><code>{key: d1[key] + d2[key] for key in d1}\n\n{'a': [2, 4, 5, 6, 8, 10, 12, 15],\n 'b': [1, 2, 5, 6, 9, 12, 14, 16],\n 'c': [0, 4, 5, 8, 10, 21, 23, 35]}\n</code></pre>\n"
                }
            ]
        },
        {
            "18293746": [
                {
                    "owner": {
                        "account_id": 2531811,
                        "reputation": 46486,
                        "user_id": 2199958,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3a72b60a81fb6e164436524470a1b41d?s=256&d=identicon&r=PG",
                        "display_name": "Viktor Kerkez",
                        "link": "https://stackoverflow.com/users/2199958/viktor-kerkez"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1673039084,
                    "last_edit_date": 1673039084,
                    "creation_date": 1376778477,
                    "answer_id": 18293876,
                    "question_id": 18293746,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's a little bit complicated and has to do with the concept of <a href=\"https://numpy.org/doc/stable/user/basics.broadcasting.html\" rel=\"nofollow noreferrer\">broadcasting</a> and the fact that all numpy operations are element wise.</p>\n<ol>\n<li><code>a</code> is a 2D array with 1 row and 3 columns and <code>b</code> is a 2D array with 1 column and 3 rows.</li>\n<li>If you try to multiply them element by element (which is what numpy tries to do if you do <code>a * b</code> because every basic operation except the <code>dot</code> operation is element wise), it must broadcast the arrays so that they match in all their dimensions.</li>\n<li>Since the first array is 1x3 and the second is 3x1 they can be broadcasted to 3x3 matrix according to the broadcasting rules. They will look like:</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>a = [[1, 2, 3],\n     [1, 2, 3],\n     [1, 2, 3]]\n\nb = [[4, 4, 4],\n     [5, 5, 5],\n     [6, 6, 6]]\n</code></pre>\n<p>And now Numpy can multiply them element by element, giving you the result:</p>\n<pre><code>[[ 4,  8, 12],\n [ 5, 10, 15],\n [ 6, 12, 18]]\n</code></pre>\n<p>When you are doing a <code>.dot</code> operation it does the standard matrix multiplication. More in <a href=\"https://web.archive.org/web/20150802020005/http://wiki.scipy.org/Tentative_NumPy_Tutorial\" rel=\"nofollow noreferrer\">docs</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 440448,
                        "reputation": 62720,
                        "user_id": 830012,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7ALrL.jpg?s=256",
                        "display_name": "Pavel Anossov",
                        "link": "https://stackoverflow.com/users/830012/pavel-anossov"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1376778480,
                    "creation_date": 1376778480,
                    "answer_id": 18293877,
                    "question_id": 18293746,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>*</code> does elementwise multiplication.</p>\n\n<p>Since the arrays are of different shapes, <a href=\"http://docs.scipy.org/doc/numpy/reference/ufuncs.html#broadcasting\" rel=\"noreferrer\">broadcasting</a> rules will be applied.</p>\n\n<pre><code>In [5]: a.shape\nOut[5]: (1, 3)\n\nIn [6]: b.shape\nOut[6]: (3, 1)\n\nIn [7]: (a * b).shape\nOut[7]: (3, 3)\n</code></pre>\n\n<ol>\n<li>All input arrays with ndim smaller than the input array of largest ndim, have 1\u2019s prepended to their shapes (<em>does not apply here</em>).</li>\n<li>The size in each dimension of the output shape is the maximum of all the input sizes in that dimension.</li>\n<li>An input can be used in the calculation if its size in a particular dimension either matches the output size in that dimension, or has value exactly 1.</li>\n<li>If an input has a dimension size of 1 in its shape, the first data entry in that dimension will be used for all calculations along that dimension. In other words, the stepping machinery of the ufunc will simply not step along that dimension (the stride will be 0 for that dimension).</li>\n</ol>\n\n<p>So, the resulting shape must be <code>(3, 3)</code> (maximums of <code>a</code> and <code>b</code> dimension sizes) and while performing the multiplication numpy will not step through a's first dimension and b's second dimension (their sizes are 1).</p>\n\n<p>The result's <code>[i][j]</code> element is equal to the product of broadcasted <code>a</code>'s and <code>b</code>'s <code>[i][j]</code> element.</p>\n\n<pre><code>(a * b)[0][0] == a[0][0] * b[0][0]\n(a * b)[0][1] == a[0][1] * b[0][0]  # (not stepping through b's second dimension)\n(a * b)[0][2] == a[0][2] * b[0][0]\n(a * b)[1][0] == a[0][0] * b[1][0]  # (not stepping through a's first dimension)\n\netc.\n</code></pre>\n"
                }
            ]
        },
        {
            "50848764": [
                {
                    "owner": {
                        "account_id": 11900153,
                        "reputation": 71492,
                        "user_id": 8708364,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AMH4B.png?s=256",
                        "display_name": "U13-Forward",
                        "link": "https://stackoverflow.com/users/8708364/u13-forward"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1531193748,
                    "last_edit_date": 1531193748,
                    "creation_date": 1528944110,
                    "answer_id": 50848873,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try this:</p>\n\n<pre><code>s = 'abcd qwrre qwedsasd zxcwsacds'\ns1 = s.split()[0]\ns2 = ' '.join(s.split()[1:])\nprint(s1)\nprint(s2)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>abcd\nqwrre qwedsasd zxcwsacds\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>new_s = ''.join([' s ' if i.isspace() else i for i in s])\na,b = new_s.replace(' s','',1).split(' s ')\nprint(a)\nprint(b)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>abcd\nqwrre qwedsasd zxcwsacds\n</code></pre>\n\n<p>Or even better split also for tabs and newlines:</p>\n\n<pre><code>a,b = s.split(None,1)\nprint(a)\nprint(b)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>abcd\nqwrre qwedsasd zxcwsacds\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9588046,
                        "reputation": 1419,
                        "user_id": 7120016,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b060d655967fa614bd75246f9f74f5d4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Rajat Jain",
                        "link": "https://stackoverflow.com/users/7120016/rajat-jain"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1530249302,
                    "last_edit_date": 1530249302,
                    "creation_date": 1528943563,
                    "answer_id": 50848799,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>1.You can split the string like this.</p>\n\n<pre><code>a = temp.substring(0, s.indexOf(' '));\nb = temp.substring(s.indexOf(' ') + 1);\n</code></pre>\n\n<p>2.or you can do:</p>\n\n<pre><code>a = s[0: s.find(' ')]\nb = s[s.find(' ') + 1: ]\n</code></pre>\n\n<p>3.  </p>\n\n<pre><code>a,b = s.split(' ', 1)\nprint(a)\nprint(b) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1834465,
                        "reputation": 1382,
                        "user_id": 3967945,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6d671333d111810416ba4952f1da75c1?s=256&d=identicon&r=PG",
                        "display_name": "mroman",
                        "link": "https://stackoverflow.com/users/3967945/mroman"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1528976956,
                    "creation_date": 1528976956,
                    "answer_id": 50856877,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>So, there's a second parameter you can pass as many have pointed out:</p>\n\n<pre><code>&gt;&gt;&gt; a, b = \"foo bar\".split(' ', 1)\n</code></pre>\n\n<p>but nobody's pointing this out:</p>\n\n<pre><code>&gt;&gt;&gt; a, b = \"foobar\".split(' ', 1)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: need more than 1 value to unpack\n</code></pre>\n\n<p>You don't want to be using this because it's unsafe unless you're guaranteed to have a string that has only the one space in it. It's better to split it and then check for how many splits you've got and then unpack them:</p>\n\n<pre><code>&gt;&gt;&gt; parts = \"foo bar\".split(' ', 1)\n&gt;&gt;&gt; if len(parts) == 2:\n&gt;&gt;&gt;    a, b = parts \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13765102,
                        "reputation": 750,
                        "user_id": 9933848,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/df64236160e6ae42ff69ff36c9a5f6ff?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "TMK",
                        "link": "https://stackoverflow.com/users/9933848/tmk"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1528969453,
                    "last_edit_date": 1528969453,
                    "creation_date": 1528943742,
                    "answer_id": 50848826,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could use <code>a,b = split(' ', 1)</code>.</p>\n\n<p>The second argument <code>1</code> is the maximum number of splits that would be done.</p>\n\n<pre><code>s = 'abcd efgh hijk'\na,b = s.split(' ', 1)\nprint(a) #abcd\nprint(b) #efgh hijk\n</code></pre>\n\n<p>For more information on the string split function, see <a href=\"https://docs.python.org/2/library/stdtypes.html#str.split\" rel=\"noreferrer\"><code>str.split</code> in the manual</a>. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 13719859,
                        "reputation": 81,
                        "user_id": 9900080,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/oiXTT.png?s=256",
                        "display_name": "Zack Atama",
                        "link": "https://stackoverflow.com/users/9900080/zack-atama"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1528944229,
                    "creation_date": 1528944229,
                    "answer_id": 50848883,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You're missing one more parameter in your split, the number of occurrences, try this;</p>\n\n<pre><code>s='abcd qwrre qwedsasd zxcwsacds'\n&gt;&gt;&gt; a, b = s.split(' ', 1)\n&gt;&gt;&gt; print(a, b)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9531943,
                        "reputation": 644,
                        "user_id": 7083303,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/2d43f031da6df6b356f96ddea006ace8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "JJ123",
                        "link": "https://stackoverflow.com/users/7083303/jj123"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1528944107,
                    "creation_date": 1528944107,
                    "answer_id": 50848872,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can solve this problem by using python \"star expression\". </p>\n\n<pre><code>s='abcd qwrre qwedsasd zxcwsacds'\na = s.split()\nfirst, *second = a\nsecond = \" \".join(second)\n</code></pre>\n\n<p>\"first\" takes the first element of the list and \" *second\" takes the remaining elements. </p>\n\n<pre><code>&gt;&gt;&gt; first\n'abcd'\n&gt;&gt;&gt; second\n'qwrre', 'qwedsasd', 'zxcwsacds'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4861014,
                        "reputation": 2310,
                        "user_id": 3920623,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4Ny3v.png?s=256",
                        "display_name": "constt",
                        "link": "https://stackoverflow.com/users/3920623/constt"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1528943913,
                    "creation_date": 1528943913,
                    "answer_id": 50848849,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use a standard string method <code>partition</code> which searches for a given separator and returns a 3-tuple consisting of string part before it, the separator itself, and the part after it.</p>\n\n<pre><code>&gt;&gt;&gt; s = 'abcd qwrre qwedsasd zxcwsacds'\n&gt;&gt;&gt; s.partition(' ')\n('abcd', ' ', 'qwrre qwedsasd zxcwsacds')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1593603,
                        "reputation": 858,
                        "user_id": 1476365,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/102efd0c8c44f241f74214fad1f828c5?s=256&d=identicon&r=PG",
                        "display_name": "Michael Swartz",
                        "link": "https://stackoverflow.com/users/1476365/michael-swartz"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1528943711,
                    "creation_date": 1528943711,
                    "answer_id": 50848820,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>#!python2\n\ns='abcd qwrre qwedsasd zxcwsacds'\n\ns1 = s[0: s.find(' ')]\ns2 = s[s.find(' ') + 1: ]\n\nprint s1\nprint s2\n'''\nabcd\nqwrre qwedsasd zxcwsacds\n'''\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7846894,
                        "reputation": 3588,
                        "user_id": 5931673,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://i.sstatic.net/aTpXN.jpg?s=256",
                        "display_name": "ajxs",
                        "link": "https://stackoverflow.com/users/5931673/ajxs"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1528943701,
                    "last_edit_date": 1592644375,
                    "creation_date": 1528943701,
                    "answer_id": 50848815,
                    "question_id": 50848764,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From the <a href=\"https://docs.python.org/3/library/stdtypes.html#str.split\" rel=\"noreferrer\">Python docs</a></p>\n<blockquote>\n<p><strong>str.split(sep=None, maxsplit=-1)</strong></p>\n<p>Return a list of the words in the string, using sep as the delimiter\nstring. If maxsplit is given, at most maxsplit splits are done (thus,\nthe list will have at most maxsplit+1 elements). If maxsplit is not\nspecified or -1, then there is no limit on the number of splits (all\npossible splits are made).</p>\n</blockquote>\n<pre><code>'1 2 3'.split(maxsplit=1)\n# ['1', '2 3']\n</code></pre>\n"
                }
            ]
        },
        {
            "1885181": [
                {
                    "owner": {
                        "account_id": 511984,
                        "reputation": 1307,
                        "user_id": 1578458,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/2RWBA.gif?s=256",
                        "display_name": "Jesko H&#252;ttenhain",
                        "link": "https://stackoverflow.com/users/1578458/jesko-h%c3%bcttenhain"
                    },
                    "is_accepted": false,
                    "score": 49,
                    "last_activity_date": 1669699068,
                    "last_edit_date": 1669699068,
                    "creation_date": 1564012219,
                    "answer_id": 57192592,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All given answers will break on general Unicode strings. The following works for Python3 in all cases, as far as I can tell:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from codecs import encode, decode\nsample = u'mon\u20acy\\\\nr\u00f6cks'\nresult = decode(encode(sample, 'latin-1', 'backslashreplace'), 'unicode-escape')\nprint(result)\n</code></pre>\n<p>In recent Python versions, this also works without the import:</p>\n<pre class=\"lang-py prettyprint-override\"><code>sample = u'mon\u20acy\\\\nr\u00f6cks'\nresult = sample.encode('latin-1', 'backslashreplace').decode('unicode-escape')\n</code></pre>\n<p>As suggested by <a href=\"https://stackoverflow.com/users/591495\">obataku</a>, you can also use the <a href=\"https://docs.python.org/3/library/ast.html#ast.literal_eval\" rel=\"noreferrer\"><code>literal_eval</code></a> method from the <code>ast</code> module like so:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import ast\nsample = u'mon\u20acy\\\\nr\u00f6cks'\nprint(ast.literal_eval(F'&quot;{sample}&quot;'))\n</code></pre>\n<p>Or like this when your string <em>really</em> contains a string literal (including the quotes):</p>\n<pre class=\"lang-py prettyprint-override\"><code>import ast\nsample = u'&quot;mon\u20acy\\\\nr\u00f6cks&quot;'\nprint(ast.literal_eval(sample))\n</code></pre>\n<p>However, if you are uncertain whether the input string uses double or single quotes as delimiters, or when you cannot assume it to be properly escaped at all, then <code>literal_eval</code> may raise a <code>SyntaxError</code> while the encode/decode method will still work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13795134,
                        "reputation": 3451,
                        "user_id": 10440128,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/xbqD0.jpg?s=256",
                        "display_name": "milahu",
                        "link": "https://stackoverflow.com/users/10440128/milahu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654798294,
                    "last_edit_date": 1654798294,
                    "creation_date": 1654797501,
                    "answer_id": 72564681,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>custom string parser to decode only some backslash-escapes, in this case <code>\\&quot;</code> and <code>\\'</code></p>\n<pre class=\"lang-py prettyprint-override\"><code>def backslash_decode(src):\n    &quot;decode backslash-escapes&quot;\n    slashes = 0 # count backslashes\n    dst = &quot;&quot;\n    for loc in range(0, len(src)):\n        char = src[loc]\n        if char == &quot;\\\\&quot;:\n            slashes += 1\n            if slashes == 2:\n                dst += char # decode backslash\n                slashes = 0\n        elif slashes == 0:\n            dst += char # normal char\n        else: # slashes == 1\n            if char == '&quot;':\n                dst += char # decode double-quote\n            elif char == &quot;'&quot;:\n                dst += char # decode single-quote\n            else:\n                dst += &quot;\\\\&quot; + char # keep backslash-escapes like \\n or \\t\n            slashes = 0\n    return dst\n\nsrc = &quot;a&quot; + &quot;\\\\\\\\&quot; + r&quot;\\'&quot; + r'\\&quot;' + r&quot;\\n&quot; + r&quot;\\t&quot; + r&quot;\\x&quot; + &quot;z&quot; # input\nexp = &quot;a&quot; + &quot;\\\\&quot;   +  &quot;'&quot;  +  '&quot;'  + r&quot;\\n&quot; + r&quot;\\t&quot; + r&quot;\\x&quot; + &quot;z&quot; # expected output\n\nres = backslash_decode(src)\n\nprint(res)\nassert res == exp\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 209311,
                        "reputation": 5597,
                        "user_id": 460258,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a27e680e343e7f55c62f534e6a640b1f?s=256&d=identicon&r=PG",
                        "display_name": "Jander",
                        "link": "https://stackoverflow.com/users/460258/jander"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1635528456,
                    "creation_date": 1635528456,
                    "answer_id": 69772725,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For Python3, consider:</p>\n<pre><code>my_string.encode('raw_unicode_escape').decode('unicode_escape')\n</code></pre>\n<p>The 'raw_unicode_escape' codec encodes to latin1, but first replaces all other Unicode code points with an escaped <code>'\\uXXXX'</code> or <code>'\\UXXXXXXXX'</code> form.  Importantly, it differs from the normal 'unicode_escape' codec in that it does not touch existing backslashes.</p>\n<p>So when the normal 'unicode_escape' decoder is applied, both the newly-escaped code points and the originally-escaped elements are treated equally, and the result is an unescaped native Unicode string.</p>\n<p>(The 'raw_unicode_escape' decoder appears to pay attention only to the <code>'\\uXXXX'</code> and <code>'\\UXXXXXXXX'</code> forms, ignoring all other escapes.)</p>\n<p>Documentation:\n<a href=\"https://docs.python.org/3/library/codecs.html?highlight=codecs#text-encodings\" rel=\"noreferrer\">https://docs.python.org/3/library/codecs.html?highlight=codecs#text-encodings</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4278932,
                        "reputation": 6910,
                        "user_id": 3498910,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://i.sstatic.net/1UvVy.jpg?s=256",
                        "display_name": "asachet",
                        "link": "https://stackoverflow.com/users/3498910/asachet"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1523366181,
                    "last_edit_date": 1523366181,
                    "creation_date": 1523365662,
                    "answer_id": 49754538,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In python 3, <code>str</code> objects don't have a <code>decode</code> method and you have to use a <code>bytes</code> object. ChristopheD's answer covers python 2.</p>\n\n<pre><code># create a `bytes` object from a `str`\nmy_str = \"Hello,\\\\nworld\"\n# (pick an encoding suitable for your str, e.g. 'latin1')\nmy_bytes = my_str.encode(\"utf-8\")\n\n# or directly\nmy_bytes = b\"Hello,\\\\nworld\"\n\nprint(my_bytes.decode(\"unicode_escape\"))\n# \"Hello,\n# world\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 66177,
                        "reputation": 33646,
                        "user_id": 194311,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=256&d=identicon&r=PG",
                        "display_name": "jathanism",
                        "link": "https://stackoverflow.com/users/194311/jathanism"
                    },
                    "is_accepted": false,
                    "score": 52,
                    "last_activity_date": 1260493656,
                    "creation_date": 1260493656,
                    "answer_id": 1885211,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <code>ast.literal_eval</code> which is safe:</p>\n\n<blockquote>\n  <p>Safely evaluate an expression node or a string containing a Python\n  expression.  The string or node provided may only consist of the\n  following Python literal structures: strings, numbers, tuples, lists,\n  dicts, booleans, and None. (END)</p>\n</blockquote>\n\n<p>Like this:</p>\n\n<pre><code>&gt;&gt;&gt; import ast\n&gt;&gt;&gt; escaped_str = '\"Hello,\\\\nworld!\"'\n&gt;&gt;&gt; print ast.literal_eval(escaped_str)\nHello,\nworld!\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 29910,
                        "reputation": 115844,
                        "user_id": 81179,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/7129e23c041e21e15caf3ca6317a0dac?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ChristopheD",
                        "link": "https://stackoverflow.com/users/81179/christophed"
                    },
                    "is_accepted": true,
                    "score": 163,
                    "last_activity_date": 1260493457,
                    "creation_date": 1260493457,
                    "answer_id": 1885197,
                    "question_id": 1885181,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; print '\"Hello,\\\\nworld!\"'.decode('string_escape')\n\"Hello,\nworld!\"\n</code></pre>\n"
                }
            ]
        },
        {
            "1623039": [
                {
                    "owner": {
                        "account_id": 2184368,
                        "reputation": 10684,
                        "user_id": 1933117,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://i.sstatic.net/iVMZO.png?s=256",
                        "display_name": "Hutch",
                        "link": "https://stackoverflow.com/users/1933117/hutch"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1401547550,
                    "score": 0,
                    "last_activity_date": 1401547550,
                    "creation_date": 1401547550,
                    "answer_id": 23971348,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>if you want a nice graphical way to print your call stack in a readable fashion, check out this utility: <a href=\"https://github.com/joerick/pyinstrument\" rel=\"nofollow\">https://github.com/joerick/pyinstrument</a></p>\n\n<p>Run from command line:</p>\n\n<pre><code>python -m pyinstrument myscript.py [args...]\n</code></pre>\n\n<p>Run as a module:</p>\n\n<pre><code>from pyinstrument import Profiler\n\nprofiler = Profiler()\nprofiler.start()\n\n# code you want to profile\n\nprofiler.stop()\nprint(profiler.output_text(unicode=True, color=True))\n</code></pre>\n\n<p>Run with django:</p>\n\n<p>Just add <code>pyinstrument.middleware.ProfilerMiddleware</code> to <code>MIDDLEWARE_CLASSES</code>, then add <code>?profile</code> to the end of the request URL to activate the profiler.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 23202,
                        "reputation": 30354,
                        "user_id": 57952,
                        "user_type": "registered",
                        "accept_rate": 41,
                        "profile_image": "https://www.gravatar.com/avatar/920d3f95a8dfb28d2e716ce91f40105a?s=256&d=identicon&r=PG",
                        "display_name": "Udi",
                        "link": "https://stackoverflow.com/users/57952/udi"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1401314915,
                    "score": 1,
                    "last_activity_date": 1401314915,
                    "creation_date": 1401314915,
                    "answer_id": 23922701,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a full online course called \"<a href=\"http://udacity.com/course/cs259\" rel=\"nofollow\">Software Debugging</a>\" by Andreas Zeller on Udacity, packed with tips about debugging:</p>\n\n<blockquote>\n  <p><strong>Course Summary</strong></p>\n  \n  <p>In this class you will learn how to debug programs systematically, how\n  to automate the debugging process and build several automated\n  debugging tools in Python.</p>\n  \n  <p><strong>Why Take This Course?</strong></p>\n  \n  <p>At the end of this course you will have a solid understanding about\n  systematic debugging, will know how to automate debugging and will\n  have built several functional debugging tools in Python.</p>\n  \n  <p><strong>Prerequisites and Requirements</strong></p>\n  \n  <p>Basic knowledge of programming and Python at the level of Udacity\n  CS101 or better is required. Basic understanding of Object-oriented\n  programming is helpful.</p>\n</blockquote>\n\n<p>Highly recommended.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 85917,
                        "reputation": 20473,
                        "user_id": 239247,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/9d7e611f31c52f4d62bbe279d4f334de?s=256&d=identicon&r=PG",
                        "display_name": "anatoly techtonik",
                        "link": "https://stackoverflow.com/users/239247/anatoly-techtonik"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1393739629,
                    "score": 2,
                    "last_activity_date": 1393739629,
                    "creation_date": 1393739629,
                    "answer_id": 22124393,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you don't like spending time in debuggers (and don't appreciate poor usability of <code>pdb</code> command line interface), you can dump execution <a href=\"http://docs.python.org/2/library/trace.html\" rel=\"nofollow\">trace</a> and analyze it later. For example:</p>\n\n<pre><code>python -m trace -t setup.py install &gt; execution.log\n</code></pre>\n\n<p>This will dump all source line of <code>setup.py install</code> execution to <code>execution.log</code>.</p>\n\n<p>To make it easier to customize trace output and write your own tracers, I put together some pieces of code into <a href=\"https://pypi.python.org/pypi/xtrace\" rel=\"nofollow\">xtrace</a> module (public domain).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76525,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256535363,
                    "score": 33,
                    "last_activity_date": 1367385895,
                    "last_edit_date": 1367385895,
                    "creation_date": 1256535363,
                    "answer_id": 1623243,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Logging</strong></p>\n\n<p>Python already has an excellent <a href=\"http://docs.python.org/library/logging.html\" rel=\"noreferrer\"> built-in logging module</a>. You may want to use the <a href=\"http://web.archive.org/web/20120819135307/http://aymanh.com/python-debugging-techniques\" rel=\"noreferrer\">logging template here</a>.</p>\n\n<p>The logging module lets you specify a level of importance; during debugging you can log everything, while during normal operation you might only log critical things.  You can switch things off and on.</p>\n\n<p>Most people just use basic print statements to debug, and then remove the print statements.  It's better to leave them in, but disable them; then, when you have another bug, you can just re-enable everything and look your logs over.</p>\n\n<p>This can be the best possible way to debug programs that need to do things quickly, such as networking programs that need to respond before the other end of the network connection times out and goes away.  You might not have much time to single-step a debugger; but you can just let your code run, and log everything, then pore over the logs and figure out what's really happening.</p>\n\n<p>EDIT: The original URL for the templates was: <a href=\"http://aymanh.com/python-debugging-techniques\" rel=\"noreferrer\">http://aymanh.com/python-debugging-techniques</a></p>\n\n<p>This page is missing so I replaced it with a reference to the snapshot saved at archive.org: <a href=\"http://web.archive.org/web/20120819135307/http://aymanh.com/python-debugging-techniques\" rel=\"noreferrer\">http://web.archive.org/web/20120819135307/http://aymanh.com/python-debugging-techniques</a></p>\n\n<p>In case it disappears again, here are the templates I mentioned.  This is code taken from the blog; I didn't write it.</p>\n\n<pre><code>import logging\nimport optparse\n\nLOGGING_LEVELS = {'critical': logging.CRITICAL,\n                  'error': logging.ERROR,\n                  'warning': logging.WARNING,\n                  'info': logging.INFO,\n                  'debug': logging.DEBUG}\n\ndef main():\n  parser = optparse.OptionParser()\n  parser.add_option('-l', '--logging-level', help='Logging level')\n  parser.add_option('-f', '--logging-file', help='Logging file name')\n  (options, args) = parser.parse_args()\n  logging_level = LOGGING_LEVELS.get(options.logging_level, logging.NOTSET)\n  logging.basicConfig(level=logging_level, filename=options.logging_file,\n                      format='%(asctime)s %(levelname)s: %(message)s',\n                      datefmt='%Y-%m-%d %H:%M:%S')\n\n  # Your program goes here.\n  # You can access command-line arguments using the args variable.\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n\n<p>And here is his explanation of how to use the above.  Again, I don't get the credit for this:</p>\n\n<hr>\n\n<p>By default, the logging module prints critical, error and warning messages. To change this so that all levels are printed, use:</p>\n\n<pre><code>$ ./your-program.py --logging=debug\n</code></pre>\n\n<p>To send log messages to a file called debug.log, use:</p>\n\n<pre><code>$ ./your-program.py --logging-level=debug --logging-file=debug.log\n</code></pre>\n\n<hr>\n"
                },
                {
                    "owner": {
                        "account_id": 426617,
                        "reputation": 16184,
                        "user_id": 807914,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/2c627c10c904578b8ec484abc4bc95cd?s=256&d=identicon&r=PG",
                        "display_name": "coordinate",
                        "link": "https://stackoverflow.com/users/807914/coordinate"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1363694673,
                    "score": 15,
                    "last_activity_date": 1363694673,
                    "creation_date": 1363694673,
                    "answer_id": 15499028,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are familiar with Visual Studio, <a href=\"http://pytools.codeplex.com/\" rel=\"nofollow noreferrer\">Python Tools for Visual Studio</a> is what you look for.</p>\n\n<p><img src=\"https://i.sstatic.net/ikdtQ.png\" alt=\"enter image description here\"></p>\n"
                },
                {
                    "owner": {
                        "account_id": 39643,
                        "reputation": 871,
                        "user_id": 114435,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9c11235202bfe14cc95e2f74ac581558?s=256&d=identicon&r=PG",
                        "display_name": "vinilios",
                        "link": "https://stackoverflow.com/users/114435/vinilios"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1322355079,
                    "score": 16,
                    "last_activity_date": 1322355079,
                    "creation_date": 1322355079,
                    "answer_id": 8282845,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>the obvious way to debug a script</p>\n\n<pre><code>python -m pdb script.py\n</code></pre>\n\n<ul>\n<li>useful when that script raises an exception</li>\n<li>useful when using virtualenv and pdb command is not running with the venvs python version.</li>\n</ul>\n\n<p>if you don't know exactly where that script is</p>\n\n<pre><code>python -m pdb ``which &lt;python-script-name&gt;``\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32277,
                        "reputation": 187494,
                        "user_id": 89391,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=256&d=identicon&r=PG",
                        "display_name": "miku",
                        "link": "https://stackoverflow.com/users/89391/miku"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1308609973,
                    "score": 78,
                    "last_activity_date": 1308609973,
                    "creation_date": 1308609973,
                    "answer_id": 6418428,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://pypi.python.org/pypi/pudb\" rel=\"noreferrer\">http://pypi.python.org/pypi/pudb</a>, a full-screen, console-based Python debugger.</p>\n\n<blockquote>\n  <p>Its goal is to provide all the niceties of modern GUI-based debuggers in a more lightweight and keyboard-friendly package. PuDB allows you to debug code right where you write and test it \u2013 in a terminal. If you've worked with the excellent (but nowadays ancient) DOS-based Turbo Pascal or C tools, PuDB's UI might look familiar.</p>\n</blockquote>\n\n<p><img src=\"https://i.sstatic.net/fZiaP.png\" alt=\"pudb screenshot\"></p>\n\n<p>Nice for debugging standalone scripts, just run</p>\n\n<pre><code>python -m pudb.run my-script.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 95876,
                        "reputation": 8584,
                        "user_id": 260897,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c4b2ac9e191dd7e75cdd08daab29c3ba?s=256&d=identicon&r=PG",
                        "display_name": "Jacek Konieczny",
                        "link": "https://stackoverflow.com/users/260897/jacek-konieczny"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1267177295,
                    "score": 4,
                    "last_activity_date": 1267177295,
                    "creation_date": 1267177295,
                    "answer_id": 2340646,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Defining useful <strong>repr</strong>() methods for your classes (so you can see what an object is) and using repr() or \"%r\" % (...) or \"...{0!r}..\".format(...) in your debug messages/logs is IMHO a key to efficient debugging. </p>\n\n<p>Also, the debuggers mentioned in other answers will make use of the <strong>repr</strong>() methods.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55284,
                        "reputation": 118319,
                        "user_id": 165495,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://graph.facebook.com/219001761/picture?type=large",
                        "display_name": "Casebash",
                        "link": "https://stackoverflow.com/users/165495/casebash"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256531691,
                    "score": 20,
                    "last_activity_date": 1267176016,
                    "last_edit_date": 1495542852,
                    "creation_date": 1256531691,
                    "answer_id": 1623095,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It is possible to print what <a href=\"http://www.dalkescientific.com/writings/diary/archive/2005/04/20/tracing_python_code.html\" rel=\"nofollow noreferrer\">Python lines are executed</a> (thanks Geo!). This has any number of applications, for example, you could modify it to check when particular functions are called or add something like ## make it only track particular lines.</p>\n\n<p>code.interact takes you into a interactive console</p>\n\n<pre><code>import code; code.interact(local=locals())\n</code></pre>\n\n<p>If you want to be able to easily access your console history look at: \"<a href=\"http://norvig.com/python-iaq.html\" rel=\"nofollow noreferrer\">Can I have a history mechanism like in the shell?</a>\" (will have to look down for it).</p>\n\n<p>Auto-complete can be enabled for the <a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python/168270#168270\">interpreter</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 44762,
                        "reputation": 341037,
                        "user_id": 131527,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG",
                        "display_name": "ghostdog74",
                        "link": "https://stackoverflow.com/users/131527/ghostdog74"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1256531557,
                    "score": 139,
                    "last_activity_date": 1265295438,
                    "last_edit_date": 1265295438,
                    "creation_date": 1256531557,
                    "answer_id": 1623085,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong><a href=\"http://docs.python.org/library/pdb.html\" rel=\"noreferrer\">PDB</a></strong></p>\n\n<p>You can use the pdb module, insert <code>pdb.set_trace()</code> anywhere and it will function as a breakpoint.</p>\n\n<pre><code>&gt;&gt;&gt; import pdb\n&gt;&gt;&gt; a=\"a string\"\n&gt;&gt;&gt; pdb.set_trace()\n--Return--\n&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None\n(Pdb) p a\n'a string'\n(Pdb)\n</code></pre>\n\n<p>To continue execution use <code>c</code> (or <code>cont</code> or <code>continue</code>).</p>\n\n<p>It is possible to execute arbitrary Python expressions using pdb. For example, if you find a mistake, you can correct the code, then type a type expression to have the same effect in the running code</p>\n\n<p>ipdb is a version of pdb for <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"noreferrer\">IPython</a>. It allows the use of pdb with all the IPython features including tab completion.</p>\n\n<p>It is also possible to <a href=\"http://code.activestate.com/recipes/65287/\" rel=\"noreferrer\">set pdb to automatically run</a> on an uncaught exception.</p>\n\n<p><a href=\"http://bashdb.sourceforge.net/pydb/\" rel=\"noreferrer\">Pydb</a> was written to be an enhanced version of Pdb. Benefits?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55284,
                        "reputation": 118319,
                        "user_id": 165495,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://graph.facebook.com/219001761/picture?type=large",
                        "display_name": "Casebash",
                        "link": "https://stackoverflow.com/users/165495/casebash"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256768268,
                    "score": 2,
                    "last_activity_date": 1256769131,
                    "last_edit_date": 1495542352,
                    "creation_date": 1256768268,
                    "answer_id": 1640482,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Getting a stack trace from a running Python application</strong></p>\n\n<p>There are several tricks <a href=\"https://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application\">here</a>. These include</p>\n\n<ul>\n<li>Breaking into an interpreter/printing a stack trace by sending a signal</li>\n<li>Getting a stack trace out of an unprepared Python process</li>\n<li>Running the interpreter with flags to make it useful for debugging</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 16316,
                        "reputation": 165692,
                        "user_id": 35364,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/f11512869fe2f8d87a2f2b687b76686c?s=256&d=identicon&r=PG",
                        "display_name": "hasen",
                        "link": "https://stackoverflow.com/users/35364/hasen"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256530767,
                    "score": 17,
                    "last_activity_date": 1256618670,
                    "last_edit_date": 1256618670,
                    "creation_date": 1256530767,
                    "answer_id": 1623048,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><code>print</code> statements</p>\n\n<ul>\n<li>Some people recommend a <code>debug_print</code> function instead of print for easy disabling</li>\n<li>The <code>pprint</code> module is invaluable for complex structures</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75297,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256539715,
                    "score": 12,
                    "last_activity_date": 1256557634,
                    "last_edit_date": 1256557634,
                    "creation_date": 1256539715,
                    "answer_id": 1623405,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://winpdb.org/\" rel=\"noreferrer\">Winpdb</a> is very nice, and contrary to its name it's completely cross-platform.</p>\n\n<p>It's got a very nice prompt-based <em>and</em> GUI debugger, and supports remote debugging.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8083,
                        "reputation": 374652,
                        "user_id": 14343,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
                        "display_name": "Ned Batchelder",
                        "link": "https://stackoverflow.com/users/14343/ned-batchelder"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256552195,
                    "score": 40,
                    "last_activity_date": 1256552195,
                    "creation_date": 1256552195,
                    "answer_id": 1624037,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you are using pdb, you can define aliases for shortcuts.  I use these:</p>\n\n<pre><code># Ned's .pdbrc\n\n# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.\nalias p_ for k in sorted(%1.keys()): print \"%s%-15s= %-80.80s\" % (\"%2\",k,repr(%1[k]))\n\n# Print the instance variables of a thing.\nalias pi p_ %1.__dict__ %1.\n\n# Print the instance variables of self.\nalias ps pi self\n\n# Print the locals.\nalias pl p_ locals() local:\n\n# Next and list, and step and list.\nalias nl n;;l\nalias sl s;;l\n\n# Short cuts for walking up and down the stack\nalias uu u;;u\nalias uuu u;;u;;u\nalias uuuu u;;u;;u;;u\nalias uuuuu u;;u;;u;;u;;u\nalias dd d;;d\nalias ddd d;;d;;d\nalias dddd d;;d;;d;;d\nalias ddddd d;;d;;d;;d;;d\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4892,
                        "reputation": 29282,
                        "user_id": 7581,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/6b3407202ad40e256721bbfb877481e8?s=256&d=identicon&r=PG",
                        "display_name": "itsadok",
                        "link": "https://stackoverflow.com/users/7581/itsadok"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256537232,
                    "score": 15,
                    "last_activity_date": 1256540539,
                    "last_edit_date": 1256540539,
                    "creation_date": 1256537232,
                    "answer_id": 1623315,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>PyDev</strong></p>\n\n<p><a href=\"http://pydev.org/\" rel=\"noreferrer\">PyDev</a> has a pretty good interactive debugger. It has watch expressions, hover-to-evaluate, thread and stack listings and (almost) all the usual amenities you expect from a modern visual debugger. You can even attach to a running process and do remote debugging.</p>\n\n<p>Like other visual debuggers, though, I find it useful mostly for simple problems, or for very complicated problems after I've tried everything else. I still do most of the heavy lifting with logging.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 27199,
                        "reputation": 154054,
                        "user_id": 71522,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/f0e286ba0482e57904e89e753a4b36e6?s=256&d=identicon&r=PG",
                        "display_name": "David Wolever",
                        "link": "https://stackoverflow.com/users/71522/david-wolever"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256537962,
                    "score": 7,
                    "last_activity_date": 1256537962,
                    "creation_date": 1256537962,
                    "answer_id": 1623340,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In Vim, I have these three bindings:</p>\n\n<pre><code>map &lt;F9&gt; Oimport rpdb2; rpdb2.start_embedded_debugger(\"asdf\") #BREAK&lt;esc&gt;\nmap &lt;F8&gt; Ofrom nose.tools import set_trace; set_trace() #BREAK&lt;esc&gt;\nmap &lt;F7&gt; Oimport traceback, sys; traceback.print_exception(*sys.exc_info()) #TRACEBACK&lt;esc&gt;\n</code></pre>\n\n<p><code>rpdb2</code> is a Remote Python Debugger, which can be used with WinPDB, a solid graphical debugger. Because I know you'll ask, it can do everything I expect a graphical debugger to do :)</p>\n\n<p>I use <code>pdb</code> from <code>nose.tools</code> so that I can debug unit tests as well as normal code.</p>\n\n<p>Finally, the <code>F7</code> mapping will print a traceback (similar to the kind you get when an exception bubbles to the top of the stack). I've found it really useful more than a few times.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18587,
                        "reputation": 1067,
                        "user_id": 42706,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/880d901d6473c6210dd0ba16bca571a2?s=256&d=identicon&r=PG",
                        "display_name": "themis",
                        "link": "https://stackoverflow.com/users/42706/themis"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256532131,
                    "score": 1,
                    "last_activity_date": 1256532131,
                    "creation_date": 1256532131,
                    "answer_id": 1623110,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When possible, I debug using <code>M-x pdb</code> in emacs for source level debugging.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 16862,
                        "reputation": 14939,
                        "user_id": 37181,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/edcdfd5affb524e0f88ec1a00ed3fe5d?s=256&d=identicon&r=PG",
                        "display_name": "Alex Gaynor",
                        "link": "https://stackoverflow.com/users/37181/alex-gaynor"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1256531613,
                    "score": 19,
                    "last_activity_date": 1256531613,
                    "creation_date": 1256531613,
                    "answer_id": 1623090,
                    "question_id": 1623039,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>ipdb is like pdb, with the awesomeness of ipython.</p>\n"
                }
            ]
        },
        {
            "714242": [
                {
                    "owner": {
                        "account_id": 72386,
                        "reputation": 6014,
                        "user_id": 209019,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/39500ec1a4ab1dc912f232194141c34e?s=256&d=identicon&r=PG",
                        "display_name": "Joschua",
                        "link": "https://stackoverflow.com/users/209019/joschua"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1269602269,
                    "last_edit_date": 1269602269,
                    "creation_date": 1266619995,
                    "answer_id": 2300176,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I'm sorry to disappoint you, but when you read <a href=\"http://www.python.org/dev/peps/pep-3146/\" rel=\"noreferrer\">PEP 3146</a> things look bad.</p>\n\n<p>The improvement is by now minimal and therfore the compiler-code gets more complicated.\nAlso removing the GIL has many downsides.</p>\n\n<p>Btw. PyPy seems to be faster then Unladen Swallow in <a href=\"http://morepypy.blogspot.com/2010/03/hello.html\" rel=\"noreferrer\">some tests</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 54721,
                        "reputation": 7469,
                        "user_id": 163809,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/8LugB.jpg?s=256",
                        "display_name": "Stedy",
                        "link": "https://stackoverflow.com/users/163809/stedy"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1262893176,
                    "creation_date": 1262893176,
                    "answer_id": 2023103,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Guido just posted an article to his twitter account that is an update to the Jesse Noller article posted earlier.  <a href=\"http://jessenoller.com/2010/01/06/unladen-swallow-python-3s-best-feature/\" rel=\"nofollow noreferrer\">http://jessenoller.com/2010/01/06/unladen-swallow-python-3s-best-feature/</a>.  Sounds like they are moving ahead as previously mentioned with python 3.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1089,
                        "reputation": 18064,
                        "user_id": 1447,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/23d82ea2162e72a5d0fd124d88141d2a?s=256&d=identicon&r=PG",
                        "display_name": "David Locke",
                        "link": "https://stackoverflow.com/users/1447/david-locke"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1261429791,
                    "last_edit_date": 1261429791,
                    "creation_date": 1238771668,
                    "answer_id": 714383,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think the project has noble goals and with enough time (2-3 years), they will probably reach most of them.</p>\n\n<p>They may not be able to merge their branch back into the trunk because Guido's current view is that cpython should be a reference implementation (ie. it shouldn't do things that are impossible for IronPython and jython to copy.)  I've seen reports that this is what kept the cool parts of stackless from being merged into cpython.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4968,
                        "reputation": 7847,
                        "user_id": 7743,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/2d3c00ac7272c33d84be8e310b95e93c?s=256&d=identicon&r=PG",
                        "display_name": "Jeroen Dirks",
                        "link": "https://stackoverflow.com/users/7743/jeroen-dirks"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1238780160,
                    "creation_date": 1238780160,
                    "answer_id": 714920,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think that a 5 times speed improvement is not all that important for me personally.</p>\n\n<p>It is not an order of magnitude change. Although if you consume CPU power at the scale of Google it can be a worth while investment to have some of your staff work on it.</p>\n\n<p>Many of the speed improvements will likely make it into cpython eventually.</p>\n\n<p>Getting rid of the GIL is interesting in principle but will likely reveal lots of problems with modules that are not thread safe once the GIL is removed.</p>\n\n<p>I do not think I will use Unladen Swallow any time soon but like how giving attention to performance may improve the regular Python versions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 21100,
                        "reputation": 38139,
                        "user_id": 51025,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=256&d=identicon&r=PG",
                        "display_name": "DNS",
                        "link": "https://stackoverflow.com/users/51025/dns"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1238775428,
                    "last_edit_date": 1495539936,
                    "creation_date": 1238775428,
                    "answer_id": 714644,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://stackoverflow.com/questions/695370/what-is-llvm-and-how-is-replacing-python-vm-with-llvm-increasing-speeds-5x\">This question</a> discussed many of the same things.  My opinion is that it sounds great, but I'm waiting to see what it looks like, and how long it takes to become stable.</p>\n\n<p>I'm particularly concerned with compatibility with existing code and libraries, and how the library-writing community responds to it.  Ultimately, aside from personal hobby projects, it's of zero value to me until it can run all my third-party libraries.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22496,
                        "reputation": 86899,
                        "user_id": 55562,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/f91ec1ab77d5686f50037ee176ee1d84?s=256&d=identicon&r=PG",
                        "display_name": "lprsd",
                        "link": "https://stackoverflow.com/users/55562/lprsd"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1238772023,
                    "creation_date": 1238772023,
                    "answer_id": 714415,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>They have a quarterly release. So not far away, wait and watch, let them come up with some thing more than just a plan.</p>\n\n<p>If it indeed comes to be true, easy to do away with C and C++ even for performance intensive operations.</p>\n\n<p>Even tho' it is a Google sponsored Open Source project, surprisingly doesn't involve Guido anywhere.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30850,
                        "reputation": 5572,
                        "user_id": 84380,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2fac3149fc98fba434e14456101e02eb?s=256&d=identicon&r=PG",
                        "display_name": "thedz",
                        "link": "https://stackoverflow.com/users/84380/thedz"
                    },
                    "is_accepted": true,
                    "score": 17,
                    "last_activity_date": 1238771629,
                    "creation_date": 1238771629,
                    "answer_id": 714380,
                    "question_id": 714242,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I have high hopes for it.</p>\n\n<ol>\n<li><p>This is being worked on by several people from Google.  Seeing as how the BDFL is also employed there, this is a positive.</p></li>\n<li><p>Off the bat, they state that this is a branch, and not a fork.  As such, it's within the realm of possibility that this will eventually get merged into trunk.</p></li>\n<li><p>Most importantly, <strong>they have a working version</strong>.  They're using a version of unladen swallow <strong>right now</strong> for Youtube stuff.</p></li>\n</ol>\n\n<p>They seem to have their shit together.  They have a relatively detailed plan for a project at this stage, and they have a list of tests they use to gauge performance improvements and regressions.</p>\n\n<p>I'm not holding my breath on GIL removal, but even if they never get around to that, the speed increases alone make it awesome.</p>\n"
                }
            ]
        },
        {
            "5334531": [
                {
                    "owner": {
                        "account_id": 296559,
                        "reputation": 28600,
                        "user_id": 601581,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/87945c64969674b52fd9412edde91885?s=256&d=identicon&r=PG",
                        "display_name": "Steven",
                        "link": "https://stackoverflow.com/users/601581/steven"
                    },
                    "is_accepted": true,
                    "score": 234,
                    "last_activity_date": 1668733336,
                    "last_edit_date": 1668733336,
                    "creation_date": 1300366947,
                    "answer_id": 5339352,
                    "question_id": 5334531,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Have a look at the <a href=\"http://docutils.sourceforge.net/rst.html\" rel=\"nofollow noreferrer\">reStructuredText</a> (also known as &quot;reST&quot;) format, which is a plaintext/docstring markup format, and probably the most popular in the Python world. And you should certainly look at <a href=\"http://sphinx-doc.org\" rel=\"nofollow noreferrer\">Sphinx</a>, a tool to generate documentation from reStructuredText (used for eg. the Python documentation itself). Sphinx includes the possibility to extract documentation from the docstrings in your code (see <a href=\"http://sphinx-doc.org/ext/autodoc.html\" rel=\"nofollow noreferrer\">sphinx.ext.autodoc</a>), and recognizes reST <a href=\"http://sphinx-doc.org/domains.html#info-field-lists\" rel=\"nofollow noreferrer\">field lists</a> following certain conventions. This has probably become (or is becoming) the most popular way to do it.</p>\n<p>Your example could look as follows:</p>\n<pre><code>&quot;&quot;&quot;Replace template placeholder with values.\n\n:param timestamp: formatted date to display\n:param priority: priority number\n:param priority_name: priority name\n:param message: message to display\n:returns: formatted string\n&quot;&quot;&quot;\n</code></pre>\n<p>Or extended with type information:</p>\n<pre><code>&quot;&quot;&quot;Replace template placeholder with values.\n\n:param timestamp: formatted date to display\n:type timestamp: str or unicode\n:param priority: priority number\n:type priority: str or unicode\n:param priority_name: priority name\n:type priority_name: str or unicode\n:param message: message to display\n:type message: str or unicode\n:returns: formatted string\n:rtype: str or unicode\n&quot;&quot;&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4845818,
                        "reputation": 2602,
                        "user_id": 3909469,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/2cf27cd4d8888c0dfe782da605ab2ab9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "confused00",
                        "link": "https://stackoverflow.com/users/3909469/confused00"
                    },
                    "is_accepted": false,
                    "score": 79,
                    "last_activity_date": 1539606818,
                    "last_edit_date": 1539606818,
                    "creation_date": 1417450253,
                    "answer_id": 27232448,
                    "question_id": 5334531,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Follow <a href=\"https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings\" rel=\"noreferrer\">Google Python Style Guide</a>. Note that Sphinx can also parse this format using the <a href=\"http://sphinxcontrib-napoleon.readthedocs.org/en/latest/\" rel=\"noreferrer\">Napolean</a> extension, which will come packaged with Sphinx 1.3 (this is also compatible with <a href=\"https://www.python.org/dev/peps/pep-0257/\" rel=\"noreferrer\">PEP257</a>):</p>\n\n<pre><code>def func(arg1, arg2):\n    \"\"\"Summary line.\n\n    Extended description of function.\n\n    Args:\n        arg1 (int): Description of arg1\n        arg2 (str): Description of arg2\n\n    Returns:\n        bool: Description of return value\n\n    \"\"\"\n    return True\n</code></pre>\n\n<p><em>Example taken from the Napolean documentation linked above.</em></p>\n\n<p>A comprehensive example on all types of docstrings <a href=\"http://sphinxcontrib-napoleon.readthedocs.org/en/latest/example_google.html\" rel=\"noreferrer\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 431516,
                        "reputation": 17253,
                        "user_id": 815632,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/0309bb55fa6f8ddfe21d28d634e44674?s=256&d=identicon&r=PG",
                        "display_name": "David Cain",
                        "link": "https://stackoverflow.com/users/815632/david-cain"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1342668663,
                    "creation_date": 1342668663,
                    "answer_id": 11553514,
                    "question_id": 5334531,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Take a look at <a href=\"http://docs.python.org/devguide/documenting.html\" rel=\"nofollow\">Documenting Python</a>, a page \"aimed at authors and potential authors of documentation for Python.\"</p>\n\n<p>In short, <a href=\"http://docutils.sourceforge.net/rst.html\" rel=\"nofollow\">reStructuredText</a> is what's used for documenting Python itself. The developer's guide contains a reST primer, style guide, and general advice for writing good documentation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 315753,
                        "reputation": 19299,
                        "user_id": 631586,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/47a4a177ca77dc75837720ca43b1d4d8?s=256&d=identicon&r=PG",
                        "display_name": "srgerg",
                        "link": "https://stackoverflow.com/users/631586/srgerg"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1300333632,
                    "last_edit_date": 1300333632,
                    "creation_date": 1300333214,
                    "answer_id": 5334625,
                    "question_id": 5334531,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The standard for python documentation strings is described in <a href=\"http://www.python.org/dev/peps/pep-0257/\">Python Enhancement Proposal 257</a>.</p>\n\n<p>The appropriate comment for your method would be something like</p>\n\n<pre><code>def format(...):\n    \"\"\"Return timestamp string with place holders replaced with values.\n\n    Keyword arguments:\n    timestamp     -- the format string (default '')\n    priority      -- priority number (default '')\n    priority_name -- priority name (default '')\n    message       -- message to display (default '')\n    \"\"\"\n</code></pre>\n"
                }
            ]
        },
        {
            "14681609": [
                {
                    "owner": {
                        "account_id": 26277368,
                        "reputation": 11,
                        "user_id": 19946305,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3795052394d45e79b1de9d52f9261042?s=256&d=identicon&r=PG",
                        "display_name": "CrypticCoder",
                        "link": "https://stackoverflow.com/users/19946305/crypticcoder"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1662610855,
                    "creation_date": 1662610855,
                    "answer_id": 73643695,
                    "question_id": 14681609,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>not as elegant and pretty specific to yours, but you create 2 lists (every other integer) and zip/list them back together.</p>\n<pre><code>full_list = [0, 1, 2, 3]\nlist1 = []\nlist2 = []\nfor i in full_list:\n  if i % 2 == 0:\n    list1.append(i)\n  else:\n    list2.append(i)\n\nzip_list = zip(list1, list2)\ndone = list(zip_list)\n\noutput:\n[(0, 1), (2, 3)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 342731,
                        "reputation": 360850,
                        "user_id": 674039,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://i.sstatic.net/leoFi.gif?s=256",
                        "display_name": "wim",
                        "link": "https://stackoverflow.com/users/674039/wim"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1359961215,
                    "creation_date": 1359961215,
                    "answer_id": 14681777,
                    "question_id": 14681609,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you should use numpy, which is purpose-built for working with matrices/arrays, rather than a list of lists.  That would look like this:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; list_ = [0,1,2,3]\n&gt;&gt;&gt; a = np.array(list_).reshape(2,2)\n&gt;&gt;&gt; a\narray([[0, 1],\n       [2, 3]])\n&gt;&gt;&gt; a.shape\n(2, 2)\n</code></pre>\n\n<p>Avoid calling a variable <code>list</code> as it shadows the built-in name.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1236018,
                        "reputation": 80146,
                        "user_id": 1199589,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/d3c6a7f974f5d687a394415a2122c6b6?s=256&d=identicon&r=PG",
                        "display_name": "root",
                        "link": "https://stackoverflow.com/users/1199589/root"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1359960701,
                    "creation_date": 1359960701,
                    "answer_id": 14681687,
                    "question_id": 14681609,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try something like that:</p>\n\n<pre><code>In [53]: l = [0,1,2,3]\n\nIn [54]: def to_matrix(l, n):\n    ...:     return [l[i:i+n] for i in xrange(0, len(l), n)]\n\nIn [55]: to_matrix(l,2)\nOut[55]: [[0, 1], [2, 3]]\n</code></pre>\n"
                }
            ]
        },
        {
            "1164810": [
                {
                    "owner": {
                        "account_id": 9193,
                        "reputation": 345892,
                        "user_id": 16883,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/0382297f273df0a544b0c6c2734de096?s=256&d=identicon&r=PG",
                        "display_name": "Michael Borgwardt",
                        "link": "https://stackoverflow.com/users/16883/michael-borgwardt"
                    },
                    "is_accepted": true,
                    "score": 34,
                    "last_activity_date": 1486467728,
                    "last_edit_date": 1486467728,
                    "creation_date": 1248264845,
                    "answer_id": 1164847,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<blockquote>\n  <p>I'm aware of the Jython project, but\n  it looks like this represents a way to\n  use Java and its libraries from within\n  Python, rather than the other way\n  round - am I wrong about this?</p>\n</blockquote>\n\n<p>Yes, you are wrong. You can either <a href=\"http://www.jython.org/docs/using/cmdline.html\" rel=\"noreferrer\">call a command line interpreter</a> to run python code using Jyton or <a href=\"http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html#using-jython-within-java-applications\" rel=\"noreferrer\">use python code from Java</a>. In the past there was also a python-to-Java compiler, but it got discontinued with Jython 2.2</p>\n"
                },
                {
                    "owner": {
                        "account_id": 47434,
                        "reputation": 5571,
                        "user_id": 140467,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/HMN7z.jpg?s=256",
                        "display_name": "Mikael Gueck",
                        "link": "https://stackoverflow.com/users/140467/mikael-gueck"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1248284724,
                    "creation_date": 1248284724,
                    "answer_id": 1167003,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Remember to first check from those paying for the development that they're OK with the codebase needing a developer who knows both Python and Java from now on, and other cost and maintainability effects you've undoubtedly already accounted for.</p>\n\n<p>See: <a href=\"http://www.acm.org/about/se-code\" rel=\"nofollow noreferrer\">http://www.acm.org/about/se-code</a> 1.06, 2.03, 2.09, 4.03, 4.05, 6.07</p>\n"
                },
                {
                    "owner": {
                        "account_id": 41109,
                        "reputation": 674,
                        "user_id": 119399,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0712dc182847d310baab088228011f47?s=256&d=identicon&r=PG",
                        "display_name": "Carlos Santos",
                        "link": "https://stackoverflow.com/users/119399/carlos-santos"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1248276077,
                    "creation_date": 1248276077,
                    "answer_id": 1166065,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I don't think you could use NLTK from Jython, since it depends on Numpy which isn't ported to the JVM. If you need NLTK or any other native CPython extension, you might consider using some IPC mechanism to communicate between CPython and the JVM. That being said, there is a project to allow calling CPython from Java, called Jepp:</p>\n\n<p><a href=\"http://jepp.sourceforge.net/\" rel=\"noreferrer\">http://jepp.sourceforge.net/</a></p>\n\n<p>The reverse (calling Java code from CPython) is the goal of JPype and javaclass:</p>\n\n<p>sourceforge.net/projects/jpype/</p>\n\n<p>pypi.python.org/pypi/javaclass/0.1</p>\n\n<p>I've never used any of these project, so I cant't vow for their quality.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18953,
                        "reputation": 37584,
                        "user_id": 43927,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8c41ddf8372ced51b47d3d7e215342b3?s=256&d=identicon&r=PG",
                        "display_name": "rob",
                        "link": "https://stackoverflow.com/users/43927/rob"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1248265792,
                    "creation_date": 1248265792,
                    "answer_id": 1164913,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>IN my opinion, Jython is exactly what you are looking at.<br>\nIt is an <em>implementation</em> of Python within the JVM; as such, you can freely exchange objects and, for instance, inherit from a Java class (with some limitations).  </p>\n\n<p>Note that, its major strength point (being on top of of JVM) is also its major drawback, because it cannot use all (C)Python extension written in C (or in any other compiled language); this may have an impact on what you are willing to do with your text processing.</p>\n\n<p>For more information about what is Jython, its potential and its limitations, I suggest you reading the <a href=\"http://wiki.python.org/jython/JythonFaq\" rel=\"nofollow noreferrer\">Jython FAQ</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6358,
                        "reputation": 391374,
                        "user_id": 10661,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG",
                        "display_name": "S.Lott",
                        "link": "https://stackoverflow.com/users/10661/s-lott"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1248265466,
                    "last_edit_date": 1248265466,
                    "creation_date": 1248264631,
                    "answer_id": 1164828,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Simply run the Python interpreter as a subprocess from within Java.</p>\n\n<p>Write your Python functionality as a proper script, which reads from stdin and writes to stdout.</p>\n\n<p>Use the Java <code>Runtime</code> class to spawn a subprocess that runs your Python script.  This is very simple to do and provides a very clean interface.</p>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<pre><code>import simplejson\nimport sys\nfor request in sys.stdin.readlines():\n    args = simplejson.loads( request )\n    result = myFunction( args['this'], args['that'] )\n    sys.stdout.writeline( simplejson.dumps( result ) + \"\\n\" )\n</code></pre>\n\n<p>The interface is simple, structured and very low overhead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30450,
                        "reputation": 8164,
                        "user_id": 83075,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/3f75c26671ae636dea2d0aac39946665?s=256&d=identicon&r=PG",
                        "display_name": "Mia Clarke",
                        "link": "https://stackoverflow.com/users/83075/mia-clarke"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1248264749,
                    "creation_date": 1248264749,
                    "answer_id": 1164841,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would write a Python module to handle the text and language processing, and then build a small bridge in jython that your java program can interact with. The jython bridge will be a very simple one, that's really only responsible for forwarding calls to the python module, and return the answer from the python module to the java module. Jython is really easy to use, and setup shouldn't take you more than 15 minutes. </p>\n\n<p>Best of luck!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18399,
                        "reputation": 39546,
                        "user_id": 42126,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/17fa4a777eb1dddf1a2c8a81a266b1e8?s=256&d=identicon&r=PG",
                        "display_name": "kdgregory",
                        "link": "https://stackoverflow.com/users/42126/kdgregory"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1248264703,
                    "creation_date": 1248264703,
                    "answer_id": 1164837,
                    "question_id": 1164810,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Jython is a Python implementation running on the JVM. You can find information about embedding Python in an existing Java app in the <a href=\"http://wiki.python.org/jython/UserGuide#embedding-jython\" rel=\"nofollow noreferrer\">user guide</a>.</p>\n\n<p>I don't know the environment that you're working in, but be aware that mixing languages in the same app can quickly lead to a mess. I recommend creating Java interfaces to represent the operations that you plan to use, along with separately-packaged implementation classes that wrap the Python code.</p>\n"
                }
            ]
        },
        {
            "20170251": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": true,
                    "score": 116,
                    "last_activity_date": 1619857751,
                    "last_edit_date": 1619857751,
                    "creation_date": 1385259256,
                    "answer_id": 20170306,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Yes, you can use a <code>while True:</code> loop that never breaks to run Python code continually.</p>\n<p>However, you will need to put the code you want to run continually <em>inside</em> the loop:</p>\n<pre><code>#!/usr/bin/python\n\nwhile True:\n    # some python code that I want \n    # to keep on running\n</code></pre>\n<p>Also, <a href=\"https://docs.python.org/library/time.html#time.sleep\" rel=\"noreferrer\"><code>time.sleep</code></a> is used to <em>suspend</em> the operation of a script for a period of time.  So, since you want yours to run continually, I don't see why you would use it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14420650,
                        "reputation": 99,
                        "user_id": 10416754,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hz1NV.jpg?s=256",
                        "display_name": "Akhilesh",
                        "link": "https://stackoverflow.com/users/10416754/akhilesh"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1616789258,
                    "last_edit_date": 1616789258,
                    "creation_date": 1616788718,
                    "answer_id": 66823544,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you mean run as service then you can use any rest framework</p>\n<pre><code>from flask import Flask\nclass A:\n    def one(port):\n        app = Flask(__name__)\n        app.run(port = port)\n        \n</code></pre>\n<p>call it:</p>\n<pre><code>one(port=1001)\n</code></pre>\n<p>it will always keep listening on 1001</p>\n<pre><code> * Running on http://127.0.0.1:1001/ (Press CTRL+C to quit)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5713162,
                        "reputation": 593,
                        "user_id": 4514402,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/de800eae60f9e5f85d7ddfb9353a0b47?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "A J Brockberg",
                        "link": "https://stackoverflow.com/users/4514402/a-j-brockberg"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1583913596,
                    "creation_date": 1583913596,
                    "answer_id": 60631484,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I know this is too old thread but why no one mentioned this</p>\n\n<pre><code>#!/usr/bin/python3\nimport asyncio \n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_forever()\nfinally:\n    loop.close()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 74199,
                        "reputation": 10735,
                        "user_id": 213307,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/63Hwd.png?s=256",
                        "display_name": "Rian Rizvi",
                        "link": "https://stackoverflow.com/users/213307/rian-rizvi"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1532815456,
                    "creation_date": 1532815456,
                    "answer_id": 51575601,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have a small script <em>interruptableloop.py</em> that runs the code at an interval (default 1sec), it pumps out a message to the screen while it's running, and traps an interrupt signal that you can send with CTL-C:</p>\n\n<pre><code>#!/usr/bin/python3\nfrom interruptableLoop import InterruptableLoop\n\nloop=InterruptableLoop(intervalSecs=1) # redundant argument\nwhile loop.ShouldContinue():\n   # some python code that I want \n   # to keep on running\n   pass\n</code></pre>\n\n<p>When you run the script and then interrupt it you see this output, (the periods pump out on every pass of the loop):</p>\n\n<pre><code>[py36]$ ./interruptexample.py\nCTL-C to stop   (or $kill -s SIGINT pid)\n......^C\nExiting at  2018-07-28 14:58:40.359331\n</code></pre>\n\n<p><strong>interruptableLoop.py</strong>:</p>\n\n<pre><code>\"\"\"\n    Use to create a permanent loop that can be stopped ...\n\n    ... from same terminal where process was started and is running in foreground: \n        CTL-C\n\n    ... from same user account but through a different terminal \n        $ kill -2 &lt;pid&gt; \n        or $ kill -s SIGINT &lt;pid&gt;\n\n\"\"\"\nimport signal\nimport time\nfrom datetime import datetime as dtt\n__all__=[\"InterruptableLoop\",]\nclass InterruptableLoop:\n    def __init__(self,intervalSecs=1,printStatus=True):\n        self.intervalSecs=intervalSecs\n        self.shouldContinue=True\n        self.printStatus=printStatus\n        self.interrupted=False\n        if self.printStatus:\n            print (\"CTL-C to stop\\t(or $kill -s SIGINT pid)\")\n        signal.signal(signal.SIGINT, self._StopRunning)\n        signal.signal(signal.SIGQUIT, self._Abort)\n        signal.signal(signal.SIGTERM, self._Abort)\n\n    def _StopRunning(self, signal, frame):\n        self.shouldContinue = False\n\n    def _Abort(self, signal, frame):\n        raise \n\n    def ShouldContinue(self):\n        time.sleep(self.intervalSecs)\n        if self.shouldContinue and self.printStatus: \n            print( \".\",end=\"\",flush=True)\n        elif not self.shouldContinue and self.printStatus:\n            print (\"Exiting at \",dtt.now())\n        return self.shouldContinue\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10176442,
                        "reputation": 636,
                        "user_id": 7514932,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/tWONG.png?s=256",
                        "display_name": "Balaji.J.B",
                        "link": "https://stackoverflow.com/users/7514932/balaji-j-b"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1530962530,
                    "creation_date": 1530962530,
                    "answer_id": 51222684,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is the complete syntax, </p>\n\n<pre><code>#!/usr/bin/python3\n\nimport time \n\ndef your_function():\n    print(\"Hello, World\")\n\nwhile True:\n    your_function()\n    time.sleep(10) #make function to sleep for 10 seconds\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8942808,
                        "reputation": 547,
                        "user_id": 6671246,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ebe2d5f6bdfe9d6902bda6924204a73a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "NIEL Alexandre",
                        "link": "https://stackoverflow.com/users/6671246/niel-alexandre"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1504517487,
                    "last_edit_date": 1504517487,
                    "creation_date": 1504516647,
                    "answer_id": 46033920,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>sleep is a good way to avoid overload on the cpu</p>\n\n<p>not sure if it's really clever, but I usually use</p>\n\n<pre><code>while(not sleep(5)):\n    #code to execute\n</code></pre>\n\n<p>sleep method always returns None.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3138398,
                        "reputation": 634,
                        "user_id": 5080353,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7503da5c6426c2e8d9400881319f4c65?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "roarsneer",
                        "link": "https://stackoverflow.com/users/5080353/roarsneer"
                    },
                    "is_accepted": false,
                    "score": 48,
                    "last_activity_date": 1477558440,
                    "last_edit_date": 1477558440,
                    "creation_date": 1437619085,
                    "answer_id": 31577274,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about this one?</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import signal\nsignal.pause()\n</code></pre>\n\n<p>This will let your program sleep until it receives a signal from some other process (or itself, in another thread), letting it know it is time to do something.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1051495,
                        "reputation": 2404,
                        "user_id": 1055323,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/66e9ad41f28493d1d3942d0bd299d64d?s=256&d=identicon&r=PG",
                        "display_name": "gnr",
                        "link": "https://stackoverflow.com/users/1055323/gnr"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1447864741,
                    "creation_date": 1447864741,
                    "answer_id": 33785549,
                    "question_id": 20170251,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>for OS's that support <code>select</code>:</p>\n\n<pre><code>import select\n\n# your code\n\nselect.select([], [], [])\n</code></pre>\n"
                }
            ]
        },
        {
            "22586895": [
                {
                    "owner": {
                        "account_id": 72325,
                        "reputation": 68619,
                        "user_id": 208880,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/de311342220232e618cb27c9936ab9bf?s=256&d=identicon&r=PG",
                        "display_name": "Ethan Furman",
                        "link": "https://stackoverflow.com/users/208880/ethan-furman"
                    },
                    "is_accepted": true,
                    "score": 92,
                    "last_activity_date": 1572355700,
                    "last_edit_date": 1572355700,
                    "creation_date": 1395595611,
                    "answer_id": 22594360,
                    "question_id": 22586895,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n  <p>1. When and where to use enums?</p>\n</blockquote>\n\n<ul>\n<li>When you have a variable that takes one of a limited set of possible values.</li>\n</ul>\n\n<p>For example, the days of the week:</p>\n\n<pre><code>class Weekday(Enum):\n    MONDAY = 1\n    TUESDAY = 2\n    WEDNESDAY = 3\n    THURSDAY = 4\n    FRIDAY = 5\n    SATURDAY = 6\n    SUNDAY = 7\n</code></pre>\n\n<blockquote>\n  <p>2. Why do we need enum?  What are the advantages?</p>\n</blockquote>\n\n<ul>\n<li><p>Enums are advantageous because they give a name to a constant, which makes code more readable; and because the individual members cannot be rebound, making Python Enums semi-constant (because the <code>Enum</code> itself could still be rebound).</p></li>\n<li><p>Besides more readable code, debugging is also easier as you see a name along with the value, not just the value</p></li>\n<li><p>Desired behavior can be added to Enums</p></li>\n</ul>\n\n<p>For example, as anyone who has worked with the <a href=\"http://docs.python.org/3/library/datetime.html#module-datetime\" rel=\"noreferrer\">datetime</a> module knows, <code>datetime</code> and <code>date</code> have two different representations for the days of the week: 0-6 or 1-7.  Rather than keep track of that ourselves we can add a method to the <code>Weekday</code> enum to extract the day from the <code>datetime</code> or <code>date</code> instance and return the matching enum member:</p>\n\n<pre><code>    @classmethod\n    def from_date(cls, date):\n        return cls(date.isoweekday())\n</code></pre>\n\n<blockquote>\n  <p>3. What exactly is Enum?</p>\n</blockquote>\n\n<ul>\n<li><p>Enum is a <a href=\"http://docs.python.org/3/library/functions.html?highlight=type#type\" rel=\"noreferrer\">type</a>, whose members are named constants, that all belong to (or should) a logical group of values.  So far I have created <code>Enum</code>s for:</p>\n\n<pre><code>- the days of the week\n- the months of the year\n- US Federal Holidays in a year\n</code></pre></li>\n</ul>\n\n<p><code>FederalHoliday</code> is my most complex; it uses <a href=\"https://stackoverflow.com/a/19330461/208880\">this recipe</a>, and has methods to return the actual date the holiday takes place on for the year given, the next business day if the day in question is a holiday (or the range of days skipped includes the holiday or weekends), and the complete set of dates for a year.  Here it is:</p>\n\n<pre><code>class FederalHoliday(AutoEnum):\n    NewYear = \"First day of the year.\", 'absolute', Month.JANUARY, 1\n    MartinLutherKingJr = \"Birth of Civil Rights leader.\", 'relative', Month.JANUARY, Weekday.MONDAY, 3\n    President = \"Birth of George Washington\", 'relative', Month.FEBRUARY, Weekday.MONDAY, 3\n    Memorial = \"Memory of fallen soldiers\", 'relative', Month.MAY, Weekday.MONDAY, 5\n    Independence = \"Declaration of Independence\", 'absolute', Month.JULY, 4\n    Labor = \"American Labor Movement\", 'relative', Month.SEPTEMBER, Weekday.MONDAY, 1\n    Columbus = \"Americas discovered\", 'relative', Month.OCTOBER, Weekday.MONDAY, 2\n    Veterans = \"Recognition of Armed Forces service\", 'relative', Month.NOVEMBER, 11, 1\n    Thanksgiving = \"Day of Thanks\", 'relative', Month.NOVEMBER, Weekday.THURSDAY, 4\n    Christmas = \"Birth of Jesus Christ\", 'absolute', Month.DECEMBER, 25\n\n    def __init__(self, doc, type, month, day, occurrence=None):\n        self.__doc__ = doc\n        self.type = type\n        self.month = month\n        self.day = day\n        self.occurrence = occurrence\n\n    def date(self, year):\n        \"returns the observed date of the holiday for `year`\"\n        if self.type == 'absolute' or isinstance(self.day, int):\n            holiday =  Date(year, self.month, self.day)\n            if Weekday(holiday.isoweekday()) is Weekday.SUNDAY:\n                holiday = holiday.replace(delta_day=1)\n            return holiday\n        days_in_month = days_per_month(year)\n        target_end = self.occurrence * 7 + 1\n        if target_end &gt; days_in_month[self.month]:\n            target_end = days_in_month[self.month]\n        target_start = target_end - 7\n        target_week = list(xrange(start=Date(year, self.month, target_start), step=one_day, count=7))\n        for holiday in target_week:\n            if Weekday(holiday.isoweekday()) is self.day:\n                return holiday\n\n    @classmethod\n    def next_business_day(cls, date, days=1):\n        \"\"\"\n        Return the next `days` business day from date.\n        \"\"\"\n        holidays = cls.year(date.year)\n        years = set([date.year])\n        while days &gt; 0:\n            date = date.replace(delta_day=1)\n            if date.year not in years:\n                holidays.extend(cls.year(date.year))\n                years.add(date.year)\n            if Weekday(date.isoweekday()) in (Weekday.SATURDAY, Weekday.SUNDAY) or date in holidays:\n                continue\n            days -= 1\n        return date\n\n    @classmethod\n    def year(cls, year):\n        \"\"\"\n        Return a list of the actual FederalHoliday dates for `year`.\n        \"\"\"\n        holidays = []\n        for fh in cls:\n            holidays.append(fh.date(year))\n        return holidays\n</code></pre>\n\n<hr>\n\n<p><strong>Notes</strong>:</p>\n\n<ul>\n<li><p><code>Date</code> is from <a href=\"https://pypi.python.org/pypi/dbf\" rel=\"noreferrer\">my dbf package</a></p></li>\n<li><p>the enhanced <code>xrange</code> (supporting a range of dates) is also custom, but I don't think I have included it anywhere; I'll stuff it in my <code>dbf</code> package next time I tinker with it.</p></li>\n<li><p>Disclosure:  I am the author of the <a href=\"https://docs.python.org/3/library/enum.html\" rel=\"noreferrer\">Python stdlib <code>Enum</code></a>, the <a href=\"https://pypi.python.org/pypi/enum34\" rel=\"noreferrer\"><code>enum34</code> backport</a>, and the <a href=\"https://pypi.python.org/pypi/aenum\" rel=\"noreferrer\">Advanced Enumeration (<code>aenum</code>)</a>  library.</p></li>\n</ul>\n"
                }
            ]
        },
        {
            "21808657": [
                {
                    "owner": {
                        "account_id": 920922,
                        "reputation": 22849,
                        "user_id": 952648,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c85487802cc06d71bf6b7d739685f4bd?s=256&d=identicon&r=PG",
                        "display_name": "tom",
                        "link": "https://stackoverflow.com/users/952648/tom"
                    },
                    "is_accepted": true,
                    "score": 60,
                    "last_activity_date": 1612676686,
                    "last_edit_date": 1612676686,
                    "creation_date": 1392540497,
                    "answer_id": 21809081,
                    "question_id": 21808657,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>Update: Python 3</h2>\n<p>In Python 3, Unicode strings are the default. The type <code>str</code> is a collection of Unicode code points, and the type <code>bytes</code> is used for representing collections of 8-bit integers (often interpreted as ASCII characters).</p>\n<p>Here is the code from the question, updated for Python 3:</p>\n<pre><code>&gt;&gt;&gt; my_str = 'A unicode \\u018e string \\xf1' # no need for &quot;u&quot; prefix\n# the escape sequence &quot;\\u&quot; denotes a Unicode code point (in hex)\n&gt;&gt;&gt; my_str\n'A unicode \u018e string \u00f1'\n# the Unicode code points U+018E and U+00F1 were displayed\n# as their corresponding glyphs\n&gt;&gt;&gt; my_bytes = my_str.encode('utf-8') # convert to a bytes object\n&gt;&gt;&gt; my_bytes\nb'A unicode \\xc6\\x8e string \\xc3\\xb1'\n# the &quot;b&quot; prefix means a bytes literal\n# the escape sequence &quot;\\x&quot; denotes a byte using its hex value\n# the code points U+018E and U+00F1 were encoded as 2-byte sequences\n&gt;&gt;&gt; my_str2 = my_bytes.decode('utf-8') # convert back to str\n&gt;&gt;&gt; my_str2 == my_str\nTrue\n</code></pre>\n<p>Working with files:</p>\n<pre><code>&gt;&gt;&gt; f = open('foo.txt', 'r') # text mode (Unicode)\n&gt;&gt;&gt; # the platform's default encoding (e.g. UTF-8) is used to decode the file\n&gt;&gt;&gt; # to set a specific encoding, use open('foo.txt', 'r', encoding=&quot;...&quot;)\n&gt;&gt;&gt; for line in f:\n&gt;&gt;&gt;     # here line is a str object\n\n&gt;&gt;&gt; f = open('foo.txt', 'rb') # &quot;b&quot; means binary mode (bytes)\n&gt;&gt;&gt; for line in f:\n&gt;&gt;&gt;     # here line is a bytes object\n</code></pre>\n<h2>Historical answer: Python 2</h2>\n<p>In Python 2, the <code>str</code> type was a collection of 8-bit characters (like Python 3's <code>bytes</code> type). The English alphabet can be represented using these 8-bit characters, but symbols such as \u03a9, \u0438, \u00b1, and \u2660 cannot.</p>\n<p><strong>Unicode</strong> is a standard for working with a wide range of characters. Each symbol has a code point (a number), and these code points can be encoded (converted to a sequence of bytes) using a variety of encodings.</p>\n<p><strong>UTF-8</strong> is one such encoding. The low code points are encoded using a single byte, and higher code points are encoded as sequences of bytes.</p>\n<p>To allow working with Unicode characters, Python 2 has a <code>unicode</code> type which is a collection of Unicode code points (like Python 3's <code>str</code> type). The line <code>ustring = u'A unicode \\u018e string \\xf1'</code> creates a Unicode string with 20 characters.</p>\n<p>When the Python interpreter displays the value of <code>ustring</code>, it escapes two of the characters (\u018e and \u00f1) because they are not in the standard printable range.</p>\n<p>The line <code>s = unistring.encode('utf-8')</code> encodes the Unicode string using UTF-8. This converts each code point to the appropriate byte or sequence of bytes. The result is a collection of bytes, which is returned as a <code>str</code>. The size of <code>s</code> is 22 bytes, because two of the characters have high code points and are encoded as a sequence of two bytes rather than a single byte.</p>\n<p>When the Python interpreter displays the value of <code>s</code>, it escapes four bytes that are not in the printable range (<code>\\xc6</code>, <code>\\x8e</code>, <code>\\xc3</code>, and <code>\\xb1</code>). The two pairs of bytes are not treated as single characters like before because <code>s</code> is of type <code>str</code>, not <code>unicode</code>.</p>\n<p>The line <code>t = unicode(s, 'utf-8')</code> does the opposite of <code>encode()</code>. It reconstructs the original code points by looking at the bytes of <code>s</code> and parsing byte sequences. The result is a Unicode string.</p>\n<p>The call to <code>codecs.open()</code> specifies <code>utf-8</code> as the encoding, which tells Python to interpret the contents of the file (a collection of bytes) as a Unicode string that has been encoded using UTF-8.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3881645,
                        "reputation": 80,
                        "user_id": 3213966,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b7b3cdef17c448c4ce2c488d4c7253ee?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Renjith Nair",
                        "link": "https://stackoverflow.com/users/3213966/renjith-nair"
                    },
                    "is_accepted": false,
                    "score": -5,
                    "last_activity_date": 1392537274,
                    "creation_date": 1392537274,
                    "answer_id": 21808676,
                    "question_id": 21808657,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python supports the string type and the unicode type. A string is a sequence of chars while a unicode is a sequence of \"pointers\". The unicode is an in-memory representation of the sequence and every symbol on it is not a char but a number (in hex format) intended to select a char in a map. <strong>So a unicode var does not have encoding because it does not contain chars.</strong></p>\n"
                }
            ]
        },
        {
            "13248020": [
                {
                    "owner": {
                        "account_id": 1853886,
                        "reputation": 212925,
                        "user_id": 1679863,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/f54e86d83eea6143ecc70a485f4e6044?s=256&d=identicon&r=PG",
                        "display_name": "Rohit Jain",
                        "link": "https://stackoverflow.com/users/1679863/rohit-jain"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1673735729,
                    "last_edit_date": 1673735729,
                    "creation_date": 1352194130,
                    "answer_id": 13248071,
                    "question_id": 13248020,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have used them in <code>C</code>, then they are almost same as were in <code>C</code>.</p>\n<p>From the <a href=\"http://www.manpagez.com/man/3/fopen/\" rel=\"nofollow noreferrer\">manpage</a> of <code>fopen()</code> function:</p>\n<blockquote>\n<ul>\n<li><strong><code>r+</code> : -</strong>   Open for reading and writing.  The stream is positioned at the beginning of the file.<br /><br /></li>\n<li><strong><code>a+</code> : -</strong>   Open for reading and writing.  The file is created if it does not exist.  The stream is positioned at the end of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening <code>fseek(3)</code> or similar.</li>\n</ul>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 1299340,
                        "reputation": 145221,
                        "user_id": 1249581,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/yANBN.jpg?s=256",
                        "display_name": "VisioN",
                        "link": "https://stackoverflow.com/users/1249581/vision"
                    },
                    "is_accepted": true,
                    "score": 83,
                    "last_activity_date": 1352196785,
                    "last_edit_date": 1352196785,
                    "creation_date": 1352194084,
                    "answer_id": 13248062,
                    "question_id": 13248020,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python opens files <a href=\"http://docs.python.org/2/library/functions.html#open\" rel=\"noreferrer\">almost</a> in the same way <a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/fopen.3.html\" rel=\"noreferrer\">as in C</a>:</p>\n\n<ul>\n<li><p><code>r+</code>  Open for reading and writing. The stream is positioned at the beginning of the file.</p></li>\n<li><p><code>a+</code>  Open for reading and appending (writing at end of file). <strong>The file is created if it does not exist.</strong> The initial file position for reading is at the beginning of the file, but output is appended to the end of the file (but in some Unix systems regardless of the current seek position).</p></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 80529,
                        "reputation": 454402,
                        "user_id": 227665,
                        "user_type": "registered",
                        "accept_rate": 33,
                        "profile_image": "https://www.gravatar.com/avatar/ccc83a013527c186c03ea3a475552813?s=256&d=identicon&r=PG",
                        "display_name": "codaddict",
                        "link": "https://stackoverflow.com/users/227665/codaddict"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1352194123,
                    "creation_date": 1352194123,
                    "answer_id": 13248068,
                    "question_id": 13248020,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One difference is for <code>r+</code> if the files does not exist, it'll not be created and open fails. But in case of <code>a+</code> the file will be created if it does not exist.</p>\n"
                }
            ]
        },
        {
            "2631189": [
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1546346722,
                    "last_edit_date": 1546346722,
                    "creation_date": 1271175647,
                    "answer_id": 2631256,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The one often-quoted is:</p>\n\n<pre><code>zip(*[iter(l)] * 2)\n</code></pre>\n\n<hr>\n\n<p>I prefer this more readable version of the <code>iter</code> solution:</p>\n\n<pre><code>it = iter(l)\nlist(zip(it, it))\n# [(1, 2), (3, 4), (5, 6)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 163865,
                        "reputation": 21023,
                        "user_id": 386279,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=256&d=identicon&r=PG",
                        "display_name": "beardc",
                        "link": "https://stackoverflow.com/users/386279/beardc"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1439314676,
                    "creation_date": 1439314676,
                    "answer_id": 31948416,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://toolz.readthedocs.org/\" rel=\"nofollow\">toolz</a> is a well-built library with many functional programming niceties overlooked in itertools. <a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.partition\" rel=\"nofollow\"><code>partition</code></a> solves this (with an option to pad the last entry for lists of odd length)</p>\n\n<pre><code>&gt;&gt;&gt; list(toolz.partition(2, [1,2,3,4,5,6]))\n[(1, 2), (3, 4), (5, 6)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 42135,
                        "reputation": 37337,
                        "user_id": 122683,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a414150a10bd70bfb5be0ba6b045e82?s=256&d=identicon&r=PG",
                        "display_name": "moshez",
                        "link": "https://stackoverflow.com/users/122683/moshez"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1271200136,
                    "creation_date": 1271200136,
                    "answer_id": 2633816,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The right thing is probably not to compute lists, but to write an iterator->iterator function. This is more generic -- it works on every iterable, and if you want to \"freeze\" it into a list, you can use the \"list()\" function.</p>\n\n<pre><code>def groupElements(iterable, n):\n    # For your case, you can hardcode n=2, but I wanted the general case here.\n    # Also, you do not specify what to do if the \n    # length of the list is not divisible by 2\n    # I chose here to drop such elements\n    source = iter(iterable)\n    while True:\n        l = []\n        for i in range(n):\n            l.append(source.next())\n        yield tuple(l)\n</code></pre>\n\n<p>I'm surprised the itertools module does not already have a function for that -- perhaps a future revision. Until then, feel free to use the version above :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55718,
                        "reputation": 17808,
                        "user_id": 166921,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/2af8cc3459a9a18e4376aaf0f8151bf5?s=256&d=identicon&r=PG",
                        "display_name": "Kamil Szot",
                        "link": "https://stackoverflow.com/users/166921/kamil-szot"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1271192909,
                    "creation_date": 1271192909,
                    "answer_id": 2633212,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you don't want to lose elements if their number in list is not even try this:</p>\n\n<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; [(l[i],  l[i+1] if i+1 &lt; len(l) else None)  for i in range(0, len(l), 2)]\n[(1, 2), (3, 4), (5, None)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9916,
                        "reputation": 1897,
                        "user_id": 18501,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/d1e7f41bdeac8d415c65979ba9c6f2ff?s=256&d=identicon&r=PG",
                        "display_name": "prasanna",
                        "link": "https://stackoverflow.com/users/18501/prasanna"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1271175751,
                    "score": 4,
                    "last_activity_date": 1271176237,
                    "last_edit_date": 1271176237,
                    "creation_date": 1271175751,
                    "answer_id": 2631268,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>try this</p>\n\n<pre><code>def pairs(l, n):\n    return zip(*[l[i::n] for i in range(n)])\n</code></pre>\n\n<p>So,</p>\n\n<p><code>pairs([1, 2, 3, 4], 2)</code>\ngives</p>\n\n<pre><code>[(1, 2), (3, 4)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 65561,
                        "reputation": 76475,
                        "user_id": 192839,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/GNPsv.jpg?s=256",
                        "display_name": "Mike Graham",
                        "link": "https://stackoverflow.com/users/192839/mike-graham"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1271175819,
                    "creation_date": 1271175819,
                    "answer_id": 2631275,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I usually copy the <code>grouper</code> recipe from the <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\">itertools</a> documentation into my code for this.</p>\n\n<pre><code>def grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 110007,
                        "reputation": 10834,
                        "user_id": 291280,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/5ea3f0de48c164262cb00e37b6e67a30?s=256&d=identicon&r=PG",
                        "display_name": "Isaac",
                        "link": "https://stackoverflow.com/users/291280/isaac"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1271175403,
                    "creation_date": 1271175403,
                    "answer_id": 2631227,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How about using the step feature of <code>range()</code>:</p>\n\n<pre><code>[(l[n],l[n+1]) for n in range(0,len(l),2)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11369,
                        "reputation": 280725,
                        "user_id": 21886,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=256&d=identicon&r=PG",
                        "display_name": "RichieHindle",
                        "link": "https://stackoverflow.com/users/21886/richiehindle"
                    },
                    "is_accepted": true,
                    "score": 90,
                    "last_activity_date": 1271175358,
                    "creation_date": 1271175358,
                    "answer_id": 2631222,
                    "question_id": 2631189,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>This will do it a bit more neatly:</p>\n\n<pre><code>&gt;&gt;&gt; data = [1,2,3,4,5,6]\n&gt;&gt;&gt; zip(data[0::2], data[1::2])\n[(1, 2), (3, 4), (5, 6)]\n</code></pre>\n\n<p>(but it's arguably less readable if you're not familiar with the \"stride\" feature of ranges).</p>\n\n<p>Like your code, it discards the last value where you have an odd number of values.</p>\n"
                }
            ]
        },
        {
            "22914587": [
                {
                    "owner": {
                        "account_id": 451158,
                        "reputation": 250259,
                        "user_id": 846892,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/E9dZn.png?s=256",
                        "display_name": "Ashwini Chaudhary",
                        "link": "https://stackoverflow.com/users/846892/ashwini-chaudhary"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1396879509,
                    "last_edit_date": 1396879509,
                    "creation_date": 1396879178,
                    "answer_id": 22914631,
                    "question_id": 22914587,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.count\"><code>itertools.count</code></a> for this.</p>\n\n<pre><code>for x in itertools.count():\n    # do something with x infinite times\n</code></pre>\n\n<p>If you don't want to use the integer returned by <code>count()</code>, then better use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.repeat\"><code>itertools.repeat</code></a>:</p>\n\n<pre><code>for _ in itertools.repeat(None):\n     # do something infinite times\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2734060,
                        "reputation": 277765,
                        "user_id": 2357112,
                        "user_type": "registered",
                        "accept_rate": 26,
                        "profile_image": "https://www.gravatar.com/avatar/3f80897d57525afe9eac4fb8c8318052?s=256&d=identicon&r=PG",
                        "display_name": "user2357112",
                        "link": "https://stackoverflow.com/users/2357112/user2357112"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1396879184,
                    "creation_date": 1396879184,
                    "answer_id": 22914636,
                    "question_id": 22914587,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes. It's <a href=\"https://docs.python.org/2/library/itertools.html#itertools.count\"><code>itertools.count</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; x = itertools.count()\n&gt;&gt;&gt; next(x)\n0\n&gt;&gt;&gt; next(x)\n1\n&gt;&gt;&gt; next(x)\n2\n&gt;&gt;&gt; # And so on...\n</code></pre>\n\n<p>You can specify <code>start</code> and <code>step</code> arguments, though <code>stop</code> isn't an option (that's what <code>xrange</code> is for):</p>\n\n<pre><code>&gt;&gt;&gt; x = itertools.count(3, 5)\n&gt;&gt;&gt; next(x)\n3\n&gt;&gt;&gt; next(x)\n8\n&gt;&gt;&gt; next(x)\n13\n</code></pre>\n"
                }
            ]
        },
        {
            "4228637": [
                {
                    "owner": {
                        "account_id": 33990,
                        "reputation": 461149,
                        "user_id": 95592,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/uMfjc.jpg?s=256",
                        "display_name": "Matthew Rankin",
                        "link": "https://stackoverflow.com/users/95592/matthew-rankin"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1290194956,
                    "score": 118,
                    "last_activity_date": 1711486401,
                    "last_edit_date": 1711486401,
                    "creation_date": 1290194956,
                    "answer_id": 4228643,
                    "question_id": 4228637,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's a list of resources to get started with the Python debugger:</p>\n<ol>\n<li>Read Steve Ferb's article <a href=\"https://web.archive.org/web/20110718104449/http://pythonconquerstheuniverse.wordpress.com/2009/09/10/debugging-in-python/\" rel=\"nofollow noreferrer\">&quot;Debugging in Python&quot;</a></li>\n<li>Watch Eric Holscher's screencast <a href=\"http://ericholscher.com/blog/2008/aug/30/using-pdb-python-debugger-django-debugging-series-/\" rel=\"nofollow noreferrer\">&quot;Using pdb, the Python Debugger&quot;</a></li>\n<li>Read the <a href=\"http://docs.python.org/library/pdb.html\" rel=\"nofollow noreferrer\">Python documentation for pdb \u2014 The Python Debugger</a></li>\n<li>Read Chapter 9\u2014When You Don't Even Know What to Log: Using Debuggers\u2014of Karen Tracey's <a href=\"https://www.packtpub.com/django-1-1-testing-and-debugging/book\" rel=\"nofollow noreferrer\"><em>Django 1.1 Testing and Debugging</em></a>.</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 23516,
                        "reputation": 26070,
                        "user_id": 58994,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://i.sstatic.net/jLiVF.jpg?s=256",
                        "display_name": "Josh Glover",
                        "link": "https://stackoverflow.com/users/58994/josh-glover"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1299144114,
                    "creation_date": 1299144114,
                    "answer_id": 5178756,
                    "question_id": 4228637,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Synopsis:</p>\n\n<pre><code># epdb1.py -- experiment with the Python debugger, pdb\nimport pdb\na = \"aaa\"\npdb.set_trace()\nb = \"bbb\"\nc = \"ccc\"\nfinal = a + b + c\nprint final\n</code></pre>\n\n<p>Now run your script:</p>\n\n<pre><code>$ python epdb1.py\n(Pdb) p a\n'aaa'\n(Pdb)\n</code></pre>\n"
                }
            ]
        },
        {
            "2164258": [
                {
                    "owner": {
                        "account_id": 25770,
                        "reputation": 2093,
                        "user_id": 66517,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/0acd11a4b348342305e92aedd9962c83?s=256&d=identicon&r=PG",
                        "display_name": "pavpanchekha",
                        "link": "https://stackoverflow.com/users/66517/pavpanchekha"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1653400009,
                    "last_edit_date": 1653400009,
                    "creation_date": 1264790458,
                    "answer_id": 2164275,
                    "question_id": 2164258,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For the example you gave, use default values:</p>\n<pre><code>class City:\n    def __init__(self, name=&quot;Default City Name&quot;):\n        ...\n    ...\n</code></pre>\n<p>In general, you have two options:</p>\n<ol>\n<li><p>Do <code>if</code>-<code>elif</code> blocks based on the type:</p>\n<pre><code>def __init__(self, name):\n    if isinstance(name, str):\n        # todo \n    elif isinstance(name, City):\n        # todo \n    # todo \n</code></pre>\n</li>\n<li><p>Use duck typing - that is, assume the user of your class is intelligent enough to use it correctly. This is typically the preferred option.</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 96396,
                        "reputation": 3448,
                        "user_id": 262026,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ef1c4c224935242b406c0f4cfa51a785?s=256&d=identicon&r=PG",
                        "display_name": "mzz",
                        "link": "https://stackoverflow.com/users/262026/mzz"
                    },
                    "is_accepted": false,
                    "score": 324,
                    "last_activity_date": 1653399946,
                    "last_edit_date": 1653399946,
                    "creation_date": 1264791432,
                    "answer_id": 2164383,
                    "question_id": 2164258,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If your signatures differ only in the <em>number</em> of arguments, using default arguments is the right way to do it. If you want to be able to pass in different <em>kinds</em> of argument, I would try to avoid the <code>isinstance</code>-based approach mentioned in another answer, and instead use keyword arguments.</p>\n<p>If using just keyword arguments becomes unwieldy, you can combine it with classmethods (the bzrlib code likes this approach). This is just a silly example, but I hope you get the idea:</p>\n<pre><code>class C(object):\n\n    def __init__(self, fd):\n        # Assume fd is a file-like object.\n        self.fd = fd\n\n    @classmethod\n    def from_filename(cls, name):\n        return cls(open(name, 'rb'))\n\n# Now you can do:\nc = C(fd)\n# or:\nc = C.from_filename('a filename')\n</code></pre>\n<p>Notice all those class methods still go through the same <code>__init__</code>, but using class methods can be much more convenient than having to remember what combinations of keyword arguments to <code>__init__</code> work.</p>\n<p><code>isinstance</code> is best avoided because Python's duck typing makes it hard to figure out what kind of object was actually passed in. For example: if you want to take either a filename or a file-like object you cannot use <code>isinstance(arg, file)</code>, because there are many file-like objects that do not subclass <code>file</code> (like the ones returned from urllib, or StringIO, or...). It's usually a better idea to just have the caller tell you explicitly what kind of object was meant, by using different keyword arguments.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 75168,
                        "reputation": 7897,
                        "user_id": 215679,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/98ee3226baed4c6c5a322e75851f856e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "telliott99",
                        "link": "https://stackoverflow.com/users/215679/telliott99"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1632564579,
                    "last_edit_date": 1632564579,
                    "creation_date": 1264791639,
                    "answer_id": 2164398,
                    "question_id": 2164258,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://stackoverflow.com/a/2164263/4298200\">answer by Jack M.</a> is correct. Do it this way:</p>\n<pre><code>&gt;&gt;&gt; class City:\n...     def __init__(self, city=None):\n...         self.city = city\n...     def __repr__(self):\n...         if self.city:  return self.city\n...         return ''\n...\n&gt;&gt;&gt; c = City('Berlin')\n&gt;&gt;&gt; print c\nBerlin\n&gt;&gt;&gt; c = City()\n&gt;&gt;&gt; print c\n\n&gt;&gt;&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2455,
                        "reputation": 31900,
                        "user_id": 3421,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/9ecd2f59de5e03ba481723637fc74fad?s=256&d=identicon&r=PG",
                        "display_name": "Jack M.",
                        "link": "https://stackoverflow.com/users/3421/jack-m"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1611869325,
                    "last_edit_date": 1611869325,
                    "creation_date": 1264790392,
                    "answer_id": 2164263,
                    "question_id": 2164258,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest way is through keyword arguments:</p>\n<pre><code>class City():\n  def __init__(self, city=None):\n    pass\n\nsomeCity = City(city=&quot;Berlin&quot;)\n</code></pre>\n<p>This is pretty basic stuff. Maybe look at <a href=\"http://docs.python.org/tutorial/classes.html\" rel=\"nofollow noreferrer\">the Python documentation</a>?</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34355,
                        "reputation": 10333,
                        "user_id": 97076,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/eb8549078b25683eb6f295e4dfc98be6?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Sledge",
                        "link": "https://stackoverflow.com/users/97076/andrew-sledge"
                    },
                    "is_accepted": true,
                    "score": 390,
                    "last_activity_date": 1264790502,
                    "creation_date": 1264790502,
                    "answer_id": 2164279,
                    "question_id": 2164258,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Unlike Java, you cannot define multiple constructors.  However, you can define a default value if one is not passed.</p>\n\n<pre><code>def __init__(self, city=\"Berlin\"):\n  self.city = city\n</code></pre>\n"
                }
            ]
        },
        {
            "18425379": [
                {
                    "owner": {
                        "account_id": 4217867,
                        "reputation": 2246,
                        "user_id": 3453463,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-Eg9i2cQk-vU/AAAAAAAAAAI/AAAAAAAAACQ/0WaR0Sl2wCc/photo.jpg?sz=256",
                        "display_name": "sknight",
                        "link": "https://stackoverflow.com/users/3453463/sknight"
                    },
                    "is_accepted": false,
                    "score": 159,
                    "last_activity_date": 1682454302,
                    "last_edit_date": 1682454302,
                    "creation_date": 1569956908,
                    "answer_id": 58190880,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I encountered this issue as well, so I thought I should post an updated answer. Please note that this will only apply to a Mac-based setup (I haven't tried it with Windows or any flavor of Linux). The simplest way to get this working is to install Python via <a href=\"https://brew.sh/\" rel=\"noreferrer\">Brew</a>. If you don't have brew installed, you will need to do that first. Once installed, do the following in at the terminal:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>brew install python\n</code></pre>\n<p>This will install Python 3. After it's installed, run this:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>ls -l /usr/local/bin/python*\n</code></pre>\n<p>You will see all of the links created by brew to its Python install. It will look something like this:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>lrwxr-xr-x  1 username  admin  36 Oct  1 13:35 /usr/local/bin/python3@ -&gt; ../Cellar/python/3.7.4_1/bin/python3\nlrwxr-xr-x  1 username  admin  43 Oct  1 13:35 /usr/local/bin/python3-config@ -&gt; ../Cellar/python/3.7.4_1/bin/python3-config\nlrwxr-xr-x  1 username  admin  38 Oct  1 13:35 /usr/local/bin/python3.7@ -&gt; ../Cellar/python/3.7.4_1/bin/python3.7\nlrwxr-xr-x  1 username  admin  45 Oct  1 13:35 /usr/local/bin/python3.7-config@ -&gt; ../Cellar/python/3.7.4_1/bin/python3.7-config\nlrwxr-xr-x  1 username  admin  39 Oct  1 13:35 /usr/local/bin/python3.7m@ -&gt; ../Cellar/python/3.7.4_1/bin/python3.7m\nlrwxr-xr-x  1 username  admin  46 Oct  1 13:35 /usr/local/bin/python3.7m-config@ -&gt; ../Cellar/python/3.7.4_1/bin/python3.7m-config\n</code></pre>\n<p>The first row in this example shows the <code>python3</code> symlink. To set it as the default <code>python</code> symlink run the following:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>ln -s -f /usr/local/bin/python3 /usr/local/bin/python\n</code></pre>\n<p>Similarly you can set the pip symlink too</p>\n<pre class=\"lang-bash prettyprint-override\"><code>ln -s -f /usr/local/bin/pip3 /usr/local/bin/pip\n</code></pre>\n<p>You will have to reload your current terminal shell to use the new symlink in that shell. Run this command to reload your shell:</p>\n<pre><code>exec $SHELL -l\n</code></pre>\n<p>You're all set now. Now, you can do:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>which python\n</code></pre>\n<p>and it should show:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>/usr/local/bin/python\n</code></pre>\n<p>All newly opened shell sessions will (should) automatically use the new symlink. To test this, open a new terminal shell and run the following:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>python --version\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4579395,
                        "reputation": 333,
                        "user_id": 3716918,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/cGvwJ.jpg?s=256",
                        "display_name": "Sachitha Dilshan",
                        "link": "https://stackoverflow.com/users/3716918/sachitha-dilshan"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1638716116,
                    "last_edit_date": 1638716116,
                    "creation_date": 1588427879,
                    "answer_id": 61560541,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Mac users just need to run the following code on terminal</p>\n<pre><code>brew switch python 3.X.X\n</code></pre>\n<p><strong>3.x.x</strong> should be the new python version.</p>\n<p>This will update all the system links.</p>\n<p><strong>UPDATE</strong></p>\n<p>For Newer version of MAC use</p>\n<pre><code>brew link python 3.X.X\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9347739,
                        "reputation": 379,
                        "user_id": 6938475,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7dN8c.jpg?s=256",
                        "display_name": "Vikas Pandey",
                        "link": "https://stackoverflow.com/users/6938475/vikas-pandey"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1620392296,
                    "creation_date": 1620392296,
                    "answer_id": 67435399,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is the simplest way from my exp. (if you have brew installed on your mac).</p>\n<p>Try this from your terminal:</p>\n<p><code>brew install python3</code></p>\n<p>and then run the below on your terminal :</p>\n<p><code>ls -l /usr/local/bin/python*</code></p>\n<p><strong>Tip:</strong></p>\n<p>** (<em>note down the python version 3.8 or 3.9 thats displayed on the terminal. This will be required in the next step). for e.g. in my case it was:</em></p>\n<p>lrwxr-xr-x  1 user  admin  24 May  7 14:33 /usr/local/bin/python -&gt; /usr/local/bin/python3.9</p>\n<p>Now run the below command on your terminal:</p>\n<p><code>ln -s -f /usr/local/bin/python3.9 /usr/local/bin/python</code></p>\n<p><em>(where 3.9 is the version displayed on your terminal with the previous command)</em></p>\n<p>Its DONE !</p>\n<p>To test your default version of python:</p>\n<ol>\n<li>close the current terminal or start a new terminal and</li>\n<li>run the below command :</li>\n</ol>\n<p><code>python --version</code></p>\n<p>Happy Coding!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 904898,
                        "reputation": 27725,
                        "user_id": 939986,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/591564c63c9b8b21f9c13cbddb7c000a?s=256&d=identicon&r=PG",
                        "display_name": "Santosh Kumar",
                        "link": "https://stackoverflow.com/users/939986/santosh-kumar"
                    },
                    "is_accepted": true,
                    "score": 665,
                    "last_activity_date": 1614614355,
                    "last_edit_date": 1614614355,
                    "creation_date": 1377403601,
                    "answer_id": 18425592,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Changing the default python executable's version system-wide could break some applications that depend on python2.</p>\n<p>However, you can alias the commands in most shells, Since the default shells in macOS (bash in 10.14 and below; zsh in 10.15) share a similar syntax. You could put\n<code>alias python='python3'</code>\nin your <code>~/.profile</code>, and then source <code>~/.profile</code> in your <code>~/.bash_profile</code> and/or  your<code>~/.zsh_profile</code> with a line like:</p>\n<pre><code>[ -e ~/.profile ] &amp;&amp; . ~/.profile\n</code></pre>\n<p>This way, your alias will work across shells.</p>\n<p>With this, <code>python</code> command now invokes <code>python3</code>. If you want to invoke the &quot;original&quot; python (that refers to <em>python2</em>) on occasion, you can use <code>command python</code>, which will leaving the alias untouched, and works in all shells.</p>\n<p>If you launch interpreters more often <em>(I do)</em>, you can always create more aliases to add as well, i.e.:</p>\n<pre><code>alias 2='python2'\nalias 3='python3'\n</code></pre>\n<hr />\n<p>Tip: For scripts, instead of using a shebang like:</p>\n<pre><code>#!/usr/bin/env python\n</code></pre>\n<p>use:</p>\n<pre><code>#!/usr/bin/env python3\n</code></pre>\n<p>This way, the system will use python3 for running python <em><strong>executables</strong></em>.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user3909192"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1598564599,
                    "last_edit_date": 1598564599,
                    "creation_date": 1554866906,
                    "answer_id": 55604353,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you use macports, you do not need to play with aliases or environment variables, just use the method macports already offers, explained by this Q&amp;A:</p>\n<p><a href=\"https://stackoverflow.com/questions/8201760/how-to-macports-select-python\">How to: Macports select python</a></p>\n<p>TL;DR:</p>\n<pre><code>sudo port select --set python python27\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1636378,
                        "reputation": 3903,
                        "user_id": 1509738,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/HyTWQ.jpg?s=256",
                        "display_name": "ArunDhwaj IIITH",
                        "link": "https://stackoverflow.com/users/1509738/arundhwaj-iiith"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1594314439,
                    "creation_date": 1594314439,
                    "answer_id": 62820080,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h1>On MacOS</h1>\n<p>Step-1: Upgrade python to latest version by:\n$ brew upgrade python</p>\n<p>Step-2: Go to home:\n$ cd </p>\n<p>Step-3: open .bash_profile</p>\n<p>$ vi .bash_profile</p>\n<h1>Setting PATH for Python 3.8</h1>\n<p>PATH=&quot;/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}&quot;\nexport PATH</p>\n<p>Step-4: Save the file. And compile it by:</p>\n<p>$ . .bash_profile</p>\n<p>Step-5: Check the python version:</p>\n<p>$ python -V</p>\n<p>Step-6: Thats all.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9831518,
                        "reputation": 498,
                        "user_id": 7283020,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d85f3ba2b9e130bf528f1c31df01a22f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "jacob",
                        "link": "https://stackoverflow.com/users/7283020/jacob"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1591886940,
                    "creation_date": 1591886940,
                    "answer_id": 62327119,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Suggestions to alias python to python3 will cause problems with virtual environments that set the version of python (eg: pyenv). With pyenv, you can set the version globally like so:</p>\n\n<pre><code>pyenv global 3.8.2\n</code></pre>\n\n<p>and then in any specific project, you can create a .python-version file which has the python version inside of it:</p>\n\n<pre><code>pyenv local 2.7.1\n</code></pre>\n\n<p>This is the best way to manage multiple versions of python on a system in my opinion. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 70834,
                        "reputation": 5681,
                        "user_id": 205049,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4zy3I.png?s=256",
                        "display_name": "oori",
                        "link": "https://stackoverflow.com/users/205049/oori"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1577739365,
                    "creation_date": 1577739365,
                    "answer_id": 59536750,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>$ sudo ln -s -f $(which python3) $(which python)\n</code></pre>\n\n<p>done.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5499769,
                        "reputation": 164,
                        "user_id": 4369465,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-V0Ybj7XCSTk/AAAAAAAAAAI/AAAAAAAAAHk/ioeHtObIvsQ/photo.jpg?sz=256",
                        "display_name": "Tor_Gash",
                        "link": "https://stackoverflow.com/users/4369465/tor-gash"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1570016120,
                    "creation_date": 1570016120,
                    "answer_id": 58200684,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Well... It's kinda old. But still deserves a good answer. </p>\n\n<p>And the good one is <strong>You Don't Wanna Touch The Default Python On Mac.</strong></p>\n\n<p>Install any Python version you need via Homebrew or whatever and use it in virtualenv. Virtualenv is often considered to be something crap-like, but it's still way, wayyyy better than changing python version system-wide (macOS is likely to protect itself from such actions) or user-wide, bash-wide... whatever. Just forget about the default Python. Using playgrounds like venv is what your OS will be most, very most grateful for. </p>\n\n<p>The case is, for example, many modern Linux distributions get rid of Python2 installed out-of-the-box, leaving only Python3 in the system. But everytime you try to install something old with python2 as a dependency... hope you understand what I mean. A good developer doesn't care. Good developers create clean playgrounds with python version they desire. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 10777408,
                        "reputation": 19,
                        "user_id": 7928911,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1467485896652535/picture?type=large",
                        "display_name": "Clark So",
                        "link": "https://stackoverflow.com/users/7928911/clark-so"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1563189853,
                    "last_edit_date": 1563189853,
                    "creation_date": 1563187220,
                    "answer_id": 57038010,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using macports, that has a easier way to do:</p>\n\n<p>run:</p>\n\n<p><i><code>port install python37</code></i></p>\n\n<p>after install, set default:</p>\n\n<p><i><code>sudo port select --set python python37</code></i></p>\n\n<p><i><code>sudo port select --set python3 python37</code></i></p>\n\n<p>restart your cmd window, finished.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3913929,
                        "reputation": 1088,
                        "user_id": 3238384,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://i.sstatic.net/opNj4.jpg?s=256",
                        "display_name": "toadead",
                        "link": "https://stackoverflow.com/users/3238384/toadead"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1562009946,
                    "creation_date": 1562009946,
                    "answer_id": 56841522,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This worked for me. I added <strong>alias</strong> and restarted my <strong>terminal</strong>:</p>\n\n<pre><code>alias python=/usr/local/bin/python3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4454134,
                        "reputation": 2073,
                        "user_id": 3625007,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/yBSuQ.jpg?s=256",
                        "display_name": "Ananta Chandra Das",
                        "link": "https://stackoverflow.com/users/3625007/ananta-chandra-das"
                    },
                    "is_accepted": false,
                    "score": 166,
                    "last_activity_date": 1554476718,
                    "creation_date": 1554476718,
                    "answer_id": 55538407,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Open <strong>~/.bash_profile</strong> file.</p>\n\n<pre><code>vi ~/.bash_profile\n</code></pre>\n\n<p>Then put the alias as follows:</p>\n\n<pre><code>alias python='python3'\n</code></pre>\n\n<p>Now save the file and then run the <strong>~/.bash_profile</strong> file.</p>\n\n<pre><code>source ~/.bash_profile\n</code></pre>\n\n<p>Congratulation !!! Now, you can use python3 by typing <strong>python</strong>.</p>\n\n<pre><code>python --version\n</code></pre>\n\n<p>Python 3.7.3</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7691566,
                        "reputation": 484,
                        "user_id": 5827669,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/2HHR0.jpg?s=256",
                        "display_name": "ChamCham",
                        "link": "https://stackoverflow.com/users/5827669/chamcham"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1549977663,
                    "creation_date": 1549977663,
                    "answer_id": 54651038,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For me the solution was using PyCharm and setting the default python version to the the one that i need to work with.</p>\n\n<p>install PyCharm and go to file ==> preferences for new project, then choose the interpreter you want for your projects, in this case python 3.3</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6952525,
                        "reputation": 2120,
                        "user_id": 5334697,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Am44B.jpg?s=256",
                        "display_name": "Aditya Malviya",
                        "link": "https://stackoverflow.com/users/5334697/aditya-malviya"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1547717972,
                    "creation_date": 1547717972,
                    "answer_id": 54232936,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Go to terminal type:</p>\n\n<pre><code>alias python=python3.x\n</code></pre>\n\n<p>This will setup default python as python3.x</p>\n"
                },
                {
                    "owner": {
                        "account_id": 196751,
                        "reputation": 3165,
                        "user_id": 440362,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/4159795ef834ca840c87efea77cecdee?s=256&d=identicon&r=PG",
                        "display_name": "Mayank Jain",
                        "link": "https://stackoverflow.com/users/440362/mayank-jain"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1546721897,
                    "creation_date": 1546721897,
                    "answer_id": 54056192,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The following worked for me</p>\n\n<pre><code>cd /usr/local/bin\nmv python python.old\nln -s python3 python\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7298107,
                        "reputation": 2249,
                        "user_id": 5562041,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/2ab9c2f3a599d6582cee8bb95dbcbd7e?s=256&d=identicon&r=PG",
                        "display_name": "E_K",
                        "link": "https://stackoverflow.com/users/5562041/e-k"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1531855428,
                    "creation_date": 1531855428,
                    "answer_id": 51388853,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using a <code>virtualenvwrapper</code>, you can just locate it using <code>which virtualenvwrapper.sh</code>, then open it using <code>vim</code> or any other editor then change the following </p>\n\n<pre><code># Locate the global Python where virtualenvwrapper is installed.\nif [ \"${VIRTUALENVWRAPPER_PYTHON:-}\" = \"\" ]\nthen\n    VIRTUALENVWRAPPER_PYTHON=\"$(command \\which python)\"\nfi\n</code></pre>\n\n<p>Change the line <code>VIRTUALENVWRAPPER_PYTHON=\"$(command \\which python)\"</code> to <code>VIRTUALENVWRAPPER_PYTHON=\"$(command \\which python3)\"</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2575591,
                        "reputation": 54240,
                        "user_id": 2487184,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/d8cd1dea84cfe8312c532088a0da08e8?s=256&d=identicon&r=PG",
                        "display_name": "CT Zhu",
                        "link": "https://stackoverflow.com/users/2487184/ct-zhu"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1531144037,
                    "last_edit_date": 1531144037,
                    "creation_date": 1377401541,
                    "answer_id": 18425392,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Go to 'Applications', enter 'Python' folder, there should be a bash script called 'Update Shell Profile.command' or similar. Run that script and it should do it.</p>\n\n<p>Update: It looks like you should not update it: <a href=\"https://stackoverflow.com/questions/5846167/how-to-change-default-python-version\">how to change default python version?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1800016,
                        "reputation": 3373,
                        "user_id": 1638590,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/1b48f4a9ac79db0c1f506a74b8087788?s=256&d=identicon&r=PG",
                        "display_name": "Mr. Crowley",
                        "link": "https://stackoverflow.com/users/1638590/mr-crowley"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1519915376,
                    "creation_date": 1519915376,
                    "answer_id": 49052131,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I believe most of people landed here are using ZSH thorugh iterm or whatever, and that brings you to <a href=\"https://superuser.com/a/847543\">this answer</a>.</p>\n\n<p>You have to add/modify your commands in <code>~/.zshrc</code> instead. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 2934583,
                        "reputation": 5123,
                        "user_id": 2513872,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/wJbZu.png?s=256",
                        "display_name": "Shin Kim",
                        "link": "https://stackoverflow.com/users/2513872/shin-kim"
                    },
                    "is_accepted": false,
                    "score": 237,
                    "last_activity_date": 1510865365,
                    "last_edit_date": 1510865365,
                    "creation_date": 1470498566,
                    "answer_id": 38806058,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can solve it by symbolic link.</p>\n\n<pre><code>unlink /usr/local/bin/python\nln -s /usr/local/bin/python3.3 /usr/local/bin/python\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3533679,
                        "reputation": 353,
                        "user_id": 2952523,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://www.gravatar.com/avatar/a5476c4368bf47c0a3eee2e4c9099206?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "doubleOK",
                        "link": "https://stackoverflow.com/users/2952523/doubleok"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1428694089,
                    "creation_date": 1428694089,
                    "answer_id": 29569296,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think when you install python it puts export path statements into your ~/.bash_profile file. So if you do not intend to use Python 2 anymore you can just remove that statement from there. Alias as stated above is also a great way to do it.</p>\n\n<p>Here is how to remove the reference from ~/.bash_profile \n- vim ./.bash_profile\n- remove the reference (AKA something like: export PATH=\"/Users/bla/anaconda:$PATH\")\n- save and exit\n- source ./.bash_profile to save the changes</p>\n"
                },
                {
                    "owner": {
                        "account_id": 344029,
                        "reputation": 4916,
                        "user_id": 676102,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/c61b1abf00a198c71982e38640aad3c5?s=256&d=identicon&r=PG",
                        "display_name": "Vorticity",
                        "link": "https://stackoverflow.com/users/676102/vorticity"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1377408663,
                    "creation_date": 1377408663,
                    "answer_id": 18426035,
                    "question_id": 18425379,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm not sure if this is available on OS X, but on linux I would make use of the <code>module</code> command.  <a href=\"http://linux.die.net/man/1/module\" rel=\"nofollow\">See here</a>.</p>\n\n<p>Set up the modulefile correctly, then add something like this to your rc file (e.g. ~/.bashrc):</p>\n\n<pre><code>module load python3.3\n</code></pre>\n\n<p>This will make it so that your paths get switched around as required when you log in without impacting any system defaults.</p>\n"
                }
            ]
        },
        {
            "17401381": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user3672754"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1564864542,
                    "last_edit_date": 1564864542,
                    "creation_date": 1411899554,
                    "answer_id": 26083895,
                    "question_id": 17401381,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The right way of building a deb package is using <code>dpkg-buildpackage</code>, but sometimes it is a little bit complicated. Instead you can use <code>dpkg -b &lt;folder&gt;</code> and it will create your Debian package.</p>\n\n<p>These are the basics for creating a Debian package with <code>dpkg -b &lt;folder&gt;</code> with any binary or with any kind of script that runs automatically without needing manual compilation (Python, Bash, Pearl, and Ruby):</p>\n\n<ol>\n<li>Create the files and folders in order to recreate the following structure:</li>\n</ol>\n\n<pre class=\"lang-none prettyprint-override\"><code>    ProgramName-Version/\n    ProgramName-Version/DEBIAN\n    ProgramName-Version/DEBIAN/control\n    ProgramName-Version/usr/\n    ProgramName-Version/usr/bin/\n    ProgramName-Version/usr/bin/your_script\n</code></pre>\n\n<p>The scripts placed at <code>/usr/bin/</code> are directly called from the terminal. Note that I didn't add an extension to the script.</p>\n\n<p>Also, you can notice that the structure of the deb package will be the structure of the program once it's installed. So if you follow this logic if your program has a single file, you can directly place it under <code>ProgramName-Version/usr/bin/your_script</code>, but if you have multiple files, you should place them under <code>ProgramName-Version/usr/share/ProgramName/all your files</code> and place only one file under <code>/usr/bin/</code> that will call your scripts from <code>/usr/share/ProgramName/</code>.</p>\n\n<ol start=\"2\">\n<li><p>Change all the folder permission to root:</p>\n\n<pre><code>chown root:root -R /path/to/ProgramName-Version\n</code></pre></li>\n<li><p>Change the script's permissions:</p>\n\n<pre><code>chmod 0755 /path/to/the/script\n</code></pre></li>\n<li><p>Finally, you can run: <code>dpkg -b /path/to/the/ProgramName-Version</code> and your deb package will be created! (You can also add the post/pre inst scripts and everything you want; it works like a normal Debian package.)</p></li>\n</ol>\n\n<hr>\n\n<p>Here is an example of the <code>control</code> file. You only need to copy-paste it in to an empty file called \"control\" and put it in the <code>DEBIAN</code> folder.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Package: ProgramName\nVersion: VERSION\nArchitecture: all\nMaintainer: YOUR NAME &lt;EMAIL&gt;\nDepends: python2.7, etc , etc,\nInstalled-Size: in_kb\nHomepage: http://foo.com\nDescription: Here you can put a one line description. This is the short Description.\n Here you put the long description, indented by 1 space.\n</code></pre>\n\n<hr>\n\n<p>If you want to build using <code>dpkg -b &lt;folder&gt;</code> you can use <a href=\"https://rafael.senties-martinelli.com/software/build-deb\" rel=\"nofollow noreferrer\">this program</a> that will do everything with one command. If you regularly build packages, it is a pain to do all the stuff that I mentioned!</p>\n\n<p>*The guide was taken from <em><a href=\"https://rafael.senties-martinelli.com/articles/debian-packages\" rel=\"nofollow noreferrer\">Basics of Debian Packages</a></em>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 253655,
                        "reputation": 4618,
                        "user_id": 532513,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/50fe9fc851c3b806090391c3ad25b259?s=256&d=identicon&r=PG",
                        "display_name": "Charl Botha",
                        "link": "https://stackoverflow.com/users/532513/charl-botha"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1564864325,
                    "last_edit_date": 1564864325,
                    "creation_date": 1372675716,
                    "answer_id": 17402676,
                    "question_id": 17401381,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I just tested <code>stdeb</code> (see <a href=\"https://pypi.python.org/pypi/stdeb\" rel=\"noreferrer\">https://pypi.python.org/pypi/stdeb</a>), a Python package for turning any other Python package into a Debian package.</p>\n\n<p>First I installed stdeb:</p>\n\n<pre><code>apt-get install python-stdeb\n</code></pre>\n\n<p>Then I made a simple script called <code>myscript.py</code> with the following contents:</p>\n\n<pre><code>def main():\n    print \"Hello world, says myscript!\"\n    # wait for input from the user\n    raw_input()\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Importantly, your directory structure should be:</p>\n\n<pre><code>somewhere/myscript/\n    setup.py\n    myscript/\n        __init__.py\n        myscript.py\n</code></pre>\n\n<p>In the setup.py file, you do something like:</p>\n\n<pre><code>import os\nfrom setuptools import setup\nfrom nvpy import nvpy\n\nsetup(\n    name = \"myscript\",\n    version = \"1.0\",\n    author = \"Charl P. Botha\",\n    author_email = \"cpbotha@vxlabs.com\",\n    description = \"Demo of packaging a Python script as DEB\",\n    license = \"BSD\",\n    url = \"https://github.com/cpbotha/nvpy\",\n    packages=['myscript'],\n    entry_points = {\n        'console_scripts' : ['myscript = myscript.myscript:main']\n    },\n    data_files = [\n        ('share/applications/', ['vxlabs-myscript.desktop'])\n    ],\n    classifiers=[\n        \"License :: OSI Approved :: BSD License\",\n    ],\n)\n</code></pre>\n\n<p>The <code>console_scripts</code> directive is important, and it'll create an executable script called <code>my_script</code>, which will be available system-wide after you install the resultant DEB. If your script uses something like <code>tkinter</code> or <code>wxpython</code> and has a graphical user interface, you should use <code>gui_scripts</code> instead of <code>console_scripts</code>.</p>\n\n<p>The <code>data_files</code> directive will install a suitable desktop file into <code>/usr/share/applications</code>, so that you can also start <code>myscript</code> from your desktop environment. <code>vxlabs-myscript.desktop</code> looks like this:</p>\n\n<pre><code>[Desktop Entry]\nVersion=1.0\nType=Application\nName=myscript\nComment=Minimal stdeb example\n# myscript should wait for user input at the end, else the terminal\n# window will disappear immediately.\nExec=myscript\nIcon=/usr/share/icons/gnome/48x48/apps/file-manager.png\nCategories=Utility;\n# desktop should run this in a terminal application\nTerminal=true\nStartupNotify=true\nStartupWMClass=myscript\n</code></pre>\n\n<p>To build the DEB, you do the following in the top-level <code>myscript</code>:</p>\n\n<pre><code>python setup.py --command-packages=stdeb.command bdist_deb\n</code></pre>\n\n<p>Which will create a .deb in the deb_dist directory.</p>\n\n<p>After having installed the DEB I created like this, I could run <code>myscript</code> from the command-line, and I could also invoke it from my desktop environment.</p>\n\n<p>Here's a GitHub repository with the example code above: <a href=\"https://github.com/cpbotha/stdeb-minimal-example\" rel=\"noreferrer\">https://github.com/cpbotha/stdeb-minimal-example</a></p>\n"
                }
            ]
        },
        {
            "15836713": [
                {
                    "owner": {
                        "account_id": 469316,
                        "reputation": 9800,
                        "user_id": 875832,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/8df259c952186aa93179732461b8d1e7?s=256&d=identicon&r=PG",
                        "display_name": "Moshe",
                        "link": "https://stackoverflow.com/users/875832/moshe"
                    },
                    "is_accepted": true,
                    "score": 369,
                    "last_activity_date": 1581602214,
                    "last_edit_date": 1581602214,
                    "creation_date": 1365172662,
                    "answer_id": 15836714,
                    "question_id": 15836713,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>An argparse argument can be limited to specific values with the <a href=\"https://docs.python.org/library/argparse.html#choices\" rel=\"noreferrer\"><code>choices</code></a> parameter:</p>\n\n<pre><code>...\nparser.add_argument('--val',\n                    choices=['a', 'b', 'c'],\n                    help='Special testing value')\n\nargs = parser.parse_args(sys.argv[1:])\n</code></pre>\n\n<p>See the <a href=\"https://docs.python.org/library/argparse.html#choices\" rel=\"noreferrer\">docs</a> for more details.</p>\n"
                }
            ]
        },
        {
            "3950079": [
                {
                    "owner": {
                        "account_id": 11369,
                        "reputation": 280725,
                        "user_id": 21886,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=256&d=identicon&r=PG",
                        "display_name": "RichieHindle",
                        "link": "https://stackoverflow.com/users/21886/richiehindle"
                    },
                    "is_accepted": true,
                    "score": 79,
                    "last_activity_date": 1287252025,
                    "creation_date": 1287252025,
                    "answer_id": 3950103,
                    "question_id": 3950079,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint [mylist[i:i+4] for i in range(0, len(mylist), 4)]\n# Prints [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n</code></pre>\n"
                }
            ]
        },
        {
            "28812851": [
                {
                    "owner": {
                        "account_id": 1572028,
                        "reputation": 10203,
                        "user_id": 1459533,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/a482980b00ed72489d03550af59924aa?s=256&d=identicon&r=PG",
                        "display_name": "Vivek Sable",
                        "link": "https://stackoverflow.com/users/1459533/vivek-sable"
                    },
                    "is_accepted": true,
                    "score": 100,
                    "last_activity_date": 1649345941,
                    "last_edit_date": 1649345941,
                    "creation_date": 1425308421,
                    "answer_id": 28812876,
                    "question_id": 28812851,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Because there are <strong>two print statements</strong>. First is inside function and second is outside function. When a function doesn't return anything, it implicitly returns <code>None</code>.</p>\n<p>Use <code>return</code> statement at end of function to return value.</p>\n<p>e.g.:</p>\n<p>Return <code>None</code>.</p>\n<pre><code>&gt;&gt;&gt; def test1():\n...    print &quot;In function.&quot;\n... \n&gt;&gt;&gt; a = test1()\nIn function.\n&gt;&gt;&gt; print a\nNone\n&gt;&gt;&gt; \n&gt;&gt;&gt; print test1()\nIn function.\nNone\n&gt;&gt;&gt; \n&gt;&gt;&gt; test1()\nIn function.\n&gt;&gt;&gt; \n</code></pre>\n<p>Use return statement</p>\n<pre><code>&gt;&gt;&gt; def test():\n...   return &quot;ACV&quot;\n... \n&gt;&gt;&gt; print test()\nACV\n&gt;&gt;&gt; \n&gt;&gt;&gt; a = test()\n&gt;&gt;&gt; print a\nACV\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3438751,
                        "reputation": 174538,
                        "user_id": 3297613,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://i.sstatic.net/KHhzd.jpg?s=256",
                        "display_name": "Avinash Raj",
                        "link": "https://stackoverflow.com/users/3297613/avinash-raj"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1586685196,
                    "last_edit_date": 1586685196,
                    "creation_date": 1425308446,
                    "answer_id": 28812883,
                    "question_id": 28812851,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Because of double print function. I suggest you to use <code>return</code> instead of <code>print</code> inside the function definition.</p>\n\n<pre><code>def lyrics():\n    return \"The very first line\"\nprint(lyrics())\n</code></pre>\n\n<p><strong>OR</strong></p>\n\n<pre><code>def lyrics():\n    print(\"The very first line\")\nlyrics()\n</code></pre>\n"
                }
            ]
        },
        {
            "3884612": [
                {
                    "owner": {
                        "account_id": 3243825,
                        "reputation": 2408,
                        "user_id": 2761682,
                        "user_type": "registered",
                        "accept_rate": 17,
                        "profile_image": "https://www.gravatar.com/avatar/2448377daa4149fa6ac66142c0e5e2c2?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dstandish",
                        "link": "https://stackoverflow.com/users/2761682/dstandish"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1696902679,
                    "last_edit_date": 1696902679,
                    "creation_date": 1565971102,
                    "answer_id": 57527716,
                    "question_id": 3884612,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3.7 provides <a href=\"https://docs.python.org/3/library/dataclasses.html#module-dataclasses\" rel=\"nofollow noreferrer\"><code>dataclasses</code></a> which are helpful in situations like this:</p>\n<pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Foo:\n    a: str = None\n    b: str = None\n    c: str = None\n</code></pre>\n<p>This saves you from having to write out the <code>__init__</code> method when you just want to store a few attributes.</p>\n<p>Gives you a good <code>__repr__</code> method:</p>\n<pre><code>&gt;&gt;&gt; a = Foo()\n&gt;&gt;&gt; a\nFoo(a=None, b=None, c=None)\n</code></pre>\n<p>If you need to do calculations on a param, you can implement <code>__post_init__</code>.</p>\n<p>See also namedtuple:</p>\n<pre><code>from collections import namedtuple\n\nFoo = namedtuple('Foo', ['a', 'b', 'c'])\n</code></pre>\n<p>All fields are required with namedtuple though.</p>\n<pre><code>&gt;&gt;&gt; a = Foo(1, 2, 3)\n&gt;&gt;&gt; a\nFoo(a=1, b=2, c=3)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 877171,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1286477637,
                    "last_edit_date": 1286477637,
                    "creation_date": 1286475637,
                    "answer_id": 3884624,
                    "question_id": 3884612,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Please note that </p>\n\n<pre><code>class Foo(object):\n    a = None\n</code></pre>\n\n<p>sets a key-value pair in <code>Foo</code>'s dict:</p>\n\n<pre><code>Foo.__dict__['a']=None\n</code></pre>\n\n<p>while</p>\n\n<pre><code>def __init__(self, a = None, b = None, c = None):\n    self.a = a\n</code></pre>\n\n<p>sets a key-value pair in the Foo instance object's dict:</p>\n\n<pre><code>foo=Foo()\nfoo.__dict__['a']=a\n</code></pre>\n\n<p>So setting the class members at the top of your definition is not directly related to the setting of the instance attributes in the lower half of your definition (inside the <code>__init__</code>.</p>\n\n<p>Also, it is good to be aware that <code>__init__</code> is Python's <em>initializer</em>. <code>__new__</code> is the class <em>constructor</em>.</p>\n\n<hr>\n\n<p>If you are looking for a way to automatically add some instance attributes based on <code>__init__</code>'s arguments, you could use this:</p>\n\n<pre><code>import inspect\nimport functools\n\ndef autoargs(*include,**kwargs):   \n    def _autoargs(func):\n        attrs,varargs,varkw,defaults=inspect.getargspec(func)\n        def sieve(attr):\n            if kwargs and attr in kwargs['exclude']: return False\n            if not include or attr in include: return True\n            else: return False            \n        @functools.wraps(func)\n        def wrapper(self,*args,**kwargs):\n            # handle default values\n            for attr,val in zip(reversed(attrs),reversed(defaults)):\n                if sieve(attr): setattr(self, attr, val)\n            # handle positional arguments\n            positional_attrs=attrs[1:]            \n            for attr,val in zip(positional_attrs,args):\n                if sieve(attr): setattr(self, attr, val)\n            # handle varargs\n            if varargs:\n                remaining_args=args[len(positional_attrs):]\n                if sieve(varargs): setattr(self, varargs, remaining_args)                \n            # handle varkw\n            if kwargs:\n                for attr,val in kwargs.iteritems():\n                    if sieve(attr): setattr(self,attr,val)            \n            return func(self,*args,**kwargs)\n        return wrapper\n    return _autoargs\n</code></pre>\n\n<p>So when you say</p>\n\n<pre><code>class Foo(object):\n    @autoargs()\n    def __init__(self,x,path,debug=False,*args,**kw):\n        pass\nfoo=Foo('bar','/tmp',True, 100, 101,verbose=True)\n</code></pre>\n\n<p>you automatically get these instance attributes:</p>\n\n<pre><code>print(foo.x)\n# bar\nprint(foo.path)\n# /tmp\nprint(foo.debug)\n# True\nprint(foo.args)\n# (100, 101)\nprint(foo.verbose)\n# True\n</code></pre>\n\n<p>PS. Although I wrote this (for fun), I don't recommend using <code>autoargs</code> for serious work. Being explicit is simple, clear and infallible. I can't say the same for <code>autoargs</code>.</p>\n\n<p><strike>PPS. Is it just me, or are a lot of buttons broken on Stackoverflow? The editor window has lost all its icons... :(</strike> Clearing the browser cache fixed the problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 47344,
                        "reputation": 74595,
                        "user_id": 140185,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/3d8fead2a83893fb2f03eec42ece2de3?s=256&d=identicon&r=PG",
                        "display_name": "Manoj Govindan",
                        "link": "https://stackoverflow.com/users/140185/manoj-govindan"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1286476107,
                    "last_edit_date": 1495542313,
                    "creation_date": 1286476107,
                    "answer_id": 3884679,
                    "question_id": 3884612,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are <a href=\"https://stackoverflow.com/questions/1389180/python-automatically-initialize-instance-variables\">elegant</a> ways to do this. </p>\n\n<blockquote>\n  <p>Is there any way to simplify this process? Whenever I add a new member to class Foo, I'm forced to modify the constructor.</p>\n</blockquote>\n\n<p>There is also a <em>crude</em> way. It will work, but is NOT recommended. See and decide. </p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n    def __init__(self, **attrs):\n        self.__dict__.update(**attrs)\n    def __getattr__(self, attr):\n        return self.__dict__.get(attr, None)\n\n\n&gt;&gt;&gt; f = Foo(a = 1, b = 2, c = 3)\n&gt;&gt;&gt; f.a, f.b\n(1, 2)\n&gt;&gt;&gt; f = Foo(bar = 'baz')\n&gt;&gt;&gt; f.bar\n'baz'\n&gt;&gt;&gt; f.a\n&gt;&gt;&gt; \n</code></pre>\n\n<p>The keyword argument constructor lets you get away without explicitly defining any arguments. <strong>Warning</strong>: <em>this goes against the \"explicit is better than implicit\" principle</em>. </p>\n\n<p>You need to override <code>__getattr__</code> ONLY if you want to return a default value for an attribute that is not present instead of getting an <code>AttributeError</code>. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 96711,
                        "reputation": 12046,
                        "user_id": 262727,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/OG45r.png?s=256",
                        "display_name": "li.davidm",
                        "link": "https://stackoverflow.com/users/262727/li-davidm"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1286475710,
                    "last_edit_date": 1495540433,
                    "creation_date": 1286475710,
                    "answer_id": 3884631,
                    "question_id": 3884612,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://code.activestate.com/recipes/286185-automatically-initializing-instance-variables-from/\" rel=\"nofollow noreferrer\">http://code.activestate.com/recipes/286185-automatically-initializing-instance-variables-from/</a></p>\n\n<p>This recipe and its comments provide some methods.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/1389180/python-automatically-initialize-instance-variables\">Python: Automatically initialize instance variables?</a></p>\n\n<p>This is a previous question.</p>\n"
                }
            ]
        },
        {
            "38430277": [
                {
                    "owner": {
                        "account_id": 556766,
                        "reputation": 133513,
                        "user_id": 918959,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/GvgaU.jpg?s=256",
                        "display_name": "Antti Haapala -- \u0421\u043b\u0430\u0432\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0456",
                        "link": "https://stackoverflow.com/users/918959/antti-haapala-%d0%a1%d0%bb%d0%b0%d0%b2%d0%b0-%d0%a3%d0%ba%d1%80%d0%b0%d1%97%d0%bd%d1%96"
                    },
                    "is_accepted": true,
                    "score": 38,
                    "last_activity_date": 1532640033,
                    "last_edit_date": 1532640033,
                    "creation_date": 1468825154,
                    "answer_id": 38430356,
                    "question_id": 38430277,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your reading is incorrect. The <code>__eq__</code> method is used for equality checks. The documents just state that the <code>__hash__</code> value must also be the same for 2 objects <code>a</code> and <code>b</code> for which <code>a == b</code> (i.e.  <code>a.__eq__(b)</code>) is true.</p>\n\n<p>This is a common logic mistake: <code>a == b</code> being true <em><a href=\"https://en.wikipedia.org/wiki/Material_conditional\" rel=\"noreferrer\">implies</a></em> that <code>hash(a) == hash(b)</code> is also true. However, an implication does not necessarily mean <em><a href=\"https://en.wikipedia.org/wiki/Logical_equivalence\" rel=\"noreferrer\">equivalence</a></em>, that in addition to the prior, <code>hash(a) == hash(b)</code> would mean that <code>a == b</code>.</p>\n\n<p>To make all instances of <code>MyClass</code> compare equal to each other, you need to provide an <code>__eq__</code> method for them; otherwise Python will compare their <em>identities instead</em>. This might do:</p>\n\n<pre><code>class MyClass(object):\n    def __hash__(self):\n        return 0\n    def __eq__(self, other):\n        # another object is equal to self, iff \n        # it is an instance of MyClass\n        return isinstance(other, MyClass)\n</code></pre>\n\n<p>Now:</p>\n\n<pre><code>&gt;&gt;&gt; result = set()\n&gt;&gt;&gt; result.add(MyClass())\n&gt;&gt;&gt; result.add(MyClass())\n1\n</code></pre>\n\n<hr>\n\n<p>In reality you'd base the <code>__hash__</code> on those properties of your object that are used for <code>__eq__</code> comparison, for example:</p>\n\n<pre><code>class Person\n    def __init__(self, name, ssn):\n        self.name = name\n        self.ssn = ssn\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.ssn == other.ssn\n\n    def __hash__(self):\n        # use the hashcode of self.ssn since that is used\n        # for equality checks as well\n        return hash(self.ssn)\n\np = Person('Foo Bar', 123456789)\nq = Person('Fake Name', 123456789)\nprint(len({p, q})  # 1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1468825927,
                    "last_edit_date": 1468825927,
                    "creation_date": 1468825145,
                    "answer_id": 38430354,
                    "question_id": 38430277,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Sets need <strong>two</strong> methods to make an object hashable: <code>__hash__</code> and <code>__eq__</code>. Two instances <strong>must</strong> return the same hash value when they are considered equal. An instance is considered already present in a set if both the hash is present in the set <em>and</em> the instance is considered equal to one of the instances with that same hash in the set.</p>\n\n<p>Your class doesn't implement <code>__eq__</code>, so the default <code>object.__eq__</code> is used instead, which only returns true if <code>obj1 is obj2</code> is also true. In other words, two instances are only considered equal if they are <em>the exact same instance</em>. </p>\n\n<p>Just because their hashes match, doesn't make them unique as far as a set is concerned; even objects with different hashes can end up in the same hash table slot, as the <em>modulus</em> of the hash against the table size is used.</p>\n\n<p>Add your a custom <code>__eq__</code> method that returns <code>True</code> when two instances are supposed to be equal:</p>\n\n<pre><code>def __eq__(self, other):\n    if not isinstance(other, type(self)):\n        return False\n    # all instances of this class are considered equal to one another\n    return True\n</code></pre>\n"
                }
            ]
        },
        {
            "3524168": [
                {
                    "owner": {
                        "account_id": 2910096,
                        "reputation": 18395,
                        "user_id": 2494535,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/94346b45107854d1a7fbf6500b8a7474?s=256&d=identicon&r=PG",
                        "display_name": "softvar",
                        "link": "https://stackoverflow.com/users/2494535/softvar"
                    },
                    "is_accepted": false,
                    "score": 102,
                    "last_activity_date": 1721159179,
                    "last_edit_date": 1721159179,
                    "creation_date": 1374357259,
                    "answer_id": 17767076,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h4>For Python version &lt; 3.8</h4>\n<p>Use <a href=\"http://setuptools.readthedocs.io/en/latest/pkg_resources.html\" rel=\"nofollow noreferrer\">pkg_resources</a> (part of <code>setuptools</code>). Anything installed from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow noreferrer\">PyPI</a> at least has a version number. No extra package/module is needed.</p>\n<pre class=\"lang-py prettyprint-override\"><code>import pkg_resources\npkg_resources.get_distribution(&quot;simplegist&quot;).version\n# '0.3.2'\n</code></pre>\n<h4>For Python versions &gt;= 3.8</h4>\n<p><a href=\"https://docs.python.org/3.9/library/importlib.metadata.html#overview\" rel=\"nofollow noreferrer\">importlib.metadata</a> can be used as a replacement for <code>pkg_resources</code>. No extra package/module is needed.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from importlib.metadata import version\nversion('json2html')\n# '1.2.3'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16184038,
                        "reputation": 9,
                        "user_id": 11684704,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5b6cfa4fe81c63b7995dc2644264631a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "aastha",
                        "link": "https://stackoverflow.com/users/11684704/aastha"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1561198867,
                    "creation_date": 1561198867,
                    "answer_id": 56714616,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code> import sys\n import matplotlib as plt\n import pandas as pd\n import sklearn as skl\n import seaborn as sns\n\n print(sys.version)\n print(plt.__version__)\n print(pd.__version__)\n print(skl.__version__)\n print(sns.__version__)\n</code></pre>\n\n<p>The above code shows versions of respective modules:\nSample O/P:</p>\n\n<p>3.7.1rc1 (v3.7.1rc1:2064bcf6ce, Sep 26 2018, 14:21:39) [MSC v.1914 32 bit (Intel)]\n3.1.0\n0.24.2\n0.21.2\n0.9.0\n(sys shows version of python )</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12852886,
                        "reputation": 61269,
                        "user_id": 9297144,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/WLMMD.png?s=256",
                        "display_name": "Xavier Guihot",
                        "link": "https://stackoverflow.com/users/9297144/xavier-guihot"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1558984684,
                    "creation_date": 1558984684,
                    "answer_id": 56331414,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Starting <code>Python 3.8</code>, <a href=\"https://docs.python.org/3.8/library/importlib.metadata.html\" rel=\"noreferrer\"><code>importlib.metadata</code></a> can be used as a replacement for <code>pkg_resources</code> to extract the version of third-party packages installed via tools such as <code>pip</code>:</p>\n\n<pre><code>from importlib.metadata import version\nversion('wheel')\n# '0.33.4'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 113983,
                        "reputation": 1055,
                        "user_id": 299952,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b9ae0b20a352da525203550353fa0c0f?s=256&d=identicon&r=PG",
                        "display_name": "phzx_munki",
                        "link": "https://stackoverflow.com/users/299952/phzx-munki"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1505243370,
                    "creation_date": 1505243370,
                    "answer_id": 46183769,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Some modules (e.g. azure) do not provide a <code>__version__</code> string.</p>\n\n<p>If the package was installed with pip, the following should work.</p>\n\n<pre><code># say we want to look for the version of the \"azure\" module\nimport pip\nfor m in pip.get_installed_distributions():\n    if m.project_name == 'azure':\n        print(m.version)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 66296,
                        "reputation": 26647,
                        "user_id": 194586,
                        "user_type": "registered",
                        "accept_rate": 48,
                        "profile_image": "https://www.gravatar.com/avatar/1a71658d81f8a82a8122050f21bb86d3?s=256&d=identicon&r=PG",
                        "display_name": "Nick T",
                        "link": "https://stackoverflow.com/users/194586/nick-t"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1282237407,
                    "creation_date": 1282237407,
                    "answer_id": 3524247,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Generalized answer from Matt's, do a <code>dir(YOURMODULE)</code> and look for <code>__version__</code>, <code>VERSION</code>, or <code>version</code>.  Most modules like <code>__version__</code> but I think <code>numpy</code> uses <code>version.version</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 93700,
                        "reputation": 4403,
                        "user_id": 256218,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/fef0c23e28423a81e227ac336953e2d7?s=256&d=identicon&r=PG",
                        "display_name": "Matthew J Morrison",
                        "link": "https://stackoverflow.com/users/256218/matthew-j-morrison"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1282237193,
                    "creation_date": 1282237193,
                    "answer_id": 3524212,
                    "question_id": 3524168,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think it depends on the module. For example, Django has a VERSION variable that you can get from <code>django.VERSION</code>, sqlalchemy has a <code>__version__</code> variable that you can get from <code>sqlalchemy.__version__</code>.  </p>\n"
                }
            ]
        },
        {
            "17843785": [
                {
                    "owner": {
                        "account_id": 16379827,
                        "reputation": 349,
                        "user_id": 11831138,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/O1NeD.jpg?s=256",
                        "display_name": "Abayomi Olowu",
                        "link": "https://stackoverflow.com/users/11831138/abayomi-olowu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1727606710,
                    "last_edit_date": 1727606710,
                    "creation_date": 1616665929,
                    "answer_id": 66796920,
                    "question_id": 17843785,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code># USING FUNCTION    \ndef function_recursion(number):\n    if number &lt;= 1:\n        return number\n    else:\n        return (number + function_recursion(number - 1))\nresult = function_recursion(5)\nprint(&quot;function recursion: &quot;, result)\n\n#USING CLASS\nclass Recursion:\n    def __init__(self, number):\n        self.number = number\n        \n    def recur(self):\n        if self.number &lt;= 1:\n            return True\n        else:\n            return (self.number + self.recur(self.number - 1))\nresult = Recursion(3)\nprint(&quot;Recursion using class: &quot;, result.recur())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 324766,
                        "reputation": 56332,
                        "user_id": 645551,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/3231cd5016283f6ea5963ab1dfa6e27a?s=256&d=identicon&r=PG",
                        "display_name": "freakish",
                        "link": "https://stackoverflow.com/users/645551/freakish"
                    },
                    "is_accepted": true,
                    "score": 32,
                    "last_activity_date": 1611005211,
                    "last_edit_date": 1611005211,
                    "creation_date": 1374696291,
                    "answer_id": 17843819,
                    "question_id": 17843785,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Each method of a class has to have <code>self</code> as a first parameter, i.e. do this:</p>\n<pre><code>def recur(self, num):\n</code></pre>\n<p>and it should work now.</p>\n<p>Basically what happens behind the scene is when you do</p>\n<pre><code>instance.method(arg1, arg2, arg3, ...)\n</code></pre>\n<p>Python does</p>\n<pre><code>Class.method(instance, arg1, arg2, arg3, ....)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 20089566,
                        "reputation": 11,
                        "user_id": 14730382,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/551ca0461c3cc162d35d72496fa73fbb?s=256&d=identicon&r=PG",
                        "display_name": "user14730382",
                        "link": "https://stackoverflow.com/users/14730382/user14730382"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1606687073,
                    "last_edit_date": 1606687073,
                    "creation_date": 1606668223,
                    "answer_id": 65062568,
                    "question_id": 17843785,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is a code example that actually works</p>\n<pre><code>class Card():\n    def __init__(self,cardsPlayedList,cardPosition):\n        self.cardsPlayedList = cardsPlayedList\n        self.cardPosition = cardPosition\n    #    self.cardPosition\n\n    def getNewCard(self,cardPosition):\n        cardNum = 0\n        cardInList = False\n        \n        cardNum = random.randint(1,len(cardList)-1)          # Get random card from List - 1 to 52 \n        for x in self.cardsPlayedList:\n            if(cardNum == x):\n                cardInList = True                            \n\n        if(cardInList == False):\n            self.cardsPlayedList.insert(self.cardPosition, cardNum)    # if card not already played then store in list\n            return cardNum\n        else:\n            return self.getNewCard(cardPosition)   \n</code></pre>\n"
                }
            ]
        },
        {
            "1918539": [
                {
                    "owner": {
                        "account_id": 1211489,
                        "reputation": 21491,
                        "user_id": 1179925,
                        "user_type": "registered",
                        "accept_rate": 47,
                        "profile_image": "https://www.gravatar.com/avatar/5403975c3b25b9407b19a26b65d1ce72?s=256&d=identicon&r=PG",
                        "display_name": "mrgloom",
                        "link": "https://stackoverflow.com/users/1179925/mrgloom"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1698716137,
                    "last_edit_date": 1698716137,
                    "creation_date": 1568252074,
                    "answer_id": 57898657,
                    "question_id": 1918539,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Checking it out in Python\u00a03:</p>\n<pre class=\"lang-none prettyprint-override\"><code>python -V\nPython 3.6.5\n</code></pre>\n<p><strong>Example1:</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 parent.py\n\u251c\u2500\u2500 start.py\n\u2514\u2500\u2500 sub\n    \u2514\u2500\u2500 relative.py\n\n- start.py\nimport sub.relative\n\n- parent.py\nprint('Hello from parent.py')\n\n- sub/relative.py\nfrom .. import parent\n</code></pre>\n<p>If we run it like this(just to make sure PYTHONPATH is empty):</p>\n<pre class=\"lang-none prettyprint-override\"><code>PYTHONPATH='' python3 start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File &quot;start.py&quot;, line 1, in &lt;module&gt;\n    import sub.relative\n  File &quot;/python-import-examples/so-example-v1/sub/relative.py&quot;, line 1, in &lt;module&gt;\n    from .. import parent\nValueError: attempted relative import beyond top-level package\n</code></pre>\n<p>If we change import in <code>sub/relative.py</code></p>\n<pre class=\"lang-none prettyprint-override\"><code>- sub/relative.py\nimport parent\n</code></pre>\n<p>If we run it like this:</p>\n<pre class=\"lang-none prettyprint-override\"><code>PYTHONPATH='' python3 start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Hello from parent.py\n</code></pre>\n<p><strong>Example2:</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 parent.py\n\u2514\u2500\u2500 sub\n    \u251c\u2500\u2500 relative.py\n    \u2514\u2500\u2500 start.py\n\n- parent.py\nprint('Hello from parent.py')\n\n- sub/relative.py\nprint('Hello from relative.py')\n\n- sub/start.py\nimport relative\nfrom .. import parent\n</code></pre>\n<p>Run it like:</p>\n<pre class=\"lang-none prettyprint-override\"><code>PYTHONPATH='' python3 sub/start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Hello from relative.py\nTraceback (most recent call last):\n  File &quot;sub/start.py&quot;, line 2, in &lt;module&gt;\n    from .. import parent\nValueError: attempted relative import beyond top-level package\n</code></pre>\n<p>If we change import in <code>sub/start.py</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>- sub/start.py\nimport relative\nimport parent\n</code></pre>\n<p>Run it like:</p>\n<pre class=\"lang-none prettyprint-override\"><code>PYTHONPATH='' python3 sub/start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Hello from relative.py\nTraceback (most recent call last):\n  File &quot;sub/start.py&quot;, line 3, in &lt;module&gt;\n    import parent\nModuleNotFoundError: No module named 'parent'\n</code></pre>\n<p>Run it like:</p>\n<pre class=\"lang-none prettyprint-override\"><code>PYTHONPATH='.' python3 sub/start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Hello from relative.py\nHello from parent.py\n</code></pre>\n<p>Also it's better to use import from root folder, i.e.:</p>\n<pre class=\"lang-none prettyprint-override\"><code>- sub/start.py\nimport sub.relative\nimport parent\n</code></pre>\n<p>Run it like:</p>\n<pre><code>PYTHONPATH='.' python3 sub/start.py\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>Hello from relative.py\nHello from parent.py\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6826664,
                        "reputation": 4065,
                        "user_id": 5252192,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/sAYqH.png?s=256",
                        "display_name": "Amir Hossein Baghernezad",
                        "link": "https://stackoverflow.com/users/5252192/amir-hossein-baghernezad"
                    },
                    "is_accepted": false,
                    "score": 36,
                    "last_activity_date": 1505832467,
                    "creation_date": 1505832467,
                    "answer_id": 46303506,
                    "question_id": 1918539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are going to call <code>relative.py</code> directly and i.e. if you really want to import from a top level module you have to explicitly add it to the <code>sys.path</code> list.<br>\nHere is how it should work:  </p>\n\n<pre><code># Add this line to the beginning of relative.py file\nimport sys\nsys.path.append('..')\n\n# Now you can do imports from one directory top cause it is in the sys.path\nimport parent\n\n# And even like this:\nfrom parent import Parent\n</code></pre>\n\n<p>If you think the above can cause some kind of inconsistency you can use this instead:  </p>\n\n<pre><code>sys.path.append(sys.path[0] + \"/..\")\n</code></pre>\n\n<p><code>sys.path[0]</code> refers to the path that the entry point was ran from.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 36618,
                        "reputation": 9205,
                        "user_id": 104480,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/0eb26fbd1eb7ad27cdc44770390034e9?s=256&d=identicon&r=PG",
                        "display_name": "ebo",
                        "link": "https://stackoverflow.com/users/104480/ebo"
                    },
                    "is_accepted": true,
                    "score": 146,
                    "last_activity_date": 1344969669,
                    "last_edit_date": 1344969669,
                    "creation_date": 1261006674,
                    "answer_id": 1918581,
                    "question_id": 1918539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You are importing from package \"sub\". <code>start.py</code> is not itself in a package even if there is a <code>__init__.py</code> present.</p>\n\n<p>You would need to start your program from one directory over <code>parent.py</code>:</p>\n\n<pre><code>./start.py\n\n./pkg/__init__.py\n./pkg/parent.py\n./pkg/sub/__init__.py\n./pkg/sub/relative.py\n</code></pre>\n\n<p>With <code>start.py</code>:</p>\n\n<pre><code>import pkg.sub.relative\n</code></pre>\n\n<p>Now pkg is the top level package and your relative import should work.</p>\n\n<hr>\n\n<p>If you want to stick with your current layout you can just use <code>import parent</code>. Because you use <code>start.py</code> to launch your interpreter, the directory where <code>start.py</code> is located is in your python path. <code>parent.py</code> lives there as a separate module.</p>\n\n<p>You can also safely delete the top level <code>__init__.py</code>, if you don't import anything into a script further up the directory tree.</p>\n"
                }
            ]
        },
        {
            "20457038": [
                {
                    "owner": {
                        "account_id": 18727465,
                        "reputation": 978,
                        "user_id": 14208777,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/151726249926833/picture?type=large",
                        "display_name": "Sharif Rafid Ur Rahman",
                        "link": "https://stackoverflow.com/users/14208777/sharif-rafid-ur-rahman"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1654746387,
                    "creation_date": 1654746387,
                    "answer_id": 72554513,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest solution I found so far, dunno why people ain't using it.</p>\n<pre><code># Make sure the number is a float\na = 2324.55555\n# Round it according to your needs\n# dPoints is the decimals after the point\ndPoints = 2\n# this will round the float to 2 digits\na = a.__round__(dPoints)\nif len(str(a).split(&quot;.&quot;)[1]) &lt; dPoints:\n    # But it will only keep one 0 if there is nothing,\n    # So we add the extra 0s we need\n    print(str(a)+(&quot;0&quot;*(dPoints-1)))\nelse:\n    print(a)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6358143,
                        "reputation": 9368,
                        "user_id": 4934640,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/fc4da8b07838a687dc223355013dce0c?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Evandro Coan",
                        "link": "https://stackoverflow.com/users/4934640/evandro-coan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1650136852,
                    "creation_date": 1650136852,
                    "answer_id": 71896827,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Truncating to 2 digitis:</p>\n<pre class=\"lang-py prettyprint-override\"><code>somefloat = 2.23134133\ntruncated = int( somefloat * 100 ) / 100  # 2.23\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3319559,
                        "reputation": 2723,
                        "user_id": 2791067,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4jlVq.jpg?s=256",
                        "display_name": "Roman",
                        "link": "https://stackoverflow.com/users/2791067/roman"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1630261179,
                    "creation_date": 1630261179,
                    "answer_id": 68975755,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from decimal import Decimal, ROUND_HALF_UP\n\n# Here are all your options for rounding:\n# This one offers the most out of the box control\n# ROUND_05UP       ROUND_DOWN       ROUND_HALF_DOWN  ROUND_HALF_UP\n# ROUND_CEILING    ROUND_FLOOR      ROUND_HALF_EVEN  ROUND_UP\n\nour_value = Decimal(16.0/7)\noutput = Decimal(our_value.quantize(Decimal('.01'), \nrounding=ROUND_HALF_UP))\nprint output\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12327732,
                        "reputation": 1499,
                        "user_id": 8994722,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Q2VZp.jpg?s=256",
                        "display_name": "Zorro",
                        "link": "https://stackoverflow.com/users/8994722/zorro"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1618337093,
                    "last_edit_date": 1618337093,
                    "creation_date": 1616297499,
                    "answer_id": 66728556,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To avoid surprising value from round() this is my approche:</p>\n<pre><code>Round = lambda x, n: eval('&quot;%.'+str(int(n))+'f&quot; % '+repr(int(x)+round(float('.'+str(float(x)).split('.')[1]),n)))\n\nprint(Round(2, 2))       # 2.00\nprint(Round(2.675, 2))   # 2.68\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10646698,
                        "reputation": 5604,
                        "user_id": 8170714,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/OqwAS.jpg?s=256",
                        "display_name": "Jack",
                        "link": "https://stackoverflow.com/users/8170714/jack"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1595716787,
                    "last_edit_date": 1595716787,
                    "creation_date": 1595530187,
                    "answer_id": 63061189,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you just want to print the rounded result out, you can use the <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"noreferrer\">f-strings</a> introduced since Python 3.6. The syntax is the same as <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a>'s <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\" rel=\"noreferrer\">format string syntax</a>, except you put a <code>f</code> in front of the literal string, and you put the variables directly in the string, within the curly braces.</p>\n<p><code>.2f</code> indicates rounding to two decimal places:</p>\n<pre><code>number = 3.1415926\nprint(f&quot;The number rounded to two decimal places is {number:.2f}&quot;)\n</code></pre>\n<p>Output:</p>\n<pre><code>The number rounded to two decimal places is 3.14\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8690048,
                        "reputation": 12230,
                        "user_id": 6515755,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/4yJoA.jpg?s=256",
                        "display_name": "Ryabchenko Alexander",
                        "link": "https://stackoverflow.com/users/6515755/ryabchenko-alexander"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1593666317,
                    "creation_date": 1593666317,
                    "answer_id": 62689377,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you need not only round result but elso do math operations with round result, then you can use <code>decimal.Decimal</code> <a href=\"https://docs.python.org/2/library/decimal.html\" rel=\"noreferrer\">https://docs.python.org/2/library/decimal.html</a></p>\n<pre><code>from decimal import Decimal, ROUND_DOWN\n\nDecimal('7.325').quantize(Decimal('.01'), rounding=ROUND_DOWN)\nDecimal('7.32') \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8731912,
                        "reputation": 1309,
                        "user_id": 6531645,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://i.sstatic.net/RfM50.jpg?s=256",
                        "display_name": "Satyaki Sanyal",
                        "link": "https://stackoverflow.com/users/6531645/satyaki-sanyal"
                    },
                    "is_accepted": false,
                    "score": 73,
                    "last_activity_date": 1593122218,
                    "last_edit_date": 1593122218,
                    "creation_date": 1467266204,
                    "answer_id": 38114998,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the round function.</p>\n<pre><code>round(80.23456, 3)\n</code></pre>\n<p>will give you an answer of 80.234</p>\n<p>In your case, use</p>\n<pre><code>answer = str(round(answer, 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3764147,
                        "reputation": 11264,
                        "user_id": 3128122,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/VACQS.jpg?s=256",
                        "display_name": "Samuel Dauzon",
                        "link": "https://stackoverflow.com/users/3128122/samuel-dauzon"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1587338390,
                    "creation_date": 1587338390,
                    "answer_id": 61312930,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you need <strong>avoid floating point problem</strong> on rounding numbers for accounting, you can use numpy round.</p>\n\n<p>You need install numpy : </p>\n\n<pre><code>pip install numpy\n</code></pre>\n\n<p>and the code : </p>\n\n<pre><code>import numpy as np\n\nprint(round(2.675, 2))\nprint(float(np.round(2.675, 2)))\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>2.67\n2.68\n</code></pre>\n\n<p>You should use that if you manage money with legal rounding.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 157685,
                        "reputation": 5287,
                        "user_id": 375828,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://i.sstatic.net/PZNgw.gif?s=256",
                        "display_name": "Jason R. Mick",
                        "link": "https://stackoverflow.com/users/375828/jason-r-mick"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1576542155,
                    "last_edit_date": 1576542155,
                    "creation_date": 1467875925,
                    "answer_id": 38239630,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You want to round your answer.</p>\n\n<p><code>round(value,significantDigit)</code> is the ordinary solution to do this, however this <strong><em>sometimes</em></strong> does not operate as one would expect from a math perspective when the digit immediately inferior (to the left of) the digit you're rounding to has a <code>5</code>.</p>\n\n<p>Here's some examples of this unpredictable behavior:</p>\n\n<pre><code>&gt;&gt;&gt; round(1.0005,3)\n1.0\n&gt;&gt;&gt; round(2.0005,3)\n2.001\n&gt;&gt;&gt; round(3.0005,3)\n3.001\n&gt;&gt;&gt; round(4.0005,3)\n4.0\n&gt;&gt;&gt; round(1.005,2)\n1.0\n&gt;&gt;&gt; round(5.005,2)\n5.0\n&gt;&gt;&gt; round(6.005,2)\n6.0\n&gt;&gt;&gt; round(7.005,2)\n7.0\n&gt;&gt;&gt; round(3.005,2)\n3.0\n&gt;&gt;&gt; round(8.005,2)\n8.01\n</code></pre>\n\n<p>Assuming your intent is to do the traditional rounding for statistics in the sciences, this is a handy wrapper to get the <code>round</code> function working as expected needing to <code>import</code> extra stuff like <code>Decimal</code>.</p>\n\n<pre><code>&gt;&gt;&gt; round(0.075,2)\n\n0.07\n\n&gt;&gt;&gt; round(0.075+10**(-2*6),2)\n\n0.08\n</code></pre>\n\n<p>Aha! So based on this we can make a function...</p>\n\n<pre><code>def roundTraditional(val,digits):\n   return round(val+10**(-len(str(val))-1), digits)\n</code></pre>\n\n<p>Basically this adds a really small value to the string to force it to round up properly on the unpredictable instances where it doesn't ordinarily with the <code>round</code> function when you expect it to.  A convenient value to add is <code>1e-X</code> where <code>X</code> is the length of the number string you're trying to use <code>round</code> on plus <code>1</code>. </p>\n\n<p>The approach of using <code>10**(-len(val)-1)</code> was deliberate, as it the largest small number you can add to force the shift, while also ensuring that the value you add never changes the rounding even if the decimal <code>.</code> is missing.  I could use just <code>10**(-len(val))</code> with a condiditional <code>if (val&gt;1)</code> to subtract <code>1</code> more... but it's simpler to just always subtract the <code>1</code> as that won't change much the applicable range of decimal numbers this workaround can properly handle.  This approach will fail if your values reaches the limits of the type, this will fail, but for nearly the entire range of valid decimal values it should work.</p>\n\n<p>So the finished code will be something like:</p>\n\n<pre><code>def main():\n    printC(formeln(typeHere()))\n\ndef roundTraditional(val,digits):\n    return round(val+10**(-len(str(val))-1))\n\ndef typeHere():\n    global Fahrenheit\n    try:\n        Fahrenheit = int(raw_input(\"Hi! Enter Fahrenheit value, and get it in Celsius!\\n\"))\n    except ValueError:\n        print \"\\nYour insertion was not a digit!\"\n        print \"We've put your Fahrenheit value to 50!\"\n        Fahrenheit = 50\n    return Fahrenheit\n\ndef formeln(c):\n    Celsius = (Fahrenheit - 32.00) * 5.00/9.00\n    return Celsius\n\ndef printC(answer):\n    answer = str(roundTraditional(answer,2))\n    print \"\\nYour Celsius value is \" + answer + \" C.\\n\"\n\nmain()\n</code></pre>\n\n<p>...should give you the results you expect.</p>\n\n<p>You can also use the <a href=\"https://docs.python.org/3/library/decimal.html\" rel=\"noreferrer\">decimal</a> library to accomplish this, but the wrapper I propose is simpler and may be preferred in some cases.</p>\n\n<hr>\n\n<p><strong>Edit:</strong> Thanks <a href=\"https://stackoverflow.com/users/1405065/blckknght\">Blckknght</a> for pointing out that the <code>5</code> fringe case occurs only for certain values <a href=\"https://stackoverflow.com/questions/31818050/python-2-7-round-number-to-nearest-integer/38239574?noredirect=1#comment63901388_38239574\">here</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 29240,
                        "reputation": 141420,
                        "user_id": 78845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7jZ4g.png?s=256",
                        "display_name": "johnsyweb",
                        "link": "https://stackoverflow.com/users/78845/johnsyweb"
                    },
                    "is_accepted": false,
                    "score": 221,
                    "last_activity_date": 1574794066,
                    "last_edit_date": 1574794066,
                    "creation_date": 1386527707,
                    "answer_id": 20457284,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using <a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a>'s <a href=\"http://docs.python.org/library/string.html#format-string-syntax\" rel=\"noreferrer\">syntax</a> to <em>display</em> <code>answer</code> with two decimal places (without altering the underlying value of <code>answer</code>):</p>\n\n<pre><code>def printC(answer):\n    print(\"\\nYour Celsius value is {:0.2f}\u00baC.\\n\".format(answer))\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n<li><code>:</code> introduces the <a href=\"https://docs.python.org/reference/lexical_analysis.html#grammar-token-format-spec\" rel=\"noreferrer\">format spec</a></li>\n<li><code>0</code> enables sign-aware zero-padding for numeric types</li>\n<li><code>.2</code> sets the <a href=\"https://docs.python.org/library/string.html#grammar-token-precision\" rel=\"noreferrer\">precision</a> to <code>2</code></li>\n<li><code>f</code> displays the number as a fixed-point number</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 317816,
                        "reputation": 11814,
                        "user_id": 634697,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e13e22a48cef3036bd590d182b00b20b?s=256&d=identicon&r=PG",
                        "display_name": "rolisz",
                        "link": "https://stackoverflow.com/users/634697/rolisz"
                    },
                    "is_accepted": true,
                    "score": 1097,
                    "last_activity_date": 1574793611,
                    "last_edit_date": 1574793611,
                    "creation_date": 1386526841,
                    "answer_id": 20457115,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the <a href=\"http://docs.python.org/library/functions.html#round\" rel=\"noreferrer\"><code>round</code></a> function, which takes as its first argument the number and the second argument is the precision after the decimal point.</p>\n\n<p>In your case, it would be:</p>\n\n<pre><code>answer = str(round(answer, 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4132303,
                        "reputation": 1191,
                        "user_id": 3389859,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/RwI3c.png?s=256",
                        "display_name": "s4w3d0ff",
                        "link": "https://stackoverflow.com/users/3389859/s4w3d0ff"
                    },
                    "is_accepted": false,
                    "score": 97,
                    "last_activity_date": 1558399044,
                    "last_edit_date": 1558399044,
                    "creation_date": 1492746200,
                    "answer_id": 43533589,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Most answers suggested <code>round</code> or <code>format</code>. <code>round</code> sometimes rounds up, and in my case I needed the <em>value</em> of my variable to be rounded down and not just displayed as such.</p>\n\n<pre><code>round(2.357, 2)  # -&gt; 2.36\n</code></pre>\n\n<p>I found the answer here: <a href=\"https://stackoverflow.com/questions/4518641/how-to-round-off-a-floating-number\">How do I round a floating point number up to a certain decimal place?</a></p>\n\n<pre><code>import math\nv = 2.357\nprint(math.ceil(v*100)/100)  # -&gt; 2.36\nprint(math.floor(v*100)/100)  # -&gt; 2.35\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from math import floor, ceil\n\ndef roundDown(n, d=8):\n    d = int('1' + ('0' * d))\n    return floor(n * d) / d\n\ndef roundUp(n, d=8):\n    d = int('1' + ('0' * d))\n    return ceil(n * d) / d\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11550847,
                        "reputation": 1465,
                        "user_id": 8463555,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/pXDOb.jpg?s=256",
                        "display_name": "Asad Manzoor",
                        "link": "https://stackoverflow.com/users/8463555/asad-manzoor"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1549437800,
                    "last_edit_date": 1549437800,
                    "creation_date": 1549434469,
                    "answer_id": 54547796,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use <strong>round</strong> operator for up to 2 decimal </p>\n\n<pre><code>num = round(343.5544, 2)\nprint(num) // output is 343.55\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10917785,
                        "reputation": 1929,
                        "user_id": 8025086,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/25a8a1fa47320705af3f6e4825dca9cd?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "buxizhizhoum",
                        "link": "https://stackoverflow.com/users/8025086/buxizhizhoum"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1527060852,
                    "creation_date": 1527060852,
                    "answer_id": 50482427,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>round(12.3956 - 0.005, 2)  # minus 0.005, then round.\n</code></pre>\n\n<p>The answer is from: <a href=\"https://stackoverflow.com/a/29651462/8025086\">https://stackoverflow.com/a/29651462/8025086</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1058611,
                        "reputation": 4602,
                        "user_id": 1060738,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/OadVY.png?s=256",
                        "display_name": "Noam Peled",
                        "link": "https://stackoverflow.com/users/1060738/noam-peled"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1522635691,
                    "creation_date": 1522635691,
                    "answer_id": 49604531,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Not sure why, but '{:0.2f}'.format(0.5357706) gives me '0.54'.\nThe only solution that works for me (python 3.6) is the following:</p>\n\n<pre><code>def ceil_floor(x):\n    import math\n    return math.ceil(x) if x &lt; 0 else math.floor(x)\n\ndef round_n_digits(x, n):\n    import math\n    return ceil_floor(x * math.pow(10, n)) / math.pow(10, n)\n\nround_n_digits(-0.5357706, 2) -&gt; -0.53 \nround_n_digits(0.5357706, 2) -&gt; 0.53\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7508428,
                        "reputation": 21,
                        "user_id": 5704251,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-hwXUXZgywMw/AAAAAAAAAAI/AAAAAAACTR4/NDs4rhpBKJ4/photo.jpg?sz=256",
                        "display_name": "Patrick Hill",
                        "link": "https://stackoverflow.com/users/5704251/patrick-hill"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1511412139,
                    "creation_date": 1511412139,
                    "answer_id": 47447691,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is an example that I used:</p>\n\n<pre><code>def volume(self):\n    return round(pi * self.radius ** 2 * self.height, 2)\n\ndef surface_area(self):\n    return round((2 * pi * self.radius * self.height) + (2 * pi * self.radius ** 2), 2)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5081305,
                        "reputation": 131,
                        "user_id": 4077303,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/50dd871c0903062ebda00af9d7d55a4b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mahadi",
                        "link": "https://stackoverflow.com/users/4077303/mahadi"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1489456126,
                    "last_edit_date": 1489456126,
                    "creation_date": 1489455141,
                    "answer_id": 42776325,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>float(str(round(answer, 2)))\nfloat(str(round(0.0556781255, 2)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3656297,
                        "reputation": 149,
                        "user_id": 3047230,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1ea42371d9068bdf3505f12c3e3e003b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "arieli",
                        "link": "https://stackoverflow.com/users/3047230/arieli"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1386528370,
                    "last_edit_date": 1386528370,
                    "creation_date": 1386526588,
                    "answer_id": 20457069,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use the string formatting operator of python \"%\".\n\"%.2f\" means 2 digits after the decimal point.</p>\n\n<pre><code>def typeHere():\n    try:\n        Fahrenheit = int(raw_input(\"Hi! Enter Fahrenheit value, and get it in Celsius!\\n\"))\n    except ValueError:\n        print \"\\nYour insertion was not a digit!\"\n        print \"We've put your Fahrenheit value to 50!\"\n        Fahrenheit = 50\n    return Fahrenheit\n\ndef formeln(Fahrenheit):\n    Celsius = (Fahrenheit - 32.0) * 5.0/9.0\n    return Celsius\n\ndef printC(answer):\n    print \"\\nYour Celsius value is %.2f C.\\n\" % answer\n\ndef main():\n    printC(formeln(typeHere()))\n\nmain()\n</code></pre>\n\n<p><a href=\"http://docs.python.org/2/library/stdtypes.html#string-formatting\" rel=\"noreferrer\">http://docs.python.org/2/library/stdtypes.html#string-formatting</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1495696,
                        "reputation": 750,
                        "user_id": 1401695,
                        "user_type": "registered",
                        "accept_rate": 30,
                        "profile_image": "https://www.gravatar.com/avatar/6454d347a7bc556fb41d884ea7d7267d?s=256&d=identicon&r=PG",
                        "display_name": "codiacTushki",
                        "link": "https://stackoverflow.com/users/1401695/codiactushki"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1386527848,
                    "creation_date": 1386527848,
                    "answer_id": 20457316,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As you want your answer in decimal number so you dont need to typecast your <strong>answer</strong> variable to str in printC() function. </p>\n\n<p>and then use <a href=\"http://docs.python.org/3/library/stdtypes.html#old-string-formatting\" rel=\"nofollow\">printf-style String Formatting</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1557400,
                        "reputation": 3145,
                        "user_id": 1448070,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/6s3UL.jpg?s=256",
                        "display_name": "Santosh Ghimire",
                        "link": "https://stackoverflow.com/users/1448070/santosh-ghimire"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1386526738,
                    "creation_date": 1386526738,
                    "answer_id": 20457094,
                    "question_id": 20457038,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just use the formatting with %.2f which gives you rounding down to 2 decimals.</p>\n\n<pre><code>def printC(answer):\n    print \"\\nYour Celsius value is %.2f C.\\n\" % answer\n</code></pre>\n"
                }
            ]
        },
        {
            "6522446": [
                {
                    "owner": {
                        "account_id": 115512,
                        "reputation": 15118,
                        "user_id": 303298,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Ss7YE.jpg?s=256",
                        "display_name": "vladimir",
                        "link": "https://stackoverflow.com/users/303298/vladimir"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1605658040,
                    "creation_date": 1605658040,
                    "answer_id": 64885189,
                    "question_id": 6522446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Functional decision for @pegah answer:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from itertools import groupby\n\nmylist = [('a', 1), ('b', 3), ('a', 2), ('b', 4)]\n#mylist = iter([('a', 1), ('b', 3), ('a', 2), ('b', 4)])\n\nresult = { k : [*map(lambda v: v[1], values)]\n    for k, values in groupby(sorted(mylist, key=lambda x: x[0]), lambda x: x[0])\n    }\n\nprint(result)\n# {'a': [1, 2], 'b': [3, 4]}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4570864,
                        "reputation": 859,
                        "user_id": 7824204,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5JEOL.png?s=256",
                        "display_name": "pegah",
                        "link": "https://stackoverflow.com/users/7824204/pegah"
                    },
                    "is_accepted": false,
                    "score": 34,
                    "last_activity_date": 1586841538,
                    "creation_date": 1586841538,
                    "answer_id": 61201134,
                    "question_id": 6522446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It seems everyone here assumes the list of tuples have one to one mapping between key and values (e.g. it does not have duplicated keys for the dictionary). As this is the first question coming up searching on this topic, I post an answer for a more general case where we have to deal with duplicates:</p>\n\n<pre><code>mylist = [(a,1),(a,2),(b,3)]    \nresult = {}\nfor i in mylist:  \n   result.setdefault(i[0],[]).append(i[1])\nprint(result)\n&gt;&gt;&gt; result = {a:[1,2], b:[3]}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599448,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 328,
                    "last_activity_date": 1576280303,
                    "last_edit_date": 1576280303,
                    "creation_date": 1309358216,
                    "answer_id": 6522469,
                    "question_id": 6522446,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Just call <a href=\"https://docs.python.org/library/stdtypes.html#dict\" rel=\"noreferrer\"><code>dict()</code></a> on the list of tuples directly</p>\n\n<pre><code>&gt;&gt;&gt; my_list = [('a', 1), ('b', 2)]\n&gt;&gt;&gt; dict(my_list)\n{'a': 1, 'b': 2}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7160911,
                        "reputation": 26588,
                        "user_id": 5471709,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/4a08fe6799bde6910576fea5a7c791ab?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Kenly",
                        "link": "https://stackoverflow.com/users/5471709/kenly"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1476787716,
                    "creation_date": 1476787716,
                    "answer_id": 40106183,
                    "question_id": 6522446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>With <code>dict</code> comprehension:  </p>\n\n<pre><code>h = {k:v for k,v in l}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32514,
                        "reputation": 76612,
                        "user_id": 90308,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=256&d=identicon&r=PG",
                        "display_name": "FogleBird",
                        "link": "https://stackoverflow.com/users/90308/foglebird"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1309358235,
                    "creation_date": 1309358235,
                    "answer_id": 6522475,
                    "question_id": 6522446,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <code>dict</code> constructor accepts input exactly as you have it (key/value tuples).</p>\n\n<pre><code>&gt;&gt;&gt; l = [('a',1),('b',2)]\n&gt;&gt;&gt; d = dict(l)\n&gt;&gt;&gt; d\n{'a': 1, 'b': 2}\n</code></pre>\n\n<p>From the <a href=\"http://docs.python.org/library/stdtypes.html#mapping-types-dict\" rel=\"noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <p>For example, these all return a\n  dictionary equal to {\"one\": 1, \"two\":\n  2}:</p>\n\n<pre><code>dict(one=1, two=2)\ndict({'one': 1, 'two': 2})\ndict(zip(('one', 'two'), (1, 2)))\ndict([['two', 2], ['one', 1]])\n</code></pre>\n</blockquote>\n"
                }
            ]
        },
        {
            "1238306": [
                {
                    "owner": {
                        "account_id": 1475,
                        "reputation": 544324,
                        "user_id": 1968,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/fdd630f72eef3790bfb4ef38d08c7f85?s=256&d=identicon&r=PG",
                        "display_name": "Konrad Rudolph",
                        "link": "https://stackoverflow.com/users/1968/konrad-rudolph"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1480441686,
                    "last_edit_date": 1480441686,
                    "creation_date": 1249558246,
                    "answer_id": 1238316,
                    "question_id": 1238306,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's the string formatting operator. Read up on <a href=\"http://docs.python.org/library/stdtypes.html#printf-style-string-formatting\" rel=\"noreferrer\">string formatting in Python</a>.</p>\n\n<pre><code>format % values\n</code></pre>\n\n<p>Creates a string where <code>format</code> specifies a format and <code>values</code> are the values to be filled in.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 32141,
                        "reputation": 61625,
                        "user_id": 88851,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/f42db155847d3648bc14b86bf838af06?s=256&d=identicon&r=PG",
                        "display_name": "Bastien L&#233;onard",
                        "link": "https://stackoverflow.com/users/88851/bastien-l%c3%a9onard"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1249580369,
                    "last_edit_date": 1249580369,
                    "creation_date": 1249562428,
                    "answer_id": 1238611,
                    "question_id": 1238306,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Note that starting from Python 2.6, it's recommended to use the new <a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a> method:</p>\n\n<pre><code>&gt;&gt;&gt; \"The sum of 1 + 2 is {0}\".format(1+2)\n'The sum of 1 + 2 is 3'\n</code></pre>\n\n<p>If you are using 2.6, you may want to keep using <code>%</code> in order to remain compatible with older versions, but in Python 3 there's no reason not to use <code>str.format()</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 28772,
                        "reputation": 3297,
                        "user_id": 77156,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/324e920357cb7b8312d10bc23600fdba?s=256&d=identicon&r=PG",
                        "display_name": "Diaa Sami",
                        "link": "https://stackoverflow.com/users/77156/diaa-sami"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1249558721,
                    "creation_date": 1249558721,
                    "answer_id": 1238353,
                    "question_id": 1238306,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It applies <a href=\"http://en.wikipedia.org/wiki/Printf\" rel=\"noreferrer\">printf-like formatting</a> to a string, so that you can substitute certain parts of a string with values of variables.\nExample</p>\n\n<pre><code># assuming numFiles is an int variable\nprint \"Found %d files\" % (numFiles, )\n</code></pre>\n\n<p>See the link provided by Konrad</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "lutz"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1249558317,
                    "creation_date": 1249558317,
                    "answer_id": 1238321,
                    "question_id": 1238306,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The '%' operator is used for string interpolation. Since Python 2.6 the String method \"format\" is used insted. For details see <a href=\"http://www.python.org/dev/peps/pep-3101/\" rel=\"nofollow noreferrer\">http://www.python.org/dev/peps/pep-3101/</a></p>\n"
                }
            ]
        },
        {
            "54011173": [
                {
                    "owner": {
                        "account_id": 2402163,
                        "reputation": 33360,
                        "user_id": 2099607,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e9208c4a1df963917bd2957c207fe519?s=256&d=identicon&r=PG",
                        "display_name": "today",
                        "link": "https://stackoverflow.com/users/2099607/today"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1596494117,
                    "last_edit_date": 1596494117,
                    "creation_date": 1546453386,
                    "answer_id": 54011300,
                    "question_id": 54011173,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Each layer has its own default value for initializing the weights. For most of the layers, such as <code>Dense</code>, convolution and RNN layers, the default kernel initializer is <code>'glorot_uniform'</code> and the default bias intializer is <code>'zeros'</code> (you can find this by going to the related section for each layer in the documentation; for example <a href=\"https://keras.io/api/layers/core_layers/dense/\" rel=\"noreferrer\">here</a> is the Dense layer doc). You can find the definition of <code>glorot_uniform</code> initializer <a href=\"https://keras.io/api/layers/initializers/#glorotuniform-class\" rel=\"noreferrer\">here</a> in the Keras documentation.</p>\n<p>As for accessing the weights of each layer, it has already been answered <a href=\"https://stackoverflow.com/a/54009163/2099607\">here</a>.</p>\n"
                }
            ]
        },
        {
            "16483625": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1116330,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1561077786,
                    "last_edit_date": 1561077786,
                    "creation_date": 1368193338,
                    "answer_id": 16483705,
                    "question_id": 16483625,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using <code>yield</code> turns a function into a <a href=\"http://wiki.python.org/moin/Generators\" rel=\"noreferrer\">generator</a>. A generator is a specialized type of <a href=\"http://docs.python.org/2/library/stdtypes.html#iterator-types\" rel=\"noreferrer\">iterator</a>. <code>for</code> always loops over iterables, taking each element in turn and assigning it to the name(s) you listed.</p>\n\n<p><code>spinning_cursor()</code> returns a generator, the code inside <code>spinning_cursor()</code> doesn't actually run until you start iterating over the generator. Iterating over a generator means the code in the function is executed until it comes across a <code>yield</code> statement, at which point the result of the expression there is returned as the next value and execution is paused again.</p>\n\n<p>The <code>for</code> loop does just that, it'll call the equivalent of <a href=\"http://docs.python.org/2/library/functions.html#next\" rel=\"noreferrer\"><code>next()</code></a> on the generator, until the generator signals it is done by raising <code>StopIteration</code> (which happens when the function returns). Each return value of <code>next()</code> is assigned, in turn, to <code>c</code>.</p>\n\n<p>You can see this by creating the generator on in the Python prompt:</p>\n\n<pre><code>&gt;&gt;&gt; def spinning_cursor():\n...     cursor='/-\\|'\n...     i = 0\n...     while 1:\n...         yield cursor[i]\n...         i = (i + 1) % len(cursor)\n... \n&gt;&gt;&gt; sc = spinning_cursor()\n&gt;&gt;&gt; sc\n&lt;generator object spinning_cursor at 0x107a55eb0&gt;\n&gt;&gt;&gt; next(sc)\n'/'\n&gt;&gt;&gt; next(sc)\n'-'\n&gt;&gt;&gt; next(sc)\n'\\\\'\n&gt;&gt;&gt; next(sc)\n'|'\n</code></pre>\n\n<p>This specific generator never returns, so <code>StopIteration</code> is never raised and the <code>for</code> loop will go on forever unless you kill the script.</p>\n\n<p>A far more boring (but more efficient) alternative would be to use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\" rel=\"noreferrer\"><code>itertools.cycle()</code></a>:</p>\n\n<pre><code>from itertools import cycle\n\nspinning_cursor = cycle('/-\\|')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2715814,
                        "reputation": 3135,
                        "user_id": 2343217,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/c64b74dbf2b00e41995814dcb664eb5b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "beiller",
                        "link": "https://stackoverflow.com/users/2343217/beiller"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1474272284,
                    "last_edit_date": 1474272284,
                    "creation_date": 1368193401,
                    "answer_id": 16483731,
                    "question_id": 16483625,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>the spinning_cursor function returns an iterable (a generator from yield). </p>\n\n<pre><code>for c in spinning_cursor():\n</code></pre>\n\n<p>would be the same as </p>\n\n<pre><code> for i in [1, 2, 3, 4]:\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1879174,
                        "reputation": 26670,
                        "user_id": 1699750,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/ce17126d6065d975c34973f3e55dc51b?s=256&d=identicon&r=PG",
                        "display_name": "Marwan Alsabbagh",
                        "link": "https://stackoverflow.com/users/1699750/marwan-alsabbagh"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1368199058,
                    "creation_date": 1368199058,
                    "answer_id": 16485528,
                    "question_id": 16483625,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Martijn Pieters explanation is excellent. Below is another implementation of the same code you had in the question. it uses <a href=\"http://docs.python.org/2/library/itertools.html#itertools.cycle\" rel=\"nofollow\">itertools.cycle</a> to produce the same result as <code>spinning_cursor</code>.  itertools is filled with excellent examples of iterators and functions to help create your own iterators. It might help you understand iterators better.</p>\n\n<pre><code>import sys, time, itertools\n\nfor c in itertools.cycle('/-\\|'):\n    sys.stdout.write(c)\n    sys.stdout.flush()\n    time.sleep(0.1)\n    sys.stdout.write('\\b')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 97652,
                        "reputation": 12173,
                        "user_id": 264775,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/4fd3faa6d5ece91bb8f6d2111da84f44?s=256&d=identicon&r=PG",
                        "display_name": "thegrinner",
                        "link": "https://stackoverflow.com/users/264775/thegrinner"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1368193895,
                    "last_edit_date": 1368193895,
                    "creation_date": 1368193463,
                    "answer_id": 16483751,
                    "question_id": 16483625,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <code>for c in spinning_cursor()</code> syntax is a <code>for-each</code> loop. It's going to iterate through each item in the iterator returned by <code>spinning_cursor()</code>.</p>\n\n<p>The inside of the loop will:</p>\n\n<ol>\n<li>Write the character to standard out and flush so it displays.</li>\n<li>Sleep for a tenth of a second</li>\n<li>Write <code>\\b</code>, which is interpreted as a backspace (deletes the last character). Notice this happens at the end of the loop so it won't be written during the first iteration, and that it shares the flush call in step 1.</li>\n</ol>\n\n<p><code>spinning_cursor()</code> is going to return a <a href=\"http://docs.python.org/2/tutorial/classes.html#generators\" rel=\"nofollow\">generator</a>, which doesn't actually run until you start iterating. It looks like it will loop through <code>'/-\\|'</code>, in order, forever. It's kind of like having an infinite list to iterate through.</p>\n\n<p>So, the final output is going to be an ASCII spinner. You'll see these characters (in the same spot) repeating until you kill the script.</p>\n\n<pre><code>/\n-\n\\\n|\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1072562,
                        "reputation": 7322,
                        "user_id": 1071486,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fafdf95bf6e371d0685b649453277cdc?s=256&d=identicon&r=PG",
                        "display_name": "aymericbeaumet",
                        "link": "https://stackoverflow.com/users/1071486/aymericbeaumet"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1368193436,
                    "creation_date": 1368193436,
                    "answer_id": 16483744,
                    "question_id": 16483625,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python, the for statement lets you iterate over elements.</p>\n\n<p>According the <a href=\"http://docs.python.org/2/tutorial/controlflow.html#for-statements\" rel=\"noreferrer\">documentation</a> :</p>\n\n<blockquote>\n  <p>Python\u2019s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence</p>\n</blockquote>\n\n<p>Here, the element will be the return value of <code>spinning_cursor()</code>.</p>\n"
                }
            ]
        },
        {
            "38102317": [
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user378704"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1666354432,
                    "last_edit_date": 1666354432,
                    "creation_date": 1495483051,
                    "answer_id": 44121141,
                    "question_id": 38102317,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Recently I found out that you can query PyPI's Big Query database contributed to the PSF foundation through this <a href=\"https://bigquery.cloud.google.com/table/the-psf:pypi.downloads\" rel=\"nofollow noreferrer\">link</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2264337,
                        "reputation": 1445,
                        "user_id": 1993508,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/881f90c66a0ba8c3be5e79a6c504e349?s=256&d=identicon&r=PG",
                        "display_name": "petrusqui",
                        "link": "https://stackoverflow.com/users/1993508/petrusqui"
                    },
                    "is_accepted": false,
                    "score": 120,
                    "last_activity_date": 1536304525,
                    "last_edit_date": 1536304525,
                    "creation_date": 1520716692,
                    "answer_id": 49214128,
                    "question_id": 38102317,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I just released <a href=\"https://pepy.tech/\" rel=\"noreferrer\">https://pepy.tech/</a> to view the downloads of a package. I used the data from BigQuery so you will get the same result :-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 288627,
                        "reputation": 6706,
                        "user_id": 589165,
                        "user_type": "registered",
                        "accept_rate": 45,
                        "profile_image": "https://www.gravatar.com/avatar/6ab25467e258f303d8d9a9fa75145c93?s=256&d=identicon&r=PG",
                        "display_name": "Finn &#197;rup Nielsen",
                        "link": "https://stackoverflow.com/users/589165/finn-%c3%85rup-nielsen"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1520600868,
                    "creation_date": 1520600868,
                    "answer_id": 49194517,
                    "question_id": 38102317,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The <code>pypinfo</code> program is a Python3 command-line program to BigQuery installable via pip. If you set up the credentials (a JSON file) you should be able to write:</p>\n\n<pre><code>$ pypinfo -d 1825 blist year\nServed from cache: False\nData processed: 250.31 GiB\nData billed: 250.31 GiB\nEstimated cost: $1.23\n\n| download_year | download_count |\n| ------------- | -------------- |\n|         2,017 |        443,067 |\n|         2,016 |        391,816 |\n|         2,018 |         57,689 |\n</code></pre>\n\n<p>Some information about the data collection is available at <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" rel=\"noreferrer\">https://packaging.python.org/guides/analyzing-pypi-package-downloads/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3102158,
                        "reputation": 11767,
                        "user_id": 2626000,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/66VqR.jpg?s=256",
                        "display_name": "Aaron Christiansen",
                        "link": "https://stackoverflow.com/users/2626000/aaron-christiansen"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1467210282,
                    "creation_date": 1467210282,
                    "answer_id": 38102521,
                    "question_id": 38102317,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As can be seen in <a href=\"https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html\">this mail.python.org article</a>, download stats were removed because they weren't updating and would be too difficult to fix.</p>\n\n<p>Donald Stufft, the author of the article, listed these reasons:</p>\n\n<blockquote>\n  <p>There are numerous reasons for their removal/deprecation some of which\n  are:</p>\n  \n  <ul>\n  <li>Technically hard to make work with the new CDN\n  \n  <ul>\n  <li>The CDN is being donated to the PSF, and the donated tier does not offer any form of log access</li>\n  <li>The work around for not having log access would greatly reduce the utility of the CDN</li>\n  </ul></li>\n  <li>Highly inaccurate\n  \n  <ul>\n  <li>A number of things prevent the download counts from being inaccurate, some of which include:\n  \n  <ul>\n  <li>pip download cache</li>\n  <li>Internal or unofficial mirrors</li>\n  <li>Packages not hosted on PyPI (for comparisons sake)</li>\n  <li>Mirrors or unofficial grab scripts causing inflated counts (Last I looked 25% of the downloads were from a known mirroring\n  script).</li>\n  </ul></li>\n  </ul></li>\n  <li>Not particularly useful\n  \n  <ul>\n  <li>Just because a project has been downloaded a lot doesn't mean it's good</li>\n  <li>Similarly just because a project hasn't been downloaded a lot doesn't mean it's bad</li>\n  </ul></li>\n  </ul>\n</blockquote>\n"
                }
            ]
        },
        {
            "12018992": [
                {
                    "owner": {
                        "account_id": 23567829,
                        "reputation": 11,
                        "user_id": 17608351,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/tqFHM.jpg?s=256",
                        "display_name": "finn",
                        "link": "https://stackoverflow.com/users/17608351/finn"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1647272896,
                    "last_edit_date": 1647272896,
                    "creation_date": 1647270324,
                    "answer_id": 71469912,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import random\nimport string\ns=string.digits\ndef foo(s):\n  r=random.choice(s)\n  p='('\n  p2=')'\n  str=f'{p}{r}{p2}'\n  print(str)\nfoo(s)\n</code></pre>\n<p>thank me later</p>\n"
                },
                {
                    "owner": {
                        "account_id": 354053,
                        "reputation": 142727,
                        "user_id": 1209279,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=256&d=identicon&r=PG",
                        "display_name": "Levon",
                        "link": "https://stackoverflow.com/users/1209279/levon"
                    },
                    "is_accepted": true,
                    "score": 153,
                    "last_activity_date": 1597929941,
                    "last_edit_date": 1597929941,
                    "creation_date": 1345296871,
                    "answer_id": 12019007,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<blockquote>\n<p>Using <em>print function without parentheses</em> works with older versions of Python but is <strong>no longer supported on Python3</strong>, so you have to put the arguments inside parentheses. However, there are <a href=\"https://stackoverflow.com/questions/32122868/python-3-print-without-parenthesis/32124420\">workarounds, as mentioned in the answers to this question</a>. Since the support for Python2 has ended in Jan 1st 2020, the <strong>answer has been modified to be compatible with Python3</strong>.</p>\n</blockquote>\n<p>You could do any of these (and there may be other ways):</p>\n<pre><code>(1)  print(&quot;First number is {} and second number is {}&quot;.format(first, second))\n(1b) print(&quot;First number is {first} and number is {second}&quot;.format(first=first, second=second)) \n</code></pre>\n<p>or</p>\n<pre><code>(2) print('First number is', first, 'second number is', second) \n</code></pre>\n<p><em>(Note: A space will be automatically added afterwards when separated from a comma)</em></p>\n<p>or</p>\n<pre><code>(3) print('First number %d and second number is %d' % (first, second))\n</code></pre>\n<p>or</p>\n<pre><code>(4) print('First number is ' + str(first) + ' second number is' + str(second))\n  \n</code></pre>\n<p>Using <em><a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\">format()</a></em> (1/1b) is preferred where available.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14056484,
                        "reputation": 41,
                        "user_id": 10153680,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hiHOx.jpg?s=256",
                        "display_name": "Gurdeep Singh",
                        "link": "https://stackoverflow.com/users/10153680/gurdeep-singh"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1532930898,
                    "creation_date": 1532930898,
                    "answer_id": 51587861,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.6</p>\n\n<pre><code>a, b=1, 2 \n\nprint (\"Value of variable a is: \", a, \"and Value of variable b is :\", b)\n\nprint(f\"Value of a is: {a}\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user6600549"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1529182417,
                    "creation_date": 1529182417,
                    "answer_id": 50891671,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>if you are using 3.6 try this </p>\n\n<pre><code> k = 250\n print(f\"User pressed the: {k}\")\n</code></pre>\n\n<blockquote>\n  <p><strong>Output:</strong> User pressed the: 250</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 74769,
                        "reputation": 126549,
                        "user_id": 214671,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/f82954c7134fbe63282dc033fd52f3ab?s=256&d=identicon&r=PG",
                        "display_name": "Matteo Italia",
                        "link": "https://stackoverflow.com/users/214671/matteo-italia"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1345297038,
                    "creation_date": 1345297038,
                    "answer_id": 12019026,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The other answers explain how to produce a string formatted like in your example, but if all you need to do is to <code>print</code> that stuff you could simply write:</p>\n\n<pre><code>first = 10\nsecond = 20\nprint \"First number is\", first, \"and second number is\", second\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1520477,
                        "reputation": 39341,
                        "user_id": 1420279,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=256&d=identicon&r=PG",
                        "display_name": "Antimony",
                        "link": "https://stackoverflow.com/users/1420279/antimony"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1345296842,
                    "creation_date": 1345296842,
                    "answer_id": 12019004,
                    "question_id": 12018992,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes there is. The preferred syntax is to favor <code>str.format</code> over the deprecated <code>%</code> operator.  </p>\n\n<pre><code>print \"First number is {} and second number is {}\".format(first, second)\n</code></pre>\n"
                }
            ]
        },
        {
            "17704244": [
                {
                    "owner": {
                        "account_id": 258701,
                        "reputation": 113594,
                        "user_id": 541038,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/a3a82559ae1ee7ec304fdbae095f063c?s=256&d=identicon&r=PG",
                        "display_name": "Joran Beasley",
                        "link": "https://stackoverflow.com/users/541038/joran-beasley"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1636249838,
                    "last_edit_date": 1636249838,
                    "creation_date": 1374075793,
                    "answer_id": 17704312,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Change them to rows:</p>\n<pre><code>rows = zip(list1, list2, list3, list4, list5)\n</code></pre>\n<p>Then just:</p>\n<pre><code>import csv\n\nwith open(newfilePath, &quot;w&quot;) as f:\n    writer = csv.writer(f)\n    for row in rows:\n        writer.writerow(row)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 18666111,
                        "reputation": 21,
                        "user_id": 13606026,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e2120ba031b2c64df2de0067fc608618?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "BinaryPhinary",
                        "link": "https://stackoverflow.com/users/13606026/binaryphinary"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1590345979,
                    "creation_date": 1590345979,
                    "answer_id": 61990764,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I just wanted to add to this one- because quite frankly, I banged my head against it for a while - and while very new to python - perhaps it will help someone else out.</p>\n\n<pre><code> writer.writerow((\"ColName1\", \"ColName2\", \"ColName\"))\n                 for i in range(len(first_col_list)):\n                     writer.writerow((first_col_list[i], second_col_list[i], third_col_list[i]))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15247663,
                        "reputation": 21,
                        "user_id": 11002076,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0d418e5e6fbab499a536d6629415fb7a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Bartats",
                        "link": "https://stackoverflow.com/users/11002076/bartats"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1549039588,
                    "last_edit_date": 1549039588,
                    "creation_date": 1549039241,
                    "answer_id": 54483636,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I didn't want to import anything other than csv, and all my lists have the same number of items. The top answer here seems to make the lists into one row each, instead of one column each. Thus I took the answers here and came up with this:</p>\n\n<pre><code>import csv\nlist1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = ['f', 'g', 'i', 'j','k']\nwith open('C:/test/numbers.csv', 'wb+') as myfile:\n    wr = csv.writer(myfile)\n    wr.writerow((\"list1\", \"list2\"))\n    rcount = 0\n    for row in list1:\n        wr.writerow((list1[rcount], list2[rcount]))\n        rcount = rcount + 1\n    myfile.close()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12672477,
                        "reputation": 164273,
                        "user_id": 9209546,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/qk9vC.jpg?s=256",
                        "display_name": "jpp",
                        "link": "https://stackoverflow.com/users/9209546/jpp"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1542889200,
                    "creation_date": 1542889200,
                    "answer_id": 53430890,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are happy to use a 3rd party library, you can do this with Pandas. The benefits include seamless access to specialized methods and row / column labeling:</p>\n\n<pre><code>import pandas as pd\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\n\ndf = pd.DataFrame(list(zip(*[list1, list2, list3]))).add_prefix('Col')\n\ndf.to_csv('file.csv', index=False)\n\nprint(df)\n\n   Col0  Col1  Col2\n0     1     4     7\n1     2     5     8\n2     3     6     9\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 12076505,
                        "reputation": 31,
                        "user_id": 8829758,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/603c2c73ae525bab6d85f657cfe3c96f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "shb8086",
                        "link": "https://stackoverflow.com/users/8829758/shb8086"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1539456339,
                    "creation_date": 1539456339,
                    "answer_id": 52796168,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import csv\ndic = {firstcol,secondcol} #dictionary\ncsv = open('result.csv', \"w\") \nfor key in dic.keys():\n    row =\"\\n\"+ str(key) + \",\" + str(dic[key]) \n    csv.write(row)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10981890,
                        "reputation": 3085,
                        "user_id": 8068733,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://graph.facebook.com/951541691615642/picture?type=large",
                        "display_name": "Ashok Kumar Jayaraman",
                        "link": "https://stackoverflow.com/users/8068733/ashok-kumar-jayaraman"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1510926035,
                    "creation_date": 1510926035,
                    "answer_id": 47351978,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The following code writes python lists into columns in csv</p>\n\n<pre><code>import csv\nfrom itertools import zip_longest\nlist1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = ['f', 'g', 'i', 'j']\nd = [list1, list2]\nexport_data = zip_longest(*d, fillvalue = '')\nwith open('numbers.csv', 'w', encoding=\"ISO-8859-1\", newline='') as myfile:\n      wr = csv.writer(myfile)\n      wr.writerow((\"List1\", \"List2\"))\n      wr.writerows(export_data)\nmyfile.close()\n</code></pre>\n\n<p>The output looks like this </p>\n\n<p><a href=\"https://i.sstatic.net/Limy4.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/Limy4.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1157125,
                        "reputation": 27782,
                        "user_id": 1137432,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/3c6c74e3328f48a1d99b51c95ab9f473?s=256&d=identicon&r=PG",
                        "display_name": "jh314",
                        "link": "https://stackoverflow.com/users/1137432/jh314"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1374075925,
                    "creation_date": 1374075925,
                    "answer_id": 17704370,
                    "question_id": 17704244,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <a href=\"http://docs.python.org/2/library/itertools.html#itertools.izip\" rel=\"noreferrer\"><code>izip</code></a> to combine your lists, and then iterate them</p>\n\n<pre><code>for val in itertools.izip(l1,l2,l3,l4,l5):\n    writer.writerow(val)\n</code></pre>\n"
                }
            ]
        },
        {
            "34161978": [
                {
                    "owner": {
                        "account_id": 1704572,
                        "reputation": 1150,
                        "user_id": 1563909,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3eac544cc95e988ba5f317c3bac442e3?s=256&d=identicon&r=PG",
                        "display_name": "leroyJr",
                        "link": "https://stackoverflow.com/users/1563909/leroyjr"
                    },
                    "is_accepted": true,
                    "score": 13,
                    "last_activity_date": 1645476301,
                    "last_edit_date": 1645476301,
                    "creation_date": 1449596292,
                    "answer_id": 34162413,
                    "question_id": 34161978,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For the cross product, see <a href=\"https://stackoverflow.com/questions/13269890/cartesian-product-in-pandas\">this question</a>.</p>\n<p>Essentially, you have to do a normal merge but give every row the same key to join on, so that every row is joined to each other across the frames.</p>\n<p>You can then add a column to the new frame by applying your function:</p>\n<pre><code>new_df = pd.merge(df1, df2, on=key)\nnew_df.new_col = new_df.apply(lambda row: myfunc(row['A_x'], row['A_y']), axis=1)\n</code></pre>\n<p><code>axis=1</code> forces <code>.apply</code> to work across the rows. 'A_x' and 'A_y' will be the default column names in the resulting frame if the merged frames share a column like in your example above.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8454934,
                        "reputation": 7873,
                        "user_id": 6342575,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a4b6edf7ed8b1dd1abbc0c0c3555e9a7?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "A.Kot",
                        "link": "https://stackoverflow.com/users/6342575/a-kot"
                    },
                    "is_accepted": false,
                    "score": 69,
                    "last_activity_date": 1615811853,
                    "last_edit_date": 1615811853,
                    "creation_date": 1508782398,
                    "answer_id": 46895905,
                    "question_id": 34161978,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Create a common 'key' to cross join the two:</p>\n<pre><code>df1['key'] = 0\ndf2['key'] = 0\n\ndf1.merge(df2, on='key', how='outer')\n</code></pre>\n"
                }
            ]
        },
        {
            "12813633": [
                {
                    "owner": {
                        "account_id": 200610,
                        "reputation": 55224,
                        "user_id": 446554,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/2fe5bee1c3e113262b71d6d336821b13?s=256&d=identicon&r=PG",
                        "display_name": "Cory Klein",
                        "link": "https://stackoverflow.com/users/446554/cory-klein"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1563466671,
                    "last_edit_date": 1563466671,
                    "creation_date": 1454109653,
                    "answer_id": 35095881,
                    "question_id": 12813633,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Given</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>l1 = [a,b]\nl2 = [b,a]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/3/library/unittest.html?highlight=assertcountequal#unittest.TestCase.assertCountEqual\" rel=\"noreferrer\">In Python <em>>= 3.0</em></a></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>assertCountEqual(l1, l2) # True\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/unittest.html?highlight=assertequal#unittest.TestCase.assertItemsEqual\" rel=\"noreferrer\">In Python <em>>= 2.7</em></a>, the above function was named:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>assertItemsEqual(l1, l2) # True\n</code></pre>\n\n<p><a href=\"https://pypi.python.org/pypi/unittest2\" rel=\"noreferrer\">In Python <em>&lt; 2.7</em></a></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import unittest2\nassertItemsEqual(l1, l2) # True\n</code></pre>\n\n<p><a href=\"https://six.readthedocs.io/#six.assertCountEqual\" rel=\"noreferrer\">Via <code>six</code> module</a> (Any Python version)</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import unittest\nimport six\nclass MyTest(unittest.TestCase):\n    def test(self):\n        six.assertCountEqual(self, self.l1, self.l2) # True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 68021,
                        "reputation": 8151,
                        "user_id": 198720,
                        "user_type": "registered",
                        "accept_rate": 40,
                        "profile_image": "https://www.gravatar.com/avatar/99402221c5baf0ded318b4f088725447?s=256&d=identicon&r=PG",
                        "display_name": "flazzarini",
                        "link": "https://stackoverflow.com/users/198720/flazzarini"
                    },
                    "is_accepted": true,
                    "score": 280,
                    "last_activity_date": 1533919477,
                    "last_edit_date": 1533919477,
                    "creation_date": 1438777472,
                    "answer_id": 31832447,
                    "question_id": 12813633,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of Python 3.2 <code>unittest.TestCase.assertItemsEqual</code>(<a href=\"https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertItemsEqual\" rel=\"noreferrer\">doc</a>) has been replaced by <code>unittest.TestCase.assertCountEqual</code>(<a href=\"https://docs.python.org/3.2/library/unittest.html#unittest.TestCase.assertCountEqual\" rel=\"noreferrer\">doc</a>) which does exactly what you are looking for, as you can read from the python <a href=\"https://docs.python.org/3.2/library/unittest.html\" rel=\"noreferrer\">standard library documentation</a>. The method is somewhat misleadingly named but it does exactly what you are looking for.</p>\n\n<blockquote>\n  <p>a and b have the same elements in the same number, regardless of their order</p>\n</blockquote>\n\n<p>Here a simple example which compares two lists having the same elements but in a different order.</p>\n\n<ul>\n<li>using <code>assertCountEqual</code> the test will succeed</li>\n<li>using <code>assertListEqual</code> the test will fail due to the order difference of the two lists</li>\n</ul>\n\n<p>Here a little example script.</p>\n\n<pre><code>import unittest\n\n\nclass TestListElements(unittest.TestCase):\n    def setUp(self):\n        self.expected = ['foo', 'bar', 'baz']\n        self.result = ['baz', 'foo', 'bar']\n\n    def test_count_eq(self):\n        \"\"\"Will succeed\"\"\"\n        self.assertCountEqual(self.result, self.expected)\n\n    def test_list_eq(self):\n        \"\"\"Will fail\"\"\"\n        self.assertListEqual(self.result, self.expected)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>\n\n<p><strong>Side Note :</strong> Please make sure that the elements in the lists you are comparing are sortable.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 391865,
                        "reputation": 2238,
                        "user_id": 752774,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2c46e316f0a73e5050277381245708d6?s=256&d=identicon&r=PG",
                        "display_name": "radeklos",
                        "link": "https://stackoverflow.com/users/752774/radeklos"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1427297470,
                    "last_edit_date": 1427297470,
                    "creation_date": 1427296347,
                    "answer_id": 29259512,
                    "question_id": 12813633,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Needs <strong>ensure</strong> library but you can compare list by:</p>\n\n<blockquote>\n  <p>ensure([1, 2]).contains_only([2, 1])</p>\n</blockquote>\n\n<p>This will not raise assert exception. Documentation of thin is really thin so i would recommend to look at <a href=\"https://github.com/kislyuk/ensure/blob/master/ensure/__init__.py\" rel=\"nofollow\">ensure's codes on github</a> </p>\n"
                },
                {
                    "owner": {
                        "account_id": 107107,
                        "reputation": 27481,
                        "user_id": 284947,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/01326d0a524154e0407e4270904e314c?s=256&d=identicon&r=PG",
                        "display_name": "defuz",
                        "link": "https://stackoverflow.com/users/284947/defuz"
                    },
                    "is_accepted": false,
                    "score": 63,
                    "last_activity_date": 1349856208,
                    "last_edit_date": 1349856208,
                    "creation_date": 1349853188,
                    "answer_id": 12813909,
                    "question_id": 12813633,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Slightly faster version of the implementation (If you know that most couples lists will have different lengths):</p>\n\n<pre><code>def checkEqual(L1, L2):\n    return len(L1) == len(L2) and sorted(L1) == sorted(L2)\n</code></pre>\n\n<p>Comparing: </p>\n\n<pre><code>&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1]))\n2.42745304107666\n&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1]))\n2.5644469261169434 # speed down not much (for large lists the difference tends to 0)\n\n&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1,0]))\n2.4570400714874268\n&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1,0]))\n0.9596951007843018 # speed up\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 67986,
                        "reputation": 113609,
                        "user_id": 198633,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/5b9c04999233026354268c2ee4237e04?s=256&d=identicon&r=PG",
                        "display_name": "inspectorG4dget",
                        "link": "https://stackoverflow.com/users/198633/inspectorg4dget"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1349852744,
                    "last_edit_date": 1349852744,
                    "creation_date": 1349852383,
                    "answer_id": 12813684,
                    "question_id": 12813633,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting your lists to sets will tell you that they contain the same elements. But this method cannot confirm that they contain the same number of all elements. For example, your method will fail in this case:</p>\n\n<pre><code>L1 = [1,2,2,3]\nL2 = [1,2,3,3]\n</code></pre>\n\n<p>You are likely better off sorting the two lists and comparing them:</p>\n\n<pre><code>def checkEqual(L1, L2):\n    if sorted(L1) == sorted(L2):\n        print \"the two lists are the same\"\n        return True\n    else:\n        print \"the two lists are not the same\"\n        return False\n</code></pre>\n\n<p>Note that this does not alter the structure/contents of the two lists. Rather, the sorting creates two new lists</p>\n"
                }
            ]
        },
        {
            "23741762": [
                {
                    "owner": {
                        "account_id": 78953,
                        "reputation": 12267,
                        "user_id": 224286,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/0f3d72b765bb4aed80f3138ca74606d9?s=256&d=identicon&r=PG",
                        "display_name": "Collin",
                        "link": "https://stackoverflow.com/users/224286/collin"
                    },
                    "is_accepted": true,
                    "score": 48,
                    "last_activity_date": 1400513938,
                    "creation_date": 1400513938,
                    "answer_id": 23741834,
                    "question_id": 23741762,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python supports arbitrary precision integers, meaning you're able to represent larger numbers than a normal 32 or 64 bit integer type. The <code>L</code> tells you when a literal is of this type and not a regular integer.</p>\n\n<p>Note, that <code>L</code> only shows up in the interpreter output, it's just signifying the type. If you print that result instead:</p>\n\n<pre><code>&gt;&gt;&gt; print(25 ** 25)\n88817841970012523233890533447265625\n</code></pre>\n\n<p>The <code>L</code> doesn't get printed.</p>\n\n<p>In Python 3, these types have been merged, so Python 3 outputs:</p>\n\n<pre><code>Python 3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 24 ** 24\n1333735776850284124449081472843776\n</code></pre>\n"
                }
            ]
        },
        {
            "6194499": [
                {
                    "owner": {
                        "account_id": 7929262,
                        "reputation": 21,
                        "user_id": 5987709,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/98d413b5eddafee8284ed05cdc585181?s=256&d=identicon&r=PG",
                        "display_name": "Volker Paul",
                        "link": "https://stackoverflow.com/users/5987709/volker-paul"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1597959459,
                    "creation_date": 1597959459,
                    "answer_id": 63513468,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you really need a stack, i.e. if you want to do several pushd and popd,\nsee naught101 above.</p>\n<p>If not, simply do:</p>\n<pre><code>olddir = os.getcwd()\nos.chdir('/directory/path/here')\nos.system(&quot;command to sent to minecraft&quot;)\nos.chdir(olddir)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 532255,
                        "reputation": 1101,
                        "user_id": 903337,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/40024617164314f70f7584ac09b96c1d?s=256&d=identicon&r=PG",
                        "display_name": "spiralman",
                        "link": "https://stackoverflow.com/users/903337/spiralman"
                    },
                    "is_accepted": false,
                    "score": 103,
                    "last_activity_date": 1579887742,
                    "last_edit_date": 1579887742,
                    "creation_date": 1355343082,
                    "answer_id": 13847807,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 2.5 and later, I think a better method would be using a context manager, like so:</p>\n\n<pre><code>import contextlib\nimport os\n\n\n@contextlib.contextmanager\ndef pushd(new_dir):\n    previous_dir = os.getcwd()\n    os.chdir(new_dir)\n    try:\n        yield\n    finally:\n        os.chdir(previous_dir)\n</code></pre>\n\n<p>You can then use it like the following:</p>\n\n<pre><code>with pushd('somewhere'):\n    print os.getcwd() # \"somewhere\"\n\nprint os.getcwd() # \"wherever you started\"\n</code></pre>\n\n<p>By using a context manager you will be exception and return value safe: your code will always cd back to where it started from, even if you throw an exception or return from inside the context block. </p>\n\n<p>You can also nest pushd calls in nested blocks, without having to rely on a global directory stack:</p>\n\n<pre><code>with pushd('somewhere'):\n    # do something\n    with pushd('another/place'):\n        # do something else\n    # do something back in \"somewhere\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2842726,
                        "reputation": 11,
                        "user_id": 7512922,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fde099beb6b208f869c4c38bdf72414f?s=256&d=identicon&r=PG",
                        "display_name": "Gary",
                        "link": "https://stackoverflow.com/users/7512922/gary"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1547066037,
                    "last_edit_date": 1547066037,
                    "creation_date": 1545354104,
                    "answer_id": 53877968,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Or make a class to use with 'with'</p>\n\n<pre><code>import os\n\nclass pushd: # pylint: disable=invalid-name\n    __slots__ = ('_pushstack',)\n\n    def __init__(self, dirname):\n        self._pushstack = list()\n        self.pushd(dirname)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exec_type, exec_val, exc_tb) -&gt; bool:\n        # skip all the intermediate directories, just go back to the original one.\n        if self._pushstack:\n            os.chdir(self._pushstack.pop(0)))\n        if exec_type:\n            return False\n        return True\n\n    def popd(self) -&gt; None:\n        if len(self._pushstack):\n            os.chdir(self._pushstack.pop())\n\n    def pushd(self, dirname) -&gt; None:\n        self._pushstack.append(os.getcwd())\n        os.chdir(dirname)\n\n\n    with pushd(dirname) as d:\n        ... do stuff in that dirname\n        d.pushd(\"../..\")\n        d.popd()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 73202,
                        "reputation": 19503,
                        "user_id": 210945,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/20cb8dcc17ad4334c0f8cb1ddc28bcd0?s=256&d=identicon&r=PG",
                        "display_name": "naught101",
                        "link": "https://stackoverflow.com/users/210945/naught101"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1336629376,
                    "creation_date": 1336629376,
                    "answer_id": 10528259,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>pushd</code> and <code>popd</code> have some added functionality: they store previous working directories in a stack - in other words, you can <code>pushd</code> five times, do some stuff, and <code>popd</code> five times to end up where you started. You're not using that here, but it might be useful for others searching for the questions like this. This is how you can emulate it: </p>\n\n<pre><code># initialise a directory stack\npushstack = list()\n\ndef pushdir(dirname):\n  global pushstack\n  pushstack.append(os.getcwd())\n  os.chdir(dirname)\n\ndef popdir():\n  global pushstack\n  os.chdir(pushstack.pop())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 281021,
                        "reputation": 150571,
                        "user_id": 577088,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5UZyo.jpg?s=256",
                        "display_name": "senderle",
                        "link": "https://stackoverflow.com/users/577088/senderle"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1306882996,
                    "creation_date": 1306882996,
                    "answer_id": 6194539,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No need to use <code>pushd</code> -- just use <code>os.chdir</code>:</p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/Users/me'\n&gt;&gt;&gt; os.chdir('..')\n&gt;&gt;&gt; os.getcwd()\n'/Users'\n&gt;&gt;&gt; os.chdir('me')\n&gt;&gt;&gt; os.getcwd()\n'/Users/me'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 158544,
                        "reputation": 103885,
                        "user_id": 377270,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ce60a64d7650842955b526c3c4e85d0d?s=256&d=identicon&r=PG",
                        "display_name": "sarnold",
                        "link": "https://stackoverflow.com/users/377270/sarnold"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1306882931,
                    "creation_date": 1306882931,
                    "answer_id": 6194532,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't think you can call <code>pushd</code> from within an <code>os.system()</code> call:</p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; ret = os.system(\"pushd /tmp\")\nsh: pushd: not found\n</code></pre>\n\n<p>Maybe just maybe your system actually provides a <code>pushd</code> binary that triggers a shell internal function (<strike>I think I've seen this on FreeBSD before</strike><a href=\"http://www.freebsd.org/cgi/man.cgi?query=pushd&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD+8.2-RELEASE&amp;format=html\" rel=\"nofollow\">FreeBSD has some tricks like this, but not for <code>pushd</code></a>), but the <em>current working directory</em> of a process cannot be influenced by other processes -- so your first <code>system()</code> starts a shell, runs a hypothetical <code>pushd</code>, starts a shell, runs <code>ls</code>, starts a shell, runs a hypothetical <code>popd</code>... none of which influence each other.</p>\n\n<p>You <em>can</em> use <code>os.chdir(\"/home/path/\")</code> to change path: <a href=\"http://docs.python.org/library/os.html#os-file-dir\" rel=\"nofollow\">http://docs.python.org/library/os.html#os-file-dir</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10450,
                        "reputation": 177031,
                        "user_id": 19750,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=256&d=identicon&r=PG",
                        "display_name": "Josh Lee",
                        "link": "https://stackoverflow.com/users/19750/josh-lee"
                    },
                    "is_accepted": true,
                    "score": 17,
                    "last_activity_date": 1306882732,
                    "creation_date": 1306882732,
                    "answer_id": 6194512,
                    "question_id": 6194499,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Each shell command runs in a separate process. It spawns a shell, executes the pushd command, and then the shell exits.</p>\n\n<p>Just write the commands in the same shell script:</p>\n\n<pre><code>os.system(\"cd /directory/path/here; run the commands\")\n</code></pre>\n\n<p>A nicer (perhaps) way is with the <a href=\"http://docs.python.org/library/subprocess.html\"><code>subprocess</code></a> module:</p>\n\n<pre><code>from subprocess import Popen\nPopen(\"run the commands\", shell=True, cwd=\"/directory/path/here\")\n</code></pre>\n"
                }
            ]
        },
        {
            "14714181": [
                {
                    "owner": {
                        "account_id": 24185242,
                        "reputation": 2290,
                        "user_id": 18145256,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5d7e3a791881756d23ab7631bf110a3b?s=256&d=identicon&r=PG",
                        "display_name": "rachwa",
                        "link": "https://stackoverflow.com/users/18145256/rachwa"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1655658651,
                    "creation_date": 1655658651,
                    "answer_id": 72678858,
                    "question_id": 14714181,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.eval.html\" rel=\"nofollow noreferrer\"><code>eval</code></a> here:</p>\n<pre><code>In [3]: df.eval('desired_output = data &gt;= 2.5', inplace=True)\n\nIn [4]: df\nOut[4]: \n   data  desired_output\n0     1           False\n1     2           False\n2     3            True\n3     4            True\n</code></pre>\n<p>Since <code>inplace=True</code> you don't need to assign it back to <code>df</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7089045,
                        "reputation": 11548,
                        "user_id": 5424918,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc416ef6af3b08343b5bc3be46548105?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Surya Chhetri",
                        "link": "https://stackoverflow.com/users/5424918/surya-chhetri"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1489718877,
                    "creation_date": 1489718877,
                    "answer_id": 42848345,
                    "question_id": 14714181,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>In [34]: import pandas as pd\n\nIn [35]: import numpy as np\n\nIn [36]:  df = pd.DataFrame([1,2,3,4], columns=[\"data\"])\n\nIn [37]: df\nOut[37]: \n   data\n0     1\n1     2\n2     3\n3     4\n\nIn [38]: df[\"desired_output\"] = np.where(df[\"data\"] &lt;2.5, \"False\", \"True\")\n\nIn [39]: df\nOut[39]: \n   data desired_output\n0     1          False\n1     2          False\n2     3           True\n3     4           True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1089397,
                        "reputation": 2319,
                        "user_id": 1380673,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9e2af3eb210334bedb4094a38146b56b?s=256&d=identicon&r=PG",
                        "display_name": "Jan Katins",
                        "link": "https://stackoverflow.com/users/1380673/jan-katins"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1380555939,
                    "score": 32,
                    "last_activity_date": 1380555939,
                    "last_edit_date": 1380555939,
                    "creation_date": 1360100092,
                    "answer_id": 14717374,
                    "question_id": 14714181,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just compare the column with that value:</p>\n\n<pre><code>In [9]: df = pandas.DataFrame([1,2,3,4], columns=[\"data\"])\n\nIn [10]: df\nOut[10]: \n   data\n0     1\n1     2\n2     3\n3     4\n\nIn [11]: df[\"desired\"] = df[\"data\"] &gt; 2.5\nIn [11]: df\nOut[12]: \n   data desired\n0     1   False\n1     2   False\n2     3    True\n3     4    True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 515061,
                        "reputation": 374369,
                        "user_id": 1240268,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/RN9Mw.jpg?s=256",
                        "display_name": "Andy Hayden",
                        "link": "https://stackoverflow.com/users/1240268/andy-hayden"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1360101505,
                    "creation_date": 1360101505,
                    "answer_id": 14717761,
                    "question_id": 14714181,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In this specific example, where the DataFrame is only one column, you can write this elegantly as:</p>\n\n<pre><code>df['desired_output'] = df.le(2.5)\n</code></pre>\n\n<p><em><code>le</code> tests whether elements are less than or equal 2.5, similarly <code>lt</code> for less than, <code>gt</code> and <code>ge</code>.</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 559690,
                        "reputation": 40588,
                        "user_id": 919872,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=256&d=identicon&r=PG",
                        "display_name": "Zelazny7",
                        "link": "https://stackoverflow.com/users/919872/zelazny7"
                    },
                    "is_accepted": false,
                    "score": 76,
                    "last_activity_date": 1360089328,
                    "creation_date": 1360089328,
                    "answer_id": 14714452,
                    "question_id": 14714181,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>In [1]: df\nOut[1]:\n   data\n0     1\n1     2\n2     3\n3     4\n</code></pre>\n\n<p>You want to apply a function that conditionally returns a value based on the selected dataframe column.  </p>\n\n<pre><code>In [2]: df['data'].apply(lambda x: 'true' if x &lt;= 2.5 else 'false')\nOut[2]:\n0     true\n1     true\n2    false\n3    false\nName: data\n</code></pre>\n\n<p>You can then assign that returned column to a new column in your dataframe:</p>\n\n<pre><code>In [3]: df['desired_output'] = df['data'].apply(lambda x: 'true' if x &lt;= 2.5 else 'false')\n\nIn [4]: df\nOut[4]:\n   data desired_output\n0     1           true\n1     2           true\n2     3          false\n3     4          false\n</code></pre>\n"
                }
            ]
        },
        {
            "206154": [
                {
                    "owner": {
                        "account_id": 8299,
                        "reputation": 16287,
                        "user_id": 14878,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ea5b465c21aded0b76e319f5ceeeec1e?s=256&d=identicon&r=PG",
                        "display_name": "Samat Jain",
                        "link": "https://stackoverflow.com/users/14878/samat-jain"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1242936955,
                    "score": 409,
                    "last_activity_date": 1543338749,
                    "last_edit_date": 1543338749,
                    "creation_date": 1224115522,
                    "answer_id": 206964,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong><em>Update (2016):</em></strong></p>\n\n<p>If you only need SOAP client, there is well maintained library called <a href=\"https://pypi.org/project/zeep/\" rel=\"noreferrer\">zeep</a>. It supports both Python 2 and 3 :)</p>\n\n<hr>\n\n<p><strong><em>Update:</em></strong></p>\n\n<p>Additionally to what is mentioned above, I will refer to <a href=\"https://wiki.python.org/moin/WebServices#SOAP\" rel=\"noreferrer\">Python WebServices</a> page which is always up-to-date with all actively maintained and recommended modules to <strong>SOAP</strong> and all other webservice types.</p>\n\n<hr>\n\n<p>Unfortunately, at the moment, I don't think there is a \"best\" Python SOAP library. Each of the mainstream ones available has its own pros and cons.</p>\n\n<p>Older libraries:</p>\n\n<ul>\n<li><p><a href=\"http://soapy.sourceforge.net\" rel=\"noreferrer\">SOAPy</a>: Was the \"best,\" but no longer maintained. Does not work on Python 2.5+</p></li>\n<li><p><a href=\"http://pywebsvcs.sourceforge.net\" rel=\"noreferrer\">ZSI</a>: Very painful to use, and development is slow. Has a module called \"SOAPpy\", which is different than SOAPy (above).</p></li>\n</ul>\n\n<p>\"Newer\" libraries:</p>\n\n<ul>\n<li><p><a href=\"https://fedorahosted.org/suds\" rel=\"noreferrer\">SUDS</a>: Very Pythonic, and easy to create WSDL-consuming SOAP clients. Creating SOAP servers is a little bit more difficult. (This package does not work with Python3. For Python3 see SUDS-py3)</p></li>\n<li><p><a href=\"https://pypi.org/project/suds-py3/\" rel=\"noreferrer\">SUDS-py3</a>: The Python3 version of SUDS</p></li>\n<li><p><a href=\"https://github.com/arskom/spyne\" rel=\"noreferrer\">spyne</a>: Creating servers is easy, creating clients a little bit more challenging. Documentation is somewhat lacking.</p></li>\n<li><p><a href=\"http://pypi.python.org/pypi/ladon\" rel=\"noreferrer\">ladon</a>: Creating servers is much like in soaplib (using a decorator). Ladon exposes more interfaces than SOAP at the same time without extra user code needed.</p></li>\n<li><p><a href=\"http://code.google.com/p/pysimplesoap/\" rel=\"noreferrer\">pysimplesoap</a>: very lightweight but useful for both client and server - includes a web2py server integration that ships with web2py.</p></li>\n<li><a href=\"https://github.com/kiorky/SOAPpy\" rel=\"noreferrer\">SOAPpy</a>: Distinct from the abandoned SOAPpy that's hosted at the ZSI link above, this version was actually maintained until 2011, now it seems to be abandoned too.</li>\n<li><a href=\"http://www.python.org/pypi/soaplib\" rel=\"noreferrer\">soaplib</a>: Easy to use python library for writing and calling soap web services. Webservices written with soaplib are simple, lightweight, work well with other SOAP implementations, and can be deployed as WSGI applications.</li>\n<li><a href=\"https://bitbucket.org/sboz/osa\" rel=\"noreferrer\">osa</a>: A fast/slim easy to use SOAP python client library.</li>\n</ul>\n\n<p>Of the above, I've only used SUDS personally, and I liked it a lot.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 76338,
                        "reputation": 87,
                        "user_id": 218604,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c165a0aecf4c7d35944ece5664edccc6?s=256&d=identicon&r=PG",
                        "display_name": "Christian Salamea",
                        "link": "https://stackoverflow.com/users/218604/christian-salamea"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1500562310,
                    "last_edit_date": 1500562310,
                    "creation_date": 1283286740,
                    "answer_id": 3612980,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In <em>my</em> conclusion we have this:</p>\n\n<p>Soap client side:</p>\n\n<p><strike>use <strong>only</strong> <a href=\"https://bitbucket.org/jurko/suds\" rel=\"nofollow noreferrer\">Suds-jurko</a> <strong>(updated 2016)</strong>\nsuds is well maintained and updated.</strike></p>\n\n<p><strong>UPDATE 06/2017:</strong> suds-jurko library is not updated and <a href=\"https://bitbucket.org/jurko/suds/issues/117/please-release-new-version#comment-38058760\" rel=\"nofollow noreferrer\">apparently abandoned</a>, </p>\n\n<p>I tested <a href=\"https://github.com/mvantellingen/python-zeep\" rel=\"nofollow noreferrer\">zeep</a> library but got limitations around tokens, by now just support UsernameToken, i report a <a href=\"https://github.com/mvantellingen/python-zeep/issues/27\" rel=\"nofollow noreferrer\">bug</a> to create timestamp token and author update the code to fix it.</p>\n\n<p>Zeep start good and has good <a href=\"http://docs.python-zeep.org/en/master/index.html\" rel=\"nofollow noreferrer\">documentation</a> , so i recently migrated my code from suds to zeep and works fine.</p>\n\n<p><strike>Soap server side:</p>\n\n<p>We have TGWS, soaplib (pysimplesoap not tested) IMHO use and help soaplib must be the choice.</strike></p>\n\n<p>Best regards,</p>\n"
                },
                {
                    "owner": {
                        "account_id": 23494,
                        "reputation": 1624,
                        "user_id": 58926,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7b99c2c16b156854e4ca606db6a78992?s=256&d=identicon&r=PG",
                        "display_name": "sstock",
                        "link": "https://stackoverflow.com/users/58926/sstock"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1249547611,
                    "score": 48,
                    "last_activity_date": 1339081286,
                    "last_edit_date": 1339081286,
                    "creation_date": 1249547611,
                    "answer_id": 1237630,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I followed the advice of other answers to this question and gave <a href=\"https://fedorahosted.org/suds\" rel=\"noreferrer\" title=\"SUDS\">SUDS</a> a try. After using it \"in anger\" I must agree: SUDS is very nice! Highly recommended!</p>\n\n<p>I did run into trouble calling HTTPS-based web services from behind a proxy. At the time of this writing, this affects <strong>all</strong> Python web-service clients that use <code>urllib2</code>, so I'll document the solution here. </p>\n\n<p>The <code>urllib2</code> module shipping with python 2.6.2 and below will not issue a <code>CONNECT</code> to the proxy for HTTPS-over-HTTP-proxy sessions. This results in a long timeout, or if you are lucky, an error that looks like:</p>\n\n<pre><code>abort: error: error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol\n</code></pre>\n\n<p>This was <a href=\"http://bugs.python.org/issue1424152\" rel=\"noreferrer\">issue1424152</a> on the Python bug tracker. There are patches attached to the bug report that will fix this in Python 2.x and Python 3.x. <strong>The issue is already fixed</strong>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 144622,
                        "reputation": 34926,
                        "user_id": 353820,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=256&d=identicon&r=PG",
                        "display_name": "Doug",
                        "link": "https://stackoverflow.com/users/353820/doug"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1306899313,
                    "last_edit_date": 1495540056,
                    "creation_date": 1306899313,
                    "answer_id": 6195993,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just an FYI warning for people looking at SUDS, until this ticket is resolved, SUDS does not support the \"choice\" tag in WSDL:</p>\n\n<p><a href=\"https://fedorahosted.org/suds/ticket/342\" rel=\"nofollow noreferrer\">https://fedorahosted.org/suds/ticket/342</a></p>\n\n<p>see:\n<a href=\"https://stackoverflow.com/questions/5963404/suds-and-choice-tag\">suds and choice tag</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 58697,
                        "reputation": 119,
                        "user_id": 175705,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b374b86ccaec0e93d8ff31573a28f1b6?s=256&d=identicon&r=PG",
                        "display_name": "Pratik Patel",
                        "link": "https://stackoverflow.com/users/175705/pratik-patel"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1300933906,
                    "creation_date": 1300933906,
                    "answer_id": 5414116,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>suds is pretty good. I tried SOAPpy but didn't get it to work in quite the way I needed whereas suds worked pretty much straight away. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 158017,
                        "reputation": 21,
                        "user_id": 376347,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/f2bf8a0026e07b6295fa201e94f86787?s=256&d=identicon&r=PG",
                        "display_name": "bradallen137",
                        "link": "https://stackoverflow.com/users/376347/bradallen137"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1283271523,
                    "creation_date": 1283271523,
                    "answer_id": 3611023,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I believe soaplib has deprecated its SOAP client ('sender') in favor of suds. At this point soaplib is focused on being a web framework agnostic SOAP server ('receiver'). Currently soaplib is under active development and is usually discussed in the Python SOAP mailing list:</p>\n\n<p><a href=\"http://mail.python.org/mailman/listinfo/soap\" rel=\"nofollow noreferrer\">http://mail.python.org/mailman/listinfo/soap</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 180330,
                        "reputation": 171,
                        "user_id": 413581,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/80c882040586bf1750eb0ee23c2a33c3?s=256&d=identicon&r=PG",
                        "display_name": "reingart",
                        "link": "https://stackoverflow.com/users/413581/reingart"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1281142814,
                    "creation_date": 1281142814,
                    "answer_id": 3428722,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>We released a new library: <a href=\"http://code.google.com/p/pysimplesoap/\" rel=\"nofollow noreferrer\">PySimpleSOAP</a>, that provides support for simple and functional client/server. It goals are: ease of use and flexibility (no classes, autogenerated code or xml is required), WSDL introspection and generation, WS-I standard compliance, compatibility (including Java AXIS, .NET and Jboss WS). It is included into Web2Py to enable full-stack solutions (complementing other supported protocols such as XML_RPC, JSON, AMF-RPC, etc.).</p>\n\n<p>If someone is learning SOAP or want to investigate it, I think it is a good choice to start. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 601121,
                        "reputation": 1,
                        "user_id": 296192,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/16a6a3599157ec2ec5e10b55e3fb8f17?s=256&d=identicon&r=PG",
                        "display_name": "carl",
                        "link": "https://stackoverflow.com/users/296192/carl"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1268882947,
                    "creation_date": 1268882947,
                    "answer_id": 2467401,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Im using SOAPpy with Python 2.5.3 in a production setting.</p>\n\n<p>I had to manually edit a couple of files in SOAPpy (something about header code being in the wrong place) but other than that it worked and continues to do so very reliably.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user281429"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1267120084,
                    "last_edit_date": 1267120084,
                    "creation_date": 1267117452,
                    "answer_id": 2335939,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>SUDS is easy to use, but is not guaranteed to be re-entrant. If you're keeping the WSDL Client() object around in a threaded app for better performance, there's some risk involved. The solution to this risk, the clone() method, throws the unrecoverable Python 5508 bug, which seems to print but not really throw an exception. Can be confusing, but it works. It is still by far the best Python SOAP client. </p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Mike"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1260831893,
                    "last_edit_date": 1260831893,
                    "creation_date": 1248483566,
                    "answer_id": 1180842,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>SUDS is the way to go, no question about it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7472,
                        "reputation": 46904,
                        "user_id": 13009,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/6cc09155d4a43cc770bf1e77fd87867a?s=256&d=identicon&r=PG",
                        "display_name": "Greg",
                        "link": "https://stackoverflow.com/users/13009/greg"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1224118824,
                    "last_edit_date": 1495542899,
                    "creation_date": 1224118824,
                    "answer_id": 207074,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As I suggested <a href=\"https://stackoverflow.com/questions/115316/how-can-i-consume-a-wsdl-soap-web-service-in-python#115702\">here</a> I recommend you roll your own.  It's actually not that difficult and I suspect that's the reason there aren't better Python SOAP libraries out there.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Rajesh"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1224101099,
                    "score": 19,
                    "last_activity_date": 1224101099,
                    "creation_date": 1224101099,
                    "answer_id": 206186,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I had good experience with SUDS\n<a href=\"https://fedorahosted.org/suds\" rel=\"noreferrer\">https://fedorahosted.org/suds</a></p>\n\n<p>Used their TestSuite as documentation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 15421,
                        "reputation": 30865,
                        "user_id": 32538,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/u8ueG.png?s=256",
                        "display_name": "Kirk Strauser",
                        "link": "https://stackoverflow.com/users/32538/kirk-strauser"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1224100756,
                    "creation_date": 1224100756,
                    "answer_id": 206174,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>We'd used SOAPpy from <a href=\"http://pywebsvcs.sourceforge.net/\" rel=\"nofollow noreferrer\">Python Web Services</a>, but it seems that ZSI (same source) is replacing it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1676,
                        "reputation": 70156,
                        "user_id": 2260,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/7adfa37e16d44badfc22e2b1d9a78bca?s=256&d=identicon&r=PG",
                        "display_name": "Daren Thomas",
                        "link": "https://stackoverflow.com/users/2260/daren-thomas"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1224100613,
                    "creation_date": 1224100613,
                    "answer_id": 206167,
                    "question_id": 206154,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Could this help: <a href=\"http://users.skynet.be/pascalbotte/rcx-ws-doc/python.htm#SOAPPY\" rel=\"nofollow noreferrer\">http://users.skynet.be/pascalbotte/rcx-ws-doc/python.htm#SOAPPY</a></p>\n\n<p>I found it by searching for <code>wsdl</code> and <code>python</code>, with the rational being, that you would need a wsdl description of a SOAP server to do any useful client wrappers....</p>\n"
                }
            ]
        },
        {
            "3188048": [
                {
                    "owner": {
                        "account_id": 341403,
                        "reputation": 2626,
                        "user_id": 671988,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://i.sstatic.net/Of5uX.jpg?s=256",
                        "display_name": "Mohammad Banisaeid",
                        "link": "https://stackoverflow.com/users/671988/mohammad-banisaeid"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1514804594,
                    "creation_date": 1514804594,
                    "answer_id": 48049110,
                    "question_id": 3188048,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"noreferrer\"><code>partial</code></a> and <a href=\"https://docs.python.org/3/library/functools.html#functools.update_wrapper\" rel=\"noreferrer\"><code>update_wrapper</code></a> to bind arguments to given values and <em>preserve</em> <code>__name__</code> and <code>__doc__</code> of the original function:</p>\n\n<pre><code>from functools import partial, update_wrapper\n\n\ndef f(a, b, c):\n    print(a, b, c)\n\n\nbound_f = update_wrapper(partial(f, 1000), f)\n\n# This will print 'f'\nprint(bound_f.__name__)\n\n# This will print 1000, 4, 5\nbound_f(4, 5)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2647040,
                        "reputation": 21535,
                        "user_id": 2289509,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/F51FU.jpg?s=256",
                        "display_name": "Elazar",
                        "link": "https://stackoverflow.com/users/2289509/elazar"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1511043991,
                    "last_edit_date": 1511043991,
                    "creation_date": 1470403682,
                    "answer_id": 38790515,
                    "question_id": 3188048,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As suggested by MattH's <a href=\"https://stackoverflow.com/a/3188134/2289509\">answer</a>, <code>functools.partial</code> is the way to go. </p>\n\n<p>However, your question can be read as \"how can I implement <code>partial</code>\". What your code is missing is the use of <a href=\"https://stackoverflow.com/q/36901/2289509\"><code>*args</code>, <code>**kwargs</code></a>- 2 such uses, actually:</p>\n\n<pre><code>def partial(f, *args, **kwargs):\n    def wrapped(*args2, **kwargs2):\n        return f(*args, *args2, **kwargs, **kwargs2)\n    return wrapped\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 99059,
                        "reputation": 38177,
                        "user_id": 267781,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/68a8fe57dcd1a8717c20703c7f1bf91d?s=256&d=identicon&r=PG",
                        "display_name": "MattH",
                        "link": "https://stackoverflow.com/users/267781/matth"
                    },
                    "is_accepted": true,
                    "score": 154,
                    "last_activity_date": 1470400872,
                    "last_edit_date": 1470400872,
                    "creation_date": 1278433225,
                    "answer_id": 3188134,
                    "question_id": 3188048,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt; from functools import partial\n&gt;&gt;&gt; def f(a, b, c):\n...   print a, b, c\n...\n&gt;&gt;&gt; bound_f = partial(f, 1)\n&gt;&gt;&gt; bound_f(2, 3)\n1 2 3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 36572,
                        "reputation": 598779,
                        "user_id": 104349,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Roseman",
                        "link": "https://stackoverflow.com/users/104349/daniel-roseman"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1278432987,
                    "creation_date": 1278432987,
                    "answer_id": 3188092,
                    "question_id": 3188048,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You probably want the <a href=\"http://docs.python.org/library/functools.html#functools.partial\" rel=\"noreferrer\"><code>partial</code></a> function from functools.</p>\n"
                }
            ]
        },
        {
            "5891410": [
                {
                    "owner": {
                        "account_id": 2101924,
                        "reputation": 123,
                        "user_id": 12092312,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/54bhu.png?s=256",
                        "display_name": "Gabriel Soranzo",
                        "link": "https://stackoverflow.com/users/12092312/gabriel-soranzo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1653380487,
                    "creation_date": 1653380487,
                    "answer_id": 72359504,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>We could also write</p>\n<pre class=\"lang-py prettyprint-override\"><code>v=7\nn=5\na=np.linspace(v,v,n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10035703,
                        "reputation": 586,
                        "user_id": 7420421,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e90fde02f3cf18c3d4de898c63a87735?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "User9123",
                        "link": "https://stackoverflow.com/users/7420421/user9123"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1643137666,
                    "creation_date": 1643137666,
                    "answer_id": 70854301,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.broadcast_to.html\" rel=\"nofollow noreferrer\"><code>np.broadcast_to</code></a>.</p>\n<p>To create an array of shape (dimensions) <code>s</code> and of value <code>v</code>, you can do (in your case, the array is 1-D, and <code>s = (n,)</code>):</p>\n<pre class=\"lang-py prettyprint-override\"><code>a = np.broadcast_to(v, s).copy()\n</code></pre>\n<p>if <code>a</code> only needs to be read-only, you can use the following (which is way more efficient):</p>\n<pre class=\"lang-py prettyprint-override\"><code>a = np.broadcast_to(v, s)\n</code></pre>\n<p>The advantage is that <code>v</code> can be given as a single number, but also as an array if different values are desired (as long as <code>v.shape</code> matches the tail of <code>s</code>).</p>\n<p><strong>Bonus:</strong> if you want to force the <code>dtype</code> of the created array:</p>\n<pre class=\"lang-py prettyprint-override\"><code>a = np.broadcast_to(np.asarray(v, dtype), s).copy()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 144356,
                        "reputation": 58432,
                        "user_id": 353337,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/500a1e2e864ae08f386afde2cd21add0?s=256&d=identicon&r=PG",
                        "display_name": "Nico Schl&#246;mer",
                        "link": "https://stackoverflow.com/users/353337/nico-schl%c3%b6mer"
                    },
                    "is_accepted": false,
                    "score": 54,
                    "last_activity_date": 1629054622,
                    "last_edit_date": 1629054622,
                    "creation_date": 1499244383,
                    "answer_id": 44921249,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had  <code>np.array(n * [value])</code> in mind, but apparently that is slower than all other suggestions for large enough <code>n</code>. The best in terms of readability and speed is</p>\n<pre class=\"lang-py prettyprint-override\"><code>np.full(n, 3.14)\n</code></pre>\n<p>Here is full comparison with <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\">perfplot</a> (a pet project of mine).</p>\n<p><a href=\"https://i.sstatic.net/YNe6v.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/YNe6v.png\" alt=\"enter image description here\" /></a></p>\n<p>The two <code>empty</code> alternatives are still the fastest (with NumPy 1.12.1). <code>full</code> catches up for large arrays.</p>\n<hr />\n<p>Code to generate the plot:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\nimport perfplot\n\n\ndef empty_fill(n):\n    a = np.empty(n)\n    a.fill(3.14)\n    return a\n\n\ndef empty_colon(n):\n    a = np.empty(n)\n    a[:] = 3.14\n    return a\n\n\ndef ones_times(n):\n    return 3.14 * np.ones(n)\n\n\ndef repeat(n):\n    return np.repeat(3.14, (n))\n\n\ndef tile(n):\n    return np.repeat(3.14, [n])\n\n\ndef full(n):\n    return np.full((n), 3.14)\n\n\ndef list_to_array(n):\n    return np.array(n * [3.14])\n\n\nperfplot.show(\n    setup=lambda n: n,\n    kernels=[empty_fill, empty_colon, ones_times, repeat, tile, full, list_to_array],\n    n_range=[2 ** k for k in range(27)],\n    xlabel=&quot;len(a)&quot;,\n    logx=True,\n    logy=True,\n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1724919,
                        "reputation": 13321,
                        "user_id": 1579844,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/9b77e62c9cb30d0021971babac69b6a2?s=256&d=identicon&r=PG",
                        "display_name": "Yariv",
                        "link": "https://stackoverflow.com/users/1579844/yariv"
                    },
                    "is_accepted": false,
                    "score": 118,
                    "last_activity_date": 1623345373,
                    "last_edit_date": 1623345373,
                    "creation_date": 1351091980,
                    "answer_id": 13052254,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Updated for Numpy 1.7.0:</strong>(Hat-tip to @Rolf Bartstra.)</p>\n<p><code>a=np.empty(n); a.fill(5)</code> is fastest.</p>\n<p>In descending speed order:</p>\n<pre><code>%timeit a=np.empty(10000); a.fill(5)\n100000 loops, best of 3: 5.85 us per loop\n\n%timeit a=np.empty(10000); a[:]=5 \n100000 loops, best of 3: 7.15 us per loop\n\n%timeit a=np.ones(10000)*5\n10000 loops, best of 3: 22.9 us per loop\n\n%timeit a=np.repeat(5,(10000))\n10000 loops, best of 3: 81.7 us per loop\n\n%timeit a=np.tile(5,[10000])\n10000 loops, best of 3: 82.9 us per loop\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7959800,
                        "reputation": 750,
                        "user_id": 6007952,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jUkiv.jpg?s=256",
                        "display_name": "tnusraddinov",
                        "link": "https://stackoverflow.com/users/6007952/tnusraddinov"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1531141370,
                    "creation_date": 1531141370,
                    "answer_id": 51246257,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>without numpy</p>\n\n<pre><code>&gt;&gt;&gt;[2]*3\n[2, 2, 2]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15146,
                        "reputation": 43540,
                        "user_id": 31676,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/1e5e14a22b27a69b3d9fd5c7b05126d8?s=256&d=identicon&r=PG",
                        "display_name": "Paul",
                        "link": "https://stackoverflow.com/users/31676/paul"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1459872646,
                    "last_edit_date": 1459872646,
                    "creation_date": 1304556059,
                    "answer_id": 5891447,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I believe <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.fill.html\"><code>fill</code></a> is the fastest way to do this.</p>\n\n<pre><code>a = np.empty(10)\na.fill(7)\n</code></pre>\n\n<p>You should also always avoid iterating like you are doing in your example.  A simple <code>a[:] = v</code> will accomplish what your iteration does using numpy <a href=\"http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\">broadcasting</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18661,
                        "reputation": 94267,
                        "user_id": 42973,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/e1e331c88fcddfe245f4be299389270d?s=256&d=identicon&r=PG",
                        "display_name": "Eric O. Lebigot",
                        "link": "https://stackoverflow.com/users/42973/eric-o-lebigot"
                    },
                    "is_accepted": true,
                    "score": 563,
                    "last_activity_date": 1459868605,
                    "last_edit_date": 1459868605,
                    "creation_date": 1387182249,
                    "answer_id": 20606278,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>NumPy\u00a01.8 introduced <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.full.html\"><code>np.full()</code></a>, which is a more direct method than <code>empty()</code> followed by <code>fill()</code> for creating an array filled with a certain value:</p>\n\n<pre><code>&gt;&gt;&gt; np.full((3, 5), 7)\narray([[ 7.,  7.,  7.,  7.,  7.],\n       [ 7.,  7.,  7.,  7.,  7.],\n       [ 7.,  7.,  7.,  7.,  7.]])\n\n&gt;&gt;&gt; np.full((3, 5), 7, dtype=int)\narray([[7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7]])\n</code></pre>\n\n<p>This is arguably <em>the</em> way of creating an array filled with certain values, because it explicitly describes what is being achieved (and it can in principle be very efficient since it performs a very specific task).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1901637,
                        "reputation": 1773,
                        "user_id": 1717384,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/96941d54a44e39ca70683d19c9495be0?s=256&d=identicon&r=PG",
                        "display_name": "Rolf Bartstra",
                        "link": "https://stackoverflow.com/users/1717384/rolf-bartstra"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1352124477,
                    "last_edit_date": 1352124477,
                    "creation_date": 1352123146,
                    "answer_id": 13233386,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Apparently, not only the absolute speeds but also the speed <em>order</em> (as reported by user1579844) are machine dependent; here's what I found:</p>\n\n<p><code>a=np.empty(1e4); a.fill(5)</code> is fastest;</p>\n\n<p>In descending speed order:</p>\n\n<pre><code>timeit a=np.empty(1e4); a.fill(5) \n# 100000 loops, best of 3: 10.2 us per loop\ntimeit a=np.empty(1e4); a[:]=5\n# 100000 loops, best of 3: 16.9 us per loop\ntimeit a=np.ones(1e4)*5\n# 100000 loops, best of 3: 32.2 us per loop\ntimeit a=np.tile(5,[1e4])\n# 10000 loops, best of 3: 90.9 us per loop\ntimeit a=np.repeat(5,(1e4))\n# 10000 loops, best of 3: 98.3 us per loop\ntimeit a=np.array([5]*int(1e4))\n# 1000 loops, best of 3: 1.69 ms per loop (slowest BY FAR!)\n</code></pre>\n\n<p>So, try and find out, and use what's fastest on your platform.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1901637,
                        "reputation": 1773,
                        "user_id": 1717384,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/96941d54a44e39ca70683d19c9495be0?s=256&d=identicon&r=PG",
                        "display_name": "Rolf Bartstra",
                        "link": "https://stackoverflow.com/users/1717384/rolf-bartstra"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1351007467,
                    "creation_date": 1351007467,
                    "answer_id": 13034424,
                    "question_id": 5891410,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <code>numpy.tile</code>, e.g. :</p>\n\n<pre><code>v = 7\nrows = 3\ncols = 5\na = numpy.tile(v, (rows,cols))\na\nOut[1]: \narray([[7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7]])\n</code></pre>\n\n<p>Although <code>tile</code> is meant to 'tile' an array (instead of a scalar, as in this case), it will do the job, creating pre-filled arrays of any size and dimension.</p>\n"
                }
            ]
        },
        {
            "4302166": [
                {
                    "owner": {
                        "account_id": 2408729,
                        "reputation": 3191,
                        "user_id": 5681083,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-fw-gVyfmLOA/AAAAAAAAAAI/AAAAAAAABEE/DcdcZDdINWQ/photo.jpg?sz=256",
                        "display_name": "Praveen Kulkarni",
                        "link": "https://stackoverflow.com/users/5681083/praveen-kulkarni"
                    },
                    "is_accepted": false,
                    "score": 35,
                    "last_activity_date": 1556027288,
                    "creation_date": 1556027288,
                    "answer_id": 55812766,
                    "question_id": 4302166,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For those who want to do the same thing with python 3.6+ and <a href=\"https://realpython.com/python-f-strings/\" rel=\"noreferrer\">f-Strings</a> this is the solution.</p>\n\n<pre><code>width = 20\npy, vg = \"Python\", \"Very Good\"\nprint(f\"{py:&gt;{width}s} : {vg:&gt;{width}s}\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3726276,
                        "reputation": 61145,
                        "user_id": 3100115,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/Jp31ocf2.jpg?s=256",
                        "display_name": "Sede",
                        "link": "https://stackoverflow.com/users/3100115/sede"
                    },
                    "is_accepted": false,
                    "score": 129,
                    "last_activity_date": 1476368637,
                    "last_edit_date": 1476368637,
                    "creation_date": 1459967697,
                    "answer_id": 36459595,
                    "question_id": 4302166,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can do this using the <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a> method.</p>\n\n<pre><code>&gt;&gt;&gt; width = 20\n&gt;&gt;&gt; print(\"{:&gt;{width}} : {:&gt;{width}}\".format(\"Python\", \"Very Good\", width=width))\n              Python :            Very Good\n</code></pre>\n\n<p>Starting from Python 3.6 you can use <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals\" rel=\"noreferrer\"><code>f-string</code></a> to do this:</p>\n\n<pre><code>In [579]: lang = 'Python'\n\nIn [580]: adj = 'Very Good'\n\nIn [581]: width = 20\n\nIn [582]: f'{lang:&gt;{width}}: {adj:&gt;{width}}'\nOut[582]: '              Python:            Very Good'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248321,
                        "reputation": 61143,
                        "user_id": 523612,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4ae512dd708a619496d36b1f681f95e0?s=256&d=identicon&r=PG",
                        "display_name": "Karl Knechtel",
                        "link": "https://stackoverflow.com/users/523612/karl-knechtel"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1291022515,
                    "creation_date": 1291022515,
                    "answer_id": 4302315,
                    "question_id": 4302166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you don't want to specify the widths at the same time, you can prepare a format string ahead of time, like you were doing - but with another substitution. We use <code>%%</code> to escape actual % signs in a string. We want to end up with <code>%20s</code> in our format string when the width is 20, so we use <code>%%%ds</code> and supply the width variable to substitute in there. The first two % signs become a literal %, and then %d is substituted with the variable.</p>\n\n<p>Thus:</p>\n\n<pre><code>format_template = '%%%ds : %%%ds'\n# later:\nwidth = 20\nformatter = format_template % (width, width)\n# even later:\nprint formatter % ('Python', 'Very Good')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 212100,
                        "reputation": 262609,
                        "user_id": 464709,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0ab3363d257d780bd4c1f0c844b020a2?s=256&d=identicon&r=PG",
                        "display_name": "Fr&#233;d&#233;ric Hamidi",
                        "link": "https://stackoverflow.com/users/464709/fr%c3%a9d%c3%a9ric-hamidi"
                    },
                    "is_accepted": true,
                    "score": 43,
                    "last_activity_date": 1291021691,
                    "last_edit_date": 1291021691,
                    "creation_date": 1291021339,
                    "answer_id": 4302182,
                    "question_id": 4302166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can fetch the padding value from the argument list:</p>\n\n<pre><code>print '%*s : %*s' % (20, \"Python\", 20, \"Very Good\")\n</code></pre>\n\n<p>You can even insert the padding values dynamically:</p>\n\n<pre><code>width = 20\nargs = (\"Python\", \"Very Good\")\npadded_args = zip([width] * len(args), args)\n# Flatten the padded argument list.\nprint \"%*s : %*s\" % tuple([item for list in padded_args for item in list])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796968,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1291021345,
                    "creation_date": 1291021345,
                    "answer_id": 4302183,
                    "question_id": 4302166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>print '%*s : %*s' % (width, 'Python', width, 'Very Good')\n</code></pre>\n"
                }
            ]
        }
    ]
}