{
    "items": [
        {
            "26320899": [
                {
                    "owner": {
                        "account_id": 20026,
                        "reputation": 81798,
                        "user_id": 47453,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/412dc332ab3593c636e5a5202cf98870?s=256&d=identicon&r=PG",
                        "display_name": "Bill Lynch",
                        "link": "https://stackoverflow.com/users/47453/bill-lynch"
                    },
                    "is_accepted": false,
                    "score": 331,
                    "last_activity_date": 1732875069,
                    "last_edit_date": 1732875069,
                    "creation_date": 1413077177,
                    "answer_id": 26320938,
                    "question_id": 26320899,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let's look at an example:</p>\n<pre><code>def f(key, value, my_dict={}):\n    my_dict[key] = value\n    return my_dict\n\nprint(f('a', 1))\nprint(f('b', 2))\n</code></pre>\n<p>Which you probably expect to output:</p>\n<pre><code>{'a': 1}\n{'b': 2}\n</code></pre>\n<p>But actually outputs:</p>\n<pre><code>{'a': 1}\n{'a': 1, 'b': 2}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3057,
                        "reputation": 248198,
                        "user_id": 4323,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/qqgFU.png?s=256",
                        "display_name": "John Zwinck",
                        "link": "https://stackoverflow.com/users/4323/john-zwinck"
                    },
                    "is_accepted": true,
                    "score": 298,
                    "last_activity_date": 1413076975,
                    "creation_date": 1413076975,
                    "answer_id": 26320917,
                    "question_id": 26320899,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's dangerous only if your function will modify the argument.  If you modify a default argument, it will persist until the next call, so your \"empty\" dict will start to contain values on calls other than the first one.</p>\n\n<p>Yes, using <code>None</code> is both safe and conventional in such cases.</p>\n"
                }
            ]
        },
        {
            "9347078": [
                {
                    "owner": {
                        "account_id": 1217314,
                        "reputation": 16066,
                        "user_id": 1184641,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/31ee5565d022bd50b3e21f34f102f957?s=256&d=identicon&r=PG",
                        "display_name": "Appleman1234",
                        "link": "https://stackoverflow.com/users/1184641/appleman1234"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1548384792,
                    "last_edit_date": 1548384792,
                    "creation_date": 1329639458,
                    "answer_id": 9347724,
                    "question_id": 9347078,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>See the following libraries.</p>\n\n<ul>\n<li><a href=\"https://code.google.com/archive/p/suffixtree/\" rel=\"nofollow noreferrer\">suffixtree</a></li>\n<li><a href=\"https://github.com/kvh/Python-Suffix-Tree\" rel=\"nofollow noreferrer\">Python-Suffix-Tree</a> </li>\n<li><a href=\"https://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/\" rel=\"nofollow noreferrer\">SuffixTree</a></li>\n<li><a href=\"http://www.daimi.au.dk/~mailund/suffix_tree.html\" rel=\"nofollow noreferrer\">SuffixTree</a> (same name different project, supports generalized suffix trees)</li>\n<li><a href=\"https://code.google.com/archive/p/pysuffix/\" rel=\"nofollow noreferrer\">pysuffix</a> (This is suffix arrays)</li>\n</ul>\n"
                }
            ]
        },
        {
            "14278664": [
                {
                    "owner": {
                        "account_id": 449780,
                        "reputation": 10214,
                        "user_id": 844759,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/65771458eb066098b716e6ee31df1738?s=256&d=identicon&r=PG",
                        "display_name": "Hui Zheng",
                        "link": "https://stackoverflow.com/users/844759/hui-zheng"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1357911458,
                    "last_edit_date": 1357911458,
                    "creation_date": 1357909215,
                    "answer_id": 14278732,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try:</p>\n\n<pre><code>sum([['a','b','c'], ['d','e','f']], [])\n</code></pre>\n\n<p>Or longer but faster:</p>\n\n<pre><code>[i for l in [['a', 'b', 'c'], ['d', 'e', 'f']] for i in l]\n</code></pre>\n\n<p>Or use <code>itertools.chain</code> as @AshwiniChaudhary suggested:</p>\n\n<pre><code>list(itertools.chain(*[['a', 'b', 'c'], ['d', 'e', 'f']]))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2209280,
                        "reputation": 1319,
                        "user_id": 1951653,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b3ea665190af328962fbd213ef898929?s=256&d=identicon&r=PG",
                        "display_name": "Kiwisauce",
                        "link": "https://stackoverflow.com/users/1951653/kiwisauce"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1357910062,
                    "creation_date": 1357910062,
                    "answer_id": 14278964,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try the \"extend\" method of a list object:</p>\n\n<pre><code> &gt;&gt;&gt; res = []\n &gt;&gt;&gt; for list_to_extend in range(0, 10), range(10, 20):\n         res.extend(list_to_extend)\n &gt;&gt;&gt; res\n [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n</code></pre>\n\n<p>Or shorter:</p>\n\n<pre><code>&gt;&gt;&gt; res = []\n&gt;&gt;&gt; map(res.extend, ([1, 2, 3], [4, 5, 6]))\n&gt;&gt;&gt; res\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1788935,
                        "reputation": 3857,
                        "user_id": 1629755,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ac5c9b83c1963291b3f5520719f7996?s=256&d=identicon&r=PG",
                        "display_name": "Ketouem",
                        "link": "https://stackoverflow.com/users/1629755/ketouem"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1357909797,
                    "creation_date": 1357909797,
                    "answer_id": 14278905,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using list comprehension:</p>\n\n<pre><code>ar = [['a','b','c'],['d','e','f']]\nconcat_list = [j for i in ar for j in i]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 228179,
                        "reputation": 12547,
                        "user_id": 490332,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/4277666449f41474561f867f04f32b73?s=256&d=identicon&r=PG",
                        "display_name": "Harpal",
                        "link": "https://stackoverflow.com/users/490332/harpal"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1357909252,
                    "creation_date": 1357909252,
                    "answer_id": 14278749,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>mergedlist = list_letters[0] + list_letters[1]\n</code></pre>\n\n<p>This assumes you have a list of a static length and you always want to merge the first two</p>\n\n<pre><code>&gt;&gt;&gt; list_letters=[['a','b'],['c','d']]\n&gt;&gt;&gt; list_letters[0]+list_letters[1]\n['a', 'b', 'c', 'd']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1730353,
                        "reputation": 48474,
                        "user_id": 1651941,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/a513bc1fa519d2fcf5e4e0d9b5500101?s=256&d=identicon&r=PG",
                        "display_name": "Sibi",
                        "link": "https://stackoverflow.com/users/1651941/sibi"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1357909172,
                    "creation_date": 1357909172,
                    "answer_id": 14278718,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This would do:</p>\n\n<pre><code>a = [['a','b','c'],['d','e','f']]\nreduce(lambda x,y:x+y,a)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 192010,
                        "reputation": 10580,
                        "user_id": 432913,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/2fe7355b33d1b0bd79b1224691b00841?s=256&d=identicon&r=PG",
                        "display_name": "will",
                        "link": "https://stackoverflow.com/users/432913/will"
                    },
                    "is_accepted": true,
                    "score": 21,
                    "last_activity_date": 1357909138,
                    "creation_date": 1357909138,
                    "answer_id": 14278710,
                    "question_id": 14278664,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>list concatenation is just done with the <code>+</code> operator.</p>\n\n<p>so </p>\n\n<pre><code>total = []\nfor i in [['a','b','c'],['d','e','f']]:\n    total += i\n\nprint total\n</code></pre>\n"
                }
            ]
        },
        {
            "52297740": [
                {
                    "owner": {
                        "account_id": 16386613,
                        "reputation": 37,
                        "user_id": 11836432,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-xFSfaZawQtM/AAAAAAAAAAI/AAAAAAAAAAc/gmAtpKBAt6g/photo.jpg?sz=256",
                        "display_name": "aryan aryan",
                        "link": "https://stackoverflow.com/users/11836432/aryan-aryan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1631079117,
                    "last_edit_date": 1631079117,
                    "creation_date": 1631078663,
                    "answer_id": 69097391,
                    "question_id": 52297740,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In this type, we will see that we have some column values that are nan or empty so we were not able to do this. Hence, when you applied the code as here given below it, will work.</p>\n<pre><code>df_pcc_mod = df_pcc_mod[~df_pcc_mod['Invoice'].str.contains('Reversed',na=False)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860580,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": true,
                    "score": 169,
                    "last_activity_date": 1536763119,
                    "creation_date": 1536763119,
                    "answer_id": 52297788,
                    "question_id": 52297740,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I think there are <code>NaN</code>s values, so need specify parameter <code>na</code>:</p>\n\n<pre><code>df = pd.DataFrame({\n    'column': ['Total','a',np.nan],\n    'B': list(range(3))\n})\nprint (df)\n  column  B\n0  Total  0\n1      a  1\n2    NaN  2\n\ndf = df[~df[\"column\"].str.contains(\"Total\", na=False)]\nprint (df)\n  column  B\n1      a  1\n2    NaN  2\n</code></pre>\n"
                }
            ]
        },
        {
            "19243020": [
                {
                    "owner": {
                        "account_id": 156080,
                        "reputation": 35197,
                        "user_id": 373151,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/b8ac2a874b3037fc8afea92cf222ff12?s=256&d=identicon&r=PG",
                        "display_name": "Hari Menon",
                        "link": "https://stackoverflow.com/users/373151/hari-menon"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1381222694,
                    "last_edit_date": 1381222694,
                    "creation_date": 1381222063,
                    "answer_id": 19243080,
                    "question_id": 19243020,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/2/library/os.html#os.popen\" rel=\"noreferrer\"><code>os.popen()</code></a>:</p>\n\n<pre><code>tmp = os.popen(\"ls\").read()\n</code></pre>\n\n<p>The newer way (> python 2.6) to do this is to use <a href=\"http://docs.python.org/2/library/subprocess.html#subprocess-replacements\" rel=\"noreferrer\"><code>subprocess</code></a>:</p>\n\n<pre><code>proc = subprocess.Popen('ls', stdout=subprocess.PIPE)\ntmp = proc.stdout.read()\n</code></pre>\n"
                }
            ]
        },
        {
            "2580497": [
                {
                    "owner": {
                        "account_id": 5156519,
                        "reputation": 3810,
                        "user_id": 5272567,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/kp0bT.png?s=256",
                        "display_name": "Matthias",
                        "link": "https://stackoverflow.com/users/5272567/matthias"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1655734868,
                    "creation_date": 1655734868,
                    "answer_id": 72688593,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To put the main thing of some of the other answers a bit clearer, you can create columns dynamically by adding them to a list and then doing</p>\n<pre><code>table = Table(\n    table_name,\n    meta,\n    *columns\n)\n</code></pre>\n<p>But this is perhaps a python thing more than a sqlalchemy thing, to realize you can unpack the list into function arguments with <code>*</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1226232,
                        "reputation": 157,
                        "user_id": 1191714,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a585b846f74a5336d0bc48888b873ab?s=256&d=identicon&r=PG",
                        "display_name": "trash80",
                        "link": "https://stackoverflow.com/users/1191714/trash80"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1328511837,
                    "creation_date": 1328511837,
                    "answer_id": 9156660,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I used nosklo's solution (thanks!) but I already had a primary key (passed in as pk_col) within the column line (first line of csv). So I thought I'd share my modification. I used a ternary. </p>\n\n<pre><code>table = Table(tablename, metadata,\n    *((Column(pk_col, Integer, primary_key=True)) if rowname == pk_col else (Column(rowname, String())) for rowname in row.keys()))\ntable.create()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222336,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": true,
                    "score": 67,
                    "last_activity_date": 1270501879,
                    "last_edit_date": 1270501879,
                    "creation_date": 1270494958,
                    "answer_id": 2580543,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's <a href=\"http://docs.python.org/library/sqlite3\" rel=\"noreferrer\"><code>sqlite3</code></a>, included into python. With it you can create a database (<strong>on memory</strong>) and add rows to it, and perform SQL queries.</p>\n\n<p>If you want neat ActiveRecord-like functionality you should add an external ORM, like <a href=\"http://sqlalchemy.org\" rel=\"noreferrer\">sqlalchemy</a>. That's a separate download though</p>\n\n<p>Quick example using sqlalchemy:</p>\n\n<pre><code>from sqlalchemy import create_engine, Column, String, Integer, MetaData, Table\nfrom sqlalchemy.orm import mapper, create_session\nimport csv\nCSV_FILE = 'foo.csv'\nengine = create_engine('sqlite://') # memory-only database\n\ntable = None\nmetadata = MetaData(bind=engine)\nwith open(CSV_FILE) as f:\n    # assume first line is header\n    cf = csv.DictReader(f, delimiter=',')\n    for row in cf:\n        if table is None:\n            # create the table\n            table = Table('foo', metadata, \n                Column('id', Integer, primary_key=True),\n                *(Column(rowname, String()) for rowname in row.keys()))\n            table.create()\n        # insert data into the table\n        table.insert().values(**row).execute()\n\nclass CsvTable(object): pass\nmapper(CsvTable, table)\nsession = create_session(bind=engine, autocommit=False, autoflush=True)\n</code></pre>\n\n<p>Now you can query the database, filtering by any field, etc.</p>\n\n<p>Suppose you run the code above on this csv:</p>\n\n<pre><code>name,age,nickname\nnosklo,32,nosklo\nAfila Tun,32,afilatun\nFoo Bar,33,baz\n</code></pre>\n\n<p>That will create and populate a table in memory with fields <code>name</code>, <code>age</code>, <code>nickname</code>. You can then query the table:</p>\n\n<pre><code>for r in session.query(CsvTable).filter(CsvTable.age == '32'):\n    print r.name, r.age, r.nickname\n</code></pre>\n\n<p>That will automatically create and run a <code>SELECT</code> query and return the correct rows.</p>\n\n<p>Another advantage of using sqlalchemy is that, if you decide to use another, more powerful database in the future, you can do so pratically without changing the code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79443,
                        "reputation": 9352,
                        "user_id": 225260,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/586d5e4913fea4540cb57bb9814d1c57?s=256&d=identicon&r=PG",
                        "display_name": "anijhaw",
                        "link": "https://stackoverflow.com/users/225260/anijhaw"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1270498473,
                    "creation_date": 1270498473,
                    "answer_id": 2580913,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>PHP FlatfileDB available <a href=\"http://sourceforge.net/projects/flatfiledb/\" rel=\"nofollow noreferrer\">here</a> is a very good option if you are building a web app</p>\n"
                },
                {
                    "owner": {
                        "account_id": 113371,
                        "reputation": 103207,
                        "user_id": 298607,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/DVW9g.jpg?s=256",
                        "display_name": "dawg",
                        "link": "https://stackoverflow.com/users/298607/dawg"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270495788,
                    "last_edit_date": 1270495788,
                    "creation_date": 1270495014,
                    "answer_id": 2580548,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Looked at Perl and and Text::CSV and DBI? There are many modules on CPAN to do exactly this. Here is an example (from <a href=\"http://perlmeme.org/tutorials/parsing_csv.html\" rel=\"nofollow noreferrer\">HERE</a>):</p>\n\n<pre><code>#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse DBI;\n\n# Connect to the database, (the directory containing our csv file(s))\n\nmy $dbh = DBI-&gt;connect(\"DBI:CSV:f_dir=.;csv_eol=\\n;\");\n\n# Associate our csv file with the table name 'prospects'\n\n$dbh-&gt;{'csv_tables'}-&gt;{'prospects'} = { 'file' =&gt; 'prospects.csv'};\n\n# Output the name and contact field from each row\n\nmy $sth = $dbh-&gt;prepare(\"SELECT * FROM prospects WHERE name LIKE 'G%'\");\n$sth-&gt;execute();\nwhile (my $row = $sth-&gt;fetchrow_hashref) {\n     print(\"name = \", $row-&gt;{'Name'}, \"  contact = \", $row-&gt;{'Contact'}. \"\\n\");\n}\n$sth-&gt;finish();\n\nname = Glenhuntly Pharmacy  contact = Paul\nname = Gilmour's Shoes  contact = Ringo\n</code></pre>\n\n<p>Just type perldoc DBI   and perldoc Text::CSV at the command prompt for more.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 35717,
                        "reputation": 133931,
                        "user_id": 101258,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/JAwXS.jpg?s=256",
                        "display_name": "Justin Ethier",
                        "link": "https://stackoverflow.com/users/101258/justin-ethier"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1270495014,
                    "creation_date": 1270495014,
                    "answer_id": 2580549,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You could use either scripting language to parse the CSV file and store the data into <a href=\"http://sqlite.org/\" rel=\"nofollow noreferrer\">SQLite</a>, which just uses a single file for storage. From there you have it in a database and can run queries against it.</p>\n\n<p>Alternatively, on windows you can setup an ODBC data source as a CSV file. But it may be difficult to automate this.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 63410,
                        "reputation": 5861,
                        "user_id": 187712,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/54a0724df77a092205b5272cfb526c5c?s=256&d=identicon&r=PG",
                        "display_name": "Azeem.Butt",
                        "link": "https://stackoverflow.com/users/187712/azeem-butt"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1270494955,
                    "creation_date": 1270494955,
                    "answer_id": 2580542,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>CSV files are not databases--they have no indices--and any SQL simulation you imposed upon them would amount to little more than searching through the entire thing over and over again. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 15070,
                        "reputation": 8829,
                        "user_id": 31472,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4bc093df8732b3ef949fed36e64d131d?s=256&d=identicon&r=PG",
                        "display_name": "lexu",
                        "link": "https://stackoverflow.com/users/31472/lexu"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270494951,
                    "creation_date": 1270494951,
                    "answer_id": 2580540,
                    "question_id": 2580497,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use a DB in a library like <a href=\"http://sqlite.org/\" rel=\"nofollow noreferrer\">SQLite</a>. \nThere are <a href=\"http://docs.python.org/library/sqlite3.html\" rel=\"nofollow noreferrer\">Python</a> and <a href=\"http://sqlite-ruby.rubyforge.org/\" rel=\"nofollow noreferrer\">Ruby</a> versions .</p>\n\n<p>Load your CSV into table, there might be modules/libraries to help you here too. Then SQL away.</p>\n"
                }
            ]
        },
        {
            "5881873": [
                {
                    "owner": {
                        "account_id": 1320497,
                        "reputation": 425,
                        "user_id": 1266432,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7cd88fbe9e53c2176bee6be4cb502f8c?s=256&d=identicon&r=PG",
                        "display_name": "formiaczek",
                        "link": "https://stackoverflow.com/users/1266432/formiaczek"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1359384443,
                    "last_edit_date": 1359384443,
                    "creation_date": 1339770743,
                    "answer_id": 11052732,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code># return list of tuples (objclass, name) containing all subclasses in callers' module\ndef FindAllSubclasses(classType):\n    import sys, inspect\n    subclasses = []\n    callers_module = sys._getframe(1).f_globals['__name__']\n    classes = inspect.getmembers(sys.modules[callers_module], inspect.isclass)\n    for name, obj in classes:\n        if (obj is not classType) and (classType in inspect.getmro(obj)):\n            subclasses.append((obj, name))\n    return subclasses\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 37637,
                        "reputation": 95264,
                        "user_id": 107660,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=256&d=identicon&r=PG",
                        "display_name": "Duncan",
                        "link": "https://stackoverflow.com/users/107660/duncan"
                    },
                    "is_accepted": true,
                    "score": 84,
                    "last_activity_date": 1304511796,
                    "last_edit_date": 1304511796,
                    "creation_date": 1304511484,
                    "answer_id": 5883218,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You want to use <code>Widget.__subclasses__()</code> to get a list of all the subclasses. It only looks for direct subclasses though so if you want all of them you'll have to do a bit more work:</p>\n\n<pre><code>def inheritors(klass):\n    subclasses = set()\n    work = [klass]\n    while work:\n        parent = work.pop()\n        for child in parent.__subclasses__():\n            if child not in subclasses:\n                subclasses.add(child)\n                work.append(child)\n    return subclasses\n</code></pre>\n\n<p>N.B. If you are using Python 2.x this only works for new-style classes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1422,
                        "reputation": 90669,
                        "user_id": 1897,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/09d9b10ad83581c21328d44e48c77b9d?s=256&d=identicon&r=PG",
                        "display_name": "Imran",
                        "link": "https://stackoverflow.com/users/1897/imran"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1304511323,
                    "last_edit_date": 1304511323,
                    "creation_date": 1304505775,
                    "answer_id": 5882155,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can track inheritance with your own metaclass</p>\n\n<pre><code>import collections\n\nclass A(object):\n    class __metaclass__(type):\n        __inheritors__ = defaultdict(list)\n\n        def __new__(meta, name, bases, dct):\n            klass = type.__new__(meta, name, bases, dct)\n            for base in klass.mro()[1:-1]:\n                meta.__inheritors__[base].append(klass)\n            return klass\n\nclass B(A):\n    pass\n\nclass C(B):\n    pass\n\n&gt;&gt;&gt; A.__inheritors__\ndefaultdict(&lt;type 'list'&gt;, {&lt;class '__main__.A'&gt;: [&lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;], &lt;class '__main__.B'&gt;: [&lt;class '__main__.C'&gt;]})\n</code></pre>\n\n<p>Anything that is inherited from <code>A</code> or it's derived classes will be tracked. You will get full inheritance map when all the modules in your application are loaded.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2665694"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1304504763,
                    "creation_date": 1304504763,
                    "answer_id": 5881961,
                    "question_id": 5881873,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You have to walk through all objects in the global namespace (globals()) and check if the related object/class is a subclass of the some other class (check the Python docs for issubclass()).</p>\n"
                }
            ]
        },
        {
            "1679384": [
                {
                    "owner": {
                        "account_id": 25166,
                        "reputation": 29343,
                        "user_id": 64495,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/1560b36868b41ed1f7aa8ea32047d20b?s=256&d=identicon&r=PG",
                        "display_name": "Bj&#246;rn",
                        "link": "https://stackoverflow.com/users/64495/bj%c3%b6rn"
                    },
                    "is_accepted": false,
                    "score": 559,
                    "last_activity_date": 1677810376,
                    "last_edit_date": 1677810376,
                    "creation_date": 1257413818,
                    "answer_id": 1679395,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>dict.items()\n</code></pre>\n<p>Does the trick.</p>\n<p>(For Python 2 only)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22723,
                        "reputation": 228963,
                        "user_id": 56338,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=256&d=identicon&r=PG",
                        "display_name": "sth",
                        "link": "https://stackoverflow.com/users/56338/sth"
                    },
                    "is_accepted": false,
                    "score": 30,
                    "last_activity_date": 1565050456,
                    "last_edit_date": 1565050456,
                    "creation_date": 1257414242,
                    "answer_id": 1679430,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Probably you just want this:</p>\n\n<pre><code>dictList = dict.items()\n</code></pre>\n\n<p>Your approach has two problems. For one you use <code>key</code> and <code>value</code> in quotes, which are strings with the letters \"key\" and \"value\", not related to the variables of that names. Also you keep adding elements to the \"temporary\" list and never get rid of old elements that are already in it from previous iterations. Make sure you have a new and empty <code>temp</code> list in each iteration and use the <code>key</code> and <code>value</code> variables:</p>\n\n<pre><code>for key, value in dict.iteritems():\n    temp = []\n    aKey = key\n    aValue = value\n    temp.append(aKey)\n    temp.append(aValue)\n    dictList.append(temp)\n</code></pre>\n\n<p>Also note that this could be written shorter without the temporary variables (and in Python 3 with <code>items()</code> instead of <code>iteritems()</code>):</p>\n\n<pre><code>for key, value in dict.items():\n    dictList.append([key, value])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25145,
                        "reputation": 12266,
                        "user_id": 64406,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/ae16cb4f6d78e485b04ce1e821592ae5?s=256&d=identicon&r=PG",
                        "display_name": "Martin DeMello",
                        "link": "https://stackoverflow.com/users/64406/martin-demello"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1516363702,
                    "last_edit_date": 1516363702,
                    "creation_date": 1257413928,
                    "answer_id": 1679408,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code> &gt;&gt;&gt; a = {'foo': 'bar', 'baz': 'quux', 'hello': 'world'}\n &gt;&gt;&gt; list(reduce(lambda x, y: x + y, a.items()))\n ['foo', 'bar', 'baz', 'quux', 'hello', 'world']\n</code></pre>\n\n<p>To explain: a.items() returns a list of tuples. Adding two tuples together makes one tuple containing all elements. Thus the reduction creates one tuple containing all keys and values and then the list(...) makes a list from that.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 69969,
                        "reputation": 1305,
                        "user_id": 203335,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/908423686b79054db68f32002ab15183?s=256&d=identicon&r=PG",
                        "display_name": "Shay",
                        "link": "https://stackoverflow.com/users/203335/shay"
                    },
                    "is_accepted": false,
                    "score": 81,
                    "last_activity_date": 1441313617,
                    "last_edit_date": 1441313617,
                    "creation_date": 1257420254,
                    "answer_id": 1679918,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You should use <code>dict.items()</code>.</p>\n\n<p>Here is a one liner solution for your problem:</p>\n\n<pre><code>[(k,v) for k,v in dict.items()]\n</code></pre>\n\n<p>and result:</p>\n\n<pre><code>[('Food', 'Fish&amp;Chips'), ('2012', 'Olympics'), ('Capital', 'London')]\n</code></pre>\n\n<p>or you can do</p>\n\n<pre><code>l=[]\n[l.extend([k,v]) for k,v in dict.items()]\n</code></pre>\n\n<p>for:</p>\n\n<pre><code>['Food', 'Fish&amp;Chips', '2012', 'Olympics', 'Capital', 'London']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 320327,
                        "reputation": 28081,
                        "user_id": 638546,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/1944ff44e2356581677a613230c3bc66?s=256&d=identicon&r=PG",
                        "display_name": "Akseli Pal&#233;n",
                        "link": "https://stackoverflow.com/users/638546/akseli-pal%c3%a9n"
                    },
                    "is_accepted": false,
                    "score": 288,
                    "last_activity_date": 1331559989,
                    "creation_date": 1331559989,
                    "answer_id": 9668200,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting from <a href=\"http://docs.python.org/library/stdtypes.html#mapping-types-dict\">dict</a> to list is made easy in Python. Three examples:</p>\n\n<pre><code>&gt;&gt; d = {'a': 'Arthur', 'b': 'Belling'}\n\n&gt;&gt; d.items()\n[('a', 'Arthur'), ('b', 'Belling')]\n\n&gt;&gt; d.keys()\n['a', 'b']\n\n&gt;&gt; d.values()\n['Arthur', 'Belling']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 70175,
                        "reputation": 4131,
                        "user_id": 203747,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b7699be15e710c4be309f9d537fb252b?s=256&d=identicon&r=PG",
                        "display_name": "Morgan",
                        "link": "https://stackoverflow.com/users/203747/morgan"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1257441065,
                    "creation_date": 1257441065,
                    "answer_id": 1682117,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're making a dictionary only to make a list of tuples, as creating dicts like you are may be a pain, you might look into using zip()</p>\n\n<p>Its especialy useful if you've got one heading, and multiple rows. For instance if I assume that you want Olympics stats for countries:</p>\n\n<pre><code>headers = ['Capital', 'Food', 'Year']\ncountries = [\n    ['London', 'Fish &amp; Chips', '2012'],\n    ['Beijing', 'Noodles', '2008'],\n]\n\nfor olympics in countries:\n    print zip(headers, olympics)\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>[('Capital', 'London'), ('Food', 'Fish &amp; Chips'), ('Year', '2012')]\n[('Capital', 'Beijing'), ('Food', 'Noodles'), ('Year', '2008')]\n</code></pre>\n\n<p>Don't know if thats the end goal, and my be off topic, but it could be something to keep in mind.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2288,
                        "reputation": 193340,
                        "user_id": 3171,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=256&d=identicon&r=PG",
                        "display_name": "David Webb",
                        "link": "https://stackoverflow.com/users/3171/david-webb"
                    },
                    "is_accepted": true,
                    "score": 187,
                    "last_activity_date": 1257414243,
                    "last_edit_date": 1257414243,
                    "creation_date": 1257413923,
                    "answer_id": 1679406,
                    "question_id": 1679384,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Your problem is that you have <code>key</code> and <code>value</code> in quotes making them strings, i.e. you're setting <code>aKey</code> to contain the string <code>\"key\"</code> and not the value of the variable <code>key</code>.  Also, you're not clearing out the <code>temp</code> list, so you're adding to it each time, instead of just having two items in it.</p>\n\n<p>To fix your code, try something like:</p>\n\n<pre><code>for key, value in dict.iteritems():\n    temp = [key,value]\n    dictlist.append(temp)\n</code></pre>\n\n<p>You don't need to copy the loop variables <code>key</code> and <code>value</code> into another variable before using them so I dropped them out.  Similarly, you don't need to use append to build up a list, you can just specify it between square brackets as shown above.  And we could have done <code>dictlist.append([key,value])</code> if we wanted to be as brief as possible.</p>\n\n<p>Or just use <code>dict.items()</code> as has been suggested.</p>\n"
                }
            ]
        },
        {
            "12935194": [
                {
                    "owner": {
                        "account_id": 3309474,
                        "reputation": 7914,
                        "user_id": 2783312,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/2381d1dbfc1450b861bd808424d01943?s=256&d=identicon&r=PG",
                        "display_name": "DrIDK",
                        "link": "https://stackoverflow.com/users/2783312/dridk"
                    },
                    "is_accepted": false,
                    "score": 721,
                    "last_activity_date": 1666163982,
                    "last_edit_date": 1666163982,
                    "creation_date": 1449014238,
                    "answer_id": 34032549,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest way is to use <a href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>:</p>\n<pre><code>a = [&quot;foo&quot;, &quot;melon&quot;]\nb = [True, False]\nc = list(itertools.product(a, b))\n&gt;&gt; [(&quot;foo&quot;, True), (&quot;foo&quot;, False), (&quot;melon&quot;, True), (&quot;melon&quot;, False)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4535466,
                        "reputation": 2601,
                        "user_id": 3684792,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://www.gravatar.com/avatar/2fece2999fb097ee4cc5cab86501e323?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user3684792",
                        "link": "https://stackoverflow.com/users/3684792/user3684792"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1614078896,
                    "last_edit_date": 1614078896,
                    "creation_date": 1457695934,
                    "answer_id": 35939200,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Without <code>itertools</code> as a flattened list:</p>\n<pre><code>[(list1[i], list2[j]) for i in range(len(list1)) for j in range(len(list2))]\n</code></pre>\n<p>or in <strong>Python 2</strong>:</p>\n<pre><code>[(list1[i], list2[j]) for i in xrange(len(list1)) for j in xrange(len(list2))]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2476563,
                        "reputation": 2477,
                        "user_id": 2157087,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2878f8d17abfda0c7b4c06f6be382e54?s=256&d=identicon&r=PG",
                        "display_name": "logic",
                        "link": "https://stackoverflow.com/users/2157087/logic"
                    },
                    "is_accepted": false,
                    "score": 232,
                    "last_activity_date": 1589080816,
                    "last_edit_date": 1589080816,
                    "creation_date": 1471786420,
                    "answer_id": 39064769,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>May be simpler than the simplest one above:</p>\n\n<pre><code>&gt;&gt;&gt; a = [\"foo\", \"bar\"]\n&gt;&gt;&gt; b = [1, 2, 3]\n&gt;&gt;&gt; [(x,y) for x in a for y in b]  # for a list\n[('foo', 1), ('foo', 2), ('foo', 3), ('bar', 1), ('bar', 2), ('bar', 3)]\n&gt;&gt;&gt; ((x,y) for x in a for y in b)  # for a generator if you worry about memory or time complexity.\n&lt;generator object &lt;genexpr&gt; at 0x1048de850&gt;\n</code></pre>\n\n<p>without any import </p>\n"
                },
                {
                    "owner": {
                        "account_id": 64020,
                        "reputation": 109827,
                        "user_id": 189205,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=256&d=identicon&r=PG",
                        "display_name": "interjay",
                        "link": "https://stackoverflow.com/users/189205/interjay"
                    },
                    "is_accepted": true,
                    "score": 145,
                    "last_activity_date": 1586119631,
                    "last_edit_date": 1586119631,
                    "creation_date": 1350480911,
                    "answer_id": 12935562,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Note</strong>: This answer is for the specific question asked above. If you are here from Google and just looking for a way to get a Cartesian product in Python, <code>itertools.product</code> or a simple list comprehension may be what you are looking for - see the other answers.</p>\n\n<hr>\n\n<p>Suppose <code>len(list1) &gt;= len(list2)</code>. Then what you appear to want is to take all permutations of length <code>len(list2)</code> from <code>list1</code> and match them with items from list2. In python:</p>\n\n<pre><code>import itertools\nlist1=['a','b','c']\nlist2=[1,2]\n\n[list(zip(x,list2)) for x in itertools.permutations(list1,len(list2))]\n</code></pre>\n\n<p>Returns</p>\n\n<pre><code>[[('a', 1), ('b', 2)], [('a', 1), ('c', 2)], [('b', 1), ('a', 2)], [('b', 1), ('c', 2)], [('c', 1), ('a', 2)], [('c', 1), ('b', 2)]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14183320,
                        "reputation": 3947,
                        "user_id": 10246144,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-NsnZiVRwG_Y/AAAAAAAAAAI/AAAAAAAAC6I/wzXcaRp5ITE/photo.jpg?sz=256",
                        "display_name": "Steve Alexander",
                        "link": "https://stackoverflow.com/users/10246144/steve-alexander"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1565032304,
                    "last_edit_date": 1565032304,
                    "creation_date": 1565021571,
                    "answer_id": 57362391,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The better answers to this only work for specific lengths of lists that are provided.</p>\n\n<p>Here's a version that works for any lengths of input. It also makes the algorithm clear in terms of the mathematical concepts of combination and permutation.</p>\n\n<pre><code>from itertools import combinations, permutations\nlist1 = ['1', '2']\nlist2 = ['A', 'B', 'C']\n\nnum_elements = min(len(list1), len(list2))\nlist1_combs = list(combinations(list1, num_elements))\nlist2_perms = list(permutations(list2, num_elements))\nresult = [\n  tuple(zip(perm, comb))\n  for comb in list1_combs\n  for perm in list2_perms\n]\n\nfor idx, ((l11, l12), (l21, l22)) in enumerate(result):\n  print(f'{idx}: {l11}{l12} {l21}{l22}')\n</code></pre>\n\n<p>This outputs:</p>\n\n<pre><code>0: A1 B2\n1: A1 C2\n2: B1 A2\n3: B1 C2\n4: C1 A2\n5: C1 B2\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3984769,
                        "reputation": 451,
                        "user_id": 3285705,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e948ee2f95b4fd8b9ee9ee630321e286?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fletch F Fletch",
                        "link": "https://stackoverflow.com/users/3285705/fletch-f-fletch"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1564422600,
                    "creation_date": 1564422600,
                    "answer_id": 57259019,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Or the KISS answer for short lists:</p>\n\n<pre><code>[(i, j) for i in list1 for j in list2]\n</code></pre>\n\n<p>Not as performant as itertools but you're using python so performance is already not your top concern...</p>\n\n<p>I like all the other answers too!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3385430,
                        "reputation": 830,
                        "user_id": 2841481,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://i.sstatic.net/iMPH0.jpg?s=256",
                        "display_name": "Ishan Rastogi",
                        "link": "https://stackoverflow.com/users/2841481/ishan-rastogi"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1563959240,
                    "creation_date": 1563959240,
                    "answer_id": 57179187,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>the best way to find out all the combinations for large number of lists is:</p>\n\n<pre><code>import itertools\nfrom pprint import pprint\n\ninputdata = [\n    ['a', 'b', 'c'],\n    ['d'],\n    ['e', 'f'],\n]\nresult = list(itertools.product(*inputdata))\npprint(result)\n</code></pre>\n\n<p>the result will be:</p>\n\n<pre><code>[('a', 'd', 'e'),\n ('a', 'd', 'f'),\n ('b', 'd', 'e'),\n ('b', 'd', 'f'),\n ('c', 'd', 'e'),\n ('c', 'd', 'f')]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8636570,
                        "reputation": 942,
                        "user_id": 6466550,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/eddaeda4c6a6294455ea2af9d77c7989?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "computerist",
                        "link": "https://stackoverflow.com/users/6466550/computerist"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1520763101,
                    "creation_date": 1520763101,
                    "answer_id": 49218843,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Answering the question \"given two lists, find all possible permutations of pairs of one item from each list\" and using basic Python functionality (i.e., without itertools) and, hence, making it easy to replicate for other programming languages:</p>\n\n<pre><code>def rec(a, b, ll, size):\n    ret = []\n    for i,e in enumerate(a):\n        for j,f in enumerate(b):\n            l = [e+f]\n            new_l = rec(a[i+1:], b[:j]+b[j+1:], ll, size)\n            if not new_l:\n                ret.append(l)\n            for k in new_l:\n                l_k = l + k\n                ret.append(l_k)\n                if len(l_k) == size:\n                    ll.append(l_k)\n    return ret\n\na = ['a','b','c']\nb = ['1','2']\nll = []\nrec(a,b,ll, min(len(a),len(b)))\nprint(ll)\n</code></pre>\n\n<p>Returns</p>\n\n<pre><code>[['a1', 'b2'], ['a1', 'c2'], ['a2', 'b1'], ['a2', 'c1'], ['b1', 'c2'], ['b2', 'c1']]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6516901,
                        "reputation": 457,
                        "user_id": 5042412,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-kg-JsPXbDn4/AAAAAAAAAAI/AAAAAAAAONQ/YGXvc-Z8HQM/photo.jpg?sz=256",
                        "display_name": "Idanmel",
                        "link": "https://stackoverflow.com/users/5042412/idanmel"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1484076399,
                    "creation_date": 1484076399,
                    "answer_id": 41576791,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You might want to try a one line list comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; [name+number for name in 'ab' for number in '12']\n['a1', 'a2', 'b1', 'b2']\n&gt;&gt;&gt; [name+number for name in 'abc' for number in '12']\n['a1', 'a2', 'b1', 'b2', 'c1', 'c2']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1874064,
                        "reputation": 17960,
                        "user_id": 1695680,
                        "user_type": "registered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/407d4b68afe5b3a71e84a1a3d5811cff?s=256&d=identicon&r=PG",
                        "display_name": "ThorSummoner",
                        "link": "https://stackoverflow.com/users/1695680/thorsummoner"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1480456355,
                    "creation_date": 1480456355,
                    "answer_id": 40876432,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was looking for a list multiplied by itself with only unique combinations, which is provided as this function.</p>\n\n<pre><code>import itertools\nitertools.combinations(list, n_times)\n</code></pre>\n\n<hr>\n\n<p>Here as an excerpt from <a href=\"https://docs.python.org/2/library/itertools.html\" rel=\"noreferrer\">the Python docs on  <code>itertools</code></a> That might help you find what your looking for.</p>\n\n<pre><code>Combinatoric generators:\n\nIterator                                 | Results\n-----------------------------------------+----------------------------------------\nproduct(p, q, ... [repeat=1])            | cartesian product, equivalent to a \n                                         |   nested for-loop\n-----------------------------------------+----------------------------------------\npermutations(p[, r])                     | r-length tuples, all possible \n                                         |   orderings, no repeated elements\n-----------------------------------------+----------------------------------------\ncombinations(p, r)                       | r-length tuples, in sorted order, no \n                                         |   repeated elements\n-----------------------------------------+----------------------------------------\ncombinations_with_replacement(p, r)      | r-length tuples, in sorted order, \n                                         | with repeated elements\n-----------------------------------------+----------------------------------------\nproduct('ABCD', repeat=2)                | AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD\npermutations('ABCD', 2)                  | AB AC AD BA BC BD CA CB CD DA DB DC\ncombinations('ABCD', 2)                  | AB AC AD BC BD CD\ncombinations_with_replacement('ABCD', 2) | AA AB AC AD BB BC BD CC CD DD\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1415650,
                        "reputation": 359,
                        "user_id": 1341371,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/58e82cdabb8862f800278f54ab4a5fb4?s=256&d=identicon&r=PG",
                        "display_name": "Mass Zhou",
                        "link": "https://stackoverflow.com/users/1341371/mass-zhou"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1387465330,
                    "last_edit_date": 1495541896,
                    "creation_date": 1387465330,
                    "answer_id": 20684972,
                    "question_id": 12935194,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>a tiny improvement for the answer from interjay, to make the result as a flatten list.</p>\n\n<pre><code>&gt;&gt;&gt; list3 = [zip(x,list2) for x in itertools.permutations(list1,len(list2))]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list3)\n&gt;&gt;&gt; list4 = list(chain)\n[('a', 1), ('b', 2), ('a', 1), ('c', 2), ('b', 1), ('a', 2), ('b', 1), ('c', 2), ('c', 1), ('a', 2), ('c', 1), ('b', 2)]\n</code></pre>\n\n<p>reference from this <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python\">link</a></p>\n"
                }
            ]
        },
        {
            "12050460": [
                {
                    "owner": {
                        "account_id": 7777321,
                        "reputation": 1,
                        "user_id": 5884977,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/448e2e52b7951ac108efecc7f7e30439?s=256&d=identicon&r=PG",
                        "display_name": "bkanber",
                        "link": "https://stackoverflow.com/users/5884977/bkanber"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1454613393,
                    "creation_date": 1454613393,
                    "answer_id": 35209655,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The following seems to consistently give the right results:</p>\n\n<pre><code>from pybrain.tools.shortcuts import buildNetwork\nfrom pybrain.structure import TanhLayer\nfrom pybrain.datasets import SupervisedDataSet\nfrom pybrain.supervised.trainers import BackpropTrainer\n\n#net = buildNetwork(2, 3, 1, bias=True, hiddenclass=TanhLayer)\nnet = buildNetwork(2, 3, 1, bias=True)\n\nds = SupervisedDataSet(2, 1)\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\nds.addSample((0, 0), (0,))\nds.addSample((0, 1), (1,))\nds.addSample((1, 0), (1,))\nds.addSample((1, 1), (0,))\n\ntrainer = BackpropTrainer(net, ds, learningrate=0.001, momentum=0.99)\n\ntrainer.trainUntilConvergence(verbose=True)\n\nprint net.activate([0,0])\nprint net.activate([0,1])\nprint net.activate([1,0])\nprint net.activate([1,1])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 325129,
                        "reputation": 129,
                        "user_id": 646115,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/985c017a2c26fdc07e3f786380dc0195?s=256&d=identicon&r=PG",
                        "display_name": "lym",
                        "link": "https://stackoverflow.com/users/646115/lym"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1395586232,
                    "last_edit_date": 1395586232,
                    "creation_date": 1395585759,
                    "answer_id": 22592335,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>trainer = BackpropTrainer(net, ds, learningrate = 0.9, momentum=0.0, weightdecay=0.0, verbose=True) \ntrainer.trainEpochs(epochs=1000)\n</code></pre>\n\n<p>This way can converge. if learningrate is too small(e.g. 0.01), it lost in local minimum. As I have tested, learningrate in 0.3-30, it can converge.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1801989,
                        "reputation": 441,
                        "user_id": 3085313,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8f4746bf253f93b454713454efb3e2da?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "toddInPortland",
                        "link": "https://stackoverflow.com/users/3085313/toddinportland"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1386882627,
                    "last_edit_date": 1495540112,
                    "creation_date": 1386649843,
                    "answer_id": 20486148,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I took the excellent <a href=\"https://www.coursera.org/course/ml\" rel=\"nofollow noreferrer\">Machine Learning class on Coursera</a>, taught by Andrew Ng, and one part of the class covered training a small neural net to recognize xor.  So I was a bit troubled by the pybrain example based on parts of the <a href=\"http://pybrain.org/docs/#quickstart\" rel=\"nofollow noreferrer\">quickstart</a> that did not converge.</p>\n\n<p>I think there are many reasons, including the one above about the minimal dataset being split into training and validation. At one point in the course Andrew said \"its not the person with the best algorithm that wins, its the one with the most data. And he went on to explain that the explosion in data availability in the 2000's is part of the reason for the resurgence in AI, now called Machine Learning.</p>\n\n<p>So with all that in mind I found that</p>\n\n<ol>\n<li>the validation set can have 4 samples, because that comes after the training phase.</li>\n<li>the network only needs 2 nodes in the hidden layer, as I learned in the class,</li>\n<li>the learning rate needs to be pretty small in this case, like 0.005, or else the training will sometimes skip over the answer (this is an important point from the class that I confirmed by playing with the numbers).</li>\n<li>the smaller the learning rate, the smaller the maxEpochs can be. A small learning rate means that the convergence takes smaller steps along the gradient toward minimization. If its bigger, you need a bigger maxEpochs so that it will wait longer before deciding it has hit a minimum.</li>\n<li>You need a bias=True in the network (which adds a constant 1 node to the input and hidden layers). Read the answers to <a href=\"https://stackoverflow.com/questions/2480650/role-of-bias-in-neural-networks\">this question</a> about bias.</li>\n<li>Finally, and most important, you need a big training set. 1000 converged on the right answer about 75% of the time. I suspect this has to do with the minimization algorithm. Smaller numbers would fail frequently.</li>\n</ol>\n\n<p>So here's some code that works:</p>\n\n<pre><code>from pybrain.datasets import SupervisedDataSet\n\ndataModel = [\n    [(0,0), (0,)],\n    [(0,1), (1,)],\n    [(1,0), (1,)],\n    [(1,1), (0,)],\n]\n\nds = SupervisedDataSet(2, 1)\nfor input, target in dataModel:\n    ds.addSample(input, target)\n\n# create a large random data set\nimport random\nrandom.seed()\ntrainingSet = SupervisedDataSet(2, 1);\nfor ri in range(0,1000):\n    input,target = dataModel[random.getrandbits(2)];\n    trainingSet.addSample(input, target)\n\nfrom pybrain.tools.shortcuts import buildNetwork\nnet = buildNetwork(2, 2, 1, bias=True)\n\nfrom pybrain.supervised.trainers import BackpropTrainer\ntrainer = BackpropTrainer(net, ds, learningrate = 0.001, momentum = 0.99)\ntrainer.trainUntilConvergence(verbose=True,\n                              trainingData=trainingSet,\n                              validationData=ds,\n                              maxEpochs=10)\n\nprint '0,0-&gt;', net.activate([0,0])\nprint '0,1-&gt;', net.activate([0,1])\nprint '1,0-&gt;', net.activate([1,0])\nprint '1,1-&gt;', net.activate([1,1])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 325671,
                        "reputation": 2452,
                        "user_id": 646996,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/cc4704cd8c3001f4b10fadeac8182c47?s=256&d=identicon&r=PG",
                        "display_name": "avanwieringen",
                        "link": "https://stackoverflow.com/users/646996/avanwieringen"
                    },
                    "is_accepted": true,
                    "score": 35,
                    "last_activity_date": 1345537386,
                    "creation_date": 1345537386,
                    "answer_id": 12050816,
                    "question_id": 12050460,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After some more digging I found that the example on the PyBrain's tutorial is completely out of place.</p>\n\n<p>When we look at the method signature in the source code we find:</p>\n\n<pre><code>def trainUntilConvergence(self, dataset=None, maxEpochs=None, verbose=None, continueEpochs=10, validationProportion=0.25):\n</code></pre>\n\n<p>This means that 25% of the training set is used for validation. Although that is a very valid method when training a network on data you are not going to do this when you have the complete range of possiblities at your disposal, namely a 4-row XOR 2-in-1-out solution set. When one wants to train an XOR set and you remove one of the rows for validation that has as an immediate consequence that you get a very sparse training set where one of the possible combinations is omitted resulting automatically into those  weights not being trained.</p>\n\n<p>Normally when you omit 25% of the data for validation you do this by assuming that those 25% cover 'most' of the solution space the network already has encountered more or less. In this case this is not true and it covers 25% of the solution space completely unknown to the network since you removed it for validation.</p>\n\n<p>So, the trainer was training the network correctly, but by omitting 25% of the XOR problem this results in a badly trained network.</p>\n\n<p>A different example on the PyBrain website as a quickstart would be very handy, because this example is just plain wrong in this specific XOR case. You might wonder if they tried the example themselves, because it just outputs random badly trained networks.</p>\n"
                }
            ]
        },
        {
            "28532770": [
                {
                    "owner": {
                        "account_id": 8731824,
                        "reputation": 1059,
                        "user_id": 6545662,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/242267fcf7d82c963600d89faad79f58?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ike",
                        "link": "https://stackoverflow.com/users/6545662/ike"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1503267655,
                    "creation_date": 1503267655,
                    "answer_id": 45787284,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After many fruitful hours of exploring OCR libraries, bounding boxes and clustering algorithms - I found a solution so simple it makes you want to cry!</p>\n\n<p>I hope you are using Linux;</p>\n\n<p><code>pdftotext -layout NAME_OF_PDF.pdf</code></p>\n\n<p>AMAZING!!</p>\n\n<p>Now you have a nice text file with all the information lined up in nice columns, now it is trivial to format into a csv etc..</p>\n\n<p>It is for times like this that I love Linux, these guys came up with AMAZING solutions to everything, and put it there for FREE!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4523058,
                        "reputation": 4627,
                        "user_id": 3675679,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/D8MTB.jpg?s=256",
                        "display_name": "Ricky McMaster",
                        "link": "https://stackoverflow.com/users/3675679/ricky-mcmaster"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1492857520,
                    "creation_date": 1492857520,
                    "answer_id": 43558214,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd just like to add to the very helpful answer from Kurt Pfeifle - there is now a Python wrapper for Tabula, and this seems to work very well so far: <a href=\"https://github.com/chezou/tabula-py\" rel=\"noreferrer\">https://github.com/chezou/tabula-py</a></p>\n\n<p>This will convert your PDF table to a Pandas data frame.  You can also set the area in x,y co-ordinates which is obviously very handy for irregular data.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 147884,
                        "reputation": 89857,
                        "user_id": 359307,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/332a3083f92c35e7b0a5dd86a66df9f7?s=256&d=identicon&r=PG",
                        "display_name": "Kurt Pfeifle",
                        "link": "https://stackoverflow.com/users/359307/kurt-pfeifle"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1424134813,
                    "last_edit_date": 1495542364,
                    "creation_date": 1424134813,
                    "answer_id": 28552995,
                    "question_id": 28532770,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You should definitely have a look at this answer of mine:</p>\n\n<ul>\n<li><strong><a href=\"https://stackoverflow.com/a/26110587/359307\">Extracting table contents from a collection of PDF files</a></strong></li>\n</ul>\n\n<p>and also have a look at all the links included therein.</p>\n\n<p><a href=\"https://github.com/tabulapdf/tabula\" rel=\"noreferrer\">Tabula/TabulaPDF</a> is currently the best table extraction tool that is available for PDF scraping.</p>\n"
                }
            ]
        },
        {
            "4325416": [
                {
                    "owner": {
                        "account_id": 247075,
                        "reputation": 1905,
                        "user_id": 521571,
                        "user_type": "registered",
                        "accept_rate": 58,
                        "profile_image": "https://i.sstatic.net/xfSlc.jpg?s=256",
                        "display_name": "Vladimir Lagunov",
                        "link": "https://stackoverflow.com/users/521571/vladimir-lagunov"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1291214193,
                    "creation_date": 1291214193,
                    "answer_id": 4325431,
                    "question_id": 4325416,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>import getpass\nprint getpass.getuser()\n</code></pre>\n"
                }
            ]
        },
        {
            "2990121": [
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346658,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": true,
                    "score": 495,
                    "last_activity_date": 1656615878,
                    "last_edit_date": 1656615878,
                    "creation_date": 1275919425,
                    "answer_id": 2990152,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use a <code>range</code> with a step size of 2:</p>\n<p><strong>Python 2</strong></p>\n<pre><code>for i in xrange(0,10,2):\n  print(i)\n</code></pre>\n<p><strong>Python 3</strong></p>\n<pre><code>for i in range(0,10,2):\n  print(i)\n</code></pre>\n<p><strong>Note:</strong> Use <code>xrange</code> in Python 2 instead of <code>range</code> because it is more efficient as it generates an iterable object, and not the whole list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 30238,
                        "reputation": 50464,
                        "user_id": 82322,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/200b3a948797197905fb4c1d492ca2f7?s=256&d=identicon&r=PG",
                        "display_name": "carl",
                        "link": "https://stackoverflow.com/users/82322/carl"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1595437950,
                    "last_edit_date": 1595437950,
                    "creation_date": 1275925061,
                    "answer_id": 2990873,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest in my opinion is just this:</p>\n<pre><code>it = iter([1,2,3,4,5,6])\nfor x, y in zip(it, it):\n    print x, y\n\nOut: 1 2\n     3 4\n     5 6\n</code></pre>\n<p>No extra imports or anything. And very elegant, in my opinion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37903,
                        "reputation": 9926,
                        "user_id": 108518,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/31e7896f9f4ed034b4493772487ff5cb?s=256&d=identicon&r=PG",
                        "display_name": "lambacck",
                        "link": "https://stackoverflow.com/users/108518/lambacck"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1504958709,
                    "last_edit_date": 1504958709,
                    "creation_date": 1275924631,
                    "answer_id": 2990815,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This might not be as fast as the izip_longest solution (I didn't actually test it), but it will work with python &lt; 2.6 (izip_longest was added in 2.6):</p>\n\n<pre><code>from itertools import imap\n\ndef grouper(n, iterable):\n    \"grouper(3, 'ABCDEFG') --&gt; ('A,'B','C'), ('D','E','F'), ('G',None,None)\"\n    args = [iter(iterable)] * n\n\n    return imap(None, *args)\n</code></pre>\n\n<p>If you need to go earlier than 2.3, you can substitute the built-in map for imap. The disadvantage is that it provides no ability to customize the fill value.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835620,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1275921063,
                    "last_edit_date": 1275921063,
                    "creation_date": 1275919403,
                    "answer_id": 2990151,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you're using Python 2.6 or newer you can use the grouper <a href=\"http://docs.python.org/library/itertools.html#recipes\" rel=\"noreferrer\">recipe</a> from the <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\"><strong><code>itertools</code></strong></a> module:</p>\n\n<pre><code>from itertools import izip_longest\n\ndef grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n</code></pre>\n\n<p>Call like this:</p>\n\n<pre><code>for item1, item2 in grouper(2, l):\n    # Do something with item1 and item2\n</code></pre>\n\n<p>Note that in Python 3.x you should use <code>zip_longest</code> instead of <code>izip_longest</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 112497,
                        "reputation": 2041,
                        "user_id": 296703,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/e0ce3e07b08f53f4590eb2fdba75ab45?s=256&d=identicon&r=PG",
                        "display_name": "Ishpeck",
                        "link": "https://stackoverflow.com/users/296703/ishpeck"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1275920516,
                    "creation_date": 1275920516,
                    "answer_id": 2990295,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>nums = range(10)\nfor i in range(0, len(nums)-1, 2):\n    print nums[i]\n</code></pre>\n\n<p>Kinda dirty but it works.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 66177,
                        "reputation": 33636,
                        "user_id": 194311,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=256&d=identicon&r=PG",
                        "display_name": "jathanism",
                        "link": "https://stackoverflow.com/users/194311/jathanism"
                    },
                    "is_accepted": false,
                    "score": 144,
                    "last_activity_date": 1275920421,
                    "creation_date": 1275920421,
                    "answer_id": 2990281,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can also use this syntax (<code>L[start:stop:step]</code>):</p>\n\n<pre><code>mylist = [1,2,3,4,5,6,7,8,9,10]\nfor i in mylist[::2]:\n    print i,\n# prints 1 3 5 7 9\n\nfor i in mylist[1::2]:\n    print i,\n# prints 2 4 6 8 10\n</code></pre>\n\n<p>Where the first digit is the starting index (defaults to beginning of list or 0), 2nd is ending slice index (defaults to end of list), and the third digit is the offset or step.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4683,
                        "reputation": 2644,
                        "user_id": 7161,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/ab1330463a1807b7534790240fe970ec?s=256&d=identicon&r=PG",
                        "display_name": "Jorenko",
                        "link": "https://stackoverflow.com/users/7161/jorenko"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1275919601,
                    "creation_date": 1275919601,
                    "answer_id": 2990182,
                    "question_id": 2990121,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you have control over the structure of the list, the most pythonic thing to do would probably be to change it from:</p>\n\n<pre><code>l=[1,2,3,4]\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>l=[(1,2),(3,4)]\n</code></pre>\n\n<p>Then, your loop would be:</p>\n\n<pre><code>for i,j in l:\n    print i, j\n</code></pre>\n"
                }
            ]
        },
        {
            "14852140": [
                {
                    "owner": {
                        "account_id": 5189119,
                        "reputation": 494,
                        "user_id": 4152567,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=256",
                        "display_name": "Mihai.Mehe",
                        "link": "https://stackoverflow.com/users/4152567/mihai-mehe"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1697831192,
                    "creation_date": 1697831192,
                    "answer_id": 77333439,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <code>os.path.expanduser(my_path)</code> without escaping the white spaces in <code>my_path</code>.</p>\n<p>If you want to join some subpaths:</p>\n<pre><code>import os\npath = os.path.expanduser(os.path.join(ROOT, my_path))\n</code></pre>\n<p>and check with</p>\n<pre><code>assert os.path.exists(path)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8374827,
                        "reputation": 19,
                        "user_id": 6288621,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/11bac2ce1cf3486fd646b363e485524f?s=256&d=identicon&r=PG",
                        "display_name": "NG. Hai Tuan",
                        "link": "https://stackoverflow.com/users/6288621/ng-hai-tuan"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1693411968,
                    "last_edit_date": 1693411968,
                    "creation_date": 1686993847,
                    "answer_id": 76495552,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It works for me</p>\n<pre><code>import os\n</code></pre>\n<p>Set working directory</p>\n<pre><code>os.chdir(&quot;&quot;&quot;C:/Users/admin/nht1/OneDrive - quarrycubicle/Desktop/Docs/AI Data Analysis/Tai lieu tham khao&quot;&quot;&quot;)\n\nos.getcwd()\n</code></pre>\n<p>Out[1]: 'C:\\Users\\admin\\nht1\\OneDrive - quarrycubicle\\Desktop\\Docs\\AI Data Analysis\\Tai lieu tham khao'</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17910700,
                        "reputation": 1,
                        "user_id": 13012902,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-pavxYYKNHrs/AAAAAAAAAAI/AAAAAAAAAAA/AKF05nCT2A9KZeA7DFu7g_vQGn3kJ93yTA/photo.jpg?sz=256",
                        "display_name": "Nguyen Tuan",
                        "link": "https://stackoverflow.com/users/13012902/nguyen-tuan"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1676973772,
                    "last_edit_date": 1676973772,
                    "creation_date": 1676973523,
                    "answer_id": 75518860,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use triple quotation marks <code>&quot;&quot;&quot;</code> as such:</p>\n<pre><code>filepath = &quot;&quot;&quot;E:/ABC/SEM 2/testfiles/all.txt&quot;&quot;&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26262324,
                        "reputation": 21,
                        "user_id": 19933428,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AFdZucoZ5LxSkeiwOAS5KbBaj_7Aah_F8pkYE3QVa0qT=k-s256",
                        "display_name": "For Cc",
                        "link": "https://stackoverflow.com/users/19933428/for-cc"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1670516778,
                    "creation_date": 1670516778,
                    "answer_id": 74733362,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I found a simple hack try adding a <strong>single quote</strong> before the the double quotes like :</p>\n<pre><code>os.system(r'&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;')\n</code></pre>\n<p>worked for me</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24906055,
                        "reputation": 17,
                        "user_id": 18776107,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJxnUc5tWpDOlkMoJUHSLmVYnDstKWmT6HpXGAUB=k-s256",
                        "display_name": "\u05e9\u05d9 \u05d0\u05dc\u05d1\u05d6",
                        "link": "https://stackoverflow.com/users/18776107/%d7%a9%d7%99-%d7%90%d7%9c%d7%91%d7%96"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1657724270,
                    "last_edit_date": 1657724270,
                    "creation_date": 1657617518,
                    "answer_id": 72949909,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>double back slash <code>\\\\</code> will solve the problem</p>\n<pre><code>subprocess.run('type &quot;C:\\\\Users\\\\nameofuser\\\\blackdrive - somecorp\\\\Desktop\\\\seadlines_data.txt&quot;',shell=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2360323,
                        "reputation": 8426,
                        "user_id": 2082723,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/Hb64a.jpg?s=256",
                        "display_name": "Vettiyanakan",
                        "link": "https://stackoverflow.com/users/2082723/vettiyanakan"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1618287701,
                    "creation_date": 1618287701,
                    "answer_id": 67068705,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>a hack on <strong>Mac</strong>:</p>\n<pre><code>path = '/Volumes/Public/ABY/Documents/Musiq/slumdog millonaire/Mausam and Escape.mp3'\nnPath = path.replace(' ', '\\\\ ')\nprint(nPath)\n</code></pre>\n<p>Output:</p>\n<pre><code>/Volumes/Public/ABY/Documents/Musiq/slumdog\\ millonaire/Mausam\\ and\\ Escape.mp3\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 19921984,
                        "reputation": 9,
                        "user_id": 14597594,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/acbff21069c5fbca4177f53dc26fafaf?s=256&d=identicon&r=PG",
                        "display_name": "santarosajoe",
                        "link": "https://stackoverflow.com/users/14597594/santarosajoe"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1606019542,
                    "last_edit_date": 1606019542,
                    "creation_date": 1604782360,
                    "answer_id": 64732313,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>(WINDOWS - AWS solution) <br>Solved for windows by putting <strong>tripple quotes around files and paths</strong>.\n<br>Benefits:\n<br>  1)  Prevents excludes that quietly were getting ignored.\n<br>  2)  Files/folders with spaces in them, will no longer kick errors.</p>\n<pre><code>    aws_command = 'aws s3 sync &quot;&quot;&quot;D:/&quot;&quot;&quot; &quot;&quot;&quot;s3://mybucket/my folder/&quot;  --exclude &quot;&quot;&quot;*RECYCLE.BIN/*&quot;&quot;&quot; --exclude &quot;&quot;&quot;*.cab&quot;&quot;&quot; --exclude &quot;&quot;&quot;System Volume Information/*&quot;&quot;&quot; '\n\n    r = subprocess.run(f&quot;powershell.exe {aws_command}&quot;, shell=True, capture_output=True, text=True)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3327887,
                        "reputation": 1426,
                        "user_id": 2797460,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/KS82y.jpg?s=256",
                        "display_name": "billmanH",
                        "link": "https://stackoverflow.com/users/2797460/billmanh"
                    },
                    "is_accepted": false,
                    "score": 75,
                    "last_activity_date": 1409764745,
                    "creation_date": 1409764745,
                    "answer_id": 25650185,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>path = r\"C:\\Users\\mememe\\Google Drive\\Programs\\Python\\file.csv\"\n</code></pre>\n\n<p>Closing the path in r\"string\" also solved this problem very well. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": true,
                    "score": 21,
                    "last_activity_date": 1360754592,
                    "creation_date": 1360754592,
                    "answer_id": 14852407,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is no problem with whitespaces in the path since you're not using the \"shell\" to open the file. Here is a session from the windows console to prove the point. You're doing something else wrong</p>\n\n<pre><code>Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on wi\n32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt;\n&gt;&gt;&gt; os.makedirs(\"C:/ABC/SEM 2/testfiles\")\n&gt;&gt;&gt; open(\"C:/ABC/SEM 2/testfiles/all.txt\",\"w\")\n&lt;open file 'C:/ABC/SEM 2/testfiles/all.txt', mode 'w' at 0x0000000001D95420&gt;\n&gt;&gt;&gt; exit()\n\nC:\\Users\\Gnibbler&gt;dir \"C:\\ABC\\SEM 2\\testfiles\"\n Volume in drive C has no label.\n Volume Serial Number is 46A0-BB64\n\n Directory of c:\\ABC\\SEM 2\\testfiles\n\n13/02/2013  10:20 PM    &lt;DIR&gt;          .\n13/02/2013  10:20 PM    &lt;DIR&gt;          ..\n13/02/2013  10:20 PM                 0 all.txt\n               1 File(s)              0 bytes\n               2 Dir(s)  78,929,309,696 bytes free\n\nC:\\Users\\Gnibbler&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1588728,
                        "reputation": 430,
                        "user_id": 1867037,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/nPkPJ.jpg?s=256",
                        "display_name": "valentinos",
                        "link": "https://stackoverflow.com/users/1867037/valentinos"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1360754222,
                    "creation_date": 1360754222,
                    "answer_id": 14852277,
                    "question_id": 14852140,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try putting double quotes in your filepath variable</p>\n\n<pre><code>\"\\\"E:/ABC/SEM 2/testfiles/all.txt\\\"\"\n</code></pre>\n\n<p>Check the permissions of the file or in any case consider renaming the folder to remove the space</p>\n"
                }
            ]
        },
        {
            "17006641": [
                {
                    "owner": {
                        "account_id": 12043787,
                        "reputation": 496,
                        "user_id": 8809657,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/0yyRT.jpg?s=256",
                        "display_name": "Muhammad Abbas",
                        "link": "https://stackoverflow.com/users/8809657/muhammad-abbas"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1588332308,
                    "last_edit_date": 1588332308,
                    "creation_date": 1587969445,
                    "answer_id": 61453011,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use two for loops in same line by using <code>zip</code> function</p>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>list1 = ['Abbas', 'Ali', 'Usman']\nlist2 = ['Kamran', 'Asgar', 'Hamza', 'Umer']\nlist3 = []\nfor i,j in zip(list1,list2):\n    list3.append(i)\n    list3.append(j)\nprint(list3)\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<p><code>['Abbas', 'Kamran', 'Ali', 'Asgar', 'Usman', 'Hamza']</code></p>\n\n<p>So, by using zip function, we can use two for loops or we can iterate two lists in same row. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 16710270,
                        "reputation": 1,
                        "user_id": 12077641,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-RDjJx17RVKI/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rceXq-bS0s8UvC7VcM8lwjvwBsOmA/photo.jpg?sz=256",
                        "display_name": "rameshbabu reddy",
                        "link": "https://stackoverflow.com/users/12077641/rameshbabu-reddy"
                    },
                    "is_accepted": false,
                    "score": -6,
                    "last_activity_date": 1568707257,
                    "last_edit_date": 1568707257,
                    "creation_date": 1568700517,
                    "answer_id": 57968265,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Below code for best examples for nested loops, while using two for loops please remember the  output of the first loop is input for the second loop. \nLoop termination also important while using the nested loops  </p>\n\n<pre><code>for x in range(1, 10, 1):\n     for y in range(1,x):\n             print y,\n        print\nOutPut :\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4 5 6\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7 8\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1384489,
                        "reputation": 16968,
                        "user_id": 1316786,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/671cbefbe51a03acced16f2fccf9752d?s=256&d=identicon&r=PG",
                        "display_name": "Jeff Tratner",
                        "link": "https://stackoverflow.com/users/1316786/jeff-tratner"
                    },
                    "is_accepted": true,
                    "score": 240,
                    "last_activity_date": 1424877988,
                    "last_edit_date": 1424877988,
                    "creation_date": 1370755577,
                    "answer_id": 17006736,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The best source of information is the <a href=\"http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">official Python tutorial on list comprehensions</a>.  List comprehensions are nearly the same as for loops (certainly any list comprehension can be written as a for-loop) but they are often faster than using a for loop.</p>\n\n<p>Look at this longer list comprehension from the tutorial (the <code>if</code> part filters the comprehension, only parts that pass the if statement are passed into the final part of the list comprehension (here <code>(x,y)</code>):</p>\n\n<pre><code>&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</code></pre>\n\n<p>It's exactly the same as this nested for loop (and, as the tutorial says, note how the order of for and if are the same).</p>\n\n<pre><code>&gt;&gt;&gt; combs = []\n&gt;&gt;&gt; for x in [1,2,3]:\n...     for y in [3,1,4]:\n...         if x != y:\n...             combs.append((x, y))\n...\n&gt;&gt;&gt; combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</code></pre>\n\n<p>The major <em>difference</em> between a list comprehension and a for loop is that the final part of the for loop (where you do something) comes at the beginning rather than at the end.</p>\n\n<p>On to your questions:</p>\n\n<blockquote>\n  <p>What type must object be in order to use this for loop structure?</p>\n</blockquote>\n\n<p>An <a href=\"http://docs.python.org/2/glossary.html#term-iterable\" rel=\"noreferrer\">iterable</a>. Any object that can generate a (finite) set of elements. These include any container, lists, sets, generators, etc.</p>\n\n<blockquote>\n  <p>What is the order in which i and j are assigned to elements in object?</p>\n</blockquote>\n\n<p>They are assigned in exactly the same order as they are generated from each list, as if they were in a nested for loop (for your first comprehension you'd get 1 element for i, then every value from j, 2nd element into i, then every value from j, etc.)</p>\n\n<blockquote>\n  <p>Can it be simulated by a different for loop structure?</p>\n</blockquote>\n\n<p>Yes, already shown above.</p>\n\n<blockquote>\n  <p>Can this for loop be nested with a similar or different structure for loop? And how would it look?</p>\n</blockquote>\n\n<p>Sure, but it's not a great idea. Here, for example, gives you a list of lists of characters:</p>\n\n<pre><code>[[ch for ch in word] for word in (\"apple\", \"banana\", \"pear\", \"the\", \"hello\")]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 94247,
                        "reputation": 10746,
                        "user_id": 257418,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/9ncZpegK.jpg?s=256",
                        "display_name": "lynn",
                        "link": "https://stackoverflow.com/users/257418/lynn"
                    },
                    "is_accepted": false,
                    "score": 47,
                    "last_activity_date": 1370772780,
                    "creation_date": 1370772780,
                    "answer_id": 17008559,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You might be interested in <a href=\"http://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>, which returns an iterable yielding tuples  of values from all the iterables you pass it. That is, <code>itertools.product(A, B)</code> yields all values of the form <code>(a, b)</code>, where the <code>a</code> values come from <code>A</code> and the <code>b</code> values come from <code>B</code>. For example:</p>\n\n<pre><code>import itertools\n\nA = [50, 60, 70]\nB = [0.1, 0.2, 0.3, 0.4]\n\nprint [a + b for a, b in itertools.product(A, B)]\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>[50.1, 50.2, 50.3, 50.4, 60.1, 60.2, 60.3, 60.4, 70.1, 70.2, 70.3, 70.4]\n</code></pre>\n\n<p>Notice how the final argument passed to <code>itertools.product</code> is the \"inner\" one. Generally, <code>itertools.product(a<sub>0</sub>, a<sub>1</sub>, ... a<sub>n</sub>)</code> is equal to <code>[(i<sub>0</sub>, i<sub>1</sub>, ... i<sub>n</sub>) for i<sub>n</sub> in a<sub>n</sub> for i<sub>n-1</sub> in a<sub>n-1</sub> ... for i<sub>0</sub> in a<sub>0</sub>]</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 154611,
                        "reputation": 3009,
                        "user_id": 370662,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/10f19a9e600c4ed64f53a986fba57e21?s=256&d=identicon&r=PG",
                        "display_name": "korylprince",
                        "link": "https://stackoverflow.com/users/370662/korylprince"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1370755826,
                    "creation_date": 1370755826,
                    "answer_id": 17006756,
                    "question_id": 17006641,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>First of all, your first code doesn't use a for loop per se, but a <a href=\"http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"nofollow\">list comprehension</a>.</p>\n\n<ol>\n<li><p>Would be equivalent to</p>\n\n<p>for j in range(0, width):\n    for i in range(0, height):\n        m[i][j]</p></li>\n<li><p>Much the same way, it generally nests like for loops, right to left. But list comprehension syntax is more complex.</p></li>\n<li><p>I'm not sure what this question is asking</p></li>\n</ol>\n\n<hr>\n\n<ol>\n<li><p>Any iterable object that yields iterable objects that yield exactly two objects (what a mouthful - i.e <code>[(1,2),'ab']</code> would be valid )</p></li>\n<li><p>The order in which the object yields upon iteration. <code>i</code> goes to the first yield, <code>j</code> the second.</p></li>\n<li><p>Yes, but not as pretty. I believe it is functionally equivalent to:</p>\n\n<pre>\nl = list()\nfor i,j in object:\n    l.append(function(i,j))\n</pre>\n\n<p>or even better use <a href=\"http://docs.python.org/2/library/functions.html#map\" rel=\"nofollow\">map</a>:</p>\n\n<pre><code>map(function, object)\n</code></pre>\n\n<p>But of course function would have to get <code>i</code>, <code>j</code> itself.</p></li>\n<li><p>Isn't this the same question as 3?</p></li>\n</ol>\n"
                }
            ]
        },
        {
            "33742912": [
                {
                    "owner": {
                        "account_id": 5658633,
                        "reputation": 2723,
                        "user_id": 4476908,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/535903b296c0574530789216de75f31d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "NotAnAmbiTurner",
                        "link": "https://stackoverflow.com/users/4476908/notanambiturner"
                    },
                    "is_accepted": true,
                    "score": 85,
                    "last_activity_date": 1447702776,
                    "last_edit_date": 1447702776,
                    "creation_date": 1447701723,
                    "answer_id": 33742959,
                    "question_id": 33742912,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Replace <code>exit</code> with <code>break</code>. <code>Exit</code> isn't a way to exit loops in Python.</p>\n\n<p><a href=\"https://docs.python.org/2/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\" rel=\"noreferrer\">break statement docs</a></p>\n"
                }
            ]
        },
        {
            "16842823": [
                {
                    "owner": {
                        "account_id": 1933634,
                        "reputation": 3392,
                        "user_id": 1742489,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/pUY8bIfg.jpg?s=256",
                        "display_name": "Alejandro",
                        "link": "https://stackoverflow.com/users/1742489/alejandro"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1460297702,
                    "last_edit_date": 1460297702,
                    "creation_date": 1372911555,
                    "answer_id": 17461809,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Answering the last part of your question, always you have points in an image, you can find their coordinates by searching, in some order, the local maximums of the image. In case your data is not a point source, you can apply a mask to each peak in order to avoid the peak neighborhood from being a maximum while performing a future search. I propose the following code:</p>\n\n<pre><code>import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport copy\n\ndef get_std(image):\n    return np.std(image)\n\ndef get_max(image,sigma,alpha=20,size=10):\n    i_out = []\n    j_out = []\n    image_temp = copy.deepcopy(image)\n    while True:\n        k = np.argmax(image_temp)\n        j,i = np.unravel_index(k, image_temp.shape)\n        if(image_temp[j,i] &gt;= alpha*sigma):\n            i_out.append(i)\n            j_out.append(j)\n            x = np.arange(i-size, i+size)\n            y = np.arange(j-size, j+size)\n            xv,yv = np.meshgrid(x,y)\n            image_temp[yv.clip(0,image_temp.shape[0]-1),\n                                   xv.clip(0,image_temp.shape[1]-1) ] = 0\n            print xv\n        else:\n            break\n    return i_out,j_out\n\n#reading the image   \nimage = mpimg.imread('ggd4.jpg')\n#computing the standard deviation of the image\nsigma = get_std(image)\n#getting the peaks\ni,j = get_max(image[:,:,0],sigma, alpha=10, size=10)\n\n#let's see the results\nplt.imshow(image, origin='lower')\nplt.plot(i,j,'ro', markersize=10, alpha=0.5)\nplt.show()\n</code></pre>\n\n<p>The image ggd4 for the test can be downloaded from:</p>\n\n<p><a href=\"http://www.ipac.caltech.edu/2mass/gallery/spr99/ggd4.jpg\" rel=\"nofollow noreferrer\">http://www.ipac.caltech.edu/2mass/gallery/spr99/ggd4.jpg</a></p>\n\n<p>The first part is to get some information about the noise in the image. I did it by computing the standard deviation of the full image (actually is better to select an small rectangle without signal). This is telling us how much noise is present in the image. \nThe idea to get the peaks is to ask for successive maximums, which are above of certain threshold (let's say, 3, 4, 5, 10, or 20 times the noise). This is what the function get_max is actually doing. It performs the search of maximums until one of them is below the threshold imposed by the noise. In order to avoid finding the same maximum many times it is necessary to remove the peaks from the image. In the general way, the shape of the mask to do so depends strongly on the problem that one want to solve. for the case of stars, it should be good to remove the star by using a Gaussian function, or something similar. I have chosen for simplicity a square function, and the size of the function (in pixels) is the variable \"size\". \nI think that from this example, anybody can improve the code by adding more general things.   </p>\n\n<p><em>EDIT:</em></p>\n\n<p>The original image looks like:</p>\n\n<p><a href=\"https://i.sstatic.net/AUUUI.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/AUUUI.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>While the image after identifying the luminous points looks like this:</p>\n\n<p><a href=\"https://i.sstatic.net/HzaHW.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/HzaHW.png\" alt=\"enter image description here\"></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1199385,
                        "reputation": 1081,
                        "user_id": 1170370,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/3f1a7ea70c61f7db7b0e9d6ba912f23c?s=256&d=identicon&r=PG",
                        "display_name": "msarahan",
                        "link": "https://stackoverflow.com/users/1170370/msarahan"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1375593532,
                    "last_edit_date": 1375593532,
                    "creation_date": 1375592896,
                    "answer_id": 18039890,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Too much of a n00b on Stack Overflow to comment on Alejandro's answer elsewhere here.  I would refine his code a bit to use a preallocated numpy array for output:</p>\n\n<pre><code>def get_max(image,sigma,alpha=3,size=10):\n    from copy import deepcopy\n    import numpy as np\n    # preallocate a lot of peak storage\n    k_arr = np.zeros((10000,2))\n    image_temp = deepcopy(image)\n    peak_ct=0\n    while True:\n        k = np.argmax(image_temp)\n        j,i = np.unravel_index(k, image_temp.shape)\n        if(image_temp[j,i] &gt;= alpha*sigma):\n            k_arr[peak_ct]=[j,i]\n            # this is the part that masks already-found peaks.\n            x = np.arange(i-size, i+size)\n            y = np.arange(j-size, j+size)\n            xv,yv = np.meshgrid(x,y)\n            # the clip here handles edge cases where the peak is near the \n            #    image edge\n            image_temp[yv.clip(0,image_temp.shape[0]-1),\n                               xv.clip(0,image_temp.shape[1]-1) ] = 0\n            peak_ct+=1\n        else:\n            break\n    # trim the output for only what we've actually found\n    return k_arr[:peak_ct]\n</code></pre>\n\n<p>In profiling this and Alejandro's code using his example image, this code about 33% faster (0.03 sec for Alejandro's code, 0.02 sec for mine.)  I expect on images with larger numbers of peaks, it would be even faster - appending the output to a list will get slower and slower for more peaks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1162200,
                        "reputation": 42130,
                        "user_id": 1391441,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/FP3Un.jpg?s=256",
                        "display_name": "Gabriel",
                        "link": "https://stackoverflow.com/users/1391441/gabriel"
                    },
                    "is_accepted": true,
                    "score": 2,
                    "last_activity_date": 1372943399,
                    "last_edit_date": 1495541802,
                    "creation_date": 1372943399,
                    "answer_id": 17471172,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm adding this answer because it's the solution I ended up using. It's a combination of Bi Rico's comment here (May 30 at 18:54) and the answer given in this question: <a href=\"https://stackoverflow.com/questions/16822334/find-peak-of-2d-histogram\">Find peak of 2d histogram</a>.</p>\n\n<p>As it turns out using the peak detection algorithm from this question <a href=\"https://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array\">Peak detection in a 2D array</a> only complicates matters. After applying the Gaussian filter to the image all that needs to be done is to ask for the maximum bin (as Bi Rico pointed out) and then obtain the maximum in coordinates.</p>\n\n<p>So instead of using the <em>detect-peaks</em> function as I did above, I simply add the following code after the Gaussian 2D histogram is obtained:</p>\n\n<pre><code># Get 2D histogram.\nH, xedges, yedges = np.histogram2d(x, y, range=rang, bins=binsxy)\n# Get Gaussian filtered 2D histogram.\nH1 = gaussian_filter(H, 2, mode='nearest')\n# Get center of maximum in bin coordinates.\nx_cent_bin, y_cent_bin = np.unravel_index(H1.argmax(), H1.shape)\n# Get center in x,y coordinates.\nx_cent_coor , y_cent_coord = np.average(xedges[x_cent_bin:x_cent_bin + 2]), np.average(yedges[y_cent_g:y_cent_g + 2])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2485942,
                        "reputation": 325,
                        "user_id": 2164368,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/51e32b7fe3ad9e9cb4f917b05dca2601?s=256&d=identicon&r=PG",
                        "display_name": "Basileios",
                        "link": "https://stackoverflow.com/users/2164368/basileios"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1372889520,
                    "creation_date": 1372889520,
                    "answer_id": 17458948,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think the first step needed here is to express the values in H in terms of the standard deviation of the field: </p>\n\n<pre><code>import numpy as np\nH = H / np.std(H)\n</code></pre>\n\n<p>Now you can put a threshold on the values of this H. If the noise is assumed to be Gaussian, picking a threshold of 3 you can be quite sure (99.7%) that this pixel can be associated with a real peak and not noise. See <a href=\"http://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule\" rel=\"nofollow\">here</a>.</p>\n\n<p>Now the further selection can start. It is not exactly clear to me what exactly you want to find. Do you want the exact location of  peak values? Or do you want one location for a cluster of peaks which is in the middle of this cluster?<br>\nAnyway, starting from this point with all pixel values expressed in standard deviations of the field, you should be able to get what you want. If you want to find clusters you could perform a nearest neighbour search on the >3-sigma gridpoints and put a threshold on the distance. I.e. only connect them when they are close enough to each other. If several gridpoints are connected you can define this as a group/cluster and calculate some (sigma-weighted?) center of the cluster.\nHope my first contribution on Stackoverflow is useful for you!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1506721,
                        "reputation": 22651,
                        "user_id": 1409938,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/OKI5u.jpg?s=256",
                        "display_name": "gg349",
                        "link": "https://stackoverflow.com/users/1409938/gg349"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1369948741,
                    "creation_date": 1369948741,
                    "answer_id": 16846045,
                    "question_id": 16842823,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The way I would do it:</p>\n\n<p>1) normalize H between 0 and 1.</p>\n\n<p>2) pick a threshold value, as tcaswell suggests. It could be between .9 and .99 for example</p>\n\n<p>3) use masked arrays to keep only the x,y coordinates with H above threshold:</p>\n\n<pre><code>import numpy.ma as ma\nx_masked=ma.masked_array(x, mask= H &lt; thresold)\ny_masked=ma.masked_array(y, mask= H &lt; thresold)\n</code></pre>\n\n<p>4) now you can weight-average on the masked coordinates, with weight something like (H-threshold)^2, or any other power greater or equal to one, depending on your taste/tests.</p>\n\n<p>Comment:\n1) This is not robust with respect to the type of peaks you have, since you may have to adapt the thresold. This is the minor problem;\n2) This DOES NOT work with two peaks as it is, and will give wrong results if the 2nd peak is above threshold.</p>\n\n<p>Nonetheless, it will always give you an answer without crashing (with pros and cons of the thing..)</p>\n"
                }
            ]
        },
        {
            "11460681": [
                {
                    "owner": {
                        "account_id": 808621,
                        "reputation": 364766,
                        "user_id": 908494,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=256&d=identicon&r=PG",
                        "display_name": "abarnert",
                        "link": "https://stackoverflow.com/users/908494/abarnert"
                    },
                    "is_accepted": true,
                    "score": 14,
                    "last_activity_date": 1523899818,
                    "last_edit_date": 1523899818,
                    "creation_date": 1342135021,
                    "answer_id": 11462098,
                    "question_id": 11460681,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Note that this answer from 2012 is out of date. First, the workaround, which the answer already said you probably shouldn't do in 2012, now you <em>can't</em> do it. If you want a similar workaround, you could use <code>pip download</code>, but it's even less likely to be what you want. Especially since <code>pip show</code> has been improved. Fortunately, the question has been marked as a dup of a later question, so there's no reason to read this answer except for historical purposes.</p>\n\n<hr>\n\n<p>You can't, at least not directly.</p>\n\n<p>You can import the pip module in your own code and download the requirements file and then iterate through it. Or, from the command line, you can <code>pip install --no-install --verbose</code>. </p>\n\n<p>But really, unless this is something you need to automate, it's probably easier to just go to <a href=\"http://pypi.python.org/\" rel=\"noreferrer\">http://pypi.python.org/</a> and search for the package there instead of using pip.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2270650,
                        "reputation": 2160,
                        "user_id": 1998161,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/809f6b74a189ee6c23a4268bec73a28a?s=256&d=identicon&r=PG",
                        "display_name": "kdb",
                        "link": "https://stackoverflow.com/users/1998161/kdb"
                    },
                    "is_accepted": false,
                    "score": 166,
                    "last_activity_date": 1487770264,
                    "last_edit_date": 1487770264,
                    "creation_date": 1372191809,
                    "answer_id": 17306829,
                    "question_id": 11460681,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In current pip (version 1.3.1) you can see the dependencies of an installed package by using:</p>\n\n<pre><code>pip show &lt;package&gt;\n</code></pre>\n"
                }
            ]
        },
        {
            "12517451": [
                {
                    "owner": {
                        "account_id": 110545,
                        "reputation": 32437,
                        "user_id": 292477,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/7ca3cdf733e5ad7ca41c58ba43d06dcd?s=256&d=identicon&r=PG",
                        "display_name": "Krumelur",
                        "link": "https://stackoverflow.com/users/292477/krumelur"
                    },
                    "is_accepted": true,
                    "score": 1036,
                    "last_activity_date": 1660219472,
                    "last_edit_date": 1660219472,
                    "creation_date": 1348160919,
                    "answer_id": 12517490,
                    "question_id": 12517451,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.2+, using the APIs requested by the OP, you can <a href=\"https://docs.python.org/3/library/os.html#os.makedirs\" rel=\"noreferrer\">elegantly</a> do the following:</p>\n<pre class=\"lang-py prettyprint-override\"><code>\nimport os\n\nfilename = &quot;/foo/bar/baz.txt&quot;\nos.makedirs(os.path.dirname(filename), exist_ok=True)\nwith open(filename, &quot;w&quot;) as f:\n    f.write(&quot;FOOBAR&quot;)\n\n</code></pre>\n<hr />\n<p>With the Pathlib module (introduced in Python 3.4), there is an alternate syntax (thanks David258):</p>\n<pre class=\"lang-py prettyprint-override\"><code>from pathlib import Path\noutput_file = Path(&quot;/foo/bar/baz.txt&quot;)\noutput_file.parent.mkdir(exist_ok=True, parents=True)\noutput_file.write_text(&quot;FOOBAR&quot;)\n</code></pre>\n<hr />\n<p>In older python, there is a less elegant way:</p>\n<p>The <a href=\"http://docs.python.org/library/os.html#os.makedirs\" rel=\"noreferrer\"><code>os.makedirs</code></a> function does this. Try the following:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import os\nimport errno\n\nfilename = &quot;/foo/bar/baz.txt&quot;\nif not os.path.exists(os.path.dirname(filename)):\n    try:\n        os.makedirs(os.path.dirname(filename))\n    except OSError as exc: # Guard against race condition\n        if exc.errno != errno.EEXIST:\n            raise\n\nwith open(filename, &quot;w&quot;) as f:\n    f.write(&quot;FOOBAR&quot;)\n\n</code></pre>\n<p>The reason to add the <code>try-except</code> block is to handle the case when the directory was created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, so that to protect us from race conditions.</p>\n<hr />\n"
                }
            ]
        },
        {
            "4948043": [
                {
                    "owner": {
                        "account_id": 65984,
                        "reputation": 12631,
                        "user_id": 193852,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/297a5be5689710657f902068c51debdc?s=256&d=identicon&r=PG",
                        "display_name": "Andrea Spadaccini",
                        "link": "https://stackoverflow.com/users/193852/andrea-spadaccini"
                    },
                    "is_accepted": true,
                    "score": 26,
                    "last_activity_date": 1572041057,
                    "last_edit_date": 1572041057,
                    "creation_date": 1297272580,
                    "answer_id": 4948316,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try <a href=\"https://scapy.net/\" rel=\"noreferrer\">scapy</a>. It is a very powerful program for packet inspection, manipulation and creation.</p>\n\n<p>You can use it to <a href=\"https://scapy.readthedocs.io/en/latest/extending.html\" rel=\"noreferrer\">build your own tools</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1882750,
                        "reputation": 407,
                        "user_id": 1702557,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ae9ce865a3df8004202474394582c108?s=256&d=identicon&r=PG",
                        "display_name": "Pawel",
                        "link": "https://stackoverflow.com/users/1702557/pawel"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1455633425,
                    "creation_date": 1455633425,
                    "answer_id": 35435353,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>pycapfile</code> can be also used. Link to <code>pip</code>: <a href=\"https://pypi.python.org/pypi/pypcapfile\" rel=\"noreferrer\">https://pypi.python.org/pypi/pypcapfile</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 4845702,
                        "reputation": 465,
                        "user_id": 5065374,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/ZyHFU.png?s=256",
                        "display_name": "Giac",
                        "link": "https://stackoverflow.com/users/5065374/giac"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1448189244,
                    "creation_date": 1448189244,
                    "answer_id": 33853927,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I recommend you to use Pyshark. this is wrapper for tshark. it also support all of tshark filter, decoder lib, ... and easy to use!\nThis is a great package for parsing .pcap file and also livecapturing</p>\n\n<p><a href=\"https://pypi.python.org/pypi/pyshark\" rel=\"noreferrer\">https://pypi.python.org/pypi/pyshark</a></p>\n\n<p>sample code (from the link):</p>\n\n<pre><code>import pyshark\ncap = pyshark.FileCapture('/root/log.cap')\ncap\n&gt;&gt;&gt; &lt;FileCapture /root/log.cap&gt;\nprint cap[0]\nPacket (Length: 698)\nLayer ETH:\n        Destination: BLANKED\n        Source: BLANKED\n        Type: IP (0x0800)\nLayer IP:\n        Version: 4\n        Header Length: 20 bytes\n        Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))\n        Total Length: 684s\n        Identification: 0x254f (9551)\n        Flags: 0x00\n        Fragment offset: 0\n        Time to live: 1\n        Protocol: UDP (17)\n        Header checksum: 0xe148 [correct]\n        Source: BLANKED\n        Destination: BLANKED\n  ...\ndir(cap[0])\n['__class__', '__contains__', '__delattr__', '__dict__', '__dir__', '__doc__', '__format__', '__getattr__', '__getattribute__', '__getitem__', '__getstate__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_packet_string', 'bssgp', 'captured_length', 'eth', 'frame_info', 'gprs-ns', 'highest_layer', 'interface_captured', 'ip', 'layers', 'length', 'number', 'pretty_print', 'sniff_time', 'sniff_timestamp', 'transport_layer', 'udp']\ncap[0].layers\n[&lt;ETH Layer&gt;, &lt;IP Layer&gt;, &lt;UDP Layer&gt;, &lt;GPRS-NS Layer&gt;, &lt;BSSGP Layer&gt;]\n....\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 80762,
                        "reputation": 3478,
                        "user_id": 228141,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/1Y9ZS.jpg?s=256",
                        "display_name": "theist",
                        "link": "https://stackoverflow.com/users/228141/theist"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1314308423,
                    "last_edit_date": 1314308423,
                    "creation_date": 1297272260,
                    "answer_id": 4948251,
                    "question_id": 4948043,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I tried that and then tried pcapy. I choose pcapy because my use was similar to an example which I found googling. </p>\n\n<p><a href=\"http://snipplr.com/view/3579/live-packet-capture-in-python-with-pcapy/\">http://snipplr.com/view/3579/live-packet-capture-in-python-with-pcapy/</a> (or see the same code copied below)</p>\n\n<pre><code>import pcapy\nfrom impacket.ImpactDecoder import *\n\n# list all the network devices\npcapy.findalldevs()\n\nmax_bytes = 1024\npromiscuous = False\nread_timeout = 100 # in milliseconds\npc = pcapy.open_live(\"name of network device to capture from\", max_bytes, \n    promiscuous, read_timeout)\n\npc.setfilter('tcp')\n\n# callback for received packets\ndef recv_pkts(hdr, data):\n    packet = EthDecoder().decode(data)\n    print packet\n\npacket_limit = -1 # infinite\npc.loop(packet_limit, recv_pkts) # capture packets\n</code></pre>\n"
                }
            ]
        },
        {
            "3719243": [
                {
                    "owner": {
                        "account_id": 2458362,
                        "reputation": 28069,
                        "user_id": 2142994,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/1bad25bebfae0b3f4bfd13b07f5d4f3b?s=256&d=identicon&r=PG",
                        "display_name": "Ani Menon",
                        "link": "https://stackoverflow.com/users/2142994/ani-menon"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1532883754,
                    "creation_date": 1532883754,
                    "answer_id": 51582594,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Covers most of the general stuff -</p>\n\n<pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n</code></pre>\n\n<p>Reference: <a href=\"https://github.com/github/gitignore/blob/master/Python.gitignore\" rel=\"noreferrer\">python .gitignore</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1179800,
                        "reputation": 8635,
                        "user_id": 1154983,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GDHFv.png?s=256",
                        "display_name": "seanrose",
                        "link": "https://stackoverflow.com/users/1154983/seanrose"
                    },
                    "is_accepted": false,
                    "score": 533,
                    "last_activity_date": 1390578015,
                    "last_edit_date": 1390578015,
                    "creation_date": 1356627531,
                    "answer_id": 14058267,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://github.com/github/gitignore/blob/master/Python.gitignore\">Github has a great boilerplate .gitignore</a></p>\n\n<pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 129037,
                        "reputation": 29350,
                        "user_id": 327317,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0e197deaf223bdc0b552256da57c2ad5?s=256&d=identicon&r=PG",
                        "display_name": "Davor Lucic",
                        "link": "https://stackoverflow.com/users/327317/davor-lucic"
                    },
                    "is_accepted": true,
                    "score": 91,
                    "last_activity_date": 1284567715,
                    "creation_date": 1284567715,
                    "answer_id": 3719679,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When using <a href=\"http://www.buildout.org/\" rel=\"noreferrer\">buildout</a> I have following in <code>.gitignore</code> (along with <code>*.pyo</code> and <code>*.pyc</code>):</p>\n\n<pre><code>.installed.cfg\nbin\ndevelop-eggs\ndist\ndownloads\neggs\nparts\nsrc/*.egg-info\nlib\nlib64\n</code></pre>\n\n<p>Thanks to <a href=\"http://jacobian.org/writing/django-apps-with-buildout/\" rel=\"noreferrer\">Jacob Kaplan-Moss</a></p>\n\n<p>Also I tend to put <code>.svn</code> in since we use several SCM-s where I work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 66177,
                        "reputation": 33636,
                        "user_id": 194311,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=256&d=identicon&r=PG",
                        "display_name": "jathanism",
                        "link": "https://stackoverflow.com/users/194311/jathanism"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1284567112,
                    "creation_date": 1284567112,
                    "answer_id": 3719609,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here are some other files that may be left behind by setuptools:</p>\n\n<pre><code>MANIFEST\n*.egg-info\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 71038,
                        "reputation": 24813,
                        "user_id": 205508,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4437e31fa0c1333736b30c9543891198?s=256&d=identicon&r=PG",
                        "display_name": "Ofri Raviv",
                        "link": "https://stackoverflow.com/users/205508/ofri-raviv"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1284566809,
                    "creation_date": 1284566809,
                    "answer_id": 3719569,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://djangosnippets.org/snippets/644/\" rel=\"noreferrer\">local_settings.py</a>, for django projects.</p>\n\n<p>*~ for all projects.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 61768,
                        "reputation": 50716,
                        "user_id": 183910,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/5d509eb4ede1cf8d4db7353bbbdb8250?s=256&d=identicon&r=PG",
                        "display_name": "Bernhard Vallant",
                        "link": "https://stackoverflow.com/users/183910/bernhard-vallant"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1284565151,
                    "creation_date": 1284565151,
                    "answer_id": 3719309,
                    "question_id": 3719243,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>One question is if you also want to use git for the deploment of your projects. If so you probably would like to exclude your local sqlite file from the repository, same probably applies to file uploads (mostly in your media folder). (I'm talking about django now, since your question is also tagged with django)</p>\n"
                }
            ]
        },
        {
            "17326164": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 876871,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1626643768,
                    "last_edit_date": 1626643768,
                    "creation_date": 1372266883,
                    "answer_id": 17326452,
                    "question_id": 17326164,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If the other Python program is importable, and the functionality you need can be called via a function, then it is preferable to use <a href=\"http://docs.python.org/2/library/multiprocessing.html\" rel=\"nofollow noreferrer\">multiprocessing</a> instead of <code>subprocess</code>, since the arguments can be passed as Python objects, instead of via strings:</p>\n<pre><code>import somescript\nimport multiprocessing as mp\n\nproc = mp.Process(target=somescript.main, args=...)\nproc.start()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2900509,
                        "reputation": 4756,
                        "user_id": 2487336,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/6eae2a9fe7257a46c91f0515087e2940?s=256&d=identicon&r=PG",
                        "display_name": "xgord",
                        "link": "https://stackoverflow.com/users/2487336/xgord"
                    },
                    "is_accepted": true,
                    "score": 33,
                    "last_activity_date": 1626643716,
                    "last_edit_date": 1626643716,
                    "creation_date": 1372266169,
                    "answer_id": 17326236,
                    "question_id": 17326164,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use <a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow noreferrer\"><code>subprocess</code></a>:</p>\n<pre><code>import subprocess\n\n#code\nprog = subprocess.Popen(['python', filename, args])\n#more code\n</code></pre>\n"
                }
            ]
        },
        {
            "2424921": [
                {
                    "owner": {
                        "account_id": 518383,
                        "reputation": 1218,
                        "user_id": 4620617,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-QtlW1W33Fb0/AAAAAAAAAAI/AAAAAAAAKFw/mQOqtsanDL0/photo.jpg?sz=256",
                        "display_name": "Alberto Salvia Novella",
                        "link": "https://stackoverflow.com/users/4620617/alberto-salvia-novella"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1584806408,
                    "creation_date": 1584806408,
                    "answer_id": 60790010,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Performance wise both can do equally the same, so the question becomes which saves more development time?</p>\n\n<p>Bash relies on calling other commands, and piping them for creating new ones. This has the advantage that you can quickly create new programs just with the code borrowed from other people, no matter what programming language they used.</p>\n\n<p>This also has the side effect of resisting change in sub-commands pretty well, as the interface between them is just plain text.</p>\n\n<p>Additionally Bash is very permissive on how you can write on it. This means it will work well for a wider variety of context, but it also relies on the programmer having the intention of coding in a clean safe manner. Otherwise Bash won't stop you from building a mess.</p>\n\n<p>Python is more structured on style, so a messy programmer won't be as messy. It will also work on operating systems outside Linux, making it instantly more appropriate if you need that kind of portability.</p>\n\n<p>But it isn't as simple for calling other commands. So if your operating system is Unix most likely you will find that developing on Bash is the fastest way to develop.</p>\n\n<p>When to use Bash:</p>\n\n<ul>\n<li>It's a non graphical program, or the engine of a graphical one.</li>\n<li>It's only for Unix.</li>\n</ul>\n\n<p>When to use Python:</p>\n\n<ul>\n<li>It's a graphical program.</li>\n<li>It shall work on Windows.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 215522,
                        "reputation": 2246,
                        "user_id": 470211,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c3dce5eb87db57d57dc548506a79391b?s=256&d=identicon&r=PG",
                        "display_name": "DocSalvager",
                        "link": "https://stackoverflow.com/users/470211/docsalvager"
                    },
                    "is_accepted": true,
                    "score": 116,
                    "last_activity_date": 1580715944,
                    "last_edit_date": 1580715944,
                    "creation_date": 1358935505,
                    "answer_id": 14476979,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Typical mainframe flow...</strong></p>\n\n\n\n<pre class=\"lang-none prettyprint-override\"><code>Input Disk/Tape/User (runtime) --&gt; Job Control Language (JCL) --&gt; Output Disk/Tape/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; COBOL Program --------' \n</code></pre>\n\n<p><strong>Typical Linux flow...</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Input Disk/SSD/User (runtime) --&gt; sh/bash/ksh/zsh/... ----------&gt; Output Disk/SSD/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; Python script --------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; awk script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; sed script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--&gt; C/C++ program --------'\n                                   |                          ^\n                                   v                          |\n                                   `--- Java program ---------'\n                                   |                          ^\n                                   v                          |\n                                   :                          :\n</code></pre>\n\n<h2>Shells are the glue of Linux</h2>\n\n<p>Linux shells like sh/ksh/<strong>bash</strong>/... provide input/output/flow-control designation facilities much like the old mainframe Job Control Language... but on steroids! They are <a href=\"http://en.wikipedia.org/wiki/Turing_completeness\" rel=\"noreferrer\">Turing complete languages</a> in their own right while being optimized to efficiently pass data and control to and from other executing processes written in any language the O/S supports.</p>\n\n<p>Most Linux applications, regardless what language the bulk of the program is written in, depend on shell scripts and <strong>Bash</strong> has become the most common. Clicking an icon on the desktop usually runs a short <strong>Bash</strong> script. That script, either directly or indirectly, knows where all the files needed are and sets variables and command line parameters, finally calling the program. That's a shell's simplest use.</p>\n\n<p>Linux as we know it however would hardly be Linux without the thousands of shell scripts that startup the system, respond to events, control execution priorities and compile, configure and run programs. Many of these are quite large and complex.</p>\n\n<p>Shells provide an infrastructure that lets us use pre-built components that are linked together at run time rather than compile time. Those components are free-standing programs in their own right that can be used alone or in other combinations without recompiling. The syntax for calling them is indistinguishable from that of a <strong>Bash</strong> builtin command, and there are in fact numerous builtin commands for which there is also a stand-alone executable on the system, often having additional options.</p>\n\n<p>There is no language-wide difference between <strong>Python</strong> and <strong>Bash</strong> in performance. It entirely depends on how each is coded and which external tools are called.</p>\n\n<p><em>Any</em> of the well known tools like <strong>awk, sed, grep, bc, dc, tr,</strong> etc. will leave doing those operations in either language in the dust. <strong>Bash</strong> then is preferred for anything without a graphical user interface since it is easier and more efficient to call and pass data back from a tool like those with <strong>Bash</strong> than <strong>Python</strong>.</p>\n\n<h2>Performance</h2>\n\n<p>It depends on which programs the <strong>Bash</strong> shell script calls and their suitability for the subtask they are given whether the overall throughput and/or responsiveness will be better or worse than the equivalent <strong>Python</strong>. To complicate matters <strong>Python</strong>, like most languages, can also call other executables, though it is more cumbersome and thus not as often used.</p>\n\n<h2>User Interface</h2>\n\n<p>One area where <strong>Python</strong> is the clear winner is user interface. That makes it an excellent language for building local or client-server applications as it natively supports GTK graphics and is far more intuitive than <strong>Bash</strong>.</p>\n\n<p><strong>Bash</strong> only understands text. Other tools must be called for a GUI and data passed back from them. A <strong>Python</strong> script is one option. Faster but less flexible options are the binaries like <strong>YAD, Zenity, and GTKDialog</strong>.</p>\n\n<p>While shells like <strong>Bash</strong> work well with GUIs like <a href=\"https://sourceforge.net/projects/yad-dialog/\" rel=\"noreferrer\">Yad</a>, <a href=\"http://pclosmag.com/html/issues/200910/page21.html\" rel=\"noreferrer\">GtkDialog (embedded XML-like interface to GTK+ functions)</a>, <a href=\"http://linuxcommand.org/lc3_adv_dialog.php\" rel=\"noreferrer\">dialog</a>, and <a href=\"http://docstore.mik.ua/orelly/unix3/upt/ch36_26.htm\" rel=\"noreferrer\">xmessage</a>, <strong>Python</strong> is much more capable and so better for complex GUI windows.</p>\n\n<h2>Summary</h2>\n\n<p>Building with shell scripts is like assembling a computer with off-the-shelf components the way desktop PCs are.</p>\n\n<p>Building with <strong>Python</strong>, <strong>C++</strong> or most any other language is more like building a computer by soldering the chips (libraries) and other electronic parts together the way smartphones are.</p>\n\n<p>The best results are usually obtained by using <a href=\"https://stackoverflow.com/questions/636841/how-do-multiple-languages-interact-in-one-project\">a combination of languages</a> where each can do what they do best. One developer calls this \"<a href=\"http://memeagora.blogspot.com/2006/12/polyglot-programming.html\" rel=\"noreferrer\">polyglot programming</a>\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14335427,
                        "reputation": 375,
                        "user_id": 10519246,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fadd6f5d03063d9bb1c544c2cbce8de?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "BobC",
                        "link": "https://stackoverflow.com/users/10519246/bobc"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1559080314,
                    "last_edit_date": 1559080314,
                    "creation_date": 1559077174,
                    "answer_id": 56349977,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'm posting this late answer primarily because Google likes this question.</p>\n\n<p>I believe the issue and context really should be about the workflow, not the tools.  The overall philosophy is always \"Use the right tool for the job.\"  But before this comes one that many often forget when they get lost in the tools: \"Get the job done.\"</p>\n\n<p>When I have a problem that isn't completely defined, I almost always start with Bash.  I have solved some gnarly problems in large Bash scripts that are both readable and maintainable.</p>\n\n<p>But when does the problem start to exceed what Bash should be asked to do?  I have some checks I use to give me warnings:</p>\n\n<ol>\n<li>Am I wishing Bash had 2D (or higher) arrays?  If yes, it's time to realize that Bash is not a great data processing language.</li>\n<li>Am I doing more work preparing data for other utilities than I am actually running those utilities?  If yes, time again to realize Bash is not a great data processing language.</li>\n<li>Is my script simply getting too large to manage?  If yes, it is important to realize that while Bash can import script libraries, it lacks a package system like other languages.  It's really a \"roll your own\" language compared to most others.  Then again, it has a enormous amount of functionality built-in (some say too much...)</li>\n</ol>\n\n<p>The list goes on.  Bottom-line, when you are working harder to keep your scripts running that you do adding features, it's time to leave Bash.</p>\n\n<p>Let's assume you've decided to move your work to Python.  If your Bash scripts are clean, the initial conversion is quite straightforward.  There are even several converters / translators that will do the first pass for you.</p>\n\n<p>The next question is: What do you give up moving to Python?</p>\n\n<ol>\n<li><p>All calls to external utilities must be wrapped in something from the <code>subprocess</code> module (or equivalent).  There are multiple ways to do this, and until 3.7 it took some effort to get it right (3.7 improved <code>subprocess.run()</code> to handle all common cases on its own).</p></li>\n<li><p>Surprisingly, Python has no standard platform-independent non-blocking utility (with timeout) for polling the keyboard (stdin).  The Bash <code>read</code> command is an awesome tool for simple user interaction.  My most common use is to show a spinner until the user presses a key, while also running a polling function (with each spinner step) to make sure things are still running well.  This is a harder problem than it would appear at first, so I often simply make a call to Bash: Expensive, but it does precisely what I need.</p></li>\n<li><p>If you are developing on an embedded or memory-constrained system, Python's memory footprint can be many times larger than Bash's (depending on the task at hand).  Plus, there is almost always an instance of Bash already in memory, which may not be the case for Python.</p></li>\n<li><p>For scripts that run once and exit quickly, Python's startup time can be much longer than Bash's.  But if the script contains significant calculations, Python quickly pulls ahead.</p></li>\n<li><p>Python has the most comprehensive package system on the planet.  When Bash gets even slightly complex, Python probably has a package that makes whole chunks of Bash become a single call.  However, finding the right package(s) to use is the biggest and most daunting part of becoming a Pythonista.  Fortunately, Google and StackExchange are your friends.</p></li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 5830170,
                        "reputation": 1526,
                        "user_id": 4594990,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/oMg6W.jpg?s=256",
                        "display_name": "vigilancer",
                        "link": "https://stackoverflow.com/users/4594990/vigilancer"
                    },
                    "is_accepted": false,
                    "score": 46,
                    "last_activity_date": 1475887396,
                    "last_edit_date": 1475887396,
                    "creation_date": 1475887029,
                    "answer_id": 39927503,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>When you writing scripts performance does not matter (in most cases).<br>\nIf you care about performance 'Python vs Bash' is a false question.  </p>\n\n<p><strong>Python</strong>:<br>\n+ easier to write<br>\n+ easier to maintain<br>\n+ easier code reuse (try to find universal error-proof way to include files with common code in <code>sh</code>, I dare you)<br>\n+ you can do OOP with it too!<br>\n+ easier arguments parsing. well, not easier, exactly. it still will be too wordy to my taste, but python have <code>argparse</code> facility built in.<br>\n- ugly ugly 'subprocess'. try to chain commands and not to cry a river how ugly your code will become. especially if you care about exit codes.  </p>\n\n<p><strong>Bash</strong>:<br>\n+ ubiquity, as was said earlier, indeed.<br>\n+ simple commands chaining. that's how you glue together different   commands in a simple way. Also <code>Bash</code> (not <code>sh</code>) have some improvements, like <code>pipefail</code>, so chaining is really short and expressive.<br>\n+ do not require 3rd-party programs to be installed. can be executed right away.<br>\n- god, it's full of gotchas. IFS, CDPATH.. thousands of them.</p>\n\n<p>If one writing a script bigger than 100 LOC: choose <em>Python</em><br>\nIf one need path manipulation in script: choose <em>Python(3)</em><br>\nIf one need somewhat like <code>alias</code> but slightly complicated: choose <em>Bash/sh</em>  </p>\n\n<p>Anyway, one should try both sides to get the idea what are they capable of. </p>\n\n<p>Maybe answer can be extended with packaging and IDE support points, but I'm not familiar with this sides.  </p>\n\n<p>As always you have to choose from turd sandwich and giant douche.\nAnd remember, just a few years ago Perl was new hope. Where it is now.  </p>\n"
                },
                {
                    "owner": {
                        "account_id": 4657388,
                        "reputation": 3990,
                        "user_id": 3772603,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/ZTvKe.png?s=256",
                        "display_name": "dylnmc",
                        "link": "https://stackoverflow.com/users/3772603/dylnmc"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1456494518,
                    "creation_date": 1456494518,
                    "answer_id": 35653422,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I don't know if this is accurate, but I have found that python/ruby works much better for scripts that have a lot of mathematical computations. Otherwise you have to use <code>dc</code> or some other \"arbitrary precision calculator\". It just becomes a very big pain. With python you have much more control over floats vs ints and it is much easier to perform a lot of computations and sometimes.</p>\n\n<p>In particular, I would never work with a bash script to handle binary information or bytes. Instead I would use something like python (maybe) or C++ or even Node.JS.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2512130,
                        "reputation": 10462,
                        "user_id": 2184341,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/530767d4f1e6c9ed55c79ef6678d9e1b?s=256&d=identicon&r=PG",
                        "display_name": "Grzegorz Luczywo",
                        "link": "https://stackoverflow.com/users/2184341/grzegorz-luczywo"
                    },
                    "is_accepted": false,
                    "score": 41,
                    "last_activity_date": 1413542547,
                    "last_edit_date": 1413542547,
                    "creation_date": 1407366354,
                    "answer_id": 25171738,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Performance-wise bash outperforms python in the process startup time. </p>\n\n<p>Here are some measurements from my core i7 laptop running Linux Mint:</p>\n\n<pre><code>Starting process                       Startup time\n\nempty /bin/sh script                   1.7 ms\nempty /bin/bash script                 2.8 ms\nempty python script                    11.1 ms\npython script with a few libs*         110 ms\n</code></pre>\n\n<p><em>*Python loaded libs are: os, os.path, json, time, requests, threading, subprocess</em></p>\n\n<p>This shows a huge difference however bash execution time degrades quickly if it has to do anything sensible since it usually must call external processes. </p>\n\n<p>If you care about performance use bash only for:</p>\n\n<ul>\n<li>really simple and frequently called scripts</li>\n<li>scripts that mainly call other processes</li>\n<li>when you need minimal friction between manual administrative actions and scripting - fast check a few commands and place them in the file.sh</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1481617,
                        "reputation": 198,
                        "user_id": 1390860,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ac02a80ebd448c2b32d6ba4e57ecf0e2?s=256&d=identicon&r=PG",
                        "display_name": "zamhassam",
                        "link": "https://stackoverflow.com/users/1390860/zamhassam"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1336816161,
                    "creation_date": 1336816161,
                    "answer_id": 10562652,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are looking to cobble together a quick utility with minimal effort, bash is good.  For a wrapper round an application, bash is invaluable.</p>\n\n<p>Anything that may have you coming back over and over to add improvements is probably (though not always) better suited to a language like Python as Bash code comprising over a 1000 lines gets very painful to maintain. Bash code is also irritating to debug when it gets long.......</p>\n\n<p>Part of the problem with these kind of questions is, from my experience, that shell scripts are usually all custom tasks.  There have been very few shell scripting tasks that I have come across where there is already a solution freely available.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7954,
                        "reputation": 12886,
                        "user_id": 14028,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/66c0b0464838d75ad39c0baeaa01bf4c?s=256&d=identicon&r=PG",
                        "display_name": "Kevin Little",
                        "link": "https://stackoverflow.com/users/14028/kevin-little"
                    },
                    "is_accepted": false,
                    "score": 84,
                    "last_activity_date": 1268546982,
                    "creation_date": 1268546982,
                    "answer_id": 2441363,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Generally, bash works better than python only in those environments where python is not available. :)</p>\n\n<p>Seriously, I have to deal with both languages daily, and will take python instantly over bash if given the choice. Alas, I am forced to use bash on certain \"small\" platforms because someone has (mistakenly, IMHO) decided that python is \"too large\" to fit.</p>\n\n<p>While it is true that bash might be faster than python for some select tasks, it can never be as quick to develop with, or as easy to maintain (at least after you get past 10 lines of code or so). Bash's sole strong point wrt python or ruby or lua, etc., is its ubiquity.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 487472,
                        "reputation": 395,
                        "user_id": 210362,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7c4ecbb9e1886757fd68c6e17068a2b6?s=256&d=identicon&r=PG",
                        "display_name": "Justin",
                        "link": "https://stackoverflow.com/users/210362/justin"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1268321826,
                    "creation_date": 1268321826,
                    "answer_id": 2426281,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bash is primarily a batch / shell scripting language with far less support for various data types and all sorts of quirks around control structures -- not to mention compatibility issues. </p>\n\n<p>Which is faster? Neither, because you are not comparing apples to apples here. If you had to sort an ascii text file and you were using tools like zcat, sort, uniq, and sed then you will smoke Python performance wise. </p>\n\n<p>However, if you need a proper programming environment that supports floating point and various control flow, then Python wins hands down. If you wrote say a recursive algorithm in Bash and Python, the Python version will win in an order of magnitude or more. </p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "Roger Pate"
                    },
                    "is_accepted": false,
                    "community_owned_date": 1268311850,
                    "score": 40,
                    "last_activity_date": 1268312638,
                    "last_edit_date": 1268312638,
                    "creation_date": 1268311850,
                    "answer_id": 2424971,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>Developer efficiency</strong> matters much more to me in scenarios where both bash and Python are sensible choices.</p>\n\n<p>Some tasks lend themselves well to bash, and others to Python.  It also isn't unusual for me to start something as a bash script and change it to Python as it evolves over several weeks.  </p>\n\n<p>A big advantage Python has is in corner cases around filename handling, while it has <a href=\"http://docs.python.org/library/glob.html\" rel=\"noreferrer\">glob</a>, <a href=\"http://docs.python.org/library/shutil.html\" rel=\"noreferrer\">shutil</a>, <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a>, and others for common scripting needs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12478,
                        "reputation": 23919,
                        "user_id": 24582,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/729b33d5aa9b07da2c359a325bebb6ad?s=256&d=identicon&r=PG",
                        "display_name": "extraneon",
                        "link": "https://stackoverflow.com/users/24582/extraneon"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1268311849,
                    "creation_date": 1268311849,
                    "answer_id": 2424969,
                    "question_id": 2424921,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There are 2 scenario's where Bash performance is at least equal I believe:</p>\n\n<ul>\n<li>Scripting of command line utilities</li>\n<li>Scripts which take only a short time to execute; where starting the Python interpreter takes more time than the operation itself</li>\n</ul>\n\n<p>That said, I usually don't really concern myself with performance of the scripting language itself. If performance is a real issue you don't script but program (possibly in Python).</p>\n"
                }
            ]
        },
        {
            "8290397": [
                {
                    "owner": {
                        "account_id": 186862,
                        "reputation": 225414,
                        "user_id": 424499,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG",
                        "display_name": "Raymond Hettinger",
                        "link": "https://stackoverflow.com/users/424499/raymond-hettinger"
                    },
                    "is_accepted": false,
                    "score": 96,
                    "last_activity_date": 1670266524,
                    "last_edit_date": 1670266524,
                    "creation_date": 1322442569,
                    "answer_id": 8290490,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">recipes in the itertools module</a> provide two ways to do this depending on how you want to handle a final odd-sized lot (keep it, pad it with a fillvalue, ignore it, or raise an exception):</p>\n<pre><code>from itertools import islice, zip_longest\n\ndef batched(iterable, n):\n    &quot;Batch data into lists of length n. The last batch may be shorter.&quot;\n    # batched('ABCDEFG', 3) --&gt; ABC DEF G\n    it = iter(iterable)\n    while True:\n        batch = list(islice(it, n))\n        if not batch:\n            return\n        yield batch\n\ndef grouper(iterable, n, *, incomplete='fill', fillvalue=None):\n    &quot;Collect data into non-overlapping fixed-length chunks or blocks&quot;\n    # grouper('ABCDEFG', 3, fillvalue='x') --&gt; ABC DEF Gxx\n    # grouper('ABCDEFG', 3, incomplete='strict') --&gt; ABC DEF ValueError\n    # grouper('ABCDEFG', 3, incomplete='ignore') --&gt; ABC DEF\n    args = [iter(iterable)] * n\n    if incomplete == 'fill':\n        return zip_longest(*args, fillvalue=fillvalue)\n    if incomplete == 'strict':\n        return zip(*args, strict=True)\n    if incomplete == 'ignore':\n        return zip(*args)\n    else:\n        raise ValueError('Expected fill, strict, or ignore')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1621839,
                        "reputation": 2235,
                        "user_id": 1498217,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/30a4f1ed499ec94782f46f2ca2c0e975?s=256&d=identicon&r=PG",
                        "display_name": "Atra Azami",
                        "link": "https://stackoverflow.com/users/1498217/atra-azami"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1629450113,
                    "last_edit_date": 1629450113,
                    "creation_date": 1594812596,
                    "answer_id": 62913856,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Solution for Python 3.8 if you are working with iterables that don't define a <code>len</code> function, and get exhausted:</p>\n<pre><code>from itertools import islice\n\ndef batcher(iterable, batch_size):\n    iterator = iter(iterable)\n    while batch := list(islice(iterator, batch_size)):\n        yield batch\n</code></pre>\n<p>Example usage:</p>\n<pre><code>def my_gen():\n    yield from range(10)\n \nfor batch in batcher(my_gen(), 3):\n    print(batch)\n\n&gt;&gt;&gt; [0, 1, 2]\n&gt;&gt;&gt; [3, 4, 5]\n&gt;&gt;&gt; [6, 7, 8]\n&gt;&gt;&gt; [9]\n\n</code></pre>\n<p>Could of course be implemented without the walrus operator as well.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7571809,
                        "reputation": 1463,
                        "user_id": 5745441,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e887d398488bd83fbe4119f5d2711aee?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "0-_-0",
                        "link": "https://stackoverflow.com/users/5745441/0-0"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1624279065,
                    "creation_date": 1624279065,
                    "answer_id": 68068082,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I like this one,</p>\n<pre><code>def batch(x, bs):\n    return [x[i:i+bs] for i in range(0, len(x), bs)]\n</code></pre>\n<p>This returns a list of batches of size <code>bs</code>, you can make it a generator by using a generator expression <code>(i for i in iterable)</code> of course.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 432313,
                        "reputation": 5562,
                        "user_id": 816999,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/190b7d54fa9bbcc29622ebd09fab3a2c?s=256&d=identicon&r=PG",
                        "display_name": "Yongwei Wu",
                        "link": "https://stackoverflow.com/users/816999/yongwei-wu"
                    },
                    "is_accepted": false,
                    "score": 62,
                    "last_activity_date": 1619024459,
                    "last_edit_date": 1619024459,
                    "creation_date": 1564372224,
                    "answer_id": 57247000,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://more-itertools.readthedocs.io/\" rel=\"noreferrer\">More-itertools</a> includes two functions that do what you need:</p>\n<ul>\n<li><a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.chunked\" rel=\"noreferrer\"><code>chunked(iterable, n)</code></a> returns an iterable of lists, each of length <code>n</code> (except the last one, which may be shorter);</li>\n<li><a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ichunked\" rel=\"noreferrer\"><code>ichunked(iterable, n)</code></a> is similar, but returns an iterable of <em>iterables</em> instead.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 18360200,
                        "reputation": 31,
                        "user_id": 13372470,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e98a506246bb3e3801a134965ab95674?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Douw Marx",
                        "link": "https://stackoverflow.com/users/13372470/douw-marx"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1616071408,
                    "creation_date": 1616071408,
                    "answer_id": 66691328,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This code has the following features:</p>\n<blockquote>\n<ul>\n<li>Can take lists or generators (no len()) as input</li>\n<li>Does not require imports of other packages</li>\n<li>No padding added to last batch</li>\n</ul>\n</blockquote>\n<pre><code>def batch_generator(items, batch_size):\n    itemid=0 # Keeps track of current position in items generator/list\n    batch = [] # Empty batch\n    for item in items: \n      batch.append(item) # Append items to batch\n      if len(batch)==batch_size:\n        yield batch\n        itemid += batch_size # Increment the position in items\n        batch = []\n    yield batch # yield last bit\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 49162,
                        "reputation": 22456,
                        "user_id": 146289,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/fa7f6c8be0d09fd8438332eef28a40d3?s=256&d=identicon&r=PG",
                        "display_name": "vdboor",
                        "link": "https://stackoverflow.com/users/146289/vdboor"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1614244110,
                    "creation_date": 1614244110,
                    "answer_id": 66365466,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Moving as much into CPython as possible, by leveraging islice and iter(callable) behavior:</p>\n<pre><code>from itertools import islice\n\ndef chunked(generator, size):\n    &quot;&quot;&quot;Read parts of the generator, pause each time after a chunk&quot;&quot;&quot;\n    # islice returns results until 'size',\n    # make_chunk gets repeatedly called by iter(callable).\n    gen = iter(generator)\n    make_chunk = lambda: list(islice(gen, size))\n    return iter(make_chunk, [])\n</code></pre>\n<p>Inspired by more-itertools, and shortened to the essence of that code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16313176,
                        "reputation": 51,
                        "user_id": 11781161,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ce5a01ddf30f071c59e2fc70dfa1d8c6?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "His_Excellency",
                        "link": "https://stackoverflow.com/users/11781161/his-excellency"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1606429966,
                    "creation_date": 1606429966,
                    "answer_id": 65029995,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A workable version without new features in python 3.8, adapted from @Atra Azami's answer.</p>\n<pre><code>import itertools    \n\ndef batch_generator(iterable, batch_size=1):\n    iterable = iter(iterable)\n\n    while True:\n        batch = list(itertools.islice(iterable, batch_size))\n        if len(batch) &gt; 0:\n            yield batch\n        else:\n            break\n\nfor x in batch_generator(range(0, 10), 3):\n    print(x)\n</code></pre>\n<p>Output:</p>\n<pre><code>[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8382566,
                        "reputation": 815,
                        "user_id": 6293961,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/a68367742e8478a356c08cb8f8e5b64a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "W. Zhu",
                        "link": "https://stackoverflow.com/users/6293961/w-zhu"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1605341469,
                    "creation_date": 1605341469,
                    "answer_id": 64832009,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Keep taking (at most) n elements until it runs out.</p>\n<pre><code>def chop(n, iterable):\n    iterator = iter(iterable)\n    while chunk := list(take(n, iterator)):\n        yield chunk\n\n\ndef take(n, iterable):\n    iterator = iter(iterable)\n    for i in range(n):\n        try:\n            yield next(iterator)\n        except StopIteration:\n            return\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5440025,
                        "reputation": 527,
                        "user_id": 4328352,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6154cdd9be0141399b556aba22911cdf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "gazorpazorp",
                        "link": "https://stackoverflow.com/users/4328352/gazorpazorp"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1598019415,
                    "creation_date": 1598019415,
                    "answer_id": 63524581,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use</p>\n<pre class=\"lang-py prettyprint-override\"><code>def batchify(arr, batch_size):\n  num_batches = math.ceil(len(arr) / batch_size)\n  return [arr[i*batch_size:(i+1)*batch_size] for i in range(num_batches)]\n  \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4098216,
                        "reputation": 385,
                        "user_id": 3364423,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0102b373d19dca0c25c6be98f763ab4e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yacc143",
                        "link": "https://stackoverflow.com/users/3364423/yacc143"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1590584082,
                    "creation_date": 1590584082,
                    "answer_id": 62043630,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from itertools import *\n\nclass SENTINEL: pass\n\ndef batch(iterable, n):\n    return (tuple(filterfalse(lambda x: x is SENTINEL, group)) for group in zip_longest(fillvalue=SENTINEL, *[iter(iterable)] * n))\n\nprint(list(range(10), 3)))\n# outputs: [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\nprint(list(batch([None]*10, 3)))\n# outputs: [(None, None, None), (None, None, None), (None, None, None), (None,)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 177694,
                        "reputation": 7016,
                        "user_id": 409184,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/WVuqewXK.jpg?s=256",
                        "display_name": "Carl F.",
                        "link": "https://stackoverflow.com/users/409184/carl-f"
                    },
                    "is_accepted": true,
                    "score": 210,
                    "last_activity_date": 1588761338,
                    "last_edit_date": 1588761338,
                    "creation_date": 1322442762,
                    "answer_id": 8290508,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is probably more efficient (faster)</p>\n\n<pre><code>def batch(iterable, n=1):\n    l = len(iterable)\n    for ndx in range(0, l, n):\n        yield iterable[ndx:min(ndx + n, l)]\n\nfor x in batch(range(0, 10), 3):\n    print x\n</code></pre>\n\n<hr>\n\n<p><strong>Example using list</strong></p>\n\n<pre><code>data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # list of data \n\nfor x in batch(data, 3):\n    print(x)\n\n# Output\n\n[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9, 10]\n</code></pre>\n\n<p>It avoids building new lists.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3395920,
                        "reputation": 393,
                        "user_id": 2849548,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/878f8a78af70e694b4884c8f4ccab7d9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "alvitawa",
                        "link": "https://stackoverflow.com/users/2849548/alvitawa"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1584628101,
                    "creation_date": 1584628101,
                    "answer_id": 60759197,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Related functionality you may need:</p>\n\n<pre><code>def batch(size, i):\n    \"\"\" Get the i'th batch of the given size \"\"\"\n    return slice(size* i, size* i + size)\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; [1,2,3,4,5,6,7,8,9,10][batch(3, 1)]\n&gt;&gt;&gt; [4, 5, 6]\n</code></pre>\n\n<p>It gets the i'th batch from the sequence and it can work with other data structures as well, like pandas dataframes (<code>df.iloc[batch(100,0)]</code>) or numpy array (<code>array[batch(100,0)]</code>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6717350,
                        "reputation": 346,
                        "user_id": 5178765,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d3af6e498684a1681c6ebc435a593df?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dimathe47",
                        "link": "https://stackoverflow.com/users/5178765/dimathe47"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1582671060,
                    "creation_date": 1582671060,
                    "answer_id": 60404342,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can just group iterable items by their batch index.</p>\n\n<pre><code>def batch(items: Iterable, batch_size: int) -&gt; Iterable[Iterable]:\n    # enumerate items and group them by batch index\n    enumerated_item_groups = itertools.groupby(enumerate(items), lambda t: t[0] // batch_size)\n    # extract items from enumeration tuples\n    item_batches = ((t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    return item_batches\n</code></pre>\n\n<p>It is often the case when you want to collect inner iterables so here is more advanced version.</p>\n\n<pre><code>def batch_advanced(items: Iterable, batch_size: int, batches_mapper: Callable[[Iterable], Any] = None) -&gt; Iterable[Iterable]:\n    enumerated_item_groups = itertools.groupby(enumerate(items), lambda t: t[0] // batch_size)\n    if batches_mapper:\n        item_batches = (batches_mapper(t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    else:\n        item_batches = ((t[1] for t in enumerated_items) for key, enumerated_items in enumerated_item_groups)\n    return item_batches\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>print(list(batch_advanced([1, 9, 3, 5, 2, 4, 2], 4, tuple)))\n# [(1, 9, 3, 5), (2, 4, 2)]\nprint(list(batch_advanced([1, 9, 3, 5, 2, 4, 2], 4, list)))\n# [[1, 9, 3, 5], [2, 4, 2]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 432313,
                        "reputation": 5562,
                        "user_id": 816999,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/190b7d54fa9bbcc29622ebd09fab3a2c?s=256&d=identicon&r=PG",
                        "display_name": "Yongwei Wu",
                        "link": "https://stackoverflow.com/users/816999/yongwei-wu"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1578566384,
                    "last_edit_date": 1578566384,
                    "creation_date": 1564369664,
                    "answer_id": 57246759,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is a very short code snippet I know that does not use <code>len</code> and works under both Python 2 and 3 (not my creation):</p>\n\n<pre><code>def chunks(iterable, size):\n    from itertools import chain, islice\n    iterator = iter(iterable)\n    for first in iterator:\n        yield list(chain([first], islice(iterator, size - 1)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1330565,
                        "reputation": 369,
                        "user_id": 1274577,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/ETsm7.jpg?s=256",
                        "display_name": "Atila Romero",
                        "link": "https://stackoverflow.com/users/1274577/atila-romero"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1566318810,
                    "creation_date": 1566318810,
                    "answer_id": 57578026,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>def batch(iterable, n):\n    iterable=iter(iterable)\n    while True:\n        chunk=[]\n        for i in range(n):\n            try:\n                chunk.append(next(iterable))\n            except StopIteration:\n                yield chunk\n                return\n        yield chunk\n\nlist(batch(range(10), 3))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 23634,
                        "reputation": 10167,
                        "user_id": 59352,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/f33c37d52c56856f4c91344d7471eee0?s=256&d=identicon&r=PG",
                        "display_name": "Lycha",
                        "link": "https://stackoverflow.com/users/59352/lycha"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1550212648,
                    "last_edit_date": 1550212648,
                    "creation_date": 1550209589,
                    "answer_id": 54703307,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here is an approach using <code>reduce</code> function.</p>\n\n<p>Oneliner:</p>\n\n<pre><code>from functools import reduce\nreduce(lambda cumulator,item: cumulator[-1].append(item) or cumulator if len(cumulator[-1]) &lt; batch_size else cumulator + [[item]], input_array, [[]])\n</code></pre>\n\n<p>Or more readable version:</p>\n\n<pre><code>from functools import reduce\ndef batch(input_list, batch_size):\n  def reducer(cumulator, item):\n    if len(cumulator[-1]) &lt; batch_size:\n      cumulator[-1].append(item)\n      return cumulator\n    else:\n      cumulator.append([item])\n    return cumulator\n  return reduce(reducer, input_list, [[]])\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>&gt;&gt;&gt; batch([1,2,3,4,5,6,7], 3)\n[[1, 2, 3], [4, 5, 6], [7]]\n&gt;&gt;&gt; batch(a, 8)\n[[1, 2, 3, 4, 5, 6, 7]]\n&gt;&gt;&gt; batch([1,2,3,None,4], 3)\n[[1, 2, 3], [None, 4]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1623510,
                        "reputation": 3703,
                        "user_id": 1499598,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/pgfzZ.jpg?s=256",
                        "display_name": "Trideep Rath",
                        "link": "https://stackoverflow.com/users/1499598/trideep-rath"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1548894155,
                    "last_edit_date": 1548894155,
                    "creation_date": 1548893749,
                    "answer_id": 54451553,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This would work for any iterable. </p>\n\n<pre><code>from itertools import zip_longest, filterfalse\n\ndef batch_iterable(iterable, batch_size=2): \n    args = [iter(iterable)] * batch_size \n    return (tuple(filterfalse(lambda x: x is None, group)) for group in zip_longest(fillvalue=None, *args))\n</code></pre>\n\n<p>It would work like this:</p>\n\n<pre><code>&gt;&gt;&gt;list(batch_iterable(range(0,5)), 2)\n[(0, 1), (2, 3), (4,)]\n</code></pre>\n\n<p>PS: It would not work if iterable has None values.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6320,
                        "reputation": 48632,
                        "user_id": 10583,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/3891f38e5165127cac92a4e9e4aba688?s=256&d=identicon&r=PG",
                        "display_name": "Josh Smeaton",
                        "link": "https://stackoverflow.com/users/10583/josh-smeaton"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1548806144,
                    "creation_date": 1548806144,
                    "answer_id": 54431431,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is what I use in my project. It handles iterables or lists as efficiently as possible.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def chunker(iterable, size):\n    if not hasattr(iterable, \"__len__\"):\n        # generators don't have len, so fall back to slower\n        # method that works with generators\n        for chunk in chunker_gen(iterable, size):\n            yield chunk\n        return\n\n    it = iter(iterable)\n    for i in range(0, len(iterable), size):\n        yield [k for k in islice(it, size)]\n\n\ndef chunker_gen(generator, size):\n    iterator = iter(generator)\n    for first in iterator:\n\n        def chunk():\n            yield first\n            for more in islice(iterator, size - 1):\n                yield more\n\n        yield [k for k in chunk()]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 803579,
                        "reputation": 23136,
                        "user_id": 5249307,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5c640cd731ca8e455d79860519b6b208?s=256&d=identicon&r=PG",
                        "display_name": "donkopotamus",
                        "link": "https://stackoverflow.com/users/5249307/donkopotamus"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1414571095,
                    "last_edit_date": 1414571095,
                    "creation_date": 1322442800,
                    "answer_id": 8290514,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As others have noted, the code you have given does exactly what you want.  For another approach using <code>itertools.islice</code> you could see an <a href=\"http://code.activestate.com/recipes/303279-getting-items-in-batches/\" rel=\"noreferrer\">example</a> of following recipe:</p>\n\n<pre><code>from itertools import islice, chain\n\ndef batch(iterable, size):\n    sourceiter = iter(iterable)\n    while True:\n        batchiter = islice(sourceiter, size)\n        yield chain([batchiter.next()], batchiter)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 441989,
                        "reputation": 3496,
                        "user_id": 832391,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d312a0b7fcf2eaa8acab006c2c2f407d?s=256&d=identicon&r=PG",
                        "display_name": "John Doe",
                        "link": "https://stackoverflow.com/users/832391/john-doe"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1322442315,
                    "creation_date": 1322442315,
                    "answer_id": 8290470,
                    "question_id": 8290397,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Weird, seems to work fine for me in Python 2.x</p>\n\n<pre><code>&gt;&gt;&gt; def batch(iterable, n = 1):\n...    current_batch = []\n...    for item in iterable:\n...        current_batch.append(item)\n...        if len(current_batch) == n:\n...            yield current_batch\n...            current_batch = []\n...    if current_batch:\n...        yield current_batch\n...\n&gt;&gt;&gt; for x in batch(range(0, 10), 3):\n...     print x\n...\n[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9]\n</code></pre>\n"
                }
            ]
        },
        {
            "26443871": [
                {
                    "owner": {
                        "account_id": 1611852,
                        "reputation": 21346,
                        "user_id": 1490552,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3V3yR.jpg?s=256",
                        "display_name": "Adem &#214;zta\u015f",
                        "link": "https://stackoverflow.com/users/1490552/adem-%c3%96zta%c5%9f"
                    },
                    "is_accepted": true,
                    "score": 64,
                    "last_activity_date": 1466775276,
                    "last_edit_date": 1466775276,
                    "creation_date": 1413661948,
                    "answer_id": 26443912,
                    "question_id": 26443871,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"https://docs.python.org/2/library/shutil.html#shutil.move\" rel=\"noreferrer\">shutil.move()</a></p>\n\n<pre><code>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.move(source, destination)\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/os.html#os.rename\" rel=\"noreferrer\">os.rename()</a></p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.rename(source, destination)\n</code></pre>\n"
                }
            ]
        },
        {
            "20996193": [
                {
                    "owner": {
                        "account_id": 421758,
                        "reputation": 3165,
                        "user_id": 800158,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://i.sstatic.net/tYupC.jpg?s=256",
                        "display_name": "Inversus",
                        "link": "https://stackoverflow.com/users/800158/inversus"
                    },
                    "is_accepted": true,
                    "score": 78,
                    "last_activity_date": 1440442693,
                    "last_edit_date": 1440442693,
                    "creation_date": 1404984730,
                    "answer_id": 24673008,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As my travels into the depths of PyQt5 continue, so shall I continue to update this answer with some of the shinier treasures I find. </p>\n\n<p>That being said, I am now taking a \"rough draft\" stab at a quick intro to PyQt5. I will also provide links to helpful resources. I am new to this framework as well, and I will elaborate on what I believe to be a good strategy for using it, as I figure that strategy out. There are likely other good strategies, so if anyone has anything to add, then please leave a comment. This is very much a work in progress.</p>\n\n<hr>\n\n<h2>Strategy</h2>\n\n<p>I've learned much from the example code as suggested in the other answer, but something the examples don't help with is PyQt5's deep magic. Frameworks with a lot of magic in them (PyQt5, Django, SQLAlchemy, ...) are great because an enormous amount of drudgery is abstracted away from you. On the flip side, it is not always clear what the hell is going on, or what you're supposed to do about it. </p>\n\n<p>Luckily, it seems we have options:</p>\n\n<ul>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/designer-quick-start.html\">QtDesigner</a>: For those days when your keyboard catches fire, there's a rockin' GUI-Builder called in the installation package. When you see the code this produces (perhaps only in the community version?), you'll see why this <em>may</em> not be the panacea it seems.</p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/qmlfirststeps.html\">QML</a>: Another candidate for panacea: declarative GUI building from formatted JSON. Yum.</p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/qtquick-index.html\">Qt Quick</a>: The framework for QML. By this point, it may seem tantalizingly easy, but don't get sucked in by this stuff just yet. <em>It always seems to come down to learning it by hand.</em> </p></li>\n<li><p><a href=\"http://qt-project.org/doc/qt-5/model-view-programming.html\">The Model-View Framework<sup>(1)</sup></a>: Model-View (not MVC) separates the code that deals with presentation/interaction from the code that manages the data, with the aim of providing modularity. </p></li>\n</ul>\n\n<p>Coding in PyQt5 is greatly simplified by using the set of classes that implement the <em>Model-View design pattern</em>. Model-View is an evolution of Model-View-Controller (MVC), in which the Controller has been reunited with the View. They seem like strange bedfellows, but, most of the program's logic <em>is</em> dealing with either the user, or data: it seems to make a certain sense, at least at a stratospheric level. </p>\n\n<p>From a bird's eye:</p>\n\n<h2>Architecture(s)</h2>\n\n<p><strong>Model-View-Controller</strong></p>\n\n<p>This widely-used design pattern separates the application into 3 layers:</p>\n\n<ol>\n<li><strong><em>Model</em></strong>  ~>  Encapsulates the data. Notifies View and Controller of any changes to the underlying data. This causes updates to the display of output or available commands, respectively.</li>\n<li><strong><em>View</em></strong>  ~>  Displays the relevant output from the Model to the user.</li>\n<li><strong><em>Controller</em></strong>  ~>  Encapsulates user interaction, and notifies the Model and View of relevant events.</li>\n</ol>\n\n<p><strong>Model-View</strong></p>\n\n<ul>\n<li><a href=\"http://qt-project.org/doc/qt-5/graphicsview.html\">The Graphics View Framework<sup>(1)</sup></a>  ~>  Represent everything (including embedded QWidgets, etc) inside a QGraphicsScene as a QGraphicsItem (or derivative thereof), including proxy classes for embedding widgets. The items are supposedly highly optimized, and integrating OpenGL support is a one-liner, which is nice. </li>\n</ul>\n\n<p>This design pattern puts the Controller inside the View. This way, the view is capable of handling the entirety of the user's interaction. In concrete terms, these are the Signals and Slots mechanisms.</p>\n\n<h2>User Interaction Management</h2>\n\n<p>Callbacks</p>\n\n<p>Signals and Slots</p>\n\n<p>..... ** I'm sorry, but I must sign off now. I'll be back to continue to add to this. **</p>\n\n<h2>Practical Example(s)</h2>\n\n<p>Like, for instance, you can take a tree view from the <code>itemviews/editabletreemodel</code> example, then swap in a file system model (<code>QFileSystemModel</code>) from the <code>itemviews/dirview</code> example and you've got a full (working) view of your directory tree. Pretty snazzy. </p>\n\n<p>So, you would take the code from the editabletreemodel example:</p>\n\n<pre><code>headers = (\"Title\", \"Description\")\n\nfile = QFile(':/default.txt')\nfile.open(QIODevice.ReadOnly)\nmodel = TreeModel(headers, file.readAll())\nfile.close()\n\nself.view.setModel(model)\n</code></pre>\n\n<p>...and swap in the model from dirview:</p>\n\n<pre><code>model = QFileSystemModel()\nmodel.setRootPath('')\nself.view.setModel(model)\n</code></pre>\n\n<p>...and it just works. Amazing. </p>\n\n<p>The next step (in my case) (*I think) is implementing a custom model which I will then use several views concurrently, but I don't know if that kinda thing fits your use case.</p>\n\n<h2>Resources</h2>\n\n<p>Here are some gems I found on my travels. Hopefully they help you on yours.</p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/model-view-programming.html\">This is a tutorial on Model-View for Qt5.<sup>(1)</sup></a> It is a very detailed document from the official Qt5 docs. A good deal of useful documentation can be found at the Qt5 site. Keep in mind, it's for Qt5 (the C++ library), but the difference is trivial to read through (and the PyQt5 official docs point there anyway).</p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/designer-quick-start.html\">This PDF contains a quick high-level to PyQt4's Model-View framework.</a> Note that is it for PyQt4 (not PyQt5), but it is actually for Python (as opposed to C++), and I found it very quickly taught me a lot. </p>\n\n<p>I am just starting to play with the Graphics View, and am finding <a href=\"http://qt-project.org/doc/qt-5/graphicsview.html\">this tutorial on the Graphics View Framework</a> very helpful. This is the same View that is used in the <code>qtdemo</code> example code to generate some slick effects. I'll be updating this in a bit. </p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/qtmodules.html\">This is a complete list of all of the Qt5 Modules.</a></p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/classes.html\">This is a complete list of all of the Qt5 Classes.</a></p>\n\n<p><a href=\"http://qt-project.org/doc/qt-5/functions.html\">This is a complete list of all functions in the Qt5 API.</a></p>\n\n<p>As katsh pointed out in another answer's comments, <a href=\"https://github.com/baoboa/pyqt5/tree/master/examples\">here is a link to the example code for PyQt5.2.1 on GitHub</a></p>\n\n<p>Additionally, a copy of the example code comes packaged with your distribution and can be found at: </p>\n\n<pre><code>%PYTHON_HOME%\\Lib\\site-packages\\PyQt5\\examples\n</code></pre>\n\n<p>If you're using PyDev (Eclipse), you can run examples by simply right-clicking an example's main module file in PyDev Package Explorer or Navigator =:> Run As =:> Python Run</p>\n\n<p>The best one, in my (not so) humble opinion, is:</p>\n\n<pre><code>%PYTHON_HOME%\\Lib\\site-packages\\PyQt5\\examples\\qtdemo\\qtdemo.py\n</code></pre>\n\n<p>Among my current projects, I'm in the process of reverse engineering this example. If you check it out, you'll see why. To be continued.. ;)</p>\n\n<p>Enjoy!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3911469,
                        "reputation": 291,
                        "user_id": 3236656,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/c236d682bcd13df16741f3eb4a45bf3c?s=256&d=identicon&r=PG",
                        "display_name": "Pete",
                        "link": "https://stackoverflow.com/users/3236656/pete"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1440441912,
                    "last_edit_date": 1440441912,
                    "creation_date": 1390705020,
                    "answer_id": 21359084,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Been looking for PyQt5 tutorials for some time? Look no further! You won't find many around the internet. </p>\n\n<p>Not really tutorials, but <em>pretty self-explanatory basic scripts</em> under the following path:</p>\n\n<blockquote>\n  <p>/python/lib/site-packages/PyQt5/examples </p>\n</blockquote>\n\n<p>you will find about <code>100</code> examples in <code>30</code> folders ranging from beginner to advanced, covering basic windows, menus, tabs, layouts, network, OpenGL, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2013073,
                        "reputation": 2783,
                        "user_id": 1801060,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/1fbee54e7f33933f12e65e4a02aa9d9e?s=256&d=identicon&r=PG",
                        "display_name": "user1801060",
                        "link": "https://stackoverflow.com/users/1801060/user1801060"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1390549515,
                    "creation_date": 1390549515,
                    "answer_id": 21327117,
                    "question_id": 20996193,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Have a look at <a href=\"http://www.thehackeruniversity.com/2014/01/23/pyqt5-beginner-tutorial/\">http://www.thehackeruniversity.com/2014/01/23/pyqt5-beginner-tutorial/</a> This is a newbie friendly tutorial</p>\n"
                }
            ]
        },
        {
            "974952": [
                {
                    "owner": {
                        "account_id": 7953874,
                        "reputation": 4443,
                        "user_id": 6003870,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/MXPujapB.png?s=256",
                        "display_name": "\u0412\u0435\u043b\u043e\u041a\u0430\u0441\u0442\u0440\u044a",
                        "link": "https://stackoverflow.com/users/6003870/%d0%92%d0%b5%d0%bb%d0%be%d0%9a%d0%b0%d1%81%d1%82%d1%80%d1%8a"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1489253131,
                    "creation_date": 1489253131,
                    "answer_id": 42738309,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>After own diligent searches I found several solutions, where each has advantages and disadvantages. Use the most suitable for your task.</p>\n\n<p>All examples tested with the CPython 3.5 on the operation system GNU/Linux Debian 8.</p>\n\n<hr>\n\n<p><strong>Using a recursion</strong></p>\n\n<p>Code</p>\n\n<pre><code>def get_digits_from_left_to_right(number, lst=None):\n    \"\"\"Return digits of an integer excluding the sign.\"\"\"\n\n    if lst is None:\n        lst = list()\n\n    number = abs(number)\n\n    if number &lt; 10:\n        lst.append(number)\n        return tuple(lst)\n\n    get_digits_from_left_to_right(number // 10, lst)\n    lst.append(number % 10)\n\n    return tuple(lst)\n</code></pre>\n\n<p>Demo</p>\n\n<pre><code>In [121]: get_digits_from_left_to_right(-64517643246567536423)\nOut[121]: (6, 4, 5, 1, 7, 6, 4, 3, 2, 4, 6, 5, 6, 7, 5, 3, 6, 4, 2, 3)\n\nIn [122]: get_digits_from_left_to_right(0)\nOut[122]: (0,)\n\nIn [123]: get_digits_from_left_to_right(123012312312321312312312)\nOut[123]: (1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 3, 1, 2, 3, 1, 2, 3, 1, 2)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the function <code>divmod</code></strong></p>\n\n<p>Code</p>\n\n<pre><code>def get_digits_from_right_to_left(number):\n    \"\"\"Return digits of an integer excluding the sign.\"\"\"\n\n    number = abs(number)\n\n    if number &lt; 10:\n        return (number, )\n\n    lst = list()\n\n    while number:\n        number, digit = divmod(number, 10)\n        lst.insert(0, digit)\n\n    return tuple(lst)\n</code></pre>\n\n<p>Demo</p>\n\n<pre><code>In [125]: get_digits_from_right_to_left(-3245214012321021213)\nOut[125]: (3, 2, 4, 5, 2, 1, 4, 0, 1, 2, 3, 2, 1, 0, 2, 1, 2, 1, 3)\n\nIn [126]: get_digits_from_right_to_left(0)\nOut[126]: (0,)\n\nIn [127]: get_digits_from_right_to_left(9999999999999999)\nOut[127]: (9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9)\n</code></pre>\n\n<hr>\n\n<p><strong>Using a construction <code>tuple(map(int, str(abs(number)))</code></strong></p>\n\n<pre><code>In [109]: tuple(map(int, str(abs(-123123123))))\nOut[109]: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\nIn [110]: tuple(map(int, str(abs(1412421321312))))\nOut[110]: (1, 4, 1, 2, 4, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [111]: tuple(map(int, str(abs(0))))\nOut[111]: (0,)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the function <code>re.findall</code></strong></p>\n\n<pre><code>In [112]: tuple(map(int, re.findall(r'\\d', str(1321321312))))\nOut[112]: (1, 3, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [113]: tuple(map(int, re.findall(r'\\d', str(-1321321312))))\nOut[113]: (1, 3, 2, 1, 3, 2, 1, 3, 1, 2)\n\nIn [114]: tuple(map(int, re.findall(r'\\d', str(0))))\nOut[114]: (0,)\n</code></pre>\n\n<hr>\n\n<p><strong>Using the module <code>decimal</code></strong></p>\n\n<pre><code>In [117]: decimal.Decimal(0).as_tuple().digits\nOut[117]: (0,)\n\nIn [118]: decimal.Decimal(3441120391321).as_tuple().digits\nOut[118]: (3, 4, 4, 1, 1, 2, 0, 3, 9, 1, 3, 2, 1)\n\nIn [119]: decimal.Decimal(-3441120391321).as_tuple().digits\nOut[119]: (3, 4, 4, 1, 1, 2, 0, 3, 9, 1, 3, 2, 1)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2366,
                        "reputation": 8069,
                        "user_id": 3280,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/cYlDd.png?s=256",
                        "display_name": "Alexandru Nedelcu",
                        "link": "https://stackoverflow.com/users/3280/alexandru-nedelcu"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1488683142,
                    "last_edit_date": 1488683142,
                    "creation_date": 1244633436,
                    "answer_id": 975039,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>while number:\n    digit = number % 10\n\n    # do whatever with digit\n\n    # remove last digit from number (as integer)\n    number //= 10\n</code></pre>\n\n<p>On each iteration of the loop, it removes the last digit from number, assigning it to <code>digit</code>. \nIt's in reverse, starts from the last digit, finishes with the first</p>\n"
                },
                {
                    "owner": {
                        "account_id": 58992,
                        "reputation": 16027,
                        "user_id": 176569,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://www.gravatar.com/avatar/edfaee6d982f519a6efdad5b2b6c12d0?s=256&d=identicon&r=PG",
                        "display_name": "bpgergo",
                        "link": "https://stackoverflow.com/users/176569/bpgergo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1451075009,
                    "last_edit_date": 1451075009,
                    "creation_date": 1372887215,
                    "answer_id": 17458472,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Converting to <code>str</code> is definitely slower then dividing by 10.</p>\n\n<p><code>map</code> is sligthly slower than list comprehension:</p>\n\n<pre><code>convert to string with map 2.13599181175\nconvert to string with list comprehension 1.92812991142\nmodulo, division, recursive 0.948769807816\nmodulo, division 0.699964046478\n</code></pre>\n\n<p>These times were returned by the following code on my laptop:</p>\n\n<pre><code>foo = \"\"\"\\\ndef foo(limit):\n    return sorted(set(map(sum, map(lambda x: map(int, list(str(x))), map(lambda x: x * 9, range(limit))))))\n\nfoo(%i)\n\"\"\"\n\nbar = \"\"\"\\\ndef bar(limit):\n    return sorted(set([sum([int(i) for i in str(n)]) for n in [k *9 for k in range(limit)]]))\n\nbar(%i)\n\"\"\"\n\nrac = \"\"\"\\\ndef digits(n):\n    return [n] if n&lt;10 else digits(n / 10)+[n %% 10]\n\ndef rabbit(limit):\n    return sorted(set([sum(digits(n)) for n in [k *9 for k in range(limit)]]))\n\nrabbit(%i)\n\"\"\"\n\nrab = \"\"\"\\\ndef sum_digits(number):\n  result = 0\n  while number:\n    digit = number %% 10\n    result += digit\n    number /= 10\n  return result\n\ndef rabbit(limit):\n    return sorted(set([sum_digits(n) for n in [k *9 for k in range(limit)]]))\n\nrabbit(%i)\n\"\"\"\n\n\nimport timeit\n\nprint \"convert to string with map\", timeit.timeit(foo % 100, number=10000)\nprint \"convert to string with list comprehension\", timeit.timeit(bar % 100, number=10000)\nprint \"modulo, division, recursive\", timeit.timeit(rac % 100, number=10000)\nprint \"modulo, division\", timeit.timeit(rab % 100, number=10000)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5095522,
                        "reputation": 452,
                        "user_id": 4086992,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-vryzRaKbem8/AAAAAAAAAAI/AAAAAAAAHac/ds9OUsjHdPI/photo.jpg?sz=256",
                        "display_name": "Ricardo Alejos",
                        "link": "https://stackoverflow.com/users/4086992/ricardo-alejos"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1442430575,
                    "creation_date": 1442430575,
                    "answer_id": 32616787,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just assuming you want to get the <em>i</em>-th least significant digit from an integer number <em>x</em>, you can try:</p>\n\n<pre><code>(abs(x)%(10**i))/(10**(i-1))\n</code></pre>\n\n<p>I hope it helps.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1084240,
                        "reputation": 309,
                        "user_id": 1080358,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/abfdcba6bff4debbb7292c65c8d1f19e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dohmatob",
                        "link": "https://stackoverflow.com/users/1080358/dohmatob"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1442241171,
                    "creation_date": 1442241171,
                    "answer_id": 32567460,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Answer:</strong> 165</p>\n\n<p><strong>Method:</strong> brute-force! Here is a tiny bit of Python (version 2.7) code to count'em all.</p>\n\n<pre><code>from math import sqrt, floor\nis_ps = lambda x: floor(sqrt(x)) ** 2 == x\ncount = 0\nfor n in range(1002, 10000, 3):\n    if n % 11 and is_ps(sum(map(int, str(n)))):\n        count += 1\n        print \"#%i: %s\" % (count, n)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10078,
                        "reputation": 27316,
                        "user_id": 18866,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/0b887c77a19c495b68a6772972c23a23?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy Cantrell",
                        "link": "https://stackoverflow.com/users/18866/jeremy-cantrell"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1431124306,
                    "last_edit_date": 1495541411,
                    "creation_date": 1431124306,
                    "answer_id": 30133786,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Similar to <a href=\"https://stackoverflow.com/a/975039/18866\">this</a> answer but more a more \"pythonic\" way to iterate over the digis would be:</p>\n\n<pre><code>while number:\n    # \"pop\" the rightmost digit\n    number, digit = divmod(number, 10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3481558,
                        "reputation": 63,
                        "user_id": 2913468,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Suw3l.jpg?s=256",
                        "display_name": "Pski17",
                        "link": "https://stackoverflow.com/users/2913468/pski17"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1397049896,
                    "creation_date": 1397049896,
                    "answer_id": 22963974,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>(number/10**x)%10\n</code></pre>\n\n<p>You can use this in a loop, where number is the full number, x is each iteration of the loop (0,1,2,3,...,n) with n being the stop point. x = 0 gives the ones place, x = 1 gives the tens, x = 2 gives the hundreds, and so on. Keep in mind that this will give the value of the digits from right to left, so this might not be the for an ISBN but it will still isolate each digit.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3856844,
                        "reputation": 75,
                        "user_id": 3195552,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0ce25b8f99f309d4b5f8f8a171b11d66?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ben",
                        "link": "https://stackoverflow.com/users/3195552/ben"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1389865707,
                    "creation_date": 1389865707,
                    "answer_id": 21158316,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have made this program and here is the bit of code that actually calculates the check digit in my program</p>\n\n<pre><code>    #Get the 10 digit number\n    number=input(\"Please enter ISBN number: \")\n\n    #Explained below\n    no11 = (((int(number[0])*11) + (int(number[1])*10) + (int(number[2])*9) + (int(number[3])*8) \n           + (int(number[4])*7) + (int(number[5])*6) + (int(number[6])*5) + (int(number[7])*4) +\n           (int(number[8])*3) + (int(number[9])*2))/11)\n\n    #Round to 1 dp\n    no11 = round(no11, 1)\n\n    #explained below\n    no11 = str(no11).split(\".\")\n\n    #get the remainder and check digit\n    remainder = no11[1]\n    no11 = (11 - int(remainder))\n\n    #Calculate 11 digit ISBN\n    print(\"Correct ISBN number is \" + number + str(no11))\n</code></pre>\n\n<p>Its a long line of code, but it splits the number up, multiplies the digits by the appropriate amount, adds them together and divides them by 11, in one line of code. The .split() function just creates a list (being split at the decimal) so you can take the 2nd item in the list and take that from 11 to find the check digit. This could also be made even more efficient by changing these two lines:</p>\n\n<pre><code>    remainder = no11[1]\n    no11 = (11 - int(remainder))\n</code></pre>\n\n<p>To this:</p>\n\n<pre><code>    no11 = (11 - int(no11[1]))\n</code></pre>\n\n<p>Hope this helps :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1058480,
                        "reputation": 505,
                        "user_id": 1060631,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5f2ab57cf2471b41f6a0d2dd319e38a6?s=256&d=identicon&r=PG",
                        "display_name": "shadowfox",
                        "link": "https://stackoverflow.com/users/1060631/shadowfox"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1389649891,
                    "creation_date": 1389649891,
                    "answer_id": 21102087,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the body of this loop to do whatever you want to with the digits</p>\n\n<pre><code>for digit in map(int, str(my_number)):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 26340,
                        "reputation": 9449,
                        "user_id": 68457,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/8b26ea862275b9f2618ea6d46d61126a?s=256&d=identicon&r=PG",
                        "display_name": "mavnn",
                        "link": "https://stackoverflow.com/users/68457/mavnn"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1348222056,
                    "last_edit_date": 1348222056,
                    "creation_date": 1244632373,
                    "answer_id": 974967,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>list_of_ints = [int(i) for i in str(ISBN)]\n</code></pre>\n\n<p>Will give you a ordered list of ints. Of course, given duck typing, you might as well work with str(ISBN).</p>\n\n<p>Edit: As mentioned in the comments, this list isn't sorted in the sense of being ascending or descending, but it does have a defined order (sets, dictionaries, etc in python in theory don't, although in practice the order tends to be fairly reliable). If you want to sort it:</p>\n\n<p>list_of_ints.sort()</p>\n\n<p>is your friend. Note that sort() sorts in place (as in, actually changes the order of the existing list) and doesn't return a new list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1772597,
                        "reputation": 619,
                        "user_id": 1665184,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/a212e089420466fff584da23195037ea?s=256&d=identicon&r=PG",
                        "display_name": "chyanog",
                        "link": "https://stackoverflow.com/users/1665184/chyanog"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1347698336,
                    "creation_date": 1347698336,
                    "answer_id": 12435874,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Recursion version:</p>\n\n<pre><code>def int_digits(n):\n    return [n] if n&lt;10 else int_digits(n/10)+[n%10]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6714,
                        "reputation": 6914,
                        "user_id": 11414,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://i.sstatic.net/s8vyO.png?s=256",
                        "display_name": "Evgeny Zislis",
                        "link": "https://stackoverflow.com/users/11414/evgeny-zislis"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1318803564,
                    "creation_date": 1318803564,
                    "answer_id": 7787740,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Convert it to string and map over it with the int() function.</p>\n\n<pre><code>map(int, str(1231231231))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75493,
                        "reputation": 33533,
                        "user_id": 216517,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/oBeXz.jpg?s=256",
                        "display_name": "st0le",
                        "link": "https://stackoverflow.com/users/216517/st0le"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1284444436,
                    "creation_date": 1284444436,
                    "answer_id": 3706468,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>On Older versions of Python...</p>\n\n<pre><code>map(int,str(123))\n</code></pre>\n\n<p>On New Version 3k</p>\n\n<pre><code>list(map(int,str(123)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 150802,
                        "reputation": 415,
                        "user_id": 364249,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/1aa32f5d44589f0acca6b6a438bf74b0?s=256&d=identicon&r=PG",
                        "display_name": "Lord British",
                        "link": "https://stackoverflow.com/users/364249/lord-british"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1284441640,
                    "creation_date": 1284441640,
                    "answer_id": 3706281,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How about a one-liner list of digits...</p>\n\n<pre><code>ldigits = lambda n, l=[]: not n and l or l.insert(0,n%10) or ldigits(n/10,l)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222336,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": true,
                    "score": 89,
                    "last_activity_date": 1244634277,
                    "last_edit_date": 1244634277,
                    "creation_date": 1244632267,
                    "answer_id": 974956,
                    "question_id": 974952,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Just create a string out of it.</p>\n\n<pre><code>myinteger = 212345\nnumber_string = str(myinteger)\n</code></pre>\n\n<p>That's enough. Now you can iterate over it:</p>\n\n<pre><code>for ch in number_string:\n    print ch # will print each digit in order\n</code></pre>\n\n<p>Or you can slice it:</p>\n\n<pre><code>print number_string[:2] # first two digits\nprint number_string[-3:] # last three digits\nprint number_string[3] # forth digit\n</code></pre>\n\n<hr>\n\n<p>Or better, don't convert the user's input to an integer (the user types a string)</p>\n\n<pre><code>isbn = raw_input()\nfor pos, ch in enumerate(reversed(isbn)):\n    print \"%d * %d is %d\" % pos + 2, int(ch), int(ch) * (pos + 2)\n</code></pre>\n\n<p>For more information read a <a href=\"http://docs.python.org/tut\" rel=\"noreferrer\">tutorial</a>.</p>\n"
                }
            ]
        },
        {
            "5169257": [
                {
                    "owner": {
                        "account_id": 16960254,
                        "reputation": 1065,
                        "user_id": 12267564,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jV86X.png?s=256",
                        "display_name": "lazos",
                        "link": "https://stackoverflow.com/users/12267564/lazos"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1593102678,
                    "creation_date": 1593102678,
                    "answer_id": 62580062,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you <code>print(type(Num.getone))</code> you will get <code>&lt;class 'function'&gt;</code>.</p>\n<p>It is just a plain function, and be called as usual (with no arguments):</p>\n<pre><code>Num.getone() # returns 1  as expected\n</code></pre>\n<p>but if you print <code>print(type(myObj.getone))</code>  you will get <code>&lt;class 'method'&gt;</code>.</p>\n<p>So when you call <code>getone()</code> from an instance of the class, Python automatically &quot;transforms&quot; the function defined in a class into a method.</p>\n<p>An instance method requires the first argument to be the instance object. You can think <code>myObj.getone()</code>  as syntactic sugar for</p>\n<pre><code>Num.getone(myObj) # this explains the Error 'getone()' takes no arguments (1 given).\n</code></pre>\n<p>For  example:</p>\n<pre><code>class Num:\n    def __init__(self,num):\n        self.n = num\n    def getid(self):\n        return id(self)\n\nmyObj=Num(3)\n</code></pre>\n<p>Now if you</p>\n<pre><code>print(id(myObj) == myObj.getid())    \n# returns True\n</code></pre>\n<p>As you can see <code>self</code> and <code>myObj</code> are the same object</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10374,
                        "reputation": 8712,
                        "user_id": 19556,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/06466d059d58bbaee6320c8f2e733aa5?s=256&d=identicon&r=PG",
                        "display_name": "stderr",
                        "link": "https://stackoverflow.com/users/19556/stderr"
                    },
                    "is_accepted": true,
                    "score": 65,
                    "last_activity_date": 1527221129,
                    "last_edit_date": 1527221129,
                    "creation_date": 1299078695,
                    "answer_id": 5169458,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python: </p>\n\n<ul>\n<li><strong>Instance methods:</strong> require the <code>self</code> argument.</li>\n<li><strong>Class methods:</strong> take the class as a first argument.  </li>\n<li><strong>Static methods:</strong> do not require either the instance (<code>self</code>) or the class (<code>cls</code>) argument.</li>\n</ul>\n\n<p><code>__init__</code> is a special function and without overriding <code>__new__</code> it will always be given the instance of the class as its first argument.  </p>\n\n<p>An example using the builtin classmethod and staticmethod decorators:</p>\n\n<pre><code>import sys\n\nclass Num:\n    max = sys.maxint\n\n    def __init__(self,num):\n        self.n = num\n\n    def getn(self):\n        return self.n\n\n    @staticmethod\n    def getone():\n        return 1\n\n    @classmethod\n    def getmax(cls):\n        return cls.max\n\nmyObj = Num(3)\n# with the appropriate decorator these should work fine\nmyObj.getone()\nmyObj.getmax()\nmyObj.getn()\n</code></pre>\n\n<p>That said, I would try to use <code>@classmethod</code>/<code>@staticmethod</code> sparingly.  If you find yourself creating objects that consist of nothing but <code>staticmethod</code>s the more pythonic thing to do would be to create a new module of related functions.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 75842,
                        "reputation": 3615,
                        "user_id": 217419,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/009af01921268eaa911523e3894b993b?s=256&d=identicon&r=PG",
                        "display_name": "neil",
                        "link": "https://stackoverflow.com/users/217419/neil"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1299078298,
                    "creation_date": 1299078298,
                    "answer_id": 5169381,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The current object is explicitly passed to the method as the first parameter.  <code>self</code> is the conventional name.  You can call it anything you want but it is strongly advised that you stick with this convention to avoid confusion.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183585,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1299078081,
                    "creation_date": 1299078081,
                    "answer_id": 5169336,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The fact that your method does not <em>use</em> the <code>self</code> argument (which is a reference to the instance that the method is attached to) doesn't mean you can leave it out. It always has to be there, because Python is always going to try to pass it in.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 153912,
                        "reputation": 5038,
                        "user_id": 369503,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/dd921a2369e2ca86540b283821e63f3b?s=256&d=identicon&r=PG",
                        "display_name": "Jordan",
                        "link": "https://stackoverflow.com/users/369503/jordan"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1299077909,
                    "creation_date": 1299077909,
                    "answer_id": 5169289,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In python you must always pass in at least one argument to class methods, the argument is <code>self</code> and it is not meaningless its a reference to the instance itself</p>\n"
                },
                {
                    "owner": {
                        "account_id": 76141,
                        "reputation": 814910,
                        "user_id": 218196,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/4P5DY.jpg?s=256",
                        "display_name": "Felix Kling",
                        "link": "https://stackoverflow.com/users/218196/felix-kling"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1299077896,
                    "creation_date": 1299077896,
                    "answer_id": 5169285,
                    "question_id": 5169257,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Every method needs to accept one argument: The instance itself (or the class if it is a static method).</p>\n\n<p><a href=\"http://docs.python.org/tutorial/classes.html\" rel=\"noreferrer\">Read more about classes in Python</a>.</p>\n"
                }
            ]
        },
        {
            "30539882": [
                {
                    "owner": {
                        "account_id": 84277,
                        "reputation": 176128,
                        "user_id": 235698,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/KjvlE.png?s=256",
                        "display_name": "Mark Tolonen",
                        "link": "https://stackoverflow.com/users/235698/mark-tolonen"
                    },
                    "is_accepted": true,
                    "score": 13,
                    "last_activity_date": 1484331124,
                    "last_edit_date": 1484331124,
                    "creation_date": 1432941565,
                    "answer_id": 30540470,
                    "question_id": 30539882,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The problem <strike>is</strike><strong>was</strong> (see Python 3.6 update below) with the Windows console, which supports an ANSI character set appropriate for the region targeted by your version of Windows.  Python throws an exception by default when unsupported characters are output.</p>\n\n<p>Python can read an <a href=\"https://docs.python.org/3.4/using/cmdline.html#envvar-PYTHONIOENCODING\" rel=\"nofollow noreferrer\">environment variable</a> to output in other encodings, or to change the error handling default.  Below, I've read the console default and change the default error handling to print a <code>?</code> instead of throwing an error for characters that are unsupported in the console's current code page.</p>\n\n<pre><code>C:\\&gt;chcp\nActive code page: 437   # Note, US Windows OEM code page.\n\nC:\\&gt;set PYTHONIOENCODING=437:replace\n\nC:\\&gt;example.py\nLeo? Jan\u00e1?ek\nZdzis?aw Beksi?ski\n??? ?? ??\n??\n?????? ??? ?????????? ????????\nMinha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0\n</code></pre>\n\n<p>Note the US OEM code page is limited to ASCII and some Western European characters.</p>\n\n<p>Below I've instructed Python to use UTF8, but since the Windows console doesn't support it, I redirect the output to a file and display it in Notepad:</p>\n\n<pre><code>C:\\&gt;set PYTHONIOENCODING=utf8\nC:\\&gt;example &gt;out.txt\nC:\\&gt;notepad out.txt\n</code></pre>\n\n<p><img src=\"https://i.sstatic.net/2jt15.png\" alt=\"enter image description here\"></p>\n\n<p>On Windows, its best to use a Python IDE that supports UTF-8 instead of the console when working with multiple languages.  If only using one language, select it as the system locale in the <code>Region and Language</code> control panel and the console will support the characters of that language.</p>\n\n<h2>Update for Python 3.6</h2>\n\n<p>Python 3.6 now uses Windows Unicode APIs to write directly to the console, so the only limit is the console font's support of the characters.  The following code works in a US Windows console.  I have a Chinese language pack installed, it even displays the Chinese and Japanese if the console font is changed.  Even without the correct font, replacement characters are shown in the console.  Cut-n-paste to an environment such as this web page will display the characters correctly.</p>\n\n<pre><code>#!python3.6\n#coding: utf8\nczech = 'Leo\u0161 Jan\u00e1\u010dek'\nprint(czech)\n\npl = 'Zdzis\u0142aw Beksi\u0144ski'\nprint(pl)\n\njp = '\u30ea\u30f3\u30b0 \u5c71\u6751 \u8c9e\u5b50'\nprint(jp)\n\nchinese = '\u4e94\u884c'\nprint(chinese)\n\nMIR = '\u041c\u0430\u0448\u0438\u043d\u0430 \u0434\u043b\u044f \u0418\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0420\u0430\u0441\u0447\u0451\u0442\u043e\u0432'\nprint(MIR)\n\npt = 'Minha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0'\nprint(pt)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Leo\u0161 Jan\u00e1\u010dek\nZdzis\u0142aw Beksi\u0144ski\n\u30ea\u30f3\u30b0 \u5c71\u6751 \u8c9e\u5b50\n\u4e94\u884c\n\u041c\u0430\u0448\u0438\u043d\u0430 \u0434\u043b\u044f \u0418\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0420\u0430\u0441\u0447\u0451\u0442\u043e\u0432\nMinha L\u00edngua Portuguesa: \u00e7\u00e1\u00e0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413078,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1474281199,
                    "last_edit_date": 1495542881,
                    "creation_date": 1433021211,
                    "answer_id": 30551552,
                    "question_id": 30539882,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>Update:</strong> <a href=\"https://stackoverflow.com/a/32176732/4279\">Since Python 3.6, the code example that prints Unicode strings directly should just work now (even without <code>py -mrun</code>)</a>.</p>\n\n<hr>\n\n<p>Python can print text in multiple languages in Windows console whatever <code>chcp</code> says:</p>\n\n<pre><code>T:\\&gt; py -mpip install win-unicode-console\nT:\\&gt; py -mrun your_script.py\n</code></pre>\n\n<p>where <code>your_script.py</code> prints Unicode directly e.g.:</p>\n\n<pre><code>#!/usr/bin/env python3\nprint('\u0161 \u00e1\u010d')      # cz\nprint('\u0142 \u0144')       # pl\nprint('\u30ea\u30f3\u30b0')     # jp\nprint('\u4e94\u884c')      # cn\nprint('\u0448 \u044f \u0436\u0445 \u0451') # ru\nprint('\u00ed \u00e7\u00e1\u00e0')    # pt\n</code></pre>\n\n<p>All you need is to configure the font in your Windows console that can display the desired characters.</p>\n\n<p>You could also run your Python script via IDLE without installing non-stdlib modules:</p>\n\n<pre><code>T:\\&gt; py -midlelib -r your_script.py\n</code></pre>\n\n<p>To write to a file/pipe, use <code>PYTHONIOENCODING=utf-8</code> as <a href=\"https://stackoverflow.com/a/30540470/4279\">@Mark Tolonen suggested</a>:</p>\n\n<pre><code>T:\\&gt; set PYTHONIOENCODING=utf-8\nT:\\&gt; py your_script.py &gt;output-utf8.txt \n</code></pre>\n\n<p>Only the last solution supports non-BMP characters such as <a href=\"https://codepoints.net/U+1F612\" rel=\"noreferrer\">\ud83d\ude12 (U+1F612 UNAMUSED FACE)</a> -- <code>py -mrun</code> can write them but Windows console displays them as boxes even if the font supports corresponding Unicode characters (though you can copy-paste the boxes into another program, to get the characters).</p>\n"
                }
            ]
        },
        {
            "16384109": [
                {
                    "owner": {
                        "account_id": 2150615,
                        "reputation": 32240,
                        "user_id": 1907098,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/lPkVW.png?s=256",
                        "display_name": "Volatility",
                        "link": "https://stackoverflow.com/users/1907098/volatility"
                    },
                    "is_accepted": true,
                    "score": 137,
                    "last_activity_date": 1584996375,
                    "last_edit_date": 1584996375,
                    "creation_date": 1367753900,
                    "answer_id": 16384126,
                    "question_id": 16384109,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"http://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a> should do the trick.</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list(itertools.product([1, 5, 8], [0.5, 4]))\n[(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]\n</code></pre>\n\n<p>Note that <code>itertools.product</code> returns an iterator, so you don't need to convert it into a list if you are only going to iterate over it once.</p>\n\n<p>eg. </p>\n\n<pre><code>for x in itertools.product([1, 5, 8], [0.5, 4]):\n    # do stuff\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1352440,
                        "reputation": 5511,
                        "user_id": 1329892,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c67c31ce6b09f7ef7fd606068431a0e6?s=256&d=identicon&r=PG",
                        "display_name": "SpinUp __ A Davis",
                        "link": "https://stackoverflow.com/users/1329892/spinup-a-davis"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1524879774,
                    "creation_date": 1524879774,
                    "answer_id": 50072046,
                    "question_id": 16384109,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This can be achieved without any imports using a <a href=\"https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">list comprehension</a>. Using your example:</p>\n\n<pre><code>first = [1, 5, 8]\nsecond = [0.5, 4]\n\ncombined = [(f,s) for f in first for s in second]\n\nprint(combined)\n# [(1, 0.5), (1, 4), (5, 0.5), (5, 4), (8, 0.5), (8, 4)]\n</code></pre>\n"
                }
            ]
        },
        {
            "2146419": [
                {
                    "owner": {
                        "account_id": 11111296,
                        "reputation": 1,
                        "user_id": 8156991,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1002582946544116/picture?type=large",
                        "display_name": "MIIK7",
                        "link": "https://stackoverflow.com/users/8156991/miik7"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1518553437,
                    "creation_date": 1518553437,
                    "answer_id": 48775034,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>condition1 = False\ncondition2 = False\nval = -1\n#here is the function getstuff is not defined, i hope you define it before\n#calling it into while loop code\n\nwhile condition1 and condition2 is False and val == -1:\n#as you can see above , we can write that in a simplified syntax.\n    val,something1,something2 = getstuff()\n\n    if something1 == 10:\n        condition1 = True\n\n    elif something2 == 20:\n# here you don't have to use \"if\" over and over, if have to then write \"elif\" instead    \n    condition2 = True\n# ihope it can be helpfull\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 4551,
                        "reputation": 95761,
                        "user_id": 6899,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=256&d=identicon&r=PG",
                        "display_name": "tzot",
                        "link": "https://stackoverflow.com/users/6899/tzot"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1264623238,
                    "creation_date": 1264623238,
                    "answer_id": 2149931,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have you noticed that in the code you posted, <code>condition2</code> is never set to <code>False</code>? This way, your loop body is never executed.</p>\n\n<p>Also, note that in Python, <code>not condition</code> is preferred to <code>condition == False</code>; likewise, <code>condition</code> is preferred to <code>condition == True</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2164,
                        "reputation": 26068,
                        "user_id": 2979,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a116dfd0007cb23dc3ce48503c2b93b?s=256&d=identicon&r=PG",
                        "display_name": "Tendayi Mawushe",
                        "link": "https://stackoverflow.com/users/2979/tendayi-mawushe"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1264592742,
                    "creation_date": 1264592742,
                    "answer_id": 2146535,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I am not sure it would read better but you could do the following:</p>\n\n<pre><code>while any((not condition1, not condition2, val == -1)):\n    val,something1,something2 = getstuff()\n\n    if something1==10:\n        condition1 = True\n\n    if something2==20:\n        condition2 = True\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user97370"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1264591986,
                    "creation_date": 1264591986,
                    "answer_id": 2146459,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>while not condition1 or not condition2 or val == -1:\n</code></pre>\n\n<p>But there was nothing wrong with your original of using an if inside of a while True.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 44762,
                        "reputation": 340937,
                        "user_id": 131527,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG",
                        "display_name": "ghostdog74",
                        "link": "https://stackoverflow.com/users/131527/ghostdog74"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1264591904,
                    "creation_date": 1264591904,
                    "answer_id": 2146444,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>use an infinity loop like what you have originally done. Its cleanest and you can incorporate many conditions as you wish</p>\n\n<pre><code>while 1:\n  if condition1 and condition2:\n      break\n  ...\n  ...\n  if condition3: break\n  ...\n  ...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796828,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": true,
                    "score": 23,
                    "last_activity_date": 1264591734,
                    "creation_date": 1264591734,
                    "answer_id": 2146427,
                    "question_id": 2146419,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Change the <code>and</code>s to <code>or</code>s.</p>\n"
                }
            ]
        },
        {
            "15614067": [
                {
                    "owner": {
                        "account_id": 232399,
                        "reputation": 33737,
                        "user_id": 497208,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/f53ec83b7a4a74ef31eabd1d86b716e0?s=256&d=identicon&r=PG",
                        "display_name": "Jakub M.",
                        "link": "https://stackoverflow.com/users/497208/jakub-m"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1364212587,
                    "last_edit_date": 1364212587,
                    "creation_date": 1364211864,
                    "answer_id": 15614115,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>sorted(result.iteritems(), key=lambda key_value: key_value[0])\n</code></pre>\n\n<p>This will output sorted results, but the dictionary will remain unsorted. If you want to maintain ordering of a dictionary, use <a href=\"http://docs.python.org/2/library/collections.html#collections.OrderedDict\"><code>OrderedDict</code></a></p>\n\n<p>Actually, if you sort by <em>key</em> you could skip the <code>key=...</code> part, because then the iterated items are sorted first by key and later by value (what NPE uses in his answer)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 498943,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 12,
                    "last_activity_date": 1364211870,
                    "creation_date": 1364211870,
                    "answer_id": 15614118,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Standard Python dictionaries are inherently unordered. However, you could use <a href=\"http://docs.python.org/2/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>collections.OrderedDict</code></a>. It preserves the insertion order, so all you have to do is add the key/value pairs in the desired order:</p>\n\n<pre><code>In [4]: collections.OrderedDict(sorted(result.items()))\nOut[4]: OrderedDict([('1', 'value1'), ('2', 'value2')])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 430678,
                        "reputation": 29852,
                        "user_id": 814253,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/6ec359ca87eda89de3251951372a2e8d?s=256&d=identicon&r=PG",
                        "display_name": "DonCallisto",
                        "link": "https://stackoverflow.com/users/814253/doncallisto"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1364211842,
                    "creation_date": 1364211842,
                    "answer_id": 15614106,
                    "question_id": 15614067,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python dictionaries are unordered (for definition)</p>\n\n<p>You can use <a href=\"http://docs.python.org/library/collections.html#collections.OrderedDict\" rel=\"nofollow\">OrderedDict</a> instead</p>\n"
                }
            ]
        },
        {
            "1540214": [
                {
                    "owner": {
                        "account_id": 48616,
                        "reputation": 6139,
                        "user_id": 144529,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/5b83e52ed3ff7e8f6e7dd2f931b10498?s=256&d=identicon&r=PG",
                        "display_name": "easement",
                        "link": "https://stackoverflow.com/users/144529/easement"
                    },
                    "is_accepted": true,
                    "score": 51,
                    "last_activity_date": 1633136793,
                    "last_edit_date": 1633136793,
                    "creation_date": 1255033871,
                    "answer_id": 1540241,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Have you seen <a href=\"https://skulpt.org/\" rel=\"nofollow noreferrer\">Skulpt</a>?</p>\n<blockquote>\n<p>Skulpt is an <em><strong>entirely in-browser</strong></em> implementation of Python.</p>\n<p>No preprocessing, plugins or server-side support required, just write Python and reload.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1417542721,
                    "last_edit_date": 1417542721,
                    "creation_date": 1255036067,
                    "answer_id": 1540497,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Noone has mentioned it yet, but <a href=\"http://en.wikipedia.org/wiki/Grail_(web_browser)\" rel=\"nofollow noreferrer\">grail</a> is/was pretty cool</p>\n\n<blockquote>\n  <p>Grail was a free extensible multi-platform web browser written in the Python programming language. The project was started in August 1995, with its first public release in November of that year. [1] The .3 beta contained over 27,000 lines of Python.[1] Its last release was of version 0.6 in 1999, with latest version under development.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 27659,
                        "reputation": 10033,
                        "user_id": 73228,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/gH3tj.jpg?s=256",
                        "display_name": "Andrew",
                        "link": "https://stackoverflow.com/users/73228/andrew"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1326187693,
                    "last_edit_date": 1326187693,
                    "creation_date": 1255033845,
                    "answer_id": 1540238,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python is available for the client: <a href=\"http://www.skulpt.org/\" rel=\"nofollow noreferrer\">skulpt</a></p>\n\n<p>If its client side your interested may be worth checking out</p>\n\n<p><a href=\"http://jqueryui.com/\" rel=\"nofollow noreferrer\">http://jqueryui.com/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 914650,
                        "reputation": 39,
                        "user_id": 947729,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/06bcc5e791e7f49cd53fb53418cdef7b?s=256&d=identicon&r=PG",
                        "display_name": "Tor Iver",
                        "link": "https://stackoverflow.com/users/947729/tor-iver"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1316121162,
                    "creation_date": 1316121162,
                    "answer_id": 7437506,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>On Windows, any language that registers for the Windows Scripting Host can run in IE. At least the ActiveState version of Python could do that; I seem to recall that has been superseded by a more official version these days.</p>\n\n<p>But that solution requires the user to install a python interpreter and run some script or .reg file to put the correct \"magic\" into the registry for the hooks to work.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7022,
                        "reputation": 21536,
                        "user_id": 11992,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/09b743ba088c0bf7e07ee429a32acedc?s=256&d=identicon&r=PG",
                        "display_name": "nikow",
                        "link": "https://stackoverflow.com/users/11992/nikow"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1255035621,
                    "last_edit_date": 1255035621,
                    "creation_date": 1255034421,
                    "answer_id": 1540305,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can use <a href=\"http://pyjs.org/\" rel=\"noreferrer\">pyjamas</a> to convert Python code to JS code that runs in the browser (note that pyjamas also offers much more). So YES, you can use Python for client side web development.</p>\n\n<p>Pyjamas is basically a port of the <a href=\"http://code.google.com/intl/de/webtoolkit/\" rel=\"noreferrer\">Google Web Toolkit</a>, which allows you to write client side code in Java.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 43211,
                        "reputation": 171825,
                        "user_id": 126214,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=256&d=identicon&r=PG",
                        "display_name": "Lennart Regebro",
                        "link": "https://stackoverflow.com/users/126214/lennart-regebro"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1255035035,
                    "creation_date": 1255035035,
                    "answer_id": 1540379,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Silverlight can run IronPython, so you can make Silverlight applications. Which is client-side.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76505,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1255034142,
                    "last_edit_date": 1255034142,
                    "creation_date": 1255033826,
                    "answer_id": 1540234,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python isn't really used for client side, because no major web browsers have Python built in.</p>\n\n<p>However, Javascript has become more and more Python-like as it has evolved.  You might want to study Python and Javascript together.</p>\n\n<p>Take a look at <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\" rel=\"noreferrer\"><a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\" rel=\"noreferrer\">https://developer.mozilla.org/en/New_in_JavaScript_1.7</a></a> and notice the Python-like nature of the new features.  \"array comprehensions\" are just like Python list comprehensions; iterators and generators are straight out of Python; \"destructuring assignments\" are a standard Python idiom.</p>\n\n<p>Javascript is kind of like Python with curly braces.  It uses a very different inheritance model, but libraries are available that implement a more Python-like class system on top of the built-in system in Javascript.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18462,
                        "reputation": 53724,
                        "user_id": 42304,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/9fcbbf743a912163bfd2bf8f55136913?s=256&d=identicon&r=PG",
                        "display_name": "Byron Whitlock",
                        "link": "https://stackoverflow.com/users/42304/byron-whitlock"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1255033820,
                    "creation_date": 1255033820,
                    "answer_id": 1540233,
                    "question_id": 1540214,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>No. Browsers don't run Python.</p>\n"
                }
            ]
        },
        {
            "2736255": [
                {
                    "owner": {
                        "account_id": 1605734,
                        "reputation": 9424,
                        "user_id": 1485877,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/tkdN8.jpg?s=256",
                        "display_name": "drhagen",
                        "link": "https://stackoverflow.com/users/1485877/drhagen"
                    },
                    "is_accepted": false,
                    "score": 88,
                    "last_activity_date": 1681235504,
                    "last_edit_date": 1681235504,
                    "creation_date": 1550775636,
                    "answer_id": 54814371,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://www.python.org/dev/peps/pep-0526/\" rel=\"noreferrer\">In Python 3.6+</a>, you can annotate an attribute of an abstract class (or any variable) without providing a value for that attribute.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass Controller(ABC):\n    path: str\n\nclass MyController(Controller):\n    def __init__(self, path: str):\n        self.path = path\n</code></pre>\n<p>This makes for very clean code where it is obvious that the attribute is abstract.</p>\n<p>It should be noted that this will not raise an exception at definition time if a subclass does not provide an implementation. However, an <code>AttributeError</code> exception will be raised if anythhing tries to access the undefined attribute.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1491942,
                        "reputation": 9019,
                        "user_id": 1398841,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/s8gQQ.png?s=256",
                        "display_name": "johnthagen",
                        "link": "https://stackoverflow.com/users/1398841/johnthagen"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1669643836,
                    "last_edit_date": 1669643836,
                    "creation_date": 1470187001,
                    "answer_id": 38732834,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You could create an attribute in the <a href=\"https://docs.python.org/3/library/abc.html#abc.ABC\" rel=\"noreferrer\">abc.ABC</a> abstract base class with a value such as <a href=\"https://docs.python.org/library/stdtypes.html?highlight=notimplemented#the-notimplemented-object\" rel=\"noreferrer\"><code>NotImplemented</code></a> so that if the attribute is not overriden and then used, a clear error that expresses intent is shown at run time.</p>\n<p>The following code uses a <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"noreferrer\">PEP 484</a> type hint to help PyCharm correctly statically analyze the type of the <code>path</code> attribute as well.</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass Controller(ABC):\n    path: str = NotImplemented\n\nclass MyController(Controller):\n    path = &quot;/home&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5345891,
                        "reputation": 2952,
                        "user_id": 4261472,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/9ERr6.jpg?s=256",
                        "display_name": "Sergei Voitovich",
                        "link": "https://stackoverflow.com/users/4261472/sergei-voitovich"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1666556544,
                    "last_edit_date": 1666556544,
                    "creation_date": 1570704581,
                    "answer_id": 58321197,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>For <strong>Python 3.3</strong>+ there's an elegant solution</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC, abstractmethod\n    \nclass BaseController(ABC):\n    @property\n    @abstractmethod\n    def path(self) -&gt; str:\n        ...\n\nclass Controller(BaseController):\n    path = &quot;/home&quot;\n\n\n# Instead of an elipsis, you can add a docstring for clarity\nclass AnotherBaseController(ABC):\n    @property\n    @abstractmethod\n    def path(self) -&gt; str:\n        &quot;&quot;&quot;\n        :return: the url path of this controller\n        &quot;&quot;&quot;\n</code></pre>\n<p>Despite some great answers have already been given, I thought this answer would nevertheless add some value. This approach has two advantages:</p>\n<ol>\n<li><p><code>...</code> in an abstract method's body is more preferable than <code>pass</code>. Unlike <code>pass</code>, <code>...</code> implies <strong>no operations</strong>, where <code>pass</code> only means the absence of an actual implementation</p>\n</li>\n<li><p><code>...</code> is more recommended than throwing <code>NotImplementedError(...)</code>. This automatically prompts an extremely verbose error if the implementation of an abstract field is missing in a subclass. In contrast, <code>NotImplementedError</code> itself doesn't tell why the implementation is missing. Moreover, it requires manual labor to actually raise it.</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 10347888,
                        "reputation": 1330,
                        "user_id": 7632227,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0f905f0bab24dfcbf5e5e37d0fbf8a55?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "James",
                        "link": "https://stackoverflow.com/users/7632227/james"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1648737844,
                    "last_edit_date": 1648737844,
                    "creation_date": 1542821207,
                    "answer_id": 53417582,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Since this question was originally asked, python has changed how abstract classes are implemented. I have used a slightly different approach using the abc.ABC formalism in python 3.6.  Here I define the constant as a property which must be defined in each subclass.</p>\n<pre><code>from abc import ABC, abstractmethod\n\n\nclass Base(ABC):\n\n    @classmethod\n    @property\n    @abstractmethod\n    def CONSTANT(cls):\n        raise NotImplementedError\n\n    def print_constant(self):\n        print(type(self).CONSTANT)\n\n\nclass Derived(Base):\n    CONSTANT = 42\n</code></pre>\n<p>This forces the derived class to define the constant, or else a <code>TypeError</code> exception will be raised when you try to instantiate the subclass. When you want to use the constant for any functionality implemented in the abstract class, you must access the subclass constant by <code>type(self).CONSTANT</code> instead of just <code>CONSTANT</code>, since the value is undefined in the base class.</p>\n<p>There are other ways to implement this, but I like this syntax as it seems to me the most plain and obvious for the reader.</p>\n<p>The previous answers all touched useful points, but I feel the accepted answer does not directly answer the question because</p>\n<ul>\n<li>The question asks for implementation in an abstract class, but the accepted answer does not follow the abstract formalism.</li>\n<li>The question asks that implementation is enforced.  I would argue that enforcement is stricter in this answer because it causes a runtime error when the subclass is instantiated if <code>CONSTANT</code> is not defined. The accepted answer allows the object to be instantiated and only throws an error when <code>CONSTANT</code> is accessed, making the enforcement less strict.</li>\n</ul>\n<p>This is not to fault the original answers.  Major changes to the abstract class syntax have occurred since they were posted, which in this case allow a neater and more functional implementation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4291590,
                        "reputation": 6036,
                        "user_id": 3566606,
                        "user_type": "registered",
                        "accept_rate": 70,
                        "profile_image": "https://i.sstatic.net/B36KF.jpg?s=256",
                        "display_name": "Jonathan Herrera",
                        "link": "https://stackoverflow.com/users/3566606/jonathan-herrera"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1639710199,
                    "last_edit_date": 1639710199,
                    "creation_date": 1554503729,
                    "answer_id": 55544173,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of Python 3.6 you can use <code>__init_subclass__</code> to check for the class variables of the child class upon initialisation:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from abc import ABC\n\nclass A(ABC):\n    @classmethod\n    def __init_subclass__(cls):\n        required_class_variables = [\n            'foo',\n            'bar',\n        ]\n        for var in required_class_variables:\n            if not hasattr(cls, var):\n                raise NotImplementedError(\n                    f'Class {cls} lacks required `{var}` class attribute'\n                )\n</code></pre>\n<p>This raises an Error on initialisation of the child class, if the missing class variable is not defined, so you don't have to wait until the missing class variable would be accessed.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user297250"
                    },
                    "is_accepted": true,
                    "score": 115,
                    "last_activity_date": 1618943042,
                    "last_edit_date": 1618943042,
                    "creation_date": 1272535860,
                    "answer_id": 2736417,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python has a built-in exception for this, though you won't encounter the exception until runtime.</p>\n<pre><code>class Base(object):\n    @property\n    def path(self):\n        raise NotImplementedError\n\n\nclass SubClass(Base):\n    path = 'blah'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1245419,
                        "reputation": 15451,
                        "user_id": 1206998,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/z3jRS.jpg?s=256",
                        "display_name": "Juh_",
                        "link": "https://stackoverflow.com/users/1206998/juh"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1592036567,
                    "last_edit_date": 1592036567,
                    "creation_date": 1410433832,
                    "answer_id": 25785917,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Your base class could implement a <code>__new__</code> method that check for class attribute:</p>\n\n<pre><code>class Controller(object):\n    def __new__(cls, *args, **kargs):\n        if not hasattr(cls,'path'): \n            raise NotImplementedError(\"'Controller' subclasses should have a 'path' attribute\")\n        return object.__new__(cls)\n\nclass C1(Controller):\n    path = 42\n\nclass C2(Controller):\n    pass\n\n\nc1 = C1() \n# ok\n\nc2 = C2()  \n# NotImplementedError: 'Controller' subclasses should have a 'path' attribute\n</code></pre>\n\n<p>This way the error raise at instantiation</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2902425,
                        "reputation": 4128,
                        "user_id": 4601890,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5da93e3ac9b976486925cb38d7d6c25a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dankal444",
                        "link": "https://stackoverflow.com/users/4601890/dankal444"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1590069703,
                    "creation_date": 1590069703,
                    "answer_id": 61936286,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've modified just a bit <a href=\"https://stackoverflow.com/a/53417582/4601890\">@James</a> answer, so that all those decorators do not take so much place. If you had multiple such abstract properties to define, this is handy:</p>\n\n<pre><code>from abc import ABC, abstractmethod\n\ndef abstractproperty(func):\n   return property(classmethod(abstractmethod(func)))\n\nclass Base(ABC):\n\n    @abstractproperty\n    def CONSTANT(cls): ...\n\n    def print_constant(self):\n        print(type(self).CONSTANT)\n\n\nclass Derived(Base):\n    CONSTANT = 42\n\nclass BadDerived(Base):\n    BAD_CONSTANT = 42\n\nDerived()       # -&gt; Fine\nBadDerived()    # -&gt; Error\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5471894,
                        "reputation": 1648,
                        "user_id": 4351027,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/yv5aH.jpg?s=256",
                        "display_name": "zhukovgreen",
                        "link": "https://stackoverflow.com/users/4351027/zhukovgreen"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1570996839,
                    "last_edit_date": 1570996839,
                    "creation_date": 1511415492,
                    "answer_id": 47448292,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python3.6 implementation might looks like this:</p>\n\n<pre><code>In [20]: class X:\n    ...:     def __init_subclass__(cls):\n    ...:         if not hasattr(cls, 'required'):\n    ...:             raise NotImplementedError\n\nIn [21]: class Y(X):\n    ...:     required = 5\n    ...:     \n\nIn [22]: Y()\nOut[22]: &lt;__main__.Y at 0x7f08408c9a20&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 905035,
                        "reputation": 19842,
                        "user_id": 940098,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/jGtwG.jpg?s=256",
                        "display_name": "Wtower",
                        "link": "https://stackoverflow.com/users/940098/wtower"
                    },
                    "is_accepted": false,
                    "score": 179,
                    "last_activity_date": 1549654603,
                    "last_edit_date": 1549654603,
                    "creation_date": 1485532027,
                    "answer_id": 41897823,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>Python 3.3+</h2>\n\n<pre><code>from abc import ABCMeta, abstractmethod\n\n\nclass A(metaclass=ABCMeta):\n    def __init__(self):\n        # ...\n        pass\n\n    @property\n    @abstractmethod\n    def a(self):\n        pass\n\n    @abstractmethod\n    def b(self):\n        pass\n\n\nclass B(A):\n    a = 1\n\n    def b(self):\n        pass\n</code></pre>\n\n<p>Failure to declare <code>a</code> or <code>b</code> in the derived class <code>B</code> will raise a <code>TypeError</code> such as:</p>\n\n<blockquote>\n  <p><code>TypeError</code>: Can't instantiate abstract class <code>B</code> with abstract methods <code>a</code></p>\n</blockquote>\n\n<h2>Python 2.7</h2>\n\n<p>There is an <a href=\"https://docs.python.org/2.7/library/abc.html#abc.abstractproperty\" rel=\"noreferrer\">@abstractproperty</a> decorator for this:</p>\n\n<pre><code>from abc import ABCMeta, abstractmethod, abstractproperty\n\n\nclass A:\n    __metaclass__ = ABCMeta\n\n    def __init__(self):\n        # ...\n        pass\n\n    @abstractproperty\n    def a(self):\n        pass\n\n    @abstractmethod\n    def b(self):\n        pass\n\n\nclass B(A):\n    a = 1\n\n    def b(self):\n        pass\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 410225,
                        "reputation": 5901,
                        "user_id": 781938,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/189e7e1ecd0a7516152f0e2d2d5d6130?s=256&d=identicon&r=PG",
                        "display_name": "william_grisaitis",
                        "link": "https://stackoverflow.com/users/781938/william-grisaitis"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1533269423,
                    "creation_date": 1533269423,
                    "answer_id": 51665193,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>class AbstractStuff:\n    @property\n    @abc.abstractmethod\n    def some_property(self):\n        pass\n</code></pre>\n\n<p>As of 3.3 <code>abc.abstractproperty</code> is deprecated, I think.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 162,
                        "reputation": 19283,
                        "user_id": 199,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/cd0f77693ec8cc922a5b3053de9c0097?s=256&d=identicon&r=PG",
                        "display_name": "Brendan",
                        "link": "https://stackoverflow.com/users/199/brendan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1272546799,
                    "last_edit_date": 1272546799,
                    "creation_date": 1272535394,
                    "answer_id": 2736362,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bastien L\u00e9onard's answer mentions the abstract base class module and Brendan Abel's answer deals with non-implemented attributes raising errors. To ensure that the class is not implemented outside of the module, you could prefix the base name with an underscore which denotes it as private to the module (i.e. it is not imported). </p>\n\n<p>i.e.</p>\n\n<pre><code>class _Controller(object):\n    path = '' # There are better ways to declare attributes - see other answers\n\nclass MyController(_Controller):\n    path = '/Home'</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 32141,
                        "reputation": 61595,
                        "user_id": 88851,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/f42db155847d3648bc14b86bf838af06?s=256&d=identicon&r=PG",
                        "display_name": "Bastien L&#233;onard",
                        "link": "https://stackoverflow.com/users/88851/bastien-l%c3%a9onard"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1272536588,
                    "last_edit_date": 1272536588,
                    "creation_date": 1272535852,
                    "answer_id": 2736416,
                    "question_id": 2736255,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have a look at the abc (Abtract Base Class) module: <a href=\"http://docs.python.org/library/abc.html\" rel=\"nofollow noreferrer\">http://docs.python.org/library/abc.html</a></p>\n\n<p>However, in my opinion the simplest and most common solution is to raise an exception when an instance of the base class is created, or when its property is accessed.</p>\n"
                }
            ]
        },
        {
            "17801344": [
                {
                    "owner": {
                        "account_id": 2926324,
                        "reputation": 3088,
                        "user_id": 2507539,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/47dd6e0a488355ec34f6c6d7cf4a93ff?s=256&d=identicon&r=PG",
                        "display_name": "dilbert",
                        "link": "https://stackoverflow.com/users/2507539/dilbert"
                    },
                    "is_accepted": true,
                    "score": 63,
                    "last_activity_date": 1530738180,
                    "last_edit_date": 1530738180,
                    "creation_date": 1374560344,
                    "answer_id": 17802762,
                    "question_id": 17801344,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>1) What is use of metaclass and when to use it?</p>\n\n<p>Metaclasses are to classes as classes are to objects. They are classes for classes (hence the expression \"meta\").</p>\n\n<p>Metaclasses are typically for when you want to work outside of the normal constraints of OOP.</p>\n\n<p>2) What is difference/similarity between metaclass and inheritance?</p>\n\n<p>A metaclass is not part of an object's class hierarchy whereas base classes are. So when an object does <code>obj.some_method()</code> it will not search the metaclass for this method however the metaclass may have created it during the class' or object's creation.</p>\n\n<p>In this example below, the metaclass <code>MetaCar</code> gives objects a <code>defect</code> attribute based on a random number. The <code>defect</code> attribute is not defined in any of the objects' base classes or the class itself. This, however, could have been achieved using classes only.</p>\n\n<p>However (unlike classes), this metaclass also re-routes object creation; in the <code>some_cars</code> list, all the Toyotas are created using the <code>Car</code> class. The metaclass detects that <code>Car.__init__</code> contains a <code>make</code> argument that matches a pre-existing class by that name and so returns a object of that class instead.</p>\n\n<p>Additionally, you'll also note that in the <code>some_cars</code> list, <code>Car.__init__</code> is called with <code>make=\"GM\"</code>. A <code>GM</code> class has not been defined at this point in the program's evaluation. The metaclass detects that a class doesn't exist by that name in the make argument, so it creates one and updates the global namespace (so it doesn't need to use the return mechanism). It then creates the object using the newly defined class and returns it.</p>\n\n<pre><code>import random\n\nclass CarBase(object):\n    pass\n\nclass MetaCar(type):\n    car_brands = {}\n    def __init__(cls, cls_name, cls_bases, cls_dict):\n        super(MetaCar, cls).__init__(cls_name, cls_bases, cls_dict)\n        if(not CarBase in cls_bases):\n            MetaCar.car_brands[cls_name] = cls\n\n    def __call__(self, *args, **kwargs):\n        make = kwargs.get(\"make\", \"\")\n        if(MetaCar.car_brands.has_key(make) and not (self is MetaCar.car_brands[make])):\n            obj = MetaCar.car_brands[make].__call__(*args, **kwargs)\n            if(make == \"Toyota\"):\n                if(random.randint(0, 100) &lt; 2):\n                    obj.defect = \"sticky accelerator pedal\"\n            elif(make == \"GM\"):\n                if(random.randint(0, 100) &lt; 20):\n                    obj.defect = \"shithouse\"\n            elif(make == \"Great Wall\"):\n                if(random.randint(0, 100) &lt; 101):\n                    obj.defect = \"cancer\"\n        else:\n            obj = None\n            if(not MetaCar.car_brands.has_key(self.__name__)):\n                new_class = MetaCar(make, (GenericCar,), {})\n                globals()[make] = new_class\n                obj = new_class(*args, **kwargs)\n            else:\n                obj = super(MetaCar, self).__call__(*args, **kwargs)\n        return obj\n\nclass Car(CarBase):\n    __metaclass__ = MetaCar\n\n    def __init__(self, **kwargs):\n        for name, value in kwargs.items():\n            setattr(self, name, value)\n\n    def __repr__(self):\n        return \"&lt;%s&gt;\" % self.description\n\n    @property\n    def description(self):\n        return \"%s %s %s %s\" % (self.color, self.year, self.make, self.model)\n\nclass GenericCar(Car):\n    def __init__(self, **kwargs):\n        kwargs[\"make\"] = self.__class__.__name__\n        super(GenericCar, self).__init__(**kwargs)\n\nclass Toyota(GenericCar):\n    pass\n\ncolours = \\\n[\n    \"blue\",\n    \"green\",\n    \"red\",\n    \"yellow\",\n    \"orange\",\n    \"purple\",\n    \"silver\",\n    \"black\",\n    \"white\"\n]\n\ndef rand_colour():\n    return colours[random.randint(0, len(colours) - 1)]\n\nsome_cars = \\\n[\n    Car(make=\"Toyota\", model=\"Prius\", year=2005, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Camry\", year=2007, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Camry Hybrid\", year=2013, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Land Cruiser\", year=2009, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"FJ Cruiser\", year=2012, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Corolla\", year=2010, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Hiace\", year=2006, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Townace\", year=2003, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Aurion\", year=2008, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"Supra\", year=2004, color=rand_colour()),\n    Car(make=\"Toyota\", model=\"86\", year=2013, color=rand_colour()),\n    Car(make=\"GM\", model=\"Camaro\", year=2008, color=rand_colour())\n]\n\ndodgy_vehicles = filter(lambda x: hasattr(x, \"defect\"), some_cars)\nprint dodgy_vehicles\n</code></pre>\n\n<p>3) Where should one use metaclass or inheritance?</p>\n\n<p>As mentioned in this answer and in the comments, almost always use inheritance when doing OOP. Metaclasses are for working outside those constraints (refer to example) and is almost always not necessary however some very advanced and <strong>extremely dynamic</strong> program flow can be achieved with them. This is both their strength and their <strong>danger</strong>.</p>\n"
                }
            ]
        },
        {
            "10272898": [
                {
                    "owner": {
                        "account_id": 113371,
                        "reputation": 103207,
                        "user_id": 298607,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/DVW9g.jpg?s=256",
                        "display_name": "dawg",
                        "link": "https://stackoverflow.com/users/298607/dawg"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1627564617,
                    "last_edit_date": 1627564617,
                    "creation_date": 1335424021,
                    "answer_id": 10328699,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can put you logic in a separate function, and then have the elegance of the list comprehension along with the readability of the function:</p>\n<pre><code>def cond(i):\n    if i % 4 == 0: return 'four'\n    elif i % 6 == 0: return 'six'\n    \n    return i\n\nl=[cond(i) for i in range(1,n)]\n</code></pre>\n<p>If you have lots of conditions, it is usually easier to maintain a single dict rather than a big if/else ladder:</p>\n<pre><code>def cond(i):\n    mkey={4:'four',6:'six'}\n    return next((mkey[k] for k in mkey if i%k == 0), i)\n</code></pre>\n<p>This uses the default version of next to find if any integer key is a multiple of that key or the number itself, the default, if not.</p>\n<p>Which could be a single comprehension if desired:</p>\n<pre><code>[next((v for k,v in {4:'four',6:'six'}.items() if i%k==0), i) for i  in range(1,10)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15777442,
                        "reputation": 368,
                        "user_id": 11384887,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eXQTp.jpg?s=256",
                        "display_name": "RyanAbnavi",
                        "link": "https://stackoverflow.com/users/11384887/ryanabnavi"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1555690430,
                    "creation_date": 1555690430,
                    "answer_id": 55764710,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>ar = [\"four\" if i%4==0 else \"six\" if i%6==0  else i for i in range(1,30)]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 366823,
                        "reputation": 78480,
                        "user_id": 712603,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://i.sstatic.net/mCoc7.jpg?s=256",
                        "display_name": "David Robinson",
                        "link": "https://stackoverflow.com/users/712603/david-robinson"
                    },
                    "is_accepted": true,
                    "score": 48,
                    "last_activity_date": 1335192621,
                    "last_edit_date": 1335192621,
                    "creation_date": 1335135788,
                    "answer_id": 10272927,
                    "question_id": 10272898,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about</p>\n\n<pre><code>ar = [('four' if i % 4 == 0 else ('six' if i % 6 == 0 else i)) for i in range(1, n)]\n</code></pre>\n\n<p>For example, if <code>n = 30</code> this is</p>\n\n<pre><code>[1, 2, 3, 'four', 5, 'six', 7, 'four', 9, 10, 11, 'four', 13, 14, 15, 'four', 17, 'six', 19, 'four', 21, 22, 23, 'four', 25, 26, 27, 'four', 29]\n</code></pre>\n\n<p>ETA: Here's how you could apply a list of conditions:</p>\n\n<pre><code>CONDITIONS = [(lambda i: i % 4 == 0, \"four\"), (lambda i: i % 6 == 0, \"six\"),\n              (lambda i: i % 7 == 0, \"seven\")]\n\ndef apply_conditions(i):\n    for condition, replacement in CONDITIONS:\n        if condition(i):\n            return replacement\n    return i\n\nar = map(apply_conditions, range(0, n))\n</code></pre>\n"
                }
            ]
        },
        {
            "11174024": [
                {
                    "owner": {
                        "account_id": 10755509,
                        "reputation": 372,
                        "user_id": 7913588,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/1398861050156718/picture?type=large",
                        "display_name": "Chameera W. Ashan",
                        "link": "https://stackoverflow.com/users/7913588/chameera-w-ashan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1673562763,
                    "creation_date": 1673562763,
                    "answer_id": 75102973,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you need to convert string to json. Then use loads() method instead of load(). load() function uses to load data from a file so used loads() to convert string to json object.</p>\n<pre><code>j_obj = json.loads('[&quot;label&quot; : &quot;data&quot;]')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7623778,
                        "reputation": 1531,
                        "user_id": 5780969,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://i.sstatic.net/9uYh0.jpg?s=256",
                        "display_name": "Raisul Islam",
                        "link": "https://stackoverflow.com/users/5780969/raisul-islam"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1670491665,
                    "creation_date": 1670491665,
                    "answer_id": 74728078,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Open the file as a text file first</p>\n<pre><code>json_data = open(&quot;data.json&quot;, &quot;r&quot;)\n</code></pre>\n<p>Now load it to dict</p>\n<pre><code>dict_data = json.load(json_data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248321,
                        "reputation": 61168,
                        "user_id": 523612,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4ae512dd708a619496d36b1f681f95e0?s=256&d=identicon&r=PG",
                        "display_name": "Karl Knechtel",
                        "link": "https://stackoverflow.com/users/523612/karl-knechtel"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1662892426,
                    "last_edit_date": 1662892426,
                    "creation_date": 1340504372,
                    "answer_id": 11174518,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>AttributeError(&quot;'str' object has no attribute 'read'&quot;,)\n</code></pre>\n<p>This means exactly what it says: something tried to find a <code>.read</code> attribute on the object that you gave it, and you gave it an object of type <code>str</code> (i.e., you gave it a string).</p>\n<p>The error occurred here:</p>\n<pre><code>json.load(jsonStr)['data']['children']\n</code></pre>\n<p>Well, you aren't looking for <code>read</code> anywhere, so it must happen in the <code>json.load</code> function that you called (as indicated by the full traceback). That is because <code>json.load</code> is trying to <code>.read</code> the thing that you gave it, but you gave it <code>jsonStr</code>, which currently names a string (which you created by calling <code>.read</code> on the <code>response</code>).</p>\n<p>Solution: don't call <code>.read</code> yourself; the function will do this, and is expecting you to give it the <code>response</code> directly so that it can do so.</p>\n<p>You could also have figured this out by reading the built-in Python documentation for the function (try <code>help(json.load)</code>, or for the entire module (try <code>help(json)</code>), or by checking the documentation for those functions on <a href=\"http://docs.python.org\" rel=\"nofollow noreferrer\">http://docs.python.org</a> .</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19701170,
                        "reputation": 1,
                        "user_id": 14423895,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/3wZEE.jpg?s=256",
                        "display_name": "Hackers Arena",
                        "link": "https://stackoverflow.com/users/14423895/hackers-arena"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1660749582,
                    "creation_date": 1660749582,
                    "answer_id": 73391030,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>use json.loads() function , put the s after that ... just a mistake btw i just realized after i searched error</p>\n<pre><code>def getEntries (self, sub):\nurl = 'http://www.reddit.com/'\nif (sub != ''):\n    url += 'r/' + sub\n\nrequest = urllib2.Request (url + \n    '.json', None, {'User-Agent' : 'Reddit desktop client by /user/RobinJ1995/'})\nresponse = urllib2.urlopen (request)\njsonStr = response.read()\n\nreturn json.loads(jsonStr)['data']['children']\n</code></pre>\n<p>try this</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19977073,
                        "reputation": 1,
                        "user_id": 14641092,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/2NzsW.png?s=256",
                        "display_name": "Shashwat SIngh",
                        "link": "https://stackoverflow.com/users/14641092/shashwat-singh"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654683057,
                    "last_edit_date": 1654683057,
                    "creation_date": 1654406000,
                    "answer_id": 72504948,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>So, don't use <code>json.load(data.read())</code> use <code>json.loads(data.read())</code>:</p>\n<pre><code>def findMailOfDev(fileName):\n    file=open(fileName,'r')\n    data=file.read();\n    data=json.loads(data)\n    return data['mail']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8760326,
                        "reputation": 81,
                        "user_id": 6550424,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-rvIZBtDH8CQ/AAAAAAAAAAI/AAAAAAAAAVw/4-doGD3hlvg/photo.jpg?sz=256",
                        "display_name": "Pallav Ghose",
                        "link": "https://stackoverflow.com/users/6550424/pallav-ghose"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1627686775,
                    "creation_date": 1627686775,
                    "answer_id": 68597902,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Instead of json.load() use json.loads() and it would work:\nex:</p>\n<pre><code>import json\nfrom json import dumps\n\nstrinjJson = '{&quot;event_type&quot;: &quot;affected_element_added&quot;}'\ndata = json.loads(strinjJson)\nprint(data)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1499435,
                        "reputation": 688,
                        "user_id": 1404585,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/51889d1fe5bd44d8084b76494290bf6a?s=256&d=identicon&r=PG",
                        "display_name": "music_piano",
                        "link": "https://stackoverflow.com/users/1404585/music-piano"
                    },
                    "is_accepted": false,
                    "score": 44,
                    "last_activity_date": 1583171299,
                    "last_edit_date": 1583171299,
                    "creation_date": 1583166711,
                    "answer_id": 60493016,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You need to open the file first. This doesn't work:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>json_file = json.load('test.json')\n</code></pre>\n\n<p>But this works:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>f = open('test.json')\njson_file = json.load(f)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16919594,
                        "reputation": 700,
                        "user_id": 12236696,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7fe75c0ddf7242d4bec696f8fc8dce77?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "JohnyMSF",
                        "link": "https://stackoverflow.com/users/12236696/johnymsf"
                    },
                    "is_accepted": false,
                    "score": 69,
                    "last_activity_date": 1576834092,
                    "creation_date": 1576834092,
                    "answer_id": 59422786,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Ok, this is an old thread but. \nI had a same issue, my problem was I used <code>json.load</code> instead of <code>json.loads</code></p>\n\n<p>This way, json has no problem with loading any kind of dictionary. </p>\n\n<p><a href=\"https://docs.python.org/3/library/json.html\" rel=\"noreferrer\">Official documentation</a></p>\n\n<blockquote>\n  <p>json.load - Deserialize fp (a .read()-supporting text file or binary file containing a JSON document) to a Python object using this conversion table.</p>\n  \n  <p>json.loads - Deserialize s (a str, bytes or bytearray instance containing a JSON document) to a Python object using this conversion table.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 97405,
                        "reputation": 7053,
                        "user_id": 264215,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/c199cdeb06e400f367a8b168c5da8f66?s=256&d=identicon&r=PG",
                        "display_name": "mutantacule",
                        "link": "https://stackoverflow.com/users/264215/mutantacule"
                    },
                    "is_accepted": true,
                    "score": 285,
                    "last_activity_date": 1539417113,
                    "last_edit_date": 1539417113,
                    "creation_date": 1340498030,
                    "answer_id": 11174103,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The problem is that for <code>json.load</code> you should pass a file like object with a <code>read</code> function defined. So either you use <a href=\"http://docs.python.org/library/json.html#json.load\" rel=\"noreferrer\"><code>json.load(response)</code></a> or <a href=\"http://docs.python.org/library/json.html#json.loads\" rel=\"noreferrer\"><code>json.loads(response.read())</code></a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 199671,
                        "reputation": 153242,
                        "user_id": 445131,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://i.sstatic.net/2b4pE.jpg?s=256",
                        "display_name": "Eric Leschinski",
                        "link": "https://stackoverflow.com/users/445131/eric-leschinski"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1414612304,
                    "creation_date": 1414612304,
                    "answer_id": 26639363,
                    "question_id": 11174024,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>If you get a python error like this:</strong></p>\n\n<pre><code>AttributeError: 'str' object has no attribute 'some_method'\n</code></pre>\n\n<p>You probably poisoned your object accidentally by overwriting your object with a string.</p>\n\n<p><strong>How to reproduce this error in python with a few lines of code:</strong></p>\n\n<pre><code>#!/usr/bin/env python\nimport json\ndef foobar(json):\n    msg = json.loads(json)\n\nfoobar('{\"batman\": \"yes\"}')\n</code></pre>\n\n<p><strong>Run it, which prints:</strong></p>\n\n<pre><code>AttributeError: 'str' object has no attribute 'loads'\n</code></pre>\n\n<p><strong>But change the name of the variablename, and it works fine:</strong></p>\n\n<pre><code>#!/usr/bin/env python\nimport json\ndef foobar(jsonstring):\n    msg = json.loads(jsonstring)\n\nfoobar('{\"batman\": \"yes\"}')\n</code></pre>\n\n<p>This error is caused when you tried to run a method within a string.  String has a few methods, but not the one you are invoking.  So stop trying to invoke a method which String does not define and start looking for where you poisoned your object.</p>\n"
                }
            ]
        },
        {
            "22241420": [
                {
                    "owner": {
                        "account_id": 35417,
                        "reputation": 1115700,
                        "user_id": 100297,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG",
                        "display_name": "Martijn Pieters",
                        "link": "https://stackoverflow.com/users/100297/martijn-pieters"
                    },
                    "is_accepted": true,
                    "score": 310,
                    "last_activity_date": 1600075004,
                    "last_edit_date": 1600075004,
                    "creation_date": 1394195422,
                    "answer_id": 22250157,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>When you use the <a href=\"http://docs.python.org/2/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\"><code>-m</code> command-line flag</a>, Python will import a module <em>or package</em> for you, then run it as a script. When you don't use the <code>-m</code> flag, the file you named is run as <em>just a script</em>.</p>\n<p>The distinction is important when you try to run a package. There is a big difference between:</p>\n<pre><code>python foo/bar/baz.py\n</code></pre>\n<p>and</p>\n<pre><code>python -m foo.bar.baz\n</code></pre>\n<p>as in the latter case, <code>foo.bar</code> is imported and relative imports will work correctly with <code>foo.bar</code> as the starting point.</p>\n<p>Demo:</p>\n<pre><code>$ mkdir -p test/foo/bar\n$ touch test/foo/__init__.py\n$ touch test/foo/bar/__init__.py\n$ cat &lt;&lt; EOF &gt; test/foo/bar/baz.py \n&gt; if __name__ == &quot;__main__&quot;:\n&gt;     print __package__\n&gt;     print __name__\n&gt; \n&gt; EOF\n$ PYTHONPATH=test python test/foo/bar/baz.py \nNone\n__main__\n$ PYTHONPATH=test python -m foo.bar.baz \nfoo.bar\n__main__\n</code></pre>\n<p>As a result, Python has to actually care about packages when using the <code>-m</code> switch. A normal script can never <em>be</em> a package, so <code>__package__</code> is set to <code>None</code>.</p>\n<p>But run a package or module <em>inside</em> a package with <code>-m</code> and now there is at least the <em>possibility</em> of a package, so the <code>__package__</code> variable is set to a string value; in the above demonstration it is set to <code>'foo.bar'</code>, for plain modules not inside a package it is set to an empty string.</p>\n<p>As for the <code>__main__</code> <em>module</em>, Python imports scripts being run as it would import regular modules. A new module object is created to hold the global namespace and is stored in <code>sys.modules['__main__']</code>. This is what the <code>__name__</code> variable refers to, it is a key in that structure.</p>\n<p>For packages, you can create a <code>__main__.py</code> module inside and have that run when running <code>python -m package_name</code>; in fact that is the only way you <em>can</em> run a package as a script:</p>\n<pre><code>$ PYTHONPATH=test python -m foo.bar\npython: No module named foo.bar.__main__; 'foo.bar' is a package and cannot be directly executed\n$ cp test/foo/bar/baz.py test/foo/bar/__main__.py\n$ PYTHONPATH=test python -m foo.bar\nfoo.bar\n__main__\n</code></pre>\n<p>So, when naming a package for running with <code>-m</code>, Python looks for a <code>__main__</code> module contained in that package and executes that as a script. Its name is then still set to <code>'__main__'</code> and the module object is still stored in <code>sys.modules['__main__']</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 258754,
                        "reputation": 393210,
                        "user_id": 541136,
                        "user_type": "moderator",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/wftMn.jpg?s=256",
                        "display_name": "Aaron Hall",
                        "link": "https://stackoverflow.com/users/541136/aaron-hall"
                    },
                    "is_accepted": false,
                    "score": 56,
                    "last_activity_date": 1571488383,
                    "last_edit_date": 1571488383,
                    "creation_date": 1394168209,
                    "answer_id": 22241810,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 4.0",
                    "body": "\n\n<h1>Execution of Python code with -m option or not</h1>\n\n<p>Use the <code>-m</code> flag. </p>\n\n<p>The results are pretty much the same when you have a script, but when you develop a package, without the <code>-m</code> flag, there's no way to get the imports to work correctly if you want to run a subpackage or module in the package as the main entry point to your program (and believe me, I've tried.)</p>\n\n<h2>The docs</h2>\n\n<p>Like the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\">docs on the -m flag</a> say:</p>\n\n<blockquote>\n  <p>Search sys.path for the named module and execute its contents as the <code>__main__</code> module.</p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>As with the -c option, the current directory will be added to the start of sys.path.</p>\n</blockquote>\n\n<p>so</p>\n\n<pre><code>python -m pdb\n</code></pre>\n\n<p>is roughly equivalent to</p>\n\n<pre><code>python /usr/lib/python3.5/pdb.py\n</code></pre>\n\n<p>(assuming you don't have a package or script in your current directory called pdb.py)</p>\n\n<h2>Explanation:</h2>\n\n<p>Behavior is made \"deliberately similar to\" scripts.</p>\n\n<blockquote>\n  <p>Many standard library modules contain code that is invoked on their execution as a script. An example is the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-m\" rel=\"noreferrer\">timeit module:</a></p>\n</blockquote>\n\n<p>Some python code is intended to be <a href=\"https://docs.python.org/3/library/timeit.html#module-timeit\" rel=\"noreferrer\">run as a module:</a> (I think this example is better than the commandline option doc example)</p>\n\n<pre><code>$ python -m timeit '\"-\".join(str(n) for n in range(100))'\n10000 loops, best of 3: 40.3 usec per loop\n$ python -m timeit '\"-\".join([str(n) for n in range(100)])'\n10000 loops, best of 3: 33.4 usec per loop\n$ python -m timeit '\"-\".join(map(str, range(100)))'\n10000 loops, best of 3: 25.2 usec per loop\n</code></pre>\n\n<p><a href=\"http://www.python.org/download/releases/2.4/highlights/\" rel=\"noreferrer\">And from the release note highlights for Python 2.4</a>:</p>\n\n<blockquote>\n  <p>The -m command line option - python -m modulename will find a module\n  in the standard library, and invoke it. For example, <code>python -m pdb</code>\n  is equivalent to <code>python /usr/lib/python2.4/pdb.py</code></p>\n</blockquote>\n\n<h2>Follow-up Question</h2>\n\n<blockquote>\n  <p>Also, David Beazley's Python Essential Reference explains it as \"The\n  -m option runs a library module as a script which executes inside the <code>__main__</code> module prior to the execution of the main script\".</p>\n</blockquote>\n\n<p>It means any module you can lookup with an import statement can be run as the entry point of the program - if it has a code block, usually near the end, with <code>if __name__ == '__main__':</code>.</p>\n\n<h2><code>-m</code> without adding the current directory to the path:</h2>\n\n<p>A comment here elsewhere says:</p>\n\n<blockquote>\n  <p>That the -m option also adds the current directory to sys.path, is obviously a security issue (see: preload attack). This behavior is similar to library search order in Windows (before it had been hardened recently). It's a pity that Python does not follow the trend and does not offer a simple way to disable adding . to sys.path</p>\n</blockquote>\n\n<p>Well, this demonstrates the possible issue - (in windows remove the quotes):</p>\n\n<pre><code>echo \"import sys; print(sys.version)\" &gt; pdb.py\n\npython -m pdb\n3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)]\n</code></pre>\n\n<p>Use the <code>-I</code> flag to lock this down for production environments (new in version 3.4):</p>\n\n<pre><code>python -Im pdb\nusage: pdb.py [-c command] ... pyfile [arg] ...\netc...\n</code></pre>\n\n<p>from <a href=\"https://docs.python.org/3.5/using/cmdline.html#cmdoption-I\" rel=\"noreferrer\">the docs</a>:</p>\n\n<blockquote>\n  <p><strong><code>-I</code></strong></p>\n  \n  <p>Run Python in isolated mode. This also implies -E and -s. In isolated mode sys.path contains neither the script\u2019s directory nor the user\u2019s site-packages directory. All PYTHON* environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code.</p>\n</blockquote>\n\n<h3>What does <code>__package__</code> do?</h3>\n\n<p>It enables explicit relative imports, not particularly germane to this question, though - see this answer here: <a href=\"https://stackoverflow.com/questions/21233229/whats-the-purpose-of-the-package-attribute-in-python/48833828#48833828\">What&#39;s the purpose of the &quot;__package__&quot; attribute in Python?</a></p>\n\n\n"
                },
                {
                    "owner": {
                        "account_id": 6475362,
                        "reputation": 1529,
                        "user_id": 5294619,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/a251ec26091e1c4d66d4827e344b635b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ddbug",
                        "link": "https://stackoverflow.com/users/5294619/ddbug"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1473332768,
                    "last_edit_date": 1473332768,
                    "creation_date": 1473288051,
                    "answer_id": 39380060,
                    "question_id": 22241420,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The main reason to run a module (or package) as a script with -m is to simplify deployment, especially on Windows. You can install scripts in the same place in the Python library where modules normally go - instead of polluting PATH or global executable directories such as ~/.local (the per-user scripts directory is ridiculously hard to find in Windows). </p>\n\n<p>Then you just type -m and Python finds the script automagically. For example, <code>python -m pip</code> will find the correct pip for the same instance of Python interpreter which executes it. Without -m, if user has several Python versions installed, which one would be the \"global\" pip?</p>\n\n<p>If user prefers \"classic\" entry points for command-line scripts, these can be easily added as small scripts somewhere in PATH, or pip can create these at install time with entry_points parameter in setup.py. </p>\n\n<p>So just check for <code>__name__ == '__main__'</code> and ignore other non-reliable implementation details. </p>\n"
                }
            ]
        },
        {
            "9339025": [
                {
                    "owner": {
                        "account_id": 162132,
                        "reputation": 98139,
                        "user_id": 383402,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/8c4a15feb7408cade1a8ad5bf34d44a4?s=256&d=identicon&r=PG",
                        "display_name": "Borealid",
                        "link": "https://stackoverflow.com/users/383402/borealid"
                    },
                    "is_accepted": true,
                    "score": 69,
                    "last_activity_date": 1358351390,
                    "last_edit_date": 1358351390,
                    "creation_date": 1329544929,
                    "answer_id": 9339040,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In vim, you select the block and then press the <kbd>&lt;</kbd> key.</p>\n\n<p>In Eclipse you select it and then press <kbd>SHIFT</kbd> + <kbd>TAB</kbd>.</p>\n\n<p>Every code editor worth its salt has a one-key way to indent and dedent blocks.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 224450,
                        "reputation": 31,
                        "user_id": 484288,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/079580b1cce1c97dbeab22362cc03139?s=256&d=identicon&r=PG",
                        "display_name": "sanja7s",
                        "link": "https://stackoverflow.com/users/484288/sanja7s"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1358351299,
                    "last_edit_date": 1358351299,
                    "creation_date": 1358349736,
                    "answer_id": 14361758,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Perhaps late for your case, but if useful for others:</p>\n\n<p><kbd>SHIFT</kbd> + <kbd>TAB</kbd> will do unindent for the selected text in Eclipse.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 296832,
                        "reputation": 1329,
                        "user_id": 602018,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0dade88e75699619b5c33ae400005e94?s=256&d=identicon&r=PG",
                        "display_name": "42n4",
                        "link": "https://stackoverflow.com/users/602018/42n4"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1347606625,
                    "creation_date": 1347606625,
                    "answer_id": 12419725,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use Preferences-Pydev-Editor settings uncheck change tabs to spaces. It makes detent errors and your problem. And test other options like 4 space tab, 8 space tab and so on.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63624,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1329569505,
                    "creation_date": 1329569505,
                    "answer_id": 9341310,
                    "question_id": 9339025,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could also replace the if statement with:</p>\n\n<pre><code>if True:  # if i &lt; 5:\n</code></pre>\n\n<p>and leave everything else alone - no indent/dedent to undo later.</p>\n"
                }
            ]
        },
        {
            "11559062": [
                {
                    "owner": {
                        "account_id": 22519586,
                        "reputation": 21,
                        "user_id": 16713362,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GjqA1-jTC1321bOKSodo158g6fnRThzwRYctVgBhQ=k-s256",
                        "display_name": "Will",
                        "link": "https://stackoverflow.com/users/16713362/will"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1648864148,
                    "last_edit_date": 1648864148,
                    "creation_date": 1629463302,
                    "answer_id": 68862408,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use the an <a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)#Expressions\" rel=\"nofollow noreferrer\">f-string</a> too!</p>\n<pre><code>s = &quot;string&quot;\ni = 95\nprint(f&quot;{s}{i}&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14667032,
                        "reputation": 2573,
                        "user_id": 10592609,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/eywIU.jpg?s=256",
                        "display_name": "Babatunde Mustapha",
                        "link": "https://stackoverflow.com/users/10592609/babatunde-mustapha"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1648864079,
                    "last_edit_date": 1648864079,
                    "creation_date": 1603465898,
                    "answer_id": 64502669,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Let's assume you want to concatenate a string and an integer in a situation like this:</p>\n<pre><code>for i in range(1, 11):\n   string = &quot;string&quot; + i\n</code></pre>\n<p>And you are getting a type or concatenation error.</p>\n<p>The best way to go about it is to do something like this:</p>\n<pre><code>for i in range(1, 11):\n   print(&quot;string&quot;, i)\n</code></pre>\n<p>This will give you concatenated results, like string 1, string 2, string 3, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18091747,
                        "reputation": 570,
                        "user_id": 13151077,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/DYN9r.jpg?s=256",
                        "display_name": "Kasra Najafi",
                        "link": "https://stackoverflow.com/users/13151077/kasra-najafi"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1648864012,
                    "last_edit_date": 1648864012,
                    "creation_date": 1593453659,
                    "answer_id": 62644100,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In Python 3.6 and newer, you can format it just like this:</p>\n<pre><code>new_string = f'{s} {i}'\nprint(new_string)\n</code></pre>\n<p>Or just:</p>\n<pre><code>print(f'{s} {i}')\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 17660964,
                        "reputation": 11,
                        "user_id": 13022984,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/uMHAC.jpg?s=256",
                        "display_name": "Daniel Jim&#233;nez",
                        "link": "https://stackoverflow.com/users/13022984/daniel-jim%c3%a9nez"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1648863950,
                    "last_edit_date": 1648863950,
                    "creation_date": 1587988803,
                    "answer_id": 61458399,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you only want to print, you can do this:</p>\n<pre><code>print(s, i)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10949616,
                        "reputation": 91,
                        "user_id": 8046369,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cbf77b85c3d4130c1ae5897ba83cb37a?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Aakash Wadhwa",
                        "link": "https://stackoverflow.com/users/8046369/aakash-wadhwa"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1648863882,
                    "last_edit_date": 1648863882,
                    "creation_date": 1547145375,
                    "answer_id": 54134938,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The format() method can be used to concatenate a string and an integer:</p>\n<pre><code>print(s + &quot;{}&quot;.format(i))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1156094,
                        "reputation": 2005,
                        "user_id": 1136670,
                        "user_type": "registered",
                        "accept_rate": 73,
                        "profile_image": "https://www.gravatar.com/avatar/d039c79ebf6f79c06418ac31453992f6?s=256&d=identicon&r=PG",
                        "display_name": "CaitlinG",
                        "link": "https://stackoverflow.com/users/1136670/caitling"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1648863854,
                    "last_edit_date": 1648863854,
                    "creation_date": 1373442586,
                    "answer_id": 17565144,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python is an interesting language in that while there is usually one (or two) &quot;obvious&quot; ways to accomplish any given task, flexibility still exists.</p>\n<pre><code>s = &quot;string&quot;\ni = 0\n\nprint (s + repr(i))\n</code></pre>\n<p>The above code snippet is written in Python\u00a03 syntax, but the parentheses after <em>print</em> were always allowed (optional) until version 3 made them mandatory.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 354053,
                        "reputation": 142677,
                        "user_id": 1209279,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=256&d=identicon&r=PG",
                        "display_name": "Levon",
                        "link": "https://stackoverflow.com/users/1209279/levon"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1342696788,
                    "last_edit_date": 1342696788,
                    "creation_date": 1342694569,
                    "answer_id": 11559099,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>String formatting, using the new-style <code>.format()</code> method (with the defaults <a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\">.format()</a> provides):</p>\n\n<pre><code> '{}{}'.format(s, i)\n</code></pre>\n\n<p>Or the older, but \"still sticking around\", <code>%</code>-formatting:</p>\n\n<pre><code> '%s%d' %(s, i)\n</code></pre>\n\n<p>In both examples above there's <em>no</em> space between the two items concatenated. If space is needed, it can simply be added in the format strings.</p>\n\n<p>These provide a <em>lot</em> of control and flexibility about how to concatenate items, the space between them etc. For details about <a href=\"http://docs.python.org/library/string.html#formatspec\" rel=\"noreferrer\">format specifications see this</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 415531,
                        "reputation": 174261,
                        "user_id": 790387,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=256&d=identicon&r=PG",
                        "display_name": "Burhan Khalid",
                        "link": "https://stackoverflow.com/users/790387/burhan-khalid"
                    },
                    "is_accepted": false,
                    "score": 93,
                    "last_activity_date": 1342694658,
                    "creation_date": 1342694658,
                    "answer_id": 11559133,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>No string formatting:</p>\n\n<pre><code>&gt;&gt; print 'Foo',0\nFoo 0\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user647772"
                    },
                    "is_accepted": true,
                    "score": 198,
                    "last_activity_date": 1342694627,
                    "creation_date": 1342694627,
                    "answer_id": 11559122,
                    "question_id": 11559062,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Modern string formatting:</p>\n\n<pre><code>\"{} and {}\".format(\"string\", 1)\n</code></pre>\n"
                }
            ]
        },
        {
            "8200342": [
                {
                    "owner": {
                        "account_id": 2215786,
                        "reputation": 412,
                        "user_id": 1973026,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/iSkvR.jpg?s=256",
                        "display_name": "murasing",
                        "link": "https://stackoverflow.com/users/1973026/murasing"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1391767189,
                    "last_edit_date": 1391767189,
                    "creation_date": 1391766565,
                    "answer_id": 21624346,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>def getUniqueItems(iterable):\nresult = []\nfor item in iterable:\n    if item not in result:\n        result.append(item)\nreturn result\n\nprint (''.join(getUniqueItems(list('apple'))))\n</code></pre>\n\n<p>P.S. Same thing like one of the answers here but a little change, set is not really required !</p>\n"
                },
                {
                    "owner": {
                        "account_id": 39819,
                        "reputation": 59207,
                        "user_id": 115049,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://i.sstatic.net/6RN3z.png?s=256",
                        "display_name": "rossipedia",
                        "link": "https://stackoverflow.com/users/115049/rossipedia"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1321777983,
                    "creation_date": 1321777983,
                    "answer_id": 8200355,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You could pop 'em into a <code>set</code> and then back into a list:</p>\n\n<pre><code>a = [ ... ]\ns = set(a)\na2 = list(s)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835620,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1321777976,
                    "creation_date": 1321777976,
                    "answer_id": 8200353,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Convert to a set:</p>\n\n<pre><code>a = set(a)\n</code></pre>\n\n<p>Or optionally back to a list:</p>\n\n<pre><code>a = list(set(a))\n</code></pre>\n\n<p>Note that this doesn't preserve order. If you want to preserve order:</p>\n\n<pre><code>seen = set()\nresult = []\nfor item in a:\n    if item not in seen:\n        seen.add(item)\n        result.append(item)\n</code></pre>\n\n<p>See it working online: <a href=\"http://ideone.com/p9yJU\">ideone</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 110545,
                        "reputation": 32437,
                        "user_id": 292477,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/7ca3cdf733e5ad7ca41c58ba43d06dcd?s=256&d=identicon&r=PG",
                        "display_name": "Krumelur",
                        "link": "https://stackoverflow.com/users/292477/krumelur"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1321777963,
                    "creation_date": 1321777963,
                    "answer_id": 8200352,
                    "question_id": 8200342,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the set type to remove duplicates</p>\n\n<pre><code>a = list(set(a))\n</code></pre>\n"
                }
            ]
        },
        {
            "38895768": [
                {
                    "owner": {
                        "account_id": 12952183,
                        "reputation": 484,
                        "user_id": 9364104,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-PpLh8ZvYeaw/AAAAAAAAAAI/AAAAAAAAABY/Yb4gaOaqJmc/photo.jpg?sz=256",
                        "display_name": "ayoub mlaouah",
                        "link": "https://stackoverflow.com/users/9364104/ayoub-mlaouah"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1671019228,
                    "creation_date": 1671019228,
                    "answer_id": 74797975,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Short answer:</p>\n<ul>\n<li>By value: <code>df2 = df.copy()</code></li>\n<li>By references : <code>df2 = df</code></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1089798,
                        "reputation": 7138,
                        "user_id": 1084684,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://i.sstatic.net/WIegY.png?s=256",
                        "display_name": "dstromberg",
                        "link": "https://stackoverflow.com/users/1084684/dstromberg"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1507235774,
                    "creation_date": 1507235774,
                    "answer_id": 46594396,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python is neither pass by value nor pass by reference.  It is pass by assignment.</p>\n\n<p>Supporting reference, the Python FAQ:\n<a href=\"https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\" rel=\"noreferrer\">https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference</a></p>\n\n<p>IOW:</p>\n\n<ol>\n<li>If you pass an immutable value, changes to it do not change its\nvalue    in the caller - because you are rebinding the name to a new\nobject.</li>\n<li>If you pass a mutable value, changes made in the called function,\nalso change the value in the caller, so long as you do not rebind\nthat name to a new object.  If you reassign the variable,\ncreating a new object, that change and subsequent changes to the\nname are not seen in the caller.</li>\n</ol>\n\n<p>So if you pass a list, and change its 0th value, that change is seen in both the called and the caller.  But if you reassign the list with a new list, this change is lost.  But if you slice the list and replace <em>that</em> with a new list, that change is seen in both the called and the caller.</p>\n\n<p>EG:</p>\n\n<pre><code>def change_it(list_):\n    # This change would be seen in the caller if we left it alone\n    list_[0] = 28\n\n    # This change is also seen in the caller, and replaces the above\n    # change\n    list_[:] = [1, 2]\n\n    # This change is not seen in the caller.\n    # If this were pass by reference, this change too would be seen in\n    # caller.\n    list_ = [3, 4]\n\nthing = [10, 20]\nchange_it(thing)\n# here, thing is [1, 2]\n</code></pre>\n\n<p>If you're a C fan, you can think of this as passing a pointer by value - not a pointer to a pointer to a value, just a pointer to a value.</p>\n\n<p>HTH.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2504802,
                        "reputation": 18537,
                        "user_id": 3830997,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/Lg47I.png?s=256",
                        "display_name": "Matthias Fripp",
                        "link": "https://stackoverflow.com/users/3830997/matthias-fripp"
                    },
                    "is_accepted": true,
                    "score": 180,
                    "last_activity_date": 1471050804,
                    "last_edit_date": 1471050804,
                    "creation_date": 1471030241,
                    "answer_id": 38925257,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The short answer is, Python always does pass-by-value, but every Python variable is actually a pointer to some object, so sometimes it looks like pass-by-reference.</p>\n\n<p>In Python every object is either mutable or non-mutable. e.g., lists, dicts, modules and Pandas data frames are mutable, and ints, strings and tuples are non-mutable. Mutable objects can be changed internally (e.g., add an element to a list), but non-mutable objects cannot. </p>\n\n<p>As I said at the start, you can think of every Python variable as a pointer to an object. When you pass a variable to a function, the variable (pointer) within the function is always a copy of the variable (pointer) that was passed in. So if you assign something new to the internal variable, all you are doing is changing the local variable to point to a different object. This doesn't alter (mutate) the original object that the variable pointed to, nor does it make the external variable point to the new object. At this point, the external variable still points to the original object, but the internal variable points to a new object. </p>\n\n<p>If you want to alter the original object (only possible with mutable data types), you have to do something that alters the object <em>without</em> assigning a completely new value to the local variable. This is why <code>letgo()</code> and <code>letgo3()</code> leave the external item unaltered, but <code>letgo2()</code> alters it. </p>\n\n<p>As @ursan pointed out, if <code>letgo()</code> used something like this instead, then it would alter (mutate) the original object that <code>df</code> points to, which would change the value seen via the global <code>a</code> variable:</p>\n\n<pre><code>def letgo(df):\n    df.drop('b', axis=1, inplace=True)\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\nletgo(a)  # will alter a\n</code></pre>\n\n<p>In some cases, you can completely hollow out the original variable and refill it with new data, without actually doing a direct assignment, e.g. this will alter the original object that <code>v</code> points to, which will change the data seen when you use <code>v</code> later:</p>\n\n<pre><code>def letgo3(x):\n    x[:] = np.array([[3,3],[3,3]])\n\nv = np.empty((2, 2))\nletgo3(v)   # will alter v\n</code></pre>\n\n<p>Notice that I'm not assigning something directly to <code>x</code>; I'm assigning something to the entire internal range of <code>x</code>.</p>\n\n<p>If you absolutely must create a completely new object and make it visible externally (which is sometimes the case with pandas), you have two options. The 'clean' option would be just to return the new object, e.g., </p>\n\n<pre><code>def letgo(df):\n    df = df.drop('b',axis=1)\n    return df\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\na = letgo(a)\n</code></pre>\n\n<p>Another option would be to reach outside your function and directly alter a global variable. This changes <code>a</code> to point to a new object, and any function that refers to <code>a</code> afterward will see that new object:</p>\n\n<pre><code>def letgo():\n    global a\n    a = a.drop('b',axis=1)\n\na = pd.DataFrame({'a':[1,2], 'b':[3,4]})\nletgo()   # will alter a!\n</code></pre>\n\n<p>Directly altering global variables is usually a bad idea, because anyone who reads your code will have a hard time figuring out how <code>a</code> got changed. (I generally use global variables for shared parameters used by many functions in a script, but I don't let them alter those global variables.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5310431,
                        "reputation": 2447,
                        "user_id": 4236984,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/fKrEh.jpg?s=256",
                        "display_name": "ursan",
                        "link": "https://stackoverflow.com/users/4236984/ursan"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1471027680,
                    "creation_date": 1471027680,
                    "answer_id": 38924624,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>To add to @Mike Graham's answer, who pointed to a very good read:</p>\n\n<p>In your case, what is important to remember is the difference between <em>names</em> and <em>values</em>. <code>a</code>, <code>df</code>, <code>xx</code>, <code>x</code>, are all <em>names</em>, but they refer to the same or different <em>values</em> at different points of your examples:</p>\n\n<ul>\n<li><p>In the first example, <code>letgo</code> <strong>rebinds</strong> <code>df</code> to another value, because <code>df.drop</code> returns a new <code>DataFrame</code> unless you set the argument <code>inplace = True</code> (<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html\" rel=\"noreferrer\">see doc</a>). That means that the name <code>df</code> (local to the <code>letgo</code> function), which was referring to the value of <code>a</code>, is now referring to a new value, here the <code>df.drop</code> return value. The value <code>a</code> is referring to still exists and hasn't changed.</p></li>\n<li><p>In the second example, <code>letgo2</code> <strong>mutates</strong> <code>x</code>, without rebinding it, which is why <code>xx</code> is modified by <code>letgo2</code>. Unlike the previous example, here the local name <code>x</code> always refers to the value the name <code>xx</code> is referring to, and changes that value <em>in place</em>, which is why the value <code>xx</code> is referring to has changed.</p></li>\n<li><p>In the third example, <code>letgo3</code> <strong>rebinds</strong> <code>x</code> to a new <code>np.array</code>. That causes the name <code>x</code>, local to <code>letgo3</code> and previously referring to the value of <code>xx</code>, to now refer to another value, the new <code>np.array</code>. The value <code>xx</code> is referring to hasn't changed.</p></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 65561,
                        "reputation": 76465,
                        "user_id": 192839,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/GNPsv.jpg?s=256",
                        "display_name": "Mike Graham",
                        "link": "https://stackoverflow.com/users/192839/mike-graham"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1470918089,
                    "creation_date": 1470918089,
                    "answer_id": 38896256,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The question isn't PBV vs. PBR. These names only cause confusion in a language like Python; they were invented for languages that work like C or like Fortran (as the quintessential PBV and PBR languages). It is true, but not enlightening, that Python always passes by value. The question here is whether the value itself is mutated or whether you get a new value. Pandas usually errs on the side of the latter.</p>\n\n<p><a href=\"http://nedbatchelder.com/text/names.html\" rel=\"noreferrer\">http://nedbatchelder.com/text/names.html</a> explains very well what Python's system of names is.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8986270,
                        "reputation": 9,
                        "user_id": 6699751,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-ZoUFh_PPD8A/AAAAAAAAAAI/AAAAAAAANk0/WMurDH9ctGQ/photo.jpg?sz=256",
                        "display_name": "zosan",
                        "link": "https://stackoverflow.com/users/6699751/zosan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1470917182,
                    "creation_date": 1470917182,
                    "answer_id": 38895926,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>you need to make 'a' global at the start of the function otherwise it is a local variable and does not change the 'a' in the main code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 477309,
                        "reputation": 13470,
                        "user_id": 888731,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/n0Qhe.png?s=256",
                        "display_name": "Israel Unterman",
                        "link": "https://stackoverflow.com/users/888731/israel-unterman"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1470916945,
                    "creation_date": 1470916945,
                    "answer_id": 38895844,
                    "question_id": 38895768,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the doc for drop:</p>\n\n<blockquote>\n  <p>Return new object with labels in requested axis removed.</p>\n</blockquote>\n\n<p>So a new dataframe is created. The original has not changed.</p>\n\n<p>But as for all objects in python, the data frame is passed to the function by reference.</p>\n"
                }
            ]
        },
        {
            "5832856": [
                {
                    "owner": {
                        "account_id": 7977492,
                        "reputation": 827,
                        "user_id": 6142313,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/743ee9da39f5b4bb23bceb5aa361abaf?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Q. Qiao",
                        "link": "https://stackoverflow.com/users/6142313/q-qiao"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1644952541,
                    "last_edit_date": 1644952541,
                    "creation_date": 1644942596,
                    "answer_id": 71130021,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>def get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        lines = []\n        for i, line in enumerate(fp):\n            if i % n == 0 and i != 0:\n                yield lines \n                lines = []\n            lines.append(line)\n    if lines:\n        yield lines \n\nfor lines in b():\n    print(lines)\n</code></pre>\n<p>It is simpler with islice:</p>\n<pre><code>from itertools import islice\n\ndef get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        while True:\n            lines = list(islice(fp, n))\n            if lines:\n                yield lines\n            else:\n                break\n\nfor lines in get_lines_iterator(filename):\n    print(lines)\n</code></pre>\n<p>Another way to do this:</p>\n<pre><code>from itertools import islice\n\ndef get_lines_iterator(filename, n=10):\n    with open(filename) as fp:\n        for line in fp:\n            yield [line] + list(islice(fp, n-1))\n           \n\nfor lines in get_lines_iterator(filename):\n    print(lines)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413078,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 23,
                    "last_activity_date": 1624046576,
                    "last_edit_date": 1624046576,
                    "creation_date": 1304203767,
                    "answer_id": 5845141,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A file object is an iterator over lines in Python. To iterate over the file N lines at a time, you could use <code>grouper()</code> function in the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">Itertools Recipes</a> section of the documenation. (Also see <a href=\"https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks/434411#434411\">What is the most \u201cpythonic\u201d way to iterate over a list in chunks?</a>):</p>\n<pre><code>try:\n   from itertools import izip_longest\nexcept ImportError:  # Python 3\n    from itertools import zip_longest as izip_longest\n\ndef grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(*args, fillvalue=fillvalue)\n</code></pre>\n<h3>Example</h3>\n<pre><code>with open(filename) as f:\n     for lines in grouper(f, N, ''):\n         assert len(lines) == N\n         # process N lines here\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1914531,
                        "reputation": 27487,
                        "user_id": 1727392,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/KP9Ia.jpg?s=256",
                        "display_name": "duhaime",
                        "link": "https://stackoverflow.com/users/1727392/duhaime"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1605790961,
                    "last_edit_date": 1605790961,
                    "creation_date": 1530189597,
                    "answer_id": 51083202,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I needed to read in n lines at a time from files for extremely large files (~1TB) and wrote a <a href=\"https://github.com/duhaime/big-read\" rel=\"nofollow noreferrer\">simple package</a> to do this. If you <code>pip install bigread</code>, you can do:</p>\n<pre><code>from bigread import Reader\n\nstream = Reader(file='large.txt', block_size=10) \nfor i in stream:\n  print(i)\n</code></pre>\n<p><code>block_size</code> is the number of lines to read at a time.</p>\n<hr />\n<p>This package is no longer maintained. I now find it best to use:</p>\n<pre><code>with open('big.txt') as f:\n  for line_idx, line in enumerate(f):\n    print(line)\n</code></pre>\n<p>If you need a memory of previous lines, just store them in a list. If you need to know future lines to decide what to do with the current line, store the current line in a list until you get to that future line...</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2947209,
                        "reputation": 1,
                        "user_id": 5543770,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/GL6DN.jpg?s=256",
                        "display_name": "Haromn",
                        "link": "https://stackoverflow.com/users/5543770/haromn"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1534929204,
                    "last_edit_date": 1534929204,
                    "creation_date": 1534836171,
                    "answer_id": 51943556,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I was looking for an answer to the same question, but did not really like any of the proposed stuff earlier, so I ended up writing this slightly ugly thing that does exactly what I wanted <s>without using strange libraries</s>.</p>\n\n<pre><code>def test(filename, N):\n    with open(filename, 'r') as infile:\n        lines = []\n        for line in infile:\n            line = line.strip()\n            if len(lines) &lt; N-1:\n                lines.append(line)\n            else:\n                lines.append(line)\n                res = lines\n                lines = []\n            yield res\n        else:\n            if len(lines) != 0:\n                yield lines\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3509551,
                        "reputation": 41,
                        "user_id": 2934228,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e89ed8b49894eda8b9c7ad34d5bed104?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "ChrisEisenhart",
                        "link": "https://stackoverflow.com/users/2934228/chriseisenhart"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1509575887,
                    "last_edit_date": 1509575887,
                    "creation_date": 1509573100,
                    "answer_id": 47064280,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you can read the full file in ahead of time; </p>\n\n<pre><code>infile = open(filename, 'r').readlines()\nmy_block = [line.strip() for line in infile[:N]]\ncur_pos = 0\nwhile my_block:\n    print (my_block)\n    cur_pos +=1\n    my_block = [line.strip() for line in infile[cur_pos*N:(cur_pos +1)*N]]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 221752,
                        "reputation": 607,
                        "user_id": 479917,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6655857cdc68adaba20c04289edaeca5?s=256&d=identicon&r=PG",
                        "display_name": "Anatolij",
                        "link": "https://stackoverflow.com/users/479917/anatolij"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1508385316,
                    "last_edit_date": 1508385316,
                    "creation_date": 1304085067,
                    "answer_id": 5832935,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This code will work with any count of lines in file and any <code>N</code>. If you have <code>1100 lines</code> in file and <code>N = 200</code>, you will get 5 times to process chunks of 200 lines and one time with 100 lines.</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    lines = []\n    for line in infile:\n        lines.append(line)\n        if len(lines) &gt;= N:\n            process(lines)\n            lines = []\n    if len(lines) &gt; 0:\n        process(lines)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10661,
                        "reputation": 7614,
                        "user_id": 20247,
                        "user_type": "registered",
                        "accept_rate": 64,
                        "profile_image": "https://www.gravatar.com/avatar/f4f1b95e46356ae5d1a8d842aa4dba6c?s=256&d=identicon&r=PG",
                        "display_name": "Martin Thurau",
                        "link": "https://stackoverflow.com/users/20247/martin-thurau"
                    },
                    "is_accepted": true,
                    "score": 50,
                    "last_activity_date": 1304217102,
                    "last_edit_date": 1304217102,
                    "creation_date": 1304085311,
                    "answer_id": 5832971,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One solution would be a list comprehension and the slice operator:</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    lines = [line for line in infile][:N]\n</code></pre>\n\n<p>After this <code>lines</code> is tuple of lines. However, this would load the complete file into memory. If you don't want this (i.e. if the file could be really large) there is another solution using a generator expression and <a href=\"http://docs.python.org/library/itertools.html#itertools.islice\" rel=\"noreferrer\"><code>islice</code></a> from the itertools package:</p>\n\n<pre><code>from itertools import islice\nwith open(filename, 'r') as infile:\n    lines_gen = islice(infile, N)\n</code></pre>\n\n<p><code>lines_gen</code> is a generator object, that gives you each line of the file and can be used in a loop like this:</p>\n\n<pre><code>for line in lines_gen:\n    print line\n</code></pre>\n\n<p>Both solutions give you up to N lines (or fewer, if the file doesn't have that much).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3353,
                        "reputation": 39273,
                        "user_id": 4834,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/6a04e124482c3750617f8dacde3388ce?s=256&d=identicon&r=PG",
                        "display_name": "quamrana",
                        "link": "https://stackoverflow.com/users/4834/quamrana"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1304154991,
                    "last_edit_date": 1304154991,
                    "creation_date": 1304085051,
                    "answer_id": 5832931,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You may have to do something as simple as:</p>\n\n<pre><code>lines = [infile.readline() for _ in range(N)]\n</code></pre>\n\n<p><strong>Update</strong>  after comments:</p>\n\n<pre><code>lines = [line for line in [infile.readline() for _ in range(N)] if len(line) ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 314876,
                        "reputation": 2199,
                        "user_id": 630321,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e2fcad865809b4aec3dd1097eb306d03?s=256&d=identicon&r=PG",
                        "display_name": "Konstant",
                        "link": "https://stackoverflow.com/users/630321/konstant"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1304085292,
                    "last_edit_date": 1495542317,
                    "creation_date": 1304085292,
                    "answer_id": 5832968,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you should be using chunks instead of specifying the number of lines to read. It makes your code more robust and generic. Even if the lines are big, using chunk will upload only the assigned amount of data into memory.</p>\n\n<p>Refer to <a href=\"https://stackoverflow.com/questions/519633/lazy-method-for-reading-big-file-in-python\">this</a> link</p>\n"
                },
                {
                    "owner": {
                        "account_id": 90866,
                        "reputation": 8147,
                        "user_id": 249878,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/50be7ccb1642c90f37be4f14d5767751?s=256&d=identicon&r=PG",
                        "display_name": "yurib",
                        "link": "https://stackoverflow.com/users/249878/yurib"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1304085037,
                    "creation_date": 1304085037,
                    "answer_id": 5832927,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>maybe:  </p>\n\n<pre><code>for x in range(N):\n  lines.append(f.readline())\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 374247,
                        "reputation": 14892,
                        "user_id": 724357,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/560e7baed307950747f2ff0ca2b1a13a?s=256&d=identicon&r=PG",
                        "display_name": "Spencer Rathbun",
                        "link": "https://stackoverflow.com/users/724357/spencer-rathbun"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1304085021,
                    "creation_date": 1304085021,
                    "answer_id": 5832922,
                    "question_id": 5832856,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>How about a for loop?</p>\n\n<pre><code>with open(filename, 'r') as infile:\n    while not EOF:\n        lines = []\n        for i in range(next N lines):\n            lines.append(infile.readline())\n        process(lines)\n</code></pre>\n"
                }
            ]
        },
        {
            "860313": [
                {
                    "owner": {
                        "account_id": 34853,
                        "reputation": 1328,
                        "user_id": 98571,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/63da8564b666876354c0125e767a9273?s=256&d=identicon&r=PG",
                        "display_name": "Nico",
                        "link": "https://stackoverflow.com/users/98571/nico"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1371910384,
                    "last_edit_date": 1371910384,
                    "creation_date": 1242248704,
                    "answer_id": 860430,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Well, SQLAlchemy is divided into different parts, the main core part simply handles the DB, transforming your python built queries into the appropriate SQL language for the underlying DB. Then there is the support for sessions, the orm, and the new declarative syntax.</p>\n\n<p>Looks like SQLObject (I can't say for sure, haven't used it in many years, and even then, only once) skips most of it and does the ORM part straight away. This often makes things easier for simple data (which you can get away with in most cases), but SQLAlchemy allows for more complex db layouts, and get down and dirty with the db if you really need it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 461272,
                        "reputation": 20296,
                        "user_id": 862862,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://i.sstatic.net/BeOcj.jpg?s=256",
                        "display_name": "Tyler Liu",
                        "link": "https://stackoverflow.com/users/862862/tyler-liu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1321037622,
                    "creation_date": 1321037622,
                    "answer_id": 8098592,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Try <a href=\"http://pypi.python.org/pypi/quick_orm\" rel=\"nofollow\">Quick ORM</a>, it is even simpler:</p>\n\n<pre><code>from quick_orm.core import Database\nfrom sqlalchemy import Column, String\n\nclass User(object):\n    __metaclass__ = Database.DefaultMeta\n    name = Column(String(30))\n\nif __name__ == '__main__':\n    database = Database('sqlite://')\n    database.create_tables()\n\n    user = User(name = 'Hello World')\n    database.session.add_then_commit(user)\n\n    user = database.session.query(User).get(1)\n    print 'My name is', user.name\n</code></pre>\n\n<p><a href=\"http://pypi.python.org/pypi/quick_orm\" rel=\"nofollow\">Quick ORM</a> is built upon SQLAlchemy, so we could say that SQLAlchemy could be as simple as SQLObject.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6435,
                        "reputation": 1908,
                        "user_id": 10815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/5099d66b6ea743d01e10be7425d24f44?s=256&d=identicon&r=PG",
                        "display_name": "Joe L.",
                        "link": "https://stackoverflow.com/users/10815/joe-l"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242259369,
                    "last_edit_date": 1242259369,
                    "creation_date": 1242252293,
                    "answer_id": 860667,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Having used SQLObject (and only read about SQLAlchemy), I can say that one of SQLObject's strengths is the ease and simplicity with which you can get things done.  Also, excellent support is provided by the email group (<a href=\"https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss\" rel=\"nofollow noreferrer\">https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss</a>) that gets answers back to you pretty quickly.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 26254,
                        "reputation": 36054,
                        "user_id": 68127,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://i.sstatic.net/XSuO8.jpg?s=256",
                        "display_name": "Jacob Gabrielson",
                        "link": "https://stackoverflow.com/users/68127/jacob-gabrielson"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1242251591,
                    "creation_date": 1242251591,
                    "answer_id": 860616,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The code examples you give aren't apples-to-apples.  The SQLAlchemy version could be pared down a bit:</p>\n\n<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column('id', Integer, primary_key=True)\n    name = Column('name', String)\n    fullname = Column('fullname', String)\n    password = Column('password', String)\n\n    def __repr__(self):\n       return \"\" % (self.name, self.fullname, self.password)\n\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# actually using the ORM isn't too bad..\ned_user = User(name='ed', fullname='Ed Jones', password='edspassword')\nsession.add(ed_user)\n\nour_user = session.query(User).filter_by(name='ed').first()\n\nsession.add_all([\n    User(name='wendy', fullname='Wendy Williams', password='foobar'),\n    User(name='mary', fullname='Mary Contrary', password='xxg527'),\n    User(name='fred', fullname='Fred Flinstone', password='blah')])\n\ned_user.password = 'f8s7ccs'\n\nsession.flush()\n\nfor instance in session.query(User).order_by(User.id):\n    print instance.name, instance.fullname\n\nfor name, fullname in session.query(User.name, User.fullname):\n    print name, fullname\n</code></pre>\n\n<p>You might also find <a href=\"http://elixir.ematia.de/trac/wiki\" rel=\"nofollow noreferrer\">Elixir</a> more like SQLObject (but since I haven't used either, that's just a guess).</p>\n\n<p>Not having used SQLObject at all, I can't comment on what exactly SA does better.  But I have had great experiences with SA, especially when dealing with complicated, real-world, legacy schemas.  It does a good job of coming up with good SQL queries by default, and has lots of ways to tune them.</p>\n\n<p>I've found SQLAlchemy author's <a href=\"http://techspot.zzzeek.org/?p=33\" rel=\"nofollow noreferrer\">elevator pitch</a> to hold up pretty well in practice.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 296559,
                        "reputation": 28580,
                        "user_id": 601581,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/87945c64969674b52fd9412edde91885?s=256&d=identicon&r=PG",
                        "display_name": "Steven",
                        "link": "https://stackoverflow.com/users/601581/steven"
                    },
                    "is_accepted": true,
                    "score": 88,
                    "last_activity_date": 1242251561,
                    "creation_date": 1242251561,
                    "answer_id": 860614,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Well, there is one thing you are missing: the tutorial you mention doesn't \"build\" a complete example, the different snippets of code are not meant to be concatenated into one source file. Rather, they describe the different ways the library can be used. No need to try and do the same thing over and over again yourself.</p>\n\n<p>Leaving out the actually-using-the-orm part from your example, the code could look like this:</p>\n\n<pre><code>from sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, scoped_session\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base(bind=engine)\nSession = scoped_session(sessionmaker(engine))\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    fullname = Column(String)\n    password = Column(String)\n\nBase.metadata.create_all()\n</code></pre>\n\n<p>The \"declarative\" extension takes care of defining the table and mapping it to your class, so you don't need to declare the <code>users_table</code> yourself. The User class will also allow instantiating with keyword arguments, like <code>User(name=\"foo\")</code>, (but not positional arguments though). \nI've also added use of scoped_session, which means you can directly use <code>Session</code> without actually having to instantiate it  (it will instantiate a new session if there isn't already one present in the current thread, or reuse the existing one otherwise)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 26014,
                        "reputation": 5293,
                        "user_id": 67393,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/b72cb6e5656c9541ed9e1a7bf8f06983?s=256&d=identicon&r=PG",
                        "display_name": "Tom Willis",
                        "link": "https://stackoverflow.com/users/67393/tom-willis"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1242248316,
                    "creation_date": 1242248316,
                    "answer_id": 860397,
                    "question_id": 860313,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>you say \"convoluted\".... someone else might say \"flexible\". Sometimes you need it sometimes you don't. Isn't it awesome that you have a choice?</p>\n"
                }
            ]
        },
        {
            "3162271": [
                {
                    "owner": {
                        "account_id": 8221,
                        "reputation": 31219,
                        "user_id": 1502059,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/8e1914b1b81a8160378c298a540b5e00?s=256&d=identicon&r=PG",
                        "display_name": "Nick Bastin",
                        "link": "https://stackoverflow.com/users/1502059/nick-bastin"
                    },
                    "is_accepted": true,
                    "score": 799,
                    "last_activity_date": 1652032329,
                    "last_edit_date": 1652032329,
                    "creation_date": 1278025372,
                    "answer_id": 3162287,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The pythonic way is to use <a href=\"http://docs.python.org/library/functions.html#enumerate\" rel=\"noreferrer\"><code>enumerate</code></a>:</p>\n<pre><code>for idx, item in enumerate(my_list):\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9856555,
                        "reputation": 3728,
                        "user_id": 7300865,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5pzLG.jpg?s=256",
                        "display_name": "Muhammad Faizan Fareed",
                        "link": "https://stackoverflow.com/users/7300865/muhammad-faizan-fareed"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1615928353,
                    "last_edit_date": 1615928353,
                    "creation_date": 1584182011,
                    "answer_id": 60681797,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using zip function we can get both element and index.</p>\n<pre><code>countries = ['Pakistan','India','China','Russia','USA']\n\nfor index, element in zip(range(0,countries),countries):\n\n         print('Index : ',index)\n         print(' Element : ', element,'\\n')\n\noutput : Index : 0 Element : Pakistan ...\n</code></pre>\n<hr />\n<p>See also :</p>\n<p><a href=\"https://www.python.org/dev/peps/pep-0212/\" rel=\"nofollow noreferrer\">Python.org</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 3101067,
                        "reputation": 1369,
                        "user_id": 2625183,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fd0b1d0b0eab2f0ac708fa96ca15570a?s=256&d=identicon&r=PG",
                        "display_name": "Vikram Garg",
                        "link": "https://stackoverflow.com/users/2625183/vikram-garg"
                    },
                    "is_accepted": false,
                    "score": 126,
                    "last_activity_date": 1507378889,
                    "last_edit_date": 1507378889,
                    "creation_date": 1381912479,
                    "answer_id": 19398650,
                    "question_id": 3162271,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Agree with Nick. \nHere is more elaborated code.</p>\n\n<pre><code>#count=0\nfor idx, item in enumerate(list):\n    print item\n    #count +=1\n    #if count % 10 == 0:\n    if (idx+1) % 10 == 0:\n        print 'did ten'\n</code></pre>\n\n<p>I have commented out the count variable in your code.</p>\n"
                }
            ]
        },
        {
            "14573728": [
                {
                    "owner": {
                        "account_id": 933959,
                        "reputation": 4521,
                        "user_id": 963250,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/ea9c34e487f83e05190acf520ba240c2?s=256&d=identicon&r=PG",
                        "display_name": "BenDundee",
                        "link": "https://stackoverflow.com/users/963250/bendundee"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1359433799,
                    "creation_date": 1359433799,
                    "answer_id": 14575672,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I try to use pandas/statsmodels/scipy for my work on a day-to-day basis, but sometimes those packages come up a bit short (LOESS, anybody?). The problem with the RPy module is (last I checked, at least) that it wants a specific version of R that isn't current---my R installation is 2.16 (I think) and RPy wanted 2.14. So either you have to have two parallel installations of R, or you have to downgrade. (If you don't have R installed, then you can just install the correct version of R and use RPy.)</p>\n\n<p>So when I need something that isn't in pandas/statsmodels/scipy I write R scripts, and run them with the <code>subprocess</code> module. This lets me interact with R as little as possible (which I really don't like programming in), but I can still leverage all the stuff that R has that the Python packages don't.</p>\n\n<p>The lesson is that there isn't ever <em>one</em> solution to any problem---you have to assemble a whole bunch of parts that are all useful to you (and maybe write some of your own), in a way that you understand, to solve problems. (R aficionados will disagree, of course!) </p>\n"
                },
                {
                    "owner": {
                        "account_id": 255542,
                        "reputation": 8283,
                        "user_id": 535665,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/272540e56a9b1b5c01fa5ef3c7a91edd?s=256&d=identicon&r=PG",
                        "display_name": "jseabold",
                        "link": "https://stackoverflow.com/users/535665/jseabold"
                    },
                    "is_accepted": true,
                    "score": 42,
                    "last_activity_date": 1359430499,
                    "creation_date": 1359430499,
                    "answer_id": 14575243,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Statsmodels has scipy.stats as a dependency. Scipy.stats has all of the probability distributions and some statistical tests. It's more like library code in the vein of numpy and scipy. Statsmodels on the other hand provides statistical models with a formula framework similar to R and it works with pandas DataFrames. There are also statistical tests, plotting, and plenty of helper functions in statsmodels. Really it depends on what you need, but you definitely don't have to choose one. They have different aims and strengths.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2015601"
                    },
                    "is_accepted": false,
                    "score": -3,
                    "last_activity_date": 1359422006,
                    "creation_date": 1359422006,
                    "answer_id": 14574087,
                    "question_id": 14573728,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think THE statistics package is numpy/scipy. It works also great if you want to plot your data using matplotlib. \nHowever, as far as I know, matplotlib doesn't work with Python 3.x yet.</p>\n"
                }
            ]
        },
        {
            "14262433": [
                {
                    "owner": {
                        "account_id": 7926,
                        "reputation": 5130,
                        "user_id": 13969,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/6c6205448de1b8ad8d5baf0f3416d899?s=256&d=identicon&r=PG",
                        "display_name": "rjurney",
                        "link": "https://stackoverflow.com/users/13969/rjurney"
                    },
                    "is_accepted": false,
                    "score": 72,
                    "last_activity_date": 1714326431,
                    "last_edit_date": 1714326431,
                    "creation_date": 1383376447,
                    "answer_id": 19739768,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><strong>Option 1</strong>: If your datasets are between 1 and 20GB, you should get a workstation with 48GB of RAM. Then Pandas can hold the entire dataset in RAM. I know its not the answer you're looking for here, but doing scientific computing on a notebook with 4GB of RAM isn't reasonable. In 2024 (question is from 2015) I now have a Macbook M3 Max Pro with 128GB of RAM and encourage people to get the RAM they need for their day-to-day work.</p>\n<p><strong>Option 2</strong>: Keep your Pandas, but backed by a distributed system of more than one computer. Pandas uses one or at least few cores. That much data <em>needs multiple cores or GPUs</em> working on it or processing will be SLOW even if it fits in RAM.</p>\n<p>Here are some other solutions that are both multi-core and multi-machine and now easy enough for any Pandas user to employ.</p>\n<ul>\n<li><a href=\"https://www.dask.org/\" rel=\"nofollow noreferrer\">Dask - <em>scale the Python tools you have</em></a> - has an <a href=\"https://docs.dask.org/en/latest/api.html\" rel=\"nofollow noreferrer\">API quite similar to Pandas</a> and can run on multiple machines. I've always had to start my own Dask pids - which can be confusing - so I would recommend using a Platform as a Service (PaaS) like <a href=\"https://www.coiled.io/\" rel=\"nofollow noreferrer\">Coiled</a> to experiment before setting it up on your own machine.</li>\n<li><a href=\"https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html\" rel=\"nofollow noreferrer\">Pandas API on PySpark</a> - this is somewhat mature as of 2024, but your mileage may vary (YMMV). See: <a href=\"https://spark.apache.org/docs/latest/api/python/getting_started/quickstart_ps.html\" rel=\"nofollow noreferrer\">Quickstart</a>.</li>\n<li><a href=\"https://docs.ray.io/en/latest/ray-more-libs/modin/index.html\" rel=\"nofollow noreferrer\">Modin</a> - Pandas on <a href=\"https://www.ray.io/\" rel=\"nofollow noreferrer\">Ray</a>. I haven't used Ray, but a lot of people do and like it.</li>\n<li><a href=\"https://docs.rapids.ai/api/dask-cuda/stable/\" rel=\"nofollow noreferrer\">Dask CUDA</a> - part of NVIDIA <a href=\"https://rapids.ai/\" rel=\"nofollow noreferrer\">RAPIDS</a>, it can employ multiple GPUs on DataFrame compute, including both sophisticated algorithms and things like regular expressions, which is incredibly powerful for scientific computing.</li>\n</ul>\n<p><strong>Option 3</strong>: If you have big data, consider the leading framework for working with big data: <a href=\"https://spark.apache.org/docs/latest/api/python/index.html\" rel=\"nofollow noreferrer\">PySpark</a> See: <a href=\"https://spark.apache.org/docs/latest/api/python/reference/index.html\" rel=\"nofollow noreferrer\">API Reference</a> (keep it open in a tab). You can mix and match <a href=\"https://spark.apache.org/sql/\" rel=\"nofollow noreferrer\">Spark SQL</a> and PySpark's dataflow API, which is really powerful. I wrote a book on how to do this called <a href=\"https://rads.stackoverflow.com/amzn/click/com/1491960116\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Agile Data Science 2.0</a>, and the code is still current.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3540772,
                        "reputation": 173,
                        "user_id": 2957943,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fee11b3bf402fe16b08895f6cac352b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "user2957943",
                        "link": "https://stackoverflow.com/users/2957943/user2957943"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627844799,
                    "creation_date": 1627844799,
                    "answer_id": 68613546,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The parquet file format is ideal for the use case you described.  You can efficiently read in a specific subset of columns with <code>pd.read_parquet(path_to_file, columns=[&quot;foo&quot;, &quot;bar&quot;])</code></p>\n<p><a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html\" rel=\"nofollow noreferrer\">https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 88646,
                        "reputation": 4107,
                        "user_id": 245024,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/99b5bd1dd14297c67f6fb70c1d182bf1?s=256&d=identicon&r=PG",
                        "display_name": "lev",
                        "link": "https://stackoverflow.com/users/245024/lev"
                    },
                    "is_accepted": false,
                    "score": 27,
                    "last_activity_date": 1623401428,
                    "last_edit_date": 1623401428,
                    "creation_date": 1521365439,
                    "answer_id": 49346364,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It is worth mentioning here <a href=\"https://github.com/ray-project/ray\" rel=\"noreferrer\">Ray</a> as well,<br />\nit's a distributed computation framework, that has it's own implementation for pandas in a distributed way.</p>\n<p>Just replace the pandas import, and the code should work as is:</p>\n<pre><code># import pandas as pd\nimport ray.dataframe as pd\n\n# use pd as usual\n</code></pre>\n<p>can read more details here:</p>\n<p><a href=\"https://rise.cs.berkeley.edu/blog/pandas-on-ray/\" rel=\"noreferrer\">https://rise.cs.berkeley.edu/blog/pandas-on-ray/</a></p>\n<hr />\n<p>Update:\nthe part that handles the pandas distribution, has been extracted to the <a href=\"https://github.com/modin-project/modin\" rel=\"noreferrer\">modin</a> project.</p>\n<p>the proper way to use it is now is:</p>\n<pre><code># import pandas as pd\nimport modin.pandas as pd\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2153644,
                        "reputation": 2694,
                        "user_id": 2115409,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://i.sstatic.net/2YEyO.gif?s=256",
                        "display_name": "Private",
                        "link": "https://stackoverflow.com/users/2115409/private"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1611604677,
                    "last_edit_date": 1611604677,
                    "creation_date": 1458765053,
                    "answer_id": 36188131,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>There is now, two years after the question, an 'out-of-core' pandas equivalent: <a href=\"http://dask.pydata.org/en/latest/\" rel=\"noreferrer\">dask</a>. It is excellent! Though it does not support all of pandas functionality, you can get really far with it. Update: in the past two years it has been consistently maintained and there is substantial user community working with Dask.</p>\n<p>And now, four years after the question, there is another high-performance 'out-of-core' pandas equivalent in <a href=\"https://github.com/vaexio/vaex\" rel=\"noreferrer\">Vaex</a>. It &quot;uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).&quot; It can handle data sets of billions of rows and does not store them into memory (making it even possible to do analysis on suboptimal hardware).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 324366,
                        "reputation": 128638,
                        "user_id": 644898,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=256&d=identicon&r=PG",
                        "display_name": "Jeff",
                        "link": "https://stackoverflow.com/users/644898/jeff"
                    },
                    "is_accepted": true,
                    "score": 719,
                    "last_activity_date": 1583958587,
                    "last_edit_date": 1583958587,
                    "creation_date": 1357858642,
                    "answer_id": 14268804,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.</p>\n\n<p>It's worth reading <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables\" rel=\"noreferrer\">the docs</a> and <a href=\"https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc\" rel=\"noreferrer\">late in this thread</a> for several suggestions for how to store your data.</p>\n\n<p>Details which will affect how you store your data, like:<br>\n<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\n\n<ol>\n<li>Size of data, # of rows, columns, types of columns; are you appending\nrows, or just columns? </li>\n<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\n(Giving a toy example could enable us to offer more specific recommendations.)</li>\n<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\n<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\n<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\n<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\n</ol>\n\n<h2>Solution</h2>\n\n<p><em>Ensure you have <a href=\"http://pandas.pydata.org/getpandas.html\" rel=\"noreferrer\">pandas at least <code>0.10.1</code></a> installed.</em></p>\n\n<p>Read <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk\" rel=\"noreferrer\">iterating files chunk-by-chunk</a> and <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries\" rel=\"noreferrer\">multiple table queries</a>.</p>\n\n<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\n(The following is pseudocode.)</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\n# create a store\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n#    this maps your fields to a specific group, and defines \n#    what you want to have as data_columns.\n#    you might want to create a nice class wrapping this\n#    (as you will want to have this map and its inversion)  \ngroup_map = dict(\n    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\n    .....\n    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\nfor g, v in group_map.items():\n    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n</code></pre>\n\n<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\n\n<pre><code>for f in files:\n   # read in the file, additional options may be necessary here\n   # the chunksize is not strictly necessary, you may be able to slurp each \n   # file into memory in which case just eliminate this part of the loop \n   # (you can also change chunksize if necessary)\n   for chunk in pd.read_table(f, chunksize=50000):\n       # we are going to append to each table by group\n       # we are not going to create indexes at this time\n       # but we *ARE* going to create (some) data_columns\n\n       # figure out the field groupings\n       for g, v in group_map.items():\n             # create the frame for this group\n             frame = chunk.reindex(columns = v['fields'], copy = False)    \n\n             # append it\n             store.append(g, frame, index=False, data_columns = v['dc'])\n</code></pre>\n\n<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\n\n<p>This is how you get columns and create new ones:</p>\n\n<pre><code>frame = store.select(group_that_I_want)\n# you can optionally specify:\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n#     select only say 3 out of the 20 columns in this sub-table)\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n# limit the columns in this new_group to be only NEW ones\n# (e.g. so you don't overlap from the other tables)\n# add this info to the group_map\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n</code></pre>\n\n<p>When you are ready for post_processing:</p>\n\n<pre><code># This may be a bit tricky; and depends what you are actually doing.\n# I may need to modify this function to be a bit more general:\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\n</code></pre>\n\n<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\n\n<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\n</code></pre>\n\n<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\n\n<p>You also might want to:</p>\n\n<ul>\n<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\n<li>indexes on certain data columns (makes row-subsetting much faster).</li>\n<li>enable compression.</li>\n</ul>\n\n<p>Let me know when you have questions!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11301259,
                        "reputation": 18900,
                        "user_id": 8291949,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/a7pBo.gif?s=256",
                        "display_name": "wp78de",
                        "link": "https://stackoverflow.com/users/8291949/wp78de"
                    },
                    "is_accepted": false,
                    "score": 37,
                    "last_activity_date": 1578503244,
                    "last_edit_date": 1578503244,
                    "creation_date": 1511322940,
                    "answer_id": 47426521,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As noted by others, after some years an 'out-of-core' pandas equivalent has emerged: <a href=\"http://dask.pydata.org/en/latest/\" rel=\"noreferrer\">dask</a>. Though dask is not a drop-in replacement of pandas and all of its functionality it stands out for several reasons:</p>\n\n<p>Dask is a flexible parallel computing library for analytic computing that is optimized for dynamic task scheduling for interactive computational workloads of\n\u201cBig Data\u201d collections like parallel arrays, dataframes, and lists that extend common interfaces like NumPy, Pandas, or Python iterators to larger-than-memory or distributed environments and scales from laptops to clusters.</p>\n\n<blockquote>\n  <p>Dask emphasizes the following virtues:  </p>\n  \n  <ul>\n  <li>Familiar: Provides parallelized NumPy array and Pandas DataFrame    objects</li>\n  <li>Flexible: Provides a task scheduling interface for more custom workloads and integration with other projects.</li>\n  <li>Native: Enables distributed computing in Pure Python with access to the    PyData stack.</li>\n  <li>Fast: Operates with low overhead, low latency, and    minimal serialization necessary for fast numerical algorithms  </li>\n  <li>Scales up: Runs resiliently on clusters with 1000s of cores   Scales    down: Trivial to set up and run on a laptop in a single process  </li>\n  <li>Responsive: Designed with interactive computing in mind it provides    rapid feedback and diagnostics to aid humans</li>\n  </ul>\n</blockquote>\n\n<p>and to add a simple code sample:</p>\n\n<pre><code>import dask.dataframe as dd\ndf = dd.read_csv('2015-*-*.csv')\ndf.groupby(df.user_id).value.mean().compute()\n</code></pre>\n\n<p>replaces some pandas code like this:</p>\n\n<pre><code>import pandas as pd\ndf = pd.read_csv('2015-01-01.csv')\ndf.groupby(df.user_id).value.mean()\n</code></pre>\n\n<p>and, especially noteworthy, provides through the <code>concurrent.futures</code> interface a general infrastructure for the submission of custom tasks:</p>\n\n<pre><code>from dask.distributed import Client\nclient = Client('scheduler:port')\n\nfutures = []\nfor fn in filenames:\n    future = client.submit(load, fn)\n    futures.append(future)\n\nsummary = client.submit(summarize, futures)\nsummary.result()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8725518,
                        "reputation": 31,
                        "user_id": 6527261,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6682bdeeda814494978b73d63c0f4174?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "TiRoX",
                        "link": "https://stackoverflow.com/users/6527261/tirox"
                    },
                    "is_accepted": false,
                    "score": -2,
                    "last_activity_date": 1578492314,
                    "creation_date": 1578492314,
                    "answer_id": 59647574,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>At the moment I am working \"like\" you, just on a lower scale, which is why I don't have a PoC for my suggestion.</p>\n\n<p>However, I seem to find success in using pickle as caching system and outsourcing execution of various functions into files - executing these files from my commando / main file; For example i use a prepare_use.py to convert object types, split a data set into test, validating and prediction data set.</p>\n\n<p>How does your caching with pickle work?\nI use strings in order to access pickle-files that are dynamically created, depending on which parameters and data sets were passed (with that i try to capture and determine if the program was already run, using .shape for data set, dict for passed parameters). \nRespecting these measures, i get a String to try to find and read a .pickle-file and can, if found, skip processing time in order to jump to the execution i am working on right now.</p>\n\n<p>Using databases I encountered similar problems, which is why i found joy in using this solution, however - there are many constraints for sure - for example storing huge pickle sets due to redundancy.\nUpdating a table from before to after a transformation can be done with proper indexing - validating information opens up a whole other book (I tried consolidating crawled rent data and stopped using a database after 2 hours basically - as I would have liked to jump back after every transformation process)</p>\n\n<p>I hope my 2 cents help you in some way.</p>\n\n<p>Greetings.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2730429,
                        "reputation": 3503,
                        "user_id": 2354344,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/laaX5.jpg?s=256",
                        "display_name": "Rob",
                        "link": "https://stackoverflow.com/users/2354344/rob"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1559554850,
                    "creation_date": 1559554850,
                    "answer_id": 56424715,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I'd like to point out the Vaex package.</p>\n\n<blockquote>\n  <p>Vaex is a python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. It can calculate statistics such as mean, sum, count, standard deviation etc, on an N-dimensional grid up to a billion (10<sup>9</sup>) objects/rows per second. Visualization is done using histograms, density plots and 3d volume rendering, allowing interactive exploration of big data. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).</p>\n</blockquote>\n\n<p>Have a look at the documentation: <a href=\"https://vaex.readthedocs.io/en/latest/\" rel=\"noreferrer\">https://vaex.readthedocs.io/en/latest/</a>\nThe API is very close to the API of pandas.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1675347,
                        "reputation": 3296,
                        "user_id": 1541036,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/c059052ebdaaedf2d39f62682b758042?s=256&d=identicon&r=PG",
                        "display_name": "ytsaig",
                        "link": "https://stackoverflow.com/users/1541036/ytsaig"
                    },
                    "is_accepted": false,
                    "score": 55,
                    "last_activity_date": 1541227884,
                    "last_edit_date": 1541227884,
                    "creation_date": 1490507985,
                    "answer_id": 43025589,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One trick I found helpful for <strong>large data</strong> use cases is to reduce the volume of the data by reducing float precision to 32-bit. It's not applicable in all cases, but in many applications 64-bit precision is overkill and the 2x memory savings are worth it. To make an obvious point even more obvious:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(int(1e8), 5))\n&gt;&gt;&gt; df.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float64(5)\nmemory usage: 3.7 GB\n\n&gt;&gt;&gt; df.astype(np.float32).info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 100000000 entries, 0 to 99999999\nData columns (total 5 columns):\n...\ndtypes: float32(5)\nmemory usage: 1.9 GB\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5873328,
                        "reputation": 599,
                        "user_id": 4624988,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e3a961891af636a68cecd66058f2fd08?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "timpjohns",
                        "link": "https://stackoverflow.com/users/4624988/timpjohns"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1475595176,
                    "creation_date": 1475595176,
                    "answer_id": 39856364,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I recently came across a similar issue. I found simply reading the data in chunks and appending it as I write it in chunks to the same csv works well. My problem was adding a date column based on information in another table, using the value of certain columns as follows. This may help those confused by dask and hdf5 but more familiar with pandas like myself. </p>\n\n<pre><code>def addDateColumn():\n\"\"\"Adds time to the daily rainfall data. Reads the csv as chunks of 100k \n   rows at a time and outputs them, appending as needed, to a single csv. \n   Uses the column of the raster names to get the date.\n\"\"\"\n    df = pd.read_csv(pathlist[1]+\"CHIRPS_tanz.csv\", iterator=True, \n                     chunksize=100000) #read csv file as 100k chunks\n\n    '''Do some stuff'''\n\n    count = 1 #for indexing item in time list \n    for chunk in df: #for each 100k rows\n        newtime = [] #empty list to append repeating times for different rows\n        toiterate = chunk[chunk.columns[2]] #ID of raster nums to base time\n        while count &lt;= toiterate.max():\n            for i in toiterate: \n                if i ==count:\n                    newtime.append(newyears[count])\n            count+=1\n        print \"Finished\", str(chunknum), \"chunks\"\n        chunk[\"time\"] = newtime #create new column in dataframe based on time\n        outname = \"CHIRPS_tanz_time2.csv\"\n        #append each output to same csv, using no header\n        chunk.to_csv(pathlist[2]+outname, mode='a', header=None, index=None)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 289393,
                        "reputation": 8451,
                        "user_id": 590335,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://www.gravatar.com/avatar/3a49832e1534f2aa5589a85bdc115caa?s=256&d=identicon&r=PG",
                        "display_name": "Ophir Yoktan",
                        "link": "https://stackoverflow.com/users/590335/ophir-yoktan"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1430198541,
                    "creation_date": 1430198541,
                    "answer_id": 29910919,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>One more variation</p>\n\n<p>Many of the operations done in pandas can also be done as a db query (sql, mongo)</p>\n\n<p>Using a RDBMS or mongodb allows you to perform some of the aggregations in the DB Query (which is optimized for large data, and uses cache and indexes efficiently)</p>\n\n<p>Later, you can perform post processing using pandas.</p>\n\n<p>The advantage of this method is that you gain the DB optimizations for working with large data, while still defining the logic in a high level declarative syntax - and not having to deal with the details of deciding what to do in memory and what to do out of core.</p>\n\n<p>And although the query language and pandas are different, it's usually not complicated to translate part of the logic from one to another.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2871409,
                        "reputation": 4643,
                        "user_id": 2464684,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/36aa6139ddbdfed093169c9f6ca98a7b?s=256&d=identicon&r=PG",
                        "display_name": "chishaku",
                        "link": "https://stackoverflow.com/users/2464684/chishaku"
                    },
                    "is_accepted": false,
                    "score": 66,
                    "last_activity_date": 1417644580,
                    "creation_date": 1417644580,
                    "answer_id": 27282644,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I know this is an old thread but I think the <a href=\"https://github.com/ContinuumIO/blaze\">Blaze</a> library is worth checking out.  It's built for these types of situations.</p>\n\n<p><strong>From the docs:</strong></p>\n\n<p>Blaze extends the usability of NumPy and Pandas to distributed and out-of-core computing. Blaze provides an interface similar to that of the NumPy ND-Array or Pandas DataFrame but maps these familiar interfaces onto a variety of other computational engines like Postgres or Spark.</p>\n\n<p><strong>Edit:</strong> By the way, it's supported by ContinuumIO and Travis Oliphant, author of NumPy.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4925053,
                        "reputation": 175,
                        "user_id": 3966500,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c03d64541eb5fa3cffc9e8d9ba3ff9ee?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Golf Monkey",
                        "link": "https://stackoverflow.com/users/3966500/golf-monkey"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1412881636,
                    "creation_date": 1412881636,
                    "answer_id": 26286140,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Consider <a href=\"http://www.ruffus.org.uk/\" rel=\"noreferrer\">Ruffus</a> if you go the simple path of creating a data pipeline which is broken down into multiple smaller files. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1814175,
                        "reputation": 1021,
                        "user_id": 1649635,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://i.sstatic.net/dn299.png?s=256",
                        "display_name": "brian_the_bungler",
                        "link": "https://stackoverflow.com/users/1649635/brian-the-bungler"
                    },
                    "is_accepted": false,
                    "score": 60,
                    "last_activity_date": 1408024241,
                    "last_edit_date": 1408024241,
                    "creation_date": 1357942312,
                    "answer_id": 14287518,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the case for pymongo.  I have also prototyped using sql server, sqlite, HDF, ORM (SQLAlchemy) in python.  First and foremost pymongo is a document based DB, so each person would be a document (<code>dict</code> of attributes).  Many people form a collection and you can have many collections (people, stock market, income).</p>\n\n<p>pd.dateframe -> pymongo Note: I use the <code>chunksize</code> in <code>read_csv</code> to keep it to 5 to 10k records(pymongo drops the socket if larger)</p>\n\n<pre><code>aCollection.insert((a[1].to_dict() for a in df.iterrows()))\n</code></pre>\n\n<p>querying: gt = greater than...</p>\n\n<pre><code>pd.DataFrame(list(mongoCollection.find({'anAttribute':{'$gt':2887000, '$lt':2889000}})))\n</code></pre>\n\n<p><code>.find()</code> returns an iterator so I commonly use <code>ichunked</code> to chop into smaller iterators.  </p>\n\n<p>How about a join since I normally get 10 data sources to paste together:</p>\n\n<pre><code>aJoinDF = pandas.DataFrame(list(mongoCollection.find({'anAttribute':{'$in':Att_Keys}})))\n</code></pre>\n\n<p>then (in my case sometimes I have to agg on <code>aJoinDF</code> first before its \"mergeable\".)</p>\n\n<pre><code>df = pandas.merge(df, aJoinDF, on=aKey, how='left')\n</code></pre>\n\n<p>And you can then write the new info to your main collection via the update method below. (logical collection vs physical datasources).</p>\n\n<pre><code>collection.update({primarykey:foo},{key:change})\n</code></pre>\n\n<p>On smaller lookups, just denormalize.  For example, you have code in the document and you just add the field code text and do a <code>dict</code> lookup as you create documents.</p>\n\n<p>Now you have a nice dataset based around a person, you can unleash your logic on each case and make more attributes. Finally you can read into pandas your 3 to memory max key indicators and do pivots/agg/data exploration.  This works for me for 3 million records with numbers/big text/categories/codes/floats/...</p>\n\n<p>You can also use the two methods built into MongoDB (MapReduce and aggregate framework). <a href=\"http://docs.mongodb.org/manual/tutorial/aggregation-examples/\">See here for more info about the aggregate framework</a>, as it seems to be easier than MapReduce and looks handy for quick aggregate work.  Notice I didn't need to define my fields or relations, and I can add items to a document.  At the current state of the rapidly changing numpy, pandas, python toolset, MongoDB helps me just get to work :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2047611,
                        "reputation": 7022,
                        "user_id": 1827356,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/21f270a4064c6c6721b6649c344f792f?s=256&d=identicon&r=PG",
                        "display_name": "user1827356",
                        "link": "https://stackoverflow.com/users/1827356/user1827356"
                    },
                    "is_accepted": false,
                    "score": 169,
                    "last_activity_date": 1387812087,
                    "last_edit_date": 1387812087,
                    "creation_date": 1387482408,
                    "answer_id": 20690383,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think the answers above are missing a simple approach that I've found very useful. </p>\n\n<p>When I have a file that is too large to load in memory, I break up the file into multiple smaller files (either by row or cols)</p>\n\n<p>Example: In case of 30 days worth of trading data of ~30GB size, I break it into a file per day of ~1GB size. I subsequently process each file separately and aggregate results at the end</p>\n\n<p>One of the biggest advantages is that it allows parallel processing of the files (either multiple threads or processes)</p>\n\n<p>The other advantage is that file manipulation (like adding/removing dates in the example) can be accomplished by regular shell commands, which is not be possible in more advanced/complicated file formats</p>\n\n<p>This approach doesn't cover all scenarios, but is very useful in a lot of them</p>\n"
                },
                {
                    "owner": {
                        "account_id": 91333,
                        "reputation": 2037,
                        "user_id": 250839,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/968afbf6585bc7fe0db62bafd234fb07?s=256&d=identicon&r=PG",
                        "display_name": "Johann Hibschman",
                        "link": "https://stackoverflow.com/users/250839/johann-hibschman"
                    },
                    "is_accepted": false,
                    "score": 50,
                    "last_activity_date": 1363966687,
                    "last_edit_date": 1363966687,
                    "creation_date": 1363900770,
                    "answer_id": 15558350,
                    "question_id": 14262433,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I spotted this a little late, but I work with a similar problem (mortgage prepayment models). My solution has been to skip the pandas HDFStore layer and use straight pytables. I save each column as an individual HDF5 array in my final file.</p>\n\n<p>My basic workflow is to first get a CSV file from the database. I gzip it, so it's not as huge. Then I convert that to a row-oriented HDF5 file, by iterating over it in python, converting each row to a real data type, and writing it to a HDF5 file. That takes some tens of minutes, but it doesn't use any memory, since it's only operating row-by-row. Then I \"transpose\" the row-oriented HDF5 file into a column-oriented HDF5 file.</p>\n\n<p>The table transpose looks like:</p>\n\n<pre><code>def transpose_table(h_in, table_path, h_out, group_name=\"data\", group_path=\"/\"):\n    # Get a reference to the input data.\n    tb = h_in.getNode(table_path)\n    # Create the output group to hold the columns.\n    grp = h_out.createGroup(group_path, group_name, filters=tables.Filters(complevel=1))\n    for col_name in tb.colnames:\n        logger.debug(\"Processing %s\", col_name)\n        # Get the data.\n        col_data = tb.col(col_name)\n        # Create the output array.\n        arr = h_out.createCArray(grp,\n                                 col_name,\n                                 tables.Atom.from_dtype(col_data.dtype),\n                                 col_data.shape)\n        # Store the data.\n        arr[:] = col_data\n    h_out.flush()\n</code></pre>\n\n<p>Reading it back in then looks like:</p>\n\n<pre><code>def read_hdf5(hdf5_path, group_path=\"/data\", columns=None):\n    \"\"\"Read a transposed data set from a HDF5 file.\"\"\"\n    if isinstance(hdf5_path, tables.file.File):\n        hf = hdf5_path\n    else:\n        hf = tables.openFile(hdf5_path)\n\n    grp = hf.getNode(group_path)\n    if columns is None:\n        data = [(child.name, child[:]) for child in grp]\n    else:\n        data = [(child.name, child[:]) for child in grp if child.name in columns]\n\n    # Convert any float32 columns to float64 for processing.\n    for i in range(len(data)):\n        name, vec = data[i]\n        if vec.dtype == np.float32:\n            data[i] = (name, vec.astype(np.float64))\n\n    if not isinstance(hdf5_path, tables.file.File):\n        hf.close()\n    return pd.DataFrame.from_items(data)\n</code></pre>\n\n<p>Now, I generally run this on a machine with a ton of memory, so I may not be careful enough with my memory usage. For example, by default the load operation reads the whole data set.</p>\n\n<p>This generally works for me, but it's a bit clunky, and I can't use the fancy pytables magic.</p>\n\n<p>Edit: The real advantage of this approach, over the array-of-records pytables default, is that I can then load the data into R using h5r, which can't handle tables. Or, at least, I've been unable to get it to load heterogeneous tables.</p>\n"
                }
            ]
        },
        {
            "4915361": [
                {
                    "owner": {
                        "account_id": 80066,
                        "reputation": 1886,
                        "user_id": 424554,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/mojyk.jpg?s=256",
                        "display_name": "screenglow",
                        "link": "https://stackoverflow.com/users/424554/screenglow"
                    },
                    "is_accepted": false,
                    "score": 125,
                    "last_activity_date": 1727815620,
                    "last_edit_date": 1727815620,
                    "creation_date": 1362035270,
                    "answer_id": 15129556,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h3>Python 2:</h3>\n<ul>\n<li><p><code>raw_input()</code> takes exactly what the user typed and passes it back as a string.</p>\n</li>\n<li><p><code>input()</code> first takes the <code>raw_input()</code> and then performs an <code>eval()</code> on it as well.</p>\n</li>\n</ul>\n<p>The main difference is that <code>input()</code> expects a syntactically correct python statement where <code>raw_input()</code> does not.</p>\n<h3>Python 3:</h3>\n<ul>\n<li><code>raw_input()</code> was renamed to <code>input()</code> so now <code>input()</code> returns the exact string.</li>\n<li>Old <code>input()</code> was removed.</li>\n</ul>\n<p>If you want to use the old <code>input()</code>, meaning you need to evaluate a user input as a python statement, you have to do it manually by using <code>eval(input())</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2182835,
                        "reputation": 313,
                        "user_id": 9371011,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6ff8901c388adaa7ca9cef2545056072?s=256&d=identicon&r=PG",
                        "display_name": "Josef Klotzner",
                        "link": "https://stackoverflow.com/users/9371011/josef-klotzner"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1648649928,
                    "last_edit_date": 1648649928,
                    "creation_date": 1550246475,
                    "answer_id": 54712937,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If You want to ensure, that your code is running with python2 and python3, add <code>input()</code> function at the beginning of your script:</p>\n<pre><code>from sys import version_info\nif version_info.major == 3:\n    pass\nelif version_info.major == 2:\n    try:\n        input = raw_input\n    except NameError:\n        pass\nelse:\n    print (&quot;Unknown python version - input function not safe&quot;)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599168,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 455,
                    "last_activity_date": 1586028898,
                    "last_edit_date": 1586028898,
                    "creation_date": 1297018405,
                    "answer_id": 4915366,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The difference is that <code>raw_input()</code> does not exist in Python 3.x, while <code>input()</code> does.  Actually, the old <code>raw_input()</code> has been renamed to <code>input()</code>, and the old <code>input()</code> is gone, but can easily be simulated by using <code>eval(input())</code>.  (Remember that <code>eval()</code> is evil. Try to use safer ways of parsing your input if possible.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6246195,
                        "reputation": 1016,
                        "user_id": 4858016,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hf8Zy.jpg?s=256",
                        "display_name": "Rubal",
                        "link": "https://stackoverflow.com/users/4858016/rubal"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1484304808,
                    "last_edit_date": 1484304808,
                    "creation_date": 1434401575,
                    "answer_id": 30854786,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'd like to add a little more detail to the explanation provided by everyone for the <strong>python 2 users</strong>. <code>raw_input()</code>, which, by now, you know that evaluates what ever data the user enters as a string. This means that python doesn't try to even understand the entered data again. All it will consider is that the entered data will be string, whether or not it is an actual string or int or anything. </p>\n\n<p>While <code>input()</code> on the other hand tries to understand the data entered by the user. So the input like <code>helloworld</code> would even show the error as '<code>helloworld is undefined</code>'. </p>\n\n<p>In conclusion, for <strong>python 2</strong>, to enter a string too you need to enter it like '<code>helloworld</code>' which is the common structure used in python to use strings. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 5462927,
                        "reputation": 910,
                        "user_id": 4344438,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/WxImb.png?s=256",
                        "display_name": "hackwithharsha",
                        "link": "https://stackoverflow.com/users/4344438/hackwithharsha"
                    },
                    "is_accepted": false,
                    "score": 31,
                    "last_activity_date": 1468443213,
                    "last_edit_date": 1468443213,
                    "creation_date": 1451491305,
                    "answer_id": 34532864,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Python 3, <code>raw_input()</code> doesn't exist which was already mentioned by Sven.</p>\n\n<p>In Python 2, the <code>input()</code> function evaluates your input.</p>\n\n<p><strong>Example:</strong> </p>\n\n<pre><code>name = input(\"what is your name ?\")\nwhat is your name ?harsha\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#0&gt;\", line 1, in &lt;module&gt;\n    name = input(\"what is your name ?\")\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'harsha' is not defined\n</code></pre>\n\n<p>In the example above, Python 2.x is trying to evaluate harsha as a variable rather than a string. To avoid that, we can use double quotes around our input like \"harsha\":</p>\n\n<pre><code>&gt;&gt;&gt; name = input(\"what is your name?\")\nwhat is your name?\"harsha\"\n&gt;&gt;&gt; print(name)\nharsha\n</code></pre>\n\n<p><strong>raw_input()</strong></p>\n\n<p>The raw_input()` function doesn't evaluate, it will just read whatever you enter.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>name = raw_input(\"what is your name ?\")\nwhat is your name ?harsha\n&gt;&gt;&gt; name\n'harsha'\n</code></pre>\n\n<p><strong>Example:</strong> </p>\n\n<pre><code> name = eval(raw_input(\"what is your name?\"))\nwhat is your name?harsha\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n    name = eval(raw_input(\"what is your name?\"))\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'harsha' is not defined\n</code></pre>\n\n<p>In example above, I was just trying to evaluate the user input with the <code>eval</code> function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 192844,
                        "reputation": 40230,
                        "user_id": 434217,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/7f1ae3f14fd5b87c2c3f7b36014e185c?s=256&d=identicon&r=PG",
                        "display_name": "Thomas K",
                        "link": "https://stackoverflow.com/users/434217/thomas-k"
                    },
                    "is_accepted": false,
                    "score": 200,
                    "last_activity_date": 1297018903,
                    "creation_date": 1297018903,
                    "answer_id": 4915408,
                    "question_id": 4915361,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In Python <strong>2</strong>, <code>raw_input()</code> returns a string, and <code>input()</code> tries to run the input as a Python expression.</p>\n\n<p>Since getting a string was almost always what you wanted, Python 3 does that with <code>input()</code>. As Sven says, if you ever want the old behaviour, <code>eval(input())</code> works.</p>\n"
                }
            ]
        },
        {
            "1319074": [
                {
                    "owner": {
                        "account_id": 54037,
                        "reputation": 973,
                        "user_id": 161638,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/4418153834524b6f40eb24b5dc3f9d8f?s=256&d=identicon&r=PG",
                        "display_name": "marsolk",
                        "link": "https://stackoverflow.com/users/161638/marsolk"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1672972673,
                    "last_edit_date": 1672972673,
                    "creation_date": 1251049367,
                    "answer_id": 1319110,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A callback is simply a function. In Python, functions are just more objects, and so the name of a function can be used as a variable, like so:</p>\n<pre><code>def func():\n    ...\n\nsomething(func)\n</code></pre>\n<p>Note that many functions which accept a callback as an argument usually require that the callback accept certain arguments. In this case, the callback function will need to accept a list of arguments specified in callbackargs.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24159,
                        "reputation": 40306,
                        "user_id": 61289,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e34b5cae57e0dd170114dba444e37852?s=256&d=identicon&r=PG",
                        "display_name": "Logan Capaldo",
                        "link": "https://stackoverflow.com/users/61289/logan-capaldo"
                    },
                    "is_accepted": true,
                    "score": 255,
                    "last_activity_date": 1672972635,
                    "last_edit_date": 1672972635,
                    "creation_date": 1251049973,
                    "answer_id": 1319135,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>A callback is a function provided by the consumer of an API that the API can then turn around and invoke (calling you back). If I setup a Dr.'s appointment, I can give them my phone number, so they can call me the day before to confirm the appointment. A callback is like that, except instead of just being a phone number, it can be arbitrary instructions like &quot;send me an email at this address, and also call my secretary and have her put it in my calendar.</p>\n<p>Callbacks are often used in situations where an action is asynchronous. If you need to call a function, and immediately continue working, you can't sit there wait for its return value to let you know what happened, so you provide a callback. When the function is done completely its asynchronous work it will then invoke your callback with some predetermined arguments (usually some you supply, and some about the status and result of the asynchronous action you requested).</p>\n<p>If the Dr. is out of the office, or they are still working on the schedule, rather than having me wait on hold until he gets back, which could be several hours, we hang up, and once the appointment has been scheduled, they call me.</p>\n<p>In this specific case, the documented method will compute the <code>result</code>, put it together with any <code>callbackargs</code> specified, and call <code>callback</code>, passing it those values as the arguments.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879367,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1672971704,
                    "last_edit_date": 1672971704,
                    "creation_date": 1251049355,
                    "answer_id": 1319108,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want some code to be executed as soon as the result is ready, put that code into a function and pass it as the <code>callback</code> argument. For example, supposing no other arguments are needed for that function:</p>\n<pre><code>def itsdone(result):\n    print(f&quot;Done! result={result}&quot;)\n...\nsubmit(..., callback=itsdone)\n</code></pre>\n<p>For more on how this works in Python, see e.g. <a href=\"http://www.listal.com/video/8878369\" rel=\"nofollow noreferrer\">my presentation</a> on the topic.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 36470,
                        "reputation": 28378,
                        "user_id": 104040,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/60f28d36c1439f965e2fb55419621968?s=256&d=identicon&r=PG",
                        "display_name": "Aiden Bell",
                        "link": "https://stackoverflow.com/users/104040/aiden-bell"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1251049646,
                    "last_edit_date": 1251049646,
                    "creation_date": 1251049295,
                    "answer_id": 1319104,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Looking at the link, just looks like a hook which is called.</p>\n\n<blockquote>\n  <p>callback - callback function which\n  will be called with argument \n          list equal to callbackargs+(result,) \n          as soon as calculation is done</p>\n</blockquote>\n\n<p>The \"as soon as calculation is done\" bit seems ambiguous. The point, as far as I can see of this thing is that the <code>submit()</code> call distributes work to other servers and then returns. Because the finishing is asynchronous, rather block, it allows you to provide a function which is called when some unit of work finishes. If you do:</p>\n\n<pre><code>submit( ..., callback=work_finished, ... )\n</code></pre>\n\n<p>Then submit will ensure <code>work_finished()</code> is called when the unit of distributed work is completed on the target server.</p>\n\n<p>When you call <code>submit()</code> you can provide a <strong>callback</strong> which is called in the same runtime as the caller of <code>submit()</code> ... and it is called after the distribution of the workload function is complete.</p>\n\n<p>Kind of like \"call foo(x,y) when you have done some stuff in submit()\"</p>\n\n<p>But yea, the documentation could be better. Have a ganders at the ppython source and see at which point the callback is called in <code>submit()</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 41913,
                        "reputation": 23473,
                        "user_id": 121971,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/18d21cf45fa95eb028bf94573fa127be?s=256&d=identicon&r=PG",
                        "display_name": "Jeremy Smyth",
                        "link": "https://stackoverflow.com/users/121971/jeremy-smyth"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1251049449,
                    "creation_date": 1251049449,
                    "answer_id": 1319118,
                    "question_id": 1319074,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>A <a href=\"http://en.wikipedia.org/wiki/Callback_function\" rel=\"nofollow noreferrer\">callback</a> is a function you define that's later called by a function you call.</p>\n\n<p>As an example, consider how AJAX works: you write code that calls a back-end server function. At some point in the future, it returns from that function (the \"A\" stands for Asynchronous, which is what the \"Parallel\" in \"Parallel Python\" is all about). Now - because your code calls the code on the server, you want it to tell you when it's done, and you want to do something with its results. It does so by calling your <em>callback function</em>.</p>\n\n<p>When the called function completes, the standard way for it to tell you it's done is for you to tell it to call a function in your code. That's the callback function, and its job is to handle the results/output from the lower-level function you've called.</p>\n"
                }
            ]
        },
        {
            "10625190": [
                {
                    "owner": {
                        "account_id": 9096548,
                        "reputation": 171,
                        "user_id": 6770328,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/374310df1f743adf1389e43a3c759dd0?s=256&d=identicon&r=PG",
                        "display_name": "Steve",
                        "link": "https://stackoverflow.com/users/6770328/steve"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1546379404,
                    "last_edit_date": 1546379404,
                    "creation_date": 1472476052,
                    "answer_id": 39207112,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Documentation is horrible for PyGitHub, but the product is great.  Here is a quick sample for actually retrieving a file, changing it with a new comment at the beginning of the file and committing it back</p>\n\n<pre><code>from github import Github\ngh = Github(login_or_token='.....', base_url='...../api/v3')\nuser = gh.get_user()\nrepo = user.get_repo(\"RepoName\")\nfile = repo.get_file_contents(\"/App/forms.py\")\ndecoded_content = \"# Test \" + \"\\r\\n\" + file.decoded_content\nrepo.update_file(\"/\"RepoName\"/forms.py\", \"Commit Comments\", decoded_content, file.sha)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 295462,
                        "reputation": 5602,
                        "user_id": 599884,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/2aed663a62fa8bf9f7aebe603d3998bb?s=256&d=identicon&r=PG",
                        "display_name": "Christoph",
                        "link": "https://stackoverflow.com/users/599884/christoph"
                    },
                    "is_accepted": true,
                    "score": 37,
                    "last_activity_date": 1436472987,
                    "last_edit_date": 1436472987,
                    "creation_date": 1389608138,
                    "answer_id": 21088708,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In the end, I ended up using <a href=\"https://github.com/jacquev6/PyGithub\">PyGithub</a>. It works well, and the author is really receptive for feedback and bug reports. :-)</p>\n\n<p><em>(Adapted from my edit to the original question, for better visibility)</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 23634,
                        "reputation": 10167,
                        "user_id": 59352,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/f33c37d52c56856f4c91344d7471eee0?s=256&d=identicon&r=PG",
                        "display_name": "Lycha",
                        "link": "https://stackoverflow.com/users/59352/lycha"
                    },
                    "is_accepted": false,
                    "score": 82,
                    "last_activity_date": 1364532438,
                    "last_edit_date": 1364532438,
                    "creation_date": 1337200634,
                    "answer_id": 10626326,
                    "question_id": 10625190,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Since you mentioned you are a beginner python programmer, I would suggest you to try to use the JSON API without any Github library first. It really isn't that difficult and it will help you a lot later in your programming life since same approach can be applied to any JSON API. Especially if it seems that trying out libraries will take days. </p>\n\n<p>I'm not saying that some library isn't easier to use, I'm just saying the small extra effort to use the API directly might be worth it in the long run. At least it will help you understand why some of those libraries seem \"unintuitive\" (as you said).</p>\n\n<p>Simple example to fetch creation time of django repository:</p>\n\n<pre><code>import requests\nimport json\nr = requests.get('https://api.github.com/repos/django/django')\nif(r.ok):\n    repoItem = json.loads(r.text or r.content)\n    print \"Django repository created: \" + repoItem['created_at']\n</code></pre>\n\n<p>This is using the popular <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\">requests library</a>. In your code you'll naturally need to handle the error cases too.</p>\n\n<p>If you need access with authentication it will be a bit more complex.</p>\n"
                }
            ]
        },
        {
            "13279399": [
                {
                    "owner": {
                        "account_id": 51517,
                        "reputation": 4312,
                        "user_id": 153945,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://www.gravatar.com/avatar/9a4d93b712845f64e06f64bdfc5c78f9?s=256&d=identicon&r=PG",
                        "display_name": "Jason",
                        "link": "https://stackoverflow.com/users/153945/jason"
                    },
                    "is_accepted": false,
                    "score": 186,
                    "last_activity_date": 1584281185,
                    "last_edit_date": 1584281185,
                    "creation_date": 1386034801,
                    "answer_id": 20341272,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you want to retrieve POST data:</p>\n\n<pre><code>first_name = request.form.get(\"firstname\")\n</code></pre>\n\n<p>If you want to retrieve GET (query string) data:</p>\n\n<pre><code>first_name = request.args.get(\"firstname\")\n</code></pre>\n\n<p>Or if you don't care/know whether the value is in the query string or in the post data:</p>\n\n<pre><code>first_name = request.values.get(\"firstname\") \n</code></pre>\n\n<p><strong>request.values</strong> is a <strong>CombinedMultiDict</strong> that combines Dicts from <strong>request.form</strong> and <strong>request.args</strong>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2021454,
                        "reputation": 859,
                        "user_id": 1807534,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/194a5ce0ed6dc95ecf89d793c785ba4e?s=256&d=identicon&r=PG",
                        "display_name": "user1807534",
                        "link": "https://stackoverflow.com/users/1807534/user1807534"
                    },
                    "is_accepted": true,
                    "score": 81,
                    "last_activity_date": 1486109155,
                    "last_edit_date": 1486109155,
                    "creation_date": 1352328274,
                    "answer_id": 13279573,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can get posted form data from <code>request.form</code> and query string data from <code>request.args</code>.</p>\n\n<pre><code>myvar =  request.form[\"myvar\"]\n</code></pre>\n\n\n\n<pre><code>myvar = request.args[\"myvar\"]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5796689,
                        "reputation": 4572,
                        "user_id": 4572274,
                        "user_type": "registered",
                        "profile_image": "https://graph.facebook.com/420310811459015/picture?type=large",
                        "display_name": "yardstick17",
                        "link": "https://stackoverflow.com/users/4572274/yardstick17"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1485710492,
                    "creation_date": 1485710492,
                    "answer_id": 41923758,
                    "question_id": 13279399,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Adding more to Jason's more generalized way of retrieving the POST data or GET data</p>\n\n<pre><code>from flask_restful import reqparse\n\ndef parse_arg_from_requests(arg, **kwargs):\n    parse = reqparse.RequestParser()\n    parse.add_argument(arg, **kwargs)\n    args = parse.parse_args()\n    return args[arg]\n\nform_field_value = parse_arg_from_requests('FormFieldValue')\n</code></pre>\n"
                }
            ]
        },
        {
            "19210414": [
                {
                    "owner": {
                        "account_id": 269349,
                        "reputation": 35041,
                        "user_id": 558639,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/3f4a1073df397d894cf3ae596988b687?s=256&d=identicon&r=PG",
                        "display_name": "fearless_fool",
                        "link": "https://stackoverflow.com/users/558639/fearless-fool"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1709048623,
                    "creation_date": 1709048623,
                    "answer_id": 78068795,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<h2>For Python 3.6 and later: use f-strings</h2>\n<p>Python 3.6 and beyond supports f-strings (aka &quot;formatted string literals&quot;) like this:</p>\n<pre><code>array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print(' '.join(f'{x:02x}' for x in array_alpha))\n85 35 ea f1\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2354997,
                        "reputation": 19764,
                        "user_id": 2063031,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f2677db7242bfbcead46fbf27390160d?s=256&d=identicon&r=PG",
                        "display_name": "ostrokach",
                        "link": "https://stackoverflow.com/users/2063031/ostrokach"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1536256528,
                    "last_edit_date": 1536256528,
                    "creation_date": 1482024385,
                    "answer_id": 41204684,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have a numpy array, you can do the following:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.array([133, 53, 234, 241])\n&gt;&gt;&gt; a.astype(np.uint8).data.hex()\n'8535eaf1'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16817,
                        "reputation": 75247,
                        "user_id": 37020,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/9c52ad00ba2f2602661c49f896733229?s=256&d=identicon&r=PG",
                        "display_name": "orip",
                        "link": "https://stackoverflow.com/users/37020/orip"
                    },
                    "is_accepted": false,
                    "score": 76,
                    "last_activity_date": 1525600721,
                    "last_edit_date": 1525600721,
                    "creation_date": 1511349845,
                    "answer_id": 47433471,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Consider the <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.hex\" rel=\"noreferrer\">hex() method</a> of the <code>bytes</code> type on Python 3.5 and up:</p>\n\n<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print(bytes(array_alpha).hex())\n8535eaf1\n</code></pre>\n\n<p>EDIT: it's also much faster than <code>hexlify</code> (modified @falsetru's benchmarks above)</p>\n\n<pre><code>from timeit import timeit\nN = 10000\nprint(\"bytearray + hexlify -&gt;\", timeit(\n    'binascii.hexlify(data).decode(\"ascii\")',\n    setup='import binascii; data = bytearray(range(255))',\n    number=N,\n))\nprint(\"byte + hex          -&gt;\", timeit(\n    'data.hex()',\n    setup='data = bytes(range(255))',\n    number=N,\n))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>bytearray + hexlify -&gt; 0.011218150997592602\nbyte + hex          -&gt; 0.005952142993919551\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 176857,
                        "reputation": 368056,
                        "user_id": 2225682,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=256&d=identicon&r=PG",
                        "display_name": "falsetru",
                        "link": "https://stackoverflow.com/users/2225682/falsetru"
                    },
                    "is_accepted": true,
                    "score": 174,
                    "last_activity_date": 1509949844,
                    "last_edit_date": 1509949844,
                    "creation_date": 1381073088,
                    "answer_id": 19210442,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Using <a href=\"http://docs.python.org/2/library/stdtypes#str.format\" rel=\"noreferrer\"><code>str.format</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]\n&gt;&gt;&gt; print ''.join('{:02x}'.format(x) for x in array_alpha)\n8535eaf1\n</code></pre>\n\n<p>or using <a href=\"http://docs.python.org/2/library/functions.html#format\" rel=\"noreferrer\"><code>format</code></a></p>\n\n<pre><code>&gt;&gt;&gt; print ''.join(format(x, '02x') for x in array_alpha)\n8535eaf1\n</code></pre>\n\n<blockquote>\n  <p><em>Note:</em> In the format statements, the <code>02</code> means it will pad with up to 2 leading <code>0</code>s if necessary. This is important since <code>[0x1, 0x1, 0x1] i.e. (0x010101)</code> would be formatted to <code>\"111\"</code> instead of <code>\"010101\"</code> </p>\n</blockquote>\n\n<p>or using <a href=\"http://docs.python.org/2/library/functions.html#bytearray\" rel=\"noreferrer\"><code>bytearray</code></a> with <a href=\"http://docs.python.org/2/library/binascii.html#binascii.hexlify\" rel=\"noreferrer\"><code>binascii.hexlify</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import binascii\n&gt;&gt;&gt; binascii.hexlify(bytearray(array_alpha))\n'8535eaf1'\n</code></pre>\n\n<hr>\n\n<p>Here is a benchmark of above methods in Python 3.6.1:</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>from timeit import timeit\nimport binascii\n\nnumber = 10000\n\ndef using_str_format() -&gt; str:\n    return \"\".join(\"{:02x}\".format(x) for x in test_obj)\n\ndef using_format() -&gt; str:\n    return \"\".join(format(x, \"02x\") for x in test_obj)\n\ndef using_hexlify() -&gt; str:\n    return binascii.hexlify(bytearray(test_obj)).decode('ascii')\n\ndef do_test():\n    print(\"Testing with {}-byte {}:\".format(len(test_obj), test_obj.__class__.__name__))\n    if using_str_format() != using_format() != using_hexlify():\n        raise RuntimeError(\"Results are not the same\")\n\n    print(\"Using str.format       -&gt; \" + str(timeit(using_str_format, number=number)))\n    print(\"Using format           -&gt; \" + str(timeit(using_format, number=number)))\n    print(\"Using binascii.hexlify -&gt; \" + str(timeit(using_hexlify, number=number)))\n\ntest_obj = bytes([i for i in range(255)])\ndo_test()\n\ntest_obj = bytearray([i for i in range(255)])\ndo_test()\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Testing with 255-byte bytes:\nUsing str.format       -&gt; 1.459474583090427\nUsing format           -&gt; 1.5809937679100738\nUsing binascii.hexlify -&gt; 0.014521426401399307\nTesting with 255-byte bytearray:\nUsing str.format       -&gt; 1.443447684109402\nUsing format           -&gt; 1.5608712609513171\nUsing binascii.hexlify -&gt; 0.014114164661833684\n</code></pre>\n\n<p>Methods using <code>format</code> do provide additional formatting options, as example separating numbers with spaces <code>\" \".join</code>, commas <code>\", \".join</code>, upper-case printing <code>\"{:02X}\".format(x)</code>/<code>format(x, \"02X\")</code>, etc., but at a cost of great performance impact.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user2555451"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1381073283,
                    "creation_date": 1381073283,
                    "answer_id": 19210484,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Or, if you are a fan of functional programming:</p>\n\n<pre><code>&gt;&gt;&gt; a = [133, 53, 234, 241]\n&gt;&gt;&gt; \"\".join(map(lambda b: format(b, \"02x\"), a))\n8535eaf1\n&gt;&gt;&gt;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183585,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 14,
                    "last_activity_date": 1381073227,
                    "creation_date": 1381073227,
                    "answer_id": 19210468,
                    "question_id": 19210414,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>hex_string = \"\".join(\"%02x\" % b for b in array_alpha)\n</code></pre>\n"
                }
            ]
        },
        {
            "31359150": [
                {
                    "owner": {
                        "account_id": 231545,
                        "reputation": 4358,
                        "user_id": 495838,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/1375590dbfa97eeb58785314836ed3ab?s=256&d=identicon&r=PG",
                        "display_name": "saeedgnu",
                        "link": "https://stackoverflow.com/users/495838/saeedgnu"
                    },
                    "is_accepted": true,
                    "score": 60,
                    "last_activity_date": 1626249392,
                    "last_edit_date": 1626249392,
                    "creation_date": 1436632107,
                    "answer_id": 31359287,
                    "question_id": 31359150,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from datetime import datetime\nexcel_date = 42139\ndt = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + excel_date - 2)\ntt = dt.timetuple()\nprint(dt)\nprint(tt)\n</code></pre>\n<p>As mentioned by J.F. Sebastian, this answer only works for any date after 1900/03/01</p>\n<p>EDIT: (in answer to @R.K)</p>\n<p>If your <code>excel_date</code> is a float number, use this code:</p>\n<pre><code>from datetime import datetime\n\ndef floatHourToTime(fh):\n    hours, hourSeconds = divmod(fh, 1)\n    minutes, seconds = divmod(hourSeconds * 60, 1)\n    return (\n        int(hours),\n        int(minutes),\n        int(seconds * 60),\n    )\n\nexcel_date = 42139.23213\ndt = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(excel_date) - 2)\nhour, minute, second = floatHourToTime(excel_date % 1)\ndt = dt.replace(hour=hour, minute=minute, second=second)\n\nprint(dt)\nassert str(dt) == &quot;2015-05-15 00:13:55&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6605994,
                        "reputation": 471,
                        "user_id": 5102804,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1438e5604b2ad1d288214e4d57641dca?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "zverianskii",
                        "link": "https://stackoverflow.com/users/5102804/zverianskii"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1574674327,
                    "last_edit_date": 1574674327,
                    "creation_date": 1436631654,
                    "answer_id": 31359209,
                    "question_id": 31359150,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The module <code>xlrd</code> provides a function <a href=\"http://www.lexicon.net/sjmachin/xlrd.html#xlrd.xldate%5Fas%5Ftuple-function\" rel=\"noreferrer\"><code>xldate_as_tuple</code></a> to convert Excel's numerical date format to a tuple <code>(year, month, day, hour, minute, nearest_second)</code>.</p>\n\n<p>You can then use <a href=\"https://docs.python.org/3.7/library/datetime.html\" rel=\"noreferrer\"><code>datetime.datetime</code></a> to convert the tuple into a <code>datetime</code>-object.</p>\n\n<pre><code>from datetime import datetime\nimport xlrd\n\nexcel_date = 44032\npython_date = datetime(*xlrd.xldate_as_tuple(excel_date, 0))\n</code></pre>\n"
                }
            ]
        },
        {
            "3965104": [
                {
                    "owner": {
                        "account_id": 17166,
                        "reputation": 39899,
                        "user_id": 38140,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/0b5c9699fa348a28c4accd81ebce0a91?s=256&d=identicon&r=PG",
                        "display_name": "gotgenes",
                        "link": "https://stackoverflow.com/users/38140/gotgenes"
                    },
                    "is_accepted": true,
                    "score": 1348,
                    "last_activity_date": 1711120673,
                    "last_edit_date": 1711120673,
                    "creation_date": 1287458671,
                    "answer_id": 3965129,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>if val is not None:\n    # ...\n</code></pre>\n<p>is the Pythonic idiom for testing that a variable is not set to <code>None</code>. This idiom has particular uses in the case of <a href=\"https://web.archive.org/web/20201002220217/http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">declaring keyword functions with default parameters</a>. <code>is</code> tests identity in Python. Because there is one and only one instance of <code>None</code> present in a running Python script/program, <code>is</code> is the optimal test for this. As <a href=\"https://stackoverflow.com/questions/3965104/not-none-test-in-python/3965165#3965165\">Johnsyweb points out</a>, this is discussed in <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a> under &quot;Programming Recommendations&quot;.</p>\n<p>As for why this is preferred to</p>\n<pre><code>if not (val is None):\n    # ...\n</code></pre>\n<p>this is simply part of the <a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"noreferrer\">Zen of Python</a>: &quot;Readability counts.&quot; Good Python is often close to good <a href=\"http://en.wikipedia.org/wiki/Pseudocode\" rel=\"noreferrer\">pseudocode</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1729199,
                        "reputation": 22855,
                        "user_id": 1583175,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/ce34927681daa5192859fb8485f92b26?s=256&d=identicon&r=PG",
                        "display_name": "SheetJS",
                        "link": "https://stackoverflow.com/users/1583175/sheetjs"
                    },
                    "is_accepted": false,
                    "score": 39,
                    "last_activity_date": 1604049444,
                    "last_edit_date": 1604049444,
                    "creation_date": 1382298240,
                    "answer_id": 19481996,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The best bet with these types of questions is to see exactly what python does. The <a href=\"https://docs.python.org/3/library/dis.html\" rel=\"noreferrer\"><code>dis</code></a> module is incredibly informative:</p>\n<pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(&quot;val != None&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               3 (!=)\n              6 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(&quot;not (val is None)&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(&quot;val is not None&quot;)\n  1           0 LOAD_NAME                0 (val)\n              2 LOAD_CONST               0 (None)\n              4 COMPARE_OP               9 (is not)\n              6 RETURN_VALUE\n</code></pre>\n<p>Notice that the last two cases reduce to the same sequence of operations, Python reads <code>not (val is None)</code> and uses the <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\" rel=\"noreferrer\"><code>is not</code> operator</a>. The first uses the <a href=\"https://docs.python.org/3/reference/expressions.html#value-comparisons\" rel=\"noreferrer\"><code>!=</code> operator</a> when comparing with <code>None</code>.</p>\n<p>As pointed out by other answers, using <code>!=</code> when comparing with <code>None</code> is a bad idea.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 29240,
                        "reputation": 141322,
                        "user_id": 78845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7jZ4g.png?s=256",
                        "display_name": "johnsyweb",
                        "link": "https://stackoverflow.com/users/78845/johnsyweb"
                    },
                    "is_accepted": false,
                    "score": 149,
                    "last_activity_date": 1575937355,
                    "last_edit_date": 1592644375,
                    "creation_date": 1287459336,
                    "answer_id": 3965165,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>From, Programming Recommendations, <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a>:</p>\n<blockquote>\n<p>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</p>\n<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> \u2014 e.g. when testing whether a variable or argument that defaults to None was set to some other value.  The other value might have a type (such as a container) that could be false in a boolean context!</p>\n</blockquote>\n<p>PEP 8 is essential reading for any Python programmer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796828,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1287458614,
                    "creation_date": 1287458614,
                    "answer_id": 3965123,
                    "question_id": 3965104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Either of the latter two, since <code>val</code> could potentially be of a type that defines <code>__eq__()</code> to return true when passed <code>None</code>.</p>\n"
                }
            ]
        },
        {
            "22511792": [
                {
                    "owner": {
                        "account_id": 1482076,
                        "reputation": 5048,
                        "user_id": 1391220,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1cd45d5f04e20582a5a0892dc7b8b227?s=256&d=identicon&r=PG",
                        "display_name": "Sudeep Juvekar",
                        "link": "https://stackoverflow.com/users/1391220/sudeep-juvekar"
                    },
                    "is_accepted": true,
                    "score": 155,
                    "last_activity_date": 1660977358,
                    "last_edit_date": 1660977358,
                    "creation_date": 1395245622,
                    "answer_id": 22511861,
                    "question_id": 22511792,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>.</code> is a shortcut that tells it to search in the <em>current</em> package before the rest of the <code>PYTHONPATH</code>. So, if a same-named module <code>Recipe</code> exists somewhere else in your <code>PYTHONPATH</code>, it won't be loaded.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1565215,
                        "reputation": 9209,
                        "user_id": 1454176,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/O9qna.png?s=256",
                        "display_name": "Zulu",
                        "link": "https://stackoverflow.com/users/1454176/zulu"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1395247043,
                    "creation_date": 1395247043,
                    "answer_id": 22512458,
                    "question_id": 22511792,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In addition of Sudeep Juvekar, this question is also related to <code>manage.py</code>'s behavior.</p>\n\n<p>In <a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/\" rel=\"nofollow\">django-admin.py and manage.py</a>:<br></p>\n\n<blockquote>\n  <p>It puts your project\u2019s package on <code>sys.path</code>.</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "5628084": [
                {
                    "owner": {
                        "account_id": 92584,
                        "reputation": 38254,
                        "user_id": 253686,
                        "user_type": "registered",
                        "accept_rate": 52,
                        "profile_image": "https://www.gravatar.com/avatar/9515ab087a2ca71270e6844366f6e689?s=256&d=identicon&r=PG",
                        "display_name": "bradley.ayers",
                        "link": "https://stackoverflow.com/users/253686/bradley-ayers"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1302559867,
                    "creation_date": 1302559867,
                    "answer_id": 5628155,
                    "question_id": 5628084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use the built-in <a href=\"http://docs.python.org/library/functions.html#issubclass\" rel=\"noreferrer\"><code>issubclass</code></a> function. e.g.</p>\n\n<pre><code>issubclass(QuizForm, forms.Form)\n</code></pre>\n\n<p>It returns a <code>bool</code> so you can use it directly in <code>self.assertTrue()</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 65732,
                        "reputation": 16216,
                        "user_id": 193256,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://www.gravatar.com/avatar/296603ec83f6b1f1a0e1c170bf42846e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "pajton",
                        "link": "https://stackoverflow.com/users/193256/pajton"
                    },
                    "is_accepted": true,
                    "score": 164,
                    "last_activity_date": 1302559757,
                    "creation_date": 1302559757,
                    "answer_id": 5628127,
                    "question_id": 5628084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <a href=\"http://docs.python.org/library/functions.html#issubclass\" rel=\"noreferrer\">issubclass(myclass, parentclass)</a>.</p>\n\n<p>In your case:</p>\n\n<pre><code>self.assertTrue( issubclass(QuizForm, forms.Form) )\n</code></pre>\n"
                }
            ]
        },
        {
            "7545015": [
                {
                    "owner": {
                        "account_id": 55665,
                        "reputation": 362839,
                        "user_id": 166749,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/f5a1ea24626d10a87d73d47998dc8816?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Fred Foo",
                        "link": "https://stackoverflow.com/users/166749/fred-foo"
                    },
                    "is_accepted": true,
                    "score": 36,
                    "last_activity_date": 1334659291,
                    "last_edit_date": 1334659291,
                    "creation_date": 1316947566,
                    "answer_id": 7545025,
                    "question_id": 7545015,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's because <code>.1</code> cannot be represented exactly in a binary floating point representation. If you try</p>\n\n<pre><code>&gt;&gt;&gt; .1\n</code></pre>\n\n<p>Python will respond with <code>.1</code> because it only prints up to a certain precision, but there's already a small round-off error. The same happens with <code>.3</code>, but when you issue</p>\n\n<pre><code>&gt;&gt;&gt; .2 + .1\n0.30000000000000004\n</code></pre>\n\n<p>then the round-off errors in <code>.2</code> and <code>.1</code> accumulate. Also note:</p>\n\n<pre><code>&gt;&gt;&gt; .2 + .1 == .3\nFalse\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 237126,
                        "reputation": 611708,
                        "user_id": 505088,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/LwXPj.png?s=256",
                        "display_name": "David Heffernan",
                        "link": "https://stackoverflow.com/users/505088/david-heffernan"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1316947672,
                    "creation_date": 1316947672,
                    "answer_id": 7545038,
                    "question_id": 7545015,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Not all floating point numbers are exactly representable on a finite machine. Neither 0.1 nor 0.2 are exactly representable in binary floating point. And nor is 0.3.</p>\n\n<p>A number is exactly representable if it is of the form a/b where a and b are an integers and b  is a power of 2. Obviously, the data type needs to have a large enough significand to store the number also.</p>\n\n<p>I recommend <a href=\"http://pages.cs.wisc.edu/~rkennedy/exact-float\" rel=\"noreferrer\">Rob Kennedy's useful webpage</a> as a nice tool to explore representability.</p>\n"
                }
            ]
        },
        {
            "11788472": [
                {
                    "owner": {
                        "account_id": 1448254,
                        "reputation": 28936,
                        "user_id": 1366033,
                        "user_type": "moderator",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/8c68413a839369d73dc9e9013faa0637?s=256&d=identicon&r=PG",
                        "display_name": "KyleMit",
                        "link": "https://stackoverflow.com/users/1366033/kylemit"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1671214080,
                    "creation_date": 1671214080,
                    "answer_id": 74828259,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also use <a href=\"https://docs.python.org/3/library/string.html#template-strings\" rel=\"nofollow noreferrer\"><strong>Template Strings</strong></a> like this:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from string import Template\ns = Template('$who likes $what')\ns.substitute(who='tim', what='kung pao')\n# 'tim likes kung pao'\n</code></pre>\n<p>This works really well for when you want to build the string template ahead of time and inject the variable elsewhere</p>\n<p><strong>See Also</strong>: <a href=\"https://peps.python.org/pep-0292/\" rel=\"nofollow noreferrer\">PEP 292 \u2013 Simpler String Substitutions</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 46065,
                        "reputation": 159567,
                        "user_id": 135978,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8931e023c82f232d4d02a115710fb8fc?s=256&d=identicon&r=PG",
                        "display_name": "Sean Vieira",
                        "link": "https://stackoverflow.com/users/135978/sean-vieira"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1536367621,
                    "last_edit_date": 1536367621,
                    "creation_date": 1343961668,
                    "answer_id": 11788514,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Python 3.6+ does have variable interpolation - prepend an <code>f</code> to your string:</p>\n\n<pre><code>f\"foo is {bar}\"\n</code></pre>\n\n<p>For versions of Python below this (Python 2 - 3.5) you can use <code>str.format</code> to pass in variables:</p>\n\n<pre><code># Rather than this:\nprint(\"foo is #{bar}\")\n\n# You would do this:\nprint(\"foo is {}\".format(bar))\n\n# Or this:\nprint(\"foo is {bar}\".format(bar=bar))\n\n# Or this:\nprint(\"foo is %s\" % (bar, ))\n\n# Or even this:\nprint(\"foo is %(bar)s\" % {\"bar\": bar})\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 172611,
                        "reputation": 9834,
                        "user_id": 400745,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://i.sstatic.net/g5mCguIz.png?s=256",
                        "display_name": "valk",
                        "link": "https://stackoverflow.com/users/400745/valk"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1532801538,
                    "creation_date": 1532801538,
                    "answer_id": 51573980,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Almost every other answer didn't work for me. Probably it's because I'm on Python3.5. The only thing which worked is:</p>\n\n<pre><code> print(\"Foobar is %s%s\" %('Foo','bar',))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 90162,
                        "reputation": 59424,
                        "user_id": 248296,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/ec020fe58f82e5b8e72544ee7108a825?s=256&d=identicon&r=PG",
                        "display_name": "warvariuc",
                        "link": "https://stackoverflow.com/users/248296/warvariuc"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1506079788,
                    "last_edit_date": 1506079788,
                    "creation_date": 1395390328,
                    "answer_id": 22553645,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python 3.6 has <a href=\"https://www.python.org/dev/peps/pep-0498/#no-use-of-globals-or-locals\" rel=\"noreferrer\">introduced f-strings</a>:</p>\n\n<pre><code>print(f\"foo is {bar}.\")\n</code></pre>\n\n<hr>\n\n<p>Old answer:</p>\n\n<p>Since version 3.2 Python has <a href=\"http://docs.python.org/3/library/stdtypes.html#str.format_map\" rel=\"noreferrer\"><code>str.format_map</code></a> which together with <a href=\"http://docs.python.org/3/library/functions.html#locals\" rel=\"noreferrer\"><code>locals()</code></a> or <a href=\"http://docs.python.org/3/library/functions.html#globals\" rel=\"noreferrer\"><code>globals()</code></a> allows you to do fast:</p>\n\n<pre><code>Python 3.3.2+ (default, Feb 28 2014, 00:52:16) \n&gt;&gt;&gt; bar = \"something\"\n&gt;&gt;&gt; print(\"foo is {bar}\".format_map(locals()))\nfoo is something\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3204464,
                        "reputation": 8967,
                        "user_id": 2705757,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/WecIP.png?s=256",
                        "display_name": "AXO",
                        "link": "https://stackoverflow.com/users/2705757/axo"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1487421065,
                    "last_edit_date": 1487421065,
                    "creation_date": 1463222228,
                    "answer_id": 37225576,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python 3.6 <del>will have</del> has <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"noreferrer\">literal string interpolation</a> using <em>f-strings</em>:</p>\n\n<pre><code>print(f\"foo is {bar}.\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 303989,
                        "reputation": 4852,
                        "user_id": 613247,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/6423317d981c4d0610b0b913b99d6a40?s=256&d=identicon&r=PG",
                        "display_name": "Edmon",
                        "link": "https://stackoverflow.com/users/613247/edmon"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1375133163,
                    "last_edit_date": 1375133163,
                    "creation_date": 1343961406,
                    "answer_id": 11788491,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Yes, absolutely. Python, in my opinion, has great support for string formatting, replacements and operators.</p>\n\n<p>This might be helpful:<br>\n<a href=\"http://docs.python.org/library/stdtypes.html#string-formatting-operations\" rel=\"nofollow\">http://docs.python.org/library/stdtypes.html#string-formatting-operations</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 83772,
                        "reputation": 3960,
                        "user_id": 234658,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3b6fd1b4a240fbd4bfd3d3922789ab14?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "dkim",
                        "link": "https://stackoverflow.com/users/234658/dkim"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1344275345,
                    "last_edit_date": 1344275345,
                    "creation_date": 1343962069,
                    "answer_id": 11788563,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have learned the following technique from <a href=\"http://www.dabeaz.com/per.html\" rel=\"noreferrer\">Python Essential Reference</a>:</p>\n\n<pre><code>&gt;&gt;&gt; bar = \"baz\"\n&gt;&gt;&gt; print \"foo is {bar}.\".format(**vars())\nfoo is baz.\n</code></pre>\n\n<p>This is quite useful when we want to refer to many variables in the formatting string:</p>\n\n<ul>\n<li>We don't have to repeat all variables in the argument list again: compare it to the explicit keyword argument-based approaches (such as <code>\"{x}{y}\".format(x=x, y=y)</code> and <code>\"%(x)%(y)\" % {\"x\": x, \"y\": y}</code>).</li>\n<li>We don't have to check one by one if the order of variables in the argument list is consistent with their order in the formatting string: compare it to the positional argument-based approaches (such as <code>\"{}{}\".format(x, y)</code>, <code>\"{0}{1}\".format(x, y)</code> and <code>\"%s%s\" % (x, y)</code>).</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343962607,
                    "creation_date": 1343962607,
                    "answer_id": 11788614,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a big difference between this in Ruby:</p>\n\n<pre><code>print \"foo is #{bar}.\"\n</code></pre>\n\n<p>And these in Python:</p>\n\n<pre><code>print \"foo is {bar}\".format(bar=bar)\n</code></pre>\n\n<p>In the Ruby example, <code>bar</code> is <em>evaluated</em><br>\nIn the Python example, <code>bar</code> is just a key to the dictionary</p>\n\n<p>In the case that you are just using variables the behave more or less the same, but in general, converting Ruby to Python isn't quite so simple</p>\n"
                },
                {
                    "owner": {
                        "account_id": 398541,
                        "reputation": 21816,
                        "user_id": 763269,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/0c27474bcff67974d6a9fcb43cb7ba4e?s=256&d=identicon&r=PG",
                        "display_name": "Chris Johnson",
                        "link": "https://stackoverflow.com/users/763269/chris-johnson"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343962548,
                    "creation_date": 1343962548,
                    "answer_id": 11788610,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I prefer this approach because you don't have to repeat yourself by referencing the variable twice:</p>\n\n<pre>\nalpha = 123\nprint 'The answer is {alpha}'.format(**locals())\n</pre>\n"
                },
                {
                    "owner": {
                        "account_id": 292449,
                        "reputation": 3316,
                        "user_id": 595207,
                        "user_type": "registered",
                        "accept_rate": 55,
                        "profile_image": "https://www.gravatar.com/avatar/3653203c0807fde1d9f77aee7c8f6249?s=256&d=identicon&r=PG",
                        "display_name": "Josiah",
                        "link": "https://stackoverflow.com/users/595207/josiah"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1343961502,
                    "creation_date": 1343961502,
                    "answer_id": 11788500,
                    "question_id": 11788472,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\">String formatting</a></p>\n\n<pre><code>&gt;&gt;&gt; bar = 1\n&gt;&gt;&gt; print \"foo is {}.\".format(bar)\nfoo is 1.\n</code></pre>\n"
                }
            ]
        },
        {
            "53797057": [
                {
                    "owner": {
                        "account_id": 3671517,
                        "reputation": 54058,
                        "user_id": 3058609,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/ae60aaaf534608b6181058fa7ad178e8?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Adam Smith",
                        "link": "https://stackoverflow.com/users/3058609/adam-smith"
                    },
                    "is_accepted": true,
                    "score": 124,
                    "last_activity_date": 1544912061,
                    "last_edit_date": 1544912061,
                    "creation_date": 1544906407,
                    "answer_id": 53797072,
                    "question_id": 53797057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The <code>*</code> indicates the end of the positional arguments. Every argument after that can only be specified by keyword. This is defined in <a href=\"https://www.python.org/dev/peps/pep-3102/\" rel=\"noreferrer\">PEP 3102</a></p>\n\n<pre><code>&gt;&gt;&gt; def foo1(a, b=None):\n...     print(a, b)\n...\n&gt;&gt;&gt; def foo2(a, *, b=None):\n...     print(a, b)\n...\n&gt;&gt;&gt; foo1(1, 2)\n1 2\n&gt;&gt;&gt; foo2(1, 2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo1() takes 1 positional argument but 2 were given\n&gt;&gt;&gt; foo2(1, b=2)\n1 2\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 14381595,
                        "reputation": 3762,
                        "user_id": 10388629,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/g15oI.png?s=256",
                        "display_name": "Picachieu",
                        "link": "https://stackoverflow.com/users/10388629/picachieu"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1544906510,
                    "creation_date": 1544906510,
                    "answer_id": 53797093,
                    "question_id": 53797057,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>All arguments after the <code>*</code> must have their name explicitly specified. For example, if you had this function:</p>\n\n<pre><code>def somefunction(a,*,b):\n    pass\n</code></pre>\n\n<p>You could write this:</p>\n\n<pre><code>somefunction(0, b=0)\n</code></pre>\n\n<p>but not this:</p>\n\n<pre><code>somefunction(0, 0)\n</code></pre>\n"
                }
            ]
        },
        {
            "5087425": [
                {
                    "owner": {
                        "account_id": 40410,
                        "reputation": 42986,
                        "user_id": 117092,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/8f21aab63da84a913ef6190dcdf9ede4?s=256&d=identicon&r=PG",
                        "display_name": "luc",
                        "link": "https://stackoverflow.com/users/117092/luc"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1298440164,
                    "creation_date": 1298440164,
                    "answer_id": 5087448,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>\" is useful when you have ' into the string and vice versa</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79477,
                        "reputation": 131219,
                        "user_id": 225312,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/98be1fca8529611a09e77da800faa817?s=256&d=identicon&r=PG",
                        "display_name": "user225312",
                        "link": "https://stackoverflow.com/users/225312/user225312"
                    },
                    "is_accepted": true,
                    "score": 61,
                    "last_activity_date": 1298440153,
                    "creation_date": 1298440153,
                    "answer_id": 5087446,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Both are equal and what you use is entirely your preference.</p>\n\n<p>As far as the <code>char</code> vs <code>string</code> thing is concerned, refer to the <code>Zen of Python</code>, (<a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"noreferrer\">PEP 20</a> or <code>import this</code>)</p>\n\n<pre><code>Special cases aren't special enough to break the rules.\n</code></pre>\n\n<p>A string of length 1 is not special enough to have a dedicated <code>char</code> type. </p>\n\n<p>Note that you can do:</p>\n\n<pre><code>&gt;&gt;&gt; print 'Double\" quote inside single'\nDouble\" quote inside single\n&gt;&gt;&gt; print \"Single' quote inside double\"\nSingle' quote inside double\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35995,
                        "reputation": 40669,
                        "user_id": 102371,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/262d914b9ff3f5b7f599de600cf463a8?s=256&d=identicon&r=PG",
                        "display_name": "John Weldon",
                        "link": "https://stackoverflow.com/users/102371/john-weldon"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1298440010,
                    "creation_date": 1298440010,
                    "answer_id": 5087430,
                    "question_id": 5087425,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python does not have that restriction of single quotes for chars and double quotes for strings.</p>\n\n<p>As you can see here the grammar explicitly allows both for strings.</p>\n\n<p><a href=\"http://docs.python.org/reference/lexical_analysis.html#string-literals\" rel=\"noreferrer\">http://docs.python.org/reference/lexical_analysis.html#string-literals</a></p>\n"
                }
            ]
        },
        {
            "8249539": [
                {
                    "owner": {
                        "account_id": 1011299,
                        "reputation": 27193,
                        "user_id": 1023815,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b8fc2bd5d624ab2d5f54c145ae3d04f2?s=256&d=identicon&r=PG",
                        "display_name": "Adam Zalcman",
                        "link": "https://stackoverflow.com/users/1023815/adam-zalcman"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1322085467,
                    "creation_date": 1322085467,
                    "answer_id": 8249627,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you must, this is how you can do it in a for loop:</p>\n\n<pre><code>mylist = ['first', 'second', 'other']\nendstring = ''\nfor s in mylist:\n  endstring += s\n</code></pre>\n\n<p>but you should consider using <code>join()</code>:</p>\n\n<pre><code>''.join(mylist)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 95306,
                        "reputation": 4414,
                        "user_id": 259645,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://i.sstatic.net/OObkU.jpg?s=256",
                        "display_name": "Aurora",
                        "link": "https://stackoverflow.com/users/259645/aurora"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1322085455,
                    "creation_date": 1322085455,
                    "answer_id": 8249624,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>While \"\".join is more pythonic, and the correct answer for this problem, it is indeed possible to use a for loop.</p>\n\n<p>If this is a homework assignment (please add a tag if this is so!), and you are required to use a for loop then what will work (although is not pythonic, and shouldn't really be done this way if you are a professional programmer writing python) is this:</p>\n\n<pre><code>endstring = \"\"\nmylist = ['first', 'second', 'other']\nfor word in mylist:\n  print \"This is the word I am adding: \" + word\n  endstring = endstring + word\nprint \"This is the answer I get: \" + endstring\n</code></pre>\n\n<p>You don't need the 'prints', I just threw them in there so you can see what is happening.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 481212,
                        "reputation": 6646,
                        "user_id": 894885,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/96b3d11d987edfac71b38328edf04b44?s=256&d=identicon&r=PG",
                        "display_name": "Samuel Edwin Ward",
                        "link": "https://stackoverflow.com/users/894885/samuel-edwin-ward"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1322085352,
                    "creation_date": 1322085352,
                    "answer_id": 8249606,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>endstring = ''\nfor s in list:\n    endstring += s\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 69149,
                        "reputation": 235772,
                        "user_id": 201359,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/t7odj.jpg?s=256",
                        "display_name": "&#211;scar L&#243;pez",
                        "link": "https://stackoverflow.com/users/201359/%c3%93scar-l%c3%b3pez"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1322085081,
                    "creation_date": 1322085081,
                    "answer_id": 8249555,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This should work:</p>\n\n<pre><code>endstring = ''.join(list)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10843,
                        "reputation": 335498,
                        "user_id": 20670,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
                        "display_name": "Tim Pietzcker",
                        "link": "https://stackoverflow.com/users/20670/tim-pietzcker"
                    },
                    "is_accepted": true,
                    "score": 87,
                    "last_activity_date": 1322085071,
                    "creation_date": 1322085071,
                    "answer_id": 8249551,
                    "question_id": 8249539,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's not how you do it.</p>\n\n<pre><code>&gt;&gt;&gt; ''.join(['first', 'second', 'other'])\n'firstsecondother'\n</code></pre>\n\n<p>is what you want.</p>\n\n<p>If you do it in a <code>for</code> loop, it's going to be inefficient as string \"addition\"/concatenation doesn't scale well (but of course it's possible):</p>\n\n<pre><code>&gt;&gt;&gt; mylist = ['first', 'second', 'other']\n&gt;&gt;&gt; s = \"\"\n&gt;&gt;&gt; for item in mylist:\n...    s += item\n...\n&gt;&gt;&gt; s\n'firstsecondother'\n</code></pre>\n"
                }
            ]
        },
        {
            "9748678": [
                {
                    "owner": {
                        "account_id": 108651,
                        "reputation": 12703,
                        "user_id": 288280,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/O3uY8.jpg?s=256",
                        "display_name": "iTayb",
                        "link": "https://stackoverflow.com/users/288280/itayb"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1475526366,
                    "last_edit_date": 1475526366,
                    "creation_date": 1331980192,
                    "answer_id": 9749230,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://docs.python.org/library/functions.html#hasattr\" rel=\"noreferrer\"><code>hasattr()</code></a> is the Pythonic way to do it. Learn it, love it.</p>\n\n<p><strong>Other possible way</strong> is to check whether the variable name is in <code>locals()</code> or <code>globals()</code>:</p>\n\n<pre><code>if varName in locals() or in globals():\n    do_something()\nelse:\n    do_something_else()\n</code></pre>\n\n<p>I personally hate to catch exceptions in order to check something. It looks and feels ugly. It's identical to checking if a string contains only digits that way:</p>\n\n<pre><code>s = \"84984x\"\ntry:\n    int(s)\n    do_something(s)\nexcept ValueError:\n    do_something_else(s)\n</code></pre>\n\n<p>Instead of gently using <code>s.isdigit()</code>. Eww.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 501376,
                        "reputation": 2162,
                        "user_id": 1207523,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/sIvDd.jpg?s=256",
                        "display_name": "Lindlof",
                        "link": "https://stackoverflow.com/users/1207523/lindlof"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1474276606,
                    "last_edit_date": 1474276606,
                    "creation_date": 1474276114,
                    "answer_id": 39569334,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Very old question but it really needs a good answer. For even a short program, I'd say use a custom function!</p>\n\n<p>Here's an example. It's not perfect for all application but it is for mine, for parsing responses from countless APIs and using Django. It's easy to fix for everyone's own requirements.</p>\n\n<pre><code>from django.core.exceptions import ObjectDoesNotExist\nfrom functools import reduce\n\nclass MultipleObjectsReturned(Exception):\n    pass\n\ndef get_attr(obj, attr, default, asString=False, silent=True):\n    \"\"\"\n    Gets any attribute of obj.\n    Recursively get attributes by separating attribute names with the .-character.        \n    Calls the last attribute if it's a function.\n\n    Usage: get_attr(obj, 'x.y.z', None)\n    \"\"\"\n    try:\n        attr = reduce(getattr, attr.split(\".\"), obj)\n        if hasattr(attr, '__call__'):\n            attr = attr()\n        if attr is None:\n            return default\n        if isinstance(attr, list):\n            if len(attr) &gt; 1:\n                logger.debug(\"Found multiple attributes: \" + str(attr))\n                raise MultipleObjectsReturned(\"Expected a single attribute\")\n            else:\n                return str(attr[0]) if asString else attr[0]\n        else:\n            return str(attr) if asString else attr\n    except AttributeError:\n        if not silent:\n            raise\n        return default\n    except ObjectDoesNotExist:\n        if not silent:\n            raise\n        return default\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 30228,
                        "reputation": 212648,
                        "user_id": 82294,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=256&d=identicon&r=PG",
                        "display_name": "Dietrich Epp",
                        "link": "https://stackoverflow.com/users/82294/dietrich-epp"
                    },
                    "is_accepted": true,
                    "score": 179,
                    "last_activity_date": 1332008056,
                    "last_edit_date": 1332008056,
                    "creation_date": 1331975400,
                    "answer_id": 9748715,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>There is no \"best\" way,</strong> because you are never just checking to see if an attribute exists; it is always a part of some larger program.  There are several correct ways and one notable incorrect way.</p>\n\n<h1>The wrong way</h1>\n\n<pre><code>if 'property' in a.__dict__:\n    a.property\n</code></pre>\n\n<p>Here is a demonstration which shows this technique failing:</p>\n\n<pre><code>class A(object):\n    @property\n    def prop(self):\n        return 3\n\na = A()\nprint \"'prop' in a.__dict__ =\", 'prop' in a.__dict__\nprint \"hasattr(a, 'prop') =\", hasattr(a, 'prop')\nprint \"a.prop =\", a.prop\n</code></pre>\n\n<p>Output:</p>\n\n<pre>\n'prop' in a.__dict__ = False\nhasattr(a, 'prop') = True\na.prop = 3\n</pre>\n\n<p>Most of the time, you don't want to mess with <code>__dict__</code>.  It's a special attribute for doing special things, and checking to see if an attribute exists is fairly mundane.</p>\n\n<h1>The EAFP way</h1>\n\n<p>A common idiom in Python is \"easier to ask for forgiveness than permission\", or EAFP for short.  You will see lots of Python code that uses this idiom, and not just for checking attribute existence.</p>\n\n<pre><code># Cached attribute\ntry:\n    big_object = self.big_object\n    # or getattr(self, 'big_object')\nexcept AttributeError:\n    # Creating the Big Object takes five days\n    # and three hundred pounds of over-ripe melons.\n    big_object = CreateBigObject()\n    self.big_object = big_object\nbig_object.do_something()\n</code></pre>\n\n<p>Note that this is exactly the same idiom for opening a file that may not exist.</p>\n\n<pre><code>try:\n    f = open('some_file', 'r')\nexcept IOError as ex:\n    if ex.errno != errno.ENOENT:\n        raise\n    # it doesn't exist\nelse:\n    # it does and it's open\n</code></pre>\n\n<p>Also, for converting strings to integers.</p>\n\n<pre><code>try:\n    i = int(s)\nexcept ValueError:\n    print \"Not an integer! Please try again.\"\n    sys.exit(1)\n</code></pre>\n\n<p>Even importing optional modules...</p>\n\n<pre><code>try:\n    import readline\nexcept ImportError:\n    pass\n</code></pre>\n\n<h1>The LBYL way</h1>\n\n<p>The <code>hasattr</code> method, of course, works too.  This technique is called \"look before you leap\", or LBYL for short.</p>\n\n<pre><code># Cached attribute\nif not hasattr(self, 'big_object'):\n    big_object = CreateBigObject()\n    self.big_object = CreateBigObject()\nbig_object.do_something()\n</code></pre>\n\n<p>(The <code>hasattr</code> builtin actually behaves strangely in Python versions prior to 3.2 with regard to exceptions -- it will catch exceptions that it shouldn't -- but this is probably irrelevant, since such exceptions are unlikely.  The <code>hasattr</code> technique is also slower than <code>try/except</code>, but you don't call it often enough to care and the difference isn't very big.  Finally, <code>hasattr</code> isn't atomic so it could throw <code>AttributeError</code> if another thread deletes the attribute, but this is a far-fetched scenario and you'll need to be very careful around threads anyway.  I don't consider any of these three differences to be worth worrying about.)</p>\n\n<p>Using <code>hasattr</code> is much simpler than <code>try/except</code>, as long as all you need to know is whether the attribute exists.  The big issue for me is that the LBYL technique looks \"strange\", since as a Python programmer I'm more used to reading the EAFP technique.  If you rewrite the above examples so that they use the <code>LBYL</code> style, you get code that is either clumsy, outright incorrect, or too difficult to write.</p>\n\n<pre><code># Seems rather fragile...\nif re.match('^(:?0|-?[1-9][0-9]*)$', s):\n    i = int(s)\nelse:\n    print \"Not an integer! Please try again.\"\n    sys.exit(1)\n</code></pre>\n\n<p>And LBYL is sometimes outright incorrect:</p>\n\n<pre><code>if os.path.isfile('some_file'):\n    # At this point, some other program could\n    # delete some_file...\n    f = open('some_file', 'r')\n</code></pre>\n\n<p>If you want to write a LBYL function for importing optional modules, be my guest... it sounds like the function would be a total monster.</p>\n\n<h1>The getattr way</h1>\n\n<p>If you just need a default value, <code>getattr</code> is a shorter version of <code>try/except</code>.</p>\n\n<pre><code>x = getattr(self, 'x', default_value)\n</code></pre>\n\n<p>If the default value is expensive to construct, then you'll end up with something like this:</p>\n\n<pre><code>x = getattr(self, 'attr', None)\nif x is None:\n    x = CreateDefaultValue()\n    self.attr = x\n</code></pre>\n\n<p>Or if <code>None</code> is a possible value,</p>\n\n<pre><code>sentinel = object()\n\nx = getattr(self, 'attr', sentinel)\nif x is sentinel:\n    x = CreateDefaultValue()\n    self.attr = x\n</code></pre>\n\n<h1>Conclusion</h1>\n\n<p>Internally, the <code>getattr</code> and <code>hasattr</code> builtins just use <code>try/except</code> technique (except written in C).  So they all behave the same way where it counts, and picking the right one is due to a matter of circumstances and style.</p>\n\n<p>The <code>try/except</code> EAFP code will always rub some programmers the wrong way, and the <code>hasattr/getattr</code> LBYL code will irk other programmers.  They're both correct, and there's often no truly compelling reason to pick one or the other.  (Yet other programmers are disgusted that you would consider it normal for an attribute to be undefined, and some programmers are horrified that it's even possible to have an undefined attribute in Python.)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413078,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1331979645,
                    "last_edit_date": 1331979645,
                    "creation_date": 1331977214,
                    "answer_id": 9748889,
                    "question_id": 9748678,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>hasattr()</code> is the way<sup>*</sup>. </p>\n\n<p><code>a.__dict__</code> is ugly and it doesn't work in many cases. <code>hasattr()</code> actually tries to get attribute and catches <code>AttributeError</code> internally so it works even if you define custom <code>__getattr__()</code> method.</p>\n\n<p>To avoid requesting the attribute twice the third argument for <code>getattr()</code> could be used:</p>\n\n<pre><code>not_exist = object()\n\n# ...\nattr = getattr(obj, 'attr', not_exist)\nif attr is not_exist:\n   do_something_else()\nelse:\n   do_something(attr)\n</code></pre>\n\n<p>You could just use a default value instead of <code>not_exist</code> sentinel if it is more appropriate in your case.</p>\n\n<p>I don't like <code>try: do_something(x.attr) \\n except AttributeError: ..</code> it might hide <code>AttributeError</code> inside <code>do_something()</code> function.</p>\n\n<p><sup>*</sup><a href=\"http://bugs.python.org/issue9666\">Before Python 3.1 <code>hasattr()</code> suppressed all exceptions</a> (not only <code>AttributeError</code>) if it is not desirable <code>getattr()</code> should be used.</p>\n"
                }
            ]
        },
        {
            "53608653": [
                {
                    "owner": {
                        "account_id": 11900153,
                        "reputation": 71482,
                        "user_id": 8708364,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AMH4B.png?s=256",
                        "display_name": "U13-Forward",
                        "link": "https://stackoverflow.com/users/8708364/u13-forward"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1544141071,
                    "last_edit_date": 1544141071,
                    "creation_date": 1543912433,
                    "answer_id": 53608675,
                    "question_id": 53608653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Use this <code>df.columns</code> being sliced, and putted into a <code>df[...]</code> bracket:</p>\n\n<pre><code>print(df[df.columns[:-3]])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7681744,
                        "reputation": 34008,
                        "user_id": 5820814,
                        "user_type": "registered",
                        "accept_rate": 43,
                        "profile_image": "https://graph.facebook.com/1240609682619989/picture?type=large",
                        "display_name": "Mayank Porwal",
                        "link": "https://stackoverflow.com/users/5820814/mayank-porwal"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1543912588,
                    "creation_date": 1543912588,
                    "answer_id": 53608711,
                    "question_id": 53608653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Select everything <strong>EXCEPT the last 3 columns</strong>, do this using <code>iloc</code>: </p>\n\n<pre><code>In [1639]: df\nOut[1639]: \n   a  b  c  d  e\n0  1  3  2  2  2\n1  2  4  1  1  1\n\nIn [1640]: df.iloc[:,:-3]\nOut[1640]: \n   a  b\n0  1  3\n1  2  4\n</code></pre>\n"
                }
            ]
        },
        {
            "40992976": [
                {
                    "owner": {
                        "account_id": 8383924,
                        "reputation": 154,
                        "user_id": 6294917,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-CI3rgRljdsM/AAAAAAAAAAI/AAAAAAAAA24/GqVZeBJkMts/photo.jpg?sz=256",
                        "display_name": "Manuel Salgueiro",
                        "link": "https://stackoverflow.com/users/6294917/manuel-salgueiro"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1481023593,
                    "last_edit_date": 1481023593,
                    "creation_date": 1481019994,
                    "answer_id": 40993036,
                    "question_id": 40992976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Let's assume your DataFrame's name is <code>df</code>. </p>\n\n<p>If you want to create a new column with the seconds you should do the following:</p>\n\n<pre><code>df['newColumn'] = df['Time'].dt.total_seconds()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3465245,
                        "reputation": 860580,
                        "user_id": 2901002,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/hMDvl.jpg?s=256",
                        "display_name": "jezrael",
                        "link": "https://stackoverflow.com/users/2901002/jezrael"
                    },
                    "is_accepted": true,
                    "score": 60,
                    "last_activity_date": 1481020352,
                    "last_edit_date": 1481020352,
                    "creation_date": 1481019879,
                    "answer_id": 40993004,
                    "question_id": 40992976,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I think you need <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.total_seconds.html\" rel=\"noreferrer\"><code>total_seconds</code></a>:</p>\n\n<pre><code>print (df['col'].dt.total_seconds())\n</code></pre>\n\n<p>Sample:</p>\n\n<pre><code>df = pd.DataFrame({'date1':pd.date_range('2015-01-01', periods=3),\n                   'date2':pd.date_range('2015-01-01 02:00:00', periods=3, freq='23H')})\n\nprint (df)\n       date1               date2\n0 2015-01-01 2015-01-01 02:00:00\n1 2015-01-02 2015-01-02 01:00:00\n2 2015-01-03 2015-01-03 00:00:00\n\ndf['diff'] = df['date2'] - df['date1']\ndf['seconds'] = df['diff'].dt.total_seconds()\n\nprint (df)\n       date1               date2     diff  seconds\n0 2015-01-01 2015-01-01 02:00:00 02:00:00   7200.0\n1 2015-01-02 2015-01-02 01:00:00 01:00:00   3600.0\n2 2015-01-03 2015-01-03 00:00:00 00:00:00      0.0\n</code></pre>\n\n<hr>\n\n<pre><code>df['diff'] = df['date2'] - df['date1']\ndf['diff'] = df['diff'].dt.total_seconds()\n\nprint (df)\n       date1               date2    diff\n0 2015-01-01 2015-01-01 02:00:00  7200.0\n1 2015-01-02 2015-01-02 01:00:00  3600.0\n2 2015-01-03 2015-01-03 00:00:00     0.0\n</code></pre>\n\n<p>If need cast to <code>int</code>:</p>\n\n<pre><code>df['diff'] = df['date2'] - df['date1']\ndf['diff'] = df['diff'].dt.total_seconds().astype(int)\n\nprint (df)\n       date1               date2  diff\n0 2015-01-01 2015-01-01 02:00:00  7200\n1 2015-01-02 2015-01-02 01:00:00  3600\n2 2015-01-03 2015-01-03 00:00:00     0\n</code></pre>\n"
                }
            ]
        },
        {
            "10617045": [
                {
                    "owner": {
                        "account_id": 148195,
                        "reputation": 1978,
                        "user_id": 359793,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/ed8b8e2cc93d904c4936b16676467e47?s=256&d=identicon&r=PG",
                        "display_name": "David",
                        "link": "https://stackoverflow.com/users/359793/david"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1711294855,
                    "last_edit_date": 1711294855,
                    "creation_date": 1710544619,
                    "answer_id": 78170070,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The accepted answer didn't consider that the ops purely asked about array initialization, without any assignment.</p>\n<p>I've ran a benchmark on Python 3.12.2 with all the proposed solutions and this illustrates that using the built-in <code>array()</code> package approach is faster than using the classic <code>[None]*10000</code> approach, and should be the recommended way.</p>\n<p>Additionally, using numpy without initialization is another 10X faster.</p>\n<h2>Using plain Python</h2>\n<pre><code>def direct_none():\n    return [None]*10000\n\ndef direct_zero():\n    return [0]*10000\n\ndef inline_loop_none():\n    return [None for _ in range(10000)]\n\ndef inline_loop_zero():\n    return [0 for _ in range(10000)]\n\ndef loop_none():\n    x = []\n    for i in range(10000):\n            x.append(None)\n    return x\n\ndef loop_zero():\n    x = []\n    for i in range(10000):\n            x.append(0)\n    return x\n</code></pre>\n<h2>Using Python's builtin Array package:</h2>\n<pre><code>import array\nimport itertools\n\ndef array_zero_simple_int():\n    return array.array(&quot;i&quot;, (0,)) * 10000\n\ndef array_zero_simple_long():\n    return array.array(&quot;l&quot;, (0,)) * 10000\n\ndef array_zero_simple_float():\n    return array.array(&quot;f&quot;, (0,)) * 10000\n\ndef array_zero_simple_double():\n    return array.array(&quot;d&quot;, (0,)) * 10000\n\ndef array_zero_itertools():\n    return array.array(&quot;i&quot;, itertools.repeat(0, 10000))\n</code></pre>\n<h2>Using Numpy</h2>\n<pre><code>import numpy\n\ndef numpy_zero():\n    return numpy.zeros(10000)\n\ndef numpy_empty():\n    return numpy.empty(10000)\n</code></pre>\n<h2>Results</h2>\n<pre><code>import sys\nimport timeit\n\nfor fct in [direct_none, direct_zero, inline_loop_none, inline_loop_zero, loop_none, loop_zero, array_zero_simple_int, array_zero_simple_long, array_zero_simple_float, array_zero_simple_double, array_zero_itertools, numpy_zero, numpy_empty]:\n    timer = timeit.timeit(fct, number=1000)\n    r = fct()\n    el_type = type(r[9999]).__name__\n    size = sys.getsizeof(r)\n    print(f'{timer * 1000:7.3f} usec/loop for {fct.__name__}. Returns a {type(r).__name__} of {len(r)} {el_type} elements, and uses {size} bytes')\n\n 12.132 usec/loop for direct_none. Returns a list of 10000 NoneType elements, and uses 80056 bytes\n 12.132 usec/loop for direct_zero. Returns a list of 10000 int elements, and uses 80056 bytes\n150.838 usec/loop for inline_loop_none. Returns a list of 10000 NoneType elements, and uses 85176 bytes\n137.435 usec/loop for inline_loop_zero. Returns a list of 10000 int elements, and uses 85176 bytes\n\n167.163 usec/loop for loop_none. Returns a list of 10000 NoneType elements, and uses 85176 bytes\n167.730 usec/loop for loop_zero. Returns a list of 10000 int elements, and uses 85176 bytes\n  0.794 usec/loop for array_zero_simple_int. Returns a array of 10000 int elements, and uses 40080 bytes\n  1.328 usec/loop for array_zero_simple_long. Returns a array of 10000 int elements, and uses 80080 bytes\n  0.795 usec/loop for array_zero_simple_float. Returns a array of 10000 float elements, and uses 40080 bytes\n  1.262 usec/loop for array_zero_simple_double. Returns a array of 10000 float elements, and uses 80080 bytes\n303.050 usec/loop for array_zero_itertools. Returns a array of 10000 int elements, and uses 40420 bytes\n  1.330 usec/loop for numpy_zero. Returns a ndarray of 10000 float64 elements, and uses 80112 bytes\n  0.131 usec/loop for numpy_empty. Returns a ndarray of 10000 float64 elements, and uses 80112 bytes\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 252856,
                        "reputation": 15427,
                        "user_id": 531179,
                        "user_type": "registered",
                        "accept_rate": 65,
                        "profile_image": "https://i.sstatic.net/f3A2D.jpg?s=256",
                        "display_name": "ulidtko",
                        "link": "https://stackoverflow.com/users/531179/ulidtko"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1611335568,
                    "last_edit_date": 1611335568,
                    "creation_date": 1337166851,
                    "answer_id": 10617372,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Note also that when you used arrays in C++ you might have had somewhat different needs, which are solved in different ways in Python:</p>\n<ol>\n<li>You might have needed just a collection of items; Python lists deal with this usecase just perfectly.</li>\n<li>You might have needed a proper <strong>array</strong> of homogenous items. Python lists are <strong>not</strong> a good way to store <em>arrays</em>.</li>\n</ol>\n<p>Python solves the need in arrays by <strong><a href=\"https://numpy.org\" rel=\"nofollow noreferrer\">NumPy</a></strong>, which, among other neat things, has a way to create an <em>array</em> of known size:</p>\n<pre><code>from numpy import *\n\nl = zeros(10)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5890946,
                        "reputation": 22415,
                        "user_id": 4637585,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/dfeb2b97e1a8da96f2676b14b07c858f?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Rolf of Saxony",
                        "link": "https://stackoverflow.com/users/4637585/rolf-of-saxony"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1549039962,
                    "creation_date": 1549039962,
                    "answer_id": 54483838,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is more of a warning than an answer.<br>\nHaving seen in the other answers <code>my_list = [None] * 10</code>, I was tempted and set up an array like this <code>speakers = [['','']] * 10</code> and came to regret it immensely as the resulting <code>list</code> did not behave as I thought it should.<br>\nI resorted to:</p>\n\n<pre><code>speakers = []\nfor i in range(10):\n    speakers.append(['',''])\n</code></pre>\n\n<p>As <code>[['','']] * 10</code> appears to create an <code>list</code> where subsequent elements are a copy of the first element.<br>\nfor example:</p>\n\n<pre><code>&gt;&gt;&gt; n=[['','']]*10\n&gt;&gt;&gt; n\n[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][0] = \"abc\"\n&gt;&gt;&gt; n\n[['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', '']]\n&gt;&gt;&gt; n[0][1] = \"True\"\n&gt;&gt;&gt; n\n[['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True']]\n</code></pre>\n\n<p>Whereas with the <code>.append</code> option:</p>\n\n<pre><code>&gt;&gt;&gt; n=[]\n&gt;&gt;&gt; for i in range(10):\n...  n.append(['',''])\n... \n&gt;&gt;&gt; n\n[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][0] = \"abc\"\n&gt;&gt;&gt; n\n[['abc', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n&gt;&gt;&gt; n[0][1] = \"True\"\n&gt;&gt;&gt; n\n[['abc', 'True'], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]\n</code></pre>\n\n<p>I'm sure that the accepted answer by ninjagecko does attempt to mention this, sadly I was too thick to understand.<br>\nWrapping up, take care!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 14552,
                        "reputation": 89093,
                        "user_id": 30038,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://i.sstatic.net/mPvRH.jpg?s=256",
                        "display_name": "Vlad Bezden",
                        "link": "https://stackoverflow.com/users/30038/vlad-bezden"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1547823476,
                    "last_edit_date": 1547823476,
                    "creation_date": 1547823097,
                    "answer_id": 54256367,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can do it using <a href=\"https://docs.python.org/3/library/array.html\" rel=\"noreferrer\">array</a> module. array module is part of python standard library:</p>\n\n<pre><code>from array import array\nfrom itertools import repeat\n\na = array(\"i\", repeat(0, 10))\n# or\na = array(\"i\", [0]*10)\n</code></pre>\n\n<p><a href=\"https://docs.python.org/3/library/itertools.html?highlight=itertools%20repeat#itertools.repeat\" rel=\"noreferrer\">repeat</a> function repeats 0 value 10 times. It's more memory efficient than [0]*10, since it doesn't allocate memory, but repeats returning the same number x number of times.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10282620,
                        "reputation": 31,
                        "user_id": 7587127,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/d1d8838e45f06c132f796ab62966af4b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Mishaa1",
                        "link": "https://stackoverflow.com/users/7587127/mishaa1"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1498744806,
                    "creation_date": 1498744806,
                    "answer_id": 44827296,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>fix_array = numpy.empty(n, dtype = object)\n</code></pre>\n\n<p>where n is the size of your array</p>\n\n<p>though it works, it may not be the best idea as you have to import a library for this purpose. Hope this helps!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 365893,
                        "reputation": 90899,
                        "user_id": 711085,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/fabf3436107ffee76255957a7732d0f1?s=256&d=identicon&r=PG",
                        "display_name": "ninjagecko",
                        "link": "https://stackoverflow.com/users/711085/ninjagecko"
                    },
                    "is_accepted": true,
                    "score": 130,
                    "last_activity_date": 1464955791,
                    "last_edit_date": 1495542874,
                    "creation_date": 1337166321,
                    "answer_id": 10617221,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>(tl;dr: The exact answer to your question is <code>numpy.empty</code> or <code>numpy.empty_like</code>, but you likely don't care and can get away with using <code>myList = [None]*10000</code>.) </p>\n\n<h1>Simple methods</h1>\n\n<p>You can initialize your list to all the same element. Whether it semantically makes sense to use a non-numeric value (that will give an error later if you use it, which is a good thing) or something like 0 (unusual? maybe useful if you're writing a sparse matrix or the 'default' value should be 0 and you're not worried about bugs) is up to you:</p>\n\n<pre><code>&gt;&gt;&gt; [None for _ in range(10)]\n[None, None, None, None, None, None, None, None, None, None]\n</code></pre>\n\n<p>(Here <code>_</code> is just a variable name, you could have used <code>i</code>.)</p>\n\n<p>You can also do so like this:</p>\n\n<pre><code>&gt;&gt;&gt; [None]*10\n[None, None, None, None, None, None, None, None, None, None]\n</code></pre>\n\n<p>You probably don't need to optimize this. You can also append to the array every time you need to:</p>\n\n<pre><code>&gt;&gt;&gt; x = []\n&gt;&gt;&gt; for i in range(10):\n&gt;&gt;&gt;    x.append(i)\n</code></pre>\n\n<hr>\n\n<h1>Performance comparison of simple methods</h1>\n\n<p>Which is best?</p>\n\n<pre><code>&gt;&gt;&gt; def initAndWrite_test():\n...  x = [None]*10000\n...  for i in range(10000):\n...   x[i] = i\n... \n&gt;&gt;&gt; def initAndWrite2_test():\n...  x = [None for _ in range(10000)]\n...  for i in range(10000):\n...   x[i] = i\n... \n&gt;&gt;&gt; def appendWrite_test():\n...  x = []\n...  for i in range(10000):\n...   x.append(i)\n</code></pre>\n\n<p>Results in python2.7:</p>\n\n<pre><code>&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; for f in [initAndWrite_test, initAndWrite2_test, appendWrite_test]:\n...  print('{} takes {} usec/loop'.format(f.__name__, timeit.timeit(f, number=1000)*1000))\n... \ninitAndWrite_test takes 714.596033096 usec/loop\ninitAndWrite2_test takes 981.526136398 usec/loop\nappendWrite_test takes 908.597946167 usec/loop\n</code></pre>\n\n<p>Results in python 3.2:</p>\n\n<pre><code>initAndWrite_test takes 641.3581371307373 usec/loop\ninitAndWrite2_test takes 1033.6499214172363 usec/loop\nappendWrite_test takes 895.9040641784668 usec/loop\n</code></pre>\n\n<p>As we can see, it is likely better to do the idiom <code>[None]*10000</code> in both python2 and python3. However, if one is doing anything more complicated than assignment (such as anything complicated to generate or process every element in the list), then the overhead becomes a meaninglessly small fraction of the cost. That is, such optimization is premature to worry about if you're doing anything reasonable with the elements of your list.</p>\n\n<hr>\n\n<h1>Uninitialized memory</h1>\n\n<p>These are all however inefficient because they go through memory, writing something in the process. In C this is different: an uninitialized array is filled with random garbage memory (sidenote: that has been reallocated from the system, and can be a <a href=\"https://stackoverflow.com/q/12095135/711085\">security risk</a> when you allocate or fail to mlock and/or fail to delete memory when closing the program). This is a design choice, designed for speedup: the makers of the C language thought that it was better not to automatically initialize memory, and that was the correct choice.</p>\n\n<p>This is not an asymptotic speedup (because it's <code>O(N)</code>), but for example you wouldn't need to first initialize your entire memory block before you overwrite with stuff you actually care about. This, if it were possible, is equivalent to something like (pseudo-code) <code>x = list(size=10000)</code>.</p>\n\n<p>If you want something similar in python, you can use the <code>numpy</code> numerical matrix/N-dimensional-array manipulation package. Specifically, <a href=\"http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html\" rel=\"noreferrer\"><code>numpy.empty</code></a> or <a href=\"http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty_like.html\" rel=\"noreferrer\"><code>numpy.empty_like</code></a></p>\n\n<p>That is the real answer to your question.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1036231,
                        "reputation": 7068,
                        "user_id": 1043456,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/gEo3o.jpg?s=256",
                        "display_name": "jadkik94",
                        "link": "https://stackoverflow.com/users/1043456/jadkik94"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1337166726,
                    "creation_date": 1337166726,
                    "answer_id": 10617340,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use this: <code>[None] * 10</code>. But this won't be \"fixed size\" you can still append, remove ... This is how lists are made.</p>\n\n<p>You could make it a tuple (<code>tuple([None] * 10)</code>) to fix its width, but again, you won't be able to change it (not in all cases, only if the items stored are mutable).</p>\n\n<p>Another option, closer to your requirement, is not a list, but a <code>collections.deque</code> with a maximum length. It's the maximum size, but it could be smaller.</p>\n\n<pre><code>import collections\nmax_4_items = collections.deque([None] * 4, maxlen=4)\n</code></pre>\n\n<p>But, just use a list, and get used to the \"pythonic\" way of doing things.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 317442,
                        "reputation": 7241,
                        "user_id": 634135,
                        "user_type": "registered",
                        "accept_rate": 61,
                        "profile_image": "https://www.gravatar.com/avatar/e663a833765a8e904f7fe53827cc376e?s=256&d=identicon&r=PG",
                        "display_name": "cobie",
                        "link": "https://stackoverflow.com/users/634135/cobie"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1337166098,
                    "creation_date": 1337166098,
                    "answer_id": 10617162,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>your_list = [None]*size_required\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 125976,
                        "reputation": 73042,
                        "user_id": 322129,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/6f1b006173728a91d96289dd324f6271?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Russell Dias",
                        "link": "https://stackoverflow.com/users/322129/russell-dias"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1337165858,
                    "creation_date": 1337165858,
                    "answer_id": 10617105,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Python has nothing built-in to support this. Do you really need to optimize it so much as I don't think that appending will add <em>that</em> much overhead.</p>\n\n<p>However, you can do something like <code>l = [None] * 1000</code>.</p>\n\n<p>Alternatively, you could use a generator.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1484087,
                        "reputation": 1603,
                        "user_id": 1392706,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7df9602eeba7af579f708179876600c3?s=256&d=identicon&r=PG",
                        "display_name": "BluePeppers",
                        "link": "https://stackoverflow.com/users/1392706/bluepeppers"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1337165845,
                    "creation_date": 1337165845,
                    "answer_id": 10617101,
                    "question_id": 10617045,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's not really the python way to initialize lists like this. Anyway, you can initialize a list like this:</p>\n\n<pre><code>&gt;&gt;&gt; l = [None] * 4\n&gt;&gt;&gt; l\n[None, None, None, None]\n</code></pre>\n"
                }
            ]
        },
        {
            "3203286": [
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 876871,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1590083137,
                    "last_edit_date": 1590083137,
                    "creation_date": 1278591528,
                    "answer_id": 3203434,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This will make <code>Foo.number</code> a <em>read-only</em> property:</p>\n\n<pre><code>class MetaFoo(type):\n    @property\n    def number(cls):\n        return cls.x\n\nclass Foo(object, metaclass=MetaFoo):\n    x = 4\n\nprint(Foo.number)\n# 4\n\nFoo.number = 6\n# AttributeError: can't set attribute\n</code></pre>\n\n<hr>\n\n<p><strong>Explanation</strong>: The usual scenario when using <code>@property</code> looks like this:</p>\n\n<pre><code>class Foo(object):\n    @property\n    def number(self):\n        ...\nfoo = Foo()\n</code></pre>\n\n<p>A property defined in <code>Foo</code> is read-only with respect to its instances. That is, <code>foo.number = 6</code> would raise an <code>AttributeError</code>.</p>\n\n<p>Analogously, if you want <code>Foo.number</code> to raise an <code>AttributeError</code> you would need to setup a property defined in <code>type(Foo)</code>. Hence the need for a metaclass.</p>\n\n<hr>\n\n<p>Note that this read-onlyness is not immune from hackers.\nThe property can be made writable by changing Foo's\nclass:</p>\n\n<pre><code>class Base(type): pass\nFoo.__class__ = Base\n\n# makes Foo.number a normal class attribute\nFoo.number = 6   \nprint(Foo.number)\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>6\n</code></pre>\n\n<p>or, if you wish to make <code>Foo.number</code> a settable property,</p>\n\n<pre><code>class WritableMetaFoo(type): \n    @property\n    def number(cls):\n        return cls.x\n    @number.setter\n    def number(cls, value):\n        cls.x = value\nFoo.__class__ = WritableMetaFoo\n\n# Now the assignment modifies `Foo.x`\nFoo.number = 6   \nprint(Foo.number)\n</code></pre>\n\n<p>also prints</p>\n\n<pre><code>6\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 906277,
                        "reputation": 233,
                        "user_id": 941102,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/265fc109b3b78378227e0a52ddf6fc4e?s=256&d=identicon&r=PG",
                        "display_name": "Michael Reinhardt",
                        "link": "https://stackoverflow.com/users/941102/michael-reinhardt"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1527187005,
                    "creation_date": 1527187005,
                    "answer_id": 50516046,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The solution of Mikhail Gerasimov is quite complete. Unfortunately, it was one drawback. If you have a class using his classproperty, no child class can use it due to an \n<code>TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases</code> with <code>class Wrapper</code>.</p>\n\n<p>Fortunately, this can be fixed. Just inherit from the metaclass of the given class when creating <code>class Meta</code>.</p>\n\n<pre><code>def classproperty_support(cls):\n  \"\"\"\n  Class decorator to add metaclass to our class.\n  Metaclass uses to add descriptors to class attributes, see:\n  http://stackoverflow.com/a/26634248/1113207\n  \"\"\"\n  # Use type(cls) to use metaclass of given class\n  class Meta(type(cls)): \n      pass\n\n  for name, obj in vars(cls).items():\n      if isinstance(obj, classproperty):\n          setattr(Meta, name, property(obj.fget, obj.fset, obj.fdel))\n\n  class Wrapper(cls, metaclass=Meta):\n      pass\n  return Wrapper\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1125914,
                        "reputation": 39356,
                        "user_id": 1113207,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4e332fe1cf22e027fd875b467a835ae4?s=256&d=identicon&r=PG",
                        "display_name": "Mikhail Gerasimov",
                        "link": "https://stackoverflow.com/users/1113207/mikhail-gerasimov"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1456444903,
                    "creation_date": 1456444903,
                    "answer_id": 35640842,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Problem with solutions above is that it wouldn't work for accessing class variables from instance variable:</p>\n\n<pre><code>print(Foo.number)\n# 4\n\nf = Foo()\nprint(f.number)\n# 'Foo' object has no attribute 'number'\n</code></pre>\n\n<p>Moreover, using metaclass explicit is not so nice, as using regular <code>property</code> decorator.</p>\n\n<p>I tried to solve this problems. Here how it works now:</p>\n\n<pre><code>@classproperty_support\nclass Bar(object):\n    _bar = 1\n\n    @classproperty\n    def bar(cls):\n        return cls._bar\n\n    @bar.setter\n    def bar(cls, value):\n        cls._bar = value\n\n\n# @classproperty should act like regular class variable.\n# Asserts can be tested with it.\n# class Bar:\n#     bar = 1\n\n\nassert Bar.bar == 1\n\nBar.bar = 2\nassert Bar.bar == 2\n\nfoo = Bar()\nbaz = Bar()\nassert foo.bar == 2\nassert baz.bar == 2\n\nBar.bar = 50\nassert baz.bar == 50\nassert foo.bar == 50\n</code></pre>\n\n<p>As you see, we have <code>@classproperty</code> that works same way as <code>@property</code> for class variables. Only thing we will need is additional <code>@classproperty_support</code> class decorator.</p>\n\n<p>Solution also works for read-only class properties.</p>\n\n<p>Here's implementation:</p>\n\n<pre><code>class classproperty:\n    \"\"\"\n    Same as property(), but passes obj.__class__ instead of obj to fget/fset/fdel.\n    Original code for property emulation:\n    https://docs.python.org/3.5/howto/descriptor.html#properties\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n        self.fget = fget\n        self.fset = fset\n        self.fdel = fdel\n        if doc is None and fget is not None:\n            doc = fget.__doc__\n        self.__doc__ = doc\n\n    def __get__(self, obj, objtype=None):\n        if obj is None:\n            return self\n        if self.fget is None:\n            raise AttributeError(\"unreadable attribute\")\n        return self.fget(obj.__class__)\n\n    def __set__(self, obj, value):\n        if self.fset is None:\n            raise AttributeError(\"can't set attribute\")\n        self.fset(obj.__class__, value)\n\n    def __delete__(self, obj):\n        if self.fdel is None:\n            raise AttributeError(\"can't delete attribute\")\n        self.fdel(obj.__class__)\n\n    def getter(self, fget):\n        return type(self)(fget, self.fset, self.fdel, self.__doc__)\n\n    def setter(self, fset):\n        return type(self)(self.fget, fset, self.fdel, self.__doc__)\n\n    def deleter(self, fdel):\n        return type(self)(self.fget, self.fset, fdel, self.__doc__)\n\n\ndef classproperty_support(cls):\n    \"\"\"\n    Class decorator to add metaclass to our class.\n    Metaclass uses to add descriptors to class attributes, see:\n    http://stackoverflow.com/a/26634248/1113207\n    \"\"\"\n    class Meta(type):\n        pass\n\n    for name, obj in vars(cls).items():\n        if isinstance(obj, classproperty):\n            setattr(Meta, name, property(obj.fget, obj.fset, obj.fdel))\n\n    class Wrapper(cls, metaclass=Meta):\n        pass\n    return Wrapper\n</code></pre>\n\n<p><strong>Note:</strong> code isn't tested much, feel free to note if it doesn't work as you expect.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 300820,
                        "reputation": 3418,
                        "user_id": 608191,
                        "user_type": "registered",
                        "accept_rate": 27,
                        "profile_image": "https://www.gravatar.com/avatar/5afee2f4902e5bbf78c8dc03d1c96ee0?s=256&d=identicon&r=PG",
                        "display_name": "Viktor Haag",
                        "link": "https://stackoverflow.com/users/608191/viktor-haag"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1414596200,
                    "last_edit_date": 1495535443,
                    "creation_date": 1414596200,
                    "answer_id": 26634248,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I agree with <a href=\"https://stackoverflow.com/a/3203434/608191\">unubtu's answer</a>; it seems to work, however, it doesn't work with this precise syntax on <strong>Python 3</strong> (specifically, Python 3.4 is what I struggled with). Here's how one must form the pattern under Python 3.4 to make things work, it seems:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class MetaFoo(type):\n   @property\n   def number(cls):\n      return cls.x\n\nclass Foo(metaclass=MetaFoo):\n   x = 4\n\nprint(Foo.number)\n# 4\n\nFoo.number = 6\n# AttributeError: can't set attribute\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10108,
                        "reputation": 535609,
                        "user_id": 18936,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3f6f1bea81a68b2f1cfe3efbb9be94bc?s=256&d=identicon&r=PG",
                        "display_name": "bobince",
                        "link": "https://stackoverflow.com/users/18936/bobince"
                    },
                    "is_accepted": true,
                    "score": 54,
                    "last_activity_date": 1278593034,
                    "creation_date": 1278593034,
                    "answer_id": 3203659,
                    "question_id": 3203286,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The <code>property</code> descriptor always returns itself when accessed from a class (ie. when <code>instance</code> is <code>None</code> in its <code>__get__</code> method).</p>\n\n<p>If that's not what you want, you can write a new descriptor that always uses the class object (<code>owner</code>) instead of the instance:</p>\n\n<pre><code>&gt;&gt;&gt; class classproperty(object):\n...     def __init__(self, getter):\n...         self.getter= getter\n...     def __get__(self, instance, owner):\n...         return self.getter(owner)\n... \n&gt;&gt;&gt; class Foo(object):\n...     x= 4\n...     @classproperty\n...     def number(cls):\n...         return cls.x\n... \n&gt;&gt;&gt; Foo().number\n4\n&gt;&gt;&gt; Foo.number\n4\n</code></pre>\n"
                }
            ]
        },
        {
            "19095774": [
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599168,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 27,
                    "last_activity_date": 1380550582,
                    "last_edit_date": 1380550582,
                    "creation_date": 1380549070,
                    "answer_id": 19095982,
                    "question_id": 19095774,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>As long as your input is within the half-open interval (0, 1] (not including 0), you are fine.  You can't be too close to zero:</p>\n\n<pre><code>&gt;&gt;&gt; math.log(sys.float_info.min)\n-708.3964185322641\n</code></pre>\n\n<p>So simply checking for exactly zero (maybe as the result of an underflow) should be enough, or alternatively catch the exception and handle it.</p>\n\n<p><strong>EDIT</strong>: This also holds for the denormal minimum floating point number:</p>\n\n<pre><code>&gt;&gt;&gt; math.log(sys.float_info.min * sys.float_info.epsilon)\n-744.4400719213812\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 16202,
                        "reputation": 47462,
                        "user_id": 35060,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=256&d=identicon&r=PG",
                        "display_name": "ismail",
                        "link": "https://stackoverflow.com/users/35060/ismail"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1380549004,
                    "creation_date": 1380549004,
                    "answer_id": 19095955,
                    "question_id": 19095774,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You are going over the supported precision, use <a href=\"http://docs.python.org/2/library/decimal.html\" rel=\"noreferrer\">Decimal</a> class instead.</p>\n\n<pre><code>&gt;&gt;&gt; from math import log\n&gt;&gt;&gt; from decimal import Decimal\n\n&gt;&gt;&gt; d = Decimal('1E-1024')\n&gt;&gt;&gt; log(d)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: math domain error\n&gt;&gt;&gt; d.ln()\nDecimal('-2357.847135225902780434423250')\n</code></pre>\n"
                }
            ]
        },
        {
            "4382945": [
                {
                    "owner": {
                        "account_id": 191900,
                        "reputation": 66599,
                        "user_id": 432745,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=256&d=identicon&r=PG",
                        "display_name": "pyfunc",
                        "link": "https://stackoverflow.com/users/432745/pyfunc"
                    },
                    "is_accepted": true,
                    "score": 340,
                    "last_activity_date": 1638392606,
                    "last_edit_date": 1638392606,
                    "creation_date": 1291766531,
                    "answer_id": 4382964,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Something along these lines, using ABC</p>\n<pre><code>import abc\n\nclass Shape(object):\n    __metaclass__ = abc.ABCMeta\n    \n    @abc.abstractmethod\n    def method_to_implement(self, input):\n        &quot;&quot;&quot;Method documentation&quot;&quot;&quot;\n        return\n    \n</code></pre>\n<p>Also read this good tutorial: <a href=\"https://pymotw.com/3/abc/\" rel=\"noreferrer\">https://pymotw.com/3/abc/</a></p>\n<p>You can also check out <strong>zope.interface</strong> which was used prior to introduction of ABC in python.</p>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/zope.interface\" rel=\"noreferrer\">http://pypi.python.org/pypi/zope.interface</a></li>\n<li><a href=\"https://zopeinterface.readthedocs.io/en/latest/README.html\" rel=\"noreferrer\">https://zopeinterface.readthedocs.io/en/latest/README.html</a></li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 4353517,
                        "reputation": 7080,
                        "user_id": 3552975,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/Lr5jY.jpg?s=256",
                        "display_name": "Lerner Zhang",
                        "link": "https://stackoverflow.com/users/3552975/lerner-zhang"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1578422272,
                    "last_edit_date": 1578422272,
                    "creation_date": 1497347012,
                    "answer_id": 44517841,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can use six and abc to construct a class for both python2 and python3 efficiently as follows: </p>\n\n<pre><code>import six\nimport abc\n\n@six.add_metaclass(abc.ABCMeta)\nclass MyClass(object):\n    \"\"\"\n    documentation\n    \"\"\"\n\n    @abc.abstractmethod\n    def initialize(self, para=None):\n        \"\"\"\n        documentation\n        \"\"\"\n        raise NotImplementedError\n</code></pre>\n\n<p><a href=\"https://pymotw.com/3/abc/\" rel=\"nofollow noreferrer\">This is an awesome document of it.</a> </p>\n"
                },
                {
                    "owner": {
                        "account_id": 466440,
                        "reputation": 7498,
                        "user_id": 871196,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/A5j1M.png?s=256",
                        "display_name": "demented hedgehog",
                        "link": "https://stackoverflow.com/users/871196/demented-hedgehog"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1458361051,
                    "last_edit_date": 1458361051,
                    "creation_date": 1458360159,
                    "answer_id": 36097662,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Abstract base classes are deep magic.  Periodically I implement something using them and am amazed at my own cleverness, very shortly afterwards I find myself completely confused by my own cleverness (this may well just be a personal limitation though).</p>\n\n<p>Another way of doing this (should be in the python std libs if you ask me) is to make a decorator.</p>\n\n<pre><code>def abstractmethod(method):\n    \"\"\"\n    An @abstractmethod member fn decorator.\n    (put this in some library somewhere for reuse).\n\n    \"\"\"\n    def default_abstract_method(*args, **kwargs):\n        raise NotImplementedError('call to abstract method ' \n                                  + repr(method))\n    default_abstract_method.__name__ = method.__name__    \n    return default_abstract_method\n\n\nclass Shape(object):\n\n    def __init__(self, shape_name):\n       self.shape = shape_name\n\n    @abstractmethod\n    def foo(self):\n        print \"bar\"\n        return\n\nclass Rectangle(Shape):\n    # note you don't need to do the constructor twice either\n    pass  \n\nr = Rectangle(\"x\")\nr.foo()\n</code></pre>\n\n<p>I didn't write the decorator.  It just occurred to me someone would have.  You can find it here: <a href=\"http://code.activestate.com/recipes/577666-abstract-method-decorator/\" rel=\"noreferrer\">http://code.activestate.com/recipes/577666-abstract-method-decorator/</a>  Good one jimmy2times.  Note the discussion at the bottom of that page r.e. type safety of the decorator.  (That could be fixed with the inspect module if anyone was so inclined). </p>\n"
                },
                {
                    "owner": {
                        "account_id": 133903,
                        "reputation": 25988,
                        "user_id": 335627,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a5ae92171e80ebdd258752e6e42687c9?s=256&d=identicon&r=PG",
                        "display_name": "kevpie",
                        "link": "https://stackoverflow.com/users/335627/kevpie"
                    },
                    "is_accepted": false,
                    "score": 370,
                    "last_activity_date": 1335126526,
                    "last_edit_date": 1335126526,
                    "creation_date": 1291767901,
                    "answer_id": 4383103,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Before abc was introduced you would see this frequently.</p>\n\n<pre><code>class Base(object):\n    def go(self):\n        raise NotImplementedError(\"Please Implement this method\")\n\n\nclass Specialized(Base):\n    def go(self):\n        print \"Consider me implemented\"\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183585,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 48,
                    "last_activity_date": 1291786659,
                    "last_edit_date": 1291786659,
                    "creation_date": 1291766480,
                    "answer_id": 4382961,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>See the <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">abc module</a>. Basically, you define <code>__metaclass__ = abc.ABCMeta</code> on the class, then decorate each abstract method with <code>@abc.abstractmethod</code>. Classes derived from this class cannot then be instantiated unless all abstract methods have been overridden.</p>\n\n<p>If your class is already using a metaclass, derive it from <code>ABCMeta</code> rather than <code>type</code> and you can continue to use your own metaclass.</p>\n\n<p>A cheap alternative (and the best practice before the <code>abc</code> module was introduced) would be to have all your abstract methods just raise an exception (<code>NotImplementedError</code> is a good one) so that classes derived from it would have to override that method to be useful. </p>\n\n<p>However, the <code>abc</code> solution is better because it keeps such classes from being instantiated at all (i.e., it \"fails faster\"), and also because you can provide a default or base implementation of each method that can be reached using the <code>super()</code> function in derived classes.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 110293,
                        "reputation": 3076,
                        "user_id": 291907,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1a1e4c70bc81edc85371bc8777579446?s=256&d=identicon&r=PG",
                        "display_name": "Adam Norberg",
                        "link": "https://stackoverflow.com/users/291907/adam-norberg"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1291783175,
                    "last_edit_date": 1291783175,
                    "creation_date": 1291766631,
                    "answer_id": 4382972,
                    "question_id": 4382945,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can't, with language primitives. As has been called out, the <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">abc package</a> provides this functionality in Python 2.6 and later, but there are no options for Python 2.5 and earlier. The <code>abc</code> package is not a new feature of Python; instead, it adds functionality by adding explicit \"does this class say it does this?\" checks, with manually-implemented consistency checks to cause an error during initialization if such declarations are made falsely.</p>\n\n<p>Python is a militantly dynamically-typed language. It does not specify language primitives to allow you to prevent a program from compiling because an object does not match type requirements; this can only be discovered at run time. If you require that a subclass implement a method, document that, and then just call the method in the blind hope that it will be there.</p>\n\n<p>If it's there, fantastic, it simply works; this is called <a href=\"http://en.wikipedia.org/wiki/Duck_typing\" rel=\"noreferrer\">duck typing</a>, and your object has quacked enough like a duck to satisfy the interface. This works just fine <em>even if <code>self</code> is the object you're calling such a method on</em>, for the purposes of mandatory overrides due to base methods that need specific implementations of features (generic functions), because <code>self</code> is a convention, not anything actually special.</p>\n\n<p>The exception is in <code>__init__</code>, because when your initializer is being called, the derived type's initializer hasn't, so it hasn't had the opportunity to staple its own methods onto the object yet.</p>\n\n<p>If the method was't implemented, you'll get an AttributeError (if it's not there at all) or a TypeError (if something by that name is there but it's not a function or it didn't have that signature). It's up to you how you handle that- either call it programmer error and let it crash the program (and it \"should\" be obvious to a python developer what causes that kind of error there- an unmet duck interface), or catch and handle those exceptions when you discover that your object didn't support what you wish it did. Catching AttributeError and TypeError is important in a lot of situations, actually.</p>\n"
                }
            ]
        },
        {
            "2244836": [
                {
                    "owner": {
                        "account_id": 441885,
                        "reputation": 62903,
                        "user_id": 832230,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/VqecB.png?s=256",
                        "display_name": "Asclepius",
                        "link": "https://stackoverflow.com/users/832230/asclepius"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1565456440,
                    "creation_date": 1565456440,
                    "answer_id": 57444083,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As of 2019, <a href=\"https://pypi.org/project/atoma/\" rel=\"nofollow noreferrer\"><strong><code>atoma</code></strong></a> is a possible alternative to <code>feedparser</code>, although I have not used it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 32514,
                        "reputation": 76592,
                        "user_id": 90308,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=256&d=identicon&r=PG",
                        "display_name": "FogleBird",
                        "link": "https://stackoverflow.com/users/90308/foglebird"
                    },
                    "is_accepted": true,
                    "score": 59,
                    "last_activity_date": 1550498571,
                    "last_edit_date": 1550498571,
                    "creation_date": 1265901482,
                    "answer_id": 2245392,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Using <a href=\"https://pypi.org/project/feedparser/\" rel=\"noreferrer\">feedparser</a> is a much better option than rolling your own with minidom or BeautifulSoup.</p>\n\n<ul>\n<li>It normalizes the differences between all versions of RSS and Atom so you don't have to have different code for each type.</li>\n<li>It's good about detecting different date formats and other variations in feeds.</li>\n<li>It automatically follows HTTP redirects.</li>\n<li>It sanitizes HTML content.</li>\n<li>It has support for ETag and Last-Modified headers so you can see if the feed has changed just by downloading the HTTP header and not the whole feed.</li>\n<li>It has support for authenticated feeds.</li>\n<li>It has support for HTTP proxies.</li>\n</ul>\n\n<p>Like others have mentioned, just try it.  It's like 2 lines of code to parse a feed.  My only complaint is that it just uses dictionaries as its data model and some attributes can be missing from the dictionary if they weren't in the feed, so you have to check for that in your code.  But the documentation is very clear on which attributes will always be in the dictionary and which might be missing.</p>\n\n<p>Finally, I can vouch for it, as I've written an application that uses it.  See here: <a href=\"http://www.feednotifier.com/\" rel=\"noreferrer\">http://www.feednotifier.com/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 62427,
                        "reputation": 3800,
                        "user_id": 185510,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/604d54fe0ba81afc693c64b9a66b0960?s=256&d=identicon&r=PG",
                        "display_name": "Andre Miras",
                        "link": "https://stackoverflow.com/users/185510/andre-miras"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1408053414,
                    "creation_date": 1408053414,
                    "answer_id": 25318203,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I know this is a very old topic, but for what it worth, I was using feedparser (Universal feed parser) version 5.1.3 and I recently swiched to <a href=\"https://github.com/jmoiron/speedparser\" rel=\"nofollow\">speedparser</a> (0.1.8) for performance reasons. It has pretty much the same interfaces, but run faster.</p>\n\n<p>I'm using it for an amateur <a href=\"https://github.com/kivy/python-for-android\" rel=\"nofollow\">Python-for-Android</a> application and speedparser runs about 5 times faster on my feeds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 24717,
                        "reputation": 272182,
                        "user_id": 63051,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/b4b87a82355f286bb410cc1854389226?s=256&d=identicon&r=PG",
                        "display_name": "flybywire",
                        "link": "https://stackoverflow.com/users/63051/flybywire"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1265902150,
                    "last_edit_date": 1265902150,
                    "creation_date": 1265901408,
                    "answer_id": 2245384,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>Feedparser is very powerful, configurable and sooo easy to use. A very friendly learning curve, if at all.</strong></p>\n\n<p><strong>Example</strong></p>\n\n<p>Programatically determine how many answers your question has:</p>\n\n<pre><code>easy_install feedparser\npython -c 'import feedparser; print len(feedparser.parse(\"http://bit.ly/c785aj\")[\"entries\"])'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24717,
                        "reputation": 272182,
                        "user_id": 63051,
                        "user_type": "registered",
                        "accept_rate": 95,
                        "profile_image": "https://www.gravatar.com/avatar/b4b87a82355f286bb410cc1854389226?s=256&d=identicon&r=PG",
                        "display_name": "flybywire",
                        "link": "https://stackoverflow.com/users/63051/flybywire"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1265901990,
                    "creation_date": 1265901990,
                    "answer_id": 2245462,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I Strongly recommend feedparser.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 85867,
                        "reputation": 971,
                        "user_id": 239140,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/dff08bf764c02f733d2eb239b54759ff?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "owo",
                        "link": "https://stackoverflow.com/users/239140/owo"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1265900492,
                    "creation_date": 1265900492,
                    "answer_id": 2245280,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you want an alternative, try xml.dom.minidom.\nLike \"Django is Python\", \"RSS is XML\".</p>\n"
                },
                {
                    "owner": {
                        "account_id": 56396,
                        "reputation": 176,
                        "user_id": 168934,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/951e04baaef9ea5e085fc69263272733?s=256&d=identicon&r=PG",
                        "display_name": "ZenGyro",
                        "link": "https://stackoverflow.com/users/168934/zengyro"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1265900450,
                    "creation_date": 1265900450,
                    "answer_id": 2245273,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>In answer to your followup. You could use BeautifulSoup - but feedparser is much better geared towards RSS handing. </p>\n\n<p>Not to snark - but have you read feedparsers <a href=\"http://www.feedparser.org/docs/\" rel=\"nofollow noreferrer\">documentation</a>? I don't know how it could be simpler to use. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 27531,
                        "reputation": 5777,
                        "user_id": 72784,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/d7f633334011a5923b4dc743075b57eb?s=256&d=identicon&r=PG",
                        "display_name": "piotr",
                        "link": "https://stackoverflow.com/users/72784/piotr"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1265896762,
                    "creation_date": 1265896762,
                    "answer_id": 2244847,
                    "question_id": 2244836,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://www.feedparser.org/\" rel=\"nofollow noreferrer\">http://www.feedparser.org/</a></p>\n\n<p>First hit on G.</p>\n"
                }
            ]
        },
        {
            "893162": [
                {
                    "owner": {
                        "account_id": 127000,
                        "reputation": 13343,
                        "user_id": 323874,
                        "user_type": "registered",
                        "accept_rate": 89,
                        "profile_image": "https://www.gravatar.com/avatar/281b7c1c63aaeb7acf149cc7d87f1b44?s=256&d=identicon&r=PG",
                        "display_name": "mindthief",
                        "link": "https://stackoverflow.com/users/323874/mindthief"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1671357787,
                    "last_edit_date": 1671357787,
                    "creation_date": 1354743967,
                    "answer_id": 13733057,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You might want to look into <a href=\"https://eclim.org/\" rel=\"nofollow noreferrer\">Eclim</a>, an Eclipse server that allows you to use Eclipse functionality from within your favorite text editor. For python-related functionality, it uses <a href=\"https://rope.sourceforge.net/\" rel=\"nofollow noreferrer\">Rope</a>, <a href=\"https://pypi.org/project/pyflakes/\" rel=\"nofollow noreferrer\">PyFlakes</a>, and <a href=\"https://web.archive.org/web/20220321195444/https://www.logilab.org/857\" rel=\"nofollow noreferrer\">PyLint</a> under the hood.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2643420,
                        "reputation": 1861,
                        "user_id": 2286617,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LlxFO.png?s=256",
                        "display_name": "Jan K. S.",
                        "link": "https://stackoverflow.com/users/2286617/jan-k-s"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1671357772,
                    "last_edit_date": 1671357772,
                    "creation_date": 1366560901,
                    "answer_id": 16133288,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I've searched on Google for an app like this for a while, and I've found only options with heavy and ugly interfaces.</p>\n<p>Then I opened Mac App Store and found <a href=\"https://web.archive.org/web/20141109143606/http://krillapps.com:80/coderunner/\" rel=\"nofollow noreferrer\">CodeRunner</a>. Very nice and clean interface. Support many languages like Python, Lua, Perl, Ruby, Javascript, etc. The price is U$10, but it's worth it!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10893,
                        "reputation": 49499,
                        "user_id": 20774,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/3e32e31d4c24c1558abd6567f2ab60ba?s=256&d=identicon&r=PG",
                        "display_name": "James McMahon",
                        "link": "https://stackoverflow.com/users/20774/james-mcmahon"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1671357765,
                    "last_edit_date": 1671357765,
                    "creation_date": 1242916760,
                    "answer_id": 893266,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><a href=\"https://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">Pydev</a> for <a href=\"https://www.eclipse.org/\" rel=\"nofollow noreferrer\">Eclipse</a>, as others have mentioned, is good.</p>\n<p><a href=\"https://netbeans.apache.org/\" rel=\"nofollow noreferrer\">Netbeans</a> has a beta Python plugin that is a little rough around the edges, but could turn into something really cool.</p>\n<p>Additionally there is a long list of programming centric text editors for the mac, that may or may not fit your needs.</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20221217012720/https://macromates.com/\" rel=\"nofollow noreferrer\">Textmate</a> - costs money, people love this program, but I haven't used it enough to see what all the fuss is about.</li>\n<li><a href=\"http://www.jedit.org/\" rel=\"nofollow noreferrer\">Jedit</a> - Java based text editor, has some nice features, but the startup time isn't great (due to Java).</li>\n<li><a href=\"https://web.archive.org/web/20120610040536/http://th.nao.ac.jp/MEMBER/zenitani/emacs-e.html\" rel=\"nofollow noreferrer\">CarbonEmacs</a> - Decent Emacs port.</li>\n<li><a href=\"https://aquamacs.org/\" rel=\"nofollow noreferrer\">AquaEmacs</a> - Better Emacs port.</li>\n<li><a href=\"https://www.barebones.com/products/TextWrangler/\" rel=\"nofollow noreferrer\">TextWrangler</a> - Lite, free (as in beer) verision of BBEdit.</li>\n<li><a href=\"https://www.barebones.com/products/bbedit/\" rel=\"nofollow noreferrer\">BBEdit</a> - The old guard. The defacto editor before Textmate stole its limelight. Expensive.</li>\n<li><a href=\"https://www.peterborgapps.com/smultron/\" rel=\"nofollow noreferrer\">Smultron</a> - Very nice editor, the UI is similar to Textmate.</li>\n<li><a href=\"https://docs.python.org/3/library/idle.html\" rel=\"nofollow noreferrer\">Idle</a> - Python's own little editor, has some nice features, but also some major problems. I've personally found it too unstable for my usage.</li>\n<li><a href=\"https://www.sublimetext.com/\" rel=\"nofollow noreferrer\">Sublime Text</a> - This is really sweet text editor that has some surprisingly good Python support.</li>\n<li><a href=\"https://www.jetbrains.com/pycharm/\" rel=\"nofollow noreferrer\">Pycharm</a> - Another solid full on IDE for Python.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 1603,
                        "reputation": 198069,
                        "user_id": 2147,
                        "user_type": "registered",
                        "accept_rate": 85,
                        "profile_image": "https://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG",
                        "display_name": "Jason Baker",
                        "link": "https://stackoverflow.com/users/2147/jason-baker"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1671357678,
                    "last_edit_date": 1671357678,
                    "creation_date": 1242915938,
                    "answer_id": 893189,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I usually use either <a href=\"https://www.activestate.com/products/komodo-edit/\" rel=\"nofollow noreferrer\">komodo edit</a> or <a href=\"https://aquamacs.org/\" rel=\"nofollow noreferrer\">aquamacs</a> with <a href=\"https://web.archive.org/web/20150428084244/http://rope.sourceforge.net:80/ropemacs.html\" rel=\"nofollow noreferrer\">ropemacs</a>.  Although I should warn you, IDE features won't be what you're used to if you're coming from a Java or C# background.  I personally find that powerful IDEs get in my way more than they help.</p>\n<p><strong>UPDATE</strong>:  I should also point out that if you have the money <a href=\"https://www.activestate.com/products/komodo-ide/\" rel=\"nofollow noreferrer\">Komodo IDE</a> is worth it.  It's the paid version of Komodo Edit.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 116948,
                        "reputation": 26379,
                        "user_id": 306478,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/f790d6d3f1a75a30f6e525890f1d1964?s=256&d=identicon&r=PG",
                        "display_name": "Bijan",
                        "link": "https://stackoverflow.com/users/306478/bijan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1523131157,
                    "last_edit_date": 1523131157,
                    "creation_date": 1374662920,
                    "answer_id": 17831787,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<h2><a href=\"https://code.visualstudio.com\" rel=\"nofollow noreferrer\">Visual Studio Code</a> + <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" rel=\"nofollow noreferrer\">Official Python Plugin</a></h2>\n\n<p>Here you see an overview of its current Python features:</p>\n\n<p><a href=\"https://code.visualstudio.com/docs/languages/python\" rel=\"nofollow noreferrer\">https://code.visualstudio.com/docs/languages/python</a></p>\n\n<h2><strike>Chocolat</h2>\n\n<p><a href=\"http://chocolatapp.com\" rel=\"nofollow noreferrer\">http://chocolatapp.com</a></p>\n\n<p>It's lightweight and offers Code Completion. Costs money.</strike></p>\n\n<p>EDIT:\nApparently Chocolat was an interesting option in 2013 but since then many others came up and development stalled. Nowadays I recommend Visual Studio Code + Python Plugin.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16202,
                        "reputation": 47462,
                        "user_id": 35060,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=256&d=identicon&r=PG",
                        "display_name": "ismail",
                        "link": "https://stackoverflow.com/users/35060/ismail"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1400677377,
                    "last_edit_date": 1400677377,
                    "creation_date": 1242915742,
                    "answer_id": 893174,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Eclipse with <a href=\"http://pydev.org/\" rel=\"noreferrer\">Pydev</a> works best for me on any platform.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 86502,
                        "reputation": 22423,
                        "user_id": 240490,
                        "user_type": "registered",
                        "accept_rate": 56,
                        "profile_image": "https://www.gravatar.com/avatar/536433ff8bf7f50dcab75a920a11d30a?s=256&d=identicon&r=PG",
                        "display_name": "Jonathan Eunice",
                        "link": "https://stackoverflow.com/users/240490/jonathan-eunice"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1372280819,
                    "last_edit_date": 1372280819,
                    "creation_date": 1326293576,
                    "answer_id": 8821307,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>\"Which editor/IDE for ...?\" is a longstanding way to start a \"My dog is too prettier than yours!\" slapfest. Nowadays most editors from <code>vim</code> upwards can be used, there are multiple good alternatives, and even IDEs that started as C or Java tools work pretty well with Python and other dynamic languages.</p>\n\n<p>That said, having tried a bunch of IDEs (Eclipse, NetBeans, XCode, Komodo, PyCharm, ...), I am a fan of ActiveState's Komodo IDE. I use it on Mac OS X primarily, though I've used it for years on Windows as well. The one license follows you to any platform. </p>\n\n<p>Komodo is well-integrated with popular ActiveState builds of the languages themselves (esp. for Windows), works well with the fabulous (and Pythonic) Mercurial change management system (among others), and has good-to-excellent abilities for core tasks like code editing, syntax coloring, code completion, real-time syntax checking, and visual debugging. It is a little weak when it comes to pre-integrated refactoring and code-check tools (e.g. rope, pylint), but it is extensible and has a good facility for integrating external and custom tools.</p>\n\n<p>Some of the things I like about Komodo go beyond the write-run-debug loop. ActiveState has long supported the development community (e.g. with free language builds, package repositories, a recipes site, ...), since before dynamic languages were the trend. The base Komodo Edit editor is free and open source, an extension of Mozilla's Firefox technologies. And Komodo is multi-lingual. I never end up doing just Python, just Perl, or just whatever. Komodo works with the core language (Python, Perl, Ruby, PHP, JavaScript) alongside supporting languages (XML, XSLT, SQL, X/HTML, CSS), non-dynamic languages (Java, C, etc.), and helpers (Makefiles, INI and config files, shell scripts, custom little languages, etc.) Others can do that too, but Komodo puts them all in once place, ready to go. It's a Swiss Army Knife for dynamic languages. (This is contra PyCharm, e.g., which is great itself, but I'd need like a half-dozen of JetBrains' individual IDEs to cover all the things I do).</p>\n\n<p>Komodo IDE is by no means perfect, and editors/IDEs are the ultimate YMMV choice. But I am regularly delighted to use it, and every year I re-up my support subscription quite happily. Indeed, I just remembered! That's coming up this month. Credit card: Out. I have no commercial connection to ActiveState--just a happy customer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 432580,
                        "reputation": 476,
                        "user_id": 817423,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e925b8fda704e705a4c9007d1346e6b3?s=256&d=identicon&r=PG",
                        "display_name": "jdsantiagojr",
                        "link": "https://stackoverflow.com/users/817423/jdsantiagojr"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1364524904,
                    "creation_date": 1364524904,
                    "answer_id": 15696543,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I really enjoy using PyCharm. <a href=\"http://www.jetbrains.com/pycharm/\">http://www.jetbrains.com/pycharm/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 512405,
                        "reputation": 8662,
                        "user_id": 914693,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://www.gravatar.com/avatar/38e267e8fb98ec0779c9ab70485d58d5?s=256&d=identicon&r=PG",
                        "display_name": "linello",
                        "link": "https://stackoverflow.com/users/914693/linello"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1363377695,
                    "creation_date": 1363377695,
                    "answer_id": 15441162,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I like Spyder, it has many tools, such as profiling, intelligent indentation helper and a good autocompletion support</p>\n\n<p><a href=\"https://code.google.com/p/spyderlib/\" rel=\"noreferrer\">https://code.google.com/p/spyderlib/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1815935,
                        "reputation": 781,
                        "user_id": 1651012,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2749f0e0fd7db72f8076190d12a9e6d6?s=256&d=identicon&r=PG",
                        "display_name": "Nav",
                        "link": "https://stackoverflow.com/users/1651012/nav"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1362845811,
                    "last_edit_date": 1362845811,
                    "creation_date": 1362844064,
                    "answer_id": 15312606,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I may be a little late for this, but I would recommend <strong>Aptana Studio 3.x</strong> . Its a based on eclipse and has everything ready-to-go for <code>python</code>. It has very good support for <code>DJango, HTML5 and JQuery</code>. For me its a perfect web-development tool. I do <code>HTML5 and Android</code> development too, this way I do not need to keep switching different IDE's. It my all-in-one solution. </p>\n\n<p>Note: you need a good amount of RAM for this to be snazzy !! 4+ GB is awesome !!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 115364,
                        "reputation": 8780,
                        "user_id": 302969,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://i.sstatic.net/a83f5.jpg?s=256",
                        "display_name": "Sagar Hatekar",
                        "link": "https://stackoverflow.com/users/302969/sagar-hatekar"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1360180135,
                    "creation_date": 1360180135,
                    "answer_id": 14737493,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been using an Evaluation copy of <a href=\"http://www.sublimetext.com/\" rel=\"nofollow\"><code>Sublime Text</code></a>. What's good is it doesn't really expire. </p>\n\n<p>It's been good so far and was really easy to get started with. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 1934205,
                        "reputation": 928,
                        "user_id": 1742878,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/673efd4e0a13fdb1bc5b4ec6d0fa14e8?s=256&d=identicon&r=PG",
                        "display_name": "Dallas",
                        "link": "https://stackoverflow.com/users/1742878/dallas"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1352358668,
                    "creation_date": 1352358668,
                    "answer_id": 13284195,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are looking for an interactive environment and not needing to code modules, I would suggest <a href=\"http://ipython.org/\" rel=\"nofollow\">IPython</a>.  Though this is developed with scientists/statisticians in mind, it will run just as well without any of the scientific packages installed.  The features are powerful, with code completion, integrated help, integrated debugging, etc., and it functions as a notebook with Markdown and MathJax integration.  By far the best choice for those that need powerful features without wishing to load megabytes of GUI into RAM--since it is browser based, it is used in your <em>always loaded</em> chrome/safari instance. ;-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 743405,
                        "reputation": 1889,
                        "user_id": 719397,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/F1dlt.jpg?s=256",
                        "display_name": "Tim",
                        "link": "https://stackoverflow.com/users/719397/tim"
                    },
                    "is_accepted": false,
                    "score": 74,
                    "last_activity_date": 1337374524,
                    "last_edit_date": 1337374524,
                    "creation_date": 1303406578,
                    "answer_id": 5747587,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>My 2 pennies, check out PyCharm\n<a href=\"http://www.jetbrains.com/pycharm/\">http://www.jetbrains.com/pycharm/</a></p>\n\n<p>(also multi-platform)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 38758,
                        "reputation": 350,
                        "user_id": 111443,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d6fb264d188b99af04490dd627db387?s=256&d=identicon&r=PG",
                        "display_name": "user111443",
                        "link": "https://stackoverflow.com/users/111443/user111443"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1243065159,
                    "creation_date": 1243065159,
                    "answer_id": 901101,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have tried many different (Kate, Eclipse, Scite, Vim, Komodo): each one have some glitches, either limited functions, or slow and unresponsive. Final choice after many years: Emacs + ropemacs + flymake. Rope project file open dialog is extremely quick. Rope refactoring and code assist functions are super helpful. Flymake shows syntax mistakes. Emacs is the most configurable editor. I am very happy with this config.  Python related part of config is here: public.halogen-dg.com browser/alex-emacs-settings/configs/cfg_python.el</p>\n"
                },
                {
                    "owner": {
                        "account_id": 32221,
                        "reputation": 5027,
                        "user_id": 89182,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/276d3b553a75e831c6bd099a35e53877?s=256&d=identicon&r=PG",
                        "display_name": "Jeff Ober",
                        "link": "https://stackoverflow.com/users/89182/jeff-ober"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242918222,
                    "creation_date": 1242918222,
                    "answer_id": 893407,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>TextMate or Panic's Coda. NetBeans works very well, if you want a full-blown kitchen sink IDE.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 878281,
                        "reputation": 1564,
                        "user_id": 110152,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1d2c44277afe19fcfd62efb264fb973b?s=256&d=identicon&r=PG",
                        "display_name": "lostlogic",
                        "link": "https://stackoverflow.com/users/110152/lostlogic"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1242916418,
                    "creation_date": 1242916418,
                    "answer_id": 893240,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>macvim + pyflakes.vim</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37350,
                        "reputation": 969,
                        "user_id": 106739,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/8da10c10bd0c80cf6407c1850b5896b4?s=256&d=identicon&r=PG",
                        "display_name": "Up.",
                        "link": "https://stackoverflow.com/users/106739/up"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242916373,
                    "creation_date": 1242916373,
                    "answer_id": 893233,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python support on netbeans is surprisingly good, and comes with most of the features you're looking for.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879367,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1242916188,
                    "creation_date": 1242916188,
                    "answer_id": 893215,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you have a budget for your IDE, you should give Wingware Professional a try, see wingware.com .</p>\n"
                },
                {
                    "owner": {
                        "account_id": 25549,
                        "reputation": 1037,
                        "user_id": 65712,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/ac9609181e2a852c602094f23f191ea8?s=256&d=identicon&r=PG",
                        "display_name": "jean",
                        "link": "https://stackoverflow.com/users/65712/jean"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1242916091,
                    "creation_date": 1242916091,
                    "answer_id": 893206,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I've used <a href=\"http://www.wingware.com/\" rel=\"nofollow noreferrer\">WingIDE</a> and have been very happy.  Intellisense is pretty good, some other things are a bit wacky but overall it's a very productive tool</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9437,
                        "reputation": 13687,
                        "user_id": 17443,
                        "user_type": "registered",
                        "accept_rate": 87,
                        "profile_image": "https://www.gravatar.com/avatar/abe006dc565c07bf484f7138a260c09c?s=256&d=identicon&r=PG",
                        "display_name": "Kostas Konstantinidis",
                        "link": "https://stackoverflow.com/users/17443/kostas-konstantinidis"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242915796,
                    "creation_date": 1242915796,
                    "answer_id": 893181,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>since you are familiar with Eclipse maybe you are interested in <a href=\"http://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">Pydev</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 14130,
                        "reputation": 409751,
                        "user_id": 28804,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=256&d=identicon&r=PG",
                        "display_name": "mipadi",
                        "link": "https://stackoverflow.com/users/28804/mipadi"
                    },
                    "is_accepted": false,
                    "score": 29,
                    "last_activity_date": 1242915783,
                    "creation_date": 1242915783,
                    "answer_id": 893179,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I use <a href=\"http://macromates.com/\" rel=\"noreferrer\">TextMate</a> for all my Python programming needs. It's not an IDE per se, but it does a lot of stuff that an IDE does (without all the cruft of an IDE). It has syntax highlighting, code folding, integration with various SCMs through the use of additional bundles (I know it supports SVN, Git, Mercurial, Darcs, and probably a few others). It's also quite extensible and customizable (again, through the use of bundles). It also has a basic concept of projects. One place where it doesn't shine, though, is in code completion; some bundles have limited support for code completion, but it's generally not as amazing as that of most language-specific IDEs. Given how awesome TextMate is, though, I don't know sacrificing that. TextMate's definitely made me much more productive.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 17299,
                        "reputation": 7310,
                        "user_id": 38611,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/1eabc9d16eb242f16b504e5f6910a734?s=256&d=identicon&r=PG",
                        "display_name": "jbasko",
                        "link": "https://stackoverflow.com/users/38611/jbasko"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1242915706,
                    "creation_date": 1242915706,
                    "answer_id": 893171,
                    "question_id": 893162,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Eclipse PyDev plugin.</p>\n\n<p><a href=\"http://pydev.sourceforge.net/\" rel=\"nofollow noreferrer\">http://pydev.sourceforge.net/</a></p>\n"
                }
            ]
        },
        {
            "2621674": [
                {
                    "owner": {
                        "account_id": 6787281,
                        "reputation": 791,
                        "user_id": 5225566,
                        "user_type": "registered",
                        "accept_rate": 60,
                        "profile_image": "https://www.gravatar.com/avatar/93d0c1dbcb7d08eaa6482c72a0f3cc4e?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Dmitri",
                        "link": "https://stackoverflow.com/users/5225566/dmitri"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1439958640,
                    "creation_date": 1439958640,
                    "answer_id": 32086605,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use Numpy direct array indexing, as in MATLAB, Julia, ... </p>\n\n<pre><code>a = [10, 11, 12, 13, 14, 15];\ns = [1, 2, 5] ;\n\nimport numpy as np\nlist(np.array(a)[s])\n# [11, 12, 15]\n</code></pre>\n\n<p>Better yet, just stay with Numpy arrays</p>\n\n<pre><code>a = np.array([10, 11, 12, 13, 14, 15])\na[s]\n#array([11, 12, 15])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 108881,
                        "reputation": 2309,
                        "user_id": 288803,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/a7957b6a2bdd38792e398a785d5d1dc8?s=256&d=identicon&r=PG",
                        "display_name": "lugte098",
                        "link": "https://stackoverflow.com/users/288803/lugte098"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1271072716,
                    "creation_date": 1271072716,
                    "answer_id": 2621730,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I think you're looking for this:</p>\n\n<pre><code>elements = [10, 11, 12, 13, 14, 15]\nindices = (1,1,2,1,5)\n\nresult_list = [elements[i] for i in indices]    \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 34490,
                        "reputation": 5949,
                        "user_id": 97554,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c3bdada2addd08c8dbae280656b5e1e8?s=256&d=identicon&r=PG",
                        "display_name": "Charles Beattie",
                        "link": "https://stackoverflow.com/users/97554/charles-beattie"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1271072638,
                    "creation_date": 1271072638,
                    "answer_id": 2621722,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Bounds checked:</p>\n\n<pre><code> [a[index] for index in (1,2,5,20) if 0 &lt;= index &lt; len(a)]\n # [11, 12, 15] \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 81091,
                        "reputation": 26853,
                        "user_id": 228885,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/b26ec3c2769168c2cbc64cc3df9cdd9c?s=256&d=identicon&r=PG",
                        "display_name": "Juho Veps&#228;l&#228;inen",
                        "link": "https://stackoverflow.com/users/228885/juho-veps%c3%a4l%c3%a4inen"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1271072519,
                    "creation_date": 1271072519,
                    "answer_id": 2621714,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Try</p>\n\n<pre><code>numbers = range(10, 16)\nindices = (1, 1, 2, 1, 5)\n\nresult = [numbers[i] for i in indices]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 876871,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": true,
                    "score": 91,
                    "last_activity_date": 1271072262,
                    "creation_date": 1271072262,
                    "answer_id": 2621685,
                    "question_id": 2621674,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Perhaps use this:</p>\n\n<pre><code>[a[i] for i in (1,2,5)]\n# [11, 12, 15]\n</code></pre>\n"
                }
            ]
        },
        {
            "24273130": [
                {
                    "owner": {
                        "account_id": 515061,
                        "reputation": 374269,
                        "user_id": 1240268,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/RN9Mw.jpg?s=256",
                        "display_name": "Andy Hayden",
                        "link": "https://stackoverflow.com/users/1240268/andy-hayden"
                    },
                    "is_accepted": true,
                    "score": 215,
                    "last_activity_date": 1403040465,
                    "creation_date": 1403040465,
                    "answer_id": 24273597,
                    "question_id": 24273130,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use iloc to access by position (rather than label):</p>\n\n<pre><code>In [11]: df = pd.DataFrame([[1, 2], [3, 4]], ['a', 'b'], ['A', 'B'])\n\nIn [12]: df\nOut[12]: \n   A  B\na  1  2\nb  3  4\n\nIn [13]: df.iloc[0]  # first row in a DataFrame\nOut[13]: \nA    1\nB    2\nName: a, dtype: int64\n\nIn [14]: df['A'].iloc[0]  # first item in a Series (Column)\nOut[14]: 1\n</code></pre>\n"
                }
            ]
        },
        {
            "7053551": [
                {
                    "owner": {
                        "account_id": 253841,
                        "reputation": 2311,
                        "user_id": 532799,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ea4b7ec02a61bd811006159e8f04ab6f?s=256&d=identicon&r=PG",
                        "display_name": "Sunhwan Jo",
                        "link": "https://stackoverflow.com/users/532799/sunhwan-jo"
                    },
                    "is_accepted": false,
                    "score": 85,
                    "last_activity_date": 1477271422,
                    "last_edit_date": 1477271422,
                    "creation_date": 1313272947,
                    "answer_id": 7053569,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>for k, m in self.materials.items():\n</code></pre>\n\n<p>example:</p>\n\n<pre><code>miles_dict = {'Monday':1, 'Tuesday':2.3, 'Wednesday':3.5, 'Thursday':0.9}\nfor k, v in miles_dict.items():\n    print(\"%s: %s\" % (k, v))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 29240,
                        "reputation": 141322,
                        "user_id": 78845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/7jZ4g.png?s=256",
                        "display_name": "johnsyweb",
                        "link": "https://stackoverflow.com/users/78845/johnsyweb"
                    },
                    "is_accepted": true,
                    "score": 192,
                    "last_activity_date": 1417423906,
                    "last_edit_date": 1495539206,
                    "creation_date": 1313273471,
                    "answer_id": 7053615,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>self.materials</code> is a <a href=\"http://www.python.org/doc//current/library/stdtypes.html#mapping-types-dict\" rel=\"noreferrer\"><code>dict</code></a> and by default you are iterating over just the keys (which are strings).</p>\n\n<p>Since <code>self.materials</code> has more than two keys<a href=\"https://stackoverflow.com/questions/7053551/python-valueerror-too-many-values-to-unpack/7053615#comment34696354_7053615\">*</a>, they can't be unpacked into the <a href=\"http://www.python.org/doc//current/library/functions.html#tuple\" rel=\"noreferrer\"><code>tuple</code></a> \"<code>k, m</code>\", hence the <a href=\"http://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" rel=\"noreferrer\"><code>ValueError</code></a> <a href=\"http://docs.python.org/2/library/exceptions.html\" rel=\"noreferrer\">exception</a> is raised.</p>\n\n<p>In Python 2.<em>x</em>, to iterate over the keys and the values (the <a href=\"http://www.python.org/doc//current/library/functions.html#tuple\" rel=\"noreferrer\"><code>tuple</code></a> \"<code>k, m</code>\"), we use <a href=\"http://www.python.org/doc//current/library/stdtypes.html#dict.iteritems\" rel=\"noreferrer\"><code>self.materials.iteritems()</code></a>.</p>\n\n<p>However, since you're throwing the key away anyway, you may as well simply iterate over the dictionary's values:</p>\n\n<pre><code>for m in self.materials.itervalues():\n</code></pre>\n\n<p>In Python 3.<em>x</em>, prefer <a href=\"http://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"noreferrer\"><code>dict.values()</code></a> (which returns a <a href=\"http://docs.python.org/3/library/stdtypes.html#dict-views\" rel=\"noreferrer\">dictionary view object</a>):</p>\n\n<pre><code>for m in self.materials.values():\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 248321,
                        "reputation": 61168,
                        "user_id": 523612,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/4ae512dd708a619496d36b1f681f95e0?s=256&d=identicon&r=PG",
                        "display_name": "Karl Knechtel",
                        "link": "https://stackoverflow.com/users/523612/karl-knechtel"
                    },
                    "is_accepted": false,
                    "score": 19,
                    "last_activity_date": 1313273438,
                    "creation_date": 1313273438,
                    "answer_id": 7053611,
                    "question_id": 7053551,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Iterating over a dictionary object itself actually gives you an iterator over its <em>keys</em>. Python is trying to unpack keys, which you get from <code>m.type + m.purity</code> into <code>(m, k)</code>.</p>\n\n<p>My crystal ball says <code>m.type</code> and <code>m.purity</code> are both strings, so your keys are also strings. Strings are iterable, so they can be unpacked; but iterating over the string gives you an iterator over its characters. So whenever <code>m.type + m.purity</code> is more than two characters long, you have too many values to unpack. (And whenever it's shorter, you have too few values to unpack.)</p>\n\n<p>To fix this, you can iterate explicitly over the <code>items</code> of the dict, which are the (key, value) pairs that you seem to be expecting. But if you only want the values, then just use the values.</p>\n\n<p>(In 2.x, <code>itervalues</code>, <code>iterkeys</code>, and <code>iteritems</code> are typically a better idea; the non-<code>iter</code> versions create a new list object containing the values/keys/items. For large dictionaries and trivial tasks within the iteration, this can be a lot slower than the <code>iter</code> versions which just set up an iterator.)</p>\n"
                }
            ]
        },
        {
            "606448": [
                {
                    "owner": {
                        "account_id": 21041,
                        "reputation": 688,
                        "user_id": 50845,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/hW2uO.jpg?s=256",
                        "display_name": "leancz",
                        "link": "https://stackoverflow.com/users/50845/leancz"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1609630364,
                    "last_edit_date": 1609630364,
                    "creation_date": 1236160525,
                    "answer_id": 609920,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Bruce Eckel's <em><a href=\"http://docs.linuxtone.org/ebooks/Python/Thinking_In_Python.pdf\" rel=\"nofollow noreferrer\">Thinking in Python</a></em> leans heavily on Design Patterns</p>\n"
                },
                {
                    "owner": {
                        "account_id": 10900,
                        "reputation": 449,
                        "user_id": 20793,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4c6339b58b695fc734ed3fc4e98bdae6?s=256&d=identicon&r=PG",
                        "display_name": "Ed.",
                        "link": "https://stackoverflow.com/users/20793/ed"
                    },
                    "is_accepted": true,
                    "community_owned_date": 1236089025,
                    "score": 153,
                    "last_activity_date": 1546039954,
                    "last_edit_date": 1546039954,
                    "creation_date": 1236089025,
                    "answer_id": 606490,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Some overlap in these</p>\n\n<p><a href=\"https://web.archive.org/web/20180504173504/http://ivory.idyll.org/articles/advanced-swc/\" rel=\"nofollow noreferrer\">Intermediate and Advanced Software Carpentry in Python</a></p>\n\n<p><a href=\"https://web.archive.org/web/20180411011411/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html\" rel=\"nofollow noreferrer\">Code Like a Pythonista: Idiomatic Python</a></p>\n\n<p><a href=\"https://web.archive.org/web/20120118192448/http://jaynes.colorado.edu/PythonIdioms.html\" rel=\"nofollow noreferrer\">Python Idioms and Efficiency</a></p>\n\n<p><a href=\"http://www.youtube.com/watch?v=0vJJlVBVTFg\" rel=\"nofollow noreferrer\">Google Developers Day US - Python Design Patterns</a></p>\n\n<p>Another resource is by example at the <a href=\"https://github.com/ActiveState/code\" rel=\"nofollow noreferrer\">Python Recipes</a>.  A good number do not follow best practices but you can find some patterns in there that are useful</p>\n"
                },
                {
                    "owner": {
                        "account_id": 16121,
                        "reputation": 36774,
                        "user_id": 34813,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/16afab0e0815eb7203cda86555fd322a?s=256&d=identicon&r=PG",
                        "display_name": "Esteban K&#252;ber",
                        "link": "https://stackoverflow.com/users/34813/esteban-k%c3%bcber"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1269378394,
                    "creation_date": 1269378394,
                    "answer_id": 2503633,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Something you can use to simplify your code when calling attributes on objects that might or might not exist is to use the <a href=\"http://code.activestate.com/recipes/68205-null-object-design-pattern/\" rel=\"noreferrer\">Null Object Design Pattern</a> (to which I was introduced in <a href=\"http://books.google.com.ar/books?id=Q0s6Vgb98CQC&amp;pg=PT311&amp;lpg=PT311&amp;dq=Null+object+python+cookbook&amp;source=bl&amp;ots=hc3368UkpC&amp;sig=qRrDqvZwg4FIoMuKo3JJhI7Bu_g&amp;hl=es&amp;ei=TiqpS5jZEMuVtgf08YGnAQ&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=4&amp;ved=0CBYQ6AEwAw#v=onepage&amp;q=&amp;f=false\" rel=\"noreferrer\">Python Cookbook</a>).</p>\n\n<blockquote>\n  <p>Roughly, the goal with Null objects is to provide an 'intelligent'\n  replacement for the often used primitive data type None in Python or\n  Null (or Null pointers) in other languages. These are used for many\n  purposes including the important case where one member of some group \n  of otherwise similar elements is special for whatever reason. Most \n  often this results in conditional statements to distinguish between\n  ordinary elements and the primitive Null value.</p>\n</blockquote>\n\n<p>This object just eats the lack of attribute error, and you can avoid checking for their existence.</p>\n\n<p>It's nothing more than</p>\n\n<pre><code>class Null(object):\n\n    def __init__(self, *args, **kwargs):\n        \"Ignore parameters.\"\n        return None\n\n    def __call__(self, *args, **kwargs):\n        \"Ignore method calls.\"\n        return self\n\n    def __getattr__(self, mname):\n        \"Ignore attribute requests.\"\n        return self\n\n    def __setattr__(self, name, value):\n        \"Ignore attribute setting.\"\n        return self\n\n    def __delattr__(self, name):\n        \"Ignore deleting attributes.\"\n        return self\n\n    def __repr__(self):\n        \"Return a string representation.\"\n        return \"&lt;Null&gt;\"\n\n    def __str__(self):\n        \"Convert to a string and return it.\"\n        return \"Null\"\n</code></pre>\n\n<p>With this, if you do <code>Null(\"any\", \"params\", \"you\", \"want\").attribute_that_doesnt_exists()</code> it won't explode, but just silently become the equivalent of <code>pass</code>.</p>\n\n<p>Normally you'd do something like</p>\n\n<pre><code>if obj.attr:\n    obj.attr()\n</code></pre>\n\n<p>With this, you just do:</p>\n\n<pre><code>obj.attr()\n</code></pre>\n\n<p>and forget about it. Beware that extensive use of the <code>Null</code> object can potentially hide bugs in your code.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 560994,
                        "reputation": 3051,
                        "user_id": 63514,
                        "user_type": "unregistered",
                        "accept_rate": 44,
                        "profile_image": "https://www.gravatar.com/avatar/7983d3f4a6f057be951cc0a8b4f1aea3?s=256&d=identicon&r=PG",
                        "display_name": "Anonymous",
                        "link": "https://stackoverflow.com/users/63514/anonymous"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1236168969,
                    "creation_date": 1236168969,
                    "answer_id": 610297,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Type</p>\n\n<pre><code>&gt;&gt;&gt; import this\n</code></pre>\n\n<p>in a Python console.</p>\n\n<p>Although this is usually treated as a (fine!) joke, it contains a couple of valid python-specific axioms.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6771,
                        "reputation": 21406,
                        "user_id": 11515,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/Ck7tu.jpg?s=256",
                        "display_name": "Gilad Naor",
                        "link": "https://stackoverflow.com/users/11515/gilad-naor"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1236089156,
                    "creation_date": 1236089156,
                    "answer_id": 606498,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You may also wish to read this <a href=\"http://people.csail.mit.edu/gregs/ref-dyn-patterns.html\" rel=\"nofollow noreferrer\">article</a> (select the .pdf file), which discusses Design Patterns in dynamic object oriented languages (i.e. Python). To quote the page:</p>\n\n<blockquote>\n  <p>This paper explores how the patterns from the \"Gang of Four\", or \"GOF\" book, as it is often called, appear when similar problems are addressed using a dynamic, higher-order, object-oriented programming language. Some of the patterns disappear -- that is, they are supported directly by language features, some patterns are simpler or have a different focus, and some are essentially unchanged. </p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346658,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1236088124,
                    "creation_date": 1236088124,
                    "answer_id": 606453,
                    "question_id": 606448,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>You can get started <a href=\"http://www.python.org/workshops/1997-10/proceedings/savikko.html\" rel=\"noreferrer\">here</a> and <a href=\"http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html\" rel=\"noreferrer\">here</a>.  </p>\n\n<p>For a more in depth look at design pattners you should look at <a href=\"http://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612\" rel=\"noreferrer\">Design Patterns: Elements of Reusable Object-Oriented Software</a>.  The source code is not in Python, but it doesn't need to be for you to understand the patterns. </p>\n"
                }
            ]
        },
        {
            "41492721": [
                {
                    "owner": {
                        "account_id": 3170970,
                        "reputation": 20225,
                        "user_id": 2679935,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://i.sstatic.net/wU0qy.jpg?s=256",
                        "display_name": "julienc",
                        "link": "https://stackoverflow.com/users/2679935/julienc"
                    },
                    "is_accepted": true,
                    "score": 105,
                    "last_activity_date": 1569588480,
                    "last_edit_date": 1569588480,
                    "creation_date": 1483644624,
                    "answer_id": 41493168,
                    "question_id": 41492721,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It's possible to use <code>request.view_args</code>.\nThe <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.view_args\" rel=\"noreferrer\">documentation</a> defines it this way:</p>\n\n<blockquote>\n  <p>A dict of view arguments that matched the request. </p>\n</blockquote>\n\n<p>Here's an example:</p>\n\n<pre><code>@app.route(\"/data/&lt;section&gt;\")\ndef data(section):\n    assert section == request.view_args['section']\n</code></pre>\n"
                }
            ]
        },
        {
            "2597104": [
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": true,
                    "score": 66,
                    "last_activity_date": 1416960293,
                    "last_edit_date": 1416960293,
                    "creation_date": 1270696421,
                    "answer_id": 2597351,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Probably not what you are hoping for, but usually you would want to have a <code>break</code> after setting <code>find</code> to <code>True</code></p>\n\n<pre><code>for word1 in buf1: \n    find = False \n    for word2 in buf2: \n        ... \n        if res == res1: \n            print \"BINGO \" + word1 + \":\" + word2 \n            find = True \n            break             # &lt;-- break here too\n    if find: \n        break \n</code></pre>\n\n<p>Another way is to use a generator expression to squash the <code>for</code> into a single loop</p>\n\n<pre><code>for word1, word2 in ((w1, w2) for w1 in buf1 for w2 in buf2):\n    ... \n    if res == res1: \n        print \"BINGO \" + word1 + \":\" + word2\n        break \n</code></pre>\n\n<p>You may also consider using <code>itertools.product</code></p>\n\n<pre><code>from itertools import product\nfor word1, word2 in product(buf1, buf2):\n    ... \n    if res == res1: \n        print \"BINGO \" + word1 + \":\" + word2\n        break \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 20204,
                        "reputation": 676,
                        "user_id": 48063,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/1ad090ce5daf76c3549f0970637704be?s=256&d=identicon&r=PG",
                        "display_name": "magcius",
                        "link": "https://stackoverflow.com/users/48063/magcius"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1336881666,
                    "last_edit_date": 1336881666,
                    "creation_date": 1270696515,
                    "answer_id": 2597355,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Most times you can use a number of methods to make a single loop that does the same thing as a double loop.</p>\n\n<p>In your example, you can use <a href=\"http://docs.python.org/library/itertools.html#itertools.product\" rel=\"noreferrer\">itertools.product</a> to replace your code snippet with</p>\n\n<pre><code>import itertools\nfor word1, word2 in itertools.product(buf1, buf2):\n    if word1 == word2:\n        print \"BINGO \" + word1 + \":\" + word2\n        break\n</code></pre>\n\n<p>The other itertools functions are good for other patterns too.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 37905,
                        "reputation": 6956,
                        "user_id": 108533,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/c2dfddeae5eb2b4cb24780d35c8c3f7f?s=256&d=identicon&r=PG",
                        "display_name": "Guard",
                        "link": "https://stackoverflow.com/users/108533/guard"
                    },
                    "is_accepted": false,
                    "score": 77,
                    "last_activity_date": 1293620791,
                    "creation_date": 1293620791,
                    "answer_id": 4553525,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The recommended way in Python for breaking nested loops is... Exception</p>\n\n<pre><code>class Found(Exception): pass\ntry:\n    for i in range(100):\n        for j in range(1000):\n            for k in range(10000):\n               if i + j + k == 777:\n                  raise Found\nexcept Found:\n    print i, j, k \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 117680,
                        "reputation": 21858,
                        "user_id": 308066,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/9fe764ce8d45fcf5027e811b9cd113c1?s=256&d=identicon&r=PG",
                        "display_name": "dkamins",
                        "link": "https://stackoverflow.com/users/308066/dkamins"
                    },
                    "is_accepted": false,
                    "score": 18,
                    "last_activity_date": 1270692805,
                    "creation_date": 1270692805,
                    "answer_id": 2597129,
                    "question_id": 2597104,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Refactor using functions so you can return when you find your \"bingo\".</p>\n\n<p>The proposal to allow explicit breaking out of nested loops has been rejected:\n<a href=\"http://www.python.org/dev/peps/pep-3136/\" rel=\"noreferrer\">http://www.python.org/dev/peps/pep-3136/</a></p>\n"
                }
            ]
        },
        {
            "10043636": [
                {
                    "owner": {
                        "account_id": 14833753,
                        "reputation": 1852,
                        "user_id": 10712525,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-FTfSB070F80/AAAAAAAAAAI/AAAAAAAAFAY/Ylb6AQCPcdk/photo.jpg?sz=256",
                        "display_name": "Lucas Vazquez",
                        "link": "https://stackoverflow.com/users/10712525/lucas-vazquez"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1587222278,
                    "creation_date": 1587222278,
                    "answer_id": 61291323,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I use the following with python 3.8</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>string4 = f'{string1}{string2}{string3}'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 478759,
                        "reputation": 1412,
                        "user_id": 891046,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/494e2cbdc7bb8b5d6e2eeb1778ae5cf6?s=256&d=identicon&r=PG",
                        "display_name": "Duke",
                        "link": "https://stackoverflow.com/users/891046/duke"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1483534181,
                    "creation_date": 1483534181,
                    "answer_id": 41464254,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>According to Python docs, using str.join() will give you performance consistence across various implementations of Python. Although CPython optimizes away the quadratic behavior of s = s + t, other Python implementations may not.</p>\n\n<blockquote>\n  <p><strong>CPython implementation detail</strong>: If s and t are both strings, some\n  Python implementations such as CPython can usually perform an in-place\n  optimization for assignments of the form s = s + t or s += t. When\n  applicable, this optimization makes quadratic run-time much less\n  likely. This optimization is both version and implementation\n  dependent. For performance sensitive code, it is preferable to use the\n  str.join() method which assures consistent linear concatenation\n  performance across versions and implementations.</p>\n</blockquote>\n\n<p><a href=\"https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange\" rel=\"nofollow noreferrer\">Sequence Types in Python docs</a> (see the foot note [6])</p>\n"
                },
                {
                    "owner": {
                        "account_id": 6311020,
                        "reputation": 667,
                        "user_id": 5898079,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/64af4abd2448889cf3589f53d534541a?s=256&d=identicon&r=PG",
                        "display_name": "muhammad ali e",
                        "link": "https://stackoverflow.com/users/5898079/muhammad-ali-e"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1461934232,
                    "last_edit_date": 1461934232,
                    "creation_date": 1461933268,
                    "answer_id": 36938478,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><strong>''.join([a, b])</strong> is better solution than <strong>+</strong>.</p>\n\n<p>Because Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such)</p>\n\n<p>form a += b or a = a + b is fragile even in CPython and isn't present at all in implementations <strong>that don't use</strong> <strong>refcounting</strong> <em>(reference counting is a technique of storing the number of references, pointers, or handles to a resource such as an object, block of memory, disk space or other resource</em>)</p>\n\n<p><a href=\"https://www.python.org/dev/peps/pep-0008/#programming-recommendations\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0008/#programming-recommendations</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 324031,
                        "reputation": 13105,
                        "user_id": 644388,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ba13c00b2032c0eea1e2e5bf2725a80e?s=256&d=identicon&r=PG",
                        "display_name": "ggozad",
                        "link": "https://stackoverflow.com/users/644388/ggozad"
                    },
                    "is_accepted": true,
                    "score": 132,
                    "last_activity_date": 1452429868,
                    "last_edit_date": 1452429868,
                    "creation_date": 1333717877,
                    "answer_id": 10043957,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is nothing wrong in concatenating <em>two</em> strings with <code>+</code>. Indeed it's easier to read than <code>''.join([a, b])</code>.</p>\n\n<p>You are right though that concatenating more than 2 strings with <code>+</code> is an O(n^2) operation (compared to O(n) for <code>join</code>) and thus becomes inefficient. However this has not to do with using a loop. Even <code>a + b + c + ...</code> is O(n^2), the reason being that each concatenation produces a new string.</p>\n\n<p>CPython2.4 and above try to mitigate that, but it's still advisable to use <code>join</code> when concatenating more than 2 strings.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 121808,
                        "reputation": 83246,
                        "user_id": 315168,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/fbcd3f115ce33ea2380f5a2dae0cf6d2?s=256&d=identicon&r=PG",
                        "display_name": "Mikko Ohtamaa",
                        "link": "https://stackoverflow.com/users/315168/mikko-ohtamaa"
                    },
                    "is_accepted": false,
                    "score": 51,
                    "last_activity_date": 1333735265,
                    "last_edit_date": 1333735265,
                    "creation_date": 1333716364,
                    "answer_id": 10043677,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Plus operator is perfectly fine solution to concatenate <strong>two</strong> Python strings. But if you keep adding more than two strings (n > 25) , you might want to think something else.</p>\n\n<p><code>''.join([a, b, c])</code> trick is a performance optimization. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 234199,
                        "reputation": 9305,
                        "user_id": 500202,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7c0f8622f992b847d49c77cdbec81c95?s=256&d=identicon&r=PG",
                        "display_name": "Izkata",
                        "link": "https://stackoverflow.com/users/500202/izkata"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1333722537,
                    "creation_date": 1333722537,
                    "answer_id": 10044897,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>When working with multiple people, it's sometimes difficult to know exactly what's happening.  Using a format string instead of concatenation can avoid one particular annoyance that's happened a whole ton of times to us:</p>\n\n<p>Say, a function requires an argument, and you write it expecting to get a string:</p>\n\n<pre><code>In [1]: def foo(zeta):\n   ...:     print 'bar: ' + zeta\n\nIn [2]: foo('bang')\nbar: bang\n</code></pre>\n\n<p>So, this function may be used pretty often throughout the code.  Your coworkers may know exactly what it does, but not necessarily be fully up-to-speed on the internals, and may not know that the function expects a string.  And so they may end up with this:</p>\n\n<pre><code>In [3]: foo(23)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n\n/home/izkata/&lt;ipython console&gt; in &lt;module&gt;()\n\n/home/izkata/&lt;ipython console&gt; in foo(zeta)\n\nTypeError: cannot concatenate 'str' and 'int' objects\n</code></pre>\n\n<p>There would be no problem if you just used a format string:</p>\n\n<pre><code>In [1]: def foo(zeta):\n   ...:     print 'bar: %s' % zeta\n   ...:     \n   ...:     \n\nIn [2]: foo('bang')\nbar: bang\n\nIn [3]: foo(23)\nbar: 23\n</code></pre>\n\n<p>The same is true for all types of objects that define <code>__str__</code>, which may be passed in as well:</p>\n\n<pre><code>In [1]: from datetime import date\n\nIn [2]: zeta = date(2012, 4, 15)\n\nIn [3]: print 'bar: ' + zeta\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n\n/home/izkata/&lt;ipython console&gt; in &lt;module&gt;()\n\nTypeError: cannot concatenate 'str' and 'datetime.date' objects\n\nIn [4]: print 'bar: %s' % zeta\nbar: 2012-04-15\n</code></pre>\n\n<p>So yes:  If you can use a format string <em>do it</em> and take advantage of what Python has to offer.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1370770,
                        "reputation": 13867,
                        "user_id": 1306033,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b2173914b52cdfca88c60aa3bb1bd43a?s=256&d=identicon&r=PG",
                        "display_name": "Michael Slade",
                        "link": "https://stackoverflow.com/users/1306033/michael-slade"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1333718886,
                    "creation_date": 1333718886,
                    "answer_id": 10044139,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I have done a quick test:</p>\n\n<pre><code>import sys\n\nstr = e = \"a xxxxxxxxxx very xxxxxxxxxx long xxxxxxxxxx string xxxxxxxxxx\\n\"\n\nfor i in range(int(sys.argv[1])):\n    str = str + e\n</code></pre>\n\n<p>and timed it:</p>\n\n<pre><code>mslade@mickpc:/binks/micks/ruby/tests$ time python /binks/micks/junk/strings.py  8000000\n8000000 times\n\nreal    0m2.165s\nuser    0m1.620s\nsys     0m0.540s\nmslade@mickpc:/binks/micks/ruby/tests$ time python /binks/micks/junk/strings.py  16000000\n16000000 times\n\nreal    0m4.360s\nuser    0m3.480s\nsys     0m0.870s\n</code></pre>\n\n<p>There is apparently an optimisation for the <code>a = a + b</code> case.  It does not exhibit O(n^2) time as one might suspect.</p>\n\n<p>So at least in terms of performance, using <code>+</code> is fine.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 950850,
                        "reputation": 63607,
                        "user_id": 977038,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=256&d=identicon&r=PG",
                        "display_name": "Abhijit",
                        "link": "https://stackoverflow.com/users/977038/abhijit"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1333718682,
                    "creation_date": 1333718682,
                    "answer_id": 10044103,
                    "question_id": 10043636,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The assumption that one should never, ever use + for string concatenation, but instead always use ''.join may be a myth. It is true that using <code>+</code> creates unnecessary temporary copies of immutable string object but the other not oft quoted fact is that calling <code>join</code> in a loop would generally add the overhead of <code>function call</code>. Lets take your example.</p>\n\n<p>Create two lists, one from the linked SO question and another a bigger fabricated</p>\n\n<pre><code>&gt;&gt;&gt; myl1 = ['A','B','C','D','E','F']\n&gt;&gt;&gt; myl2=[chr(random.randint(65,90)) for i in range(0,10000)]\n</code></pre>\n\n<p>Lets create two functions, <code>UseJoin</code> and <code>UsePlus</code> to use the respective <code>join</code> and <code>+</code> functionality.</p>\n\n<pre><code>&gt;&gt;&gt; def UsePlus():\n    return [myl[i] + myl[i + 1] for i in range(0,len(myl), 2)]\n\n&gt;&gt;&gt; def UseJoin():\n    [''.join((myl[i],myl[i + 1])) for i in range(0,len(myl), 2)]\n</code></pre>\n\n<p>Lets run timeit with the first list</p>\n\n<pre><code>&gt;&gt;&gt; myl=myl1\n&gt;&gt;&gt; t1=timeit.Timer(\"UsePlus()\",\"from __main__ import UsePlus\")\n&gt;&gt;&gt; t2=timeit.Timer(\"UseJoin()\",\"from __main__ import UseJoin\")\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t1.timeit(number=100000)/100000)\n2.48 usec/pass\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t2.timeit(number=100000)/100000)\n2.61 usec/pass\n&gt;&gt;&gt; \n</code></pre>\n\n<p>They have almost the same runtime.</p>\n\n<p>Lets use cProfile</p>\n\n<pre><code>&gt;&gt;&gt; myl=myl2\n&gt;&gt;&gt; cProfile.run(\"UsePlus()\")\n         5 function calls in 0.001 CPU seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.001    0.001    0.001    0.001 &lt;pyshell#1376&gt;:1(UsePlus)\n        1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.000    0.000    0.000    0.000 {len}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n        1    0.000    0.000    0.000    0.000 {range}\n\n\n&gt;&gt;&gt; cProfile.run(\"UseJoin()\")\n         5005 function calls in 0.029 CPU seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.015    0.015    0.029    0.029 &lt;pyshell#1388&gt;:1(UseJoin)\n        1    0.000    0.000    0.029    0.029 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.000    0.000    0.000    0.000 {len}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n     5000    0.014    0.000    0.014    0.000 {method 'join' of 'str' objects}\n        1    0.000    0.000    0.000    0.000 {range}\n</code></pre>\n\n<p>And it looks that using Join, results in unnecessary function calls which could add to the overhead.</p>\n\n<p>Now coming back to the question. Should one discourage the use of <code>+</code> over <code>join</code> in all cases?</p>\n\n<p>I believe no, things should be taken into consideration</p>\n\n<ol>\n<li>Length of the String in Question</li>\n<li>No of Concatenation Operation.</li>\n</ol>\n\n<p>And off-course in a development pre-mature optimization is evil. </p>\n"
                }
            ]
        },
        {
            "5333244": [
                {
                    "owner": {
                        "account_id": 319637,
                        "reputation": 2426,
                        "user_id": 637499,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/3487db152b9efb817711678b7b00db27?s=256&d=identicon&r=PG",
                        "display_name": "tiagoboldt",
                        "link": "https://stackoverflow.com/users/637499/tiagoboldt"
                    },
                    "is_accepted": true,
                    "score": 56,
                    "last_activity_date": 1576932769,
                    "last_edit_date": 1576932769,
                    "creation_date": 1300319967,
                    "answer_id": 5333261,
                    "question_id": 5333244,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>from PIL import Image\n\nimage = Image.open('File.jpg')\nimage.show()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 332610,
                        "reputation": 1741,
                        "user_id": 658011,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://www.gravatar.com/avatar/fe4dc5ea02ac73b9981bcc549a7a288c?s=256&d=identicon&r=PG",
                        "display_name": "dLobatog",
                        "link": "https://stackoverflow.com/users/658011/dlobatog"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1481102119,
                    "last_edit_date": 1481102119,
                    "creation_date": 1300319986,
                    "answer_id": 5333263,
                    "question_id": 5333244,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Don't forget to include</p>\n\n<pre><code>import Image\n</code></pre>\n\n<p>In order to show it use this :</p>\n\n<pre><code>Image.open('pathToFile').show()\n</code></pre>\n"
                }
            ]
        },
        {
            "44409084": [
                {
                    "owner": {
                        "account_id": 5787146,
                        "reputation": 12251,
                        "user_id": 4565943,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://i.sstatic.net/ju2U4.jpg?s=256",
                        "display_name": "&#201;be Isaac",
                        "link": "https://stackoverflow.com/users/4565943/%c3%89be-isaac"
                    },
                    "is_accepted": true,
                    "score": 53,
                    "last_activity_date": 1624615073,
                    "last_edit_date": 1624615073,
                    "creation_date": 1496828856,
                    "answer_id": 44409124,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The answer lies in your question:</p>\n<pre><code>np.array(list(zip(a,b)))\n</code></pre>\n<br>\n<p><strong>Edit:</strong></p>\n<p>Although my post gives the answer as requested by the OP, the conversion to list and back to NumPy array takes some overhead (noticeable for large arrays).</p>\n<p>Hence, <code>dstack</code> would be a computationally efficient alternative  (ref. @zipa's answer).  I was unaware of <code>dstack</code> at the time of posting this answer so credits to @zipa for introducing it to this post.</p>\n<p><strong>Edit 2:</strong></p>\n<p>As can be seen in the <a href=\"https://stackoverflow.com/questions/18730044/converting-two-lists-into-a-matrix\">duplicate question</a>, <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.c_.html\" rel=\"noreferrer\"><code>np.c_</code></a> is even shorter than <code>np.dstack</code>.</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.arange(1, 6)\n&gt;&gt;&gt; b = np.arange(6, 11)\n&gt;&gt;&gt; \n&gt;&gt;&gt; a\narray([1, 2, 3, 4, 5])\n&gt;&gt;&gt; b\narray([ 6,  7,  8,  9, 10])\n&gt;&gt;&gt; np.c_[a, b]\narray([[ 1,  6],\n       [ 2,  7],\n       [ 3,  8],\n       [ 4,  9],\n       [ 5, 10]])\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7667854,
                        "reputation": 27804,
                        "user_id": 5811078,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/NlknE.png?s=256",
                        "display_name": "zipa",
                        "link": "https://stackoverflow.com/users/5811078/zipa"
                    },
                    "is_accepted": false,
                    "score": 176,
                    "last_activity_date": 1567362123,
                    "last_edit_date": 1567362123,
                    "creation_date": 1496828979,
                    "answer_id": 44409182,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you have numpy arrays you can use <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html\" rel=\"noreferrer\"><code>dstack()</code></a>:</p>\n\n<pre><code>import numpy as np\n\na = np.array([1,2,3,4,5])\nb = np.array([6,7,8,9,10])\n\nc = np.dstack((a,b))\n#or\nd = np.column_stack((a,b))\n\n&gt;&gt;&gt; c\narray([[[ 1,  6],\n        [ 2,  7],\n        [ 3,  8],\n        [ 4,  9],\n        [ 5, 10]]])\n&gt;&gt;&gt; d\narray([[ 1,  6],\n       [ 2,  7],\n       [ 3,  8],\n       [ 4,  9],\n       [ 5, 10]])\n\n&gt;&gt;&gt; c.shape\n(1, 5, 2)\n&gt;&gt;&gt; d.shape\n(5, 2)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5777412,
                        "reputation": 5930,
                        "user_id": 4559110,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/W5NZo.jpg?s=256",
                        "display_name": "akash karothiya",
                        "link": "https://stackoverflow.com/users/4559110/akash-karothiya"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1496828865,
                    "creation_date": 1496828865,
                    "answer_id": 44409128,
                    "question_id": 44409084,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can use <code>zip</code></p>\n\n<pre><code>np.array(list(zip(a,b)))\narray([[ 1,  6],\n   [ 2,  7],\n   [ 3,  8],\n   [ 4,  9],\n   [ 5, 10]])\n</code></pre>\n"
                }
            ]
        },
        {
            "3899645": [
                {
                    "owner": {
                        "account_id": 195757,
                        "reputation": 15142,
                        "user_id": 438838,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/qaPyF.jpg?s=256",
                        "display_name": "dheerosaur",
                        "link": "https://stackoverflow.com/users/438838/dheerosaur"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1286711249,
                    "creation_date": 1286711249,
                    "answer_id": 3900161,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you prefer extend over list comprehensions:</p>\n\n<pre><code>a = []\nfor x, y in l:\n    a.extend([x]*y)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63624,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1286707829,
                    "creation_date": 1286707829,
                    "answer_id": 3900001,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; sum([[item]*count for item,count in a],[])\n['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 63538,
                        "reputation": 67749,
                        "user_id": 188031,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/p2YIF.jpg?s=256",
                        "display_name": "tokland",
                        "link": "https://stackoverflow.com/users/188031/tokland"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1286701289,
                    "creation_date": 1286701289,
                    "answer_id": 3899680,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>An <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\">itertools</a> approach:</p>\n\n<pre><code>import itertools\n\ndef flatten(it):\n    return itertools.chain.from_iterable(it)\n\npairs = [['a',2], ['b',2], ['c',1]]\nflatten(itertools.repeat(item, times) for (item, times) in pairs)\n# ['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 68828,
                        "reputation": 25481,
                        "user_id": 200609,
                        "user_type": "registered",
                        "accept_rate": 25,
                        "profile_image": "https://i.sstatic.net/YSVRw.jpg?s=256",
                        "display_name": "Richard Fearn",
                        "link": "https://stackoverflow.com/users/200609/richard-fearn"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1286700904,
                    "creation_date": 1286700904,
                    "answer_id": 3899664,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>import operator\na = [['a',2], ['b',2], ['c',1]]\nnums = [[x[0]]*x[1] for x in a]\nnums = reduce(operator.add, nums)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 35328,
                        "reputation": 25594,
                        "user_id": 100020,
                        "user_type": "registered",
                        "accept_rate": 92,
                        "profile_image": "https://www.gravatar.com/avatar/7b137a205dff52b6471dfd17158c8b8f?s=256&d=identicon&r=PG",
                        "display_name": "sdcvvc",
                        "link": "https://stackoverflow.com/users/100020/sdcvvc"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1286700765,
                    "creation_date": 1286700765,
                    "answer_id": 3899661,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; [i for i, n in a for k in range(n)]\n['a', 'a', 'b', 'b', 'c']\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796828,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": true,
                    "score": 65,
                    "last_activity_date": 1286700712,
                    "creation_date": 1286700712,
                    "answer_id": 3899658,
                    "question_id": 3899645,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Stacked LCs.</p>\n\n<pre><code>[y for x in a for y in [x[0]] * x[1]]\n</code></pre>\n"
                }
            ]
        },
        {
            "10125568": [
                {
                    "owner": {
                        "account_id": 9114511,
                        "reputation": 1699,
                        "user_id": 6782000,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/UY08r.jpg?s=256",
                        "display_name": "Deepak Sharma",
                        "link": "https://stackoverflow.com/users/6782000/deepak-sharma"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1617702184,
                    "last_edit_date": 1617702184,
                    "creation_date": 1568981640,
                    "answer_id": 58028195,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Simply</p>\n<pre><code>import random\nmydict = {&quot;a&quot;:&quot;its a&quot;, &quot;b&quot;:&quot;its b&quot;}\nrandom.sample(mydict.items(), 1)\n\n# [('b', 'its b')]\n# or\n# [('a', 'its a')]\n\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2934944,
                        "reputation": 5281,
                        "user_id": 2514130,
                        "user_type": "registered",
                        "accept_rate": 72,
                        "profile_image": "https://www.gravatar.com/avatar/4e395d187e74516473c8a14f9639c422?s=256&d=identicon&r=PG",
                        "display_name": "jss367",
                        "link": "https://stackoverflow.com/users/2514130/jss367"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1617137105,
                    "creation_date": 1617137105,
                    "answer_id": 66878256,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you wanted to return a dictionary, you could use a dictionary comprehension instead of the list comprehension in <a href=\"https://stackoverflow.com/a/10125602/2514130\">Sven Marnach's answer</a> like so:</p>\n<pre><code>d = dict.fromkeys(range(100))\nkeys = random.sample(d.keys(), 10)\nsample_d = {k: d[k] for k in keys}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 7309608,
                        "reputation": 163,
                        "user_id": 5569333,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/8IPM6.jpg?s=256",
                        "display_name": "Gromph",
                        "link": "https://stackoverflow.com/users/5569333/gromph"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1607777935,
                    "creation_date": 1607777935,
                    "answer_id": 65265193,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I have work on this problem,</p>\n<pre><code>import random\n\ndef random_a_dict_and_sample_it( a_dictionary , a_number ): \n    _ = {}\n    for k1 in random.sample( list( a_dictionary.keys() ) , a_number ):\n        _[ k1 ] = a_dictionary[ k1 ]\n    return _\n</code></pre>\n<p><strong>In your case:</strong></p>\n<pre><code>user_dict = random_a_dict_and_sample_it( user_dict , 2 )\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 104636,
                        "reputation": 599168,
                        "user_id": 279627,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG",
                        "display_name": "Sven Marnach",
                        "link": "https://stackoverflow.com/users/279627/sven-marnach"
                    },
                    "is_accepted": true,
                    "score": 49,
                    "last_activity_date": 1461252911,
                    "last_edit_date": 1461252911,
                    "creation_date": 1334240713,
                    "answer_id": 10125602,
                    "question_id": 10125568,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's what <a href=\"http://docs.python.org//library/random.html?highlight=random.choice#random.sample\" rel=\"noreferrer\"><code>random.sample()</code></a> is for:</p>\n\n<blockquote>\n  <p>Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.</p>\n</blockquote>\n\n<p>This can be used to choose the keys.  The values can subsequently be retrieved by normal dictionary lookup:</p>\n\n<pre><code>&gt;&gt;&gt; d = dict.fromkeys(range(100))\n&gt;&gt;&gt; keys = random.sample(list(d), 10)\n&gt;&gt;&gt; keys\n[52, 3, 10, 92, 86, 42, 99, 73, 56, 23]\n&gt;&gt;&gt; values = [d[k] for k in keys]\n</code></pre>\n\n<p>Alternatively, you can directly sample from <code>d.items()</code>.</p>\n"
                }
            ]
        },
        {
            "23240969": [
                {
                    "owner": {
                        "account_id": 4060346,
                        "reputation": 32129,
                        "user_id": 3337070,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=256&d=identicon&r=PG",
                        "display_name": "sshashank124",
                        "link": "https://stackoverflow.com/users/3337070/sshashank124"
                    },
                    "is_accepted": true,
                    "score": 210,
                    "last_activity_date": 1637760198,
                    "last_edit_date": 1637760198,
                    "creation_date": 1398247312,
                    "answer_id": 23240989,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can do that using <strong><code>count</code></strong>:</p>\n<pre><code>my_dict = {i:MyList.count(i) for i in MyList}\n\n&gt;&gt;&gt; print my_dict     #or print(my_dict) in python-3.x\n{'a': 3, 'c': 3, 'b': 1}\n</code></pre>\n<p><strong>Or</strong> using <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"noreferrer\"><strong><code>collections.Counter</code></strong></a>:</p>\n<pre><code>from collections import Counter\n\na = dict(Counter(MyList))\n\n&gt;&gt;&gt; print a           #or print(a) in python-3.x\n{'a': 3, 'c': 3, 'b': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1295617,
                        "reputation": 8380,
                        "user_id": 1246764,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://i.sstatic.net/FWtTl.png?s=256",
                        "display_name": "Nishant Nawarkhede",
                        "link": "https://stackoverflow.com/users/1246764/nishant-nawarkhede"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1622288090,
                    "last_edit_date": 1622288090,
                    "creation_date": 1398247683,
                    "answer_id": 23241142,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>In [2]: MyList = [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;a&quot;, &quot;c&quot;]\n\nIn [3]: count = {}\n\nIn [4]: for i in MyList:\n   ...:     if not i in count:\n   ...:         count[i] = 1\n   ...:     else:\n   ...:         count[i] +=1\n   ...:\n\nIn [5]: count\nOut[5]: {'a': 3, 'b': 1, 'c': 3}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 75137,
                        "reputation": 14381,
                        "user_id": 215600,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/5d9212f4e4c45d580c8a2d75ffd72071?s=256&d=identicon&r=PG",
                        "display_name": "Peter Kelly",
                        "link": "https://stackoverflow.com/users/215600/peter-kelly"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1398248694,
                    "last_edit_date": 1398248694,
                    "creation_date": 1398248363,
                    "answer_id": 23241386,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This works for Python 2.6.6</p>\n\n<pre><code>a = [\"a\", \"b\", \"a\"]\nresult = dict((i, a.count(i)) for i in a)\nprint result\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>{'a': 2, 'b': 1}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1288403,
                        "reputation": 9834,
                        "user_id": 1240996,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/75efea0e709e87c07bf10b995d56a47b?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Jayanth Koushik",
                        "link": "https://stackoverflow.com/users/1240996/jayanth-koushik"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1398247691,
                    "creation_date": 1398247691,
                    "answer_id": 23241146,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Use <code>Counter</code></p>\n\n<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; MyList = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"]\n&gt;&gt;&gt; c = Counter(MyList)\n&gt;&gt;&gt; c\nCounter({'a': 3, 'c': 3, 'b': 1})\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2637065,
                        "reputation": 7683,
                        "user_id": 2281472,
                        "user_type": "registered",
                        "accept_rate": 71,
                        "profile_image": "https://www.gravatar.com/avatar/7c3970db6edffbbb266b3903a2dc3180?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Develop4Life",
                        "link": "https://stackoverflow.com/users/2281472/develop4life"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1398247601,
                    "creation_date": 1398247601,
                    "answer_id": 23241113,
                    "question_id": 23240969,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>yourList = [\"a\", \"b\", \"a\", \"c\", \"c\", \"a\", \"c\"]\n</code></pre>\n\n<blockquote>\n  <p>expected outputs {a: 3, b: 1,c:3}</p>\n</blockquote>\n\n<pre><code>duplicateFrequencies = {}\nfor i in set(yourList):\n    duplicateFrequencies[i] = yourList.count(i)\n</code></pre>\n\n<p>Cheers!! <a href=\"http://coreygoldberg.blogspot.com/2008/07/python-counting-items-in-list.html\" rel=\"noreferrer\">Reference</a></p>\n"
                }
            ]
        },
        {
            "11821322": [
                {
                    "owner": {
                        "account_id": 145428,
                        "reputation": 123175,
                        "user_id": 355230,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://i.sstatic.net/JEycE.png?s=256",
                        "display_name": "martineau",
                        "link": "https://stackoverflow.com/users/355230/martineau"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1487774407,
                    "last_edit_date": 1495539193,
                    "creation_date": 1344217720,
                    "answer_id": 11821679,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I suggest you consider using the <code>shelve</code> module since your data-structure is a mapping.\nThat was my <a href=\"https://stackoverflow.com/questions/4529914/python-how-to-get-a-object-database/4530124#4530124\">answer</a> to a similar question titled <a href=\"https://stackoverflow.com/questions/5823236/if-i-want-to-build-a-custom-database-how-could-i\"><em>If I want to build a custom database, how could I?</em></a> There's also a bit of sample code in another <a href=\"https://stackoverflow.com/a/4530124/355230\">answer</a> of mine promoting its use for the question <a href=\"https://stackoverflow.com/questions/4529914/how-to-get-a-object-database\"><em>How to get a object database?</em></a></p>\n\n<p>ActiveState has a highly rated <a href=\"http://code.activestate.com/recipes/576642\" rel=\"nofollow noreferrer\">PersistentDict</a> recipe which supports csv, json, and pickle output file formats. It's pretty fast since all three of those formats are implement in C (although the recipe itself is pure Python), so the fact that it reads the whole file into memory when it's opened might be acceptable.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 55190,
                        "reputation": 63624,
                        "user_id": 165216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/kaQqn.jpg?s=256",
                        "display_name": "PaulMcG",
                        "link": "https://stackoverflow.com/users/165216/paulmcg"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1344233465,
                    "creation_date": 1344233465,
                    "answer_id": 11823256,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Why mess with all these serialization methods? It's already written to a file as a Python dict (although with the unfortunate name 'dict').  Change your program to write out the data with a better variable name - maybe 'data', or 'catalog', and save the file as a Python file, say data.py.  Then you can just import the data directly at runtime without any clumsy copy/pasting or JSON/shelve/etc. parsing:</p>\n\n<pre><code>from data import catalog\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 202835,
                        "reputation": 71221,
                        "user_id": 450128,
                        "user_type": "registered",
                        "accept_rate": 62,
                        "profile_image": "https://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=256&d=identicon&r=PG",
                        "display_name": "Ben",
                        "link": "https://stackoverflow.com/users/450128/ben"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1344221605,
                    "creation_date": 1344221605,
                    "answer_id": 11822009,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>JSON (or YAML, or whatever) serialisation is probably better, but if you're already writing the dictionary to a text file in python syntax, complete with a variable name binding, you could just write that to a .py file instead. Then that python file would be importable and usable as is. There's no need for the \"function which returns a dictionary\"  approach, since you can directly use it as a global in that file. e.g.</p>\n\n<pre><code># generated.py\nplease_dont_use_dict_as_a_variable_name = {'Adam': 'Room 430', 'Bob': 'Room 404'}\n</code></pre>\n\n<p>rather than:</p>\n\n<pre><code># manually_copied.py\ndef get_dict():\n    return {'Adam': 'Room 430', 'Bob': 'Room 404'}\n</code></pre>\n\n<p>The only difference is that <code>manually_copied.get_dict</code> gives you a fresh copy of the dictionary every time, whereas <code>generated.please_dont_use_dict_as_a_variable_name</code>[1] is a single shared object. This may matter if you're modifying the dictionary in your program after retrieving it, but you can always use <code>copy.copy</code> or <code>copy.deepcopy</code> to create a new copy if you need to modify one independently of the others.</p>\n\n<hr>\n\n<p>[1] <code>dict</code>, <code>list</code>, <code>str</code>, <code>int</code>, <code>map</code>, etc are generally viewed as bad variable names. The reason is that these are already defined as built-ins, and are used very commonly. So if you give something a name like that, at the least it's going to cause cognitive-dissonance for people reading your code (including you after you've been away for a while) as they have to keep in mind that \"<code>dict</code> doesn't mean what it normally does here\". It's also quite likely that at some point you'll get an infuriating-to-solve bug reporting that <code>dict</code> objects aren't callable (or something), because some piece of code is trying to use the <em>type</em> <code>dict</code>, but is getting the dictionary object you bound to the name <code>dict</code> instead.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 438237,
                        "reputation": 91,
                        "user_id": 826383,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/3dc793d76ba70aa3c62b998373e8820c?s=256&d=identicon&r=PG",
                        "display_name": "Tom",
                        "link": "https://stackoverflow.com/users/826383/tom"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1344218509,
                    "creation_date": 1344218509,
                    "answer_id": 11821761,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>on the JSON direction there is also something called simpleJSON.  My first time using json in python the json library didnt work for me/ i couldnt figure it out.  simpleJSON was...easier to use</p>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1344216706,
                    "creation_date": 1344216706,
                    "answer_id": 11821591,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If the keys are all strings, you can use the <a href=\"http://docs.python.org/library/shelve\" rel=\"noreferrer\">shelve</a> module</p>\n\n<blockquote>\n  <p>A <a href=\"http://docs.python.org/library/shelve\" rel=\"noreferrer\">shelf</a> is a persistent, dictionary-like object. The difference with\n  \u201cdbm\u201d databases is that the values (not the keys!) in a shelf can be\n  essentially arbitrary Python objects \u2014 anything that the pickle module\n  can handle. This includes most class instances, recursive data types,\n  and objects containing lots of shared sub-objects. The keys are\n  ordinary strings.</p>\n</blockquote>\n\n<p><code>json</code> would be a good choice if you need to use the data from other languages</p>\n"
                },
                {
                    "owner": {
                        "account_id": 281021,
                        "reputation": 150521,
                        "user_id": 577088,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/5UZyo.jpg?s=256",
                        "display_name": "senderle",
                        "link": "https://stackoverflow.com/users/577088/senderle"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1344215274,
                    "creation_date": 1344215274,
                    "answer_id": 11821487,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>JSON is probably the right way to go in many cases; but there might be an alternative. It looks like your keys and your values are always strings, is that right? You might consider using <a href=\"http://docs.python.org/library/dbm.html\" rel=\"noreferrer\"><code>dbm</code></a>/<a href=\"http://docs.python.org/library/anydbm.html#module-anydbm\" rel=\"noreferrer\"><code>anydbm</code></a>. These are \"databases\" but they act almost exactly like dictionaries. They're great for cheap data persistence.</p>\n\n<pre><code>&gt;&gt;&gt; import anydbm\n&gt;&gt;&gt; dict_of_strings = anydbm.open('data', 'c')\n&gt;&gt;&gt; dict_of_strings['foo'] = 'bar'\n&gt;&gt;&gt; dict_of_strings.close()\n&gt;&gt;&gt; dict_of_strings = anydbm.open('data')\n&gt;&gt;&gt; dict_of_strings['foo']\n'bar'\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 444463,
                        "reputation": 1744,
                        "user_id": 836284,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/d8bd8061fdbe2417c0fc82394bcfe797?s=256&d=identicon&r=PG",
                        "display_name": "luanjunyi",
                        "link": "https://stackoverflow.com/users/836284/luanjunyi"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1344213965,
                    "creation_date": 1344213965,
                    "answer_id": 11821401,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If storage efficiency matters, use Pickle or CPickle(for execution performance gain). As Amber pointed out, you can also dump/load via Json. It will be human-readable, but takes more disk.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 49939,
                        "reputation": 524735,
                        "user_id": 148870,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=256&d=identicon&r=PG",
                        "display_name": "Amber",
                        "link": "https://stackoverflow.com/users/148870/amber"
                    },
                    "is_accepted": true,
                    "score": 68,
                    "last_activity_date": 1344213133,
                    "creation_date": 1344213133,
                    "answer_id": 11821343,
                    "question_id": 11821322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Why not dump it to a JSON file, and then load it from there where you need it?</p>\n\n<pre><code>import json\n\nwith open('my_dict.json', 'w') as f:\n    json.dump(my_dict, f)\n\n# elsewhere...\n\nwith open('my_dict.json') as f:\n    my_dict = json.load(f)\n</code></pre>\n\n<p>Loading from JSON is fairly efficient.</p>\n\n<p>Another option would be to use <a href=\"http://docs.python.org/library/pickle\" rel=\"noreferrer\"><code>pickle</code></a>, but unlike JSON, the files it generates aren't human-readable so you lose out on the visual verification you liked from your old method.</p>\n"
                }
            ]
        },
        {
            "11641098": [
                {
                    "owner": {
                        "account_id": 21307,
                        "reputation": 2445,
                        "user_id": 51681,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://www.gravatar.com/avatar/43df3993acc9af4e9f619e59cd849aee?s=256&d=identicon&r=PG",
                        "display_name": "Georgios Gousios",
                        "link": "https://stackoverflow.com/users/51681/georgios-gousios"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1346439883,
                    "last_edit_date": 1346439883,
                    "creation_date": 1343222220,
                    "answer_id": 11650594,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Just for the fun of it, here is a parallel Ruby version. </p>\n\n<pre><code>require 'benchmark'\n\nnum = ARGV[0].to_i\n\ndef is_prime?(n)\n  (2...n).all?{|m| n%m != 0 }\nend\n\ndef sexy_primes_default(x)\n    (9..x).map do |i|\n        [i-6, i]\n    end.select do |j|\n        j.all?{|j| is_prime? j}\n    end\nend\n\ndef sexy_primes_threads(x)\n    partition = (9..x).map do |i|\n        [i-6, i]\n    end.group_by do |x|\n        x[0].to_s[-1]\n    end\n    threads = Array.new\n    partition.each_key do |k|\n       threads &lt;&lt; Thread.new do\n            partition[k].select do |j|\n                j.all?{|j| is_prime? j}\n            end\n        end\n    end\n    threads.each {|t| t.join}\n    threads.map{|t| t.value}.reject{|x| x.empty?}\nend\n\nputs \"Running up to num #{num}\"\n\nBenchmark.bm(10) do |x|\n    x.report(\"default\") {a = sexy_primes_default(num)}\n    x.report(\"threads\") {a = sexy_primes_threads(num)}\nend\n</code></pre>\n\n<p>On my 1.8GHz Core i5 MacBook Air, the performance results are:</p>\n\n<pre><code># Ruby 1.9.3\n$ ./sexyprimes.rb 100000\nRunning up to num 100000\n                 user     system      total        real\ndefault     68.840000   0.060000  68.900000 ( 68.922703)\nthreads     71.730000   0.090000  71.820000 ( 71.847346)\n\n# JRuby 1.6.7.2 on JVM 1.7.0_05\n$ jruby --1.9 --server sexyprimes.rb 100000\nRunning up to num 100000\n                user     system      total        real\ndefault    56.709000   0.000000  56.709000 ( 56.708000)\nthreads    36.396000   0.000000  36.396000 ( 36.396000)\n\n# JRuby 1.7.0.preview1 on JVM 1.7.0_05\n$ jruby --server sexyprimes.rb 100000\nRunning up to num 100000\n             user     system      total        real\ndefault     52.640000   0.270000  52.910000 ( 51.393000)\nthreads    105.700000   0.290000 105.990000 ( 30.298000)\n</code></pre>\n\n<p>It looks like the JVM's JIT is giving Ruby a nice performance boost in the default case, while true multithreading helps JRuby perform 50% faster in the threaded case. What's more interesting is that JRuby 1.7 improves the JRuby 1.6 score by a healthy 17%!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 70121,
                        "reputation": 4003,
                        "user_id": 203655,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/693b9bfd287e55741c2a4af6f7de0d72?s=256&d=identicon&r=PG",
                        "display_name": "Justin Kramer",
                        "link": "https://stackoverflow.com/users/203655/justin-kramer"
                    },
                    "is_accepted": false,
                    "score": 24,
                    "last_activity_date": 1343364552,
                    "last_edit_date": 1343364552,
                    "creation_date": 1343193544,
                    "answer_id": 11643198,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's a fast Clojure version, using the same basic algorithms:</p>\n\n\n\n<pre class=\"lang-lisp prettyprint-override\"><code>(set! *unchecked-math* true)\n\n(defn is-prime? [^long n]\n  (loop [i 2]\n    (if (zero? (unchecked-remainder-int n i))\n      false\n      (if (&gt;= (inc i) n)\n        true\n        (recur (inc i))))))\n\n(defn sexy-primes [m]\n  (for [x (range 11 (inc m))\n        :when (and (is-prime? x) (is-prime? (- x 6)))]\n    [(- x 6) x]))\n</code></pre>\n\n<p>It runs about 20x faster than your original on my machine. And here's a version that leverages the new reducers library in 1.5 (requires Java 7 or JSR 166):</p>\n\n<pre class=\"lang-lisp prettyprint-override\"><code>(require '[clojure.core.reducers :as r]) ;'\n\n(defn sexy-primes [m]\n  (-&gt;&gt; (vec (range 11 (inc m)))\n       (r/filter #(and (is-prime? %) (is-prime? (- % 6))))\n       (r/map #(list (- % 6) %))\n       (r/fold (fn ([] []) ([a b] (into a b))) conj)))\n</code></pre>\n\n<p>This runs about 40x faster than your original. On my machine, that's 100k in 1.5 seconds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 74486,
                        "reputation": 106261,
                        "user_id": 214010,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/2bfafb4d16a6dc78abef970bcab9ca97?s=256&d=identicon&r=PG",
                        "display_name": "mikera",
                        "link": "https://stackoverflow.com/users/214010/mikera"
                    },
                    "is_accepted": true,
                    "score": 30,
                    "last_activity_date": 1343271880,
                    "last_edit_date": 1343271880,
                    "creation_date": 1343178734,
                    "answer_id": 11641388,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Rough answers:</p>\n\n<ol>\n<li>Scala's static typing is helping it quite a bit here - this means that it uses the JVM pretty efficiently without too much extra effort.</li>\n<li>I'm not exactly sure on the Ruby/Python difference, but I suspect that <code>(2...n).all?</code> in the function <code>is-prime?</code> is likely to be quite well optimised in Ruby (EDIT: sounds like this is indeed the case, see Julian's answer for more detail...)</li>\n<li>Ruby 1.9.3 is just much better optimised</li>\n<li>Clojure code can certainly be accelerated a lot! While Clojure is dynamic by default, you can use type hints, primitive maths etc. to get close to Scala / pure Java speed in many cases when you need to.</li>\n</ol>\n\n<p>Most important optimisation in the Clojure code would be to use typed primitive maths within <code>is-prime?</code>, something like:</p>\n\n<pre><code>(set! *unchecked-math* true) ;; at top of file to avoid using BigIntegers\n\n(defn ^:static is-prime? [^long n]\n  (loop [i (long 2)] \n    (if (zero? (mod n i))\n      false\n      (if (&gt;= (inc i) n) true (recur (inc i))))))\n</code></pre>\n\n<p>With this improvement, I get Clojure completing 10k in 0.635 secs (i.e. the second fastest on your list, beating Scala)</p>\n\n<p><strong>P.S.</strong> note that you have printing code inside your benchmark in some cases - not a good idea as it will distort the results, especially if using a function like <code>print</code> for the first time causes initialisation of IO subsystems or something like that!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7445,
                        "reputation": 62729,
                        "user_id": 12943,
                        "user_type": "registered",
                        "accept_rate": 84,
                        "profile_image": "https://www.gravatar.com/avatar/d6a9924b767fe91c46def7edc7bce035?s=256&d=identicon&r=PG",
                        "display_name": "Bill K",
                        "link": "https://stackoverflow.com/users/12943/bill-k"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1343262485,
                    "last_edit_date": 1343262485,
                    "creation_date": 1343238265,
                    "answer_id": 11655541,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The answer to your question #1 is that Yes, the JVM is incredably fast and yes static typing helps.</p>\n\n<p>The JVM should be faster than C in the long run, possibly even faster than \"Normal\" assembly language--Of course you can always hand optimize assembly to beat anything by doing manual runtime profiling and creating a separate version for each CPU, you just have to be amazingly good and knowledgable.</p>\n\n<p>The reasons for Java's speed are: </p>\n\n<p>The JVM can analyze your code while it runs and hand-optimize it--for instance, if you had a method that could be statically analyzed at compile time to be a true function and the JVM noticed that you were often calling it with the same parameters, it COULD actually eliminate the call completely and just inject the results from the last call (I'm not sure if Java actually does this exactly, but it doest a lot of stuff like this). </p>\n\n<p>Due to static typing, the JVM can know a lot about your code at compile time, this lets it pre-optimize quite a bit of stuff.  It also lets the compiler optimize each class individually without knowledge of how another class is planning to use it.  Also Java doesn't have arbitrary pointers to memory location, it KNOWS what values in memory may and may not be changed and can optimize accordingly.</p>\n\n<p>Heap allocation is MUCH more efficient than C, Java's heap allocation is more like C's stack allocation in speed--yet more versatile.  A lot of time has gone into the different algroithims used here, it's an art--for instance, all the objects with a short lifespan (like C's stack variables) are allocated to a \"known\" free location (no searching for a free spot with enough space) and are all freed together in a single step (like a stack pop). </p>\n\n<p>The JVM can know quirks about your CPU architecture and generate machine code specifically for a given CPU.</p>\n\n<p>The JVM can speed your code long after you shipped it.  Much like moving a program to a new CPU can speed it up, moving it to a new version of the JVM can also give you huge speed performances taylored to CPUs that didn't even exist when you initially compiled your code, something c physically cannot do without a recomiple.</p>\n\n<p>By the way, most of the bad rep for java speed comes from the long startup time to load the JVM (Someday someone will build the JVM into the OS and this will go away!) and the fact that many developers are really bad at writing GUI code (especially threaded) which caused Java GUIs to often become unresponsive and glitchy.  Simple to use languages like Java and VB have their faults amplified by the fact that the capibilities of the average programmer tends to be lower than more complicated languages.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 348487,
                        "reputation": 33105,
                        "user_id": 683201,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/m01Ak.jpg?s=256",
                        "display_name": "Eve Freeman",
                        "link": "https://stackoverflow.com/users/683201/eve-freeman"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1343256868,
                    "last_edit_date": 1495540405,
                    "creation_date": 1343243970,
                    "answer_id": 11656994,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Based on <a href=\"https://stackoverflow.com/a/11652251/30433\">x4u's answer</a>, I wrote a scala version using recursion, and I improved on it by only going to the sqrt instead of x/2 for the prime check function. I get ~250ms for 100k, and ~600ms for 1M. I went ahead and went to 10M in ~6s.</p>\n\n<pre><code>import scala.annotation.tailrec\n\nvar count = 0;\ndef print(i:Int) = {\n  println((i - 6) + \" \" + i)\n  count += 1\n}\n\n@tailrec def isPrime(n:Int, i:Int = 3):Boolean = {\n  if(n % i == 0) return false;\n  else if(i * i &gt; n) return true;\n  else isPrime(n = n, i = i + 2)\n}      \n\n@tailrec def findPrimes(max:Int, bitMask:Int = 3, i:Int = 11):Unit = {\n  if (isPrime(i)) {\n    if((bitMask &amp; 1) != 0) print(i)\n    if(i + 2 &lt; max) findPrimes(max = max, bitMask = (bitMask | (1 &lt;&lt; 3)) &gt;&gt; 1, i = i + 2)\n  } else if(i + 2 &lt; max) {\n    findPrimes(max = max, bitMask = bitMask &gt;&gt; 1, i = i + 2)\n  }\n}\n\nval a = System.currentTimeMillis()\nfindPrimes(max=10000000)\nprintln(count)\nval b = System.currentTimeMillis()\nprintln((b - a).toString + \" mils\")\n</code></pre>\n\n<p>I also went back and wrote a CoffeeScript (V8 JavaScript) version, which gets ~15ms for 100k, 250ms for 1M, and 6s for 10M, by using a counter (ignoring I/O). If I turn on the output it takes ~150ms for 100k, 1s for 1M, and 12s for 10M. Couldn't use tail recursion here, unfortunately, so I had to convert it back into loops.</p>\n\n<pre><code>count = 0;\nprint = (i) -&gt;\n  console.log(\"#{i - 6} #{i}\")\n  count += 1\n  return\n\nisPrime = (n) -&gt;\n  i = 3\n  while i * i &lt; n\n    if n % i == 0\n      return false\n    i += 2\n  return true\n\nfindPrimes = (max) -&gt;\n  bitMask = 3\n  for i in [11..max] by 2\n    prime = isPrime(i)\n    if prime\n      if (bitMask &amp; 1) != 0\n        print(i)\n      bitMask |= (1 &lt;&lt; 3)\n    bitMask &gt;&gt;= 1\n  return\n\na = new Date()\nfindPrimes(1000000)\nconsole.log(count)\nb = new Date()\nconsole.log((b - a) + \" ms\")\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 85022,
                        "reputation": 14047,
                        "user_id": 237321,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/1c7d2d36a86da481db7d5db58bf3109c?s=256&d=identicon&r=PG",
                        "display_name": "x4u",
                        "link": "https://stackoverflow.com/users/237321/x4u"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1343231323,
                    "last_edit_date": 1343231323,
                    "creation_date": 1343227176,
                    "answer_id": 11652251,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I couldn't resist to do a few of the most obvious optimizations for the C version which made the 100k test now take 0.3s on my machine (5 times faster than the C version in the question, both compiled with MSVC 2010 /Ox).</p>\n\n<pre><code>int isprime( int x )\n{\n    int i, n;\n    for( i = 3, n = x &gt;&gt; 1; i &lt;= n; i += 2 )\n        if( x % i == 0 )\n            return 0;\n    return 1;\n}\n\nvoid findprimes( int m )\n{\n    int i, s = 3; // s is bitmask of primes in last 3 odd numbers\n    for( i = 11; i &lt; m; i += 2, s &gt;&gt;= 1 ) {\n        if( isprime( i ) ) {\n            if( s &amp; 1 )\n                printf( \"%d %d\\n\", i - 6, i );\n            s |= 1 &lt;&lt; 3;\n        }\n    }\n}\n\nmain() {\n    findprimes( 10 * 1000 );\n}\n</code></pre>\n\n<p>Here is the identical implemention in Java:</p>\n\n<pre><code>public class prime\n{\n    private static boolean isprime( final int x )\n    {\n        for( int i = 3, n = x &gt;&gt; 1; i &lt;= n; i += 2 )\n            if( x % i == 0 )\n                return false;\n        return true;\n    }\n\n    private static void findprimes( final int m )\n    {\n        int s = 3; // s is bitmask of primes in last 3 odd numbers\n        for( int i = 11; i &lt; m; i += 2, s &gt;&gt;= 1 ) {\n            if( isprime( i ) ) {\n                if( ( s &amp; 1 ) != 0 )\n                    print( i );\n                s |= 1 &lt;&lt; 3;\n            }\n        }\n    }\n\n    private static void print( int i )\n    {\n        System.out.println( ( i - 6 ) + \" \" + i );\n    }\n\n    public static void main( String[] args )\n    {\n        // findprimes( 300 * 1000 ); // for some JIT training\n        long time = System.nanoTime();\n        findprimes( 10 * 1000 );\n        time = System.nanoTime() - time;\n        System.err.println( \"time: \" + ( time / 10000 ) / 100.0 + \"ms\" );\n    }\n}\n</code></pre>\n\n<p>With Java 1.7.0_04 this runs almost exactly as fast as the C version. Client or server VM doesn't show much difference, except that JIT training seems to help the server VM a bit (~3%) while it has almost no effect with the client VM. The output in Java seems to be slower than in C. If the output is replaced with a static counter in both versions, the Java version runs a little faster than the C version.</p>\n\n<p>These are my times for the 100k run:</p>\n\n<ul>\n<li>319ms C compiled with /Ox and output to >NIL:</li>\n<li>312ms C compiled with /Ox and static counter</li>\n<li>324ms Java client VM with output to >NIL:</li>\n<li>299ms Java client VM with static counter</li>\n</ul>\n\n<p>and the 1M run (16386 results):</p>\n\n<ul>\n<li>24.95s C compiled with /Ox and static counter</li>\n<li>25.08s Java client VM with static counter</li>\n<li>24.86s Java server VM with static counter</li>\n</ul>\n\n<p>While this does not really answer your questions, it shows that small tweaks can have a noteworthy impact on performance. So to be able to really compare languages you should try to avoid all algorithmic differences as much as possible.</p>\n\n<p>It also gives a hint why Scala seems rather fast. It runs on the Java VM and thus benefits from its impressive performance.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 109560,
                        "reputation": 33292,
                        "user_id": 290221,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/cca2c2b0d6d8181e9e0c2f6040ce551e?s=256&d=identicon&r=PG",
                        "display_name": "Sebasti&#225;n Grignoli",
                        "link": "https://stackoverflow.com/users/290221/sebasti%c3%a1n-grignoli"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1343224139,
                    "last_edit_date": 1343224139,
                    "creation_date": 1343190738,
                    "answer_id": 11642757,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's the code for the Go (golang.org) version:</p>\n\n<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\n\nfunc main(){\n    findprimes(10*1000)\n}\n\nfunc isprime(x int) bool {\n    for i := 2; i &lt; x; i++ {\n        if x%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc findprimes(m int){\n    for i := 11; i &lt; m; i++ {\n        if isprime(i) &amp;&amp; isprime(i-6) {\n            fmt.Printf(\"%d %d\\n\", i-6, i)\n        }\n    }\n}\n</code></pre>\n\n<p>It ran just as fast as the C version.</p>\n\n<p><strong>Using an Asus u81a</strong>\nIntel Core 2 Duo T6500 2.1GHz, 2MB L2 cache, 800MHz FSB.\n4GB RAM </p>\n\n<p>The 100k version: <code>C: 2.723s</code> <code>Go: 2.743s</code></p>\n\n<p>With 1000000 (1M instead of 100K): <code>C: 3m35.458s</code> <code>Go: 3m36.259s</code> </p>\n\n<p>But I think that it would be fair to use Go's built in multithreading capabilities and compare that version with the regular C version (without multithreading), just because it's almost too easy to do multithreading with Go.</p>\n\n<p>Update: I did a parallel version using Goroutines in Go:</p>\n\n<pre><code>package main\n\nimport (\n  \"fmt\"\n  \"runtime\"\n)\n\nfunc main(){\n    runtime.GOMAXPROCS(4)\n    printer := make(chan string)\n    printer2 := make(chan string)\n    printer3 := make(chan string)\n    printer4 := make(chan string)\n    finished := make(chan int)\n\n    var buffer, buffer2, buffer3 string\n\n    running := 4\n    go findprimes(11, 30000, printer, finished)\n    go findprimes(30001, 60000, printer2, finished)\n    go findprimes(60001, 85000, printer3, finished)\n    go findprimes(85001, 100000, printer4, finished)\n\n    for {\n      select {\n        case i := &lt;-printer:\n          // batch of sexy primes received from printer channel 1, print them\n          fmt.Printf(i)\n        case i := &lt;-printer2:\n          // sexy prime list received from channel, store it\n          buffer = i\n        case i := &lt;-printer3:\n          // sexy prime list received from channel, store it\n          buffer2 = i\n        case i := &lt;-printer4:\n          // sexy prime list received from channel, store it\n          buffer3 = i\n        case &lt;-finished:\n          running--\n          if running == 0 {\n              // all goroutines ended\n              // dump buffer to stdout\n              fmt.Printf(buffer)\n              fmt.Printf(buffer2)\n              fmt.Printf(buffer3)\n              return\n          }\n      }\n    }\n}\n\nfunc isprime(x int) bool {\n    for i := 2; i &lt; x; i++ {\n        if x%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc findprimes(from int, to int, printer chan string, finished chan int){\n    str := \"\"\n    for i := from; i &lt;= to; i++ {\n        if isprime(i) &amp;&amp; isprime(i-6) {\n            str = str + fmt.Sprintf(\"%d %d\\n\", i-6, i)\n      }\n    }\n    printer &lt;- str\n    //fmt.Printf(\"Finished %d to %d\\n\", from, to)\n    finished &lt;- 1\n}\n</code></pre>\n\n<p><s>The parallelized version used in average 2.743 seconds, the exact same time that the regular version used.</s></p>\n\n<p>The parallelized version completed in 1.706 seconds. It used less than 1.5 Mb RAM.</p>\n\n<p><s>One odd thing: My dual core kubuntu 64bit never peaked in both cores.  It looked like Go was using just one core.</s> Fixed with a call to <code>runtime.GOMAXPROCS(4)</code></p>\n\n<p>Update: I ran the paralellized version up to 1M numbers.  <s>One of My CPU cores was at 100% all the time, while the other wasn't used at all (odd).  It took a whole minute more than the C and the regular Go versions. :(</s></p>\n\n<p>With 1000000 (1M instead of 100K): </p>\n\n<p><code>C: 3m35.458s</code> <code>Go: 3m36.259s</code> <code>Go using goroutines:</code><s>3m27.137s</s><code>2m16.125s</code> </p>\n\n<p>The 100k version: </p>\n\n<p><code>C: 2.723s</code> <code>Go: 2.743s</code> <code>Go using goroutines: 1.706s</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 314979,
                        "reputation": 309193,
                        "user_id": 748858,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://i.sstatic.net/17gYz.png?s=256",
                        "display_name": "mgilson",
                        "link": "https://stackoverflow.com/users/748858/mgilson"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343217694,
                    "creation_date": 1343217694,
                    "answer_id": 11649204,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Don't forget Fortran!  (Mostly joking, but I would expect similar performance to C).  The statements with exclamation points are optional, but good style. (<code>!</code> is a comment character in fortran 90)</p>\n\n<pre><code>logical function isprime(n)\nIMPLICIT NONE !\ninteger :: n,i\ndo i=2,n\n   if(mod(n,i).eq.0)) return .false.\nenddo\nreturn .true.\nend\n\nsubroutine findprimes(m)\nIMPLICIT NONE !\ninteger :: m,i\nlogical, external :: isprime\n\ndo i=11,m\n   if(isprime(i) .and. isprime(i-6))then\n      write(*,*) i-6,i\n   endif\nenddo\nend\n\nprogram main\nfindprimes(10*1000)\nend\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 57636,
                        "reputation": 18859,
                        "user_id": 172677,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://i.sstatic.net/lgANn.jpg?s=256",
                        "display_name": "Eastsun",
                        "link": "https://stackoverflow.com/users/172677/eastsun"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343208585,
                    "last_edit_date": 1343208585,
                    "creation_date": 1343198851,
                    "answer_id": 11644114,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is my scala version in both parallel and no-parallel, just for fun:\n(In my dual core compute, the parallel version takes 335ms while the no-parallel version takes 655ms)</p>\n\n<pre><code>object SexyPrimes {\n  def isPrime(n: Int): Boolean = \n    (2 to math.sqrt(n).toInt).forall{ n%_ != 0 }\n\n  def isSexyPrime(n: Int): Boolean = isPrime(n) &amp;&amp; isPrime(n-6)\n\n  def findPrimesPar(n: Int) {\n    for(k &lt;- (11 to n).par)\n      if(isSexyPrime(k)) printf(\"%d %d\\n\",k-6,k)\n  }\n\n  def findPrimes(n: Int) {\n    for(k &lt;- 11 to n)\n      if(isSexyPrime(k)) printf(\"%d %d\\n\",k-6,k)\n  }\n\n\n  def timeOf(call : =&gt;Unit) {\n    val start = System.currentTimeMillis\n    call\n    val end = System.currentTimeMillis\n    println((end-start)+\" mils\")\n  }\n\n  def main(args: Array[String]) {\n    timeOf(findPrimes(100*1000))\n    println(\"------------------------\")\n    timeOf(findPrimesPar(100*1000))\n  }\n}\n</code></pre>\n\n<p>EDIT: According to <em>Emil H</em>'s suggestion, I have changed my code to avoid the effects of IO and jvm warmup:</p>\n\n<p>The result shows in my compute:</p>\n\n<blockquote>\n  <p>List(3432, 1934, 3261, 1716, 3229, 1654, 3214, 1700)</p>\n</blockquote>\n\n<pre><code>object SexyPrimes {\n  def isPrime(n: Int): Boolean = \n    (2 to math.sqrt(n).toInt).forall{ n%_ != 0 }\n\n  def isSexyPrime(n: Int): Boolean = isPrime(n) &amp;&amp; isPrime(n-6)\n\n  def findPrimesPar(n: Int) {\n    for(k &lt;- (11 to n).par)\n      if(isSexyPrime(k)) ()//printf(\"%d %d\\n\",k-6,k)\n  }\n\n  def findPrimes(n: Int) {\n    for(k &lt;- 11 to n)\n      if(isSexyPrime(k)) ()//printf(\"%d %d\\n\",k-6,k)\n  }\n\n\n  def timeOf(call : =&gt;Unit): Long = {\n    val start = System.currentTimeMillis\n    call\n    val end = System.currentTimeMillis\n    end - start \n  }\n\n  def main(args: Array[String]) {\n    val xs = timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::\n             timeOf(findPrimes(1000*1000))::timeOf(findPrimesPar(1000*1000))::Nil\n    println(xs)\n  }\n}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 55732,
                        "reputation": 76505,
                        "user_id": 166949,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://i.sstatic.net/tIFie.png?s=256",
                        "display_name": "steveha",
                        "link": "https://stackoverflow.com/users/166949/steveha"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1343183750,
                    "last_edit_date": 1343183750,
                    "creation_date": 1343181216,
                    "answer_id": 11641623,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Never mind the benchmarks; the problem got me interested and I made some fast tweaks.  This uses the <code>lru_cache</code> decorator, which memoizes a function; so when we call <code>is_prime(i-6)</code> we basically get that prime check for free.  This change cuts the work roughly in half.  Also, we can make the <code>range()</code> calls step through just the odd numbers, cutting the work roughly in half again.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Memoization\">http://en.wikipedia.org/wiki/Memoization</a></p>\n\n<p><a href=\"http://docs.python.org/dev/library/functools.html\">http://docs.python.org/dev/library/functools.html</a></p>\n\n<p>This requires Python 3.2 or newer to get <code>lru_cache</code>, but could work with an older Python if you install a Python recipe that provides <code>lru_cache</code>.  If you are using Python 2.x you should really use <code>xrange()</code> instead of <code>range()</code>.</p>\n\n<p><a href=\"http://code.activestate.com/recipes/577479-simple-caching-decorator/\">http://code.activestate.com/recipes/577479-simple-caching-decorator/</a></p>\n\n<pre><code>from functools import lru_cache\nimport time as time_\n\n@lru_cache()\ndef is_prime(n):\n    return n%2 and all(n%i for i in range(3, n, 2))\n\ndef primes_below(x):\n    return [(i-6, i) for i in range(9, x+1, 2) if is_prime(i) and is_prime(i-6)]\n\ncorrect100 = [(5, 11), (7, 13), (11, 17), (13, 19), (17, 23), (23, 29),\n        (31, 37), (37, 43), (41, 47), (47, 53), (53, 59), (61, 67), (67, 73),\n        (73, 79), (83, 89)]\nassert(primes_below(100) == correct100)\n\na = time_.time()\nprint(primes_below(30*1000))\nb = time_.time()\n\nelapsed = b - a\nprint(\"{} msec\".format(round(elapsed * 1000)))\n</code></pre>\n\n<p>The above took only a very short time to edit.  I decided to take it one step further, and make the primes test only try prime divisors, and only up to the square root of the number being tested.  The way I did it only works if you check numbers in order, so it can accumulate all the primes as it goes; but this problem was already checking the numbers in order so that was fine.</p>\n\n<p>On my laptop (nothing special; processor is a 1.5 GHz AMD Turion II \"K625\") this version produced an answer for 100K in under 8 seconds.</p>\n\n<pre><code>from functools import lru_cache\nimport math\nimport time as time_\n\nknown_primes = set([2, 3, 5, 7])\n\n@lru_cache(maxsize=128)\ndef is_prime(n):\n    last = math.ceil(math.sqrt(n))\n    flag = n%2 and all(n%x for x in known_primes if x &lt;= last)\n    if flag:\n        known_primes.add(n)\n    return flag\n\ndef primes_below(x):\n    return [(i-6, i) for i in range(9, x+1, 2) if is_prime(i) and is_prime(i-6)]\n\ncorrect100 = [(5, 11), (7, 13), (11, 17), (13, 19), (17, 23), (23, 29),\n        (31, 37), (37, 43), (41, 47), (47, 53), (53, 59), (61, 67), (67, 73),\n        (73, 79), (83, 89)]\nassert(primes_below(100) == correct100)\n\na = time_.time()\nprint(primes_below(100*1000))\nb = time_.time()\n\nelapsed = b - a\nprint(\"{} msec\".format(round(elapsed * 1000)))\n</code></pre>\n\n<p>The above code is pretty easy to write in Python, Ruby, etc. but would be more of a pain in C.</p>\n\n<p>You can't compare the numbers on this version against the numbers from the other versions without rewriting the others to use similar tricks.  I'm not trying to prove anything here; I just thought the problem was fun and I wanted to see what sort of easy performance improvements I could glean.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 402910,
                        "reputation": 51079,
                        "user_id": 770361,
                        "user_type": "registered",
                        "accept_rate": 90,
                        "profile_image": "https://www.gravatar.com/avatar/3243e2905cb76df3a79be6daacb5848a?s=256&d=identicon&r=PG",
                        "display_name": "Luigi Plinge",
                        "link": "https://stackoverflow.com/users/770361/luigi-plinge"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1343180569,
                    "last_edit_date": 1495542298,
                    "creation_date": 1343180569,
                    "answer_id": 11641556,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>You can make the Scala a lot faster by modifying your <code>isPrime</code> method to</p>\n\n<pre><code>  def isPrime(n: Int, i: Int = 2): Boolean = \n    if (i == n) true \n    else if (n % i != 0) isPrime(n, i + 1)\n    else false\n</code></pre>\n\n<p>Not quite as concise but the program runs in 40% of the time! </p>\n\n<p>We cut out the superfluous <code>Range</code> and anonymous <code>Function</code> objects, the Scala compiler recognizes the tail-recursion and turns it into a while-loop, which the JVM can turn into more or less optimal machine code, so it shouldn't be too far off the C version.</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/questions/6146182/how-to-optimize-for-comprehensions-and-loops-in-scala\">How to optimize for-comprehensions and loops in Scala?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 319820,
                        "reputation": 3429,
                        "user_id": 637787,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9fb6aa67570758470fd82d411c6f547d?s=256&d=identicon&r=PG",
                        "display_name": "Julian",
                        "link": "https://stackoverflow.com/users/637787/julian"
                    },
                    "is_accepted": false,
                    "score": 22,
                    "last_activity_date": 1343177865,
                    "last_edit_date": 1343177865,
                    "creation_date": 1343176512,
                    "answer_id": 11641182,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'll answer just #2, since it's the only one I've got anything remotely intelligent to say, but for your Python code, you're creating an intermediate list in <code>is_prime</code>, whereas you're using <code>.map</code> in your <code>all</code> in Ruby which is just iterating.</p>\n\n<p>If you change your <code>is_prime</code> to:</p>\n\n<pre><code>def is_prime(n):\n    return all((n%j &gt; 0) for j in range(2, n))\n</code></pre>\n\n<p>they're on par.</p>\n\n<p>I could optimize the Python further, but my Ruby isn't good enough to know when I've given more of an advantage (e.g., using <code>xrange</code> makes Python win on my machine, but I don't remember if the Ruby range you used creates an entire range in memory or not).</p>\n\n<p><strong>EDIT:</strong> Without being too silly, making the Python code look like:</p>\n\n<pre><code>import time\n\ndef is_prime(n):\n    return all(n % j for j in xrange(2, n))\n\ndef primes_below(x):\n    return [(j-6, j) for j in xrange(9, x + 1) if is_prime(j) and is_prime(j-6)]\n\na = int(round(time.time() * 1000))\nprint(primes_below(10*1000))\nb = int(round(time.time() * 1000))\nprint(str((b-a)) + \" mils\")\n</code></pre>\n\n<p>which doesn't change much more, puts it at 1.5s for me, and, with being extra silly, running it with PyPy puts it at .3s for 10K, and 21s for 100K.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1661177,
                        "reputation": 315,
                        "user_id": 1529452,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3d584673f814490964471ad0f30c1d62?s=256&d=identicon&r=PG",
                        "display_name": "Tomas Lazaro",
                        "link": "https://stackoverflow.com/users/1529452/tomas-lazaro"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1343177591,
                    "last_edit_date": 1343177591,
                    "creation_date": 1343177119,
                    "answer_id": 11641237,
                    "question_id": 11641098,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>In Scala try using Tuple2 instead of List, it should go faster. Just remove the word 'List' since (x, y) is a Tuple2.</p>\n\n<p>Tuple2 is specialized for Int, Long and Double meaning it won't have to box/unbox those raw datatypes. <a href=\"https://github.com/scala/scala/blob/v2.9.2/src/library/scala/Tuple2.scala#L1\" rel=\"nofollow\">Tuple2 source</a>. List isn't specialized. <a href=\"https://github.com/scala/scala/blob/v2.9.2/src/library/scala/collection/immutable/List.scala#L1\" rel=\"nofollow\">List source</a>.</p>\n"
                }
            ]
        },
        {
            "745743": [
                {
                    "owner": {
                        "account_id": 5792,
                        "reputation": 119011,
                        "user_id": 9493,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=256&d=identicon&r=PG",
                        "display_name": "Brian",
                        "link": "https://stackoverflow.com/users/9493/brian"
                    },
                    "is_accepted": false,
                    "score": 100,
                    "last_activity_date": 1696789318,
                    "last_edit_date": 1696789318,
                    "creation_date": 1239740591,
                    "answer_id": 749218,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As the varied responses will tell you, the line between interpreted and compiled is no longer as clear as it was when such terms were coined.  In fact, it's also something of a mistake to consider <em>languages</em> as being either interpreted or compiled, as different <em>implementations</em> of languages may do different things.  These days you can find both <a href=\"https://root.cern.ch/root/html534/guides/users-guide/CINT.html\" rel=\"nofollow noreferrer\">C/C++ interpreters</a> and <a href=\"http://web.archive.org/web/20200426155256/https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/JavaScript_Compiler\" rel=\"nofollow noreferrer\">Javascript compilers</a>.</p>\n<p>Even when looking at an implementation, things still aren't clear-cut. There are layers of interpretation. Here are a few of the gradations between interpreted and compiled:</p>\n<ol>\n<li><p>Pure interpretation.  Pretty much what it says on the tin. Read a line of source and immediately do what it says.  This isn't actually done by many production languages - pretty much just things like shell scripts.</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" rel=\"nofollow noreferrer\">Tokenization</a> + interpretation.  A trivial optimization on the above. Rather than interpret each line from scratch, it's first tokenized (that is, rather than seeing a string like &quot;print 52 + x&quot;, it's translated into a stream of tokens (eg. <code>[PRINT_STATEMENT, INTEGER(52), PLUS_SIGN, IDENTIFIER('x')]</code> ) to avoid repeatedly performing that state of interpretation.  Many versions of basic worked this way.</p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Bytecode\" rel=\"nofollow noreferrer\">Bytecode</a> compilation.  This is the approach taken by languages like Java and C# (though see below).  The code is transformed into instructions for a &quot;virtual machine&quot;.  These instructions are then interpreted.  This is also the approach taken by python (or at least CPython, the most common implementation.) The <a href=\"http://www.jython.org/\" rel=\"nofollow noreferrer\">Jython</a> and <a href=\"https://ironpython.net/\" rel=\"nofollow noreferrer\">IronPython</a> implementations also take this approach, but compile to the bytecode for the Java and C# virtual machines respectively.</p>\n</li>\n<li><p>Bytecode + <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\" rel=\"nofollow noreferrer\">Just in Time compilation</a>.  As above, but rather than interpreting the bytecodes, the code that would be performed is compiled from the bytecode at the point of execution and then run.  In some cases, this can actually outperform native compilation, as it is free to perform runtime analysis on the code, and can use specific features of the current processor (while static compilation may need to compile for a lowest common denominator CPU).  Later versions of Java, and C# use this approach.  <a href=\"http://psyco.sourceforge.net/\" rel=\"nofollow noreferrer\">Psyco</a> performs this for python.</p>\n</li>\n<li><p>Native machine-code compilation. The code is compiled to the machine code of the target system. You may think we've now completely eliminated interpretation, but even here there are subtleties.  Some machine code instructions are not actually directly implemented in hardware, but are in fact implemented via <a href=\"http://en.wikipedia.org/wiki/Microcode\" rel=\"nofollow noreferrer\">microcode</a> - even machine code is sometimes interpreted!</p>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 22779,
                        "reputation": 131319,
                        "user_id": 56541,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://i.sstatic.net/Wm7Xg.png?s=256",
                        "display_name": "David Z",
                        "link": "https://stackoverflow.com/users/56541/david-z"
                    },
                    "is_accepted": false,
                    "score": 26,
                    "last_activity_date": 1363757763,
                    "last_edit_date": 1363757763,
                    "creation_date": 1239665423,
                    "answer_id": 745789,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Technically, Python is compiled to bytecode and then interpreted in a <a href=\"http://en.wikipedia.org/wiki/Virtual_machine\" rel=\"noreferrer\">virtual machine</a>. If the Python compiler is able to write out the bytecode into a .pyc file, it will (usually) do so.</p>\n\n<p>On the other hand, there's no explicit compilation step in Python as there is with Java or C. From the point of view of the developer, it looks like Python is just interpreting the .py file directly. Plus, Python offers an interactive prompt where you can type Python statements and have them executed immediately. So the workflow in Python is much more similar to that of an interpreted language than that of a compiled language. To me (and a lot of other developers, I suppose), that distinction of workflow is more important than whether there's an intermediate bytecode step or not.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5870,
                        "reputation": 49,
                        "user_id": 9646,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9e334d079aafac91ad4ee3293608098b?s=256&d=identicon&r=PG",
                        "display_name": "Phrodo_00",
                        "link": "https://stackoverflow.com/users/9646/phrodo-00"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1239664823,
                    "creation_date": 1239664823,
                    "answer_id": 745752,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Yes, it's interpreted, its main implementation compiles bytecode first and then runs it though (kind of if you took a java source and the JVM compiled it before running it). Still, you can run your application in background. Actually, you can run pretty much anything in background.</p>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user36457"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1239664752,
                    "creation_date": 1239664752,
                    "answer_id": 745751,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Python is an interpreted language but it is the bytecode which is interpreted at run time. There are also many tools out there that can assist you in making your programs run as a windows service / UNIX daemon.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 2550,
                        "reputation": 200408,
                        "user_id": 3560,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=256&d=identicon&r=PG",
                        "display_name": "John Millikin",
                        "link": "https://stackoverflow.com/users/3560/john-millikin"
                    },
                    "is_accepted": true,
                    "score": 53,
                    "last_activity_date": 1239664651,
                    "creation_date": 1239664651,
                    "answer_id": 745749,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>There's multiple questions here:</p>\n\n<ol>\n<li>No, Python is not interpreted. The standard implementation compiles to bytecode, and then executes in a virtual machine. Many modern JavaScript engines also do this.</li>\n<li>Regardless of implementation (interpreter, VM, machine code), anything you want can run in the background. You can run shell scripts in the background, if you want.</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 32435,
                        "reputation": 2676,
                        "user_id": 90052,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3d91c3854c3f9d9dc0c2a8c1e11af683?s=256&d=identicon&r=PG",
                        "display_name": "user90052",
                        "link": "https://stackoverflow.com/users/90052/user90052"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1239664579,
                    "creation_date": 1239664579,
                    "answer_id": 745745,
                    "question_id": 745743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Yes, Python is interpreted, but you can also run them as long-running applications.</p>\n"
                }
            ]
        },
        {
            "6537487": [
                {
                    "owner": {
                        "account_id": 2435854,
                        "reputation": 349,
                        "user_id": 2125780,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cdafc3dd89228f3ab32c5ea496cd29d1?s=256&d=identicon&r=PG",
                        "display_name": "Daymarquez",
                        "link": "https://stackoverflow.com/users/2125780/daymarquez"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1542475435,
                    "last_edit_date": 1542475435,
                    "creation_date": 1362194514,
                    "answer_id": 15170325,
                    "question_id": 6537487,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is extremely simple! Rather than importing odd modules for python or trying long commands you can take advantage of windows OS commands.</p>\n\n<p>In windows, commands exist to change the command prompt text color. You can use this in python by starting with a: <code>import os</code></p>\n\n<p>Next you need to have a line changing the text color, place it were you want in your code.\n<code>os.system('color 4')</code></p>\n\n<p>You can figure out the other colors by starting cmd.exe and typing color help.</p>\n\n<p>The good part? Thats all their is to it, to simple lines of code.\n-Day</p>\n"
                },
                {
                    "owner": {
                        "account_id": 210792,
                        "reputation": 34678,
                        "user_id": 462604,
                        "user_type": "registered",
                        "accept_rate": 68,
                        "profile_image": "https://www.gravatar.com/avatar/7176c041527db5489a2181a0f87f57d9?s=256&d=identicon&r=PG",
                        "display_name": "Jakob Bowyer",
                        "link": "https://stackoverflow.com/users/462604/jakob-bowyer"
                    },
                    "is_accepted": true,
                    "score": 75,
                    "last_activity_date": 1309449345,
                    "creation_date": 1309449345,
                    "answer_id": 6537602,
                    "question_id": 6537487,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Or about the best module I have found \n<a href=\"http://pypi.python.org/pypi/colorama\">http://pypi.python.org/pypi/colorama</a></p>\n"
                }
            ]
        },
        {
            "9027862": [
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 43,
                    "last_activity_date": 1496141026,
                    "last_edit_date": 1496141026,
                    "creation_date": 1327629416,
                    "answer_id": 9028088,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>L[x::y]</code> means a slice of <code>L</code> where the <code>x</code> is the index to start from and <code>y</code> is the step size. Here are some examples you can try in the interpreter</p>\n\n<pre><code>&gt;&gt;&gt; L=range(20)\n&gt;&gt;&gt; L\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n</code></pre>\n\n<p>If you want every 3rd element</p>\n\n<pre><code>&gt;&gt;&gt; L[::3]\n[0, 3, 6, 9, 12, 15, 18]\n</code></pre>\n\n<p>Now every third element starting from L[1]</p>\n\n<pre><code>&gt;&gt;&gt; L[1::3]\n[1, 4, 7, 10, 13, 16, 19]\n</code></pre>\n\n<p>Now every third element starting from L[2]</p>\n\n<pre><code>&gt;&gt;&gt; L[2::3]\n[2, 5, 8, 11, 14, 17]\n</code></pre>\n\n<p>You can specify a negative step to go backwards</p>\n\n<pre><code>&gt;&gt;&gt; L[::-1]\n[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n</code></pre>\n\n<p>You can also assign to this slice, but the value must have the same length as the slice you are replacing</p>\n\n<pre><code>&gt;&gt;&gt; L[::3]=[0,0,0,0,0,0,0]\n&gt;&gt;&gt; L\n[0, 1, 2, 0, 4, 5, 0, 7, 8, 0, 10, 11, 0, 13, 14, 0, 16, 17, 0, 19]\n</code></pre>\n\n<p>Finally, you can delete every 3rd element like this</p>\n\n<pre><code>&gt;&gt;&gt; del L[::3]\n&gt;&gt;&gt; L\n[1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 213792,
                        "reputation": 4871,
                        "user_id": 467379,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/28ebaf1c76954ab94e24766f199fc01d?s=256&d=identicon&r=PG",
                        "display_name": "ncmathsadist",
                        "link": "https://stackoverflow.com/users/467379/ncmathsadist"
                    },
                    "is_accepted": true,
                    "score": 44,
                    "last_activity_date": 1327629901,
                    "last_edit_date": 1327629901,
                    "creation_date": 1327627685,
                    "answer_id": 9027898,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It slices</p>\n\n<pre><code>x[startAt:endBefore:skip]\n</code></pre>\n\n<p>if you use <code>skip = 2</code>, every other element the list beginning at <code>startAt</code> and ending at <code>endBefore</code> will be selected.  [Remember: indices live BETWEEN list elements]</p>\n\n<p>To see this, enter </p>\n\n<pre><code>x = range(100)\n</code></pre>\n\n<p>at the Python prompt.  Then try these things</p>\n\n<pre><code>x[::2]\nx[::3]\nx[10:40:6]\n</code></pre>\n\n<p>and see what happens.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1083804,
                        "reputation": 2612,
                        "user_id": 1080024,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/5a37dba069d0f85927181d274125fddc?s=256&d=identicon&r=PG",
                        "display_name": "Divya",
                        "link": "https://stackoverflow.com/users/1080024/divya"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1327628141,
                    "creation_date": 1327628141,
                    "answer_id": 9027954,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is the syntax for list slicing. \nWhen you say,</p>\n\n<pre><code>list[a:b:c],\n</code></pre>\n\n<p>a is the starting index, b is the ending index and c is the optional step size. \nThis will give you a list starting at index a(inclusive) and ending at index b(exclusive) picking elements at a step of c.</p>\n\n<p>For example,</p>\n\n<pre><code>l = [1,2,3,4,5,6,7]\n</code></pre>\n\n<p>If I say l[2:6:2], this will give me [3,5].</p>\n\n<p>If you skip the end index, like in your question, it would take elements from the start index (x), pick every yth element until it reaches the end of the list if y is positive and beginning of the list if y is negative. </p>\n\n<p>E.g. l[1::-1] = [2,1]</p>\n\n<p>l[1::2] = [2,4,6]</p>\n\n<p>The default step size is 1. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 59946,
                        "reputation": 30071,
                        "user_id": 179216,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/08Iyn.png?s=256",
                        "display_name": "Jeff B",
                        "link": "https://stackoverflow.com/users/179216/jeff-b"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327627687,
                    "last_edit_date": 1495542867,
                    "creation_date": 1327627687,
                    "answer_id": 9027899,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>This is a Slice.</p>\n\n<p>[start:end:step]</p>\n\n<p>Leaving any blank puts them at a default value, in your case it is taking every <code>y</code> elements starting at <code>x</code> and going until the end of the list.</p>\n\n<p>See: <a href=\"https://stackoverflow.com/questions/3453085/what-is-double-colon-in-python\">What is :: (double colon) in Python when subscripting sequences?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 78959,
                        "reputation": 4037,
                        "user_id": 224295,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3cbf477336671514ef027caf00d81996?s=256&d=identicon&r=PG",
                        "display_name": "philofinfinitejest",
                        "link": "https://stackoverflow.com/users/224295/philofinfinitejest"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327627628,
                    "creation_date": 1327627628,
                    "answer_id": 9027892,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Returns a list containing every yth element of list starting at index x.</p>\n\n<pre><code>&gt;&gt;&gt; alist = range(10)\n&gt;&gt;&gt; alist[0::2]\n[0, 2, 4, 6, 8]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 306769,
                        "reputation": 16297,
                        "user_id": 617711,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/fHTfP.jpg?s=256",
                        "display_name": "Rob Wouters",
                        "link": "https://stackoverflow.com/users/617711/rob-wouters"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327627591,
                    "creation_date": 1327627591,
                    "answer_id": 9027890,
                    "question_id": 9027862,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It means create a new list from <code>x</code> until the end with step <code>y</code>:</p>\n\n<pre><code>&gt;&gt;&gt; l = range(10)\n&gt;&gt;&gt; list(l[2::2])\n[2, 4, 6, 8]\n</code></pre>\n"
                }
            ]
        },
        {
            "1859865": [
                {
                    "owner": {
                        "account_id": 16568247,
                        "reputation": 1,
                        "user_id": 11972201,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/J8EDI.jpg?s=256",
                        "display_name": "Lucky Pratama",
                        "link": "https://stackoverflow.com/users/11972201/lucky-pratama"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1566671166,
                    "creation_date": 1566671166,
                    "answer_id": 57640568,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>To achieve a good speed performance or implementing a real multithreading program, calling python script directly from java (native) is the best way. Just prepare your python script then let java do the rest for concurrent invocation into your python script.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 574805,
                        "reputation": 296,
                        "user_id": 219727,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/1e9c67f240fb33bd542b94474424d218?s=256&d=identicon&r=PG",
                        "display_name": "Ron",
                        "link": "https://stackoverflow.com/users/219727/ron"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1260352033,
                    "creation_date": 1260352033,
                    "answer_id": 1872738,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>If you know Python and has bought into the \"pythonic\" way of doing things, then Jython allows you to bring that philosophy to the JVM stack. If you do this, it is much more than just adding scripting capability.</p>\n\n<p>In our latest projects, all the custom and business logic is built in Jython, at the same time we can still leverage some of the great tried and tested Java libraries like Solr, Jasperreports, Quartz, Jetty, Velocity to name a few.</p>\n\n<p>It does get compiled to bytecode, however, an extra layer is being added, but is no different to using an ORM instead of straight JDBC for example.</p>\n\n<p>What you gain in productivity far out weighs the minuscule lost in performance.</p>\n\n<p>On the server side, Jython is rarely the bottleneck.  For mini desktop apps, there may be issues, but very much dependent on what you are trying to do.</p>\n\n<p>The latest JDK, together with containers like Jetty or Tomcat are very mature and stable, adding Python on top, in many cases, gives the best of both worlds.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11659,
                        "reputation": 54265,
                        "user_id": 22595,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://i.sstatic.net/kxy3v.jpg?s=256",
                        "display_name": "Micha\u0142 Niklas",
                        "link": "https://stackoverflow.com/users/22595/micha%c5%82-niklas"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1260258321,
                    "creation_date": 1260258321,
                    "answer_id": 1865328,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>I need Jython to test JDBC drivers. Some of apps I use work use ODBC, some use JDBC. Using Jython I can test both type of drivers from one Python source\n(to test ODBC I use JDBC-ODBC bridge).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 27626,
                        "reputation": 353471,
                        "user_id": 73070,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/d54ed51c0f03cb461741c3ec77a837b2?s=256&d=identicon&r=PG",
                        "display_name": "Joey",
                        "link": "https://stackoverflow.com/users/73070/joey"
                    },
                    "is_accepted": true,
                    "score": 28,
                    "last_activity_date": 1260205832,
                    "last_edit_date": 1260205832,
                    "creation_date": 1260191417,
                    "answer_id": 1859872,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Quoting <a href=\"http://en.wikipedia.org/wiki/Jython\" rel=\"noreferrer\">Wikipedia</a>:</p>\n\n<blockquote>\n  <p>Jython, successor of JPython, is an implementation of the Python programming language written in Java.</p>\n</blockquote>\n\n<p>As for what uses it may have:</p>\n\n<blockquote>\n  <p>Jython programs can seamlessly import and use any Java class. Except for some standard modules, Jython programs use Java classes instead of Python modules.</p>\n</blockquote>\n\n<p>Performance measurements of Jython, IronPython and CPython show that both Jython and IronPython outperform CPython for some cases with large datasets.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 78514,
                        "reputation": 141,
                        "user_id": 223414,
                        "user_type": "registered",
                        "accept_rate": 0,
                        "profile_image": "https://www.gravatar.com/avatar/e3e9f70d3ed18c29cf383a6ff4f20725?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Priyabrata Hota",
                        "link": "https://stackoverflow.com/users/223414/priyabrata-hota"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1260199362,
                    "last_edit_date": 1260199362,
                    "creation_date": 1260197878,
                    "answer_id": 1860474,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>When will I need Jython?</p>\n\n<p>You can write administrative scripts for Websphere application server using Jython. The scripts are used to automate common administrative tasks and configure security in Websphere application server.</p>\n\n<p>WebSphere utilizes the JMX API to create MBeans that are exposed as an API of internal WebSphere objects. As the Jython scripts are based on Java and they run on the JVM they can access those objects and can be utilized to configure WebSphere. </p>\n\n<p>Besides it is fun to write code in Jython and you learn a new language.</p>\n\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.base.doc/info/aes/ae/txml_launchscript.html\" rel=\"nofollow noreferrer\">Here is the details</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 62802,
                        "reputation": 535,
                        "user_id": 186323,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b03d2828ea62ed01f683b0f55654a71b?s=256&d=identicon&r=PG",
                        "display_name": "Richie",
                        "link": "https://stackoverflow.com/users/186323/richie"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1260195494,
                    "creation_date": 1260195494,
                    "answer_id": 1860242,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Two other reasons:</p>\n\n<ul>\n<li>Embedding scripting into large Java application. </li>\n<li>Use Java threads to write multi-threaded programs in Jython. </li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 15903,
                        "reputation": 328044,
                        "user_id": 34088,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/8a4d6f03a8879432d8563aefbf48e787?s=256&d=identicon&r=PG",
                        "display_name": "Aaron Digulla",
                        "link": "https://stackoverflow.com/users/34088/aaron-digulla"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1260192904,
                    "creation_date": 1260192904,
                    "answer_id": 1860018,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>For example to add a nice scripting language to your code.</p>\n\n<blockquote>\n  <p>What are the drawbacks?</p>\n</blockquote>\n\n<p>The main drawback is that Jython lags behind the official CPython distribution. Currently, you can get a version of Jython that is compatible with Python 2.5.2 while CPython is at 3.1.</p>\n\n<p>Also some esoteric modules aren't supported. Usually, you won't notice and/or be able to easily find a Java replacement.</p>\n\n<blockquote>\n  <p>I assume it is slow?</p>\n</blockquote>\n\n<p>Compared to what? Usually, it's either fast enough or, when it isn't, you can replace a few lines of Python with about 1'000 lines of much faster Java.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9193,
                        "reputation": 345852,
                        "user_id": 16883,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/0382297f273df0a544b0c6c2734de096?s=256&d=identicon&r=PG",
                        "display_name": "Michael Borgwardt",
                        "link": "https://stackoverflow.com/users/16883/michael-borgwardt"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1260192320,
                    "creation_date": 1260192320,
                    "answer_id": 1859971,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<blockquote>\n  <p>When will I need Jython?</p>\n</blockquote>\n\n<p>When you want to program in Python but need (or want) to have the result run on a Java virtual machine, or use existing Java components.</p>\n\n<blockquote>\n  <p>What are the drawbacks.</p>\n</blockquote>\n\n<p>Jython may not be 100% compatible with Python, though any incompatibility would be considered a bug. If you later want/need to run on CPython, any code that uses Java components will have to be rewritten.</p>\n\n<blockquote>\n  <p>I assume it is slow?</p>\n</blockquote>\n\n<p>That depends, as always, on your specific usecase. It may actually be faster than CPython in some cases; and of course it depends on the specific JVM you run under - these get better all the time.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 71563,
                        "reputation": 7061,
                        "user_id": 207028,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/94bef01465a5b1125c79ef16e152a246?s=256&d=identicon&r=PG",
                        "display_name": "wisty",
                        "link": "https://stackoverflow.com/users/207028/wisty"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1260192183,
                    "creation_date": 1260192183,
                    "answer_id": 1859951,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The JVM does some nice dynamic optimization, but it's probably nothing to get excited about. JRuby sometimes runs faster on the JVM (<a href=\"http://www.engineyard.com/blog/2009/j-is-for-jvm-why-the-j-in-jruby/\" rel=\"nofollow noreferrer\">http://www.engineyard.com/blog/2009/j-is-for-jvm-why-the-j-in-jruby/</a>) by optimizing the code paths that run a lot, but that's Ruby, not Python. </p>\n\n<p>Java libraries are the main reason. Lots of companies have big globs of Java code that can be scripted with Python. There's also a few open source frameworks (Struts and Eclipse spring to mind) which you can script with Jython.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 62859,
                        "reputation": 5289,
                        "user_id": 186457,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/07f950346ffd9499efde49c0529113b6?s=256&d=identicon&r=PG",
                        "display_name": "Vitaliy Liptchinsky",
                        "link": "https://stackoverflow.com/users/186457/vitaliy-liptchinsky"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1260191603,
                    "creation_date": 1260191603,
                    "answer_id": 1859894,
                    "question_id": 1859865,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Jython is a Python implementation which runs on top of JVM. \nTheoretically, Jython is a bit slower, then CPython.</p>\n\n<p>You can find some benchmarks here:\n<a href=\"http://www.smallshire.org.uk/sufficientlysmall/2009/05/22/ironpython-2-0-and-jython-2-5-performance-compared-to-python-2-5/\" rel=\"nofollow noreferrer\">http://www.smallshire.org.uk/sufficientlysmall/2009/05/22/ironpython-2-0-and-jython-2-5-performance-compared-to-python-2-5/</a></p>\n"
                }
            ]
        },
        {
            "14295322": [
                {
                    "owner": {
                        "account_id": 941537,
                        "reputation": 6015,
                        "user_id": 969534,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/8e486349f7b6c6e378e2ae2920690b39?s=256&d=identicon&r=PG",
                        "display_name": "dav1d",
                        "link": "https://stackoverflow.com/users/969534/dav1d"
                    },
                    "is_accepted": true,
                    "score": 24,
                    "last_activity_date": 1547138316,
                    "last_edit_date": 1547138316,
                    "creation_date": 1358011152,
                    "answer_id": 14295815,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I would recommend you <a href=\"http://sphinx-doc.org/\" rel=\"nofollow noreferrer\">Sphinx</a>, you add your documentation as <code>__doc__</code> and the <code>autodoc</code> module of Sphinx will generate the docs for you (<a href=\"http://docs.python.org/3/\" rel=\"nofollow noreferrer\">docs.python.org</a> also uses Sphinx). The markup is <a href=\"http://docutils.sourceforge.net/docs/user/rst/quickref.html\" rel=\"nofollow noreferrer\">reStructuredText</a>, similiar to Markdown (if you prefer Markdown, you can use <a href=\"https://pdoc3.github.io/pdoc\" rel=\"nofollow noreferrer\">pdoc</a>).</p>\n\n<p>e.g.:</p>\n\n<pre><code>@app.route('/download/&lt;int:id&gt;')\ndef download_id(id):\n    '''This downloads a certain image specified by *id*'''\n    return ...\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 476593,
                        "reputation": 2358,
                        "user_id": 887594,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c70add0db17f235b617a421e924c1ad7?s=256&d=identicon&r=PG",
                        "display_name": "Cl&#233;ment Renaud",
                        "link": "https://stackoverflow.com/users/887594/cl%c3%a9ment-renaud"
                    },
                    "is_accepted": false,
                    "score": 25,
                    "last_activity_date": 1543493962,
                    "last_edit_date": 1543493962,
                    "creation_date": 1416236109,
                    "answer_id": 26975392,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I really like <a href=\"https://swagger.io/tools/swagger-ui\" rel=\"noreferrer\">Swagger</a> because it allows to generate an API documentation by just adding a few decorators and comments into your code. There is a <a href=\"https://github.com/rantav/flask-restful-swagger\" rel=\"noreferrer\">Flask Swagger</a> available.</p>\n\n<pre><code>from flask import Flask\nfrom flask.ext.restful import  Api\nfrom flask_restful_swagger import swagger\n\napp = Flask(__name__)\napi = swagger.docs(Api(app), apiVersion='1', api_spec_url=\"/api/v1/spec\")\n\nclass Unicorn(Resource):\n\"Describing unicorns\"\n@swagger.operation(\n    notes='some really good notes'\n)\ndef get(self, todo_id):\n...\n</code></pre>\n\n<p>Then you can see your methods and notes in an html interface just by visiting /api/v1/spec (it serves needed static automatically). You can also just get all your API description in JSON and parse it otherwise.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 218750,
                        "reputation": 4461,
                        "user_id": 475242,
                        "user_type": "registered",
                        "accept_rate": 63,
                        "profile_image": "https://i.sstatic.net/y6FOo.jpg?s=256",
                        "display_name": "Cody",
                        "link": "https://stackoverflow.com/users/475242/cody"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1397637872,
                    "creation_date": 1397637872,
                    "answer_id": 23104279,
                    "question_id": 14295322,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There is a Flask extension: <a href=\"https://github.com/acoomans/flask-autodoc\" rel=\"noreferrer\">flask-autodoc</a> for auto documentation specially parsing endpoint route rule. You can add <code>doc</code> decorator to specify which APIs you want to doc: </p>\n\n<pre><code>@app.route('/doc')\n@auto.doc()\ndef documentation():\n    '''\n    return API documentation page\n    '''\n    return auto.html()\n\n@app.route('/')\n@auto.doc()\ndef welcome():\n    '''\n    Welcome API\n    '''\n    commit_hash = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"])\n    commit_msg = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%s\"])\n    date_time = subprocess.check_output([\"git\", \"log\", \"-1\", \"--format=%cd\"])\n    return \"Welcome to VM Service Server. &lt;br/&gt;\" \\\n           \"The last commit: %s&lt;br/&gt;Date: %s, &lt;br&gt;Hash: %s\" % \\\n           (commit_msg, date_time, commit_hash), 200\n</code></pre>\n\n<p>The simple html documentation page is like this: </p>\n\n<p><img src=\"https://i.sstatic.net/vlQu8.png\" alt=\"enter image description here\"></p>\n"
                }
            ]
        },
        {
            "7102754": [
                {
                    "owner": {
                        "account_id": 31431,
                        "reputation": 7762,
                        "user_id": 86263,
                        "user_type": "registered",
                        "accept_rate": 79,
                        "profile_image": "https://www.gravatar.com/avatar/d4583c9731327f0af726920c388ea327?s=256&d=identicon&r=PG",
                        "display_name": "bitcycle",
                        "link": "https://stackoverflow.com/users/86263/bitcycle"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1681659625,
                    "last_edit_date": 1681659625,
                    "creation_date": 1331944972,
                    "answer_id": 9746249,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same need, to serialize into json.  Take a look at <a href=\"https://stackoverflow.com/questions/2441796/how-to-discover-table-properties-from-sqlalchemy-mapped-object\">this question</a>. It shows how to discover columns programmatically.  So, from that I created the code below.  It works for me, and I'll be using it in my web app.</p>\n<pre><code>def to_json(inst, cls):\n    &quot;&quot;&quot;\n    Jsonify the sql alchemy query result.\n    &quot;&quot;&quot;\n    convert = dict()\n    # add your coversions for things like datetime's \n    # and what-not that aren't serializable.\n    d = dict()\n    for c in cls.__table__.columns:\n        v = getattr(inst, c.name)\n        if c.type in convert.keys() and v is not None:\n            try:\n                d[c.name] = convert[c.type](v)\n            except:\n                d[c.name] = &quot;Error:  Failed to covert using &quot;, str(convert[c.type])\n        elif v is None:\n            d[c.name] = str()\n        else:\n            d[c.name] = v\n    return json.dumps(d)\n\nclass Person(base):\n    __tablename__ = 'person'\n    id = Column(Integer, Sequence('person_id_seq'), primary_key=True)\n    first_name = Column(Text)\n    last_name = Column(Text)\n    email = Column(Text)\n\n    @property\n    def json(self):\n        return to_json(self, self.__class__)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 52591,
                        "reputation": 32606,
                        "user_id": 157176,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e72ba9209373ae37e13ab75054aa0ee5?s=256&d=identicon&r=PG",
                        "display_name": "plaes",
                        "link": "https://stackoverflow.com/users/157176/plaes"
                    },
                    "is_accepted": true,
                    "score": 184,
                    "last_activity_date": 1671786119,
                    "last_edit_date": 1671786119,
                    "creation_date": 1313650335,
                    "answer_id": 7103486,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It seems that you actually haven't executed your query. Try following:</p>\n<pre><code>return jsonify(json_list = qryresult.all())\n</code></pre>\n<p><strong>[Edit]</strong>: Problem with jsonify is, that usually the objects cannot be jsonified automatically. Even Python's datetime fails ;)</p>\n<p>What I have done in the past, is adding an extra property (like <code>serialize</code>) to classes that need to be serialized.</p>\n<pre><code>def dump_datetime(value):\n    &quot;&quot;&quot;Deserialize datetime object into string form for JSON processing.&quot;&quot;&quot;\n    if value is None:\n        return None\n    return [value.strftime(&quot;%Y-%m-%d&quot;), value.strftime(&quot;%H:%M:%S&quot;)]\n\nclass Foo(db.Model):\n    # ... SQLAlchemy defs here..\n    def __init__(self, ...):\n       # self.foo = ...\n       pass\n\n    @property\n    def serialize(self):\n       &quot;&quot;&quot;Return object data in easily serializable format&quot;&quot;&quot;\n       return {\n           'id'         : self.id,\n           'modified_at': dump_datetime(self.modified_at),\n           # This is an example how to deal with Many2Many relations\n           'many2many'  : self.serialize_many2many\n       }\n    @property\n    def serialize_many2many(self):\n       &quot;&quot;&quot;\n       Return object's relations in easily serializable format.\n       NB! Calls many2many's serialize property.\n       &quot;&quot;&quot;\n       return [ item.serialize for item in self.many2many]\n</code></pre>\n<p>And now for views I can just do:</p>\n<pre><code>return jsonify(json_list=[i.serialize for i in qryresult.all()])\n</code></pre>\n<p><strong>[Edit 2019]</strong>:\nIn case you have more complex objects or circular references, use a library like <a href=\"https://marshmallow.readthedocs.io\" rel=\"nofollow noreferrer\">marshmallow</a>).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1157460,
                        "reputation": 902,
                        "user_id": 1137693,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/bbb53cc3ddce61d165503115ad1988af?s=256&d=identicon&r=PG",
                        "display_name": "YuriBro",
                        "link": "https://stackoverflow.com/users/1137693/yuribro"
                    },
                    "is_accepted": false,
                    "score": 21,
                    "last_activity_date": 1659244559,
                    "last_edit_date": 1659244559,
                    "creation_date": 1358180406,
                    "answer_id": 14322313,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Here's my approach:\n<a href=\"https://github.com/n0nSmoker/SQLAlchemy-serializer\" rel=\"nofollow noreferrer\">https://github.com/n0nSmoker/SQLAlchemy-serializer</a></p>\n<pre><code>pip install SQLAlchemy-serializer\n</code></pre>\n<p>You can easily add mixin to your model and then just call\n<code>.to_dict()</code> method on its instance.</p>\n<p>You also can write your own mixin on base of <code>SerializerMixin</code>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1335180,
                        "reputation": 2759,
                        "user_id": 1278112,
                        "user_type": "registered",
                        "accept_rate": 93,
                        "profile_image": "https://www.gravatar.com/avatar/e3d3976fda1b5e2cb21d4a357425063a?s=256&d=identicon&r=PG",
                        "display_name": "Shihe Zhang",
                        "link": "https://stackoverflow.com/users/1278112/shihe-zhang"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1542273616,
                    "last_edit_date": 1542273616,
                    "creation_date": 1540179587,
                    "answer_id": 52922100,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p><code>Flask-Restful</code> <code>0.3.6</code> <a href=\"https://flask-restful.readthedocs.io/en/latest/reqparse.html\" rel=\"nofollow noreferrer\">the Request Parsing</a> recommend marshmallow</p>\n\n<blockquote>\n  <p>marshmallow is an ORM/ODM/framework-agnostic library for converting\n  complex datatypes, such as objects, to and from native Python\n  datatypes.</p>\n</blockquote>\n\n<p>A simple <a href=\"https://marshmallow.readthedocs.io/en/3.0/index.html\" rel=\"nofollow noreferrer\">marshmallow</a> example is showing below.</p>\n\n<pre><code>from marshmallow import Schema, fields\n\nclass UserSchema(Schema):\n    name = fields.Str()\n    email = fields.Email()\n    created_at = fields.DateTime()\n\nfrom marshmallow import pprint\n\nuser = User(name=\"Monty\", email=\"monty@python.org\")\nschema = UserSchema()\nresult = schema.dump(user)\npprint(result)\n# {\"name\": \"Monty\",\n#  \"email\": \"monty@python.org\",\n#  \"created_at\": \"2014-08-17T14:54:16.049594+00:00\"}\n</code></pre>\n\n<p>The core features contain</p>\n\n<blockquote>\n  <p>Declaring Schemas<br>\n  Serializing Objects (\u201cDumping\u201d)<br>\n  Deserializing Objects (\u201cLoading\u201d)<br>\n  Handling Collections of Objects<br>\n  Validation<br>\n  Specifying Attribute Names<br>\n  Specifying Serialization/Deserialization Keys<br>\n  Refactoring: Implicit Field Creation<br>\n  Ordering Output<br>\n  \u201cRead-only\u201d and \u201cWrite-only\u201d Fields<br>\n  Specify Default Serialization/Deserialization Values<br>\n  Nesting Schemas<br>\n  Custom Fields</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 3998039,
                        "reputation": 415,
                        "user_id": 3294937,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9d09423dada25a84af91c332b3ff8361?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "VinnyQ77",
                        "link": "https://stackoverflow.com/users/3294937/vinnyq77"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1472512367,
                    "creation_date": 1472512367,
                    "answer_id": 39216549,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's my answer if you're using the declarative base (with help from some of the answers already posted):</p>\n\n<pre><code># in your models definition where you define and extend declarative_base()\nfrom sqlalchemy.ext.declarative import declarative_base\n...\nBase = declarative_base()\nBase.query = db_session.query_property()\n...\n\n# define a new class (call \"Model\" or whatever) with an as_dict() method defined\nclass Model():\n    def as_dict(self):\n        return { c.name: getattr(self, c.name) for c in self.__table__.columns }\n\n# and extend both the Base and Model class in your model definition, e.g.\nclass Rating(Base, Model):\n    ____tablename__ = 'rating'\n    id = db.Column(db.Integer, primary_key=True)\n    fullurl = db.Column(db.String())\n    url = db.Column(db.String())\n    comments = db.Column(db.Text)\n    ...\n\n# then after you query and have a resultset (rs) of ratings\nrs = Rating.query.all()\n\n# you can jsonify it with\ns = json.dumps([r.as_dict() for r in rs], default=alchemyencoder)\nprint (s)\n\n# or if you have a single row\nr = Rating.query.first()\n\n# you can jsonify it with\ns = json.dumps(r.as_dict(), default=alchemyencoder)\n\n# you will need this alchemyencoder where your are calling json.dumps to handle datetime and decimal format\n# credit to Joonas @ http://codeandlife.com/2014/12/07/sqlalchemy-results-to-json-the-easy-way/\ndef alchemyencoder(obj):\n    \"\"\"JSON encoder function for SQLAlchemy special classes.\"\"\"\n    if isinstance(obj, datetime.date):\n        return obj.isoformat()\n    elif isinstance(obj, decimal.Decimal):\n        return float(obj)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 208129,
                        "reputation": 346,
                        "user_id": 458426,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e97b773f37c77c6ffc929a55abd7a727?s=256&d=identicon&r=PG",
                        "display_name": "zwalker",
                        "link": "https://stackoverflow.com/users/458426/zwalker"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1468735040,
                    "creation_date": 1468735040,
                    "answer_id": 38418364,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was looking for something like the rails approach used in ActiveRecord to_json and implemented something similar using this Mixin after being unsatisfied with other suggestions.  It handles nested models, and including or excluding attributes of the top level or nested models.</p>\n\n<pre><code>class Serializer(object):\n\n    def serialize(self, include={}, exclude=[], only=[]):\n        serialized = {}\n        for key in inspect(self).attrs.keys():\n            to_be_serialized = True\n            value = getattr(self, key)\n            if key in exclude or (only and key not in only):\n                to_be_serialized = False\n            elif isinstance(value, BaseQuery):\n                to_be_serialized = False\n                if key in include:\n                    to_be_serialized = True\n                    nested_params = include.get(key, {})\n                    value = [i.serialize(**nested_params) for i in value]\n\n            if to_be_serialized:\n                serialized[key] = value\n\n        return serialized\n</code></pre>\n\n<p>Then, to get the BaseQuery serializable I extended BaseQuery</p>\n\n<pre><code>class SerializableBaseQuery(BaseQuery):\n\n    def serialize(self, include={}, exclude=[], only=[]):\n        return [m.serialize(include, exclude, only) for m in self]\n</code></pre>\n\n<p>For the following models</p>\n\n<pre><code>class ContactInfo(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    full_name = db.Column(db.String())\n    source = db.Column(db.String())\n    source_id = db.Column(db.String())\n\n    email_addresses = db.relationship('EmailAddress', backref='contact_info', lazy='dynamic')\n    phone_numbers = db.relationship('PhoneNumber', backref='contact_info', lazy='dynamic')\n\n\nclass EmailAddress(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    email_address = db.Column(db.String())\n    type = db.Column(db.String())\n    contact_info_id = db.Column(db.Integer, db.ForeignKey('contact_info.id'))\n\n\nclass PhoneNumber(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    phone_number = db.Column(db.String())\n    type = db.Column(db.String())\n    contact_info_id = db.Column(db.Integer, db.ForeignKey('contact_info.id'))\n\n    phone_numbers = db.relationship('Invite', backref='phone_number', lazy='dynamic')\n</code></pre>\n\n<p>You could do something like</p>\n\n<pre><code>@app.route(\"/contact/search\", methods=['GET'])\ndef contact_search():\n    contact_name = request.args.get(\"name\")\n    matching_contacts = ContactInfo.query.filter(ContactInfo.full_name.like(\"%{}%\".format(contact_name)))\n\n    serialized_contact_info = matching_contacts.serialize(\n        include={\n            \"phone_numbers\" : {\n                \"exclude\" : [\"contact_info\", \"contact_info_id\"]\n            },\n            \"email_addresses\" : {\n                \"exclude\" : [\"contact_info\", \"contact_info_id\"]\n            }\n        }\n    )\n\n    return jsonify(serialized_contact_info)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "user4985526"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1464853496,
                    "creation_date": 1464853496,
                    "answer_id": 37585632,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I just want to add my method to do this.</p>\n\n<p>just define a custome json encoder to serilize your db models.</p>\n\n<pre><code>class ParentEncoder(json.JSONEncoder):\n    def default(self, obj):\n        # convert object to a dict\n        d = {}\n        if isinstance(obj, Parent):\n            return {\"id\": obj.id, \"name\": obj.name, 'children': list(obj.child)}\n        if isinstance(obj, Child):\n            return {\"id\": obj.id, \"name\": obj.name}\n\n        d.update(obj.__dict__)\n        return d\n</code></pre>\n\n<p>then in your view function </p>\n\n<pre><code>parents = Parent.query.all()\ndat = json.dumps({\"data\": parents}, cls=ParentEncoder)\nresp = Response(response=dat, status=200, mimetype=\"application/json\")\nreturn (resp)\n</code></pre>\n\n<p>it works well though the parent have relationships </p>\n"
                },
                {
                    "owner": {
                        "account_id": 345239,
                        "reputation": 2206,
                        "user_id": 678022,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8b8aff07ad4c799ea755b2c40b6632e4?s=256&d=identicon&r=PG",
                        "display_name": "Adversus",
                        "link": "https://stackoverflow.com/users/678022/adversus"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1451124708,
                    "creation_date": 1451124708,
                    "answer_id": 34470342,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you are using <code>flask-restful</code> you can use <a href=\"http://flask-restful-cn.readthedocs.org/en/0.3.4/fields.html\" rel=\"noreferrer\">marshal</a>:</p>\n\n<pre><code>from flask.ext.restful import Resource, fields, marshal\n\ntopic_fields = {\n    'title':   fields.String,\n    'content': fields.String,\n    'uri':     fields.Url('topic'),\n    'creator': fields.String,\n    'created': fields.DateTime(dt_format='rfc822')\n}\n\nclass TopicListApi(Resource):\n    def get(self):\n        return {'topics': [marshal(topic, topic_fields) for topic in DbTopic.query.all()]}\n</code></pre>\n\n<p>You need to explicitly list what you are returning and what type it is, which I prefer anyway for an api. Serialization is easily taken care of (no need for <code>jsonify</code>), dates are also not a problem. Note that the content for the <code>uri</code> field is automatically generated based on the <code>topic</code> endpoint and the id.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1524349,
                        "reputation": 2383,
                        "user_id": 1423157,
                        "user_type": "registered",
                        "accept_rate": 67,
                        "profile_image": "https://www.gravatar.com/avatar/4a23a8d8d8cd065089d01c134eb6b8d5?s=256&d=identicon&r=PG",
                        "display_name": "robru",
                        "link": "https://stackoverflow.com/users/1423157/robru"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1443606576,
                    "last_edit_date": 1443606576,
                    "creation_date": 1443606199,
                    "answer_id": 32862881,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Ok, I've been working on this for a few hours, and I've developed what I believe to be the most pythonic solution yet. The following code snippets are python3 but shouldn't be too horribly painful to backport if you need.</p>\n\n<p>The first thing we're gonna do is start with a mixin that makes your db models act kinda like <code>dict</code>s:</p>\n\n<pre><code>from sqlalchemy.inspection import inspect\n\nclass ModelMixin:\n    \"\"\"Provide dict-like interface to db.Model subclasses.\"\"\"\n\n    def __getitem__(self, key):\n        \"\"\"Expose object attributes like dict values.\"\"\"\n        return getattr(self, key)\n\n    def keys(self):\n        \"\"\"Identify what db columns we have.\"\"\"\n        return inspect(self).attrs.keys()\n</code></pre>\n\n<p>Now we're going to define our model, inheriting the mixin:</p>\n\n<pre><code>class MyModel(db.Model, ModelMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    foo = db.Column(...)\n    bar = db.Column(...)\n    # etc ...\n</code></pre>\n\n<p>That's all it takes to be able to pass an instance of <code>MyModel()</code> to <code>dict()</code> and get a real live <code>dict</code> instance out of it, which gets us quite a long way towards making <code>jsonify()</code> understand it. Next, we need to extend <code>JSONEncoder</code> to get us the rest of the way:</p>\n\n<pre><code>from flask.json import JSONEncoder\nfrom contextlib import suppress\n\nclass MyJSONEncoder(JSONEncoder):\n    def default(self, obj):\n        # Optional: convert datetime objects to ISO format\n        with suppress(AttributeError):\n            return obj.isoformat()\n        return dict(obj)\n\napp.json_encoder = MyJSONEncoder\n</code></pre>\n\n<p>Bonus points: if your model contains computed fields (that is, you want your JSON output to contain fields that aren't actually stored in the database), that's easy too. Just define your computed fields as <code>@property</code>s, and extend the <code>keys()</code> method like so:</p>\n\n<pre><code>class MyModel(db.Model, ModelMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    foo = db.Column(...)\n    bar = db.Column(...)\n\n    @property\n    def computed_field(self):\n        return 'this value did not come from the db'\n\n    def keys(self):\n        return super().keys() + ['computed_field']\n</code></pre>\n\n<p>Now it's trivial to jsonify:</p>\n\n<pre><code>@app.route('/whatever', methods=['GET'])\ndef whatever():\n    return jsonify(dict(results=MyModel.query.all()))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 3292491,
                        "reputation": 149,
                        "user_id": 2770473,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/a59bdde5b71b36e77d9ca76f08aa3312?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "tahoe",
                        "link": "https://stackoverflow.com/users/2770473/tahoe"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1430786633,
                    "last_edit_date": 1430786633,
                    "creation_date": 1430785379,
                    "answer_id": 30042280,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is a way to add an as_dict() method on every class, as well as any other method you want to have on every single class.\nNot sure if this is the desired way or not, but it works...</p>\n\n<pre><code>class Base(object):\n    def as_dict(self):\n        return dict((c.name,\n                     getattr(self, c.name))\n                     for c in self.__table__.columns)\n\n\nBase = declarative_base(cls=Base)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1629332,
                        "reputation": 2218,
                        "user_id": 1504213,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/692503161c0d920c75b93c16584f6a75?s=256&d=identicon&r=PG",
                        "display_name": "Carl Ekerot",
                        "link": "https://stackoverflow.com/users/1504213/carl-ekerot"
                    },
                    "is_accepted": false,
                    "score": 57,
                    "last_activity_date": 1421498693,
                    "last_edit_date": 1421498693,
                    "creation_date": 1421266565,
                    "answer_id": 27951648,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here's what's usually sufficient for me:</p>\n\n<p>I create a serialization mixin which I use with my models. The serialization function basically fetches whatever attributes the SQLAlchemy inspector exposes and puts it in a dict.</p>\n\n<pre><code>from sqlalchemy.inspection import inspect\n\nclass Serializer(object):\n\n    def serialize(self):\n        return {c: getattr(self, c) for c in inspect(self).attrs.keys()}\n\n    @staticmethod\n    def serialize_list(l):\n        return [m.serialize() for m in l]\n</code></pre>\n\n<p>All that's needed now is to extend the SQLAlchemy model with the <code>Serializer</code> mixin class.</p>\n\n<p>If there are fields you do not wish to expose, or that need special formatting, simply override the <code>serialize()</code> function in the model subclass.</p>\n\n<pre><code>class User(db.Model, Serializer):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String)\n    password = db.Column(db.String)\n\n    # ...\n\n    def serialize(self):\n        d = Serializer.serialize(self)\n        del d['password']\n        return d\n</code></pre>\n\n<p>In your controllers, all you have to do is to call the <code>serialize()</code> function (or <code>serialize_list(l)</code> if the query results in a list) on the results:</p>\n\n<pre><code>def get_user(id):\n    user = User.query.get(id)\n    return json.dumps(user.serialize())\n\ndef get_users():\n    users = User.query.all()\n    return json.dumps(User.serialize_list(users))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 70610,
                        "reputation": 600,
                        "user_id": 204604,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/67ed61066b84918690ad0ddba9ca9864?s=256&d=identicon&r=PG",
                        "display_name": "radalin",
                        "link": "https://stackoverflow.com/users/204604/radalin"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1413983020,
                    "creation_date": 1413983020,
                    "answer_id": 26508101,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It's been a lot of times and there are lots of valid answers, but the following code block seems to work:</p>\n\n<pre><code>my_object = SqlAlchemyModel()\nmy_serializable_obj = my_object.__dict__\ndel my_serializable_obj[\"_sa_instance_state\"]\nprint(jsonify(my_serializable_object))\n</code></pre>\n\n<p>I'm aware that this is not a perfect solution, nor as elegant as the others, however for those who want o quick fix, they might try this.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3824064,
                        "reputation": 917,
                        "user_id": 3171323,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/2377fca36776d23e3f3340149dc94ea4?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Nick",
                        "link": "https://stackoverflow.com/users/3171323/nick"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1401493310,
                    "last_edit_date": 1401493310,
                    "creation_date": 1399650731,
                    "answer_id": 23568940,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was working with a sql query defaultdict of lists of RowProxy objects named jobDict\nIt took me a while to figure out what Type the objects were.</p>\n\n<p>This was a really simple quick way to resolve to some clean jsonEncoding just by typecasting the row to a list and by initially defining the dict with a value of list.</p>\n\n<pre><code>    jobDict = defaultdict(list)\n    def set_default(obj):\n        # trickyness needed here via import to know type\n        if isinstance(obj, RowProxy):\n            return list(obj)\n        raise TypeError\n\n\n    jsonEncoded = json.dumps(jobDict, default=set_default)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 177309,
                        "reputation": 5353,
                        "user_id": 408556,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/869402f85dcbabcef3da1ee61b88a45a?s=256&d=identicon&r=PG",
                        "display_name": "reubano",
                        "link": "https://stackoverflow.com/users/408556/reubano"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1367616294,
                    "creation_date": 1367616294,
                    "answer_id": 16367765,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For a flat query (no joins) you can do this</p>\n\n<pre><code>@app.route('/results/')\ndef results():\n    data = Table.query.all()\n    result = [d.__dict__ for d in data]\n    return jsonify(result=result)\n</code></pre>\n\n<p>and if you only want to return certain columns from the database you can do this</p>\n\n<pre><code>@app.route('/results/')\ndef results():\n    cols = ['id', 'url', 'shipping']\n    data = Table.query.all()\n    result = [{col: getattr(d, col) for col in cols} for d in data]\n    return jsonify(result=result)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 67033,
                        "reputation": 12087,
                        "user_id": 196358,
                        "user_type": "registered",
                        "accept_rate": 77,
                        "profile_image": "https://www.gravatar.com/avatar/dcd071c0057bee411af9af40e9e03947?s=256&d=identicon&r=PG",
                        "display_name": "Kenny Winker",
                        "link": "https://stackoverflow.com/users/196358/kenny-winker"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1341536984,
                    "last_edit_date": 1495540958,
                    "creation_date": 1341536984,
                    "answer_id": 11354640,
                    "question_id": 7102754,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I've been looking at this problem for the better part of a day, and here's what I've come up with (credit to <a href=\"https://stackoverflow.com/a/5249214/196358\">https://stackoverflow.com/a/5249214/196358</a> for pointing me in this direction).</p>\n\n<p>(Note: I'm using flask-sqlalchemy, so my model declaration format is a bit different from straight sqlalchemy).</p>\n\n<p>In my <code>models.py</code> file:</p>\n\n<pre><code>import json\n\nclass Serializer(object):\n  __public__ = None\n  \"Must be implemented by implementors\"\n\n  def to_serializable_dict(self):\n    dict = {}\n    for public_key in self.__public__:\n      value = getattr(self, public_key)\n      if value:\n        dict[public_key] = value\n    return dict\n\nclass SWEncoder(json.JSONEncoder):\n  def default(self, obj):\n    if isinstance(obj, Serializer):\n      return obj.to_serializable_dict()\n    if isinstance(obj, (datetime)):\n      return obj.isoformat()\n    return json.JSONEncoder.default(self, obj)\n\n\ndef SWJsonify(*args, **kwargs):\n  return current_app.response_class(json.dumps(dict(*args, **kwargs), cls=SWEncoder, indent=None if request.is_xhr else 2), mimetype='application/json')\n  # stolen from https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py\n</code></pre>\n\n<p>and all my model objects look like this:</p>\n\n<pre><code>class User(db.Model, Serializer):\n  __public__ = ['id','username']\n  ... field definitions ...\n</code></pre>\n\n<p>In my views I call SWJsonify wherever I would have called <code>Jsonify</code>, like so:</p>\n\n<pre><code>@app.route('/posts')\ndef posts():\n  posts = Post.query.limit(PER_PAGE).all()\n  return SWJsonify({'posts':posts })\n</code></pre>\n\n<p>Seems to work pretty well. Even on relationships. I haven't gotten far with it, so YMMV, but  so far it feels pretty \"right\" to me.</p>\n\n<p>Suggestions welcome.</p>\n"
                }
            ]
        },
        {
            "311588": [
                {
                    "owner": {
                        "account_id": 25996815,
                        "reputation": 11,
                        "user_id": 19708043,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/568efd52cd66391db15fb403db7329b7?s=256&d=identicon&r=PG",
                        "display_name": "Connor Kress",
                        "link": "https://stackoverflow.com/users/19708043/connor-kress"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1659817049,
                    "last_edit_date": 1659817049,
                    "creation_date": 1659816990,
                    "answer_id": 73263001,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>    allUuids = [\n        x.id\n        for x in self.db.query(schema.allPostsUuid).execute(timeout = 20)\n        if x.type == &quot;post&quot;\n            and x.deleted\n    ]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 2125606,
                        "reputation": 59,
                        "user_id": 1887870,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dffe23a412b3f9adfae52bfe0500bac4?s=256&d=identicon&r=PG",
                        "display_name": "Henco",
                        "link": "https://stackoverflow.com/users/1887870/henco"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1450275531,
                    "last_edit_date": 1495540048,
                    "creation_date": 1450275531,
                    "answer_id": 34314371,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you're set on a comprehension <a href=\"https://stackoverflow.com/a/311604/1887870\">orestis's answer</a> is good.</p>\n\n<p>For more complex comprehensions like that I'd suggest using a generator with <code>yield</code>:</p>\n\n<pre><code>allUuids = list(self.get_all_uuids())\n\n\ndef get_all_uuids(self):\n    for x in self.db.query(schema.allPostsUuid).execute(timeout = 20):\n        if x.type == \"post\" and x.deleted is not False:\n            yield x.id\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 6018,
                        "reputation": 594993,
                        "user_id": 9951,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/CIFG8.png?s=256",
                        "display_name": "Bite code",
                        "link": "https://stackoverflow.com/users/9951/bite-code"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1227417359,
                    "last_edit_date": 1227417359,
                    "creation_date": 1227382578,
                    "answer_id": 311680,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><strong>You should not use a list comprehension for that</strong>.</p>\n\n<p>List comprehensions are an awesome feature, but they are meant to be shortcuts, not regular code.</p>\n\n<p>For such a long snippet, you should use ordinary blocs :</p>\n\n<pre><code>allUuids = []\nfor x in self.db.query(schema.allPostsUuid).execute(timeout = 20) :\n    if x.type == \"post\" and x.deleted is not False :\n        allUuids.append(x.id)\n</code></pre>\n\n<p>Exactly the same behavior, much more readable. Guido would be proud of you :-)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 3021,
                        "reputation": 413078,
                        "user_id": 4279,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG",
                        "display_name": "jfs",
                        "link": "https://stackoverflow.com/users/4279/jfs"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1227382332,
                    "creation_date": 1227382332,
                    "answer_id": 311678,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>allUuids = [x.id \n            for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n            if x.type == \"post\" and x.deleted is not False]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "user_type": "does_not_exist",
                        "display_name": "guzzloid"
                    },
                    "is_accepted": false,
                    "score": 58,
                    "last_activity_date": 1227382164,
                    "creation_date": 1227382164,
                    "answer_id": 311675,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Where I work, our coding guidelines would have us do something like this:</p>\n\n<pre><code>all_posts_uuid_query = self.db.query(schema.allPostsUuid)\nall_posts_uuid_list = all_posts_uuid_query.execute(timeout=20)\nall_uuid_list = [\n    x.id \n    for x in all_posts_uuid_list \n    if (\n        x.type == \"post\" \n        and \n        not x.deleted  # &lt;-- if you don't care about NULLs / None\n    )\n]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 15443,
                        "reputation": 17130,
                        "user_id": 32617,
                        "user_type": "registered",
                        "accept_rate": 57,
                        "profile_image": "https://www.gravatar.com/avatar/8b5fa6471bfe06047844ec1cfb7382de?s=256&d=identicon&r=PG",
                        "display_name": "orestis",
                        "link": "https://stackoverflow.com/users/32617/orestis"
                    },
                    "is_accepted": true,
                    "score": 80,
                    "last_activity_date": 1227377981,
                    "creation_date": 1227377981,
                    "answer_id": 311604,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It depends on how long they are. I tend to structure them like so:</p>\n\n<pre><code>[x.id for x\n in self.db.query(schema.allPostsUuid).execute(timeout=20)\n if x.type == 'post' \n    and x.deleted is not False\n    and ...\n    and ...]\n</code></pre>\n\n<p>That way every expression has its own line.</p>\n\n<p>If any line becomes too big I like to extract it out in a lambda or expression:</p>\n\n<pre><code>transform = lambda x: x.id\nresults = self.db.query(schema.allPostsUuid).execute(timeout=20)\ncondition = lambda x: x.deleted is not False and ... and ...\n[transform(x) for x in results if condition(x)]\n</code></pre>\n\n<p>And then if a lambda becomes too long it gets promoted to a function.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 13980,
                        "reputation": 41577,
                        "user_id": 28380,
                        "user_type": "registered",
                        "accept_rate": 91,
                        "profile_image": "https://www.gravatar.com/avatar/e1f7597153b6acca55f0b522481e137d?s=256&d=identicon&r=PG",
                        "display_name": "Ali Afshar",
                        "link": "https://stackoverflow.com/users/28380/ali-afshar"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1227377740,
                    "creation_date": 1227377740,
                    "answer_id": 311597,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>For me that's too much. Maybe it's just a terrible example, since \"type\" and \"deleted\" would clearly be part of the db query.</p>\n\n<p>I tend to think that if a list comprehension spans multiple lines it probably shouldn't be a list comprehension. Having said that, I usually just split the thing at \"if\" like other people have and will answer here.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5176,
                        "reputation": 272436,
                        "user_id": 8206,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=256&d=identicon&r=PG",
                        "display_name": "Eli Bendersky",
                        "link": "https://stackoverflow.com/users/8206/eli-bendersky"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1227377433,
                    "creation_date": 1227377433,
                    "answer_id": 311590,
                    "question_id": 311588,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>How about:</p>\n\n<pre><code>allUuids = [x.id for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n                   if (x.type == \"post\" and x.deleted is not False)]\n</code></pre>\n\n<p>Generally, long lines can be avoided by pre-computing subexpressions into variables, which might add a minuscule performance cost:</p>\n\n<pre><code>query_ids = self.db.query(schema.allPostsUuid).execute(timeout = 20)\nallUuids = [x.id for x in query_ids\n                   if (x.type == \"post\" and x.deleted is not False)]\n</code></pre>\n\n<p>By the way, isn't '<code>is not False</code>' kind-of superfluous ? Are you worried about differentiating between None and False ? Because otherwise, it suffices to leave the condition as only: i<code>f (x.type == \"post\" and x.deleted)</code></p>\n"
                }
            ]
        },
        {
            "9060653": [
                {
                    "owner": {
                        "account_id": 12525,
                        "reputation": 43714,
                        "user_id": 24718,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://i.sstatic.net/0kiYe.jpg?s=256",
                        "display_name": "monkut",
                        "link": "https://stackoverflow.com/users/24718/monkut"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1560861091,
                    "last_edit_date": 1560861091,
                    "creation_date": 1327909070,
                    "answer_id": 9060720,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>As mentioned it's a <a href=\"http://docs.python.org/reference/expressions.html#generator-expressions\" rel=\"nofollow noreferrer\">generator expression</a>.</p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p>The parentheses can be omitted on calls with only one argument. See section <a href=\"https://docs.python.org/reference/expressions.html#calls\" rel=\"nofollow noreferrer\">Calls</a> for the detail.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 186862,
                        "reputation": 225414,
                        "user_id": 424499,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG",
                        "display_name": "Raymond Hettinger",
                        "link": "https://stackoverflow.com/users/424499/raymond-hettinger"
                    },
                    "is_accepted": false,
                    "score": 167,
                    "last_activity_date": 1328063560,
                    "last_edit_date": 1328063560,
                    "creation_date": 1327911234,
                    "answer_id": 9061024,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The other respondents were correct in answering that you had discovered a <a href=\"http://www.python.org/dev/peps/pep-0289/\">generator expression</a> (which has a notation similar to list comprehensions but without the surrounding square brackets).</p>\n\n<p>In general, genexps (as they are affectionately known) are more memory efficient and faster than list comprehensions.</p>\n\n<p>HOWEVER, it the case of <code>''.join()</code>, a list comprehension is both faster and more memory efficient.  The reason is that <em>join</em> needs to make two passes over the data, so it actually needs a real list.  If you give it one, it can start its work immediately.  If you give it a genexp instead, it cannot start work until it builds-up a new list in memory by running the genexp to exhaustion:</p>\n\n<pre><code>~ $ python -m timeit '\"\".join(str(n) for n in xrange(1000))'\n1000 loops, best of 3: 335 usec per loop\n~ $ python -m timeit '\"\".join([str(n) for n in xrange(1000)])'\n1000 loops, best of 3: 288 usec per loop\n</code></pre>\n\n<p>The same result holds when comparing <em>itertools.imap</em> versus <em>map</em>:</p>\n\n<pre><code>~ $ python -m timeit -s'from itertools import imap' '\"\".join(imap(str, xrange(1000)))'\n1000 loops, best of 3: 220 usec per loop\n~ $ python -m timeit '\"\".join(map(str, xrange(1000)))'\n1000 loops, best of 3: 212 usec per loop\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 24776,
                        "reputation": 27273,
                        "user_id": 63225,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/2b6513bd28040ce526882afb70f4f7d5?s=256&d=identicon&r=PG",
                        "display_name": "sblom",
                        "link": "https://stackoverflow.com/users/63225/sblom"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1327909100,
                    "last_edit_date": 1327909100,
                    "creation_date": 1327908752,
                    "answer_id": 9060667,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If it's in parens, but not brackets, it's <em>technically</em> a generator expression. Generator expressions were first introduced in Python 2.4.</p>\n\n<p><a href=\"http://wiki.python.org/moin/Generators\" rel=\"nofollow\">http://wiki.python.org/moin/Generators</a></p>\n\n<p>The part after the join, <code>( str(_) for _ in xrange(10) )</code> is, by itself, a generator expression. You could do something like:</p>\n\n<pre><code>mylist = (str(_) for _ in xrange(10))\n''.join(mylist)\n</code></pre>\n\n<p>and it means exactly the same thing that you wrote in the second case above.</p>\n\n<p>Generators have some very interesting properties, not the least of which is that they don't end up allocating an entire list when you don't need one. Instead, a function like join \"pumps\" the items out of the generator expression one at a time, doing its work on the tiny intermediate parts.</p>\n\n<p>In your particular examples, list and generator probably don't perform terribly differently, but in general, I prefer using generator expressions (and even generator functions) whenever I can, mostly because it's extremely rare for a generator to be <em>slower</em> than a full list materialization.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183585,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1327908950,
                    "creation_date": 1327908950,
                    "answer_id": 9060697,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Your second example uses a generator expression rather than a list comprehension. The difference is that with the list comprehension, a list is completely built and passed to <code>.join()</code>. With the generator expression, items are generated one by one and consumed by <code>.join()</code>. The latter uses less memory and is generally faster.</p>\n\n<p>As it happens, the list constructor will happily consume any iterable, including a generator expression. So:</p>\n\n<pre><code>[str(n) for n in xrange(10)]\n</code></pre>\n\n<p>is just \"syntactic sugar\" for:</p>\n\n<pre><code>list(str(n) for n in xrange(10))\n</code></pre>\n\n<p>In other words, a list comprehension is just a generator expression that is turned into a list.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 152622,
                        "reputation": 498943,
                        "user_id": 367273,
                        "user_type": "registered",
                        "accept_rate": 96,
                        "profile_image": "https://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG",
                        "display_name": "NPE",
                        "link": "https://stackoverflow.com/users/367273/npe"
                    },
                    "is_accepted": true,
                    "score": 77,
                    "last_activity_date": 1327908843,
                    "creation_date": 1327908843,
                    "answer_id": 9060686,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>&gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n</code></pre>\n\n<p>This is called a <em>generator expression</em>, and is explained in <a href=\"http://www.python.org/dev/peps/pep-0289/\">PEP 289</a>.</p>\n\n<p>The main difference between generator expressions and list comprehensions is that the former don't create the list in memory.</p>\n\n<p>Note that there's a third way to write the expression:</p>\n\n<pre><code>''.join(map(str, xrange(10)))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 285593,
                        "reputation": 25002,
                        "user_id": 584347,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ba8cb56177fdcd9e3e0053414d3ad539?s=256&d=identicon&r=PG",
                        "display_name": "Michael J. Barber",
                        "link": "https://stackoverflow.com/users/584347/michael-j-barber"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1327908815,
                    "creation_date": 1327908815,
                    "answer_id": 9060682,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The argument to your second <code>join</code> call is a generator expression. It does produce an iterable.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 36572,
                        "reputation": 598699,
                        "user_id": 104349,
                        "user_type": "registered",
                        "accept_rate": 86,
                        "profile_image": "https://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=256&d=identicon&r=PG",
                        "display_name": "Daniel Roseman",
                        "link": "https://stackoverflow.com/users/104349/daniel-roseman"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327908802,
                    "creation_date": 1327908802,
                    "answer_id": 9060679,
                    "question_id": 9060653,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>That's a generator, rather than a list comprehension. Generators are also iterables, but rather than creating the entire list first then passing it to join, it passes each value in the xrange one by one, which can be much more efficient.</p>\n"
                }
            ]
        },
        {
            "4292909": [
                {
                    "owner": {
                        "account_id": 41432,
                        "reputation": 7421,
                        "user_id": 120398,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/cb6fc79bdc91c2d4cd10c02f0d434732?s=256&d=identicon&r=PG",
                        "display_name": "David Fraser",
                        "link": "https://stackoverflow.com/users/120398/david-fraser"
                    },
                    "is_accepted": true,
                    "score": 16,
                    "last_activity_date": 1497310455,
                    "last_edit_date": 1497310455,
                    "creation_date": 1291654483,
                    "answer_id": 4368878,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://www.activestate.com/komodo-edit\" rel=\"nofollow noreferrer\">Komodo Edit</a> meets most of your requirements (as others mentioned in the comments) and supports Python 3 from version 6:</p>\n\n<ul>\n<li><strong>Open source and free.</strong></li>\n<li><em>Cross platform (Windows and Linux, also Mac)</em> \u2015 built on <a href=\"https://developer.mozilla.org/en/docs/XULRunner\" rel=\"nofollow noreferrer\">XULRunner</a>.</li>\n<li><em>Standard features: syntax highlighting, auto-indent, etc.</em> \u2015 Komodo has the best Python auto-completion I've seen; they'll do automatic type inference from variable assignments.</li>\n<li><kbd>Run</kbd> <em>button, rather than console where you have to type \"python foo.py\".</em> \u2015 <a href=\"http://morlockhq.blogspot.com/2008/01/launching-python-shell-and-running-code.html\" rel=\"nofollow noreferrer\">Can be simply added</a>.</li>\n<li><em>Context-aware help</em> \u2015 supported when you press <kbd>(</kbd> plus it will do this nicely on objects that have been instantiated from other classes.</li>\n<li><em>Embedded Python shell</em> \u2015 The full Python shell integration is only in the commercial IDE, but you can easily hook up a shell into a command output window by adding a toolbox recipe for <code>python -i</code>.</li>\n<li><em>Built-in debugger</em> \u2015 Unfortunately not (but neither do lots of the light-weight IDEs recommended above) \u2015 this is only in the commercial Komodo IDE. I'd recommend using <a href=\"http://winpdb.org/\" rel=\"nofollow noreferrer\">Winpdb</a> alongside Komodo Edit for development \u2015 it's faster than the Komodo IDE debugger (and lots of other debuggers) in my experience. Whether this'll fly with high school students would be the question.</li>\n<li><em>Useless crud stripped</em> \u2015 Komodo's clearly got more stuff in it that IDLE so it depends how you see this. Auto-completion can be turned off.</li>\n<li><em>Lightweight for kids who go home to old PCs unable to run beefy IDEs such as Eclipse</em> \u2015 This may also be a downfall \u2015 I'd say Komodo is less beefy than Eclipse though.</li>\n</ul>\n\n<p>Extra things to consider:</p>\n\n<ul>\n<li>Komodo is great at web development: it supports nice syntax highlighting and code completion on embedded CSS inside HTML etc\u2026</li>\n<li>Support for <a href=\"http://community.activestate.com/addons\" rel=\"nofollow noreferrer\">extensions</a> (along the same lines as Firefox, plus the extensions can be written in Python) \u2015 this could be useful if you need some tweaks to the UI etc for the courses.</li>\n</ul>\n"
                },
                {
                    "owner": {
                        "account_id": 423222,
                        "reputation": 799,
                        "user_id": 802480,
                        "user_type": "registered",
                        "accept_rate": 38,
                        "profile_image": "https://www.gravatar.com/avatar/f30476dc1cb3545aa01f9675381f54f7?s=256&d=identicon&r=PG",
                        "display_name": "max_force",
                        "link": "https://stackoverflow.com/users/802480/max-force"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1402210529,
                    "creation_date": 1402210529,
                    "answer_id": 24103754,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><a href=\"http://www.jetbrains.com/pycharm/\" rel=\"nofollow\">PyCharm</a> is awesome. Looks good, perform nicely and has now a Free Community Edition!</p>\n"
                },
                {
                    "owner": {
                        "account_id": 22422,
                        "reputation": 84902,
                        "user_id": 55246,
                        "user_type": "registered",
                        "accept_rate": 69,
                        "profile_image": "https://i.sstatic.net/gVHrv.jpg?s=256",
                        "display_name": "Sridhar Ratnakumar",
                        "link": "https://stackoverflow.com/users/55246/sridhar-ratnakumar"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1316381506,
                    "last_edit_date": 1316381506,
                    "creation_date": 1291746612,
                    "answer_id": 4380229,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<blockquote>\n  <p><strong>Is there a free (preferably open source) IDE you'd recommend that supports Python 3,</strong> </p>\n</blockquote>\n\n<p><a href=\"http://www.activestate.com/komodo-ide/downloads\" rel=\"nofollow\">ActiveState Komodo Edit</a> is free and <a href=\"http://www.openkomodo.com/\" rel=\"nofollow\">open source</a>, that also supports Python 3.</p>\n\n<blockquote>\n  <p><strong>Cross platform (Windows and Linux)</strong></p>\n</blockquote>\n\n<p>Since Komodo is based on the Firefox code base, it runs with native look &amp; feel on Windows, Linux and Mac OS X.</p>\n\n<blockquote>\n  <p><strong>Standard features: syntax highlighting, auto-indent, etc.</strong></p>\n</blockquote>\n\n<p><a href=\"http://docs.activestate.com/komodo/6.0/editor.html\" rel=\"nofollow\">Yup</a>.</p>\n\n<blockquote>\n  <p><strong>Run button</strong>, rather than console where you have to type \"python foo.py\".</p>\n</blockquote>\n\n<p><a href=\"http://docs.activestate.com/komodo/6.0/run.html#run_top\" rel=\"nofollow\">Yup</a>. Here's <a href=\"http://www.activestate.com/blog/2010/09/writing-pep8-aware-python-code-komodo\" rel=\"nofollow\">a blog post</a> of mine demonstrating an use (using pep8) of the Run dialog. There is also a \"Toolbox\" feature when you can save Run configurations.</p>\n\n<blockquote>\n  <p><strong>Contest-aware help</strong> (e.g. when they hover over math.floor() it should give help for the function).</p>\n</blockquote>\n\n<p>Komodo <a href=\"http://docs.activestate.com/komodo/6.0/editor.html#AutoComplete\" rel=\"nofollow\">does that</a> (Cmd+hover also works), and <a href=\"http://docs.activestate.com/komodo/6.0/hyperlinks.html#hyperlinks_top\" rel=\"nofollow\">more</a>.</p>\n\n<blockquote>\n  <p><strong>Embedded Python shell. Built-in debugger</strong></p>\n</blockquote>\n\n<p>These two features are only available in Komodo IDE. ActiveState provides <a href=\"http://www.activestate.com/partners/education-partners\" rel=\"nofollow\">free licenses</a> to qualified educational institutions.</p>\n\n<blockquote>\n  <p><strong>Useless crud stripped</strong>, e.g. they don't need refactoring tools during an intro class and auto-completion gets in the way of teaching. </p>\n</blockquote>\n\n<p>Auto-complete and other features can be disabled in Preferences.</p>\n\n<blockquote>\n  <p>Along the same lines, <strong>it should be lightweight</strong> as some kids will go home to old PCs unable to run beefy IDEs such as Eclipse.</p>\n</blockquote>\n\n<p>While Komodo is definitely not as beefy as Eclipse, it depends on what you mean by \"old PCs\". If it can run Firefox 3, then Komodo (which is based on Firefox 3 codebase) too should be able to run on it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 734536,
                        "reputation": 126,
                        "user_id": 698685,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/6b2fa153aedf65251b671af225b38112?s=256&d=identicon&r=PG",
                        "display_name": "Stephan Deibel",
                        "link": "https://stackoverflow.com/users/698685/stephan-deibel"
                    },
                    "is_accepted": false,
                    "score": 5,
                    "last_activity_date": 1312308707,
                    "creation_date": 1312308707,
                    "answer_id": 6916578,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Wing IDE is free for classroom use, including the Wing Pro and Wing Personal product levels.  See <a href=\"https://wingware.com/store/free\">https://wingware.com/store/free</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 378832,
                        "reputation": 1663,
                        "user_id": 731819,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/971abbfd52e5b5ba5ebdae14ac214dd0?s=256&d=identicon&r=PG",
                        "display_name": "Jim Syyap",
                        "link": "https://stackoverflow.com/users/731819/jim-syyap"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1304785088,
                    "last_edit_date": 1304785088,
                    "creation_date": 1304724030,
                    "answer_id": 5917990,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I am teaching myself python, and atm, GEANY works best for me.</p>\n\n<p>Geany is a text editor using the GTK2 toolkit with basic features of an integrated development environment. It was developed to provide a small and fast IDE, which has only a few dependencies from other packages. It supports many filetypes and has some nice features.</p>\n\n<p>You can download it <a href=\"http://www.geany.org/\" rel=\"nofollow\">here</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 34058,
                        "reputation": 14459,
                        "user_id": 95852,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/e215c7362074d0346612a10d3a89be9e?s=256&d=identicon&r=PG",
                        "display_name": "John Y",
                        "link": "https://stackoverflow.com/users/95852/john-y"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1291650866,
                    "last_edit_date": 1291650866,
                    "creation_date": 1291444354,
                    "answer_id": 4352297,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I'm going to go in the opposite direction of Eclipse/Pydev (too big) and recommend <a href=\"http://www.scintilla.org/SciTE.html\" rel=\"nofollow\">SciTE</a> (too small).  No, I'm not comfortable even calling it an IDE, but it really nails points 1 and 2, and it is extremely lightweight, suitable for even the wimpiest possible computers that are capable of running Python 3 (or Python 2.3 for that matter).</p>\n\n<p>I think Python is such a nice, small, simple language, if you are only teaching the basics, that you really don't need a full-blown IDE.  I actually find learning an IDE more difficult than learning Python; plus having an IDE sometimes obscures what is part of the language and what is part of the development environment.</p>\n\n<p><i><b>Edit:</b>  The list of criteria in the original question was edited.  Now SciTE actually meets at least the first three.  At the time of this edit, those are (1) runs on Windows and Linux, (2) has typical programming editor features like syntax highlighting and so forth, (3) has a button to execute the script.</i></p>\n"
                },
                {
                    "owner": {
                        "account_id": 128012,
                        "reputation": 283812,
                        "user_id": 325565,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=256&d=identicon&r=PG",
                        "display_name": "Joe Kington",
                        "link": "https://stackoverflow.com/users/325565/joe-kington"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1291502650,
                    "creation_date": 1291502650,
                    "answer_id": 4356238,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://code.google.com/p/iep/\" rel=\"noreferrer\">IEP</a> is another lightweight option that should meet all of your requirements. </p>\n\n<p>It has similar goals to <a href=\"http://code.google.com/p/spyderlib/\" rel=\"noreferrer\">spyder</a> (which is quite nice, and has been mentioned by a couple of other people) but is a bit more lightweight and <em>does</em> support python3.  </p>\n\n<p><img src=\"https://i.sstatic.net/IPAan.png\" alt=\"alt text\"></p>\n\n<p>It's worth taking a look at anyway... </p>\n"
                },
                {
                    "owner": {
                        "account_id": 208639,
                        "reputation": 432,
                        "user_id": 459237,
                        "user_type": "registered",
                        "accept_rate": 83,
                        "profile_image": "https://www.gravatar.com/avatar/17964a443911eac0671bbb33fca86d92?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "SimoneF",
                        "link": "https://stackoverflow.com/users/459237/simonef"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1291305293,
                    "creation_date": 1291305293,
                    "answer_id": 4336918,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I have been hearing a lot of praises about Aptana Studio recently ( made by the coders of PyDev ).<br>\n<a href=\"http://aptana.com/products/studio3/download\" rel=\"nofollow\">http://aptana.com/products/studio3/download</a><br>\nPersonally using Eclipse + PyDev and really recommend it.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 95908,
                        "reputation": 109,
                        "user_id": 260988,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/cd7b9309dd9a2c956a4936020a3fd7e7?s=256&d=identicon&r=PG",
                        "display_name": "Charles Hebert",
                        "link": "https://stackoverflow.com/users/260988/charles-hebert"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1291296758,
                    "creation_date": 1291296758,
                    "answer_id": 4335534,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Give a try to <a href=\"http://code.google.com/p/spyderlib\" rel=\"nofollow\">Spyderlib</a> (Spyder is the Scientific PYthon Development EnviRonment)</p>\n\n<p><a href=\"http://packages.python.org/spyder/_images/spyder.png\" rel=\"nofollow\">Screenshot</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 254673,
                        "reputation": 2821,
                        "user_id": 534235,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/8b1cb465851fc20f6cf086ae99e793d9?s=256&d=identicon&r=PG",
                        "display_name": "Wesley Rice",
                        "link": "https://stackoverflow.com/users/534235/wesley-rice"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1291253922,
                    "creation_date": 1291253922,
                    "answer_id": 4330898,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>WingWare's WingIDE is fantastic. I'm not sure if the free Wing 101 has all the features you're looking for, but the personal and professional editions are great little IDEs. </p>\n\n<p>[ <a href=\"http://wingware.com\" rel=\"noreferrer\">http://wingware.com</a> ]</p>\n"
                },
                {
                    "owner": {
                        "account_id": 47548,
                        "reputation": 4708,
                        "user_id": 140894,
                        "user_type": "registered",
                        "accept_rate": 75,
                        "profile_image": "https://www.gravatar.com/avatar/2c13fb3e945ef7056613bb0a234303e9?s=256&d=identicon&r=PG",
                        "display_name": "Don O&#39;Donnell",
                        "link": "https://stackoverflow.com/users/140894/don-odonnell"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1290929772,
                    "creation_date": 1290929772,
                    "answer_id": 4295829,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>It's Windows only, but the PythonWin IDE that comes with Mark Hammond's pywin32 package meets all your requirements including support for Python 3.1. Download it at: <a href=\"http://sourceforge.net/projects/pywin32/files/\" rel=\"nofollow\">http://sourceforge.net/projects/pywin32/files/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16878,
                        "reputation": 308265,
                        "user_id": 37213,
                        "user_type": "registered",
                        "accept_rate": 81,
                        "profile_image": "https://www.gravatar.com/avatar/eeec80237213c91e5bab56b77ac5b8ca?s=256&d=identicon&r=PG",
                        "display_name": "duffymo",
                        "link": "https://stackoverflow.com/users/37213/duffymo"
                    },
                    "is_accepted": false,
                    "score": 9,
                    "last_activity_date": 1290880786,
                    "creation_date": 1290880786,
                    "answer_id": 4293073,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>JetBrains <a href=\"http://www.jetbrains.com/pycharm/\">PyCharm</a> is terrific.  Not free, though.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 184755,
                        "reputation": 8470,
                        "user_id": 421010,
                        "user_type": "registered",
                        "accept_rate": 82,
                        "profile_image": "https://www.gravatar.com/avatar/ef81dede19750bc1eb4e2ac6f3aa1476?s=256&d=identicon&r=PG",
                        "display_name": "Andrew",
                        "link": "https://stackoverflow.com/users/421010/andrew"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1290880638,
                    "last_edit_date": 1290880638,
                    "creation_date": 1290879015,
                    "answer_id": 4292927,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Eclipse + pydev can do that. It's free. UI isn't very simple, but you have debugger, highlight, shell and completion.</p>\n\n<p><strong>UPD:</strong> Here is <a href=\"http://dev.collabshot.com/show/b472ac/\" rel=\"noreferrer\">sample screenshot</a>. It's pretty simple imo.<br>\n12-18 is more like teenager, not a kid, I'm sure that they fluent with much more complicated interfaces like facebook :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 172044,
                        "reputation": 76867,
                        "user_id": 399815,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/45aaf2885832e62ad4864782daa914f9?s=256&d=identicon&r=PG",
                        "display_name": "Rafe Kettler",
                        "link": "https://stackoverflow.com/users/399815/rafe-kettler"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1290879427,
                    "last_edit_date": 1290879427,
                    "creation_date": 1290879038,
                    "answer_id": 4292932,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>The Python IDLE has most of these features (never used the debugger before so I don't know how good it is). It's probably the most minimalist Python IDE out there. See <a href=\"http://docs.python.org/library/idle.html\">http://docs.python.org/library/idle.html</a> for more. IBM also did an overview of IDLE <a href=\"http://www.ibm.com/developerworks/linux/library/l-cpyide/#N100A2\">here</a>.</p>\n\n<p>Also, it's already included in the Windows binary (which is what most schools use, at least here), so you won't have to do any special work to get it up and running. It's available for Linux too.</p>\n\n<p>I've never tried <a href=\"http://code.google.com/p/pyscripter/\">PyScripter</a> before, but it does seem to offer what you need in an IDE and seems fairly simple. Only con is that it's Windows only.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 79575,
                        "reputation": 206,
                        "user_id": 225530,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6148669b726b1f4cebcbf2ebc89317f8?s=256&d=identicon&r=PG",
                        "display_name": "snippsat",
                        "link": "https://stackoverflow.com/users/225530/snippsat"
                    },
                    "is_accepted": false,
                    "score": 6,
                    "last_activity_date": 1290879348,
                    "creation_date": 1290879348,
                    "answer_id": 4292966,
                    "question_id": 4292909,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p><a href=\"http://code.google.com/p/pyscripter/\" rel=\"nofollow\">Pyscripter</a> is a nice IDE,has all features you ask for.</p>\n"
                }
            ]
        },
        {
            "2597166": [
                {
                    "owner": {
                        "account_id": 84277,
                        "reputation": 176128,
                        "user_id": 235698,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/KjvlE.png?s=256",
                        "display_name": "Mark Tolonen",
                        "link": "https://stackoverflow.com/users/235698/mark-tolonen"
                    },
                    "is_accepted": false,
                    "score": 11,
                    "last_activity_date": 1270696999,
                    "creation_date": 1270696999,
                    "answer_id": 2597381,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>&gt;&gt;&gt; x=(1,'a',2,'b',3,'c')\n&gt;&gt;&gt; dict(zip(x[::2],x[1::2]))\n{1: 'a', 2: 'b', 3: 'c'}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 58364,
                        "reputation": 303369,
                        "user_id": 174728,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://i.sstatic.net/eRO75.jpg?s=256",
                        "display_name": "John La Rooy",
                        "link": "https://stackoverflow.com/users/174728/john-la-rooy"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1270695004,
                    "creation_date": 1270695004,
                    "answer_id": 2597275,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Here are a couple of ways for <strong>Python3</strong> using dict comprehensions</p>\n\n<pre><code>&gt;&gt;&gt; x = (1,'a',2,'b',3,'c')\n&gt;&gt;&gt; {k:v for k,v in zip(*[iter(x)]*2)}\n{1: 'a', 2: 'b', 3: 'c'}\n&gt;&gt;&gt; {x[i]:x[i+1] for i in range(0,len(x),2)}\n{1: 'a', 2: 'b', 3: 'c'}\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 10930,
                        "reputation": 796828,
                        "user_id": 20862,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=256&d=identicon&r=PG",
                        "display_name": "Ignacio Vazquez-Abrams",
                        "link": "https://stackoverflow.com/users/20862/ignacio-vazquez-abrams"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1270693399,
                    "creation_date": 1270693399,
                    "answer_id": 2597182,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>dict(zip(*[iter(val_)] * 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 34048,
                        "reputation": 879367,
                        "user_id": 95810,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG",
                        "display_name": "Alex Martelli",
                        "link": "https://stackoverflow.com/users/95810/alex-martelli"
                    },
                    "is_accepted": true,
                    "score": 41,
                    "last_activity_date": 1270693349,
                    "creation_date": 1270693349,
                    "answer_id": 2597178,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>dict(x[i:i+2] for i in range(0, len(x), 2))\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9315,
                        "reputation": 222336,
                        "user_id": 17160,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=256&d=identicon&r=PG",
                        "display_name": "nosklo",
                        "link": "https://stackoverflow.com/users/17160/nosklo"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1270693327,
                    "creation_date": 1270693327,
                    "answer_id": 2597173,
                    "question_id": 2597166,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<pre><code>x = (1,'a',2,'b',3,'c') \nd = dict(x[n:n+2] for n in xrange(0, len(x), 2))\nprint d\n</code></pre>\n"
                }
            ]
        },
        {
            "8528178": [
                {
                    "owner": {
                        "account_id": 237172,
                        "reputation": 207965,
                        "user_id": 505154,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=256&d=identicon&r=PG",
                        "display_name": "Andrew Clark",
                        "link": "https://stackoverflow.com/users/505154/andrew-clark"
                    },
                    "is_accepted": false,
                    "score": 40,
                    "last_activity_date": 1706641860,
                    "last_edit_date": 1706641860,
                    "creation_date": 1323992954,
                    "answer_id": 8528203,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The easiest way to create a list where all values are the same is multiplying a one-element list by <code>n</code>.</p>\n<pre><code>&gt;&gt;&gt; [0] * 4\n[0, 0, 0, 0]\n</code></pre>\n<p>So for your loop:</p>\n<pre><code>for i in range(10):\n    print([0] * i)\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 341146,
                        "reputation": 7450,
                        "user_id": 671575,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://www.gravatar.com/avatar/42c0a00d0cce4e810c026ecff4beda96?s=256&d=identicon&r=PG",
                        "display_name": "Seppo Ervi&#228;l&#228;",
                        "link": "https://stackoverflow.com/users/671575/seppo-ervi%c3%a4l%c3%a4"
                    },
                    "is_accepted": false,
                    "score": 89,
                    "last_activity_date": 1432031049,
                    "last_edit_date": 1495541901,
                    "creation_date": 1360531303,
                    "answer_id": 14802726,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>$python 2.7.8\n\nfrom timeit import timeit\nimport numpy\n\ntimeit(\"list(0 for i in xrange(0, 100000))\", number=1000)\n&gt; 8.173301935195923\n\ntimeit(\"[0 for i in xrange(0, 100000)]\", number=1000)\n&gt; 4.881675958633423\n\ntimeit(\"[0] * 100000\", number=1000)\n&gt; 0.6624710559844971\n\ntimeit('list(itertools.repeat(0, 100000))', 'import itertools', number=1000)\n&gt; 1.0820629596710205\n</code></pre>\n\n<p>You should use <code>[0] * n</code> to generate a list with <code>n</code> zeros.</p>\n\n<p><a href=\"https://stackoverflow.com/a/30216156/671575\">See why [] is faster than list()</a></p>\n\n<p>There is a gotcha though, both <code>itertools.repeat</code> and <code>[0] * n</code> will create lists whose elements refer to same <code>id</code>. This is not a problem with immutable objects like integers or strings but if you try to create list of mutable objects like a list of lists (<code>[[]] * n</code>) then all the elements will refer to the same object.</p>\n\n<pre><code>a = [[]]\u00a0* 10\na[0].append(1)\na\n&gt; [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]\n</code></pre>\n\n<p><code>[0] * n</code> will create the list immediately while <code>repeat</code> can be used to create the list lazily when it is first accessed. </p>\n\n<p>If you're dealing with really large amount of data and your problem doesn't need variable length of list or multiple data types within the list it is better to use <code>numpy</code> arrays.</p>\n\n<pre><code>timeit('numpy.zeros(100000, numpy.int)', 'import numpy', number=1000)\n&gt; 0.057849884033203125\n</code></pre>\n\n<p><code>numpy</code> arrays will also consume less memory.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 1110476,
                        "reputation": 6376,
                        "user_id": 1101034,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/TtOV8.gif?s=256",
                        "display_name": "Tiffany",
                        "link": "https://stackoverflow.com/users/1101034/tiffany"
                    },
                    "is_accepted": true,
                    "score": 625,
                    "last_activity_date": 1323997332,
                    "last_edit_date": 1323997332,
                    "creation_date": 1323997000,
                    "answer_id": 8528626,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>#add code here to figure out the number of 0's you need, naming the variable n.\nlistofzeros = [0] * n\n</code></pre>\n\n<p>if you prefer to put it in the function, just drop in that code and add <code>return listofzeros</code></p>\n\n<p>Which would look like this:</p>\n\n<pre><code>def zerolistmaker(n):\n    listofzeros = [0] * n\n    return listofzeros\n</code></pre>\n\n<p>sample output:</p>\n\n<pre><code>&gt;&gt;&gt; zerolistmaker(4)\n[0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(5)\n[0, 0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(15)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt; \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 141612,
                        "reputation": 160966,
                        "user_id": 348785,
                        "user_type": "registered",
                        "accept_rate": 97,
                        "profile_image": "https://www.gravatar.com/avatar/7f3dcb0c380783d1be77bfdd5fc5fda6?s=256&d=identicon&r=PG",
                        "display_name": "kev",
                        "link": "https://stackoverflow.com/users/348785/kev"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1323996687,
                    "creation_date": 1323996687,
                    "answer_id": 8528602,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>$ python3\n&gt;&gt;&gt; from itertools import repeat\n&gt;&gt;&gt; list(repeat(0, 7))\n[0, 0, 0, 0, 0, 0, 0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 1110430,
                        "reputation": 39,
                        "user_id": 1100997,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/9a76ca238aaa9436b98752dabdd15275?s=256&d=identicon&r=PG",
                        "display_name": "bugfree",
                        "link": "https://stackoverflow.com/users/1100997/bugfree"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1323994493,
                    "creation_date": 1323994493,
                    "answer_id": 8528360,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Here is the <strong>xrange</strong> way:</p>\n\n<pre><code>list(0 for i in xrange(0,5)) \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 251148,
                        "reputation": 6381,
                        "user_id": 528317,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/3114d84a5c5144b2a531c610c913bdb9?s=256&d=identicon&r=PG",
                        "display_name": "Gavin Anderegg",
                        "link": "https://stackoverflow.com/users/528317/gavin-anderegg"
                    },
                    "is_accepted": false,
                    "score": 4,
                    "last_activity_date": 1323993461,
                    "creation_date": 1323993461,
                    "answer_id": 8528250,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>If you want a function which will return an arbitrary number of zeros in a list, try this:</p>\n\n<pre><code>def make_zeros(number):\n    return [0] * number\n\nlist = make_zeros(10)\n\n# list now contains: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 182043,
                        "reputation": 183585,
                        "user_id": 416467,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=256&d=identicon&r=PG",
                        "display_name": "kindall",
                        "link": "https://stackoverflow.com/users/416467/kindall"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1323993052,
                    "creation_date": 1323993052,
                    "answer_id": 8528217,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>zlists = [[0] * i for i in range(10)]\n</code></pre>\n\n<p><code>zlists[0]</code> is a list of 0 zeroes, <code>zlists[1]</code> is a list of 1 zero, <code>zlists[2]</code> is a list of 2 zeroes, etc.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 52820,
                        "reputation": 8391,
                        "user_id": 157880,
                        "user_type": "registered",
                        "accept_rate": 80,
                        "profile_image": "https://www.gravatar.com/avatar/1f658c4191d93b9672ffa04fc3689f9b?s=256&d=identicon&r=PG",
                        "display_name": "Lelouch Lamperouge",
                        "link": "https://stackoverflow.com/users/157880/lelouch-lamperouge"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1323992974,
                    "creation_date": 1323992974,
                    "answer_id": 8528209,
                    "question_id": 8528178,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p><code>zeros=[0]*4</code></p>\n\n<p>you can replace <code>4</code> in the above example with whatever number you want.</p>\n"
                }
            ]
        },
        {
            "29147442": [
                {
                    "owner": {
                        "account_id": 42785,
                        "reputation": 2818,
                        "user_id": 124764,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/b141ea84f47445e24cbfc6e34d30de54?s=256&d=identicon&r=PG",
                        "display_name": "Zada Zorg",
                        "link": "https://stackoverflow.com/users/124764/zada-zorg"
                    },
                    "is_accepted": true,
                    "score": 164,
                    "last_activity_date": 1576601144,
                    "last_edit_date": 1576601144,
                    "creation_date": 1427813412,
                    "answer_id": 29371584,
                    "question_id": 29147442,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This means, that you should rewrite your code as:</p>\n\n<pre><code>logging.debug(\"detect mimetypes faild because %s\", e)\n</code></pre>\n\n<p>According to <a href=\"https://docs.python.org/2/library/logging.html\" rel=\"noreferrer\">https://docs.python.org/2/library/logging.html</a></p>\n\n<blockquote>\n  <p><strong>Logger.debug(msg, *args, **kwargs)</strong></p>\n  \n  <p>... Logs a message with level DEBUG on this logger. <em>The <code>msg</code> is the message format string, and the <code>args</code> are the arguments which are merged into msg using the string formatting operator.</em> (Note that this means that you can use keywords in the format string, together with a single dictionary argument.) ...</p>\n</blockquote>\n"
                }
            ]
        },
        {
            "606516": [
                {
                    "owner": {
                        "account_id": 2279,
                        "reputation": 346658,
                        "user_id": 3153,
                        "user_type": "registered",
                        "accept_rate": 98,
                        "profile_image": "https://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG",
                        "display_name": "Brian R. Bondy",
                        "link": "https://stackoverflow.com/users/3153/brian-r-bondy"
                    },
                    "is_accepted": false,
                    "score": 7,
                    "last_activity_date": 1469808704,
                    "last_edit_date": 1469808704,
                    "creation_date": 1236089811,
                    "answer_id": 606525,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Take a look at <a href=\"http://www.python.org/doc/essays/graphs/\" rel=\"nofollow noreferrer\">this page on implementing graphs in python</a>.</p>\n\n<p>You could also take a look at <a href=\"http://sourceforge.net/projects/pygraphlib/\" rel=\"nofollow noreferrer\">pygraphlib</a> on sourceforge.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 8717,
                        "reputation": 21168,
                        "user_id": 15842,
                        "user_type": "registered",
                        "accept_rate": 59,
                        "profile_image": "https://www.gravatar.com/avatar/58d77327a8f46041462b31c117e5c51a?s=256&d=identicon&r=PG",
                        "display_name": "Gregg Lind",
                        "link": "https://stackoverflow.com/users/15842/gregg-lind"
                    },
                    "is_accepted": true,
                    "score": 275,
                    "last_activity_date": 1418134487,
                    "last_edit_date": 1418134487,
                    "creation_date": 1236094407,
                    "answer_id": 606858,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>There are two excellent choices:</p>\n\n<p><a href=\"http://networkx.github.io/\" rel=\"noreferrer\">NetworkX</a></p>\n\n<p>and </p>\n\n<p><a href=\"http://igraph.org/\" rel=\"noreferrer\">igraph</a></p>\n\n<p>I like NetworkX, but I read good things about igraph as well.  I routinely use NetworkX with graphs with 1 million nodes with no problem (it's about double the overhead of a dict of size V + E)</p>\n\n<p>If you want a feature comparison, see this from the Networkx-discuss list</p>\n\n<p><a href=\"http://groups.google.com/group/networkx-discuss/t/7597ca97abbb3f90?hl=en\" rel=\"noreferrer\">Feature comparison thread</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 1477731,
                        "reputation": 53,
                        "user_id": 1387742,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/53356bf7e7da93b41385899a34b043b3?s=256&d=identicon&r=PG",
                        "display_name": "jtguerin",
                        "link": "https://stackoverflow.com/users/1387742/jtguerin"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1337808784,
                    "creation_date": 1337808784,
                    "answer_id": 10728193,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I second zweiterlinde's suggestion to use python-graph.  I've used it as the basis of a graph-based research project that I'm working on.  The library is well written, stable, and has a good interface.  The authors are also quick to respond to inquiries and reports.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 400276,
                        "reputation": 7738,
                        "user_id": 766172,
                        "user_type": "registered",
                        "accept_rate": 50,
                        "profile_image": "https://www.gravatar.com/avatar/8f581bac48616fc169e922911e652c55?s=256&d=identicon&r=PG",
                        "display_name": "syvex",
                        "link": "https://stackoverflow.com/users/766172/syvex"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1327089452,
                    "creation_date": 1327089452,
                    "answer_id": 8947137,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I'm having the most luck with pydot. Some of the others are hard to install and configure on different platforms like Win 7.</p>\n\n<p><a href=\"http://code.google.com/p/pydot/\" rel=\"nofollow\">http://code.google.com/p/pydot/</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 60601,
                        "reputation": 5251,
                        "user_id": 180962,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/6fa21ab3e7b0fdcc3058400a35aef75b?s=256&d=identicon&r=PG",
                        "display_name": "Tiago Peixoto",
                        "link": "https://stackoverflow.com/users/180962/tiago-peixoto"
                    },
                    "is_accepted": false,
                    "score": 122,
                    "last_activity_date": 1290619497,
                    "creation_date": 1290619497,
                    "answer_id": 4269642,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would like to plug my own graph python library: <a href=\"http://graph-tool.skewed.de\" rel=\"noreferrer\">graph-tool</a>.</p>\n\n<p>It is very fast, since it is implemented in C++ with the Boost Graph Library, and it contains lots of algorithms and extensive documentation.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 20523,
                        "reputation": 1302,
                        "user_id": 49136,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/aed4684d139eb240041898b5dd77b342?s=256&d=identicon&r=PG",
                        "display_name": "lmount",
                        "link": "https://stackoverflow.com/users/49136/lmount"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1236093670,
                    "creation_date": 1236093670,
                    "answer_id": 606808,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Also, you might want to take a look at <a href=\"http://networkx.lanl.gov/\" rel=\"noreferrer\">NetworkX</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 23981,
                        "reputation": 65954,
                        "user_id": 60628,
                        "user_type": "registered",
                        "accept_rate": 74,
                        "profile_image": "https://www.gravatar.com/avatar/837d78446554c800d404141dd0172ccc?s=256&d=identicon&r=PG",
                        "display_name": "Frank",
                        "link": "https://stackoverflow.com/users/60628/frank"
                    },
                    "is_accepted": false,
                    "score": 8,
                    "last_activity_date": 1236090176,
                    "creation_date": 1236090176,
                    "answer_id": 606555,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Use the <a href=\"http://www.osl.iu.edu/~dgregor/bgl-python/\" rel=\"noreferrer\">Boost Graph Library - Python Bindings</a>.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4403,
                        "reputation": 14769,
                        "user_id": 6592,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/9f74f45309e220fa8bfe9478923d5d45?s=256&d=identicon&r=PG",
                        "display_name": "zweiterlinde",
                        "link": "https://stackoverflow.com/users/6592/zweiterlinde"
                    },
                    "is_accepted": false,
                    "score": 33,
                    "last_activity_date": 1236089869,
                    "creation_date": 1236089869,
                    "answer_id": 606529,
                    "question_id": 606516,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Have you looked at <a href=\"http://code.google.com/p/python-graph/\" rel=\"noreferrer\">python-graph</a>?  I haven't used it myself, but the project page looks promising.</p>\n"
                }
            ]
        },
        {
            "4841782": [
                {
                    "owner": {
                        "account_id": 285593,
                        "reputation": 25002,
                        "user_id": 584347,
                        "user_type": "registered",
                        "accept_rate": 100,
                        "profile_image": "https://www.gravatar.com/avatar/ba8cb56177fdcd9e3e0053414d3ad539?s=256&d=identicon&r=PG",
                        "display_name": "Michael J. Barber",
                        "link": "https://stackoverflow.com/users/584347/michael-j-barber"
                    },
                    "is_accepted": true,
                    "score": 189,
                    "last_activity_date": 1369227532,
                    "last_edit_date": 1369227532,
                    "creation_date": 1296374796,
                    "answer_id": 4841855,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Mutable default arguments don't generally do what you want. Instead, try this:</p>\n\n<pre><code>class Node:\n     def __init__(self, wordList=None, adjacencyList=None):\n        if wordList is None:\n            self.wordList = []\n        else:\n             self.wordList = wordList \n        if adjacencyList is None:\n            self.adjacencyList = []\n        else:\n             self.adjacencyList = adjacencyList \n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 954888,
                        "reputation": 9782,
                        "user_id": 980377,
                        "user_type": "registered",
                        "accept_rate": 76,
                        "profile_image": "https://www.gravatar.com/avatar/dc87153c75336a2482935e051b118d01?s=256&d=identicon&r=PG",
                        "display_name": "Shankar Cabus",
                        "link": "https://stackoverflow.com/users/980377/shankar-cabus"
                    },
                    "is_accepted": false,
                    "score": 28,
                    "last_activity_date": 1360102303,
                    "creation_date": 1360102303,
                    "answer_id": 14717983,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<pre><code>class Node:\n    def __init__(self, wordList=None adjacencyList=None):\n        self.wordList = wordList or []\n        self.adjacencyList = adjacencyList or []\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 158237,
                        "reputation": 70834,
                        "user_id": 376728,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/908d58f023f47e0a7d07fc671606341d?s=256&d=identicon&r=PG",
                        "display_name": "aaronasterling",
                        "link": "https://stackoverflow.com/users/376728/aaronasterling"
                    },
                    "is_accepted": false,
                    "score": 38,
                    "last_activity_date": 1296375247,
                    "creation_date": 1296375247,
                    "answer_id": 4841873,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Let's illustrate what's happening here:</p>\n\n<pre><code>Python 3.1.2 (r312:79147, Sep 27 2010, 09:45:41) \n[GCC 4.4.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; class Foo:\n...     def __init__(self, x=[]):\n...         x.append(1)\n... \n&gt;&gt;&gt; Foo.__init__.__defaults__\n([],)\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; Foo.__init__.__defaults__\n([1],)\n&gt;&gt;&gt; f2 = Foo()\n&gt;&gt;&gt; Foo.__init__.__defaults__\n([1, 1],)\n</code></pre>\n\n<p>You can see that the default arguments are stored in a tuple which is an attribute of the function in question. This actually has nothing to do with the class in question and goes for any function. In python 2, the attribute will be <code>func.func_defaults</code>. </p>\n\n<p>As other posters have pointed out, you probably want to use <code>None</code> as a sentinel value and give each instance it's own list. </p>\n"
                },
                {
                    "owner": {
                        "account_id": 36781,
                        "reputation": 1798,
                        "user_id": 105004,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/7721ad87e179e479cf9815ad1cd07412?s=256&d=identicon&r=PG",
                        "display_name": "krousey",
                        "link": "https://stackoverflow.com/users/105004/krousey"
                    },
                    "is_accepted": false,
                    "score": 20,
                    "last_activity_date": 1296374170,
                    "creation_date": 1296374170,
                    "answer_id": 4841812,
                    "question_id": 4841782,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>I would try:</p>\n\n<pre><code>self.wordList = list(wordList)\n</code></pre>\n\n<p>to force it to make a copy instead of referencing the same object.</p>\n"
                }
            ]
        },
        {
            "31252791": [
                {
                    "owner": {
                        "account_id": 23390276,
                        "reputation": 99,
                        "user_id": 17455016,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/4b922e05bc67baf666d7052e31d3691e?s=256&d=identicon&r=PG",
                        "display_name": "Miroslav Petrovic",
                        "link": "https://stackoverflow.com/users/17455016/miroslav-petrovic"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1695999087,
                    "creation_date": 1695999087,
                    "answer_id": 77202924,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>One stupid thing previous version seems to be using <code>Flask</code> while current is using <code>flask</code> make sure that you use flask with lowercase</p>\n"
                },
                {
                    "owner": {
                        "account_id": 18957609,
                        "reputation": 41,
                        "user_id": 13833860,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GhSk8oGXT5N18n7YmhCGjamO2P3ftyqLLDZtgSBeQ=k-s256",
                        "display_name": "Hassan",
                        "link": "https://stackoverflow.com/users/13833860/hassan"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1655988183,
                    "creation_date": 1655988183,
                    "answer_id": 72730373,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>You can also try this workaround <code>set FLASK_DEBUG=1 &amp;&amp; python -m flask run</code>\nIt worked for me</p>\n"
                },
                {
                    "owner": {
                        "account_id": 19925156,
                        "reputation": 31,
                        "user_id": 14600040,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-Im12FcdRMlM/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclM8dxXUpKw7ihG2hEbVe7qqayGOw/s96-c/photo.jpg?sz=256",
                        "display_name": "moist_wrist3",
                        "link": "https://stackoverflow.com/users/14600040/moist-wrist3"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654816725,
                    "creation_date": 1654816725,
                    "answer_id": 72567585,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>you first need to create a Python Environment</p>\n<p>like this:</p>\n<pre><code> py -m venv YOUR_DIR_NAME\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 25297912,
                        "reputation": 11,
                        "user_id": 19122730,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/a/AATXAJwkiI17dm04QyFl4CDDeNPMMXi8L2ouXZJ3fwth=k-s256",
                        "display_name": " Wanjiku",
                        "link": "https://stackoverflow.com/users/19122730/wanjiku"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1654789849,
                    "creation_date": 1654789849,
                    "answer_id": 72563246,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had the same error where it said flask module not found. this is what I did:</p>\n<ol>\n<li>used venv to create a virtual environment $ python3.6 -m venv --without-pip virtual</li>\n<li>activated the virtual environment using source virtual/bin/activate</li>\n<li>downloaded pip into the virtual environment curl <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"nofollow noreferrer\">https://bootstrap.pypa.io/get-pip.py</a> | python</li>\n<li>installed flask using pip install flask</li>\n</ol>\n<p>after running my application, all was good.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4255191,
                        "reputation": 1403,
                        "user_id": 3481069,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/dT0pX.jpg?s=256",
                        "display_name": "sammy ongaya",
                        "link": "https://stackoverflow.com/users/3481069/sammy-ongaya"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1641815691,
                    "last_edit_date": 1641815691,
                    "creation_date": 1556193409,
                    "answer_id": 55848785,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>This is what worked for me when I got a similar error in Windows:</p>\n<ol>\n<li><p>Install virtualenv:</p>\n<pre><code>pip install virtualenv\n</code></pre>\n</li>\n<li><p>Create a virtualenv:</p>\n<pre><code>virtualenv flask\n</code></pre>\n</li>\n<li><p>Navigate to Scripts and activate the virtualenv:</p>\n<pre><code>activate\n</code></pre>\n</li>\n<li><p>Install Flask:</p>\n<pre><code>python -m pip install flask\n</code></pre>\n</li>\n<li><p>Check if flask is installed:</p>\n<pre><code>python -m pip list\n</code></pre>\n</li>\n</ol>\n"
                },
                {
                    "owner": {
                        "account_id": 18502630,
                        "reputation": 117,
                        "user_id": 14443629,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-4-oUMRs_EdE/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckcfjnNBmjl2eEYTw1attCVqEd94A/s96-c/photo.jpg?sz=256",
                        "display_name": "Biku Shah",
                        "link": "https://stackoverflow.com/users/14443629/biku-shah"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1628703420,
                    "creation_date": 1628703420,
                    "answer_id": 68746617,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In your case , the solution is  :</p>\n<p>First:</p>\n<p>Open the  terminal and navigate to the directory/folder where that python file is located ( in ur case the python file you created is run.py) and make sure you have installed flask in that same directory/folder.</p>\n<p>Second :</p>\n<p>Now , type the following command :</p>\n<p>$python3   &quot;pythonfilename&quot; (in ur case, its $python3  &quot;run.py&quot;)</p>\n<p><a href=\"https://i.sstatic.net/yVlxA.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/yVlxA.png\" alt=\"suuceessful\" /></a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6699402,
                        "reputation": 489,
                        "user_id": 5166444,
                        "user_type": "registered",
                        "profile_image": "https://lh3.googleusercontent.com/-eMNIJXeavyY/AAAAAAAAAAI/AAAAAAAApZw/n0GPuCGsiyQ/photo.jpg?sz=256",
                        "display_name": "Enderson Menezes",
                        "link": "https://stackoverflow.com/users/5166444/enderson-menezes"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1627500771,
                    "last_edit_date": 1627500771,
                    "creation_date": 1617045198,
                    "answer_id": 66860236,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>I had a similar problem using WSL and PyCharm / VSCode, the problem only occurred in the development environment and not in production. I realized that IDE's with WSL can have problems when exporting PYTHONPATH from their work directory and I started to do it manually.</p>\n<p>Before running your program and inside a VENV, try running the following command:</p>\n<pre><code>export PYTHONPATH=&quot;path/my_user/code&quot;\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 5512917,
                        "reputation": 61,
                        "user_id": 4378624,
                        "user_type": "registered",
                        "profile_image": "https://lh6.googleusercontent.com/-RqPyuhA5SxM/AAAAAAAAAAI/AAAAAAAAAHs/2edryX19jCs/photo.jpg?sz=256",
                        "display_name": "Bolan Oluwa",
                        "link": "https://stackoverflow.com/users/4378624/bolan-oluwa"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1611914887,
                    "creation_date": 1611914887,
                    "answer_id": 65952422,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The simplest answer to this problem is specifying the correct path to flask in your environment. Make sure the script you are running knows how to get to the flask installation. Using print(sys.path) as mentioned above certainly helped to figure out the path(s) the script was using.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 5404214,
                        "reputation": 2303,
                        "user_id": 4303196,
                        "user_type": "registered",
                        "profile_image": "https://lh4.googleusercontent.com/-At8dHdjZue4/AAAAAAAAAAI/AAAAAAAAA1A/LNQh2L2c3QQ/photo.jpg?sz=256",
                        "display_name": "Rollback",
                        "link": "https://stackoverflow.com/users/4303196/rollback"
                    },
                    "is_accepted": true,
                    "score": 217,
                    "last_activity_date": 1602047577,
                    "last_edit_date": 1602047577,
                    "creation_date": 1436210448,
                    "answer_id": 31253927,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try deleting the virtualenv you created.  Then create a new virtualenv with:</p>\n<pre><code>virtualenv flask\n</code></pre>\n<p>Then:</p>\n<pre><code>cd flask\n</code></pre>\n<p>Now let's activate the virtualenv</p>\n<pre><code>source bin/activate\n</code></pre>\n<p>Now you should see <code>(flask)</code> on the left of the command line.</p>\n<p><sub>Edit: In windows there is no &quot;source&quot; that's a linux thing, instead execute the activate.bat file, here I do it using Powershell: PS C:\\DEV\\aProject&gt; <code>&amp; .\\Flask\\Scripts\\activate</code>)\n</sub></p>\n<p>Let's install flask:</p>\n<pre><code>pip install flask\n</code></pre>\n<p>Then create a file named <code>hello.py</code> (NOTE: see <code>UPDATE Flask 1.0.2</code> below):</p>\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n\nif __name__ == &quot;__main__&quot;:\n    app.run()\n</code></pre>\n<p>and run it with:</p>\n<pre><code>python hello.py\n</code></pre>\n<p><strong>UPDATE Flask 1.0.2</strong></p>\n<p>With the new flask release there is no need to run the app from your script.  <code>hello.py</code> should look like this now:</p>\n<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n</code></pre>\n<p>and run it with:</p>\n<pre><code>FLASK_APP=hello.py flask run\n</code></pre>\n<p>Make sure to be inside the folder where <code>hello.py</code> is when running the latest command.</p>\n<p><em>All the steps before the creation of the hello.py apply for this case as well</em></p>\n"
                },
                {
                    "owner": {
                        "account_id": 16118288,
                        "reputation": 2020,
                        "user_id": 11634814,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/83c37c4fd3df4bbe9e197763b8e97061?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Evan",
                        "link": "https://stackoverflow.com/users/11634814/evan"
                    },
                    "is_accepted": false,
                    "score": 12,
                    "last_activity_date": 1597879874,
                    "creation_date": 1597879874,
                    "answer_id": 63496318,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Another thing - if you're using python3, make sure you are starting your server with <code>python3 server.py</code>, not <code>python server.py</code></p>\n"
                },
                {
                    "owner": {
                        "account_id": 10888646,
                        "reputation": 111,
                        "user_id": 11554981,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/96c4009e71b87605a7d63bb0f9211e6d?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Ashish Bansal",
                        "link": "https://stackoverflow.com/users/11554981/ashish-bansal"
                    },
                    "is_accepted": false,
                    "score": 2,
                    "last_activity_date": 1577619054,
                    "creation_date": 1577619054,
                    "answer_id": 59518989,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>If you are using Pycharm then this is the virtual environment issue.</p>\n\n<p>So, at the time of creating your Python project you will have to select \"Existing interpreter\" option -> click \"system Interpreter\" -> select the correct option for example \"*\\AppData\\Local\\Programs\\Python\\Python3.6\\python.exe\".</p>\n\n<p>You can use 'New Virtual Env' as well, but I have just given the quick fix that should work for Pycharm users.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 4479322,
                        "reputation": 789,
                        "user_id": 3643534,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/orgqV.jpg?s=256",
                        "display_name": "hossein andarkhora",
                        "link": "https://stackoverflow.com/users/3643534/hossein-andarkhora"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1570102620,
                    "creation_date": 1570102620,
                    "answer_id": 58218345,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>my answer just for any users that use Visual Studio Flesk Web project :</p>\n\n<p>Just Right Click on \"Python Environment\" and Click to \"Add Environment\"</p>\n"
                },
                {
                    "owner": {
                        "account_id": 141806,
                        "reputation": 24792,
                        "user_id": 349100,
                        "user_type": "registered",
                        "accept_rate": 78,
                        "profile_image": "https://i.sstatic.net/wBuM3.png?s=256",
                        "display_name": "Sonic Soul",
                        "link": "https://stackoverflow.com/users/349100/sonic-soul"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1568824089,
                    "last_edit_date": 1568824089,
                    "creation_date": 1568813082,
                    "answer_id": 57993855,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>in my case using Docker, my .env file was not copied, so the following env vars were not set: </p>\n\n<p>.env.local:\n<code>FLASK_APP=src/app.py</code></p>\n\n<p>so in my <code>Dockerfile</code> i had to include:</p>\n\n<pre><code>FROM deploy as dev\nCOPY env ./env\n</code></pre>\n\n<p>which was referenced in docker-compose.yml </p>\n\n<p><code>env_file: ./env/.env.local</code></p>\n\n<p>another thing i had to pay attention to is the path variable to ensure my environment is used</p>\n\n<pre><code>ENV PATH $CONDA_DIR/envs/:my_environment_name_from_yml_file:/bin:$CONDA_DIR/bin:$PATH```\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 13764845,
                        "reputation": 5946,
                        "user_id": 9935932,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/09356d88b6bcd282f3453f288f63dd40?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yasin lachini",
                        "link": "https://stackoverflow.com/users/9935932/yasin-lachini"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1556729142,
                    "creation_date": 1556729142,
                    "answer_id": 55939618,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>The flask script is nice to start a local development server, but you would have to\nrestart it manually after each change to your code. That is not very nice and Flask can\ndo better. If you enable debug support the server will reload itself on code changes,\nand it will also provide you with a helpful debugger if things go wrong.\nTo enable debug mode you can export the FLASK_DEBUG environment variable before\nrunning the server:\nforexample your file is hello.py</p>\n\n<pre><code>$ export FLASK_APP=hello.py\n$ export FLASK_DEBUG=1\n$ flask run\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 8909308,
                        "reputation": 171,
                        "user_id": 10408972,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-Vr78HId6XzU/AAAAAAAAAAI/AAAAAAAAACU/9yfYuRsyguw/photo.jpg?sz=256",
                        "display_name": "Bogdan001",
                        "link": "https://stackoverflow.com/users/10408972/bogdan001"
                    },
                    "is_accepted": false,
                    "score": 17,
                    "last_activity_date": 1544341243,
                    "last_edit_date": 1544341243,
                    "creation_date": 1537806316,
                    "answer_id": 52483594,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>After activating the virtual environment and installing Flask, I created an app.py file. I run it like this : <code>python -m flask run</code>. Hope this will help! </p>\n"
                },
                {
                    "owner": {
                        "account_id": 3859023,
                        "reputation": 2837,
                        "user_id": 3197202,
                        "user_type": "registered",
                        "accept_rate": 53,
                        "profile_image": "https://i.sstatic.net/xzntl.jpg?s=256",
                        "display_name": "ivanacorovic",
                        "link": "https://stackoverflow.com/users/3197202/ivanacorovic"
                    },
                    "is_accepted": false,
                    "score": -1,
                    "last_activity_date": 1542461809,
                    "creation_date": 1542461809,
                    "answer_id": 53351751,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>It worked for me after upgrading pip:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre>\n\n<p>Found that answer here: <a href=\"https://stackoverflow.com/a/49748494/3197202\">https://stackoverflow.com/a/49748494/3197202</a></p>\n\n<p>Then I could just install flask:</p>\n\n<pre><code>pip install flask\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 9513480,
                        "reputation": 386,
                        "user_id": 7070685,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/0d900c98da5cb6e324675484fdb4180a?s=256&d=identicon&r=PG",
                        "display_name": "rawplutonium",
                        "link": "https://stackoverflow.com/users/7070685/rawplutonium"
                    },
                    "is_accepted": false,
                    "score": 10,
                    "last_activity_date": 1538658554,
                    "creation_date": 1538658554,
                    "answer_id": 52647566,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>this is what worked for me,</p>\n\n<p><code>sudo -H pip install flask</code> </p>\n\n<p>Or for pip3(python3) use :</p>\n\n<p><code>sudo -H pip3 install flask</code></p>\n\n<p><em>Sidenote</em></p>\n\n<p>If you're using virtualenv it's a good idea to \n<code>pip freeze &gt;&gt; requirements.txt</code> \nto allow for the installed packages to be listed in one place.\nThe <code>sudo</code> command and <code>-H</code> flag. For more on <code>sudo</code>'s <code>-H</code> flag, look at <a href=\"https://stackoverflow.com/users/161711/paul-thompson\">Paul's</a> <a href=\"https://stackoverflow.com/a/28619739/7070685\">answer</a>.\nHope this helps you.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 7163608,
                        "reputation": 3,
                        "user_id": 5473530,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/dd58e338e08309f14d28256dbfa581e1?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Tao W",
                        "link": "https://stackoverflow.com/users/5473530/tao-w"
                    },
                    "is_accepted": false,
                    "score": 0,
                    "last_activity_date": 1534884635,
                    "creation_date": 1534884635,
                    "answer_id": 51956530,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>enter your python interactive mode\nthen:</p>\n\n<p><code>import sys</code></p>\n\n<p><code>sys.path</code></p>\n\n<p>it will print your path. Check wether flask is installed in the sys.path.</p>\n\n<p>For MacOS, python path is under \n/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages</p>\n\n<p>But pip'll install python package by default under\n/Library/Python/2.7/site-packages</p>\n\n<p>That's why it doesn't work for MacOS.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 796645,
                        "reputation": 270,
                        "user_id": 900970,
                        "user_type": "registered",
                        "accept_rate": 94,
                        "profile_image": "https://www.gravatar.com/avatar/0a05d103b7a78c952562f57297ce4dae?s=256&d=identicon&r=PG",
                        "display_name": "Abid",
                        "link": "https://stackoverflow.com/users/900970/abid"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1529612436,
                    "creation_date": 1529612436,
                    "answer_id": 50976880,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>In my case the solution was as simple as starting up my virtual environment like so:</p>\n\n<p><code>$ venv/scripts/activate</code></p>\n\n<p>It turns out I am still fresh to Python :)</p>\n"
                },
                {
                    "owner": {
                        "account_id": 12020643,
                        "reputation": 2545,
                        "user_id": 8794168,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/c7038d08b04c8e70a8c87d05c5ddf350?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "yunus",
                        "link": "https://stackoverflow.com/users/8794168/yunus"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1526540879,
                    "last_edit_date": 1526540879,
                    "creation_date": 1525780844,
                    "answer_id": 50233100,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Even i too suggest u virtualenv,\nThis might also solve ur problem. </p>\n\n<pre><code>sudo apt install python-flask\n</code></pre>\n\n<p>If u want to deploy in productionserver then go ahead with above solution else use virtualenv.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 902053,
                        "reputation": 1656,
                        "user_id": 5823681,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/LApms.jpg?s=256",
                        "display_name": "khd",
                        "link": "https://stackoverflow.com/users/5823681/khd"
                    },
                    "is_accepted": false,
                    "score": 89,
                    "last_activity_date": 1509823132,
                    "creation_date": 1509823132,
                    "answer_id": 47114637,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>For python 3 use</p>\n\n<blockquote>\n  <p>pip3 install flask</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 12009401,
                        "reputation": 36,
                        "user_id": 8786686,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/03ae517e716ea8c80ffbe435cc09d0c0?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "Miguel",
                        "link": "https://stackoverflow.com/users/8786686/miguel"
                    },
                    "is_accepted": false,
                    "score": 1,
                    "last_activity_date": 1508192341,
                    "last_edit_date": 1508192341,
                    "creation_date": 1508188098,
                    "answer_id": 46779129,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>Go to the flask file in microblog, then activate the virtual environment with <code>source bin/activate</code>, then go to flask/bin and install flask, and the rest of the packages, <code>pip install flask</code>. You will see flask listed inside bin directory. Try to run <code>./run.py</code> again from microblog (or from wherever you have the file).</p>\n"
                },
                {
                    "owner": {
                        "account_id": 11231918,
                        "reputation": 31,
                        "user_id": 8239653,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/AnjlW.jpg?s=256",
                        "display_name": "NingAnMe",
                        "link": "https://stackoverflow.com/users/8239653/ninganme"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1503562867,
                    "last_edit_date": 1503562867,
                    "creation_date": 1500016667,
                    "answer_id": 45096984,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<ol>\n<li>Edit\n<code>/etc/apache2/sites-available/FlaskApp.conf</code></li>\n<li>Add the following two lines before the \"WSGIScriptAlias\" line:</li>\n</ol>\n\n<p><code>WSGIDaemonProcess FlaskApp python-home=/var/www/FlaskApp/FlaskApp/venv/FlaskApp</code>\n<code>WSGIProcessGroup FlaskApp</code></p>\n\n<ol start=\"3\">\n<li>Restart Apache:<code>service apache2 restart</code></li>\n</ol>\n\n<p>I'm following the Flask tutorial too.And I met the same problem.I found this way to fix it.</p>\n\n<p><a href=\"http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\" rel=\"nofollow noreferrer\">http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 6244817,
                        "reputation": 337,
                        "user_id": 4857156,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/EfJNj.jpg?s=256",
                        "display_name": "Norman Pilusa",
                        "link": "https://stackoverflow.com/users/4857156/norman-pilusa"
                    },
                    "is_accepted": false,
                    "score": 3,
                    "last_activity_date": 1502905926,
                    "creation_date": 1502905926,
                    "answer_id": 45720077,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I was using python2 but installed this:\nsudo apt-get install libapache2-mod-wsgi-py3</p>\n\n<p>Instead of:\nsudo apt-get install libapache2-mod-wsgi</p>\n\n<p>Correcting the installation solved the no flask problem.</p>\n"
                },
                {
                    "owner": {
                        "account_id": 9155927,
                        "reputation": 583,
                        "user_id": 6808881,
                        "user_type": "registered",
                        "profile_image": "https://i.sstatic.net/sUyGg.jpg?s=256",
                        "display_name": "aneesh joshi",
                        "link": "https://stackoverflow.com/users/6808881/aneesh-joshi"
                    },
                    "is_accepted": false,
                    "score": 13,
                    "last_activity_date": 1498106431,
                    "creation_date": 1498106431,
                    "answer_id": 44690276,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>I had a similar problem with flasgger.</p>\n\n<p>The reason for that was that I always use </p>\n\n<p><code>sudo pip install flask</code> </p>\n\n<p>but for some reason that's not always the way to go.\nSometimes, you have to do just</p>\n\n<p><code>pip install flask</code></p>\n\n<p>Another gotcha is that sometimes people type <code>pip install Flask</code> with the <strong>cap F</strong></p>\n\n<p>Posting this here in case somebody gets stuck.\nLet me know if it helped.</p>\n\n<p>Useful Link:\n<a href=\"https://stackoverflow.com/questions/33068758/what-is-the-difference-between-pip-install-and-sudo-pip-install\">What is the difference between pip install and sudo pip install?</a></p>\n"
                },
                {
                    "owner": {
                        "account_id": 5749016,
                        "reputation": 2590,
                        "user_id": 4539359,
                        "user_type": "registered",
                        "profile_image": "https://lh5.googleusercontent.com/-vPFpmaoG8AY/AAAAAAAAAAI/AAAAAAAAAGI/pARutC9UK00/photo.jpg?sz=256",
                        "display_name": "Julian",
                        "link": "https://stackoverflow.com/users/4539359/julian"
                    },
                    "is_accepted": false,
                    "score": 15,
                    "last_activity_date": 1496295514,
                    "creation_date": 1496295514,
                    "answer_id": 44299274,
                    "question_id": 31252791,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>The only way I could solve was by adding my users python dir to myapp.wsgi file. As an example:</p>\n\n<pre><code>sys.path.append('/home/deployer/anaconda3/lib/python3.5/site-packages')\n</code></pre>\n\n<p>I guess that if you install the packages in the global enviroment, you should have no problem, but I had my python packages installed as user.</p>\n"
                }
            ]
        },
        {
            "1810743": [
                {
                    "owner": {
                        "account_id": 24377,
                        "reputation": 835620,
                        "user_id": 61974,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG",
                        "display_name": "Mark Byers",
                        "link": "https://stackoverflow.com/users/61974/mark-byers"
                    },
                    "is_accepted": true,
                    "score": 1054,
                    "last_activity_date": 1670485253,
                    "last_edit_date": 1670485253,
                    "creation_date": 1259359199,
                    "answer_id": 1810760,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<p>Try <a href=\"http://docs.python.org/library/os.html#os.chdir\" rel=\"noreferrer\"><code>os.chdir</code></a></p>\n<blockquote>\n<pre><code>import os\nos.chdir(path)\n</code></pre>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Change the current working directory to path. Availability: Unix, Windows.</p>\n</blockquote>\n"
                },
                {
                    "owner": {
                        "account_id": 7698533,
                        "reputation": 1101,
                        "user_id": 5832044,
                        "user_type": "unregistered",
                        "profile_image": "https://www.gravatar.com/avatar/8ce16224fea79f384d0101ccfd70aeb3?s=256&d=identicon&r=PG",
                        "display_name": "dinesh",
                        "link": "https://stackoverflow.com/users/5832044/dinesh"
                    },
                    "is_accepted": false,
                    "score": 73,
                    "last_activity_date": 1540539385,
                    "last_edit_date": 1540539385,
                    "creation_date": 1453606881,
                    "answer_id": 34971949,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 4.0",
                    "body": "<pre><code>import os\nprint os.getcwd()  # Prints the current working directory\n</code></pre>\n\n<p>To set the working directory:</p>\n\n<pre><code>os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')  # Provide the new path here\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 11362307,
                        "reputation": 367,
                        "user_id": 8330151,
                        "user_type": "registered",
                        "profile_image": "https://www.gravatar.com/avatar/56e61c961199972cf5e1dd08a98b5717?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "PritamJ",
                        "link": "https://stackoverflow.com/users/8330151/pritamj"
                    },
                    "is_accepted": false,
                    "score": 16,
                    "last_activity_date": 1504163669,
                    "creation_date": 1504163669,
                    "answer_id": 45975442,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 3.0",
                    "body": "<p>It work for <strong>Mac</strong> also </p>\n\n<pre><code>import os\npath=\"/Users/HOME/Desktop/Addl Work/TimeSeries-Done\"\nos.chdir(path)\n</code></pre>\n\n<p>To check working directory</p>\n\n<pre><code>os.getcwd()\n</code></pre>\n"
                },
                {
                    "owner": {
                        "account_id": 64585,
                        "reputation": 876871,
                        "user_id": 190597,
                        "user_type": "registered",
                        "accept_rate": 88,
                        "profile_image": "https://www.gravatar.com/avatar/8f7683207b9fcc8e77120265517f7ce9?s=256&d=identicon&r=PG&f=y&so-version=2",
                        "display_name": "unutbu",
                        "link": "https://stackoverflow.com/users/190597/unutbu"
                    },
                    "is_accepted": false,
                    "score": 153,
                    "last_activity_date": 1259359209,
                    "creation_date": 1259359209,
                    "answer_id": 1810762,
                    "question_id": 1810743,
                    "content_license": "CC BY-SA 2.5",
                    "body": "<p>Perhaps this is what you are looking for:</p>\n\n<pre><code>import os\nos.chdir(default_path)\n</code></pre>\n"
                }
            ]
        }
    ]
}